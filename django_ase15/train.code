 django_dir = os . path . normpath ( os . path . join ( os . path . dirname ( django . __file__ ) ) )
                  raise ValueError ( 'Unable to add handler %r: %s' % ( h , e ) )
                  exp = datetime . max
                if isinstance ( content , EmailMessage ) :
 raise TemplateDoesNotExist ( name )
 week_number = j // 7
                              extra_params [ 'primary_key' ] = True
  self . cleaned_data = { }
  return not ( ( converter ( opts . db_table ) in tables ) or  ( opts . auto_created and converter ( opts . auto_created . _meta . db_table ) in tables ) )
  errors = [ ]
 if not isinstance ( error , ValidationError ) :
 __eq__ = new_method_proxy ( operator . eq )
                              field_type = 'NullBooleanField('
 from django . utils import six
 token = parser . next_token ( )
          return False
     class SplitHiddenDateTimeWidget ( SplitDateTimeWidget ) :
 if isinstance ( callback , functools . partial ) :
           raise parser . error_class (  "Not expecting '%s' in this position in if tag." % self . id  )
 translators_comment_start = None
              subcommand_cls = self . fetch_command ( cwords [ 0 ] )
 call_command ( "migrate" , ** options )
 if html_message :
 return self . _size
 _func_globals = "__globals__"
 return '' . join ( output )
    if opts . model :
   def _close_files ( self ) :
 self . clear_cdata_mode ( )
 if isinstance ( elt , Group ) :
 return candidate_pat % candidate_subs
   if _samefile ( old_file_name , new_file_name ) :
              self . stream . write ( "\n" )
 self . origin = origin
 doublecolon_len = 0
  ip_str = _sanitize_ipv4_mapping ( ip_str )
                              try :
   if new_name . endswith ( '_' ) :
          j = 36 ** factor
    @ register . filter ( is_safe = False )
 self . _remaining = length
  def render ( self , context ) :
           fks_to_parent = [  f for f in opts . fields  if isinstance ( f , ForeignKey )  and ( f . rel . to == parent_model  or f . rel . to in parent_model . _meta . get_parent_list ( ) )  ]
              return self . _caches . caches [ alias ]
                  attrs [ 'max' ] = self . max_value
          super ( MultiValueDict , self ) . __init__ ( key_to_list_mapping )
          super ( MovedModule , self ) . __init__ ( name )
  else :
 from django . utils . functional import allow_lazy
  except ( HTMLParseError , UnboundLocalError ) :
                      value = None
     class SafeBytes ( bytes , SafeData ) :
     class ChoiceField ( Field ) :
 from django . forms . formsets import BaseFormSet , formset_factory
              params = params [ 1 : ]
   def __ne__ ( self , other ) :
 return filter_func
 result . append ( ch )
  else :
 self . _fname = os . path . join ( self . file_path , fname )
 if six . PY2 :
 for name in bits [ 1 : - 2 ] :
 return getattr ( _prefixes , "value" , '/' )
 from django . utils . functional import cached_property
 if unpack :
    else :
   class BadSignature ( Exception ) :
 from django . utils . encoding import python_2_unicode_compatible
          return self . msg % tuple ( force_text ( p , errors = 'replace' ) for p in self . params )
 if settings . configured :
          for k , v in self . _iteritems ( ) :
 import warnings
  context_extras = { }
  if current_app and current_app in app_list :
    def add_prefix ( self , index ) :
   def __iter__ ( self ) :
                  handler . addQuickElement ( "uri" , self . feed [ 'author_link' ] )
     def parse_http_date_safe ( date ) :
   if hasattr ( filter_func , "_decorated_function" ) :
 from django . utils . encoding import smart_text , force_str , force_text
  from django . core . exceptions import ValidationError , NON_FIELD_ERRORS
          for dict_ in self . dicts :
                      yield line
 excludes = options . get ( 'exclude' )
  def __init__ ( self , schemes = None , ** kwargs ) :
          value = ugettext ( "%s GB" ) % filesize_number_format ( bytes / GB )
 cls . _delegate_text = six . text_type in resultclasses
 option = '--testrunner='
 if not isabs ( path ) :
          parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS , help = 'Nominates a database onto which to '  'open a shell. Defaults to the "default" database.' )
 memo [ id ( self ) ] = obj
   def setdefault ( self , key , default = None ) :
    forms = ' ' . join ( form . as_table ( ) for form in self )
 for character in name :
 msg += '\n%s:\n%s\n' % ( group_name , formatted )
              return match . group ( 0 )
   def __bytes_cast ( self ) :
   def reset_format_cache ( ) :
  with context . push ( ** values ) :
     @ contextlib . contextmanager
  unencoded_ampersands_re = re . compile ( r'&(?!(\w+|#\d+);)' )
 cursor . execute (  connections [ db ] . ops . cache_key_culling_sql ( ) % table ,  [ cull_num ] )
 parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
      class LabelCommand ( BaseCommand ) :
   attrs = attrs or { }
   for check in checks :
   else :
      status_code = 404
    else :
                                          cursor . execute ( sql )
 def cycle ( parser , token ) :
  return lazy ( func , * resultclasses ) ( * args , ** kwargs )
 param = elt [ 1 ]
          raise TemplateSyntaxError ( "'%s' cannot appear more than once in the same template" % bits [ 0 ] )
                          try :
 app_dirs . append ( os . path . normpath ( os . path . join ( app_dir , 'sql' ) ) )
                  raise CommandError ( "App '%s' does not have migrations (you cannot selectively sync unmigrated apps)" % app_label )
 from django . utils . deprecation import RemovedInDjango19Warning
 if p_pattern . startswith ( '^' ) :
                          cursor . execute ( line )
  password = force_bytes ( password )
  yield buf
           return timezone . tzname ( None )
 for path in collect :
                  definition [ 'opts' ] = opts
                  raise base . DeserializationError ( "<field> node is missing the 'name' attribute" )
 if sent :
      def inner ( self , * args ) :
  try :
   cull_frequency = params . get ( 'cull_frequency' , options . get ( 'CULL_FREQUENCY' , 3 ) )
 self . key_func = get_key_func ( params . get ( 'KEY_FUNCTION' , None ) )
   def utcoffset ( self , dt ) :
  def add_arguments ( self , parser ) :
              handler . addQuickElement ( "summary" , item [ 'description' ] , { "type" : "html" } )
    class RendererMixin ( object ) :
              pass
          ch = None
 try :
  except ( LookupError , BinasciiError ) as e :
 result_args = new_args
 paths = [ force_text ( p ) for p in paths ]
              app_configs = [ app_config ]
              if event == "START_ELEMENT" and node . nodeName == "object" :
  if data is None :
 import tempfile
 self . target_var = target_var
     return text
 if len ( bits ) > 2 :
              try :
 def __init__ ( self , language ) :
    def j ( self ) :
                  value = related . natural_key ( )
 if ch in '*?+' :
       if transaction . get_autocommit ( self . using ) :
 super ( TemplateIfParser , self ) . __init__ ( * args , ** kwargs )
 for operation in migration . merged_operations :
    templatetags_modules = [ ]
  except AttributeError :
 for field in concrete_model . _meta . local_fields :
  parser . add_argument ( '--settings' ,  help = 'The Python path to a settings module, e.g. "myproject.settings.main". If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.' )
 import random as random_module
 if construct :
 if limit_choices_to is not None :
 collect . extend ( settings . TEMPLATE_CONTEXT_PROCESSORS )
  self . connection = None
  with open ( new_path , 'wb' ) as new_file :
 from django . utils import six
   def validate_unique ( self ) :
 for base in reversed ( new_class . __mro__ ) :
 from django . utils . encoding import force_bytes , python_2_unicode_compatible
 raise NotImplementedError ( "This backend doesn't support absolute paths." )
          max_num = 1
  self . setlist ( key , default_list )
  exp = exp . replace ( microsecond = 0 )
    try :
  else :
              return text
 import datetime
 meta = getattr ( form , 'Meta' , None )
                  self . connection . quit ( )
              raise ValueError ( "@python_2_unicode_compatible cannot be applied "  "to %s because it doesn't define __str__()." %  klass . __name__ )
  cleaned_data = form . cleaned_data
    def setdefault ( self , key , default ) :
 from django . utils . encoding import force_text , python_2_unicode_compatible
    def send_messages ( self , email_messages ) :
  elif not callable ( formfield_callback ) :
 nodelist = parser . parse ( )
              doublecolon_len += 1
 return mark_safe ( _urlize ( value , trim_url_limit = int ( limit ) , nofollow = True ,  autoescape = autoescape ) )
  try :
                  return getattr ( instance , name ) ( )
 self . base = base
  def module_has_submodule ( package , module_name ) :
 month = months [ date . month - 1 ]
          pass
           raise parser . error_class (  "Not expecting '%s' as infix operator in if tag." % self . id  )
 if i < 36 ** factor :
   def __str__ ( self ) :
          length = int ( arg )
 if not m :
  func = getattr ( func , '_decorated_function' , func )
 parser . add_argument ( '--tag' , '-t' , action = 'append' , dest = 'tags' ,  help = 'Run only checks labeled with given tag.' )
              file . seek ( file_pos )
  old_style_list = True
          return delattr ( caches [ DEFAULT_CACHE_ALIAS ] , name )
    def __enter__ ( self ) :
              if self . count == 0 and not self . allow_empty_first_page :
 stamp = _time . mktime ( tt )
 FormSet . model = model
      from django . conf . locale import LANG_INFO
 kwargs = { }
      class TokenParser ( object ) :
   app_label , migration_name = options [ 'app_label' ] , options [ 'migration_name' ]
    @ register . filter ( is_safe = False )
 for name in filters :
   return __wrapper__
          return number_format ( value )
                  model_list . append ( model )
          HTMLParser = _html_parser . HTMLParser
 try :
                  self . stdout . write ( "Cleaning up temporary files.\n" )
  new_environ = os . environ . copy ( )
  else :
  except TypeError :
 self . _exception_middleware = [ ]
  return attrs
              k , v = x , True
          self . _cache . disconnect_all ( )
   if TYPE == RAW :
          return ""
 if props :
              self . stream . write ( "\n" )
          return mark_safe ( value )
          if not hasattr ( self , '_queryset' ) :
  import datetime
  elif isinstance ( self . obj , models . base . ModelBase ) :
      builtins . append ( import_library ( module ) )
 raise
 supported_platform = plat != 'Pocket PC' and ( plat != 'win32' or  'ANSICON' in os . environ )
                  if hasattr ( e , 'code' ) and e . code in self . error_messages :
 SINGLE_BRACE_START = '{'
   else :
              return None
   def lazy_number ( func , resultclass , number = None , ** kwargs ) :
          module_path , class_name = dotted_path . rsplit ( '.' , 1 )
  except ImportError :
  except LookupError :
 return list ( chain ( * errors ) )
   return format_html ( self . outer_html ,  id_attr = format_html ( ' id="{0}"' , id_ ) if id_ else '' ,  content = mark_safe ( '\n' . join ( output ) ) )
                      app = app . rpartition ( '.' ) [ - 1 ]
              self . _cache [ key ] = pickled
                          if not field_desc . endswith ( '(' ) :
          return self . tokens . pop ( 0 )
 from django . utils import six
 self . filters = { }
 from django . utils import six , lru_cache
 def content ( self , value ) :
                  serializers . serialize ( format , get_objects ( ) , indent = indent ,  use_natural_foreign_keys = use_natural_foreign_keys ,  use_natural_primary_keys = use_natural_primary_keys ,  stream = stream or self . stdout )
                  return '%s-%s-%s' % ( y , m , d )
          return self . __class__ ( * self . dicts )
    else :
 from django . db import models , DEFAULT_DB_ALIAS
          if data_list :
     @ deconstructible
  else :
              self . message = message
          self . require_all_fields = kwargs . pop ( 'require_all_fields' , True )
                use_null_fallback = False
  except ValueError :
  test_runner_class = get_runner ( settings , self . test_runner )
          self . file = file_name
 value = None
          raise ValueError ( "Base36 input too large" )
          raise ValueError ( "The %s could not be %s because the data didn't"  " validate." % ( opts . object_name , fail_message ) )
  def lock ( f , flags ) :
      choice_input_class = CheckboxChoiceInput
    def get_deserializer ( format ) :
  except ValueError :
 try :
              self . months = MONTHS
      def python_reloader ( main_func , args , kwargs ) :
          raise TemplateSyntaxError ( "'%s' takes one argument" % bits [ 0 ] )
 if trim :
                      raise
 from django . utils . functional import allow_lazy
  return self . handle_noargs ( ** options )
          return [  Warning (  "Some project unittests may not execute as expected." ,  hint = ( "Django 1.6 introduced a new default test runner. It looks like "  "this project was generated using Django 1.5 or earlier. You should "  "ensure your tests are all running & behaving as expected. See "  "https://docs.djangoproject.com/en/dev/releases/1.6/#new-test-runner "  "for more information." ) ,  obj = None ,  id = '1_6.W001' ,  )  ]
   def render ( self , name = None , value = None , attrs = None , choices = ( ) ) :
     class MultiValueField ( Field ) :
     if hasattr ( response , 'render' ) and callable ( response . render ) :
      help = 'Installs the named fixture(s) in the database.'
 final_output . extend ( alter_sql )
  if data is None :
 try :
          return s
 char2number = { 'a' : '2' , 'b' : '2' , 'c' : '2' , 'd' : '3' , 'e' : '3' , 'f' : '3' ,  'g' : '4' , 'h' : '4' , 'i' : '4' , 'j' : '5' , 'k' : '5' , 'l' : '5' , 'm' : '6' ,  'n' : '6' , 'o' : '6' , 'p' : '7' , 'q' : '7' , 'r' : '7' , 's' : '7' , 't' : '8' ,  'u' : '8' , 'v' : '8' , 'w' : '9' , 'x' : '9' , 'y' : '9' , 'z' : '9' }
    _urllib_error_moved_attributes = [  MovedAttribute ( "URLError" , "urllib2" , "urllib.error" ) ,  MovedAttribute ( "HTTPError" , "urllib2" , "urllib.error" ) ,  MovedAttribute ( "ContentTooShortError" , "urllib" , "urllib.error" ) ,  ]
              return
    @ property
       class LazyStream ( six . Iterator ) :
   def __bool__ ( self ) :
          cache_timeout = settings . CACHE_MIDDLEWARE_SECONDS
  if fields and f . name not in fields :
                  if self . directory_permissions_mode is not None :
              params = [ ]
   if self . can_import_settings :
                      continue
 if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
  try :
 t = super ( SafeText , self ) . __add__ ( rhs )
 self . exit_command ( )
   self . check_test = boolean_check if check_test is None else check_test
              return list ( error ) [ 0 ]
 i = j + 1
 try :
  import re
          pass
  else :
 binary_type = bytes
              continue
              raise UnrecognizedArchiveFormat (  "Path not a recognized archive format: %s" % filename )
              msg = self . style . HTTP_INFO ( msg )
          if hasattr ( value , '_meta' ) :
 from django . core . files import temp as tempfile
   def extract ( self , to_path ) :
 self . warning = warning
 year = year + off
      def __init__ ( self , * args , ** kwargs ) :
   else :
   def s ( self ) :
                  self . remove_potfiles ( )
    def get_declared_fields ( bases , attrs , with_base_fields = True ) :
              defaults [ 'empty_permitted' ] = True
   def register ( self , * tags ) :
              localedir = os . path . join ( app_config . path , 'locale' )
   def value_from_datadict ( self , data , files , name ) :
 context . autoescape = self . setting
   return new_value
              ret = fcntl . flock ( _fd ( f ) , fcntl . LOCK_UN )
  else :
          p = int ( arg )
              self . years = years
   DEFAULT_MAX_NUM = 1000
 got_request_exception = Signal ( providing_args = [ "request" ] )
   self . _callback = get_callable ( self . _callback_str )
   else :
                              title += " (%s squashed migrations)" % len ( graph . nodes [ plan_node ] . replaces )
          loader , args = loader [ 0 ] , loader [ 1 : ]
  hex_format_string = "%%0%ix" % ( hlen * 2 )
   domain , port = split_domain_port ( host )
                  try :
              if isinstance ( node , Node ) :
 for i , word in enumerate ( words ) :
   class Command ( AppCommand ) :
 for site in sites :
      def become_daemon ( our_home_dir = '.' , out_log = None , err_log = None , umask = 0o022 ) :
   def G ( self ) :
 failures = test_runner . run_tests ( test_labels )
 default_error_messages = {  'list' : _ ( 'Enter a list of values.' ) ,  'invalid_choice' : _ ( 'Select a valid choice. %(value)s is not one of the'  ' available choices.' ) ,  'invalid_pk_value' : _ ( '"%(pk)s" is not a valid value for a primary key.' )  }
     class Critical ( CheckMessage ) :
          self . coerce = kwargs . pop ( 'coerce' , lambda val : val )
 return { }
  elif timeout == 0 :
                      if not table_name_filter ( table_name ) :
 try :
  else :
 import re
 column_name = row [ 0 ]
          for var in self . vars :
   def render ( self , context ) :
   def validate ( self , value ) :
                  if field . serialize :
 raise NotImplementedError ( 'subclasses of BaseCache must provide an add() method' )
 self . show_traceback = options . get ( 'traceback' )
          return zipfile . ZipFile . read ( self , self . namelist ( ) [ 0 ] )
 palette = PALETTES [ NOCOLOR_PALETTE ] . copy ( )
 if token . contents == 'else' :
 readline . parse_and_bind ( "tab:complete" )
                  b64encoded = b64encoded . decode ( 'latin1' )
 self . stdout = OutputWrapper ( options . get ( 'stdout' , sys . stdout ) )
   def total_form_count ( self ) :
          os . remove ( old_file_name )
 from django . utils . translation import ugettext_lazy as _ , ungettext_lazy
 def date ( value , arg = None ) :
 try :
 from django . utils . encoding import force_str
    if top_errors :
          if isinstance ( format_module_path , six . string_types ) :
    def conditional_content_removal ( request , response ) :
   def __next__ ( self ) :
 if callable ( lookup_view ) :
from __future__ import unicode_literals
              return False
 created_models . add ( model )
          if not self . closed :
          self . name = name
              self . _populate ( )
 result ^= _bin_to_long ( u )
 templatetags_modules_candidates += [ '%s.templatetags' % app_config . name  for app_config in apps . get_app_configs ( ) ]
  value = urlunsplit ( url_fields )
    @ register . tag
              temp_lib = Library ( )
   def widget_attrs ( self , widget ) :
  else :
  except KeyError :
  resolved_path = [ ]
 self . tagname = self . tag ( )
   def __setstate__ ( self , obj_dict ) :
              attrs = { }
  sys . modules [ __name__ + ".moves.urllib_error" ] = sys . modules [ __name__ + ".moves.urllib.error" ] = Module_six_moves_urllib_error ( __name__ + ".moves.urllib.error" )
  def transform ( self , node , results ) :
                          return pickle . loads ( zlib . decompress ( f . read ( ) ) )
              self . attrs [ 'id' ] += "_%d" % self . index
     if options . get ( "test_flush" , False ) :
  from django . conf import settings
 return calendar . isleap ( self . data . year )
 if opts :
 t -= 1
              for x , y in zip ( val1 , val2 ) :
          if attrs is not None :
  elif indexes [ column_name ] [ 'unique' ] :
              sys . stderr = NullDevice ( )
 def join ( value , arg , autoescape = None ) :
              self . _load_post_and_files ( )
 check_for_migrations ( app_config , connection )
                  cache = caches [ cache_alias ]
 endpos = self . check_for_whole_start_tag ( i )
  return _long_to_bin ( result , hex_format_string )
          return reversed ( self . keyOrder )
  for i , arg in enumerate ( args ) :
 args . append ( work_file )
 for level in zip ( * [ m . ancestry for m in merge_migrations ] ) :
      if urlconf is None :
          mod = import_module ( mod_name )
   def _get_model_from_node ( self , node , attr ) :
          return type ( self ) . __bool__ ( self )
  return value
 if form . _meta . widgets :
 return mark_safe ( '\n' . join ( output ) )
 file_field_list = [ ]
              dict . __setitem__ ( result , copy . deepcopy ( key , memo ) ,  copy . deepcopy ( value , memo ) )
 context [ self . target_var ] = func ( * resolved_args , ** resolved_kwargs )
  except ValidationError as e :
              return
              return self . hashvalue
     if '.' in ip_str . split ( ':' ) [ - 1 ] :
          for widget in self . get_renderer ( name , value , attrs , choices ) :
     class HttpResponseRedirectBase ( HttpResponse ) :
  for template_dir in template_dirs :
  from django . conf import settings
 def filesizeformat ( bytes ) :
 if language_code not in self . _regex_dict :
 dirname = os . path . dirname ( filename )
    _mutable = True
  return modules
 trimmed = 'trimmed' in t . split_contents ( )
  def add_arguments ( self , parser ) :
              yield self [ key ]
  def add_arguments ( self , parser ) :
          s = s . decode ( 'utf-8' )
 if self . errors and hasattr ( self . form , 'error_css_class' ) :
  elif isinstance ( value , datetime . time ) :
               attachment = MIMEBase ( basetype , subtype )
  except KeyboardInterrupt :
                  try :
 if result and ( mode == 'set' or ( mode == 'add' and current_expires < now ) ) :
              if not self . fail_silently :
    basedirs = set ( map ( os . path . abspath , filter ( os . path . isdir , basedirs ) ) )
          super ( EntitiesForbidden , self ) . __init__ ( )
 r = dklen - ( l - 1 ) * hlen
 if 'error_messages' in kwargs :
   def prepare_value ( self , value ) :
  if migration_name == "zero" :
                  for key , value_list in other_dict . lists ( ) :
 overlapped = OVERLAPPED ( )
                      if model in created_models :
   def add_item_elements ( self , handler , item ) :
                          warnings . warn (  "Need {0} values to unpack in for loop; got {1}. "  "This will raise an exception in Django 2.0."  . format ( num_loopvars , len_item ) ,  RemovedInDjango20Warning )
              self . domain_whitelist = whitelist
   def get_handler ( self , * args , ** options ) :
  except StandardError as e :
   def tzname ( self , dt ) :
   _wrapped = None
 def reader ( self ) :
              value = True
   parser = subcommand_cls . create_parser ( '' , cwords [ 0 ] )
                if data_list [ 0 ] in self . empty_values :
   self . streaming_content = streaming_content
 lookups . appendlist ( pattern . callback , ( bits , p_pattern , pattern . default_args ) )
   def delete_first_token ( self ) :
 self . file = os . fdopen ( fd , mode , bufsize )
   def __enter__ ( self ) :
          key = self . make_key ( key , version = version )
          bits = [ ]
 decorated = Node ( syms . decorated , [ decorator , klass ] , prefix = node . prefix )
  return klass
              for app_label in bad_app_labels :
 if old_attr is None :
          if self . _wrapped is empty :
 self . dicts [ - 1 ] [ key ] = value
    chars = 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'
      pass
              value = Decimal ( value )
  if self . match is None or self . match_re . search ( f ) :
 bits = iter ( smart_split ( self . contents ) )
  if not expires :
       def decorating_function ( user_function ) :
    def assertRegex ( self , * args , ** kwargs ) :
              try :
 class URLValidator ( RegexValidator ) :
              op = OPERATORS [ token ]
 cursor = connection . cursor ( )
     class RenderContext ( BaseContext ) :
 return bool ( ret )
  self . name = name
 if is_templatized :
 import hashlib
                          answer = "n"
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
              return
    @ register . tag ( 'filter' )
 return base_lang in settings . LANGUAGES_BIDI
    class BlockContext ( object ) :
 _upload_handlers = [ ]
          archive . extract ( to_path )
          __str__ = serialize
 from django . utils import lru_cache
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
 import traceback
   accept = request . META . get ( 'HTTP_ACCEPT_LANGUAGE' , '' )
               MAXSIZE = int ( ( 1 << 31 ) - 1 )
 for d in reversed ( self . dicts ) :
          super ( DecimalField , self ) . validate ( value )
   def clear ( self ) :
      if not _serializers :
 write = property ( lambda self : self . file . write )
              for field , error_list in self . error_dict . items ( ) :
          value = list . __getitem__ ( self , key )
                  if supported_code . startswith ( generic_lang_code + '-' ) :
   def writer_leaves ( self ) :
   for val in value :
  else :
    class NullDevice :
  self . pointer = self . backout . pop ( )
 for key , value in six . iterlists ( self ) :
                  raise ValidationError (  self . error_messages [ 'invalid_choice' ] ,  code = 'invalid_choice' ,  params = { 'value' : val } ,  )
 if file_ :
   def handle ( self , * args , ** options ) :
          ipv4_unpacked = _unpack_ipv4 ( ip_str )
          return SafeBytes ( s )
   return cls
   @ property
                   if hasattr ( content , 'temporary_file_path' ) :
  with io . open ( potfile , 'a' , encoding = 'utf-8' ) as fp :
       def bytes_to_text ( s , encoding ) :
 import warnings
 from logging . config import dictConfig
 base36 = BaseConverter ( BASE36_ALPHABET )
              data = compressed
  filename = ( 'utf-8' , '' , filename )
    @ register . tag
   else :
  bits = host . rsplit ( ':' , 1 )
 from io import BytesIO
 import warnings
    def request ( request ) :
  return super ( BaseModelFormSet , self ) . initial_form_count ( )
              logger . warning (  'Forbidden (Permission denied): %s' , request . path ,  extra = {  'status_code' : 403 ,  'request' : request  } )
   def o ( self ) :
 for k in doomed :
              weight += 2
 parser . add_argument ( '--no-initial-data' , action = 'store_false' , dest = 'load_initial_data' , default = True ,  help = 'Tells Django not to load any initial data after database synchronization.' )
 if attrs :
 import decimal
              if t . token_type == TOKEN_BLOCK :
     request_finished . connect ( update_watch )
          raise TemplateSyntaxError ( "'ssi' tag takes one argument: the path to"  " the file to be included" )
 for table_name in connection . introspection . table_names ( cursor ) :
          return 'https' if os . environ . get ( "HTTPS" ) == "on" else 'http'
   return "" . join ( inner_text )
  else :
               return '-' . join ( [ template_name , hashlib . sha1 ( force_bytes ( '|' . join ( template_dirs ) ) ) . hexdigest ( ) ] )
   return property ( _media )
              return context
  if self . connector == conn_type :
 from django . utils . deprecation import RemovedInDjango20Warning
   def strptime ( self , value , format ) :
 i = i + 1
  else :
 return ''
 output = [ ]
  try :
  new_second_item . extend ( item )
 num_args = 0
              confirm = 'yes'
    _trans = Trans ( )
    executor = MigrationExecutor ( connection , self . migration_progress_callback )
              tz_name = force_text ( get_current_timezone_name ( ) , errors = 'ignore' )
 if hasattr ( _active , "value" ) :
    NON_FIELD_ERRORS = '__all__'
    if data is False :
  TestRunner = get_runner ( settings , options . get ( 'testrunner' ) )
 ch , escaped = next ( pattern_iter )
  app_list [ app_config ] = None
     @ register . filter ( is_safe = False )
  else :
                          objects = model . _base_manager
  else :
                  guts = re . sub ( r"\\.|." , escape_quotes , tok [ 1 : - 1 ] )
 for resultclass in resultclasses :
  elif param in kwargs :
          return any ( "__call__" in klass . __dict__ for klass in type ( obj ) . __mro__ )
 s_len = 0
                  self . _response_middleware . insert ( 0 , mw_instance . process_response )
      return _trans . ugettext ( message )
          data = obj_dict . pop ( '_data' , { } )
 from django . utils . translation import ugettext_lazy , pgettext_lazy
 bits = token . split_contents ( )
              yield "# This is an auto-generated Django model module."
 if html :
          cc = cc_delim_re . split ( response [ 'Cache-Control' ] )
 result = self . nodelist . render ( context )
 return lambda text : colorize ( text , opts , ** kwargs )
 handler = logging . StreamHandler ( )
 if chunk is None :
 widget = HiddenInput
              kwargs [ 'help_text' ] = help_texts [ f . name ]
 from django . utils import six
   def __enter__ ( self ) :
  def _parse_header ( line ) :
  elif change == I18N_MODIFIED :
 pass
  if min_value is not None :
          if key not in self :
 for path in gen_filenames ( only_new = True ) :
              if self . use_natural_foreign_keys and hasattr ( field . rel . to , 'natural_key' ) :
  except ( ValueError , TypeError ) :
   if self . verbosity >= 1 :
                  exclude . append ( f . name )
 __T = r'(?P<hour>\d{2}):(?P<min>\d{2}):(?P<sec>\d{2})'
 try :
          try :
 try :
              name = self . html_name
   return version
 model_fields = Model . _meta . get_all_field_names ( )
          render_context = self . context . render_context
   none_model_fields = [ k for k , v in six . iteritems ( fields ) if not v ]
                              out . write ( ' npgettext(%r, %r, %r,count) ' % (  message_context ,  join_tokens ( singular , trimmed ) ,  join_tokens ( plural , trimmed ) ) )
 def upload_handlers ( self ) :
 base_directory = '%s_directory' % app_or_project
          __bytes__ = serialize
 return do_translate ( message , 'gettext' )
   _drive_re = re . compile ( '^([a-z]):' , re . I )
 return compile_function
                               root , = nonlocal_root
                  response = middleware_method ( request , response )
 if not self . use_natural_primary_keys or not hasattr ( obj , 'natural_key' ) :
 super ( QueryDict , self ) . appendlist ( key , value )
          if isinstance ( data , ( MultiValueDict , MergeDict ) ) :
      mime_type = 'application/rss+xml; charset=utf-8'
 self . options = options
 iterkeys = _iterkeys
 requires_system_checks = False
 forms_to_delete = self . deleted_forms
  else :
              self . _urlconf_module = self . urlconf_name
   def render ( self , context ) :
                              self . stdout . write ( " [ ] %s" % title )
          content = content or b''
  if unhandled_params :
    def check_migrations ( self ) :
  except ImportError as exc :
  sys . stdout , sys . stderr = so , se
   def rss_attributes ( self ) :
              pass
 self . help_text = help_text
                      self . empty_variable ( token )
    class DisallowedHost ( SuspiciousOperation ) :
                          tried . extend ( [ pattern ] + t for t in sub_tried )
          super ( SortedDict , self ) . clear ( )
 for path in self . locale_paths :
  else :
    def _i18n_cache_key_suffix ( request , cache_key ) :
  elif autoescape :
              return ""
   if confirm == 'yes' :
     class DecimalField ( IntegerField ) :
                      self . unlink ( self . name )
     def make_bytes ( self , value ) :
  config = self . config
              resolver = get_ns_resolver ( ns_pattern , resolver )
  elif message_context [ 0 ] == "'" :
 e . django_template_source = source
              return True
   sys . exit ( 1 )
 import operator
   self . _css = { }
 expanded_template = path . normpath ( expanded_template )
   potfile = os . path . join ( self . locale_dir , '%s.pot' % str ( domain ) )
          return self . source_error ( token . source , msg )
              return self . management_form . cleaned_data [ INITIAL_FORM_COUNT ]
 def __add__ ( self , rhs ) :
  except TypeError as te :
          return self . dicts [ - 1 ] . get ( key , otherwise )
  else :
 self . stdout . write ( "%s\n" % writer . as_string ( ) )
   return fk
                  year += 1900
 def url_patterns ( self ) :
 return zbuf . getvalue ( )
 yield ''
                   raise TemplateSyntaxError (  "'%s' received multiple values for keyword argument '%s'" %  ( name , param ) )
              app_label , migration_name = options [ 'app_label' ] , options [ 'migration_name' ]
   def rfc2822_date ( date ) :
          f = os . path . join ( p , cmd )
                      file_move_safe ( content . temporary_file_path ( ) , full_path )
 __nonzero__ = new_method_proxy ( bool )
 from IPython . Shell import IPShell
  return message
 doublecolon_start = - 1
 stats [ : ] = [ 0 , 0 ]
    if questioner . ask_merge ( app_label ) :
                  handle_m2m ( relobj )
  from django . core import validators
    def get_random_string ( length = 12 ,  allowed_chars = 'abcdefghijklmnopqrstuvwxyz'  'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' ) :
   def iri_to_uri ( iri ) :
      return _trans . gettext ( message )
                        open_tags = open_tags [ i + 1 : ]
   except :
   try :
  slug_re = re . compile ( r'^[-a-zA-Z0-9_]+$' )
   def get ( self , header , alternate = None ) :
  if name is not None :
 from django . utils . ipv6 import clean_ipv6_address
    @ register . tag
  except ImportError :
  super ( BaseModelFormSet , self ) . add_fields ( form , index )
                  output . extend ( connection . creation . sql_destroy_model ( model , references_to_delete , style ) )
              value = field . clean ( value )
 time_str = date . strftime ( '%s, %%d %s %%Y %%H:%%M:%%S ' % ( dow , month ) )
  value , sig = signed_value . rsplit ( self . sep , 1 )
              e . django_template_source = token . source
   def latest_post_date ( self ) :
  incremental = config . pop ( 'incremental' , False )
     def run ( addr , port , wsgi_handler , ipv6 = False , threading = False ) :
   self . unclosed_block_tag ( [ endtag ] )
       def __init__ ( self , file ) :
 context . render_context . push ( )
              m2m_convert = lambda n : field . rel . to . _meta . pk . to_python ( n . getAttribute ( 'pk' ) )
              template = self . template_with_initial
              t = self . current_token
 inputs = [ ]
  return mark_safe ( contents )
 iterkeys = _iterkeys
                        from django . db import connections , DEFAULT_DB_ALIAS
      status_code = 304
     def validate ( self , app_config = None , display_num_errors = False ) :
  self . base_location = location
                      continue
 parser . add_library ( lib )
 trailing_empty_content_re = re . compile ( r'(?:<p>(?:&nbsp;|\s|<br \/>)*?</p>\s*)+\Z' )
  else :
 if os . path . isdir ( template_dir ) :
 if _supported is None :
   class ImageFile ( File ) :
                  want_unicode = True
   try :
                      self . stdout . write ( "\nCreated new merge migration %s" % writer . path )
 if filter_name in ( 'escape' , 'safe' ) :
                        ns = current_app
 self . verbosity = int ( options . get ( 'verbosity' ) )
   return result
 from django . core . wsgi import get_wsgi_application
          if 'id' in self . attrs :
              cls . __dispatch = { }
          super ( CheckboxInput , self ) . __init__ ( attrs )
    def _generate_cache_header_key ( key_prefix , request ) :
           def next ( self ) :
              return [ first_item ] , True
                              from __future__ import absolute_import
 if ch not in ( '<' , '=' ) :
 def removetags ( value , tags ) :
    def force_text ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) :
  return message
   def get ( self , key , default = None , version = None ) :
              return cache [ mem_args ]
      if termios :
 return value . tzinfo is None or value . tzinfo . utcoffset ( value ) is None
  except Exception as e :
  if options [ 'errlog' ] :
 guessed_filename = params . get ( 'filename' ) or used_name
      pass
     def find_template ( name , dirs = None ) :
              seen_data = set ( )
   def utcoffset ( self , dt ) :
  bits = token . contents . split ( )
                   doublecolon_start = index
    return self . _changed_data
          try :
   raise StopIteration
 self . args = args
 result = 0
              html_class_attr = ''
 try :
 return int ( value ) % int ( arg ) == 0
                              field_desc += ', '
 __Y = r'(?P<year>\d{4})'
   raise TemplateDoesNotExist ( template_name )
  import time
       def from_current_timezone ( value ) :
 value = '.' . join ( reversed ( parts ) )
    def do_translate ( message , translation_function ) :
 if six . PY3 :
   __all__ = (  'ModelForm' , 'BaseModelForm' , 'model_to_dict' , 'fields_for_model' ,  'save_instance' , 'ModelChoiceField' , 'ModelMultipleChoiceField' ,  'ALL_FIELDS' , 'BaseModelFormSet' , 'modelformset_factory' ,  'BaseInlineFormSet' , 'inlineformset_factory' ,  )
 new_path = path . join ( top_dir , relative_dir ,  filename . replace ( base_name , name ) )
 from os . path import join , normcase , normpath , abspath , isabs , sep , dirname
              if isinstance ( arg , Promise ) :
 try :
   class DjangoRuntimeWarning ( RuntimeWarning ) :
          return path . encode ( fs_encoding )
  import os
  else :
                  if field_node . getElementsByTagName ( 'None' ) :
 self . _encoding = encoding or settings . DEFAULT_CHARSET
       class InMemoryUploadedFile ( UploadedFile ) :
                          objects = model . _default_manager
 self . _callback_str = callback
 parser . add_option ( '-v' , '--verbosity' , action = 'store' , dest = 'verbosity' , default = '1' ,  type = 'choice' , choices = [ '0' , '1' , '2' , '3' ] ,  help = 'Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output' )
              handler . addQuickElement ( "comments" , item [ 'comments' ] )
 if len ( tablenames ) :
  self . attr = old_attr
 substitutions [ 'input' ] = super ( ClearableFileInput , self ) . render ( name , value , attrs )
    if 'private' in cc and 'public' in kwargs :
    try :
 text_kwargs = dict ( ( k , force_text ( v ) ) for ( k , v ) in kwargs . items ( ) )
                  field_value = value [ i ]
   if tried :
              return list ( self . itervalues ( ) )
 handler . addQuickElement ( "name" , self . feed [ 'author_name' ] )
              value = tuple ( value )
                      try :
                                  handler = logging . _handlers [ name ]
  else :
    else :
          if not var or ' ' in var :
  if isinstance ( s , ( six . text_type , Promise ) ) :
  ch = next ( input_iter )
                          raise CommandError ( "Unknown model: %s.%s" % ( app_label , model_label ) )
          return self . number > 1
    def dst ( self , dt ) :
          current_timezone = timezone . get_current_timezone ( )
                   template = get_template ( template )
          return len ( value ) == int ( arg )
  return form
                  raise TypeError (  "The argument `field` must be `None` when the `error` "  "argument contains errors for multiple fields."  )
 try :
                  config [ 'address' ] = self . as_tuple ( config [ 'address' ] )
          self . setting , self . nodelist = setting , nodelist
 length = int ( num )
 wrapper = warn_about_renamed_method ( class_name , * renamed_method )
 def encoding ( self , val ) :
                          obj_pk = obj_pk . pk
    def get_library ( library_name ) :
              del self . _get
 os . chmod ( filename , new_permissions )
   def read ( self , size = None ) :
                      raise CommandError (  "errors happened while running msguniq\n%s" % errors )
 return mark_for_escaping ( value )
  else :
                  try :
 if j == - 1 :
 os . close ( fd )
 while i < l :
   if field . rel . to . _meta . pk . rel :
    def symlinks_supported ( ) :
      return _trans . deactivate_all ( )
                  qs = self . model . _default_manager . get_queryset ( )
  attrs . setdefault ( 'step' , step )
          super ( HttpResponseNotAllowed , self ) . __init__ ( * args , ** kwargs )
              if len ( app_labels ) == 1 :
 from django . utils . _os import npath , upath
              fh . write ( writer . as_string ( ) )
 while rbp < self . current_token . lbp :
   if not isinstance ( self . file_path , six . string_types ) :
                  sentinal = bit [ 2 ] + ')'
 __delitem__ = new_method_proxy ( operator . delitem )
    if want_unicode :
   class Formatter ( object ) :
              value = ConvertingTuple ( value )
    def rmtree_errorhandler ( func , path , exc_info ) :
           self . verbosity = options . get ( 'verbosity' )
 msg = self . _create_message ( msg )
                  token = "not in"
 from django . utils . module_loading import module_has_submodule
 with lock :
  try :
 from django . conf import settings
              return int ( time . mktime ( self . data . timetuple ( ) ) )
     def pgettext ( context , message ) :
  self . save_as_new = save_as_new
                  self . close ( )
          self . sign = sign
 forms = ' ' . join ( form . as_ul ( ) for form in self )
 autoescape = autoescape and not isinstance ( value , SafeData )
    def mark_for_escaping ( s ) :
  try :
              self . __offset = timedelta ( minutes = offset )
              output . append ( '* %s' % field )
                  key = force_str ( key )
  Module_six_moves_urllib_request . _moved_attributes = _urllib_request_moved_attributes
          if fget is not None :
          return True
   def reverse ( self , lookup_view , * args , ** kwargs ) :
  references_to_delete = { }
  return FirstOfNode ( [ parser . compile_filter ( bit ) for bit in bits ] )
              yield key , self [ key ]
  buffering = int ( six . PY3 )
  def __init__ ( self , request = None ) :
              raise
 for field in _parse_date_fmt ( ) :
                  total_forms = self . max_num
 if six . PY3 :
                   for k2 , v2 in v :
   def getvalue ( self ) :
 field_notes . append ( 'Field renamed because it was a Python reserved word.' )
 if self . sep not in signed_value :
              return _ ( 'p.m.' )
  if fields and f . name not in fields :
    except http . Http404 as e :
  args = token . contents . split ( )
              if finder . find_module ( name , package_path ) :
   return '\n' . join ( output )
      def get_unbound_function ( unbound ) :
          value = dict . get ( self , key , default )
 if hasattr ( self , '_coerce' ) :
  else :
 from django . utils import six
 if cleaned_line . endswith ( ";" ) :
  app_template_dirs . append ( template_dir )
 result . key = key
          if self . _isdst ( dt ) :
   def get_json_data ( self , escape_html = False ) :
   @ property
     def get_default_timezone_name ( ) :
 while i < len ( subject ) and subject [ i ] != subject [ p ] :
  self . run ( ** options )
 return iter ( getattr ( d , _itervalues ) ( ** kw ) )
  if filename not in _mtimes :
              handler = self . get_handler ( * args , ** options )
    if hasattr ( hashlib , "pbkdf2_hmac" ) :
              pass
 return iter ( getattr ( d , _iterkeys ) ( ** kw ) )
                      lineno = lineno + self . __starttag_text . count ( "\n" )
 self . context = context
  except KeyboardInterrupt :
 intrans = False
 return force_str ( '<%s\npath:%s,\nGET:%s,\nPOST:%s,\nCOOKIES:%s,\nMETA:%s>' %  ( request . __class__ . __name__ ,  path ,  six . text_type ( get ) ,  six . text_type ( post ) ,  six . text_type ( cookies ) ,  six . text_type ( meta ) ) )
  if maxsize == 0 :
 value = self . get ( key , version = version )
 with self . _lock . reader ( ) :
  return parser
 loader = MigrationLoader ( connection )
 qn = connection . ops . quote_name
 parser . add_argument ( '--failfast' ,  action = 'store_true' , dest = 'failfast' , default = False ,  help = 'Tells Django to stop running the test suite after first '  'failed test.' ) ,
  from django . utils . encoding import python_2_unicode_compatible , force_str
 if invalid_var_format_string is None :
   for field , error_list in error . items ( ) :
   def getvalue ( self ) :
  def __init__ ( self , name , regex , next = None ) :
              context [ self . variable_name ] = value
    else :
   def _parse_date_fmt ( ) :
  import importlib
              for medium , paths in data . items ( ) :
  except IndexError :
 return supported
          return False
          self . _assert_mutable ( )
  escape = allow_lazy ( escape , six . text_type )
 return mark_safe ( formats . number_format ( number , abs ( p ) ) )
   class Loader ( BaseLoader ) :
 data_value = data if data is not None else ''
  except ImportError :
              try :
                  old_attr = name
              if form . is_bound :
   try :
    print_ = getattr ( moves . builtins , "print" , None )
      def handle_merge ( self , loader , conflicts ) :
 Tok . num += 1
   def handle_app_config ( self , app_config , ** options ) :
  else :
  def add_arguments ( self , parser ) :
 format_type = force_str ( format_type )
 _itervalues = "values"
 seen_models . add ( model )
 mapped_tokens = [ ]
 apps = { }
              raise TemplateSyntaxError ( "Searching for value. Expected another "  "value but found end of string: %s" %  subject )
  _BASE64_DECODE_ERROR = TypeError if six . PY2 else binascii . Error
                  if settings . DEBUG :
  elif simple_url_2_re . match ( middle ) :
      unlink = os . unlink
 if isinstance ( filename , MIMEBase ) :
 if i + 1 < len ( chunks ) :
 for fixture_file , fixture_dir , fixture_name in self . find_fixtures ( fixture_label ) :
          self . name = name
              parts = [ ]
 result = block . nodelist . render ( context )
      return latest_date or datetime . datetime . now ( )
          if gettext_module . find ( 'django' , path , [ to_locale ( lang_code ) ] ) is not None :
  if field == NON_FIELD_ERRORS :
 from django . core . mail . backends . base import BaseEmailBackend
      opts = model . _meta
 @ stringfilter
                  cur_lineno = t . lineno + t . contents . count ( '\n' )
 def media ( self ) :
              if self . verbosity >= 2 :
   raise TemplateDoesNotExist ( name )
   for t in Lexer ( src , origin ) . tokenize ( ) :
 raise NotImplementedError ( 'subclasses of BaseCache must provide a get() method' )
                  pass
                  options += [ ( sorted ( s_opt . option_strings ) [ 0 ] , s_opt . nargs != 0 ) for s_opt in  parser . _actions if s_opt . option_strings ]
 super ( InlineForeignKeyField , self ) . __init__ ( * args , ** kwargs )
 import sys
              return 1 , ch2
      pass
  elif value is False :
 class BoundField ( object ) :
 cache [ key ] = result
          return 'form'
 self . _caches . caches [ alias ] = cache
  elif bytes < PB :
      from django . utils import timezone
 if ( ( ( self . allow_files and os . path . isfile ( full_file ) ) or  ( self . allow_folders and os . path . isdir ( full_file ) ) ) and  ( self . match is None or self . match_re . search ( f ) ) ) :
 yield "#   * Rearrange models' order"
   raise
    return output [ : : - 1 ]
 return s
 self . json_kwargs = self . options . copy ( )
 from django . http . utils import fix_location_header , conditional_content_removal
              lookup_view_s = "%s.%s" % ( m , n )
 from functools import reduce
          max_num = DEFAULT_MAX_NUM
  return parser . _namedCycleNodes [ name ]
              return self . as_widget ( ) + self . as_hidden ( only_initial = True )
  vary_headers = cc_delim_re . split ( response [ 'Vary' ] )
                 return 'NOTPROVIDED'
          value = self . to_python ( value ) . strip ( )
            if initial == 'False' :
   def configure_custom ( self , config ) :
  output_transaction = True
 newlines = property ( lambda self : self . file . newlines )
 digits = "0123456789abcdefghijklmnopqrstuvwxyz"
  else :
 try :
 try :
  errors . append (  Error (  "%s was connected to the '%s' signal "  "with a lazy reference to the '%s' sender, "  "which has not been installed." % (  description , name , '.' . join ( reference )  ) ,  obj = receiver . __module__ ,  hint = None ,  id = 'signals.E001'  )  )
  if values is None :
  else :
 if commands_only :
 import time
    def handle_inspection ( self , options ) :
 itervalues = _itervalues
 def writer ( self ) :
     if response is None :
   forms_valid &= form . is_valid ( )
 def is_hidden ( self ) :
    @ lru_cache . lru_cache ( maxsize = None )
                              return True
   def blankout ( src , char ) :
      def localtime ( value , timezone = None ) :
   def __repr__ ( self ) :
      class SelectDateWidget ( Widget ) :
  filter_func = parser . find_filter ( filter_name )
              self . activated = False
  except ImportError :
 rfcdate = formatdate ( epoch_seconds )
 body_msg = msg
   @ classmethod
from __future__ import unicode_literals
      rendering_attrs = SimpleTemplateResponse . rendering_attrs + [ '_request' , '_current_app' ]
          key = self . make_key ( key , version = version )
                    css_classes = bf . css_classes ( )
 from django . db import connections , router , transaction , models , DEFAULT_DB_ALIAS
                  pass
          lbp = bp
   if max_age is not None :
  else :
              return node . render ( context )
  else :
                          shutil . copyfileobj ( extracted , outfile )
   def normalize_newlines ( text ) :
 asvar = None
   def reader_enters ( self ) :
 all_unique_checks = all_unique_checks . union ( set ( unique_checks ) )
 df = DateFormat ( value )
              return self [ key ]
 input_type = None
                  raise
    def __setitem__ ( self , key , value ) :
  if data is not None :
  return response
from __future__ import unicode_literals
 cmd_options = vars ( options )
 content = templatize ( src_data , orig_file [ 2 : ] )
 self . choices . append ( ( f , f . replace ( path , "" , 1 ) ) )
  p = i
          return pformat ( value )
          data = zlib . decompress ( data )
  else :
 if p >= 0 :
      return ungettext ( singular , plural , number )
 self . using = options . get ( 'database' )
  return BoundField ( self , field , name )
 import sys
  else :
                      if index is not None :
   def value_from_datadict ( self , data , files , name ) :
  normalize_newlines = allow_lazy ( normalize_newlines , six . text_type )
                  return bytes ( s )
  else :
              return self . file . size
                      continue
                      setattr ( base , old_method_name , wrapper ( new_method ) )
    @ deconstructible
  from django . conf import settings
 self . open ( )
 raise NotImplementedError ( 'subclasses of Serializer must provide an handle_field() method' )
           try :
              raise base . SerializationError ( "Non-model object (%s) encountered during serialization" % type ( obj ) )
 klass . __str__ = lambda self : self . __unicode__ ( ) . encode ( 'utf-8' )
 def __init__ ( self , content , name = None ) :
                    import rlcompleter
                  pass
    def _start_relational_field ( self , field ) :
          if len ( self . dicts ) == 1 :
   def handle_fk_field ( self , obj , field ) :
      help = ( "Runs the command-line client for specified database, or the "  "default database if none is provided." )
                  output . append ( "### %s = %s" % ( key , user_settings [ key ] ) )
  return value
 localpart = str ( Header ( localpart , encoding ) )
          ret_ip . append ( ( '0' * ( 4 - len ( hextet ) ) + hextet ) . lower ( ) )
          raise TemplateSyntaxError ( "'for' statements should use the format"  " 'for x in y': %s" % token . contents )
              return
   def popen_wrapper ( args , os_err_exc_type = CommandError ) :
   def create_variable_node ( self , contents ) :
              warning = kwargs [ 'warning' ]
  from django . core . exceptions import ImproperlyConfigured
  return super ( NullBooleanSelect , self ) . render ( name , value , attrs , choices )
  return self . _text_words ( length , truncate )
   try :
                  return ( copyreg . _reconstructor , ( self . __class__ , object , None ) , self . __getstate__ ( ) )
 opts = instance . _meta
                      response = middleware_method ( request , response )
                  self . interesting = _html_parser . interesting_cdata
from __future__ import unicode_literals
              import_module ( app_name )
 text_value = force_text ( value )
 return date_value . strftime ( input_format )
                      self . stdout . write ( self . style . MIGRATE_SUCCESS ( " OK" ) )
              val = None
                              try :
          return ZERO
                  pass
   def nud ( self , parser ) :
   class Loader ( BaseLoader ) :
 default = bytes_to_text ( default , self . encoding )
 self . locale_dir = locale_dir
    definition = getattr ( cls , 'Media' , None )
  raise
  from datetime import datetime , timedelta , tzinfo
   def make_aware ( value , timezone ) :
  return self . _text_chars ( length , truncate , text , truncate_len )
          cleaned = self . clean ( value )
              retval = self . tokens [ self . pos ]
    class UnrecognizedArchiveFormat ( ArchiveException ) :
    def patch_response_headers ( response , cache_timeout = None ) :
 self . content_type_extra = content_type_extra
  elif self . verbosity > 0 :
    if self . verbosity >= 2 and not fixture_files_in_dir :
  return sites
   if subcommand in no_settings_commands :
  try :
    proxy = lazy ( lambda ** kwargs : NumberAwareString ( ) , NumberAwareString ) ( ** kwargs )
   def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
  return attrs
 args = '[fixture ...]'
 from django . utils . safestring import mark_safe
          cleaned_data = form . cleaned_data
              self . empty_label = empty_label
 if not _serializers :
 check_for_language = lambda x : True
 if file_ :
  block_context = context . render_context [ BLOCK_CONTEXT_KEY ]
              def __mod__ ( self , rhs ) :
 return dot_re . sub ( char , src )
  return potfiles
          parser . __loaded_blocks = [ block_name ]
   try :
  else :
 if str_number [ 0 ] == '-' :
     class CheckboxChoiceInput ( ChoiceInput ) :
              final_attrs [ 'checked' ] = 'checked'
 return name + '_id'
              return ''
  return value
                              continue
          return "<Variable Node: %s>" % self . filter_expression
 def time ( value , arg = None ) :
  if not isinstance ( value , ( list , tuple ) ) :
  RE_DATE = re . compile ( r'(\d{4})-(\d\d?)-(\d\d?)$' )
          if bits [ 2 ] == 'parsed' :
                      dirs . remove ( dirname )
 host = host . lower ( )
 self . paginator = paginator
          for line in text . splitlines ( True ) :
 name = sign + hhmm
 from django . db import connections , DEFAULT_DB_ALIAS
                              try :
          mail . attach_alternative ( html_message , 'text/html' )
                      result = middleware . process_view ( request , view_func , args , kwargs )
from django . template . base import Lexer , Parser , tag_re , NodeList , VariableNode , TemplateSyntaxError
 break
    def file_complete ( self , file_size ) :
     def build_instance ( Model , data , db ) :
  content_type , content_type_extra = meta_data . get ( 'content-type' , ( '' , { } ) )
              self . activated = True
                       continue
  formatted = "\n" . join ( sorted ( formatted ) )
 def dummy ( * args , ** kwargs ) :
         ns_resolver = RegexURLResolver ( ns_pattern , resolver . url_patterns )
          return False
                      new_attr = name
 s . serialize ( queryset , ** options )
 input_type = None
  if labels and f . name in labels :
      def constant_time_compare ( val1 , val2 ) :
                              self . handle_fk_field ( obj , field )
 from wsgiref . util import FileWrapper
 node . replace ( decorated )
   @ receiver ( setting_changed )
import os
          register_serializer ( format , BUILTIN_SERIALIZERS [ format ] , serializers )
   self . requires_system_checks = (  self . requires_system_checks if has_new_option else  self . requires_model_validation if has_old_option else  True )
 out = StringIO ( '' )
 if domain == 'djangojs' and file_ext in command . extensions :
          return ModelChoiceIterator ( self )
              output . extend ( f . post_create_sql ( style , model . _meta . db_table ) )
              return EndToken
          _default = translation ( settings . LANGUAGE_CODE )
 recipients = [ sanitize_address ( addr , email_message . encoding )  for addr in email_message . recipients ( ) ]
              continue
  cache_key = _generate_cache_header_key ( key_prefix , request )
                  try :
 if name in MEDIA_TYPES :
   def handle_field ( self , obj , field ) :
 root = logging . getLogger ( )
 from __future__ import unicode_literals
  elif token . token_type == 1 :
   for __ in iterator :
          if initial is None :
                  self . fetch_command ( options . args [ 0 ] ) . print_help ( self . prog_name , options . args [ 0 ] )
                  regex = force_text ( self . _regex )
   def __iter__ ( self ) :
    def npath ( path ) :
              label_for = ''
 self . hashvalue = hash ( tup )
   def id_for_label ( self , id_ ) :
                      html_class_attr = ' class="%s"' % css_classes
   def bound_data ( self , data , initial ) :
   resolver_match = resolver . resolve ( request . path_info )
     if isinstance ( obj , datetime . datetime ) :
              return self . html_name
 from django . utils . encoding import force_bytes
  elif ch == '[' :
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
              extra_classes . add ( self . form . error_css_class )
    return None
                  _locs_ = frame . f_locals
  from django . http import Http404
              self . validate_unique ( )
 from django . utils . deprecation import RemovedInDjango19Warning
 value = re . sub ( '[^\w\s-]' , '' , value ) . strip ( ) . lower ( )
 if has_bom ( po_path ) :
 stats [ MISSES ] += 1
                  with io . open ( orig_file , 'r' , encoding = settings . FILE_CHARSET ) as fp :
  __all__ = ( 'SelectDateWidget' , )
 self . attrs , self . choices = attrs , choices
 parsed = False
     trim_whitespace_re = re . compile ( '\s*\n\s*' )
 default_error_messages = {  'invalid' : _ ( 'Enter a whole number.' ) ,  }
              state_frame [ self ] = None
                      ch , escaped = next ( pattern_iter )
 final_output . extend ( output )
 self . COOKIES = { }
              msg = ( "\nYou have installed Django's auth system, and "  "don't have any superusers defined.\nWould you like to create one "  "now? (yes/no): " )
  Module_six_moves_urllib_error . _moved_attributes = _urllib_error_moved_attributes
     finally :
    def tag_function ( self , func ) :
  except ValueError :
   class Command ( AppCommand ) :
   return result
 for c in response . cookies . values ( ) :
                  yield node
   def _set_choices ( self , value ) :
              base , ext = os . path . splitext ( base )
 TRANSLATOR_COMMENT_MARK = 'Translators'
              code_list . append ( foreground [ v ] )
          bits = [ ]
    raise CommandError ( "couldn't handle %s template %s." %  ( self . app_or_project , template ) )
 attrs = { "model" : smart_text ( obj . _meta ) }
  return _ ( 'a.m.' )
          builtins = { 'True' : True , 'False' : False , 'None' : None }
 if self . check_test ( value ) :
   def values ( self ) :
              return str ( o )
                  raise ValueError ( 'empty_label list/tuple must have 3 elements.' )
                      if model in created_models :
  template_with_initial = '%(initial_text)s: %(initial)s %(clear_template)s<br />%(input_text)s: %(input)s'
 sys . stderr . close ( )
                  os . kill ( os . getpid ( ) , - exit_code )
   else :
              raise AttributeError ( "no such move, %r" % ( name , ) )
          value = ugettext ( "%s KB" ) % filesize_number_format ( bytes / KB )
  if settings . USE_TZ :
              if is_library_missing ( taglib_module ) :
                      middle = middle [ : - len ( closing ) ]
  except ImportError as e :
              logger . warning ( 'Not Found: %s' , request . path ,  extra = {  'status_code' : 404 ,  'request' : request  } )
    return mark_safe ( template % substitutions )
 cmd_options = vars ( options )
 for name in loggers :
          raise SerializerDoesNotExist ( format )
                      self . invalid_block_tag ( token , command , parse_until )
     @ deconstructible
                     return False
 import os
                              filemsg = ''
   if cword == 1 :
    def check_for_language ( lang_code ) :
  def __init__ ( self ) :
 from django . middleware . csrf import get_token
 super ( Command , self ) . __init__ ( )
   def default_key_func ( key , key_prefix , version ) :
  def __init__ ( self , content = b'' , * args , ** kwargs ) :
      def __init__ ( self , * args , ** kwargs ) :
   __getitem__ = new_method_proxy ( operator . getitem )
 def fixture_dirs ( self ) :
 import subprocess
              if default_list is None :
           self . is_bound = data is not None or files is not None
          return list ( self . __iter__ ( ) ) [ idx ]
   def strptime ( self , value , format ) :
          modified_code = None
 value = bytes_to_text ( value , self . encoding )
   def __getitem__ ( self , index ) :
   def write_message ( self , message ) :
  return None if timeout is None else time . time ( ) + timeout
   else :
    def emit_pre_migrate_signal ( create_models , verbosity , interactive , db ) :
                   filename = traceback . extract_tb ( tb ) [ - 1 ] [ 0 ]
 for attr in _urllib_request_moved_attributes :
    if callable ( callback ) :
          response [ 'Location' ] = request . build_absolute_uri ( response [ 'Location' ] )
          return False
   def new_file ( self , field_name , file_name , content_type , content_length , charset = None , content_type_extra = None ) :
  else :
 self . object_name = 'CacheEntry'
 for filename in gen_filenames ( ) :
  time_re = re . compile (  r'(?P<hour>\d{1,2}):(?P<minute>\d{1,2})'  r'(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?'  )
              if options [ 'plain' ] :
    return (  format_html_join ( '' , ' {0}="{1}"' , sorted ( attrs . items ( ) ) ) +  format_html_join ( '' , ' {0}' , sorted ( boolean_attrs ) )  )
          meta = type ( str ( 'Meta' ) , ( object , ) , { } )
 import sys
          stream = StringIO ( stream_or_string )
              raise CommandError ( "App '%s' does not have migrations" % app_label )
  def add_arguments ( self , parser ) :
          return self . _encoding
 super ( TypedChoiceField , self ) . __init__ ( * args , ** kwargs )
          best_doublecolon_end = ( best_doublecolon_start +  best_doublecolon_len )
             if iri is None :
                      raise
 value = p [ i + 1 : ] . strip ( )
 self . path_info = ''
   raise KeyError ( key )
 filename , display_url = cleanup_url ( url )
 from django . utils . html import conditional_escape , format_html
   def extend_nodelist ( self , nodelist , node , token ) :
 dig2 . update ( dig1 . digest ( ) )
 if result is not None :
      pass
    @ lru_cache . lru_cache ( maxsize = None )
 obj . __class__ = self . __class__
   if options . get ( "list" , False ) :
     class SafeMIMEText ( MIMEMixin , MIMEText ) :
  root = nonlocal_root [ 0 ] = oldroot [ NEXT ]
  elif bytes < MB :
   if alias not in settings . CACHES :
 value = getattr ( obj , field . rel . field_name )
      pass
                                  value = value . pk
     def get_valid_name ( self , name ) :
                        print ( "In the tar file %s the member %s is invalid: %s" %  ( name , member . name , exc ) )
   def handle ( self , app_or_project , name , target = None , ** options ) :
 @ stringfilter
          try :
 LIGHT_PALETTE = 'light'
 def _cache ( self ) :
      import stat
  models . signals . post_migrate . send (  sender = app_config ,  app_config = app_config ,  verbosity = verbosity ,  interactive = interactive ,  using = db )
  expires = None
 if not value :
          if 'warning' in kwargs :
  return ( self . paginator . per_page * ( self . number - 1 ) ) + 1
          node . source = token . source
              path = safe_join ( self . location , name )
          raise CommandError ( "Unknown command: %r" % name )
 return b'\r\n' . join ( headers )
          client = self . _lib . Client ( self . _servers )
          _load_serializers ( )
  return check
 response = sys . modules [ __name__ + ".moves.urllib_response" ]
 try :
              if this_bases is None :
      def __init__ ( self , table , params ) :
  return ''
  if token . token_type == 0 :
                  for f in sorted ( os . listdir ( self . path ) ) :
 options = self . render_options ( choices , [ value ] )
 self . empty_value = kwargs . pop ( 'empty_value' , '' )
 return
   def _get_scheme ( self ) :
 flat = { }
 self . _producer = producer
 self . validate_key ( key )
 if value is not result :
   class EmailBackend ( BaseEmailBackend ) :
   def run_checks ( self , app_configs = None , tags = None ) :
          dot = callback . rindex ( '.' )
   def compress ( self , data_list ) :
  return sample [ : 3 ] == b'\xef\xbb\xbf' or sample . startswith ( codecs . BOM_UTF16_LE ) or sample . startswith ( codecs . BOM_UTF16_BE )
   def page ( self , number ) :
 lookups . appendlist ( name , ( new_matches , p_pattern + pat , dict ( defaults , ** pattern . default_kwargs ) ) )
   def clear_cdata_mode ( self ) :
 self . is_reversed = is_reversed
          raise
from __future__ import unicode_literals
      help = ( "Output the contents of the database as a fixture of the given "  "format (using each model's default manager unless --all is "  "specified)." )
   def resolve_error_handler ( self , view_type ) :
                  if confirm not in ( 'yes' , 'no' ) :
              raise ValidationError ( self . message , code = self . code )
    def __setitem__ ( self , key , value ) :
              self . _current [ field . name ] = str ( getattr ( obj , field . name ) )
              for accessor_name , object_list in self . m2m_data . items ( ) :
 def safeseq ( value ) :
                   if not isinstance ( message , ValidationError ) :
 if not ext and content_type :
          final_attrs = self . build_attrs ( attrs , type = 'checkbox' , name = name )
    new_name , num_repl = re . subn ( r'\W' , '_' , new_name )
  self . stream . write ( "]" )
  handler . endElement ( "author" )
  tag = bits [ 1 ]
          if incomment :
  return s
     def get_language_from_request ( request , check_path = False ) :
      def __init__ ( self , regex , urlconf_name , default_kwargs = None , app_name = None , namespace = None ) :
 cursor . execute ( "DELETE FROM %s "  "WHERE cache_key < %%s" % table ,  [ cursor . fetchone ( ) [ 0 ] ] )
   else :
   elif intrans :
 objects_in_fixture = 0
 if not self . timezone :
 from django . views . debug import ExceptionReporter , get_exception_reporter_filter
                  if t . contents . lstrip ( ) . startswith ( TRANSLATOR_COMMENT_MARK ) :
              if settings . STATIC_URL is None :
 self . old_method_name = old_method_name
    if '::' not in ip_str and ip_str . count ( ':' ) != 7 :
    def _cull ( self , db , cursor , now ) :
                       key = make_key ( args , kwds , typed )
              return time_format ( value , arg )
  else :
  self . update ( updates )
              end = len ( s )
 from ctypes import ( sizeof , c_ulong , c_void_p , c_int64 ,  Structure , Union , POINTER , windll , byref )
              raise TemplateSyntaxError ( "Invalid syntax in widthratio tag. Expecting 'as' keyword" )
     class ImageField ( FileField ) :
 self . deactivate = deactivate
  def add_arguments ( self , parser ) :
   def __str__ ( self ) :
              end = index
  except AttributeError :
              if not self . close_called :
 return RelatedObject ( cls . fk . rel . to , cls . model , cls . fk ) . get_accessor_name ( ) . replace ( '+' , '' )
          format = options . get ( 'format' )
    if self . allow_folders :
  else :
              subcommand = 'help'
              choice_value , choice_label = choice
 from django . utils import formats
              version = self . version
 self . pointer = 0
 zfile . flush ( )
     raise LookupError ( lang_code )
 self . merge ( translation )
  try :
  except StandardError as e :
   def ipython ( self ) :
                  output . append ( format_html ( '<optgroup label="{0}">' , force_text ( option_value ) ) )
  return value
          return self
  except Exception as e :
              if year < 70 :
  else :
              self . _current [ field . name ] = value
 self . interactive = options . get ( 'interactive' )
      return _trans . ngettext ( singular , plural , number )
          escaper = conditional_escape
  return value
      class FirstOfNode ( Node ) :
 if timeout == DEFAULT_TIMEOUT :
          ch , escaped = next ( input_iter )
      return _trans . npgettext ( context , singular , plural , number )
 base16 = BaseConverter ( BASE16_ALPHABET )
 return any ( ignore ( pattern ) for pattern in ignore_patterns )
   def close ( self , ** kwargs ) :
              continue
              self . _post , self . _files = QueryDict ( '' , encoding = self . _encoding ) , MultiValueDict ( )
 import warnings
  value = smart_text ( value ) . strip ( )
 self . max_width = max_width
              kw [ 'microsecond' ] = kw [ 'microsecond' ] . ljust ( 6 , '0' )
   as_form = False
   return default_key_func
 output . append ( '\n' . join ( '  * %s' % e for e in errors ) )
   no_settings_commands = [  'help' , 'version' , '--help' , '--version' , '-h' ,  'compilemessages' , 'makemessages' ,  'startapp' , 'startproject' ,  ]
   def to_python ( self , value ) :
  if number > self . num_pages :
   class Command ( BaseCommand ) :
       def __init__ ( self , obj ) :
 for migration_name in migration_names :
 return guessed_path
 for path in paths :
   leave_locale_alone = True
 isatty = property ( lambda self : self . file . isatty )
     self . state = state
 error_messages [ 'invalid' ] = error_message
 return WithNode ( None , None , nodelist , extra_context = extra_context )
  _active . value = translation ( language )
                  return
     class EntitiesForbidden ( DefusedXmlException ) :
              return self . nodelist_true . render ( context )
    else :
 return _time . tzname [ is_dst ]
                   s = ' ' . join ( [ force_text ( arg , encoding , strings_only ,  errors ) for arg in s ] )
  else :
          cc [ k . replace ( '_' , '-' ) ] = v
 if sys . version_info [ 1 ] <= 1 :
 MIN_NUM_FORM_COUNT = 'MIN_NUM_FORMS'
 pdict = { }
 return module . Command ( )
 for frag in name :
   def _get_context_stack_frame ( self , context ) :
     def modelform_defines_fields ( form_class ) :
  return media
          if initial is None :
 field_notes = [ ]
              if self . queryset is not None :
 top = bottom + self . per_page
               if condition is not None :
              self . _max_entries = int ( max_entries )
   def __repr__ ( self ) :
  msg += "System check identified %s (%s silenced)." % (  "no issues" if visible_issue_count == 0 else  "1 issue" if visible_issue_count == 1 else  "%s issues" % visible_issue_count ,  len ( all_issues ) - visible_issue_count ,  )
   basedirs = [ os . path . join ( 'conf' , 'locale' ) , 'locale' ]
 if errors :
 @ stringfilter
   def open ( self ) :
               urlconf_repr = '<%s list>' % self . urlconf_name [ 0 ] . __class__ . __name__
                  try :
   class Command ( AppCommand ) :
              try :
 select_html = s . render ( field % name , val , local_attrs )
   def date_format ( value , format = None , use_l10n = None ) :
 def __new__ ( cls , * args , ** kwargs ) :
              raise SystemRestart
  else :
 super ( ManagementForm , self ) . __init__ ( * args , ** kwargs )
  return int ( timeout )
  self . start_serialization ( )
              if empty_label is not None :
 self . _info = translation . _info . copy ( )
  from django import http
    def inner_run ( self , * args , ** options ) :
    function_name = ( name or  getattr ( func , '_decorated_function' , func ) . __name__ )
   raise Resolver404 ( { 'tried' : tried , 'path' : new_path } )
          return self . environ . get ( 'wsgi.url_scheme' )
                          number_value = rhs [ number ]
                  if self . _should_delete_form ( form ) :
 request_repr = "unavailable"
          if not isinstance ( s , Exception ) :
               timeout = - 1
 for attr in _urllib_parse_moved_attributes :
   def is_ajax ( self ) :
     def get_storage_class ( import_path = None ) :
 m = data . get ( self . month_field % name )
                        flags = ( os . O_WRONLY | os . O_CREAT | os . O_EXCL |  getattr ( os , 'O_BINARY' , 0 ) )
              self . _load_post_and_files ( )
   dir_suffix = '%s*' % os . sep
  else :
              newline = "\n"
          if not isinstance ( s , six . string_types ) :
 def __init__ ( self , request , dict_ = None , processors = None , current_app = None ,  use_l10n = None , use_tz = None ) :
   default_error_messages = {  'required' : _ ( 'This field is required.' ) ,  }
              def load ( self , rawdata ) :
 self . content_type_extra = None
              return template_name
     if self . __language == settings . LANGUAGE_CODE or self . __language == "en-us" :
              raise ValueError ( "dictionary doesn't specify a version" )
          raise TemplateSyntaxError ( "next-to-last argument to 'regroup' tag must"  " be 'as'" )
              chunk_buffer = BytesIO ( chunk )
    class override ( object ) :
    def _add_fallback ( self ) :
     def _add_doc ( func , doc ) :
 try :
   return set ( x for x in ext_list if x . strip ( '.' ) not in ignored )
 safe = isinstance ( value , SafeData )
 def __init__ ( self , text ) :
          super ( Select , self ) . __init__ ( attrs )
  try :
 parser . add_argument ( 'args' , nargs = '*' )
              if not only_initial :
                                  del form . cleaned_data [ field ]
                      out . write ( ' _(%s) ' % cmatch . group ( 1 ) )
                          self . configure_logger ( name , loggers [ name ] , True )
                   if os . name == 'nt' :
      def import_module ( name , package = None ) :
   def render ( self , name , value , attrs = None ) :
  return self . template_cache [ key ]
 result = super ( TimestampSigner , self ) . unsign ( value )
  super ( IntegerField , self ) . __init__ ( * args , ** kwargs )
 renamed = True
          yield bit . group ( 0 )
   else :
 shell . mainloop ( )
 return files . get ( name , None )
   def set_many ( self , data , timeout = DEFAULT_TIMEOUT , version = None ) :
                   ch , escaped = next ( pattern_iter )
   else :
   def __iter__ ( self ) :
              raise StopIteration ( )
  except ( ValueError , TypeError ) :
   return decorating_function
    def _is_shorthand_ip ( ip_str ) :
    try :
          if not fname . startswith ( self . _dir ) or not os . path . exists ( fname ) :
 def __init__ ( self ) :
              field_notes . append ( 'Field name made lowercase.' )
   def build_absolute_uri ( self , location = None ) :
 from django . utils import lru_cache
              kwargs [ 'localize' ] = True
   if field . help_text :
 import tempfile
          raise ValueError ( 'The joined path (%s) is located outside of the base '  'path component (%s)' % ( final_path , base_path ) )
 from django . utils . encoding import force_str
 self . abstract = False
  except Exception :
    def validate_unique ( self ) :
          pass
    @ register . tag
    def sql_destroy_indexes ( app_config , style , connection ) :
import warnings
                  consume_next = True
               obj = super ( klass , cls ) . __new__ ( cls )
  return value if six . PY2 else value . encode ( ISO_8859_1 ) . decode ( UTF_8 )
 parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS , help = 'Nominates a specific database to load '  'fixtures into. Defaults to the "default" database.' )
  whole_digits = digits - decimals
   def handle ( self , ** options ) :
              func = TemplateLoader ( * args )
                      break
              self . choices = [ ]
   seconds = self . Z ( )
           if hasattr ( value , '__iter__' ) and not isinstance ( value , ( bytes , six . string_types ) ) :
   LockFileEx = windll . kernel32 . LockFileEx
              return import_string ( key_func )
 if kwarg :
          lang_code = request . session . get ( LANGUAGE_SESSION_KEY )
          from django . conf import settings
                  f . close ( )
 self . _out . write ( force_str ( style_func ( msg ) ) )
              os . utime ( dst , ( st . st_atime , st . st_mtime ) )
   if not m and p < 0 :
    class MediaDefiningClass ( type ) :
      status_code = 302
  if not settings . DEBUG and not settings . ALLOWED_HOSTS :
 try :
 six . reraise ( exc_type , exc_value , sys . exc_info ( ) [ 2 ] )
   def close ( self ) :
   return '\n' . join ( output )
 class MaxLengthValidator ( BaseValidator ) :
              if calendar . isleap ( self . data . year ) :
              cleaned_data = self . clean ( )
 if not self . is_required and CheckboxInput ( ) . value_from_datadict (  data , files , self . clear_checkbox_name ( name ) ) :
          output = self . nodelist . render ( context )
   def __del__ ( self ) :
      return hmac . new ( key , msg = force_bytes ( value ) , digestmod = hashlib . sha1 )
   def _ipython_pre_100 ( self ) :
 stamp = time . mktime ( tt )
 from django . forms . fields import Field , FileField
 self . name = name or func . __name__
              input_attrs = dict ( value = force_text ( v ) , ** final_attrs )
                      outfile . write ( data )
 if value in self . empty_values :
 return self
      DateTimeAwareJSONEncoder = DjangoJSONEncoder
          timeout = params . get ( 'timeout' , params . get ( 'TIMEOUT' , 300 ) )
      def handle_default_options ( options ) :
          self . style = color_style ( )
              raise TemplateSyntaxError ( "%s requires %d arguments, %d provided" %  ( name , alen - dlen , plen ) )
     class WSGIRequestHandler ( simple_server . WSGIRequestHandler , object ) :
              self . connection = None
              return self . blocks [ name ] . pop ( )
 @ stringfilter
                  qs = self . queryset
          self . vals . append ( val )
        contains_nontext = False
 obj = Model ( ** data )
 def message_dict ( self ) :
              self . instance . validate_unique ( exclude = exclude )
 LOCK_NB = fcntl . LOCK_NB
 def timesince_filter ( value , arg = None ) :
                  if subject [ i ] in ( '"' , "'" ) :
 if not extra_context :
 obj_pk = field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
          self . object_list = object_list
 INITIAL_FORM_COUNT = 'INITIAL_FORMS'
   @ property
                          raise CommandError ( "Unknown application: %s" % app_label )
              obj = form . instance
   def address_string ( self ) :
  Meta = type ( str ( 'Meta' ) , parent , attrs )
 db = options . pop ( 'using' , DEFAULT_DB_ALIAS )
  return flat
 timestamp = git_log . communicate ( ) [ 0 ]
              return list ( self . iteritems ( ) )
 with open ( writer . path , "wb" ) as fh :
                      arg_vals . append ( mark_safe ( arg ) )
      msgs_with_ctxt = ( "%s%s%s" % ( context , CONTEXT_SEPARATOR , singular ) ,  "%s%s%s" % ( context , CONTEXT_SEPARATOR , plural ) ,  number )
 pass
  return self . _request
              self . _delete ( key )
                  result . parent = self
  if find_command ( self . program ) is None :
                      exclude . append ( f . name )
  import base64
                          queryset = queryset . filter ( pk__in = primary_keys )
 self . app_name = app_name
      def strftime ( self , fmt ) :
 role = role . upper ( )
                      return ''
              number = str ( number ) [ 1 : ]
 s1 = time . strftime ( fmt , ( year , ) + timetuple [ 1 : ] )
                  fixture_dirs = [ os . path . join ( dir_ , os . path . dirname ( fixture_name ) )  for dir_ in fixture_dirs ]
              pos = self . file . tell ( )
 if location is None :
   def _get_files ( self ) :
                      self . stdout . write ( self . style . NOTICE ( "  Your models have changes that are not yet reflected in a migration, and so won't be applied." ) )
 request_class = WSGIRequest
  else :
 self . literal = None
 index = data . find ( self . _boundary )
  j = match . end ( )
                  if self . cleaned_data . get ( name ) is not None and self . cleaned_data [ name ] . _state . adding :
          return 0
 self . _createdir ( )
                      c = subject [ i ]
              if is_aware ( o ) :
 for model in app_models :
          return value
          pass
                          filemsg = 'file %s, ' % origin
 try :
 if space == 0 :
                  template_dir = template_dir . decode ( fs_encoding )
          TemplateLoader = import_string ( loader )
  return _HashedSeq ( key )
                  return
  return val
          def as_bytes ( self , unixfrom = False ) :
 for i , item in enumerate ( values ) :
                      indexes = { }
  else :
 from email . utils import formatdate
  try :
  except IOError as e :
    for app_config in apps . get_app_configs ( ) :
          return iter ( self . file )
                      invalid_apps . append ( app_name )
          secret = settings . SECRET_KEY
   objects = serializers . deserialize ( ser_fmt , fixture ,  using = self . using , ignorenonexistent = self . ignore )
  if reason is not None :
    for filename in files :
 self . default_locale_path = self . locale_paths [ 0 ]
  if 'DJANGO_AUTO_COMPLETE' not in os . environ :
 self . validate ( out )
           patterns = getattr ( self . urlconf_module , "urlpatterns" , self . urlconf_module )
          return super ( type ( dt ) , dt ) . strftime ( fmt )
          for base in bases [ : : - 1 ] :
 for attr in _urllib_response_moved_attributes :
  if item [ 'comments' ] is not None :
   def is_serious ( self ) :
 trans_real . _active = threading . local ( )
 timezone = ( offset . days * 24 * 60 ) + ( offset . seconds // 60 )
 msgid = '<%s.%s.%s%s@%s>' % ( utcdate , pid , randint , idstring , idhost )
          return ''
 break
 super ( NullBooleanSelect , self ) . __init__ ( attrs , choices )
          cookiedict [ key ] = c . get ( key ) . value
     def validate_ipv46_address ( value ) :
   for ( k , v ) in kwargs . items ( ) :
                  self . field . choice_cache = [  self . choice ( obj ) for obj in self . queryset . all ( )  ]
 from email . mime . text import MIMEText
          return self . source
          attrs [ 'exclude' ] = exclude
 msg [ 'To' ] = self . extra_headers . get ( 'To' , ', ' . join ( self . to ) )
          for event , node in self . event_stream :
 if not hasattr ( template , 'render' ) :
  else :
   try :
 import time as _time
 loop_dict [ 'last' ] = ( i == len_values - 1 )
   if "help" in options :
              if default is None :
   class LocMemCache ( BaseCache ) :
     class Node ( object ) :
 pass
              self . file . __exit__ ( exc , value , tb )
 checkbox_id = self . clear_checkbox_id ( checkbox_name )
   if name == 'content-disposition' :
 if not isinstance ( value , ( bytes , six . text_type ) ) :
 import signal
                          field_desc += '  # ' + ' ' . join ( comment_notes )
              raise TemplateSyntaxError ( 'The %r option was specified more '  'than once.' % option )
 raise NotImplementedError ( 'subclasses of Deserializer must provide a __next__() method' )
 if '()' in config :
 if param not in params and varkw is None :
          nodelist_false = parser . parse ( ( 'endifchanged' , ) )
               yield parse_boundary_stream ( sub_stream , 1024 )
  import socket
     class Info ( CheckMessage ) :
  if self . field . required and hasattr ( self . form , 'required_css_class' ) :
  return rv
 offset = self . __offset . seconds // 60
 def regroup ( parser , token ) :
              assert content is None
          self . open ( )
     loader = MigrationLoader ( None , ignore_no_migrations = True )
 return result
     def __len__ ( self ) :
 app = model . _meta . app_label
 field_notes . append ( "Field renamed because it started with '_'." )
  raise ValueError ( "The view %s.%s didn't return an HttpResponse object. It returned None instead."  % ( callback . __module__ , view_name ) )
    @ register . filter ( is_safe = True )
              widget . attrs . update ( extra_attrs )
                  raise ValidationError ( ungettext (  "Please submit %d or more forms." ,  "Please submit %d or more forms." , self . min_num ) % self . min_num ,  code = 'too_few_forms' )
  else :
 if filters :
   def pop ( self , key , default = None ) :
          raise TypeError ( s )
   return result
   class ContentNotRenderedError ( Exception ) :
 def default_if_none ( value , arg ) :
 if app_label not in executor . loader . migrated_apps :
          return self
  __all__ = [ 'luhn' ]
 for item in elt :
 widget = SelectMultiple
          cache = caches [ settings . CACHE_MIDDLEWARE_ALIAS ]
     @ python_2_unicode_compatible
              name = self . _pk_field . name
                  self . queryset . filter ( ** { key : pk } )
          return repr ( list ( self ) )
                  if hasattr ( middleware , 'process_request' ) :
              for app_label in app_labels :
    def receive_data_chunk ( self , raw_data , start ) :
 str_number = six . text_type ( number )
                  fields = list ( six . iteritems ( base . base_fields ) ) + fields
  idhost = DNS_NAME
  else :
                  self . timezone = obj . tzinfo
 if retval :
     except OSError as e :
     class SpacelessNode ( Node ) :
 self . stream . write ( b'-' * 79 )
  _ , file_ext = os . path . splitext ( self . file )
          return get_supported_language_variant ( settings . LANGUAGE_CODE )
 self . fields = getattr ( options , 'fields' , None )
              self . label = self . field . label
      is_usable = True
  yield force_text ( message )
                  raise CommandError ( '"%s" is not a valid port number '  'or address:port pair.' % options [ 'addrport' ] )
   data = { }
              if self . verbosity >= 1 :
          for obj in PythonDeserializer ( yaml . load ( stream , Loader = SafeLoader ) , ** options ) :
   def render ( self , context ) :
 for replacement in set ( [  thousand_sep , unicodedata . normalize ( 'NFKD' , thousand_sep ) ] ) :
 if max_age is not None :
 if self . verbosity >= 1 :
                  priority = float ( priority )
  illegal_formatting = _illegal_formatting . search ( fmt )
 import sys
  targets = [ ( app_label , migration . name ) ]
              raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
 self . remaining -= len ( result )
     except Exception as e :
 parser . add_argument ( '--no-color' , action = 'store_true' , dest = 'no_color' , default = False ,  help = "Don't colorize the command output." )
 if hasattr ( cls , k ) :
 trans_bit = [ bit ]
 if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
 import gettext as gettext_module
              primary_keys = pks . split ( ',' )
      errors = [ ]
    else :
 from __future__ import unicode_literals
          duplicate = copy ( super ( BaseContext , self ) )
 from django . template . context import ( BaseContext , Context , RequestContext ,  ContextPopException )
 output_transaction = False
                  self . _set ( key , pickled , timeout )
     def parse_boundary_stream ( stream , max_header_size ) :
                  checkbox_name = self . clear_checkbox_name ( name )
          try :
              safe = force_bytes ( safe , self . encoding )
  else :
 class Operator ( TokenBase ) :
      def __init__ ( self , host , * args , ** kwargs ) :
 import sys
  else :
              raise CommandError ( "%r conflicts with the name of an existing "  "Python module and cannot be used as a "  "project name. Please try another name." %  project_name )
                    if var . find ( VARIABLE_ATTRIBUTE_SEPARATOR + '_' ) > - 1 or var [ 0 ] == '_' :
  if args :
   def created_time ( self , name ) :
                              raise AttributeError
  elif str ( level ) == level :
                      shutil . copymode ( old_path , new_path )
 for attr , value in list ( attrs . items ( ) ) :
  elif disable_existing :
 num_existing = len ( existing )
 if not self . timezone :
              options , args = parser . parse_args ( argv [ 2 : ] )
  def F ( i ) :
 @ wraps ( func )
 ERROR = 40
                      pass
  return self . _app_dict [ language_code ]
          super ( EmailBackend , self ) . __init__ ( * args , ** kwargs )
  except ImportError :
                  mw_instance = mw_class ( )
 response = self . handle_uncaught_exception ( request , resolver , sys . exc_info ( ) )
                  old_method_name = renamed_method [ 0 ]
   def create_token ( self , token_string , source , in_tag ) :
          def lock ( f , flags ) :
                  if safe_input :
      def render ( self , context ) :
   class Iterator ( object ) :
              obj = "?"
 return s [ 1 : - 1 ] . replace ( r'\%s' % quote , quote ) . replace ( r'\\' , '\\' )
  if not context_instance :
     if self . paths_to_remove :
              processors = tuple ( processors )
 pass
   def to_python ( self , value ) :
  except ValueError :
          return "UTC"
              url_fields = split_url ( value )
              return self . _cache . decr ( key , - delta )
    def cache_info ( ) :
              try :
  def add_arguments ( self , parser ) :
              self . stdout . write ( self . style . MIGRATE_HEADING ( "Will squash the following migrations:" ) )
   if not re . search ( r'^[_a-zA-Z]\w*$' , name ) :
              self . schemes = schemes
    except DatabaseError :
   def utcoffset ( self , dt ) :
  if ( context . autoescape and not isinstance ( output , SafeData ) ) or isinstance ( output , EscapeData ) :
          nodelist = parser . parse ( ( 'endif' , ) )
     @ register . filter ( is_safe = False )
 for key_value in natural :
 def templatetag ( parser , token ) :
  dot = len ( package )
      Morsel = http_cookies . Morsel
   def save_existing_objects ( self , commit = True ) :
 space = unicode ( " " )
     @ python_2_unicode_compatible
  else :
          parser . add_argument ( 'args' , metavar = 'fixture' , nargs = '+' ,  help = 'Fixture labels.' )
 self . html_initial_name = form . add_initial_prefix ( name )
                              cursor . execute ( sql )
                  return value . pk
  self . endElement ( name )
  cookiedict = { }
              return ''
   def reset ( self ) :
  except UnicodeEncodeError :
  def __init__ ( self , nodelist_true , nodelist_false , * varlist ) :
              return default
 mixed_subtype = 'mixed'
 self . position -= len ( bytes )
      pass
                      if not self . compile_filter_error ( token , e ) :
              encoding = self . encoding or settings . DEFAULT_CHARSET
  else :
      class BaseModelFormSet ( BaseFormSet ) :
          raise TemplateSyntaxError ( "%r received an invalid token: %r" %  ( bits [ 0 ] , remaining_bits [ 0 ] ) )
              return
                  self . stderr . write ( "The po files under %s are in a seemingly not writable location. "  "mo files will not be updated/created." % dirpath )
              raise MultiPartParserError ( 'Invalid Content-Type: %s' % content_type )
    def _split_statements ( content ) :
    x = 0
 return msgid
 from django . utils . datastructures import MultiValueDict
 self . text = text
  else :
 try :
   if match :
                          year_val , month_val , day_val = [ int ( v ) for v in match . groups ( ) ]
     key = hashlib . sha1 ( key_salt + secret ) . digest ( )
                  name , ext = os . path . splitext ( name )
                      self . stdout . write ( self . style . MIGRATE_LABEL ( "  Unapply all migrations: " ) + "%s" % ( targets [ 0 ] [ 0 ] , ) )
  import logging
 connection . close ( )
 from django . utils . translation import trans_real
 self . prog_name = os . path . basename ( self . argv [ 0 ] )
   def to_language ( self ) :
              key += tuple ( type ( v ) for v in args )
  import decimal
 import sys
    def __repr__ ( self ) :
      class _MovedItems ( _LazyModule ) :
   RAISE_ERROR = object ( )
    chunk = stream . read ( max_header_size )
          if self . is_localized :
                location = '//%s' % self . get_full_path ( )
          return json . dumps ( { f : e . get_json_data ( escape_html ) for f , e in self . items ( ) } )
 params . update ( kwargs )
  def _format_value ( self , value ) :
  else :
   class Command ( BaseCommand ) :
   full_module_name = package_name + '.' + module_name
 args = ''
          context_extras [ 'debug' ] = True
 try :
 executor = MigrationExecutor ( connections [ DEFAULT_DB_ALIAS ] )
 yield "# Also note: You'll have to insert the output of 'django-admin.py sqlcustom [app_label]'"
  with self . _lock :
              raise ValueError ( "Don't mix *args and **kwargs in call to reverse()!" )
     for field in concrete_model . _meta . many_to_many :
     class ZipArchive ( BaseArchive ) :
                  break
 def _archive_cls ( file ) :
      class BoundaryIter ( six . Iterator ) :
     class SplitDateTimeField ( MultiValueField ) :
 func . __doc__ = doc
  except Exception :
      format_key = 'DATETIME_INPUT_FORMATS'
    class BaseMemcachedCache ( six . with_metaclass ( BaseMemcachedCacheMethods , BaseCache ) ) :
  elif size < len ( self . buffer ) :
 code = 'invalid'
 return sql_create ( app_config , style , connection ) + sql_custom ( app_config , style , connection ) + sql_indexes ( app_config , style , connection )
          opts = self . _meta
                       file_name = disposition . get ( 'filename' )
  elif not isinstance ( value , ( list , tuple ) ) :
 domain_whitelist = [ 'localhost' ]
 return (  path or '%s.%s' % ( obj . __class__ . __module__ , obj . __class__ . __name__ ) ,  obj . _constructor_args [ 0 ] ,  obj . _constructor_args [ 1 ] ,  )
 if self . use_natural_keys :
          return (  isinstance ( other , RegexValidator ) and  self . regex . pattern == other . regex . pattern and  self . regex . flags == other . regex . flags and  ( self . message == other . message ) and  ( self . code == other . code ) and  ( self . inverse_match == other . inverse_match )  )
          return self . render ( )
 filters = config . pop ( 'filters' , None )
                  os . makedirs ( dirname )
 self . validate_key ( key )
 while i < len ( subject ) and subject [ i ] not in ( ' ' , '\t' ) :
  po_path = os . path . join ( dirpath , f )
   def to_python ( self , value ) :
  elif cmatches :
                       key = make_key ( args , kwds , typed ) if kwds or typed else args
                          pk_value = self . get_queryset ( ) [ index ] . pk
 yield "#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table"
 kwargs = kwargs or { }
  return id_
          encoding = locale . getdefaultlocale ( ) [ 1 ] or 'ascii'
  fixture_files_in_dir = [ ]
   if kwargs :
          self . command_stack . append ( ( command , token . source ) )
                      output . append ( error_row % force_text ( bf_errors ) )
 return super ( QueryDict , self ) . pop ( key , * args )
  return obj_pk
 try :
                  if path . isfile ( path_to_remove ) :
  def __init__ ( self , nodelist , parent_name , template_dirs = None ) :
                          locks . lock ( fd , locks . LOCK_EX )
  except KeyError :
   def handle ( self , * args , ** options ) :
   class Command ( BaseCommand ) :
   else :
  TEMPLATE_FRAGMENT_KEY_TEMPLATE = 'template.cache.%s.%s'
       else :
                      self . xml . startElement ( "natural" , { } )
     def include_is_allowed ( filepath ) :
 from django . core . management . base import BaseCommand , CommandError
 if not os . path . exists ( top_dir ) :
  filename = os . path . join ( to_path , name )
 self . paths_to_remove = [ ]
  if option [ 1 ] :
  import re
              tzinfo = utc
                  bad_app_labels . add ( app_label )
  else :
   def as_table ( self ) :
    class CheckRegistry ( object ) :
 help = ''
  tt = time . localtime ( stamp )
 for name , app in six . iteritems ( get_commands ( ) ) :
              self . clear ( )
                  from django . core . servers . fastcgi import FASTCGI_OPTIONS
          ext_list . extend ( ext . replace ( ' ' , '' ) . split ( ',' ) )
                   result . append ( "." )
  elif token_string . startswith ( BLOCK_TAG_START ) :
  if format not in _serializers :
   def render ( self , name , value , attrs = None ) :
          return bool ( self . dict )
                      self . stdout . write ( self . style . MIGRATE_LABEL ( "  Branch %s" % migration . name ) )
 from django . utils . deconstruct import deconstructible
   return val , encoded
 if app_label not in executor . loader . migrated_apps :
              if len ( app_labels ) > 1 and primary_keys :
  else :
                  error_dict . setdefault ( field , [ ] ) . extend ( error_list )
  commands = get_commands ( )
   def patch_cache_control ( response , ** kwargs ) :
                              return result
  return TimestampSigner ( key , salt = salt ) . sign ( base64d )
    potfiles = [ ]
   def render ( self ) :
 HITS , MISSES = 0 , 1
  else :
  inputs . append ( format_html ( '<input{0} />' , flatatt ( input_attrs ) ) )
 nodelist = parser . parse ( ( 'elif' , 'else' , 'endif' ) )
  sign , digittuple , exponent = value . as_tuple ( )
 def is_hidden ( self ) :
   def __str__ ( self ) :
 self . _unget_history = [ ]
  self . nodelist = compile_string ( template_string , origin )
  if response is None :
     class ModelChoiceField ( ChoiceField ) :
                  self . timezone = get_default_timezone ( )
  initial_set = set ( force_text ( value ) for value in initial )
 return _generate_cache_key ( request , request . method , [ ] , key_prefix )
  return self . number * self . paginator . per_page
   def __iter__ ( self ) :
 from django . core . exceptions import MiddlewareNotUsed , PermissionDenied , SuspiciousOperation
              other_dict = args [ 0 ]
   filepath = parser . compile_filter ( bits [ 1 ] )
 from django . utils import six
 for key in self :
     def is_safe_url ( url , host = None ) :
  if arg is None :
                  if args :
              raise AttributeError ( "This QueryDict instance is immutable" )
 msgs , errors , status = popen_wrapper ( args )
 def __init__ ( self , stream , limit , buf_size = 64 * 1024 * 1024 ) :
              doomed = [ k for ( i , k ) in enumerate ( self . _cache ) if i % self . _cull_frequency == 0 ]
 return datetime . time ( ** kw )
 data = method ( self , * args , ** kwargs )
   def l ( self ) :
 self . show_hidden_initial = show_hidden_initial
              if hasattr ( field . rel . to . _default_manager , 'get_by_natural_key' ) :
    class HttpResponseBase ( six . Iterator ) :
  string_concat = lazy ( _string_concat , six . text_type )
  if hasattr ( TemplateLoader , 'load_template_source' ) :
     super ( SimpleTemplateResponse , self ) . __init__ ( '' , content_type , status )
          stat = os . stat ( filename )
          return self . __class__ ( [  ( k , v [ : ] )  for k , v in self . lists ( )  ] )
                  values = self . sequence . resolve ( context , True )
 app . start ( )
          if filepath . startswith ( root ) :
   if os . path . isabs ( fixture_name ) :
          self . seek ( 0 )
                      resource = resource . decode ( settings . FILE_CHARSET )
  elif not base_url . endswith ( '/' ) :
   def __delattr__ ( self , name ) :
                  item_date = item . get ( date_key )
 from django . utils . datastructures import MultiValueDict , MergeDict
  sub_ul_renderer = ChoiceFieldRenderer ( name = self . name ,  value = self . value ,  attrs = attrs_plus ,  choices = choice_label )
 return chunk
 Field . creation_counter += 1
  for i , field in enumerate ( self . fields ) :
  words = allow_lazy ( words )
                          self . stdout . write ( "    - %s\n" % operation . describe ( ) )
                result = SimpleLazyObject ( self . _setupfunc )
                  pass
  return ExtendsNode ( nodelist , parent_name )
  prefix_norm , prefix_args = normalize ( urlquote ( _prefix ) ) [ 0 ]
  else :
 result += ':' + ipv4_address
 self . _js = [ ]
  except KeyError :
                         self . handle_file_complete ( old_field_name , counters )
                      pass
  try :
   else :
                  raise TemplateSyntaxError ( "Only 'silent' flag is allowed after cycle's name, not '%s'." % args [ - 1 ] )
    def is_naive ( value ) :
              if migration . replaces :
 if not f . blank and not form_field . required and field_value in form_field . empty_values :
  except ( KeyError , AttributeError ) as exc :
              value = self . decompress ( value )
   def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
 kwarg_format = match and match . group ( 1 )
 def __init__ ( self , file , field_name , name , content_type , size , charset , content_type_extra = None ) :
       def pk_is_not_editable ( pk ) :
          return WRAPPER_ASSIGNMENTS
              cache_choices = False
 self . pubid = pubid
           LOCK_EX = LOCK_SH = LOCK_NB = 0
  return templatetags_modules
          from django . conf import settings
                          last_row = ( normal_row % { 'errors' : '' , 'label' : '' ,  'field' : '' , 'help_text' : '' ,  'html_class_attr' : html_class_attr } )
 verbosity = options . get ( 'verbosity' )
              return
                          for sql in sql_list :
 dict . __setitem__ ( self , key , M )
  else :
          parts = [ ]
  break
  else :
   def __nonzero__ ( self ) :
      def __init__ ( self , template_string , origin ) :
 from collections import OrderedDict
 self . verbosity = options . get ( 'verbosity' )
 if parsed . scheme and parsed . scheme not in self . allowed_schemes :
                  files . append ( entry )
 for accept_lang , unused in parse_accept_lang_header ( accept ) :
import warnings
 if data is None or isinstance ( data , dict ) :
  if m :
  self . _current [ field . name ] = value
 self . choice_label = force_text ( choice [ 1 ] )
   @ property
              self . stream . write ( "\n" )
 from django . utils . encoding import force_text , python_2_unicode_compatible
 secret = force_bytes ( secret )
  for choice in self . field . choice_cache :
  db = router . db_for_write ( self . cache_model_class )
 return mark_safe ( conditional_escape ( sep ) . join (  format_html ( format_string , * tuple ( args ) )  for args in args_generator ) )
 import json
 return format_html ( '<textarea{0}>\r\n{1}</textarea>' ,  flatatt ( final_attrs ) ,  force_text ( value ) )
                  if model in excluded_models :
 singular = [ ]
                          self . stdout . write ( "    - %s\n" % operation . describe ( ) )
  return error_dict
          if source [ 1 ] is None :
    return obj_dict
 upto = end
   def __str__ ( self ) :
 if m . group ( 1 ) :
 return re . sub ( "\d([A-Z])" , lambda m : m . group ( 0 ) . lower ( ) , t )
              content = File ( content )
 nonlocal_root = [ root ]
   @ python_2_unicode_compatible
   def entity_decl ( self , name , is_parameter_entity , value , base ,  sysid , pubid , notation_name ) :
   def get_internal_wsgi_application ( ) :
  return result . lower ( )
  else :
 if response :
  else :
  def inner ( check ) :
   def create_variable_node ( self , filter_expression ) :
              deactivate_all ( )
              try :
                  for model in model_list :
         model_list = [ ]
      from collections import UserList
              close = self . closed
 parser . add_argument ( '--extension' , '-e' , dest = 'extensions' ,  help = 'The file extension(s) to examine (default: "html,txt", or "js" '  'if the domain is "djangojs"). Separate multiple extensions with '  'commas, or use -e multiple times.' ,  action = 'append' )
  from django . utils . dates import MONTHS , MONTHS_3 , MONTHS_ALT , MONTHS_AP , WEEKDAYS , WEEKDAYS_ABBR
 code = 'min_length'
  if self . is_url ( template ) :
          return ''
   def as_json ( self , escape_html = False ) :
  def tzname ( self , dt ) :
   def __contains__ ( self , key ) :
          pathext = os . environ . get ( 'PATHEXT' , '.COM;.EXE;.BAT;.CMD' ) . split ( os . pathsep )
   BUILTIN_SERIALIZERS = {  "xml" : "django.core.serializers.xml_serializer" ,  "python" : "django.core.serializers.python" ,  "json" : "django.core.serializers.json" ,  "yaml" : "django.core.serializers.pyyaml" ,  }
    def is_valid_path ( path , urlconf = None ) :
           if args [ - 3 ] == "as" :
              if self . _varlist :
  else :
          if app_config . models_module is None :
  output = [ ]
  else :
          parser . add_argument ( 'args' , nargs = argparse . REMAINDER ,  help = 'Various KEY=val options.' )
   @ property
  os . _exit ( 1 )
  if isinstance ( s , six . memoryview ) :
  else :
                      obj = None
 dict . __setitem__ ( self , key , http_cookies . Morsel ( ) )
  if command in parse_until :
  for basedir in basedirs :
 if not match or not match . group ( 1 ) :
 if _globs_ is None :
      status_code = 410
           yes , no , maybe = bits [ 0 ] , bits [ 1 ] , bits [ 1 ]
          candidate = str ( candidate )
                  data = self . _coerce ( data )
  else :
 self . _content_length = content_length
              return None
          exp = Decimal ( '1.0' ) / ( Decimal ( 10 ) ** abs ( p ) )
   if self . empty_permitted and not self . has_changed ( ) :
 return field . widget . value_from_datadict ( self . data , self . files , prefix )
   def N ( self ) :
                  error_messages = opts . error_messages [ NON_FIELD_ERRORS ]
   format_locations = [ ]
   else :
 def default ( value , arg ) :
         if six . PY3 or os . name == 'nt' :
              app_configs = None
              value = getattr ( opts , opt )
  return value
   executor = MigrationExecutor ( connection )
   if terminal_char != ')' :
                  name = match . lastgroup
                              message_context = message_context . strip ( "'" )
   try :
 self . cdata_tag = None
                  if fake :
 try :
  class SimpleNode ( TagHelperNode ) :
 if self . setting :
 return get_valid_filename ( name )
   def __exit__ ( self , exc , value , tb ) :
          return locale . lower ( )
      pass
           return s
          self . tokens . insert ( 0 , token )
   if i >= len ( subject ) :
   optimizer = MigrationOptimizer ( )
          key = self . make_key ( key , version = version )
  if connection . settings_dict [ 'ENGINE' ] == 'django.db.backends.dummy' :
 from django . utils import six
              return value
 return b'' . join ( T ) + F ( l ) [ : r ]
                      e . message = self . error_messages [ e . code ]
                  view = transaction . atomic ( using = db . alias ) ( view )
 return self . incr_version ( key , - delta , version )
          self . _archive = tarfile . open ( file )
 def comment ( parser , token ) :
  values = [ parser . compile_filter ( bit ) for bit in bits [ 1 : ] ]
  return ' ' . join ( words )
          kw = match . groupdict ( )
 input_formats = formats . get_format_lazy ( 'DATE_INPUT_FORMATS' )
  if self . obj is None :
            all_models = [ ]
     class DateInput ( DateTimeBaseInput ) :
              host = self . META [ 'HTTP_X_FORWARDED_HOST' ]
 class MinValueValidator ( BaseValidator ) :
      class WithNode ( Node ) :
 import keyword
  except ImportError :
   def hidden_fields ( self ) :
  __all__ = ( 'WSGIServer' , 'WSGIRequestHandler' )
    if not only_initial :
     def delete ( self , key , version = None ) :
  def __init__ ( self ) :
 if use_natural_keys :
  return klass
          return self . _headers . get ( header . lower ( ) , ( None , alternate ) ) [ 1 ]
              try :
          return force_str ( '<%s %s %s>' % ( self . __class__ . __name__ , self . name , self . regex . pattern ) )
  except AttributeError :
   def handle ( self , * app_labels , ** options ) :
          raise TemplateSyntaxError ( "'autoescape' argument should be 'on' or 'off'" )
   attrs = [ ]
  __iter__ = _iterkeys
 duplicate . render_context = copy ( self . render_context )
  for meta_line in self . get_meta ( table_name ) :
  split . append ( bit )
   def __next__ ( self ) :
  from django . apps import apps
   for module_to_search in args :
 from __future__ import unicode_literals
   loopvars = re . split ( r' *, *' , ' ' . join ( bits [ 1 : in_index ] ) )
  try :
          script_name = get_script_name ( environ )
   self . year_none_value = ( 0 , empty_label [ 0 ] )
 cache = _create_cache ( backend , ** kwargs )
 result = self . configurator . convert ( value )
 upto = start
  try :
                  end -= 1
          return path . decode ( fs_encoding )
   def parse_args ( self , args = None , namespace = None ) :
          return self
   return result
 if value in self . empty_values :
  fields = [ ( field_name , attrs . pop ( field_name ) ) for field_name , obj in list ( six . iteritems ( attrs ) ) if isinstance ( obj , Field ) ]
 parts . append ( "(?P<%s>%s)" % ( groupid , tok . regex ) )
 if len ( self . namelist ( ) ) != 1 :
    def flatten_result ( source ) :
              file_field_list . append ( f )
 return self . format ( 'D, j M Y H:i:s O' )
  write ( end )
 return MONTHS_ALT [ self . data . month ]
                   parser . add_argument ( 'args' , nargs = '*' )
    def catalog ( ) :
 is_relation = i in relations
 self . level = level
  filters = config . get ( 'filters' , None )
 token = parser . next_token ( )
  return nodes
 _file = None
 self . dicts = dicts
  if formatter :
   self . creation_counter = Field . creation_counter
          self . close ( )
              invalid_apps = [ ]
 def __init__ ( self , fields = ( ) , * args , ** kwargs ) :
   _format_cache [ cache_key ] = None
 if isinstance ( d , real_datetime ) :
                  definition [ 'fg' ] = fg
  except Exception as e :
          self . _current = None
 if cache_timeout is None :
 _encoding = None
                      filename = filename . encode ( 'utf-8' )
 encoding = None
              c = config . pop ( '()' )
 import warnings
  if self . _read_started and not hasattr ( self , '_body' ) :
    self . _name = name
   if os . name == 'nt' :
 from django . core import mail
   def find_commands ( management_dir ) :
  return self . __class__ ( self )
  else :
                      for ( k , v ) in type_ . __dict__ . items ( ) :
                    numbers = [  MigrationAutodetector . parse_number ( migration . name )  for migration in merge_migrations  ]
              raise InvalidTemplateLibrary ( "Unsupported arguments to "  "Library.tag: (%r, %r)" , ( name , compile_function ) )
 for key , value in data :
  pickled = pickle . dumps ( value , pickle . HIGHEST_PROTOCOL )
                   if key not in self :
              value = self . coerce ( value )
              if isinstance ( other , Promise ) :
  else :
  if self . data . minute == 0 and self . data . hour == 12 :
              if code in _supported and check_for_language ( code ) :
   def handle ( self , * app_labels , ** options ) :
  parser . __loaded_blocks . append ( block_name )
 from django . core . validators import validate_ipv4_address
 from django . utils . timezone import template_localtime
 @ stringfilter
   def start_object ( self , obj ) :
 def content ( self ) :
  def _get_page_range ( self ) :
              kwargs [ 'instance' ] = self . get_queryset ( ) [ i ]
 from django . core . files import uploadhandler
   tag = match . group ( 1 ) . strip ( )
      t = s . split ( '=' , 1 )
              return SafeText ( t )
  from django . conf import settings
 quant . append ( ch )
  else :
              if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
  for line in chunk_buffer :
          return not ( self == other )
          self . mutex = threading . RLock ( )
  id = "(%s) " % self . id if self . id else ""
  except StopIteration :
          vary_headers = [ ]
 return val
          path = os . environ . get ( 'PATH' , '' ) . split ( os . pathsep )
              raise CommandError ( "couldn't download URL %s to %s: %s" %  ( url , filename , e ) )
  self . startElement ( name , attrs )
          self . var1 , self . var2 = var1 , var2
   else :
          if kwarg_format :
          parser . add_argument ( '--plain' , action = 'store_true' , dest = 'plain' ,  help = 'Tells Django to use plain Python, not IPython or bpython.' )
 value = force_text ( value )
                  migration . branch = migration . ancestry [  ( migration . ancestry . index ( common_ancestor ) + 1 ) :  ]
 notifier . stop ( )
          if data :
  except ImportError :
 return result
 conditions_nodelists = [ ( condition , nodelist ) ]
import sys
                      import logging . handlers
                          raise ValueError (  "%s.process_template_response didn't return an "  "HttpResponse object. It returned None instead."  % ( middleware_method . __self__ . __class__ . __name__ ) )
 choices = list ( six . iteritems ( self . months ) )
                  return default
          key = self . make_key ( key , version = version )
  else :
  known_models . add ( model )
          return '\x1b[%sm' % RESET
 from django . utils . html import escape
   filesize_number_format = lambda value : formats . number_format ( round ( value , 1 ) , 1 )
 field_params = { }
    if self . merge and not conflicts :
          if settings . FILE_UPLOAD_TEMP_DIR :
          parser . add_argument ( 'args' , metavar = 'test_label' , nargs = '*' ,  help = 'Module paths to test; can be modulename, modulename.TestCase or modulename.TestCase.test_method' )
    if self . file_permissions_mode is not None :
                      attrvalue = self . unescape ( attrvalue )
  __author__ = "Benjamin Peterson <benjamin@python.org>"
 for localedir in reversed ( settings . LOCALE_PATHS ) :
 self . _lock = _locks . setdefault ( name , RWLock ( ) )
 get_language = lambda : settings . LANGUAGE_CODE
               self . options . update ( { 'use_decimal' : False } )
                  expiry = self . get_backend_timeout ( timeout )
 return self
   _called_from_command_line = False
     def deactivate ( ) :
 @ stringfilter
                  raise TemplateSyntaxError ( "Searching for value. Unexpected "  "end of string in column %d: %s" %  ( i , subject ) )
          result = super ( ChoiceField , self ) . __deepcopy__ ( memo )
 data = method ( self , * args , ** kwargs )
   return data
 if not self . is_valid ( ) :
  return 0
  return timesince ( value )
 if related_att is not None :
   def _handle_object ( self , node ) :
 return filenames
 return escape ( value )
                  exp = datetime . fromtimestamp ( timeout )
              key = self . make_key ( key , version = version )
 HttpResponse . content . fset ( self , value )
 def encoding ( self ) :
      else :
              self . style = no_style ( )
          sys . modules [ __name__ + ".moves." + attr . name ] = attr
   @ property
  self . add_arguments ( parser )
  i += 1
     class NullBooleanField ( BooleanField ) :
 if self . verbatim and block_content == self . verbatim :
   @ property
 return data
          return setattr ( caches [ DEFAULT_CACHE_ALIAS ] , name , value )
 with self . _lock . writer ( ) :
                          loaded_objects_in_fixture += 1
              if not value or not [ v for v in value if v not in self . empty_values ] :
     return URLNode ( viewname , args , kwargs , asvar )
   def run_from_argv ( self , argv ) :
              truncate = pgettext (  'String to return when truncating text' ,  '%(truncated_text)s...' )
   def _populate ( self ) :
      def _media ( self ) :
               palette . update ( PALETTES [ part ] )
          min_num = DEFAULT_MIN_NUM
  raise
      def __init__ ( self , attrs = None ) :
          try :
 from django . conf import settings
      from functools import lru_cache
   return number
 _ , content_params = cgi . parse_header ( environ . get ( 'CONTENT_TYPE' , '' ) )
              addr = Header ( addr , encoding ) . encode ( )
          cache_timeout = settings . CACHE_MIDDLEWARE_SECONDS
      return lazy ( func , * resultclasses ) ( * args , ** kwargs )
              return key_func
  except DecimalException :
  if isinstance ( path , six . string_types ) :
    def get_max_age ( response ) :
 using_sysrandom = False
          return "\\u%04x" % ord ( match . group ( 1 ) )
                       if lookup == 'date' :
          _ExpatParser . reset ( self )
      format_key = 'TIME_INPUT_FORMATS'
  module = type ( 'BadSerializerModule' , ( object , ) , {  'Deserializer' : bad_serializer ,  'Serializer' : bad_serializer ,  } )
          widgets = ( DateInput ( attrs = attrs , format = date_format ) ,  TimeInput ( attrs = attrs , format = time_format ) )
 if end_index is None and s_len > truncate_len :
   def size ( self , name ) :
   get_git_changeset . cache = changeset
          query = query . lists ( )
  def __init__ ( self , message = None , code = None , whitelist = None ) :
 if text == '' and len ( opts ) == 1 and opts [ 0 ] == 'reset' :
 object_data = model_to_dict ( instance , opts . fields , opts . exclude )
    def sql_indexes ( app_config , style , connection ) :
 sys . exit ( 1 )
      import bz2
          return set ( chain ( * [ check . tags for check in self . registered_checks if hasattr ( check , 'tags' ) ] ) )
              data = data or [ ]
  else :
              raise ValidationError ( self . error_messages [ 'invalid_list' ] , code = 'invalid_list' )
  return False
     @ deconstructible
 return from_current_timezone ( result )
 if 'class' in attrs :
   return attrs
 import types
              raise ValueError (  "'%s.%s' has more than one ForeignKey to '%s.%s'."  % ( model . _meta . app_label , model . _meta . object_name , parent_model . _meta . app_label , parent_model . _meta . object_name ) )
 self . max_expr = max_expr
   def __contains__ ( self , key ) :
                      number_value = rhs
   def setlistdefault ( self , key , default_list = None ) :
              return smart_text ( token )
 from __future__ import unicode_literals
          ULONG_PTR = c_int64
      if current_version >= ( 3 , 4 ) :
 self . prefix = prefix
 raise NotImplementedError ( 'subclasses of Storage must provide a delete() method' )
 auto_id = self . form . auto_id
  if field in self . errors :
                      words [ i ] = mark_safe ( word )
              return default
    hextets = ip_str . split ( ":" )
     class EmailMultiAlternatives ( EmailMessage ) :
 from django . utils . encoding import iri_to_uri , force_bytes , force_text
     if not isinstance ( value , list ) :
                              current = current [ int ( bit ) ]
 import json
  from __future__ import unicode_literals
  except TypeError as te :
 value = field . clean ( value , initial )
                      message = e
              while new_name . find ( '__' ) >= 0 :
  from xml . sax . saxutils import XMLGenerator
  except Model . DoesNotExist :
    for f in file_field_list :
               if ( isinstance ( data , Node ) and not data . negated  and ( data . connector == conn_type or len ( data ) == 1 ) ) :
                              file_ , _ , _ = imp . find_module ( module_name , [ entry ] )
          if self not in context . render_context :
  sql , references = connection . creation . sql_create_model ( model , no_style ( ) , seen_models )
                              message_context = message_context . strip ( "'" )
 pass
  moves = sys . modules [ __name__ + ".moves" ] = _MovedItems ( __name__ + ".moves" )
  if self . feed [ 'subtitle' ] is not None :
 if hasattr ( rel_model , 'natural_key' ) and rel_model != model :
          _anonymous_ = [ '_offset_union' ]
          return mark_safe ( six . text_type ( value ) )
              charset = msg . get_charset ( ) . get_output_charset ( ) if msg . get_charset ( ) else 'utf-8'
   def has_key ( self , key , version = None ) :
 BytesIO = io . BytesIO
 from django . core import checks
          __bytes__ = serialize_headers
   if options [ "pidfile" ] :
          items = _iteritems
    return [ self . forms [ i ] for i in self . _deleted_form_indexes ]
              if six . PY3 :
  self . lookups = tuple ( var . split ( VARIABLE_ATTRIBUTE_SEPARATOR ) )
   def get_block ( self , name ) :
                      self . _errors [ field ] = self . error_class ( )
  class HTMLParser ( _html_parser . HTMLParser ) :
                              matches = False
 try :
 if result :
    class ManagementUtility ( object ) :
 from django . utils . encoding import force_text
   def unparsed_entity_decl ( self , name , base , sysid , pubid , notation_name ) :
 self . attrs = attrs
                  raise CommandError (  "Multiple fixtures named '%s' in %s. Aborting." %  ( fixture_name , humanize ( fixture_dir ) ) )
 try :
    sql_list = sql_flush ( self . style , connection , only_django = True ,  reset_sequences = reset_sequences ,  allow_cascade = allow_cascade )
                  input_format = get_format ( 'DATE_INPUT_FORMATS' ) [ 0 ]
 label = 'label'
  def __init__ ( self , parser , * args , ** kwargs ) :
              return self . filter_expr . resolve ( context )
  if self . META . get ( header , None ) == value :
    class Command ( BaseCommand ) :
  modules = _format_modules_cache . setdefault ( lang , list ( iter_format_modules ( lang , settings . FORMAT_MODULE_PATH ) ) )
  self . _callback_str = prefix + '.' + self . _callback_str
          if hasattr ( self , '_files' ) :
 if token == "not" and i + 1 < l and tokens [ i + 1 ] == "in" :
      help = "Deprecated - use 'migrate' instead."
              if field is not None :
               return
   def handle_charref ( self , name ) :
   self . use_ipv6 = options . get ( 'use_ipv6' )
 return result
 os . chdir ( our_home_dir )
                          date_data = ( getattr ( form . cleaned_data [ unique_for ] , lookup ) , )
    class ImproperlyConfigured ( Exception ) :
          self . writer_enters ( )
  return combined
 from xml . sax import handler
  except ValueError :
               try :
  sys . exit ( 0 )
 yield buf . read ( )
 parse = sys . modules [ __name__ + ".moves.urllib_parse" ]
      def __init__ ( self , template_string , origin = None , name = None ) :
              return [ ]
 cursor . execute ( "SELECT COUNT(*) FROM %s" % table )
   def appendlist ( self , key , value ) :
 return self
 if 'date' not in header_names :
 for renamed_method in cls . renamed_methods :
   if target is None :
              sys . stdout . write ( self . main_help_text ( ) + '\n' )
 from math import ceil
   return name
   def read ( self ) :
   return client
   class Command ( AppCommand ) :
 args , varargs , varkw , defaults = getargspec ( func )
  output = [ ]
          return [ ]
                      continue
              return SafeBytes ( data )
  return True
   if six . PY3 :
   def _construct_form ( self , i , ** kwargs ) :
                  os . unlink ( pot_path )
  if confirm == 'yes' :
              if i :
 self . queryset = queryset
              id_ += '_0'
                return False
    def get_unique_error_message ( self , unique_check ) :
  except ImportError :
          ch , escaped = next ( input_iter )
   def handle_entityref ( self , name ) :
   sign = '-' if offset < 0 else '+'
 forms = ' ' . join ( form . as_p ( ) for form in self )
   def send_messages ( self , email_messages ) :
  if exclude and f . name in exclude :
                  chunk = self . _read_limited ( )
   def close_caches ( ** kwargs ) :
                  if value is None and attr in declared_fields :
   else :
          daemon_kwargs [ 'umask' ] = int ( options [ 'umask' ] , 8 )
              return int ( cc [ 'max-age' ] )
    def get_unique_error_message ( self , unique_check ) :
 return self . _html_output (  normal_row = '<tr%(html_class_attr)s><th>%(label)s</th><td>%(errors)s%(field)s%(help_text)s</td></tr>' ,  error_row = '<tr><td colspan="2">%s</td></tr>' ,  row_ender = '</td></tr>' ,  help_text_html = '<br /><span class="helptext">%s</span>' ,  errors_on_separate_row = False )
      def print_ ( * args , ** kwargs ) :
          attrs [ 'localized_fields' ] = localized_fields
  return value
 from django . utils . safestring import mark_safe
  else :
  want_unicode = False
 import sys
 while 1 :
          self . is_bound = data is not None or files is not None
   def lock ( f , flags ) :
 _func_code = "__code__"
              return self . _stream . read ( * args , ** kwargs )
          neg , value = self . convert ( s , self . digits , self . decimal_digits , self . sign )
 form = self . form ( ** defaults )
 if bits [ in_index ] != 'in' :
     class AppCommand ( BaseCommand ) :
   def add ( self , data , conn_type , squash = True ) :
  for base in inspect . getmro ( new_class ) :
 total_forms = max ( initial_forms , self . min_num ) + self . extra
 for k in keys :
 options = [ opt for opt in options if opt [ 0 ] not in prev_opts ]
 form . _errors [ NON_FIELD_ERRORS ] = self . error_class ( [ self . get_form_error ( ) ] )
 def __prepare_class__ ( cls ) :
                  yield choice
 if pattern . name is not None :
 self . default_locale_path = None
 return localtime ( value ) if should_convert else value
          memoryview = buffer
              app_configs = [ apps . get_app_config ( app_label ) for app_label in app_labels ]
   return response
          args = ( )
          try :
              value = values . get ( value . lower ( ) , value )
from __future__ import unicode_literals
 date_keys = ( 'updateddate' , 'pubdate' )
 import re
 from . registry import register , run_checks , tag_exists , Tags
  else :
              return format ( value , arg )
  else :
              yield k
          value = data . get ( name , None )
  self . validate_name ( name , app_or_project )
    obj = base . build_instance ( Model , data , self . db )
   def encode ( self , i ) :
 return RegexURLResolver ( r'^/' , [ ns_resolver ] )
  remove_tags = allow_lazy ( remove_tags , six . text_type )
   parser . add_library ( temp_lib )
                   logger = logging . getLogger ( 'py.warnings' )
              output = next ( self . _producer )
  raise AttributeError ( "Unable to determine the file's size." )
    def start_serialization ( self ) :
  except KeyError :
          strerror = force_text ( e . strerror , DEFAULT_LOCALE_ENCODING ,  strings_only = True )
 final_output = [ ]
                   self . handle_startendtag ( tag , attrs )
              try :
 if self . timeout is not None :
   dirs . extend ( list ( settings . FIXTURE_DIRS ) )
          self . template_string = template_string
  r = o . isoformat ( )
 if router . allow_migrate ( self . using , obj . object . __class__ ) :
 if result is not root :
                  raise CommandError ( "%r is not a valid port number." % self . port )
                      for f in dirs :
  if line :
                  used += '.' + frag
 sublist = '\n%s<ul>\n%s\n%s</ul>\n%s' % ( indent , sublist ,  indent , indent )
           defaults , _ = parser . parse_args ( args = [ ] )
          as_bytes = as_string
   def previous_page_number ( self ) :
          return self . __name
 self . locale_paths . insert ( 0 , os . path . join ( os . path . abspath ( dirpath ) , dirname ) )
 self . _leftover = b'' . join ( [ bytes , self . _leftover ] )
     class RssUserland091Feed ( RssFeed ) :
 kw [ 'tzinfo' ] = tzinfo
  exclude . append ( name )
   def root_attributes ( self ) :
  self . _cached_loaders = cached_loaders
 self . validate_key ( key )
 if tzinfo [ 0 ] == '-' :
 import sys
              parser = CommandParser ( self , prog = "%s %s" % ( os . path . basename ( prog_name ) , subcommand ) ,  description = self . help or None )
 overlapped = OVERLAPPED ( )
 return '\n' . join ( statements )
                merge_migrations = [ ]
                  domain_part = domain_part . encode ( 'idna' ) . decode ( 'ascii' )
   def prepend_token ( self , token ) :
 def as_data ( self ) :
 parser . add_argument ( '--no-optimize' , action = 'store_true' , dest = 'no_optimize' , default = False ,  help = 'Do not try to optimize the squashed operations.' )
                  raise ImproperlyConfigured ( "Error importing template source loader %s - can't pass arguments to function-based loader." % loader )
                  truncate_len -= 1
  except Exception as e :
                  def handle_m2m ( value ) :
     def format_html ( format_string , * args , ** kwargs ) :
  try :
 self . pointer = i
  thefile = '%s.py' % self . file
   return False
 prefixed = name + "."
 from django . forms . widgets import Media , MediaDefiningClass , TextInput , Textarea
  except AttributeError :
          prefix += '/'
  def __init__ ( self , children = None , connector = None , negated = False ) :
          key = self . cache_key ( template_name , template_dirs )
          if block_name in parser . __loaded_blocks :
      class CacheClass ( LocMemCache ) :
 self . nodelist_true , self . nodelist_false = nodelist_true , nodelist_false
    elif t . token_type == TOKEN_COMMENT :
     def Deserializer ( stream_or_string , ** options ) :
          return self . _headers [ header . lower ( ) ] [ 1 ]
 pass
   def get_fixed_timezone ( offset ) :
   def handle_app_config ( self , app_config , ** options ) :
 if isinstance ( item . get ( 'unique_id_is_permalink' ) , bool ) :
      def validate_integer ( value ) :
  warn_msg = ( "The translator-targeted comment '%s' "  "(%sline %d) was ignored, because it wasn't the last item "  "on the line." ) % ( c , filemsg , comment_lineno_cache )
 self . _view_middleware = [ ]
     def select_template ( template_name_list , dirs = None ) :
  final_attrs = self . build_attrs ( attrs , type = self . input_type , name = name )
          return self . text
       def __init__ ( self , text , subtype , charset ) :
   class BaseEmailBackend ( object ) :
                              if self . verbosity >= 2 :
   def __repr__ ( self ) :
 if not router . allow_migrate ( database , cache . cache_model_class ) :
     class datetime ( real_datetime ) :
              if event . path . endswith ( '.mo' ) :
   if ( middle . endswith ( closing )  and middle . count ( closing ) == middle . count ( opening ) + 1 ) :
   for o in opts :
  except ImportError :
 def app_dict ( self ) :
 if value is None :
       except self . LibraryValueNotFoundException :
                   try :
  return force_text ( url )
   def cfg_convert ( self , value ) :
    ctypes , opts = parse_header ( content_type . encode ( 'ascii' ) )
                      retval = newretval
          if attrs is not None :
              return True
  return ''
 self . allow_empty_file = kwargs . pop ( 'allow_empty_file' , False )
               path_rest = root [ prefix_length : ]
 import warnings
                  import_module ( '.management' , app_config . name )
                  ser_fmt = parts [ - 1 ]
   def handle ( self , * fixture_labels , ** options ) :
  except IOError as e :
   def module_has_submodule ( package , module_name ) :
 from functools import update_wrapper
              return SafeBytes ( t )
              self . _closable_objects . append ( value )
   def format ( number , decimal_sep , decimal_pos = None , grouping = 0 , thousand_sep = '' ,  force_grouping = False ) :
   def __contains__ ( self , other ) :
 handler . startElement ( "rss" , self . rss_attributes ( ) )
  for finder in sys . meta_path :
          parts = viewname . split ( ':' )
 for i in range ( 0 , self . total_form_count ( ) ) :
 context . autoescape = old_setting
          lookups = MultiValueDict ( )
              return self . keyOrder [ : ]
 return '' . join ( force_text ( s ) for s in strings )
 from django . core . management . base import BaseCommand , CommandError
 namespaces = { }
 _url_drive_re = re . compile ( '^([a-z])[:|]' , re . I )
  if len ( bits ) < 3 or bits [ 1 ] != 'as' :
          print ( "Can't import flup." + flup_module )
 if isinstance ( self . data , datetime . datetime ) and is_aware ( self . data ) :
 self . validate_key ( key )
          def _wrapper ( self , * args , ** kwargs ) :
 if sequence_sql :
   def _ipython_pre_011 ( self ) :
    for dirname in dirs [ : ] :
    _urllib_parse_moved_attributes = [  MovedAttribute ( "ParseResult" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "SplitResult" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "parse_qs" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "parse_qsl" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urldefrag" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urljoin" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urlparse" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urlsplit" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urlunparse" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urlunsplit" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "quote" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "quote_plus" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "unquote" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "unquote_plus" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "urlencode" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "splitquery" , "urllib" , "urllib.parse" ) ,  ]
          ULONG_PTR = c_ulong
 script_name = script_url [ : - len ( path_info ) ]
 if bits and not kwarg_format :
   def main_help_text ( self , commands_only = False ) :
 if not autoescape or isinstance ( value , SafeData ) :
    s = s1
  else :
                       obj_pk = field . rel . to . _meta . pk . to_python ( n . getAttribute ( 'pk' ) )
                      filemsg = ''
  return SafeString ( str ( s ) )
  s = s . replace ( '\\' , '\\\\' )
              return escape ( output )
              password = digest ( password ) . digest ( )
                  pieces . append ( re_escaped . sub ( r'\1' , piece ) )
              content_length = 0
  else :
 oldroot [ KEY ] = key
        constant_string = r""" (?:%(i18n_open)s%(strdq)s%(i18n_close)s| %(i18n_open)s%(strsq)s%(i18n_close)s| %(strdq)s| %(strsq)s) """ % {  'strdq' : r'"[^"\\]*(?:\\.[^"\\]*)*"' ,  'strsq' : r"'[^'\\]*(?:\\.[^'\\]*)*'" ,  'i18n_open' : re . escape ( "_(" ) ,  'i18n_close' : re . escape ( ")" ) ,  }
                  raise
  _func_closure = "func_closure"
    delta = delta + datetime . timedelta ( seconds = 1 )
 @ stringfilter
 self . stdout . write ( self . style . NOTICE ( "  Run 'manage.py makemigrations' to make new migrations, and then re-run 'manage.py migrate' to apply them." ) )
      pass
              pass
   if sys . version_info [ : 2 ] == ( 2 , 7 ) :
  self . serialization_formats = serializers . get_public_serializer_formats ( )
 super ( EmailBackend , self ) . __init__ ( * args , ** kwargs )
              form = self . forms [ i ]
 from django . utils . six . moves . urllib . parse import parse_qsl , urlencode , quote , urljoin , urlsplit
  else :
          resolve ( path , urlconf )
    def has_key ( self , key ) :
          self . _archive = zipfile . ZipFile ( file )
 def debug ( parser , token ) :
          items = _iteritems
              self . style_func = style_func
                           if self . verbosity >= 3 :
 import itertools
      def __init__ ( self , * args , ** kwargs ) :
   def handle_uncaught_exception ( self , request , resolver , exc_info ) :
    class CacheKeyWarning ( DjangoRuntimeWarning ) :
              autoreload . main ( self . inner_run , None , options )
                  return True
                      return _CacheInfo ( stats [ HITS ] , stats [ MISSES ] , maxsize , len ( cache ) )
                      attrvalue = attrvalue [ 1 : - 1 ]
                  bits . append ( int ( x ) )
    class Signer ( object ) :
          templatetags_modules = get_templatetags_modules ( )
 try :
                  guid_attrs [ 'isPermaLink' ] = str (  item [ 'unique_id_is_permalink' ] ) . lower ( )
 args = [  'xgettext' ,  '-d' , domain ,  '--language=Python' ,  '--keyword=gettext_noop' ,  '--keyword=gettext_lazy' ,  '--keyword=ngettext_lazy:1,2' ,  '--keyword=ugettext_noop' ,  '--keyword=ugettext_lazy' ,  '--keyword=ungettext_lazy:1,2' ,  '--keyword=pgettext:1c,2' ,  '--keyword=npgettext:1c,2,3' ,  '--keyword=pgettext_lazy:1c,2' ,  '--keyword=npgettext_lazy:1c,2,3' ,  '--output=-'  ] + command . xgettext_options
 self . negate = negate
  return cookiedict
  return None
 if match :
   def bound_data ( self , data , initial ) :
 self . attachments . append ( filename )
                      domain = domain . encode ( 'idna' ) . decode ( 'ascii' )
  try :
 message = _ ( 'Ensure this value is greater than or equal to %(limit_value)s.' )
  return getattr ( _default , translation_function ) ( singular , plural , number )
    def handle ( self , * test_labels , ** options ) :
  else :
 old_field_name = None
              id_ = self . attrs [ 'id' ]
  for uclass , unique_check in all_unique_checks :
 def wrapper ( cls ) :
          return TemplateLiteral ( self . template_parser . compile_filter ( value ) , value )
          super ( Deserializer , self ) . __init__ ( stream_or_string , ** options )
 from django . utils . six . moves import copyreg
                                  self . stderr . write ( "    Failed to install custom SQL for %s.%s model: %s\n" % ( app_name , model . _meta . object_name , e ) )
   except IOError :
  location = kwargs . pop ( 'LOCATION' , '' )
 self . attrs = attrs
              if arg . startswith ( option ) :
  return value
 import sys
   def __iter__ ( self ) :
 import sys
   def next_token ( self ) :
 return value
 DEFAULT_PALETTE = DARK_PALETTE
  opts = instance . _meta
   def tokenize ( self ) :
 if changes :
          if name not in data :
  def to_python ( self , data ) :
 from django . utils . six . moves import zip
          self . path , self . match , self . recursive = path , match , recursive
                      new_attr = old_attr
  except MiddlewareNotUsed :
   def eval ( self , context ) :
  return mark_safe ( value . replace ( '\n' , '<br />' ) )
      widget = URLInput
          return date ( self . year , self . month , self . day )
      pass
   def _iteritems ( self ) :
          return ''
  else :
      format_key = 'DATE_INPUT_FORMATS'
      def __init__ ( self , regex , max_length = None , min_length = None , error_message = None , * args , ** kwargs ) :
                      dirnames . remove ( dirname )
 return self . _open ( name , mode )
              len ( X ( ) )
  num_pages = property ( _get_num_pages )
 from django . utils . timezone import get_default_timezone , is_aware , is_naive
 import os
           self . verbosity = options . get ( 'verbosity' )
import os
  return value
 old_method = base . __dict__ . get ( old_method_name )
                  self . stdout . write ( "  No optimizations possible." )
 for name in loggers :
 from django . utils . safestring import SafeData , EscapeData
   except ValueError :
 data = json . dumps ( data , cls = encoder )
   cwords = os . environ [ 'COMP_WORDS' ] . split ( ) [ 1 : ]
              self . stdout . ending = None
   def tell ( self ) :
  tried . append ( [ pattern ] )
 super ( SplitDateTimeWidget , self ) . __init__ ( widgets , attrs )
 return ( ( evens + odds ) % 10 == 0 )
 self . _errors = ErrorDict ( )
  from django . conf import settings
   try :
    if not self . addr :
      class CycleNode ( Node ) :
    def validate ( self , value ) :
 if missing_fields :
              subject = '%s: %s' % (  record . levelname ,  record . getMessage ( )  )
              result = self . buffer [ : size ]
     def rfc3339_date ( date ) :
    def sql_custom ( app_config , style , connection ) :
 default_validators = [ validators . validate_email ]
     def build_request_repr ( request , path_override = None , GET_override = None ,  POST_override = None , COOKIES_override = None ,  META_override = None ) :
              yield widget
  from . . import Warning , register , Tags
 token = parser . next_token ( )
 self . cdata_tag = None
 if not isinstance ( stream_or_string , ( bytes , six . string_types ) ) :
           if only_new :
    def safe_join ( base , * paths ) :
      class CacheClass ( DatabaseCache ) :
                  t = self . waiting_readers
  else :
          post_sql_fields = [ f for f in opts . local_fields if hasattr ( f , 'post_create_sql' ) ]
          raise AttributeError ( "This %s instance has no `content` attribute. "  "Use `streaming_content` instead." % self . __class__ . __name__ )
 return html
                  nodes . extend ( nodelist . get_nodes_by_type ( nodetype ) )
    class EscapeText ( six . text_type , EscapeData ) :
  data_value = data if data is not None else ''
 inplural = False
  else :
  except AttributeError :
                      response = middleware_method ( request , callback , callback_args , callback_kwargs )
 import operator
 from django . utils . ipv6 import is_valid_ipv6_address
  else :
  return result
                return self . flatten ( ) == other . flatten ( )
          s . close ( )
   if __name__ == '__main__' :
  def __init__ ( self , required = True , widget = None , label = None , initial = None ,  help_text = '' , error_messages = None , show_hidden_initial = False ,  validators = [ ] , localize = False , label_suffix = None ) :
          import flup
  if cache_timeout is None :
   def _create_message ( self , msg ) :
    return wrapper
 if not boundary or not cgi . valid_boundary ( boundary ) :
          key_prefix = settings . CACHE_MIDDLEWARE_KEY_PREFIX
 cmatch = constant_re . match ( parts [ 0 ] )
  else :
              return ""
 se = open ( err_log , 'a+' , buffering )
  return self . _client
  def items ( self ) :
              self . unclosed_block_tag ( parse_until )
          key = self . make_key ( key , version = version )
    class cached_property ( object ) :
 return self . __deepcopy__ ( { } )
  else :
  elif child . nodeType == child . ELEMENT_NODE :
   def check_programs ( * programs ) :
 if idstring is None :
              regex = re . compile ( regex , re . UNICODE )
 stderr . write ( '%s: %s' % ( e . __class__ . __name__ , e ) )
 for node in graph . leaf_nodes ( app_name ) :
 errors . extend ( _check_boolean_field_default_value ( ** kwargs ) )
              if escaped :
   def _save ( self , name , content ) :
   manifest = OrderedDict (  ( app_name , list ( filter ( model_installed , model_list ) ) )  for app_name , model_list in all_models  )
 self . write_items ( handler )
                  self . _post , self . _files = self . parse_file_upload ( self . META , data )
  from django . conf import settings
  except ValueError :
          for filepath in self . get_template_sources ( template_name , template_dirs ) :
 args_safe = map ( conditional_escape , args )
  from django . core . management . base import CommandError
              self . blocks [ name ] . insert ( 0 , block )
  from django . core . management . base import AppCommand
              st = os . stat ( filename )
   def e ( self ) :
 value = localize ( value , use_l10n = context . use_l10n )
                      indexes = connection . introspection . get_indexes ( cursor , table_name )
 return value and value [ 0 ] . upper ( ) + value [ 1 : ]
          self . _validate_unique = True
          return mark_safe ( result )
import warnings
 from django . utils . functional import cached_property
                  raise ValidationError (  self . error_messages [ 'invalid_choice' ] ,  code = 'invalid_choice' ,  params = { 'value' : choice } ,  )
   if str ( '\n' ) in value or str ( '\r' ) in value :
       expression = parser . compile_filter ( var_name +  VARIABLE_ATTRIBUTE_SEPARATOR +  bits [ 3 ] )
                  msg . attach ( body_msg )
 self . __locale = to_locale ( language )
          i = p . find ( b'=' )
 os . write ( fd , current_chunk )
    def compile_function_error ( self , token , e ) :
  def __init__ ( self , * args , ** kwargs ) :
  result = self . __class__ ( )
  self . _upload_handlers = upload_handlers
 _empty_value = [ ]
                if tok . startswith ( "'" ) :
          if not hasattr ( self , '_fqdn' ) :
                          if iso_input not in val :
                  obj = template_localtime ( obj , context . use_tz )
  raise ValidationError ( self . message , code = self . code )
    def ngettext_lazy ( singular , plural , number = None ) :
          if self . _cull_frequency == 0 :
 if not prefix or not hasattr ( self , '_callback_str' ) :
    def configure_formatter ( self , config ) :
 self . buf_size = buf_size
 key = force_bytes ( settings . SECRET_KEY )
    def deactivate ( ) :
      setattr ( Module_six_moves_urllib_request , attr . name , attr )
   def __lt__ ( self , other ) :
              data = self . _archive . read ( name )
              return None
  import cgi
              return output
   def __enter__ ( self ) :
 raise NotImplementedError ( 'subclasses of Storage must provide a created_time() method' )
                              if field in form . cleaned_data :
              if lookup_view in self . _callback_strs :
 self . lookups = None
              return ''
          filter_name = getattr ( func , '_filter_name' , None )
              del self . _headers [ header . lower ( ) ]
  except pickle . PickleError :
   def setlistdefault ( self , key , default_list = None ) :
              exc_type = type ( exc )
 if end not in ( ">" , "/>" ) :
                          content_length = int ( meta_data . get ( 'content-length' ) [ 0 ] )
 timestamp = baseconv . base62 . decode ( timestamp )
  return str ( '<%s %s (%s:%s) %s>' ) % (  self . __class__ . __name__ , urlconf_repr , self . app_name ,  self . namespace , self . regex . pattern )
 self . validate_name ( project_name , "project" )
  sub = ''
      resource_string = None
          return self
              self . active_writers -= 1
   else :
 if self . options . get ( 'indent' ) :
          return None
 import sys
                  directories . append ( entry )
   def add_initial_prefix ( self , field_name ) :
 def emit_post_migrate ( verbosity , interactive , database ) :
          self . registered_checks = [ ]
              if size :
                  return six . text_type ( self ) % rhs
  if ( getattr ( meta , 'fields' , fields ) is None and  getattr ( meta , 'exclude' , exclude ) is None ) :
  from django . utils . deprecation import RemovedInDjango19Warning
                              try :
                  return [ ]
 sql_files = [ ]
  if item [ 'author_link' ] is not None :
       def __init__ ( self , key = None , sep = ':' , salt = None ) :
   def clean ( self , value ) :
   @ property
 id_ = self . attrs . get ( 'id' , None )
  pdict [ name ] = value
  for obj in queryset . iterator ( ) :
 return self . filter ( name , func , ** flags )
  def to_python ( self , value ) :
 base , ext = posixpath . splitext ( the_path )
 filelist = self . _list_cache_files ( )
 from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT
 return self . forms [ : self . initial_form_count ( ) ]
 return content
 return result
          _load_serializers ( )
                  self . connection . login ( self . username , self . password )
              yield d
   def handle_label ( self , label , ** options ) :
                      try :
 output . append ( '\n\n' )
  import functools
              self . file_path = kwargs . pop ( 'file_path' )
                            errors . append ( self . get_date_error_message ( date_check ) )
              flat . update ( d )
 parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
 for fixture_dir in fixture_dirs :
 id_ = final_attrs . get ( 'id' , None )
                          self . configure_logger ( name , loggers [ name ] )
  if s_len > length :
  else :
  else :
 __imul__ = complain
   def get_queryset ( self ) :
      input_type = 'radio'
    EMPTY_VALUES = ( None , '' , [ ] , ( ) , { } )
 __version__ = "1.6.1"
   def save_new ( self , form , commit = True ) :
   def enter_command ( self , command , token ) :
                  args = options . args
          with self . mutex :
  except ( ImportError , AttributeError ) :
                  try :
                     self . connection . close ( )
  return attr
          ret = b'' . join ( self . vals )
   def _set_regex ( self , regex ) :
 return TEMPLATE_FRAGMENT_KEY_TEMPLATE % ( fragment_name , args . hexdigest ( ) )
  try :
                          ch , escaped = next ( pattern_iter )
                  dirs = [ basedir ]
              return repr ( dict ( self ) )
 while field . rel is not None :
      zbuf = BytesIO ( )
              memo = { }
 if headerlist is not None :
   if app_labels :
   from django . apps import apps
  except UnicodeError :
          parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS , help = 'Nominates a database to '  'introspect. Defaults to using the "default" database.' )
 max_width = min ( ( line . endswith ( '\n' ) and width + 1 or width ) , width )
              try :
  model_fields = Model . _meta . get_all_field_names ( )
   def __call__ ( self , f ) :
 msg [ 'Subject' ] = self . subject
       def __init__ ( self , conditions_nodelists ) :
  else :
  finally :
              return new_class
 from django . utils . crypto import get_random_string
          raise parser . error_class ( "Unexpected end of expression in if tag." )
   def listdir ( self , path ) :
 alen = len ( args )
  format_string = bits [ 1 ] [ 1 : - 1 ]
                      self . addr = self . addr [ 1 : - 1 ]
  else :
   elif ch == '(' :
 context_extras [ 'LANGUAGE_BIDI' ] = translation . get_language_bidi ( )
   else :
 import logging
    def file_move_safe ( old_file_name , new_file_name , chunk_size = 1024 * 64 , allow_overwrite = False ) :
   def _list_cache_files ( self ) :
          from django . apps import apps
               final_attrs [ 'value' ] = force_text ( value )
     class TimeFormat ( Formatter ) :
 if status :
    @ register . tag ( 'with' )
          fname = self . _key_to_file ( key , version )
  def __init__ ( self , config ) :
 __hash__ = new_method_proxy ( hash )
          return False
      kwargs [ 'strm' ] = kwargs . pop ( 'stream' )
    def deactivate_all ( ) :
  except ( ValueError , self . queryset . model . DoesNotExist ) :
              try :
              p = i
    add_move ( MovedModule ( "_dummy_thread" , "dummy_thread" ) )
 robotparser = sys . modules [ __name__ + ".moves.urllib_robotparser" ]
   self . state = first
    @ register . tag ( 'include' )
   def add_prefix ( self , prefix ) :
 for entry in os . listdir ( path ) :
 gettext . _translations = { }
   else :
 default_validators = [ validators . URLValidator ( ) ]
              ch2 = None
 from django . db import connections , DEFAULT_DB_ALIAS
 new_method = base . __dict__ . get ( new_method_name )
 connection = connection or get_connection ( username = auth_user ,  password = auth_password ,  fail_silently = fail_silently )
   def has_changed ( self ) :
   DEFAULT_MIN_NUM = 0
 with self . _lock . writer ( ) :
 base56 = BaseConverter ( BASE56_ALPHABET )
              field_params [ 'max_length' ] = int ( row [ 3 ] )
 if callable ( initial_value ) :
   def urlquote_plus ( url , safe = '' ) :
 return mark_safe ( re . sub ( '[-\s]+' , '-' , value ) )
  def add_arguments ( self , parser ) :
 _len = len
  except Exception :
  return True
 acceptable_endblocks = ( 'endblock' , 'endblock %s' % block_name )
                  write ( sep )
          year = int ( m . group ( 'year' ) )
 if self . isolated_context :
 if use_func :
                      resource = resource_string ( app_config . name , pkg_name )
  value , converted = convert_old_style_list ( value )
      is_usable = True
          return self
              contents = conditional_escape ( contents )
 if leading :
 self . _unget_history = [ ]
 for field in self . fields :
 from django . utils . deprecation import RemovedInDjango19Warning
              return SafeBytes ( data )
          self . language = language
          super ( LocaleRegexURLResolver , self ) . __init__ (  None , urlconf_name , default_kwargs , app_name , namespace )
    def b64_encode ( s ) :
     @ property
 return { 'MEDIA_URL' : settings . MEDIA_URL }
 neg_inf = - 1e200 * 1e200
   def render_css ( self ) :
     class _LazyModule ( types . ModuleType ) :
          return cls . __new__ ( cls , * args )
                  return True
          addr = parseaddr ( force_text ( addr ) )
 if 'pk' in d :
 return getattr ( module , self . attr )
           return [ ( '' , [ ] ) ]
 from django . core . mail import get_connection
 @ stringfilter
  except http_cookies . CookieError :
     class DeserializedObject ( object ) :
  kwargs = dict ( ( k , config [ k ] ) for k in config if valid_ident ( k ) )
     def _find_boundary ( self , data , eof = False ) :
 if not email_messages :
 return duplicate
   def __iter__ ( self ) :
    class EmailField ( CharField ) :
                  try :
              locales = locale or all_locales
                      template = get_template_from_string ( template , origin , template_name )
  raise CommandError ( "%r is not a valid %s name. Please %s." %  ( name , app_or_project , message ) )
           return timezone . zone
  else :
 handler . endElement ( "rss" )
 del self . _expire_info [ key ]
          self . value = value
 import warnings
    i = next_space_index ( subject , i )
      termios = None
  else :
 errors = [ ]
              return None
     class RenameMethodsBase ( type ) :
                      for node in self . nodelist_loop :
      status_code = 405
  for statement in index_output :
 self . files = files or { }
 args = args [ : - 1 ]
  else :
 self . can_write = threading . Semaphore ( 0 )
     class Textarea ( Widget ) :
 for message in email_messages :
 self . path_info = path_info
 from __future__ import unicode_literals
 shell = IPShell ( argv = [ ] )
 self . alternatives . append ( ( content , mimetype ) )
                      if self . verbosity > 1 :
  except StopIteration :
      if settings . TEMPLATE_DEBUG and display_name :
    filter_func . _filter_name = name
          return super ( Warning , self ) . __init__ ( WARNING , * args , ** kwargs )
  raise BadSignature ( 'Signature "%s" does not match' % sig )
 prec = abs ( p ) + units + 1
 parser . add_argument ( '--name' , '-n' , dest = 'files' ,  action = 'append' , default = [ ] ,  help = 'The file name(s) to render. '  'Separate multiple extensions with commas, or use '  '-n multiple times.' )
 self . can_write . release ( )
              if field . widget . needs_multipart_form :
  if instance is None :
    @ deconstructible
   def H ( self ) :
                  if isinstance ( value , str ) :
      pass
  if not UserModel . _default_manager . exists ( ) and options . get ( 'interactive' ) :
          attrs = super ( DecimalField , self ) . widget_attrs ( widget )
   class Tags ( object ) :
 self . name = name
 origin = make_origin ( display_name , self . load_template_source , template_name , template_dirs )
 import zipfile
 for loader in self . _loaders :
    return False
     backend_name = connection . settings_dict [ 'ENGINE' ] . split ( '.' ) [ - 1 ]
   if _cookie_encodes_correctly and _cookie_allows_colon_in_names :
                  self . none_value = ( 0 , empty_label )
              for field , errors in self . error_dict . items ( ) :
  else :
 all_locales . extend ( map ( os . path . basename , locale_dirs ) )
  else :
  from django . core . management . commands . check import Command as CheckCommand
              repr_attr = self . _setupfunc
              try :
 settingsfile = upath ( sys . modules [ settings . __module__ ] . __file__ )
    class PageNotAnInteger ( InvalidPage ) :
                          nodelist . append ( node . render ( context ) )
              if self . message_context :
              id_ += '_0'
 return self . to + self . cc + self . bcc
              return func ( * self . __args , ** self . __kw )
   flup_module = 'server.' + options [ 'protocol' ]
  elif f . unique :
          obj = copy . copy ( self )
                  del _error_files [ _error_files . index ( filename ) ]
          self . queryset = queryset
  return RegexURLResolver ( r'^/' , urlconf )
 self . msguniq_options = self . msguniq_options [ : ] + [ '--no-wrap' ]
              return data
 import re
 from django . utils import translation
 if version is None :
   def file_complete ( self , file_size ) :
              raise TemplateSyntaxError ( "Invalid arguments provided to assignment_tag" )
 if self . is_checked ( ) :
 oldvalue = root [ RESULT ]
                  self . _num_pages = 0
  except Exception as e :
              data = self . read ( chunk_size )
      def __init__ ( self , options = None ) :
                    res = func ( * self . __args , ** self . __kw )
   def unlock ( f ) :
 import sys
  try :
 def __init__ ( self , dict_ = None , autoescape = True , current_app = None ,  use_l10n = None , use_tz = None ) :
 self . items = [ ]
          self . file . seek ( 0 )
   def get ( self , key , default = None , version = None ) :
  elif isinstance ( value , datetime . datetime ) :
 from django . utils . dates import MONTHS
 parser . delete_first_token ( )
          middleware = middleware_class ( * m_args , ** m_kwargs )
 self . META [ 'SCRIPT_NAME' ] = script_name
     __delitem__ = complain
              chunk_size = self . DEFAULT_CHUNK_SIZE
  else :
   import django . core . checks . compatibility . django_1_6_0
                          result = middleware . process_exception ( request , e )
  messages . update ( error_messages or { } )
   saved_instances = [ ]
  except KeyError :
                  total_forms = initial_forms
 html_message = reporter . get_traceback_html ( ) if self . include_html else None
      raise ImproperlyConfigured ( "You must define a '%s' cache" % DEFAULT_CACHE_ALIAS )
   return False
 return nodelist
          if site in sites2 :
                  current_chunk = old_file . read ( chunk_size )
    suffixes = ( '.' . join ( ext for ext in combo if ext )  for combo in product ( databases , ser_fmts , cmp_fmts ) )
 pass
          return super ( Info , self ) . __init__ ( INFO , * args , ** kwargs )
    _builtin_context_processors = ( 'django.core.context_processors.csrf' , )
 return strip_tags ( value )
   def render ( self , name , value , attrs = None ) :
   else :
 if value :
 from django . conf import settings
          error = self . data [ i ]
              handler . addQuickElement ( "pubDate" , rfc2822_date ( item [ 'pubdate' ] ) )
  else :
          objects = json . loads ( stream_or_string )
              return
 import time
   def new_file ( self , file_name , * args , ** kwargs ) :
                      try :
              try :
          return list ( iter ( self ) )
 callback , callback_args , callback_kwargs = resolver_match
   def compile_filter_error ( self , token , e ) :
 return strip_spaces_between_tags ( self . nodelist . render ( context ) . strip ( ) )
    class MultipleObjectsReturned ( Exception ) :
 if hasattr ( text , '__html__' ) :
                   count , ch = get_quantifier ( ch , pattern_iter )
  else :
  def handle ( self , ** options ) :
 self . stream . write ( '\n' )
 def __init__ ( self , form , field , name ) :
          if escaped :
   return view
                  form = self . forms [ i ]
              try :
  def add_arguments ( self , parser ) :
  if self . feed [ 'language' ] is not None :
  else :
    autodetector = MigrationAutodetector (  loader . project_state ( ) ,  ProjectState . from_apps ( apps ) ,  InteractiveMigrationQuestioner ( specified_apps = app_labels , dry_run = self . dry_run ) ,  )
   __all__ = ( 'Storage' , 'FileSystemStorage' , 'DefaultStorage' , 'default_storage' )
                               break
 filter_expr = parser . compile_filter ( "var|%s" % ( rest ) )
          if not hasattr ( self , '_body' ) :
          tt = ( dt . year , dt . month , dt . day ,  dt . hour , dt . minute , dt . second ,  dt . weekday ( ) , 0 , 0 )
                        old_umask = os . umask ( 0 )
              value = unicode_value . strip ( )
 extensions = options . get ( 'extensions' )
                  if value == k or text_value == force_text ( k ) :
                          formatters [ name ] = self . configure_formatter (  formatters [ name ] )
          return
           if data is FILE_INPUT_CONTRADICTION :
   def update ( self , * args , ** kwargs ) :
   else :
 from pprint import pformat
from copy import copy
    for key , value in six . iteritems ( kwargs ) :
          self . command_stack . pop ( )
          self . exception = exception
 self . source = source
 for cnt , digit in enumerate ( int_part [ : : - 1 ] ) :
 return IfChangedNode ( nodelist_true , nodelist_false , * values )
 def ifnotequal ( parser , token ) :
                          result . pop ( )
                      raise ValueError (  "'%s' has no field named '%s'." % ( self . __class__ . __name__ , field ) )
                   current_len += 1
                  setattr ( self . object , accessor_name , object_list )
              prefix , rest = self . split_leading_dir ( path )
              neg = 0
   def __str__ ( self ) :
          return s
          return self . has_previous ( ) or self . has_next ( )
    def handle ( self , * args , ** options ) :
      if not hasattr ( self , '_ordering' ) :
        @ register . filter ( is_safe = True )
 output . append ( last_row )
          out = [ str ( x ) for x in [ self . id , self . first , self . second ] if x is not None ]
          nesting = 0
 from django . utils . functional import lazy
 if options :
 self . _catalog = translation . _catalog . copy ( )
 use_grouping = settings . USE_L10N and settings . USE_THOUSAND_SEPARATOR
                  if e . errno != errno . ENOENT :
 return self . data . day
   for field , initial , data in zip ( self . fields , initial , data ) :
              self . stdout . write ( self . style . NOTICE ( "\nYou have unapplied migrations; your app may not work properly until they are applied." ) )
    else :
 new_environ [ "RUN_MAIN" ] = 'true'
          return caches [ DEFAULT_CACHE_ALIAS ] != other
  return _decorator
              error = { field or NON_FIELD_ERRORS : error . error_list }
      default_error_messages = {  'invalid' : _ ( 'Enter a number.' ) ,  }
   def S ( self ) :
  return { 'csrf_token' : _get_val ( ) }
              raise CommandError ( "you must provide %s %s name" % (  "an" if app_or_project == "app" else "a" , app_or_project ) )
 if os . path . exists ( fname ) :
              handler . addQuickElement ( "category" , "" , { "term" : cat } )
  if self . locale_paths :
     return self . _get_scheme ( )
              result = self . configure_custom ( config )
 locales = set ( locales ) - set ( exclude )
              name = content . name
 return mark_safe ( _urlize ( value , nofollow = True , autoescape = autoescape ) )
   if "\\" in encoded and not encoded . startswith ( '"' ) :
    to_delete . add ( model )
 def __init__ ( self , context , base , sysid , pubid ) :
 return self . getvalue ( )
 from django . utils . encoding import force_str , force_text , DEFAULT_LOCALE_ENCODING
    def find_command ( cmd , path = None , pathext = None ) :
               name = os . path . basename ( name )
 missing_args_message = ( "No database fixture specified. Please provide the "  "path of at least one fixture in the command line." )
 cache_key += '.%s' % tz_name . encode ( 'ascii' , 'ignore' ) . decode ( 'ascii' ) . replace ( ' ' , '_' )
                  import readline
          attrs [ 'help_texts' ] = help_texts
   def has_header ( self , header ) :
 warnings = [ e for e in all_issues if checks . WARNING <= e . level < checks . ERROR and not e . is_silenced ( ) ]
          os . remove ( symlink_path )
                  timeout = 300
  else :
              self . _delete ( fname )
 text_type = str
    def modelform_factory ( model , form = ModelForm , fields = None , exclude = None ,  formfield_callback = None , widgets = None , localized_fields = None ,  labels = None , help_texts = None , error_messages = None ) :
          output = [ ]
 if m :
 if settings . DEBUG_PROPAGATE_EXCEPTIONS :
              try :
 if p >= 0 :
  __all__ = ( 'LOCK_EX' , 'LOCK_SH' , 'LOCK_NB' , 'lock' , 'unlock' )
 conditions_nodelists . append ( ( None , nodelist ) )
 raise NotImplementedError ( 'subclasses of BaseCommand must provide a handle() method' )
 self . validate_key ( key )
              if self . _delegate_bytes and six . PY2 :
 inline_re = re . compile ( r"""^\s*trans\s+((?:"[^"]*?")|(?:'[^']*?'))(\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?')))?\s*""" )
 f . write ( zlib . compress ( pickle . dumps ( value ) , - 1 ) )
                          m = m + base [ medium ]
 from django . utils . encoding import force_text
          piece = '' . join ( source [ last : ] )
   def remove_tags ( html , tags ) :
  try :
 if not hasattr ( self , '_request' ) :
 try :
                  i = 365
      if self . has_header ( 'Content-Encoding' ) :
 self . view_name = ':' . join ( self . namespaces + [ view_path ] )
 _meth_self = "__self__"
  models . signals . post_syncdb . send (  sender = app_config . models_module ,  app = app_config . models_module ,  created_models = created_models ,  verbosity = verbosity ,  interactive = interactive ,  db = db )
    def all_valid ( formsets ) :
  return name , ( value , params )
   def load_template ( self , template_name , template_dirs = None ) :
  else :
      import warnings
    def add_to_builtins ( module ) :
   wrapped_main_func = check_errors ( main_func )
                      old = '#: ' + work_file [ 2 : ]
              value = self . make_bytes ( value )
  else :
  streaming = True
  return self . __cast ( ) == other
 if row_data and None not in row_data :
  except ( OSError , NotImplementedError , AttributeError ) :
              if ignore :
      def render ( self , context ) :
          attr = import_string ( dotted_path )
          try :
  middle = '<a href="%s"%s>%s</a>' % ( url , nofollow_attr , trimmed )
 simple_url_re = re . compile ( r'^https?://\[?\w' , re . IGNORECASE )
                      sub_tried = e . args [ 0 ] . get ( 'tried' )
 processors . append ( func )
          for d in reversed ( self . dicts ) :
          super ( ChoiceField , self ) . __init__ ( required = required , widget = widget , label = label ,  initial = initial , help_text = help_text , * args , ** kwargs )
      pass
  new_ip += hextet [ 1 ] . split ( ':' )
          try :
              template_string = force_text ( template_string )
 import re
                          raise TemplateSyntaxError ( "Searching for value. "  "Unexpected end of string in column %d: %s" %  ( i , subject ) )
  from django . core . exceptions import ValidationError
  except KeyError :
  options [ k . lower ( ) ] = v
 with connections [ db ] . cursor ( ) as cursor :
   if self . asvar :
 if bits [ 2 ] != 'by' :
 def namespace_dict ( self ) :
 if ending and not msg . endswith ( ending ) :
 self . file = TemporaryUploadedFile ( self . file_name , self . content_type , 0 , self . charset , self . content_type_extra )
              @ decorator
import collections
          self . _size = size
   LPOVERLAPPED = POINTER ( OVERLAPPED )
 from django . apps import apps
                          raise ValueError ( 'Unable to configure root '  'logger: %s' % e )
  self . __dict__ . update ( obj_dict )
  for cat in self . feed [ 'categories' ] :
 strfunc = Name ( "__str__" , prefix = unifunc . prefix )
 from django . core . files . utils import FileProxyMixin
  def __init__ ( self ) :
  return '' . join ( random . choice ( allowed_chars ) for i in range ( length ) )
          raise TemplateSyntaxError ( "Invalid templatetag argument: '%s'."  " Must be one of: %s" %  ( tag , list ( TemplateTagNode . mapping ) ) )
 from django . utils . module_loading import import_string
  if bits [ 4 ] != 'as' :
              self . DSTOFFSET = timedelta ( seconds = - _time . altzone )
 if name :
          return self . _get_image_dimensions ( ) [ 1 ]
 if options . get ( 'no_color' ) :
 open_tags = [ ]
   if six . PY3 :
          return language . lower ( )
              return value + arg
   base64d = force_bytes ( TimestampSigner ( key , salt = salt ) . unsign ( s , max_age = max_age ) )
 if settings . DEBUG and request . META . get ( 'REMOTE_ADDR' ) in settings . INTERNAL_IPS :
               both_before = [  Tok ( "comment" , r"/\*(.|\n)*?\*/" ) ,  Tok ( "linecomment" , r"//.*?$" ) ,  Tok ( "ws" , r"\s+" ) ,  Tok ( "keyword" , literals ( """                            break case catch class const continue debugger                            default delete do else enum export extends                            finally for function if import in instanceof                            new return super switch this throw try typeof                            var void while with                            """ , suffix = r"\b" ) , next = 'reg' ) ,  Tok ( "reserved" , literals ( "null true false" , suffix = r"\b" ) , next = 'div' ) ,  Tok ( "id" , r"""                   ([a-zA-Z_$   ]|\\u[0-9a-fA-Z]{4})   # first char                   ([a-zA-Z_$0-9]|\\u[0-9a-fA-F]{4})*  # rest chars                   """ , next = 'div' ) ,  Tok ( "hnum" , r"0[xX][0-9a-fA-F]+" , next = 'div' ) ,  Tok ( "onum" , r"0[0-7]+" ) ,  Tok ( "dnum" , r"""                     (   (0|[1-9][0-9]*)     # DecimalIntegerLiteral                         \.                  # dot                         [0-9]*              # DecimalDigits-opt                         ([eE][-+]?[0-9]+)?  # ExponentPart-opt                     |                         \.                  # dot                         [0-9]+              # DecimalDigits                         ([eE][-+]?[0-9]+)?  # ExponentPart-opt                     |                         (0|[1-9][0-9]*)     # DecimalIntegerLiteral                         ([eE][-+]?[0-9]+)?  # ExponentPart-opt                     )                     """ , next = 'div' ) ,  Tok ( "punct" , literals ( """                          >>>= === !== >>> <<= >>= <= >= == != << >> &&                          || += -= *= %= &= |= ^=                          """ ) , next = "reg" ) ,  Tok ( "punct" , literals ( "++ -- ) ]" ) , next = 'div' ) ,  Tok ( "punct" , literals ( "{ } ( [ . ; , < > + - * % & | ^ ! ~ ? : =" ) , next = 'reg' ) ,  Tok ( "string" , r'"([^"\\]|(\\(.|\n)))*?"' , next = 'div' ) ,  Tok ( "string" , r"'([^'\\]|(\\(.|\n)))*?'" , next = 'div' ) ,  ]
  if self . data . hour > 12 :
 wrapper . cache_info = cache_info
 if ( BLOCK_CONTEXT_KEY in render_context and  render_context [ BLOCK_CONTEXT_KEY ] . get_block ( self . name ) is not None ) :
 import calendar
 ch , escaped = next ( pattern_iter )
    return force_bytes ( value , self . _charset )
 if hasattr ( value , 'close' ) :
                  if settings . USE_L10N :
  def handle ( self , ** options ) :
      cache_suffix = '.djcache'
  elif isinstance ( rhs , SafeBytes ) :
 return True
 if self . L ( ) and self . data . month > 2 :
   if indent :
  except ( IndexError , TypeError , ValueError ) :
         global template_source_loaders
    smart_split_re = re . compile ( r"""     ((?:         [^\s'"]*         (?:             (?:"(?:[^"\\]|\\.)*" | '(?:[^'\\]|\\.)*')             [^\s'"]*         )+     ) | \S+) """ , re . VERBOSE )
  from collections import OrderedDict
                      ch , escaped = next ( pattern_iter )
      from logging import _checkLevel
  while rest :
 from django . utils . deprecation import RemovedInDjango19Warning , RemovedInDjango20Warning
  option_list = ( )
   else :
 from itertools import product
  raise Resolver404 ( { 'path' : path } )
                     self . _count = len ( self . object_list )
 errors . extend ( _check_middleware_classes ( ** kwargs ) )
  from django . core . management . base import CommandError
              message = trim_whitespace ( message )
              words = words [ : length ]
 locales = [ locale ]
  cache_key = _generate_cache_header_key ( key_prefix , request )
               if ignore and field_name not in model_fields :
  else :
 fixture_name = os . path . basename ( fixture_name )
      def write_pot_file ( potfile , msgs ) :
  styles = instructions . split ( ',' )
  if error_message is not None :
  return t
  if exclude is not None :
 return ( '<%s token: "%s...">' %  ( token_name , self . contents [ : 20 ] . replace ( '\n' , '' ) ) )
   @ property
 return '%s:%s:%s' % ( key_prefix , version , key )
                  offset = - offset
            state = self . __dict__ . copy ( )
              self . instance = self . fk . rel . to ( )
              self . full_clean ( )
    def decorator_from_middleware ( middleware_class ) :
 import os
   if p == 0 :
                  return d [ key ]
   def clean ( self ) :
   repo_dir = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) )
                  continue
                      if getattr ( current , 'do_not_call_in_templates' , False ) :
                  if filename and not os . path . exists ( filename ) :
                  raise
   class Serializer ( base . Serializer ) :
              try :
          return [ ( '' , [ ] ) ]
  if hasattr ( mw_instance , 'process_exception' ) :
 if doublecolon_start == - 1 :
              return ''
    def get_language_from_path ( path ) :
  elif ch == '(' :
 def _cache ( self ) :
   def _format_value ( self , value ) :
  if filename . endswith ( ( '/' , '\\' ) ) :
          return _import_module ( self . mod )
                  prefixed_name = self . add_prefix ( name )
 warnings . warn ( msg % ( language , _DJANGO_DEPRECATED_LOCALES [ language ] ) ,  RemovedInDjango19Warning , stacklevel = 2 )
   intrans = True
  for issues , group_name in sorted_issues :
   def subwidgets ( self , name , value , attrs = None , choices = ( ) ) :
      renderer = RadioFieldRenderer
   def tag ( self , name = None , compile_function = None ) :
  requires_system_checks = False
  import re
  for fname in self . _list_cache_files ( ) :
 statements = sql_indexes ( app_config , self . style , connection )
  else :
    def _check_test_runner ( app_configs = None , ** kwargs ) :
          self . obj = obj
          return ( ord ( byte ) for byte in buf )
  def get_template_sources ( self , template_name , template_dirs = None ) :
    if hextets [ index ] == '0' :
  else :
 import unicodedata
 return f ( * args , ** kwargs )
  return result
  if not callable ( getattr ( template , 'render' , None ) ) :
              cursor . execute ( "SELECT cache_key FROM %s "  "WHERE cache_key = %%s and expires > %%s" % table ,  [ key , connections [ db ] . ops . value_to_db_datetime ( now ) ] )
  if self . paginator . count == 0 :
    def as_data ( self ) :
  _mtimes = { }
          return list ( self ) != other
   def _make_parser ( self ) :
  except Exception :
 if value == self . empty_value or value in self . empty_values :
  loop_dict [ 'first' ] = ( i == 0 )
  fd = pyinotify . INotifyWrapper . create ( ) . inotify_init ( )
 yield 'class %s(models.Model):' % table2model ( table_name )
              targets = executor . loader . graph . leaf_nodes ( )
 GB = 1 << 30
  return datetime ( * kw )
   return value
    if len ( s ) > 13 :
   else :
 self . app_label = options . get ( 'app_label' )
          return { }
 raise NotImplementedError ( 'subclasses of Widget must provide a render() method' )
 return new_value
 from io import BytesIO
  if value and hasattr ( value , "url" ) :
          if not f . editable or isinstance ( f , models . AutoField ) or f . name not in cleaned_data :
  mail . outbox . extend ( messages )
  else :
 if lang is None :
                  try :
  elif i < list_length - 1 :
    if response is None :
        @ register . filter ( is_safe = False )
  handler . addQuickElement ( "guid" , item [ 'unique_id' ] , guid_attrs )
 for key in c . keys ( ) :
          if '.' in word or '@' in word or ':' in word :
          value = ugettext ( "%s MB" ) % filesize_number_format ( bytes / MB )
 import operator
    def npgettext ( context , singular , plural , number ) :
   if consume_next :
          self . filter_expr , self . nodelist = filter_expr , nodelist
           fd = os . open ( new_file_name , ( os . O_WRONLY | os . O_CREAT | getattr ( os , 'O_BINARY' , 0 ) |  ( os . O_EXCL if not allow_overwrite else 0 ) ) )
   except NotImplementedError :
   def is_iterable ( x ) :
  if not is_valid_ipv6_address ( ip_str ) :
 self . stdout . flush ( )
  else :
              return _ ( 'noon' )
    for p in path :
 args = ''
  except ( archive . ArchiveException , IOError ) as e :
    def _iterlists ( self ) :
     def __str__ ( self ) :
  from io import BytesIO
   self . run_shell ( shell = options [ 'interface' ] )
          attrs [ 'fields' ] = fields
 from email import ( charset as Charset , encoders as Encoders ,  message_from_string , generator )
  from django . apps import apps
                      rel_model = field . rel . to
 if language_code not in self . _app_dict :
                          if name not in logging . _handlers :
 import datetime
 def body ( self ) :
 self . widget . choices = self . choices
                      if self . asvar is None :
  self . attach ( filename , content , mimetype )
                               val , encoded = super ( SimpleCookie , self ) . value_encode ( val )
  DEFAULT_CACHE_ALIAS = 'default'
  now = timezone . now ( )
 databases = [ self . using , None ]
   def __repr__ ( self ) :
              self . _cull_frequency = 3
                              app_list_value . append ( model )
   regex = property ( _get_regex , _set_regex )
     if best_doublecolon_len > 1 :
              pass
   final_output . extend ( connection . creation . sql_for_pending_references ( model , style , pending_references ) )
  def start_serialization ( self ) :
  else :
                              os . close ( fd )
 raise NotImplementedError ( 'subclasses of LazyObject must provide a _setup() method' )
 space = " "
   if six . PY3 :
  def add_arguments ( self , parser ) :
 def random ( value ) :
      def as_string ( self , unixfrom = False ) :
 from django . core . serializers import base
     html = { }
   generic_lang_code = lang_code . split ( '-' ) [ 0 ]
  from django . core . management . base import BaseCommand , CommandError
 result = logging . Formatter ( fmt , dfmt )
          if not formset . is_valid ( ) :
   def __get__ ( self , obj , tp ) :
  if not include_is_allowed ( filepath ) :
 from django . forms . fields import Field , ChoiceField
  from django . core . management . base import BaseCommand
 import time
  elif char in 'bEFMmNn' :
      def __init__ ( self , cyclevars , variable_name = None , silent = False ) :
                      state = tok . next
              data [ "pk" ] = smart_text ( obj . _get_pk_val ( ) , strings_only = True )
 parser . add_argument ( '--backwards' , action = 'store_true' , dest = 'backwards' ,  default = False , help = 'Creates SQL to unapply the migration, rather than to apply it' )
 for f in opts . local_fields :
 response = self . handle_uncaught_exception ( request , resolver , sys . exc_info ( ) )
          parent = self . parent_name . resolve ( context )
   def handle_raw_input ( self , input_data , META , content_length , boundary , encoding = None ) :
  else :
     def Deserializer ( stream_or_string , ** options ) :
 return self . __copy__ ( )
  elif not isinstance ( content , Message ) :
   return s
  def add_arguments ( self , parser ) :
import sys
  except OSError as e :
 self . variable_name = variable_name
      fs_encoding = sys . getfilesystemencoding ( ) or sys . getdefaultencoding ( )
          self . stream = kwargs . pop ( 'stream' , sys . stdout )
    def handle_fk_field ( self , obj , field ) :
              return
   url = property ( lambda self : self [ 'Location' ] )
                form . data [ form . add_prefix ( self . _pk_field . name ) ] = None
              ip_address = literal_match . group ( 1 )
    for app_config in apps . get_app_configs ( ) :
 continue
  try :
              return None
            class Trans ( object ) :
 flush = property ( lambda self : self . file . flush )
 import codecs
 starttag_re = re . compile ( r'<%s(/?>|(\s+[^>]*>))' % tags_re , re . U )
 for part in parts :
   class MergeDict ( object ) :
 from django . core . urlresolvers import set_script_prefix
    else :
    @ register . filter ( is_safe = True )
              self . first = parser . expression ( bp )
  existing . remove ( name )
 bits = token . split_contents ( )
    if isinstance ( empty_label , ( list , tuple ) ) :
    with context_instance . push ( dictionary ) :
   if not inhibit_post_migrate :
   __contains__ = has_key
 iterbytes = iter
 if len ( bits ) == 2 :
 def dictsort ( value , arg ) :
  from __future__ import unicode_literals
 response = self . handle_uncaught_exception ( request , resolver , sys . exc_info ( ) )
   def __repr__ ( self ) :
          Context . __init__ ( self , dict_ , current_app = current_app ,  use_l10n = use_l10n , use_tz = use_tz )
    def no_style ( ) :
 return self . as_widget ( TextInput ( ) , attrs , ** kwargs )
                  i = 366
          nodelist_empty = parser . parse ( ( 'endfor' , ) )
 self . lasttag = tag = match . group ( 1 ) . lower ( )
          nodelist_false = parser . parse ( ( end_tag , ) )
  else :
              ser_fmt = None
 from django . core . management . color import color_style
 if self . data . minute == 0 :
   delta = ( d - now ) if reversed else ( now - d )
              for x , y in zip ( val1 , val2 ) :
   test_runner = TestRunner ( ** options )
   def source_error ( self , source , msg ) :
   def unescape_entities ( text ) :
          raise
                      if sub_match :
   _js_escapes . update ( ( ord ( '%c' % z ) , '\\u%04X' % z ) for z in range ( 32 ) )
      if args is None :
          self . _createdir ( )
 from django . utils . translation import ugettext_lazy as _
   def O ( self ) :
 def __init__ ( self , subject ) :
 self . models . add ( obj . object . __class__ )
              error_msg = "Your TEMPLATE_DIRS setting is empty. Change it to point to at least one template directory."
 self . second = parser . expression ( bp )
 import sys
   try :
 app_dirs = [ ]
 self . _namespace_dict [ language_code ] = namespaces
 if simple_url_re . match ( middle ) :
          return "<DjangoTranslation lang:%s>" % self . __language
      def _get_validation_exclusions ( self ) :
                  imatch = inline_re . match ( t . contents )
              return
  from django . utils . datastructures import MultiValueDict
 return value . lower ( )
 compile_func = partial ( generic_tag_compiler ,  params = params , varargs = varargs , varkw = varkw ,  defaults = defaults , name = function_name ,  takes_context = takes_context , node_class = InclusionNode )
              yield 'month'
  elif hasattr ( query , 'items' ) :
    if 'django.middleware.clickjacking.XFrameOptionsMiddleware' not in set ( settings . MIDDLEWARE_CLASSES ) :
  return r
 criticals = [ e for e in all_issues if checks . CRITICAL <= e . level ]
   def render ( self , context ) :
   else :
          return strftime ( self , fmt )
          raise InvalidTemplateLibrary ( "Template library %s does not have "  "a variable named 'register'" %  taglib_module )
  except KeyError :
          bits = token . split_contents ( ) [ 1 : ]
 super ( MemcachedCache , self ) . __init__ ( server , params ,  library = memcache ,  value_not_found_exception = ValueError )
  yield '    %s' % field_desc
  elif callable ( func ) :
   if answer != "y" :
                      migration = executor . loader . get_migration_by_prefix ( app_label , migration_name )
  else :
  return upload
              self . validators . remove ( self . _regex_validator )
  if bases == ( BaseModelForm , ) :
 self . file_permissions_mode = (  file_permissions_mode if file_permissions_mode is not None  else settings . FILE_UPLOAD_PERMISSIONS  )
   if sys . version_info >= ( 2 , 7 , 2 ) :
 from django . conf import settings
      def render ( self , context ) :
      class ComboField ( Field ) :
          return ''
 if os . path . exists ( old_app_dir ) :
  if self . _wrapped is empty :
  if row is None :
 context = self . resolve_context ( self . context_data )
              widget . is_localized = True
     @ classmethod
                      raise EnvironmentError (  "Cache directory '%s' does not exist "  "and could not be created'" % self . _dir )
              self . _populate ( )
 return force_text ( unquote_plus ( force_str ( quoted_url ) ) )
 hidden_widget = SplitHiddenDateTimeWidget
  def __init__ ( self , attrs = None ) :
  except ImportError :
 if kw [ 'microsecond' ] :
      def curry ( _curried_func , * args , ** kwargs ) :
 response = callback ( request , ** param_dict )
 if is_compressed :
          header = self . _convert_to_charset ( header , 'ascii' )
                  p . feed ( data )
    def _make_key ( args , kwds , typed ,  kwd_mark = ( object ( ) , ) ,  fasttypes = { int , str , frozenset , type ( None ) } ,  sorted = sorted , tuple = tuple , type = type , len = len ) :
                      answer = six . moves . input ( "Do you wish to proceed? [yN] " )
                      initial = self . initial . get ( name , field . initial )
  yield representative , True
          super ( DebugLexer , self ) . __init__ ( template_string , origin )
  else :
              label_suffix = ( self . field . label_suffix if self . field . label_suffix is not None  else self . form . label_suffix )
 if hasattr ( formfield , 'queryset' ) :
                if settings . DEBUG :
  except ValidationError :
   tag = re_tag . match ( m . group ( 0 ) )
              sorted_items = sorted ( kwds . items ( ) )
 from itertools import dropwhile
                              value = field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
   def __repr__ ( self ) :
              frame = sys . _getframe ( 1 )
 parser . add_argument ( '--version' , action = 'version' , version = self . get_version ( ) )
      input_type = 'text'
          if self . _isdst ( dt ) :
          if isinstance ( regex , six . string_types ) :
                          self . handle_m2m_field ( obj , field )
              raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
   def reload ( self ) :
   def open ( self ) :
  elif ch == "^" :
                   chunk = self . _read_limited ( size - len ( self . buffer ) )
  if options [ "host" ] and options [ "port" ] and not options [ "socket" ] :
  output , errors = p . communicate ( )
              cmp_fmt = None
  return palette
 output = [ ]
 default_error_messages = {  'invalid' : _ ( 'Enter a list of values.' ) ,  'incomplete' : _ ( 'Enter a complete value.' ) ,  }
              media_attrs = media . __dict__
 import os
              output . append ( html [ field ] )
 language_code = get_language ( )
              self . reason_phrase = REASON_PHRASES . get ( self . status_code ,  'UNKNOWN STATUS CODE' )
              domains = ( 'django' , )
  return
 response_headers = [ ( str ( k ) , str ( v ) ) for k , v in response . items ( ) ]
   def __get__ ( self , instance , type = None ) :
  else :
 sys . stderr . write ( "  installed flup, then make sure you have it in your PYTHONPATH.\n" )
                  cls . __dispatch [ resultclass ] = { }
 def streaming_content ( self ) :
 __all__ = [ "runfastcgi" ]
    from django . core . exceptions import ValidationError
              return loader . select_template ( template )
              if len ( value ) != 1 :
  nm , addr = addr
          return None
          msg = "[%s] %s\n" % ( self . log_date_time_string ( ) , format % args )
          if value in self . empty_values :
    def endChannelElement ( self , handler ) :
 from django . utils . deprecation import RemovedInDjango19Warning
                  if e . errno == errno . EEXIST :
              raise TemplateSyntaxError ( "'%s' tag with name '%s' appears more than once" % ( bits [ 0 ] , block_name ) )
 if t is not None :
  __all__ = ( 'MultiPartParser' , 'MultiPartParserError' , 'InputStreamExhausted' )
  else :
   def css_classes ( self , extra_classes = None ) :
   def autocomplete ( self ) :
              new_name = 'number_%s' % new_name
  translation = self . _new_gnu_trans ( localedir , use_null_fallback )
 fk = _get_foreign_key ( parent_model , model , fk_name = fk_name )
 if not isinstance ( fk , ForeignKey ) or ( fk . rel . to != parent_model and  fk . rel . to not in parent_model . _meta . get_parent_list ( ) ) :
  models . signals . pre_migrate . send (  sender = app_config ,  app_config = app_config ,  verbosity = verbosity ,  interactive = interactive ,  using = db )
 return j
                        if os . path . isdir ( entry ) :
   transfer_encoding = meta_data . get ( 'content-transfer-encoding' )
           if ip_str . count ( '.' ) != 3 :
                          self . stdout . write ( 'ignoring file %s in %s\n' % ( filename , dirpath ) )
   def listdir ( self , path ) :
    for app_name in app_names :
                      if t in self . __dispatch :
      _meth_func = "__func__"
 response [ 'Vary' ] = ', ' . join ( vary_headers + additional_headers )
  else :
          return bytes ( s )
  try :
from __future__ import unicode_literals
   class _OFFSET ( Structure ) :
                   selected_choices . remove ( option_value )
 def __init__ ( self , key_to_list_mapping = ( ) ) :
 _add_doc ( u , """Text literal""" )
              raise InvalidCacheBackendError (  "Could not find config for '%s' in settings.CACHES" % alias  )
 if not self . is_bound :
                      self . file . close ( )
          if app_config . models_module is None :
 from django . core . cache . backends . db import BaseDatabaseCache
          self . s = s
   response = self . apply_response_fixes ( request , response )
 from django . utils . safestring import mark_safe , SafeData
  if use_reloader :
                      migration . merged_operations . extend (  loader . get_migration ( node_app , node_name ) . operations  )
              for fixture_label in fixture_labels :
          now = datetime . datetime . now ( utc if is_aware ( d ) else None )
   from django . template . base import ( Library , add_to_builtins , builtins ,  get_library , get_templatetags_modules , get_text_list , import_library ,  libraries )
              parentmod , submod = get_mod_func ( mod_name )
   for ( field_name , field_value ) in six . iteritems ( d [ "fields" ] ) :
               warnings . warn ( "No fixture named '%s' found." % fixture_name )
   def __delitem__ ( self , key ) :
              unique_id = item [ 'unique_id' ]
 return date ( d . year , d . month , d . day )
          return all ( getattr ( self , attr ) == getattr ( other , attr )  for attr in [ 'level' , 'msg' , 'hint' , 'obj' , 'id' ] )
 end = s . find ( b';' )
  s_len += 1
 if len ( bits ) < 1 :
          if not hasattr ( self , '_post' ) :
          name = getattr ( func , "_decorated_function" , func ) . __name__
 WSGIServer = module . WSGIServer
   else :
  if not getattr ( self , 'nodelist' , False ) :
              return self . _truncate_html ( length , truncate , text , truncate_len , False )
  else :
              self . dicts . append ( value )
 known_models . append ( table2model ( table_name ) )
              contents = format_html ( '{0}{1}' , contents , label_suffix )
   can_import_settings = False
                      self . create_table ( db , cache . _table )
   def end_object ( self , obj ) :
                          return result
 ignore = options . pop ( 'ignorenonexistent' , False )
   def handle_app_config ( self , app_config , ** options ) :
     class OutputWrapper ( object ) :
              words [ i ] = mark_safe ( word )
          message = '' . join ( tokens )
 handlers = self . _upload_handlers
              import warnings
      pass
 from django . core . exceptions import ImproperlyConfigured
 if f is None :
    return msg_count
                  result . append ( self . create_token ( self . template_string [ upto : start ] , ( upto , start ) , False ) )
              raise TemplateSyntaxError ( "Named cycle '%s' does not exist" % name )
       def __init__ ( self , * args , ** kwargs ) :
          fs_encoding = sys . getfilesystemencoding ( ) or sys . getdefaultencoding ( )
 if not ( bits . scheme and bits . netloc ) :
              if new_mod is None :
              if self . verbosity > 0 :
 missing_args_message = "Enter at least one application label."
 for type_ in reversed ( resultclass . mro ( ) ) :
          return fastcgi_help ( "Invalid combination of host, port, socket." )
          return { }
 compile_func . __doc__ = func . __doc__
           logging_config_func = import_string ( logging_config )
 def do_include ( parser , token ) :
   import random
  else :
 if os . path . sep in fixture_name :
          self . value = value
 from django . core . management . sql import sql_delete
 if self . instance . pk is None :
 try :
 from django . core . management . color import no_style
  key , value = bits [ 2 ] , bits [ 0 ]
    global _cached_modules , _cached_filenames
 return ''
                  def __init__ ( self , takes_context , args , kwargs , target_var ) :
 valid = True
   def conditional_escape ( text ) :
 decimals = abs ( exponent )
          _fields_ = [  ( 'Offset' , DWORD ) ,  ( 'OffsetHigh' , DWORD ) ]
  encoding = property ( lambda self : self . file . encoding )
  self . _raw_ipv6 = False
          self . _archive . list ( * args , ** kwargs )
                  return kwargs
  elif options [ "daemonize" ] . lower ( ) in ( 'false' , 'no' , 'f' ) :
                   def render ( self , context ) :
 if tag not in TemplateTagNode . mapping :
              return list_ , False
  final_attrs = self . build_attrs ( attrs , name = name )
              handler . addQuickElement ( "rights" , self . feed [ 'feed_copyright' ] )
 from django . core . management . color import color_style , no_style
   def __getitem__ ( self , key ) :
   except OSError as e :
   if item [ 'pubdate' ] is not None :
          return getattr ( t , translation_function ) ( singular , plural , number )
          m = regex . match ( date )
  javascript_quote = allow_lazy ( javascript_quote , six . text_type )
 collect . extend ( _builtin_context_processors )
 self . var_name = var_name
  Module_six_moves_urllib_robotparser . _moved_attributes = _urllib_robotparser_moved_attributes
                              result . append ( Group ( ( ( "%%(%s)s" % param ) , param ) ) )
    def generic_tag_compiler ( parser , token , params , varargs , varkw , defaults ,  name , takes_context , node_class ) :
   def clean ( self , data , initial = None ) :
 from django . template . smartif import IfParser , Literal
  except IndexError :
    @ register . filter ( is_safe = True )
 if mimetype is None :
from __future__ import unicode_literals
  attrs . append ( ( attrname . lower ( ) , attrvalue ) )
  return self . save_existing_objects ( commit ) + self . save_new_objects ( commit )
              self . close ( )
              for error in self . errors . as_data ( ) [ field ] :
   def incr ( self , key , delta = 1 , version = None ) :
                          index_sql = connection . creation . sql_indexes_for_model ( model , no_style ( ) )
    @ register . filter ( is_safe = True )
  _iterkeys = "keys"
   return False
  if options [ 'umask' ] :
              raise TemplateSyntaxError (  "'%s' is decorated with takes_context=True so it must "  "have a first argument of 'context'" % name )
          time_str = time_str . decode ( 'utf-8' )
   else :
       def close ( self ) :
 matches = filter_re . finditer ( token )
              _html_parser . HTMLParser . __init__ ( self )
      def become_daemon ( our_home_dir = '.' , out_log = '/dev/null' ,  err_log = '/dev/null' , umask = 0o022 ) :
 self . value = force_text ( self . value )
 self . error_messages = getattr ( options , 'error_messages' , None )
  func = TemplateLoader
    @ register . filter ( is_safe = False )
                  self . event_stream . expandNode ( node )
  if pks :
  else :
  if not isinstance ( cookie , http_cookies . BaseCookie ) :
 if language_code not in self . _namespace_dict :
   if isinstance ( nodelist , NodeList ) and not isinstance ( node , TextNode ) :
  if not value or '@' not in value :
  url = urlunsplit ( ( scheme , netloc , path , query , fragment ) )
              if os . path . isdir ( os . path . join ( path , entry ) ) :
   def __deepcopy__ ( self , memo ) :
 self . validate ( display_num_errors = True )
  except LookupError :
              getattr ( combined , 'add_' + name ) ( getattr ( self , '_' + name , None ) )
  style_func = [ f for f in ( style_func , self . style_func , lambda x : x )  if f is not None ] [ 0 ]
          _serializers [ format ] = module
  output = [ ]
     def _handle_m2m_field_node ( self , node , field ) :
  _CacheInfo = namedtuple ( "CacheInfo" , [ "hits" , "misses" , "maxsize" , "currsize" ] )
    context [ self . var_name ] = [  { 'grouper' : key , 'list' : list ( val ) }  for key , val in  groupby ( obj_list , lambda obj : self . resolve_expression ( obj , context ) )  ]
 if serializers is None and not _serializers :
                      if self . selected_fields is None or field . attname in self . selected_fields :
 from django . core . cache . backends . base import (  InvalidCacheBackendError , CacheKeyWarning , BaseCache )
   @ deconstructible
 for f in file_list :
  else :
   def back ( self ) :
   def _samefile ( src , dst ) :
              return r'\"'
  lineno_comment_map [ comment_lineno_cache ] = [ ]
    def push ( self , * args , ** kwargs ) :
              self . label = pretty_name ( name )
                  if not isinstance ( node , ExtendsNode ) :
  else :
  if data :
 related_att = getattr ( obj , field . get_attname ( ) )
  elif len ( app_labels ) > 1 :
          raise ValueError ( "Not a string literal: %r" % s )
                      break
  if len ( args ) > 4 :
          return isinstance ( other , EmailValidator ) and ( self . domain_whitelist == other . domain_whitelist ) and ( self . message == other . message ) and ( self . code == other . code )
 day = int ( m . group ( 'day' ) )
 from django . utils . functional import allow_lazy , SimpleLazyObject
 from django . utils . encoding import smart_text , force_text
              if self . stream is not None :
   def __getitem__ ( self , key ) :
              try :
    _urllib_request_moved_attributes = [  MovedAttribute ( "urlopen" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "install_opener" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "build_opener" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "pathname2url" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "url2pathname" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "getproxies" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "Request" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "OpenerDirector" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPDefaultErrorHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPRedirectHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPCookieProcessor" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "ProxyHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "BaseHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPPasswordMgr" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPPasswordMgrWithDefaultRealm" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "AbstractBasicAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPBasicAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "ProxyBasicAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "AbstractDigestAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPDigestAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "ProxyDigestAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPSHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "FileHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "FTPHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "CacheFTPHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "UnknownHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPErrorProcessor" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "urlretrieve" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "urlcleanup" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "URLopener" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "FancyURLopener" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "proxy_bypass" , "urllib" , "urllib.request" ) ,  ]
  else :
  if plen < ( alen - dlen ) or plen > alen :
 MONTHS_AP = {  1 : pgettext_lazy ( 'abbrev. month' , 'Jan.' ) ,  2 : pgettext_lazy ( 'abbrev. month' , 'Feb.' ) ,  3 : pgettext_lazy ( 'abbrev. month' , 'March' ) ,  4 : pgettext_lazy ( 'abbrev. month' , 'April' ) ,  5 : pgettext_lazy ( 'abbrev. month' , 'May' ) ,  6 : pgettext_lazy ( 'abbrev. month' , 'June' ) ,  7 : pgettext_lazy ( 'abbrev. month' , 'July' ) ,  8 : pgettext_lazy ( 'abbrev. month' , 'Aug.' ) ,  9 : pgettext_lazy ( 'abbrev. month' , 'Sept.' ) ,  10 : pgettext_lazy ( 'abbrev. month' , 'Oct.' ) ,  11 : pgettext_lazy ( 'abbrev. month' , 'Nov.' ) ,  12 : pgettext_lazy ( 'abbrev. month' , 'Dec.' )  }
 from itertools import groupby , cycle as itertools_cycle
 os . umask ( umask )
              result = self . find_template_cache [ key ]
                  s = six . text_type ( bytes ( s ) , encoding , errors )
     def configure_logger ( self , name , config , incremental = False ) :
                  file = BytesIO ( data [ 'content' ] )
                  if ( isinstance ( message , ValidationError ) and  message . code in error_messages ) :
   def total_error_count ( self ) :
    if self . load_initial_data :
   def save_existing ( self , form , instance , commit = True ) :
  attachment . add_header ( 'Content-Disposition' , 'attachment' ,  filename = filename )
      return getattr ( self , _assertRegex ) ( * args , ** kwargs )
 self . value = value
 while i < len ( subject ) and subject [ i ] in ( ' ' , '\t' ) :
 if len ( bits ) < 4 :
   attachment = self . _create_mime_attachment ( content , mimetype )
 if self . _count is None :
 self . default_validators = validators . ip_address_validators ( protocol , unpack_ipv4 ) [ 0 ]
 self . META [ 'PATH_INFO' ] = path_info
              raise CommandError ( "Can't find %s. Make sure you have GNU "  "gettext tools 0.15 or newer installed." % program )
              if self . active_writers == 0 and self . waiting_writers == 0 and self . active_readers == 0 :
  if max_value is not None :
                      msg = "Execution of %s failed" % self . program
          if self . connection_reset :
      def load_handler ( path , * args , ** kwargs ) :
 re_camel_case = re . compile ( r'(((?<=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))' )
   def __eq__ ( self , other ) :
  warnings . warn (  "The django.forms.util module has been renamed. "  "Use django.forms.utils instead." , RemovedInDjango19Warning , stacklevel = 2 )
                      plural_form_line = force_str ( m . group ( 'value' ) )
 klass . deconstruct = deconstruct
  return RequestContext ( self . _request , context , current_app = self . _current_app )
    def get_renderer ( self , name , value , attrs = None , choices = ( ) ) :
   MEMCACHE_MAX_KEY_LENGTH = 250
 code = 'invalid'
    def clear ( self ) :
   else :
 def ljust ( value , arg ) :
           try :
 d = { }
 from importlib import import_module
                  return False
  except ValueError :
  try :
       def timestamp ( self ) :
               return sys . modules [ name ] is not None
      setattr ( Module_six_moves_urllib_parse , attr . name , attr )
  return attachment
 get_function_defaults = operator . attrgetter ( _func_defaults )
  def __init__ ( self , request , template , context = None , content_type = None ,  status = None , current_app = None ) :
           buffer_ = None
              break
              return
 def ordered_forms ( self ) :
   if column_name in indexes :
              obj = self . _new_instance ( self . children , self . connector ,  self . negated )
   def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
  else :
              raise ImproperlyConfigured ( 'Path for saving email messages exists, but is not a directory: %s' % self . file_path )
  if value is not result :
 handler . endElement ( "feed" )
                  translation . activate ( saved_locale )
  if all_issues :
    class MultiWidget ( Widget ) :
               self . _func_path = '.' . join ( [ func . __module__ , func . __name__ ] )
  return callback [ : dot ] , callback [ dot + 1 : ]
  from django . conf import settings
   elif action == "unapply_start" :
    if six . PY3 :
 patch_response_headers ( response , cache_timeout = - 1 )
   def _open ( self , name , mode = 'rb' ) :
    return '\n' . join ( usage )
  strip_tags = allow_lazy ( strip_tags )
  stats [ MISSES ] += 1
 while current_chunk != b'' :
 if ext :
                  warnings . warn ( 'Cache key contains characters that will cause '  'errors if used with memcached: %r' % key ,  CacheKeyWarning )
 common_prefix = None
 from django . core . serializers . python import Deserializer as PythonDeserializer
   def __deepcopy__ ( self , memo ) :
 from django . utils . formats import localize
          if hasattr ( self , 'error_dict' ) :
  else :
          return ugettext ( "Please correct the duplicate data for %(field_name)s "  "which must be unique for the %(lookup)s in %(date_field)s." ) % {  'field_name' : date_check [ 2 ] ,  'date_field' : date_check [ 3 ] ,  'lookup' : six . text_type ( date_check [ 1 ] ) ,  }
                  if old_field_name :
          return repr ( self . value )
  def add_arguments ( self , parser ) :
  return True
 self . queryset = field . queryset
              raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
              self . _cull_frequency = int ( cull_frequency )
      status_code = 301
 for i , v in enumerate ( value ) :
  return forms_valid and not self . non_form_errors ( )
   return True
                  break
                  sys . exit ( exit_code )
  return format_html ( '<label{0}>{1} {2}</label>' , label_for , self . tag ( ) , self . choice_label )
          return datetime . datetime . strptime ( force_str ( value ) , format )
   class UnreadablePostError ( IOError ) :
 get_function_code = operator . attrgetter ( _func_code )
                  return 1 << 31
   def upload_complete ( self ) :
          return datetime . fromtimestamp ( os . path . getctime ( self . path ( name ) ) )
  except ValidationError as e :
 return _i18n_cache_key_suffix ( request , cache_key )
  else :
              for match in regexes [ state ] . finditer ( text , start ) :
              from django . conf import settings
                  return source , display_name
   if func is None :
 self . html_initial_id = form . add_initial_prefix ( self . auto_id )
 pass
          return self . token
   field_dict = OrderedDict ( field_list )
 subject = self . subject
   def __cast ( self ) :
  from collections import OrderedDict
                  values = reversed ( values )
  except StopFutureHandlers :
 if safe :
  for name in dir ( models . signals ) :
 from threading import local
     @ python_2_unicode_compatible
     elif not hasattr ( message , 'message' if six . PY3 else 'code' ) :
 with lock :
 raise NotImplementedError ( 'subclasses of Storage must provide a url() method' )
              return int ( calendar . timegm ( self . data . utctimetuple ( ) ) )
                  r = r [ : 12 ]
    kwargs = { }
 yield item
   except NotImplementedError :
                      incomment = True
 from django . utils . six . moves . urllib . parse import urlparse
                  return True
                  self . appendlist ( key , value )
 translation . _info = { }
          s = s [ : site ] + syear + s [ site + 4 : ]
                  os . _exit ( 0 )
 hour , minute = divmod ( timezone , 60 )
          return self . _name
 context [ 'block' ] = block
   def render ( self , name , value , attrs = None , choices = ( ) ) :
 import errno
  if number_equal > 40 :
 new_args . append ( args [ : ] + i_args )
 return chunk [ : - rollback ]
 return result
  self . content = content
 from django . utils . encoding import smart_text
  self . encoding = encoding
  from django . utils import six
     else :
 statements = sql_custom ( app_config , self . style , connection )
  options = params . get ( 'OPTIONS' , { } )
 for obj in PythonDeserializer ( objects , ** options ) :
 def __init__ ( self , server , params ) :
              hextets [ index ] = '0'
      rendering_attrs = [ 'template_name' , 'context_data' , '_post_render_callbacks' ]
              self . instance . full_clean ( exclude = exclude , validate_unique = False )
 self . directory_permissions_mode = (  directory_permissions_mode if directory_permissions_mode is not None  else settings . FILE_UPLOAD_DIRECTORY_PERMISSIONS  )
 compile_func = partial ( generic_tag_compiler ,  params = params , varargs = varargs , varkw = varkw ,  defaults = defaults , name = function_name ,  takes_context = takes_context , node_class = SimpleNode )
 return '\n' . join ( statements )
            context [ self . var_name ] = obj
 self . salt = force_str ( salt or  '%s.%s' % ( self . __class__ . __module__ , self . __class__ . __name__ ) )
     def walk_to_end ( ch , input_iter ) :
 from django . utils . deprecation import RemovedInNextVersionWarning
          return self . _create_attachments ( msg )
 return func
      status_code = 400
 from django . template . loader import BaseLoader , get_template_from_string , find_template_loader , make_origin
                  match = True
           msgs = '\n' . join ( dropwhile ( len , msgs . split ( '\n' ) ) )
          return iter ( self . dict . keys ( ) )
                  self . bad_cookies = set ( )
          __bytes__ = new_method_proxy ( bytes )
 tag_exists = registry . tag_exists
 kwargs = { }
          for k , v in self . _iteritems ( ) :
          return self . streaming_content
 try :
   settings . _setup ( )
 return msg_count
    @ register . filter ( is_safe = False )
 model = None
   reverse_lazy = lazy ( reverse , str )
                      dirnames . remove ( dirname )
              return self . nodelist_false . render ( context )
 from django . core . files . utils import FileProxyMixin
 context_extras = { }
 sys . stderr . write ( "Unknown command: %r\nType '%s help' for usage.\n" %  ( subcommand , self . prog_name ) )
              raise value . with_traceback ( tb )
   NOCOLOR_PALETTE = 'nocolor'
   if not strict :
 TOKEN_COMMENT = 3
                      s = six . text_type ( s )
   result = avoid_wrapping ( name % count )
  except IOError as e :
 import shutil
 from django . core . management . sql import sql_create
          lang = get_language ( )
                      disposition = meta_data [ 'content-disposition' ] [ 1 ]
  else :
 found = True
 git_log = subprocess . Popen ( 'git log --pretty=format:%ct --quiet -1 HEAD' ,  stdout = subprocess . PIPE , stderr = subprocess . PIPE ,  shell = True , cwd = repo_dir , universal_newlines = True )
  if exclude and f . name in exclude :
 def fdel ( instance , name = fdel . __name__ ) :
 tzinfo . __init__ ( self )
  if bcc :
 if message_context [ 0 ] == '"' :
              if i % 2 :
                          finder = hook ( entry )
 from django . db . migrations . writer import MigrationWriter
          self . _assert_mutable ( )
  else :
 from django . utils . six . moves import xrange
  def __init__ ( self , offset = None , name = None ) :
 if end is not None :
  if settings . TEMPLATE_DEBUG and origin is None :
  import base64
  new_class = ( super ( DeclarativeFieldsMetaclass , mcs )  . __new__ ( mcs , name , bases , attrs ) )
  last = self . data . day % 10
   def get_version ( self ) :
              if hasattr ( self , '_body' ) :
 self . invoked_for_django = True
                      raise ValueError (  "%s.process_response didn't return an "  "HttpResponse object. It returned None instead."  % ( middleware_method . __self__ . __class__ . __name__ ) )
          handler . addQuickElement ( "title" , item [ 'title' ] )
   else :
              settings . USE_I18N = True
 assert mimetype is None
  return '%s %s %s' % (   _ ( ', ' ) . join ( force_text ( i ) for i in list_ [ : - 1 ] ) ,  force_text ( last_word ) , force_text ( list_ [ - 1 ] ) )
 raise NotImplementedError ( 'subclasses of Serializer must provide a start_serialization() method' )
 path_info = get_bytes_from_wsgi ( environ , 'PATH_INFO' , '/' )
   def get_current_timezone ( ) :
              raise ValidationError ( self . error_messages [ 'invalid_choice' ] , code = 'invalid_choice' )
   @ property
              try :
 def wordcount ( value ) :
          raise TemplateSyntaxError ( "'regroup' tag takes five arguments" )
      def model_to_dict ( instance , fields = None , exclude = None ) :
 def timeuntil_filter ( value , arg = None ) :
          return self . _headers . values ( )
                          out . write ( ' # %s' % line )
      from unittest import *
  try :
      import gettext
   def words ( self , num , truncate = None , html = False ) :
          if can_fail :
 while t > 0 :
                       value = value . encode ( charset )
 os . _exit ( 1 )
  sys . exit ( 2 )
  super ( ContentFile , self ) . __init__ ( stream_class ( content ) , name = name )
  def __deepcopy__ ( self , memo ) :
 from django . utils . encoding import force_text
   try :
 errors = [ e for e in all_issues if checks . ERROR <= e . level < checks . CRITICAL ]
  raise KeyError ( 'Unknown media type "%s"' % name )
              value = None
          self . class_name = class_name
  subclass = type ( "Migration" , ( Migration , ) , {  "dependencies" : [ ( app_label , migration . name ) for migration in merge_migrations ] ,  } )
  check_for_migrations ( app_config , connection )
 if len ( bits ) >= 2 and bits [ - 2 ] == 'as' :
 if not bits :
 __setslice__ = complain
 if isinstance ( value , ( decimal . Decimal , float ) + six . integer_types ) :
                          new_filenames . append ( os . path . join ( dirpath , filename ) )
              data = self . field . bound_data (  self . data , self . form . initial . get ( self . name , self . field . initial )  )
              raise ImportError (  "Could not import '%s'. The path must be fully qualified." %  lookup_view )
     @ register . filter ( is_safe = True )
                          self . stdout . write ( 'ignoring directory %s\n' % dirname )
 if newretval is not None :
    class SyndicationFeed ( object ) :
 if fields :
   else :
  except OSError as e :
 @ stringfilter
    def get_public_serializer_formats ( ) :
  return mark_safe ( self . format_output ( output ) )
 def changed_data ( self ) :
   for ext in pathext :
 file_name = self . IE_sanitize ( unescape_entities ( file_name ) )
          return '' . join ( self . fed )
  else :
 result = cursor . fetchone ( )
              return get_template ( template_name , dirs )
   return WidthRatioNode ( parser . compile_filter ( this_value_expr ) ,  parser . compile_filter ( max_value_expr ) ,  parser . compile_filter ( max_width ) ,  asvar = asvar )
          _active . value = timezone
                          raise ValueError ( 'Unable to configure '  'formatter %r: %s' % ( name , e ) )
 if opts . model is None :
                  field_notes . append (  'max_digits and decimal_places have been guessed, as this '  'database handles decimal fields as float' )
          if self . _cull_frequency == 0 :
                  return bytes ( self ) % rhs
 for iso_input in ISO_INPUT_FORMATS . get ( format_type , ( ) ) :
 return [ to_py ( val ) for val in value ]
  def add_arguments ( self , parser ) :
              if hasattr ( data , 'read' ) :
 from django . utils import six
                  continue
 if s [ 0 ] not in "\"'" or s [ - 1 ] != s [ 0 ] :
                     if obj . pk is None :
                  prefix = settings . STATIC_URL
              inner_text . extend ( getInnerText ( child ) )
 match = datetime_re . match ( value )
                  contents = one_percent_re . sub ( '%%' , t . contents )
 from django . utils . text import get_text_list , capfirst
          self . name = name
   elif t . token_type == TOKEN_TEXT :
                return 0
   except ImportError :
      if defaults is not None :
  else :
 emit_pre_migrate_signal ( create_models , self . verbosity , self . interactive , connection . alias )
                          raise ValueError ( 'Unable to configure logger '  '%r: %s' % ( name , e ) )
 output = template_localtime ( output , use_tz = context . use_tz )
          return ''
 uclass , lookup , field , unique_for = date_check
   def recipients ( self ) :
 import random
              return self . DSTOFFSET
              statements . append ( " " . join ( statement ) )
  else :
 basetype , subtype = mimetype . split ( '/' , 1 )
                  raise CommandError ( "The %s file has a BOM (Byte Order Mark). "  "Django only supports .po files encoded in "  "UTF-8 and without any BOM." % po_path )
              return None
  else :
 for ldir in dirs :
 if settings . USE_L10N and isinstance ( value , six . string_types ) :
  except ( ValueError , TypeError ) :
          unique_check = [ field for field in unique_check if field != self . fk . name ]
   return func ( * args , ** kwargs )
          module = importlib . import_module ( serializer_module )
  else :
              top = self . count
 self . years = range ( this_year , this_year + 10 )
    def _string_concat ( * strings ) :
 six . reraise ( ValidationError , ValidationError (  message ,  code = 'ambiguous_timezone' ,  params = params ,  ) , sys . exc_info ( ) [ 2 ] )
                  return p . image . size
 for item in sorted_items :
                      break
 try :
   def delete ( self , key , version = None ) :
  if getattr ( func , 'is_safe' , False ) and isinstance ( obj , SafeData ) :
              return timedelta ( seconds = - time . altzone ) - timedelta ( seconds = - time . timezone )
  program = 'msgfmt'
  else :
   if format_module_path is None :
 return len ( value . split ( ) )
 if isinstance ( title , ( list , tuple ) ) :
 offset = 60 * int ( tzinfo [ 1 : 3 ] ) + offset_mins
 self . notation_name = notation_name
 from django . conf import settings
              value = self . val_expr . resolve ( context )
  except OSError :
              raise ValidationError (  self . error_messages [ 'invalid_choice' ] ,  code = 'invalid_choice' ,  params = { 'value' : value } ,  )
                      self . write_message ( message )
  except AmbiguityError :
 try :
  kwargs [ key ] = parser . compile_filter ( value )
     url = None
 try :
   def render ( self , name , value , attrs = None , choices = ( ) ) :
 state [ 'cookies' ] = str ( state [ 'cookies' ] )
    class LocaleRegexProvider ( object ) :
  name = [ ]
 def length ( value ) :
     capfirst = lambda x : x and force_text ( x ) [ 0 ] . upper ( ) + force_text ( x ) [ 1 : ]
 from django . forms . utils import flatatt , ErrorDict , ErrorList
  else :
              if number == 1 and self . allow_empty_first_page :
 self . _boundary = boundary
 return mark_safe ( value )
    def _has_changed ( self , initial , data ) :
              activate ( self . language )
    NamedTemporaryFile = TemporaryFile
  except StandardError as e :
                  warnings . warn (  "No fixture data found for '%s'. (File format may be "  "invalid.)" % fixture_name ,  RuntimeWarning  )
          return value
 if self . _options :
              media = media + w . media
  if field_value in self . empty_values :
 tf = TimeFormat ( value )
 return ( source , make_origin ( display_name , loader , name , dirs ) )
  except ValidationError as e :
 class TranslatableFile ( object ) :
              netloc = netloc . encode ( 'idna' ) . decode ( 'ascii' )
 self . empty = options . get ( 'empty' , False )
                  lib = get_library ( taglib )
   return new_class
               raise AttributeError ( "%s could not be imported " % self . name )
          self . val_expr = val_expr
 def truncatewords_html ( value , arg ) :
  mask = (  pyinotify . IN_MODIFY |  pyinotify . IN_DELETE |  pyinotify . IN_ATTRIB |  pyinotify . IN_MOVED_FROM |  pyinotify . IN_MOVED_TO |  pyinotify . IN_CREATE  )
 handler . startDocument ( )
 i += 1
                  endbmatch = endblock_re . match ( t . contents )
    class HttpResponseNotFound ( HttpResponse ) :
    def run_validators ( self , value ) :
   var_node = self . create_variable_node ( filter_expression )
          return baseconv . base62 . encode ( int ( time . time ( ) ) )
 if base . lower ( ) . endswith ( '.tar' ) :
 if isinstance ( value , bool ) :
                  raise CommandError (  "Problem installing fixture '%s': %s is not a known "  "serialization format." % ( '' . join ( parts [ : - 1 ] ) , parts [ - 1 ] ) )
    accept_language_re = re . compile ( r'''         ([A-Za-z]{1,8}(?:-[A-Za-z0-9]{1,8})*|\*)      # "en", "en-au", "x-y-z", "es-419", "*"         (?:\s*;\s*q=(0(?:\.\d{,3})?|1(?:.0{,3})?))?   # Optional "q=1.00", "q=0.8"         (?:\s*,\s*|$)                                 # Multiple accepts per header.         ''' , re . VERBOSE )
                  pass
          lang_code = get_language_from_path ( request . path_info )
   for app_config in reversed ( list ( apps . get_app_configs ( ) ) ) :
   else :
    return final_output
   @ property
  return field . to_python
 BASE56_ALPHABET = '23456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz'
 from django . http . multipartparser import MultiPartParser , MultiPartParserError
      def filter ( self , record ) :
 if conflicts and not self . merge :
 from django . utils . encoding import force_str
          attrs [ 'labels' ] = labels
              stream_class = StringIO if isinstance ( content , six . text_type ) else BytesIO
                  pickled = self . _cache [ key ]
  return default
from django . http . cookie import SimpleCookie , parse_cookie
  return errors
 while i < list_length :
 visible_issue_count = 0
                          self . _css . setdefault ( medium , [ ] ) . append ( path )
                      d = d [ m . groups ( ) [ 0 ] ]
  else :
 decompress = True
              return ''
          if key not in self :
       date = datetime_safe . new_datetime ( date )
      def __init__ ( self , target , expression , var_name ) :
                      return "[Included template had syntax error: %s]" % e
   return mark_safe ( '\n' . join ( output ) )
 if self . is_reversed :
      if PY3 :
      def _BaseCookie__set ( self , key , real_value , coded_value ) :
   except ( IOError , OSError ) :
    class TemplateEncodingError ( Exception ) :
              template_dirs = app_template_dirs
                      raise TemplateSyntaxError ( "'%s' is not a valid tag or filter in tag library '%s'" %  ( name , taglib ) )
  for field_node in node . getElementsByTagName ( "field" ) :
 for app_config in apps . get_app_configs ( ) :
  if prefix is None :
                      os . makedirs ( self . default_locale_path )
          if value is True :
 default_error_messages = {  'invalid' : _ ( "No file was submitted. Check the encoding type on the form." ) ,  'missing' : _ ( "No file was submitted." ) ,  'empty' : _ ( "The submitted file is empty." ) ,  'max_length' : ungettext_lazy (  'Ensure this filename has at most %(max)d character (it has %(length)d).' ,  'Ensure this filename has at most %(max)d characters (it has %(length)d).' ,  'max' ) ,  'contradiction' : _ ( 'Please either submit a file or check the clear checkbox, not both.' )  }
              self [ key ] = default
 self . message_context = None
              register_serializer ( format , settings . SERIALIZATION_MODULES [ format ] , serializers )
  return super ( TimeField , self ) . to_python ( value )
 from django . utils . datastructures import MultiValueDict , ImmutableList
 import django . core . checks . compatibility . django_1_7_0
              return LazyStream ( BoundaryIter ( self . _stream , self . _boundary ) )
              raise ValueError ( "Unable to convert %r" % value )
 return widget . id_for_label ( id_ )
  if self . localize :
 for header in cc_delim_re . split ( response [ 'Vary' ] ) :
                      os . unlink ( work_file )
 symlink_path = os . path . join ( tmpdir , 'symlink' )
  else :
              TYPE = FIELD
                      msg . attach ( attachment )
   class SimpleLazyObject ( LazyObject ) :
                  data [ f . name ] = [ ]
                   raise NotImplementedError ( 'Awaiting Implementation' )
  for pattern in allowed_hosts :
   return result
                  import_module ( templatetag_module )
  else :
 import time
   def configure_logging ( logging_config , logging_settings ) :
 with io . open ( pofile , 'w' , encoding = 'utf-8' ) as fp :
          return map ( self . make_bytes , self . _iterator )
 plural_re = re . compile ( r"""^\s*plural$""" )
 if value in ( None , '' ) :
              alter_sql . extend ( [ '-- ' + sql for sql in  connection . creation . sql_for_pending_references ( model , style , pending_references ) ] )
 handler_config = handlers [ name ]
                   compare_to = nodelist_true_output = self . nodelist_true . render ( context )
 @ stringfilter
 parser . delete_first_token ( )
  except InputStreamExhausted :
 return FixedOffset ( offset , name )
                  attrs [ 'pk' ] = smart_text ( obj_pk )
   return fixture_files
    def get_language_from_path ( request ) :
     class StreamingHttpResponse ( HttpResponseBase ) :
   def __repr__ ( self ) :
  phone2numeric = allow_lazy ( phone2numeric )
          return DebugVariableNode ( contents )
     class Deserializer ( base . Deserializer ) :
 if not os . path . exists ( directory ) :
 translation . activate ( 'en-us' )
              value = str ( value )
  else :
 return calendar . timegm ( result . utctimetuple ( ) )
   except KeyboardInterrupt :
              if isinstance ( elt , NonCapture ) :
    return False
 if isinstance ( widget , NumberInput ) and 'step' not in widget . attrs :
          for item in self . items :
    if ( ( ip_str . startswith ( ':' ) and not ip_str . startswith ( '::' ) ) or  ( ip_str . endswith ( ':' ) and not ip_str . endswith ( '::' ) ) ) :
 for app_config in reversed ( list ( apps . get_app_configs ( ) ) ) :
   quant = [ ]
 from django . core . cache import caches
              self . msgmerge_options = self . msgmerge_options [ : ] + [ '--no-location' ]
 for sublist in second_item :
 global _supported
   if not locale_dir :
 if not field_name :
 if id_ :
  inner_text = [ ]
 notifier . process_events ( )
          self . fed . append ( '&%s;' % name )
   def render ( self , context ) :
     def import_library ( taglib_module ) :
 self . managed = True
          try :
     wm = pyinotify . WatchManager ( )
 date_data = ( date . year , date . month , date . day )
              ctx . update ( force_bytes ( value ) )
  return _serializers [ format ] . Serializer
 fields . sort ( key = lambda x : x [ 1 ] . creation_counter )
                      value = field . to_python ( getInnerText ( field_node ) . strip ( ) )
     class InterBoundaryIter ( six . Iterator ) :
 return six . iteritems ( super ( MultiValueDict , self ) )
              field_type , new_params = field_type
          self . _stream = stream
  from django . conf import settings
    def multiple_chunks ( self , chunk_size = None ) :
          arg = settings . TIME_FORMAT
   def _isdst ( self , dt ) :
 if not settings . ADMINS :
    def __call__ ( self , value ) :
              return lang_code
              nodelist . contains_nontext = True
          self . filepath = filepath
 if css_classes :
 try :
     class DebugNode ( Node ) :
 raise v
   def write ( self , outfile , encoding ) :
 k = match . end ( )
 return formatdate ( epoch_seconds , usegmt = True )
   super_set ( key , value )
  raise value
  requires_system_checks = False
 chunk_size = 64 * 2 ** 10
       data = None
              self . clear ( )
           indent = self . options . get ( "indent" )
                  self . _cull ( db , cursor , now )
 return super ( SlugField , self ) . clean ( value )
   return output
   def close ( self ) :
  not_found = [ ]
    value = value . astimezone ( timezone )
    if len ( app_labels ) == 0 :
          for elt in source :
              _mtimes = { }
   if getattr ( func , 'expects_localtime' , False ) :
      help = "Creates new migration(s) for apps."
          if model_list is None :
          self . max_length = kwargs . pop ( 'max_length' , None )
              raise ValueError ( "Invalid header: %r" % line )
 logging . _acquireLock ( )
              return ""
   def tokenize ( self ) :
                          unpacked_vars = dict ( zip ( self . loopvars , item ) )
 exit_code = os . spawnve ( os . P_WAIT , sys . executable , args , new_environ )
          self . context . pop ( )
   if item [ 'description' ] is not None :
 from django . utils . encoding import force_text
 self . _raw_ipv6 = bool ( self . use_ipv6 )
  else :
  except ImportError :
      input_type = 'password'
          if t [ 1 ] is True :
                      self . stdout . write ( '\n' + self . style . SQL_KEYWORD ( connection . ops . end_transaction_sql ( ) ) )
  num_sent = 0
  def __init__ ( self , attrs = None , choices = ( ) ) :
          raise ValidationError ( _ ( 'Enter a valid IPv6 address.' ) , code = 'invalid' )
  def update_watch ( sender = None , ** kwargs ) :
           if is_aware ( value ) :
   @ cached_property
                      msg . attach ( self . _create_attachment ( * attachment ) )
                  kwargs [ "initial" ] = self . parent_instance . pk
   def _post_clean ( self ) :
  response [ 'Content-Length' ] = '0'
              return list ( self . iterkeys ( ) )
  self . _lib = library
          return type ( self ) . __bool__ ( self )
    class TagHelperNode ( Node ) :
     def set_urlconf ( urlconf_name ) :
 import base64
  def indexbytes ( buf , i ) :
 ret = UnlockFileEx ( hfile , 0 , 0 , 0xFFFF0000 , byref ( overlapped ) )
 try :
  from django . conf import settings
              if default is not RAISE_ERROR :
              raise KeyError (  "Key %r not found in '%s'" % ( name , self . __class__ . __name__ ) )
 return value
 message = ungettext_lazy (  'Ensure this value has at least %(limit_value)d character (it has %(show_value)d).' ,  'Ensure this value has at least %(limit_value)d characters (it has %(show_value)d).' ,  'limit_value' )
              raise CommandError ( "Database inspection isn't supported for the currently selected database backend." )
  def __init__ ( self , permitted_methods , * args , ** kwargs ) :
            cache . set ( cache_key , [ ] , cache_timeout )
 lexer_class , parser_class = DebugLexer , DebugParser
    def download ( self , url ) :
 def __init__ ( self , dt ) :
 from django . utils . encoding import force_bytes
 def regex ( self ) :
 merge_migrations . append ( migration )
  else :
 i += 1
    def mail_admins ( subject , message , fail_silently = False , connection = None ,  html_message = None ) :
  else :
 import warnings
                  return func ( context , self . first , self . second )
 continue
          sys . stderr . write ( "ERROR: %s\n" % e )
 clean = lambda self , x : x
  except AttributeError :
 if item [ 'author_email' ] is not None :
              raise EmptyPage ( 'That page number is less than 1' )
  from django . core . management . base import AppCommand
     class BaseDatabaseCache ( BaseCache ) :
 return id_
   def has_changed ( self ) :
 for db in connections . all ( ) :
  super ( Command , self ) . handle ( 'project' , project_name , target , ** options )
   _encoding = None
  self . error_dict [ field ] = messages . error_list
 return major
              return clean_ipv6_address ( value , self . unpack_ipv4 )
 for arg in argv [ 2 : ] :
      if not response . streaming :
 if not templatetags_modules :
      def get_unbound_function ( unbound ) :
  var_name = bits [ 5 ]
     class RegroupNode ( Node ) :
              msg [ 'Date' ] = formatdate ( )
          urlconf = get_urlconf ( )
   self . _container = [ value ]
          self . cyclevars = cyclevars
 from django . utils . six . moves . urllib . parse import urljoin
 attrs = dict ( self . attrs , ** kwargs )
    class StopFutureHandlers ( UploadFileException ) :
 return self . data . month
                  for form in self . saved_forms :
   if len ( args ) == 2 :
         else :
                  attrs [ 'id' ] = self . html_initial_id
 for i , ( dirpath , f ) in enumerate ( locations ) :
                  handler . file . close ( )
  else :
 if self . data . hour == 0 :
                  self . changed_objects . append ( ( obj , form . changed_data ) )
  ngettext_lazy = ngettext
          if value in self . empty_values and self . required :
 def __init__ ( self , flo , chunk_size = 64 * 1024 ) :
 def get_default_prefix ( cls ) :
  from django . core . management . base import BaseCommand , CommandError
 if value and not self . valid_value ( value ) :
              parse_until = [ ]
 from django . utils . six . moves . urllib . parse import (  quote , quote_plus , unquote , unquote_plus , urlparse ,  urlencode as original_urlencode )
   def list ( self , * args , ** kwargs ) :
 self . sysid = sysid
    def new_datetime ( d ) :
          path = [ path ]
   def as_textarea ( self , attrs = None , ** kwargs ) :
  return format_html ( '<option value="{0}"{1}>{2}</option>' ,  option_value ,  selected_html ,  force_text ( option_label ) )
          changeset = timestamp . strftime ( '%Y%m%d%H%M%S' )
 new_migration = subclass ( "%04i_merge" % ( biggest_number + 1 ) , app_label )
              cursor . close ( )
 if not rest :
              if locales :
              self . compression_formats [ 'bz2' ] = ( bz2 . BZ2File , 'r' )
  msgs , errors , status = popen_wrapper ( args )
  return _dec
                      lookup_str = callback . __module__ + "." + callback . __name__
   if func is None :
                  field_params [ 'db_column' ] = col_name
                security_logger = logging . getLogger ( 'django.security.%s' %  e . __class__ . __name__ )
                          callback = lambda response : middleware . process_response ( request , response )
 if not self . is_required :
 from django . db import connection
  else :
 st = os . stat ( src )
 name = "." . join ( [ package . __name__ , module_name ] )
 if value :
 _fields_ = [  ( '_offset' , _OFFSET ) ,  ( 'Pointer' , PVOID ) ]
               for model in sort_dependencies ( app_list . items ( ) ) :
  if options [ 'method' ] in ( 'prefork' , 'fork' ) :
  def nud ( self , parser ) :
          self . vars = variables
 return self . _cache . add ( key , value , self . get_backend_timeout ( timeout ) )
     _caches = { }
 text = unicodedata . normalize ( 'NFC' , self . _wrapped )
 logger . addHandler ( handler )
                          self . choices . append ( ( full_file , f ) )
      def render ( self , context ) :
   except :
              return parent
  except TemplateSyntaxError as e :
  return id_
                  return debug . technical_500_response ( request , * sys . exc_info ( ) , status_code = 400 )
   def flush ( self ) :
   return BlockNode ( block_name , nodelist )
  from django . utils . deprecation import RemovedInDjango19Warning
 self . _cached_loaders = [ ]
 if len ( t ) > 1 :
 return self . __language
                  usage . append ( "" )
  def __init__ ( self , content_type = None , status = None , reason = None ) :
 message = _ ( 'Enter a valid value.' )
   if not changes and self . verbosity >= 1 :
  def _decorator ( view_func ) :
     sys . modules [ __name__ + ".moves.urllib" ] = Module_six_moves_urllib ( __name__ + ".moves.urllib" )
    locales = locale or all_locales
 from django . utils import six
 key = bytes_to_text ( key , self . encoding )
     class TextNode ( Node ) :
 content = template . render ( context )
   executor = MigrationExecutor ( connections [ DEFAULT_DB_ALIAS ] )
   def has_bom ( fn ) :
  except ImportError as e :
          return self . path < other . path
                  options += [ ( s_opt . get_opt_string ( ) , s_opt . nargs ) for s_opt in  parser . option_list ]
  logger = logging . getLogger ( 'django.request' )
 if conflicts :
          unifunc = results [ "unifunc" ]
   def load_middleware ( self ) :
          int_part_gd = ''
              return ''
 self . charset = charset
           return host , ''
    @ register . tag
  field_desc += ', ' . join ( [  '%s=%s' % ( k , strip_prefix ( repr ( v ) ) )  for k , v in extra_params . items ( ) ] )
 from django . db import connections , DEFAULT_DB_ALIAS
   def extract ( self , filename ) :
   def handle ( self , * args , ** options ) :
 path = path . lstrip ( '/' ) . lstrip ( '\\' )
 from django . utils . deprecation import RemovedInDjango19Warning
               warnings . warn ( "OptionParser usage for Django management commands "  "is deprecated, use ArgumentParser instead" ,  RemovedInDjango20Warning )
 statement = [ ]
    raise ImportError ( "No IPython" )
 if match :
              self . stdout . write ( self . style . MIGRATE_HEADING ( "Created new squashed migration %s" % writer . path ) )
              e , tb = sys . exc_info ( ) [ 1 : ]
              self . error_list = [ ]
   else :
     def modelformset_factory ( model , form = ModelForm , formfield_callback = None ,  formset = BaseModelFormSet , extra = 1 , can_delete = False ,  can_order = False , max_num = None , fields = None , exclude = None ,  widgets = None , validate_max = False , localized_fields = None ,  labels = None , help_texts = None , error_messages = None ,  min_num = None , validate_min = False ) :
   def __next__ ( self ) :
  else :
 for root in settings . ALLOWED_INCLUDE_ROOTS :
  else :
  if localized_fields == ALL_FIELDS or ( localized_fields and f . name in localized_fields ) :
 return header_query . lower ( ) in existing_headers
   def end_serialization ( self ) :
 return value . strftime ( format )
              end = s . find ( b';' , end + 1 )
  connection = connections [ database ]
          raise self . error ( None , "Unclosed tags: %s " % ', ' . join ( parse_until ) )
 from django . utils import six
 if kw [ 'microsecond' ] :
                  fp . write ( src_data )
  Module_six_moves_urllib_parse . _moved_attributes = _urllib_parse_moved_attributes
  return '\n' . join ( output )
  super ( BaseInlineFormSet , self ) . __init__ ( data , files , prefix = prefix ,  queryset = qs , ** kwargs )
 from django . utils . xmlutils import SimplerXMLGenerator
  for model in router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) :
  def to_python ( self , value ) :
  elif not isinstance ( value , ConvertingTuple ) and isinstance ( value , tuple ) :
   if logging_settings :
          return self . paginator . validate_number ( self . number - 1 )
 import re
  else :
    def add_root_elements ( self , handler ) :
 if form in forms_to_delete :
 from __future__ import unicode_literals
 parser = self . create_parser ( argv [ 0 ] , argv [ 1 ] )
    def urlsafe_base64_decode ( s ) :
  elif isinstance ( value , six . string_types ) :
              response = self . get_response ( request )
              if incremental :
 self . load_initial_data = options . get ( 'load_initial_data' )
          raise TemplateSyntaxError ( "'templatetag' statement takes one argument" )
  for name , value in self . extra_headers . items ( ) :
          ending = self . ending if ending is None else ending
  fd = os . open ( full_path , flags , 0o666 )
              os . chmod ( dst , mode )
   db_name = connection . creation . create_test_db ( verbosity = verbosity , autoclobber = not interactive , serialize = False )
                  wrapped_callback = self . make_view_atomic ( callback )
 for hextet in new_ip :
                  warnings . warn ( "A {% csrf_token %} was used in a template, but the context did not provide the value.  This is usually caused by not using RequestContext." )
 from django . utils . safestring import mark_safe
  requires_system_checks = False
      import msvcrt
                      raise NoReverseMatch ( "%s is not a registered namespace" %  key )
  else :
 raise
                  raise CommandError ( 'You appear not to have the %r program installed or on your path.' %  connection . client . executable_name )
 MONTHS_3_REV = {  'jan' : 1 , 'feb' : 2 , 'mar' : 3 , 'apr' : 4 , 'may' : 5 , 'jun' : 6 , 'jul' : 7 , 'aug' : 8 ,  'sep' : 9 , 'oct' : 10 , 'nov' : 11 , 'dec' : 12  }
  except AttributeError :
 from __future__ import unicode_literals
              yield v
  if getattr ( func , 'needs_autoescape' , False ) :
    else :
 if self . field . show_hidden_initial :
          return base64 . urlsafe_b64decode ( s . ljust ( len ( s ) + len ( s ) % 4 , b'=' ) )
 msg [ 'From' ] = self . extra_headers . get ( 'From' , self . from_email )
   @ staticmethod
    cache = DefaultCacheProxy ( )
              raise CommandError ( "Can't find %s. Make sure you have GNU gettext "  "tools 0.15 or newer installed." % self . program )
                  raise ValueError ( 'Unable to set formatter '  '%r: %s' % ( formatter , e ) )
          iter ( x )
  return urljoin ( self . base_url , filepath_to_uri ( name ) )
 def __init__ ( self , offset ) :
              for node in nodelist :
  if config [ 'version' ] != 1 :
       def __init__ ( self ) :
  elif message_context [ 0 ] == "'" :
          def __getattr__ ( self , attr ) :
 warnings . warn (  'import_by_path() has been deprecated. Use import_string() instead.' ,  RemovedInDjango19Warning , stacklevel = 2 )
   elif dirname == 'locale' :
 from django . utils . encoding import force_bytes , force_text , force_str , iri_to_uri
  except ZeroDivisionError :
 from django . core . files . move import file_move_safe
  EscapeUnicode = EscapeText
 def __init__ ( self , title , link , description , language = None , author_email = None ,  author_name = None , author_link = None , subtitle = None , categories = None ,  feed_url = None , feed_copyright = None , feed_guid = None , ttl = None , ** kwargs ) :
  except ImportError as e :
 incomment = False
 def addslashes ( value ) :
     class DefusedXmlException ( ValueError ) :
 result = self . configurator . convert ( value )
          token = super ( DebugLexer , self ) . create_token ( token_string , in_tag )
                          continue
               return False
  except ValidationError :
 self . waiting_writers = 0
    RemovedInNextVersionWarning = RemovedInDjango19Warning
   _get_val = lazy ( _get_val , six . text_type )
 for item in values :
              return None
 if isinstance ( offset , timedelta ) :
 from django . core . management . color import no_style
   @ property
                  self . xml . characters ( smart_text ( related_att ) )
 _dict = func ( * resolved_args , ** resolved_kwargs )
  from django . core . management . base import AppCommand
  delattr ( obj . __class__ , self . name )
  if hasattr ( settings , "SERIALIZATION_MODULES" ) :
          delattr ( _MovedItems , name )
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
   def _get_queryset ( self ) :
                      return True
 if is_ignored ( file_path , self . ignore_patterns ) :
          super ( MovedAttribute , self ) . __init__ ( name )
 output = [ format_html ( '<select multiple="multiple"{0}>' , flatatt ( final_attrs ) ) ]
 if language_code not in self . _reverse_dict :
          return super ( Debug , self ) . __init__ ( DEBUG , * args , ** kwargs )
                  settings . configure ( )
 from django . utils . safestring import mark_safe
   def get_language_info ( lang_code ) :
 item . update ( kwargs )
   attrs = flatatt ( attrs ) if attrs else ''
 file_list = self . find_files ( "." )
 if decimal_separator in value :
 self . _varlist = varlist
          return path
          return super ( FileInput , self ) . render ( name , None , attrs = attrs )
 unhandled_params = list ( params )
          cleaned_line = comment_re . sub ( r"\1" , line ) . strip ( )
  last = max ( 0 , end - 1 )
 import warnings
          response [ 'Last-Modified' ] = http_date ( )
  raise SyntaxError ( "Translation blocks must not include other block tags: %s (%sline %d)" % ( t . contents , filemsg , t . lineno ) )
 try :
              formfield = formfield_callback ( f , ** kwargs )
          if self . _changed_data is None :
  kwargs [ 'number' ] = number_value
      pass
   if iterator is None :
 yield emitting
          self . name , self . nodelist , self . parent = name , nodelist , parent
              yield node
 obj . children = copy . deepcopy ( self . children , memodict )
     class Library ( object ) :
    class Parser ( object ) :
          arg = settings . DATE_FORMAT
  from django . conf import settings
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to synchronize. Defaults to the "default" database.' )
  except AttributeError :
                  scheme , netloc , path , query , fragment = urlsplit ( value )
              with connection . cursor ( ) as curs :
 method = kwargs . pop ( 'method' )
              if ( self . requires_system_checks and  not options . get ( 'skip_validation' ) and  not options . get ( 'skip_checks' ) ) :
              return t [ 0 ]
  else :
  level += 1
                      signal . signal ( signal . SIGTTOU , old_handler )
                      app_label , model_label = label . split ( '.' )
 from django . core . management . base import BaseCommand , CommandError
 def id_for_label ( self ) :
 return mark_safe ( '\n' . join ( [ six . text_type ( self . management_form ) , forms ] ) )
 try :
   nodelist = parser . parse ( ( 'endfilter' , ) )
  httpd = httpd_cls ( server_address , WSGIRequestHandler , ipv6 = ipv6 )
 graph = loader . graph
 if self . use_ssl and self . use_tls :
    if PY3 :
 self . xml . characters ( smart_text ( key_value ) )
      def __init__ ( self , source ) :
    _urllib_response_moved_attributes = [  MovedAttribute ( "addbase" , "urllib" , "urllib.response" ) ,  MovedAttribute ( "addclosehook" , "urllib" , "urllib.response" ) ,  MovedAttribute ( "addinfo" , "urllib" , "urllib.response" ) ,  MovedAttribute ( "addinfourl" , "urllib" , "urllib.response" ) ,  ]
              cursor . execute ( "DELETE FROM %s WHERE cache_key = %%s" % table , [ key ] )
              try :
  with context . push ( ) :
   if self . verbosity >= 1 :
 yield "#"
 return value or arg
              arg_vals = [ ]
  if decimal_pos is not None :
                  pass
    class SafeText ( six . text_type , SafeData ) :
  except ( ValueError , TypeError ) :
          def dec ( func ) :
              return ''
 from django . utils . module_loading import import_string
  else :
  else :
    class HttpResponseRedirect ( HttpResponseRedirectBase ) :
 self . use_natural_keys = options . pop ( "use_natural_keys" , False )
          if self . stream is None :
          for item in self . items :
  return '(%s: %s)' % ( self . connector , ', ' . join ( [ str ( c ) for c in  self . children ] ) )
              val = ', ' . join ( sanitize_address ( addr , encoding )  for addr in getaddresses ( ( val , ) ) )
              if self . verbosity > 0 :
    def to_python ( self , value ) :
   return '' . join ( pieces )
              self . renderer = renderer
              name_str = "; " . join (  "%s in %s" % ( ", " . join ( names ) , app )  for app , names in conflicts . items ( )  )
 from django . utils . encoding import force_str , force_text
              import_module ( project_name )
          return Literal ( value )
  else :
     if i >= self . initial_form_count ( ) and i >= self . min_num :
 defaults . update ( kwargs )
 message = _ ( 'Enter a valid URL.' )
  def add_arguments ( self , parser ) :
 return result
                  error_text = ERRORS [ e . errno ]
 six . reraise ( ImportError , ImportError ( msg ) , sys . exc_info ( ) [ 2 ] )
   def clean ( self , value ) :
   if col_name != new_name and field_notes :
      return "'%s'" % dirname if dirname else 'absolute path'
    dot_re = re . compile ( r'\S' )
          if '__str__' not in klass . __dict__ :
 super ( CharField , self ) . __init__ ( * args , ** kwargs )
                  raise UnrecognizedArchiveFormat (  "File object not a recognized archive format." )
 try :
   def ungettext ( singular , plural , number ) :
  self . cleaned_data [ name ] = value
   msgs = msgs . replace (  "#. #-#-#-#-#  %s.pot (PACKAGE VERSION)  #-#-#-#-#\n" % self . domain , "" )
                                      traceback . print_exc ( )
 self . verbosity = options [ 'verbosity' ]
  except UnicodeDecodeError :
          if hasattr ( response , 'render' ) and callable ( response . render ) :
    EndToken = EndToken ( )
              if not app_labels :
 import sys
  from django . utils import six
   def is_checked ( self ) :
   def validate ( self , value ) :
   def resolve_template ( self , template ) :
     class WidthRatioNode ( Node ) :
  try :
          self . dict [ item ] = None
                      raise e
      def __init__ ( self , name ) :
 from django . template . defaultfilters import date
                          return middleware . process_response ( request , response )
  filelist = [ os . path . join ( self . _dir , fname ) for fname  in glob . glob1 ( self . _dir , '*%s' % self . cache_suffix ) ]
   def clear ( self ) :
 parser . add_argument ( '--addrport' , default = '' ,  help = 'Port number or ipaddr:port to run the server on.' )
                  pass
  logger = logging . getLogger ( 'django.request' )
 if PY3 :
  return val
 for pattern in reversed ( self . url_patterns ) :
  else :
 return ret
                  self . emit_post_migrate ( verbosity , interactive , database )
 warnings . warn ( "memoize wrapper is deprecated and will be removed in "  "Django 1.9. Use django.utils.lru_cache instead." ,  RemovedInDjango19Warning , stacklevel = 2 )
 value = self . to_python ( value )
 def __init__ ( self , stream , boundary ) :
 os . chdir ( our_home_dir )
  from django . conf import settings
 self . common_logger_config ( root , config , incremental )
          supported = False
                      self . stdout . write ( "Resetting sequences\n" )
                      if name in existing :
              handler . addQuickElement ( "category" , "" , { "term" : cat } )
          super ( URLValidator , self ) . __init__ ( ** kwargs )
 from django . utils . module_loading import import_string
          if getattr ( self , '_client' , None ) is None :
          try :
  number = '' . join ( reversed ( digits ) )
  from . html_parser import HTMLParser , HTMLParseError
  value = '%s %s' % tuple ( value )
 if os . path . exists ( fname ) :
  def add_arguments ( self , parser ) :
   self . no_obsolete = options . get ( 'no_obsolete' )
                  field_params [ 'max_digits' ] = row [ 4 ]
 _win = ( sys . platform == "win32" )
      hidden_widget = MultipleHiddenInput
    def loads ( s , key = None , salt = 'django.core.signing' , serializer = JSONSerializer , max_age = None ) :
 try :
   def resolve ( self , path ) :
 from django . utils import six
 raise NotImplementedError ( 'subclasses of SyndicationFeed must provide a write() method' )
          del cc [ 'public' ]
               for supported_code in _supported :
 user_regex = re . compile (  r"(^[-!#$%&'*+/=?^_`{}|~0-9A-Z]+(\.[-!#$%&'*+/=?^_`{}|~0-9A-Z]+)*$"  r'|^"([\001-\010\013\014\016-\037!#-\[\]-\177]|\\[\001-\011\013\014\016-\177])*"$)' ,  re . IGNORECASE )
 return "<For Node: for %s in %s, tail_len: %d%s>" % ( ', ' . join ( self . loopvars ) , self . sequence , len ( self . nodelist_loop ) ,  reversed_text )
  for loader in template_source_loaders :
           return __proxy__ ( args , kw )
 app . initialize ( argv = [ ] )
    def __call__ ( self , value ) :
   @ cached_property
 from django . core . management . utils import ( handle_extensions , find_command ,  popen_wrapper )
                  if hasattr ( request , 'urlconf' ) :
 msg_count = 0
              return
              _mtimes [ filename ] = mtime
              value = to_current_timezone ( value )
from __future__ import unicode_literals
 link_prev , link_next , key , result = link
 if not commit :
          return all ( w . is_hidden for w in self . widgets )
          return "<DeserializedObject: %s.%s(pk=%s)>" % (  self . object . _meta . app_label , self . object . _meta . object_name , self . object . pk )
  return None
 parser . add_option ( '--pythonpath' ,  help = 'A directory to add to the Python path, e.g. "/home/djangoprojects/myproject".' ) ,
 return value . tzinfo is not None and value . tzinfo . utcoffset ( value ) is not None
 super ( EmailMultiAlternatives , self ) . __init__ ( subject , body , from_email , to , bcc , connection , attachments , headers , cc )
 BLOCK_TAG_END = '%}'
 if pieces [ - 1 ] :
  if isinstance ( stream_or_string , six . string_types ) :
      DEFAULT_TIMEOUT = object ( )
              path = join ( os . getcwdu ( ) , path )
      config [ 'fmt' ] = config . pop ( 'format' )
 x = int ( x // len ( to_digits ) )
                  attrs = attrs or { }
 s = s . replace ( '\n' , '\\n' )
              try :
    caches = CacheHandler ( )
  else :
   def __setitem__ ( self , key , value ) :
 base36 . append ( digits [ i // j ] )
   gettext_lazy = lazy ( gettext , str )
  else :
 parser . add_argument ( '--ipv6' , '-6' , action = 'store_true' , dest = 'use_ipv6' , default = False ,  help = 'Tells Django to use an IPv6 address.' )
  final_attrs = self . build_attrs ( attrs , name = name )
  self . error_list . extend ( message . error_list )
     class NullBooleanSelect ( Select ) :
               return True
  except LookupError :
              if field . _has_changed ( field . to_python ( initial ) , data ) :
 def escape_filter ( value ) :
 from django . utils import archive
              return SafeText ( data )
          self . _assert_mutable ( )
   def delete_cookie ( self , key , path = '/' , domain = None ) :
 value = environ . get ( str ( key ) , str ( default ) )
 BASE62_ALPHABET = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
          loaders = [ ]
 if self . activated :
   def copy ( self ) :
  return default
  else :
              value = token_kwargs ( remaining_bits , parser , support_legacy = False )
                      raise
          raise NotImplementedError ( 'Subclasses must define this method.' )
      def render ( self , context ) :
                  try :
          with self . mutex :
 value = int ( value )
              widget = self . field . widget
          if not self . data :
   def smart_split ( text ) :
          raise Exception ( "This %s instance cannot tell its position" % self . __class__ . __name__ )
              filename = filename [ : - 9 ] + ".py"
          self . object_list = object_list
    elif version [ 3 ] != 'final' :
   def _resolve_name ( name , package , level ) :
   if options . get ( 'no_wrap' ) :
      regex = ''
   elif not os . path . exists ( self . file_path ) :
      buf = StreamingBuffer ( )
  if y and m and d :
  except MultiPartParserError :
           self . sep = force_str ( sep )
 setattr ( cls , opname , opfunc )
   def __len__ ( self ) :
 self . day_none_value = ( 0 , empty_label [ 2 ] )
 from django . utils . html import format_html , format_html_join , escape
          self . file . write ( raw_data )
    def __exit__ ( self , exc_type , exc_value , traceback ) :
    if six . PY3 :
                   writer = MigrationWriter ( migration )
  return value
  start_response ( force_str ( status ) , response_headers )
  for ch , escaped in input_iter :
          return ( "%" + six . text_type ( arg ) ) % value
 sublist_item = None
   if new_name in used_column_names :
              base = Media ( )
                      if not hasattr ( self , 'bad_cookies' ) :
  except AttributeError :
              locale_dirs = filter ( os . path . isdir , glob . glob ( '%s/*' % basedir ) )
                     errors . extend ( m for m in e . error_list if m not in errors )
  if len ( initial ) != len ( data ) :
   def handle_field ( self , obj , field ) :
 errors . append ( {  'message' : escape ( message ) if escape_html else message ,  'code' : error . code or '' ,  } )
 def management_form ( self ) :
 return filename and filename [ filename . rfind ( "\\" ) + 1 : ] . strip ( )
 self . cookies [ key ] = value
     @ property
              self . writer_leaves ( )
                          locks . unlock ( fd )
 return [ globalpath ] + list ( settings . LOCALE_PATHS )
 values = '' . join ( quant ) . split ( ',' )
              self . _ordering = [ ]
  if app_config . models_module is None or app_config in excluded_apps :
                  return 'https'
                          deps . append ( rel_model )
 if ',' not in arg :
              for widget in self . widgets :
  except ( OverflowError , ValueError ) :
 request_repr = '\n{0}' . format ( filter . get_request_repr ( request ) )
                  attrs [ 'id' ] = auto_id
 from django . template . base import TemplateDoesNotExist
 from django . utils . encoding import smart_text , is_protected_type
  output . append ( '%s<li>%s%s</li>' % ( indent ,  escaper ( force_text ( title ) ) , sublist ) )
   def new ( self , values = None ) :
 for exclude in excludes :
try :
      url = ''
              c = self . resolve ( c )
              return [ ]
  finally :
  else :
  cc = dict ( _to_tuple ( el ) for el in  cc_delim_re . split ( response [ 'Cache-Control' ] ) )
    plan = [ ( executor . loader . graph . nodes [ targets [ 0 ] ] , options [ 'backwards' ] ) ]
   def render ( self , context ) :
 return ( ret == 0 )
                  if not candidate :
       if sys . version_info [ : 2 ] >= ( 3 , 3 ) :
  if hasattr ( parent , 'render' ) :
  return value
              field_type = 'TextField'
   @ property
                  value = None
   elif var is None :
              handler . startElement ( "author" , { } )
  else :
                                  self . stderr . write ( "    Failed to install index for %s.%s model: %s\n" % ( app_name , model . _meta . object_name , e ) )
     def to_locale ( language , to_lower = False ) :
 if not attr_list [ 3 ] & termios . ECHO :
    def render_to_string ( template_name , dictionary = None , context_instance = None ,  dirs = None ) :
 import os
 if root :
     def boolean_check ( v ) :
                httpd . daemon_threads = True
 if response :
     class TemporaryFileUploadHandler ( FileUploadHandler ) :
              file = tempfile . NamedTemporaryFile ( suffix = '.upload' ,  dir = settings . FILE_UPLOAD_TEMP_DIR )
 hour = int ( m . group ( 'hour' ) )
 raise NotImplementedError ( 'subclasses of BaseLoader must provide a load_template_source() method' )
 for bytes in stream :
 simple_url_2_re = re . compile ( r'^www\.|^(?!http)\w[^@]+\.(com|edu|gov|int|mil|net|org)($|/.*)$' , re . IGNORECASE )
              value = '1'
 self . add_fields ( form , i )
 self . args = args
              try :
  from django . db . models . fields . related import ManyToManyField
                       fixture_files_in_dir . append ( ( candidate , fixture_dir , fixture_name ) )
          return self . var
 from django . utils . timezone import utc , get_fixed_timezone
 return cursor . fetchone ( ) is not None
              pass
     class NodeList ( list ) :
  elif ns not in app_list :
      global _mtimes , _win
  full_statement = [ "CREATE TABLE %s (" % qn ( tablename ) ]
  elif self . _meta . exclude and field in self . _meta . exclude :
              raise ValueError ( "The file cannot be reopened." )
 for basedir in basedirs :
  else :
              if os . fork ( ) > 0 :
              if callable ( name ) :
                  raise
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
          BaseCache . __init__ ( self , * args , ** kwargs )
  if self . localize :
  return name , ser_fmt , cmp_fmt
   def add_fields ( self , form , index ) :
                model = self . obj
 if django . VERSION [ - 2 ] != 'final' :
                  raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
 from django . utils import six
 for app_config in app_configs :
              raise base . DeserializationError (  "<%s> node is missing the required '%s' attribute"  % ( node . nodeName , attr ) )
          if instance is None :
 indexbytes = operator . getitem
   def get ( self , key , otherwise = None ) :
  return ''
 from django . core . management . sql import sql_custom
       def __init__ ( self , object_list , per_page , orphans = 0 ,  allow_empty_first_page = True ) :
 return datetime . datetime ( ** kw )
   def _send ( self , email_message ) :
          tt = ( dt . year , dt . month , dt . day ,  dt . hour , dt . minute , dt . second ,  dt . weekday ( ) , 0 , 0 )
 self . waiting_writers -= 1
  mail . send ( fail_silently = fail_silently )
  except OSError :
 return result
    for node in compiled_parent . nodelist :
   def decr ( self , key , delta = 1 , version = None ) :
          if hasattr ( _urlconfs , "value" ) :
 try :
          if data :
 try :
                  call_command ( 'loaddata' , 'initial_data' , verbosity = self . verbosity , database = connection . alias , skip_validation = True , app_label = app_label , hide_empty = True )
              content = f . read ( )
 def make_list ( value ) :
          cursor = None
 html [ 'year' ] = self . create_select ( name , self . year_field , value , year_val , choices , self . year_none_value )
    extension_map = {  '.tar' : TarArchive ,  '.tar.bz2' : TarArchive ,  '.tar.gz' : TarArchive ,  '.tgz' : TarArchive ,  '.tz2' : TarArchive ,  '.zip' : ZipArchive ,  }
                      temp_lib . filters [ name ] = lib . filters [ name ]
 self . can_read . release ( )
              match = kwarg_re . match ( bit )
 dictreprs = ', ' . join ( repr ( d ) for d in self . dicts )
  def __ne__ ( self , other ) :
 handler . endElement ( "item" )
from __future__ import unicode_literals
  else :
 parser . add_argument ( '--no-startup' , action = 'store_true' , dest = 'no_startup' ,  help = 'When using plain Python, ignore the PYTHONSTARTUP environment variable and ~/.pythonrc.py script.' )
  for part in singular :
 file . seek ( 0 )
              wm . add_watch ( path , mask )
 import time
                          self . stdout . write ( self . style . SQL_KEYWORD ( connection . ops . start_transaction_sql ( ) ) )
    class WSGIHandler ( base . BaseHandler ) :
   if not self . dry_run :
     class FilePathField ( ChoiceField ) :
  return super ( SortedDict , self ) . setdefault ( key , default )
          super ( Command , self ) . add_arguments ( parser )
    else :
               initial_forms = len ( self . initial ) if self . initial else 0
     class Input ( Widget ) :
 for option_value , option_label in chain ( self . choices , choices ) :
          return value
   def handle_field ( self , obj , field ) :
    elif finder . find_module ( name ) :
                cached_loaders = [ ]
       response_fixes = [  http . fix_location_header ,  http . conditional_content_removal ,  ]
    if html :
 value = self . queryset . get ( ** { key : value } )
 if sub_tried is not None :
      class BlockNode ( Node ) :
              return self . show_migration_list ( connection , [ options [ 'app_label' ] ] if options [ 'app_label' ] else None )
   return path_info . decode ( UTF_8 )
  if options . get ( 'no_location' ) :
 from django . forms . fields import *
              self . __offset = timedelta ( minutes = offset )
  first_item , second_item = list_
              pass
   def F ( self ) :
 return nodelist_true_output or self . nodelist_true . render ( context )
  def __init__ ( self , file , name = None ) :
              fixture_dirs = [ os . path . dirname ( fixture_name ) ]
 self . _response_middleware = [ ]
          return int ( value ) + int ( arg )
   def validate_key ( self , key ) :
 for code in ( lang_code , generic_lang_code ) :
   def close ( self ) :
              p = i
  self . _post_render_callbacks = [ ]
   raise ImportError
 return AutoEscapeControlNode ( ( arg == 'on' ) , nodelist )
   ustring_re = re . compile ( "([\u0080-\uffff])" )
        def __getstate__ ( self ) :
          self . _archive = self . _archive_cls ( file ) ( file )
          block_context = context . render_context . get ( BLOCK_CONTEXT_KEY )
 from django . utils . timezone import is_aware
           return force_str ( super ( BaseMemcachedCache , self ) . make_key ( key , version ) )
              return
 parser . add_argument ( '-i' , '--interface' , choices = self . shells , dest = 'interface' ,  help = 'Specify an interactive interpreter interface. Available options: "ipython" and "bpython"' )
 M . set ( key , real_value , coded_value )
                  raise ValueError (  "fk_name '%s' is not a ForeignKey to '%s.%'."  % ( fk_name , parent_model . _meta . app_label , parent_model . _meta . object_name ) )
import copy
          self . widgets = [ w ( ) if isinstance ( w , type ) else w for w in widgets ]
 return form . save ( commit = commit )
    def parse_starttag ( self , i ) :
  if prefix is None :
      input_type = 'number'
  else :
              title = list_ [ i ]
  else :
              cursor . execute ( 'DELETE FROM %s' % table )
 if schemes is not None :
     class IntegerField ( Field ) :
              template_dirs = settings . TEMPLATE_DIRS
 def __init__ ( self ) :
      pass
 if use_l10n or ( use_l10n is None and settings . USE_L10N ) :
 self . current_app = current_app
    @ lru_cache . lru_cache ( maxsize = 1000 )
              return None
  def __init__ ( self , var ) :
              fd , name = tempfile . mkstemp ( suffix = suffix , prefix = prefix , dir = dir )
 from django . utils . translation import ugettext_lazy as _ , ugettext
  else :
                              terminal_char = ')'
  else :
   self . end_serialization ( )
               def dec ( func ) :
 from django . core . files . move import file_move_safe
   def unlock ( f ) :
  import warnings
                  output = fp . read ( )
 _cached_filenames += new_filenames
                  with open ( filepath , 'rb' ) as fp :
  return render_value_in_context ( output , context )
              f . error_messages . setdefault ( 'incomplete' ,  self . error_messages [ 'incomplete' ] )
              try :
  if isinstance ( message , SafeData ) :
              new_class . media = media_property ( new_class )
  if help_texts is not None :
 from django . utils . encoding import force_text
  if self . verbosity > 0 :
                  if pattern . namespace :
 for punctuation in TRAILING_PUNCTUATION :
 if value in self . empty_values :
          j = text . find ( substr , i )
          raise ValueError (  "You can only use `unpack_ipv4` if `protocol` is set to 'both'" )
  return value . replace ( tzinfo = None )
 self . number = number
 final_path = abspathu ( join ( base , * paths ) )
 if self . verbosity > 1 :
  if len ( initial ) != len ( data ) :
                  elt = [ elt ]
   else :
  import copy
   concrete_model = obj . _meta . concrete_model
              HTMLParser . __init__ ( self , strict = False )
 read = property ( lambda self : self . file . read )
  lang_code = regex_match . group ( 1 )
              return field in self . errors
 field_output . append ( "%sNULL" % ( "NOT " if not f . null else "" ) )
 return value . upper ( )
                  with io . open ( fname , 'rb' ) as f :
                  widget . is_localized = self . is_localized
                  values = [ ]
 if key_prefix is None :
                      rawdata = force_str ( rawdata )
 options += [ ( k , 1 ) for k in FASTCGI_OPTIONS ]
  def __init__ ( self , stream_or_string , ** options ) :
   if fset is not None :
     class URLField ( CharField ) :
    def smart_text ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) :
 return changeset
   def handle ( self , * tablenames , ** options ) :
          super ( PasswordInput , self ) . __init__ ( attrs )
   def __delitem__ ( self , key ) :
              self . setlistdefault ( key ) . append ( value )
      if vary_on is None :
   from django . http . response import REASON_PHRASES as STATUS_CODE_TEXT
  elif args [ 1 ] [ 0 ] == '3' :
              guessed_path = path . join ( tempdir , guessed_filename )
  f = s [ : end ]
 quit_command = 'CTRL-BREAK' if sys . platform == 'win32' else 'CONTROL-C'
 link [ PREV ] = last
 for name in MEDIA_TYPES :
                  new_obj = func ( obj , * arg_vals )
 return _generate_cache_key ( request , request . method , headerlist , key_prefix )
                      self . set_cdata_mode ( tag )
 return not module_has_submodule ( package , module )
   def save ( self , name , content ) :
 save_m2m ( )
   def _set_size ( self , size ) :
 self . _start_relational_field ( field )
                  self . check ( )
              models . add ( model )
 t = getattr ( _active , "value" , None )
      class AdminEmailHandler ( logging . Handler ) :
 FILES = property ( _get_files )
              return formats . localize_input ( value )
          pass
                      if hasattr ( middleware , 'process_template_response' ) :
 pass
    return self . getlist ( key )
   def __text_cast ( self ) :
              data = [ ]
 for x in argset :
  self . _size = self . _get_size_from_underlying_file ( )
      needs_multipart_form = False
 if self . localize :
 from django . template . base import TemplateSyntaxError , Library , Node , TextNode , token_kwargs , Variable
 self . _base_set ( 'set' , key , value , timeout )
   def __str__ ( self ) :
 return phone2numeric ( value )
    return sorted ( all_files )
  elif pluralmatch :
    @ register . filter ( is_safe = True )
 return False
        def template_localtime ( value , use_tz = None ) :
   def get_dump_object ( self , obj ) :
  elif bytes < TB :
  elif autoescape :
  __all__ = [ 'SelectDateWidget' ]
 import re
  else :
     class NoArgsCommand ( BaseCommand ) :
                   break
 pos = last = 0
          return ''
                      return
 try :
                      out . write ( '# %s' % ' | ' . join ( lineno_comment_map [ comment_lineno_cache ] ) )
      def __init__ ( self , name , nodelist , parent = None ) :
 if not supports_color ( ) :
          return s
              raise ContextPopException
 if self . _pk_field == self . fk :
 def __new__ ( cls , name , this_bases , d ) :
              d = Decimal ( force_text ( float ( text ) ) )
  del attr
  return super ( PasswordInput , self ) . render ( name , value , attrs )
          if parse_until :
          if value != self . empty_value :
 os . rmdir ( tmpdir )
   def __next__ ( self ) :
  field_desc += ')'
 def ifchanged ( parser , token ) :
              raise DjangoUnicodeDecodeError ( s , * e . args )
  return super ( ModelMultipleChoiceField , self ) . prepare_value ( value )
                          temp_lib . filters [ name ] = lib . filters [ name ]
 for lib in builtins :
    def __iter__ ( self ) :
 self . _leftover = b''
 @ stringfilter
 return retval
                      visible_issue_count += len ( issues )
 try :
   def cache_key ( self , template_name , template_dirs ) :
          return locale [ : p ] . lower ( ) + '-' + locale [ p + 1 : ] . lower ( )
 from django . utils import six
 import sys
   from django . template . base import ( ContextPopException , InvalidTemplateLibrary ,  TemplateDoesNotExist , TemplateEncodingError , TemplateSyntaxError ,  VariableDoesNotExist )
 capfirst = allow_lazy ( capfirst , six . text_type )
    def _initialize_handlers ( self ) :
               return context . render_context
          indent = '\t' * tabs
  self . path = ''
  from __future__ import unicode_literals
  from __future__ import unicode_literals
               try :
 return self . _base_set ( 'add' , key , value , timeout )
   def handle_app_config ( self , app_config , ** options ) :
    return created_models
     def partition ( predicate , values ) :
                  with transaction . atomic ( using = database ,  savepoint = connection . features . can_rollback_ddl ) :
   if field . rel and isinstance ( field . rel , models . ManyToManyRel ) :
   def utcoffset ( self , dt ) :
  if message is not None :
    def reverse ( viewname , urlconf = None , args = None , kwargs = None , prefix = None , current_app = None ) :
     def _check_boolean_field_default_value ( app_configs = None , ** kwargs ) :
 hidden_widget = field . hidden_widget ( )
   form_class_attrs = {  'Meta' : Meta ,  'formfield_callback' : formfield_callback  }
    @ register . filter ( is_safe = True )
  else :
  from_email = sanitize_address ( email_message . from_email , email_message . encoding )
   def __repr__ ( self ) :
    else :
 from django . db . migrations . autodetector import MigrationAutodetector
                 MIMEText . __init__ ( self , text , subtype , None )
                      try :
   class LimitedStream ( object ) :
 for site in sites1 :
 if len ( words ) > length :
      if isinstance ( number , int ) :
 if self . verbosity >= 1 and sql :
 from __future__ import unicode_literals
 result = self . configurator . convert ( value )
          try :
   if opts . fields == ALL_FIELDS :
                          break
              warnings . warn (  "`%s.%s` is deprecated, use `%s` instead." %  ( self . class_name , self . old_method_name , self . new_method_name ) ,  self . deprecation_warning , 2 )
                      new_file . write ( content )
    extensions = tuple (  handle_extensions ( options [ 'extensions' ] , ignored = ( ) ) )
  raise CommandError ( msg )
              self . input_formats = input_formats
          def __init__ ( self , data = None , files = None , auto_id = 'id_%s' , prefix = None ,  initial = None , error_class = ErrorList , label_suffix = None ,  empty_permitted = False ) :
              self . characters ( contents )
  else :
 try :
    @ register . tag
          from django . conf import settings
    def all_locale_paths ( ) :
     class NowNode ( Node ) :
 ch , escaped = next ( pattern_iter )
 if hasattr ( signal , 'SIGTTOU' ) :
    finally :
              return '1'
              return loader . get_template ( template )
  final_attrs = self . build_attrs ( attrs )
 from django . utils . six . moves . urllib . request import urlretrieve
      widget = TextInput
  if hasattr ( mw_instance , 'process_template_response' ) :
               if var . startswith ( '_(' ) and var . endswith ( ')' ) :
          self . changed_objects = [ ]
from __future__ import absolute_import
  del X
          safe_data = { }
      server_address = ( addr , port )
 if level :
   def write_message ( self , message ) :
  if inverse_match is not None :
     if self . asvar :
              self . __starttag_text = None
   @ register ( Tags . models )
              return plural_suffix
  if os . path . isdir ( 'locale' ) :
   def url ( self , name ) :
  else :
    def __reduce__ ( self ) :
  except Exception :
   def __dir__ ( self ) :
   else :
 if self . is_bound :
 zfile = GzipFile ( mode = 'wb' , compresslevel = 6 , fileobj = buf )
   return endpos
   def root_attributes ( self ) :
              data [ f . name ] = f . value_from_object ( instance )
 import sys
                  form = self . forms [ i ]
  self . _regex_validator = validators . RegexValidator ( regex = regex )
                      self . xml . addQuickElement ( "object" , attrs = {  'pk' : smart_text ( value . _get_pk_val ( ) )  } )
          super ( RadioChoiceInput , self ) . __init__ ( * args , ** kwargs )
 for func in self . response_fixes :
 import sys
  else :
 self . find_template_cache . clear ( )
                          raise ValueError ( 'Unable to configure root '  'logger: %s' % e )
  def __init__ ( self , limit_value ) :
 obj . _constructor_args = ( args , kwargs )
    raise TemplateDoesNotExist ( ', ' . join ( not_found ) )
 def _wrapped_view ( request , * args , ** kwargs ) :
              raise CommandError ( "More than one migration matches '%s' in app '%s'. Please be more specific." % (  migration_name , app_label ) )
 raise NotImplementedError ( 'subclasses of Storage must provide an exists() method' )
          if self . options . get ( "indent" ) :
 StringIO = BytesIO = StringIO . StringIO
                 s = s . decode ( encoding , errors )
              file . close ( )
          self . limit_value = limit_value
              orig = getattr ( self . parent_instance , self . to_field )
      setattr ( Module_six_moves_urllib_robotparser , attr . name , attr )
from django . conf import settings
          for key in self . keyOrder :
          return datetime . datetime . strptime ( force_str ( value ) , format ) . date ( )
 from django . forms . fields import IntegerField , BooleanField
          if close :
                          pass
 b64encoded = base64 . b64encode ( pickled )
          if initial is None :
          mod = import_module ( taglib_module )
   si = open ( '/dev/null' , 'r' )
 try :
  if cache_timeout < 0 :
    assert token . contents == 'endif'
   def get_many ( self , keys , version = None ) :
                  form . fields [ ORDERING_FIELD_NAME ] = IntegerField ( label = _ ( 'Order' ) , required = False )
  if self . instance . pk is not None :
    obj = base . build_instance ( Model , data , db )
    def clear ( self ) :
  status_code = 200
              return ugettext ( "Please correct the duplicate data for %(field)s." ) % {  "field" : unique_check [ 0 ] ,  }
 while ( i < num_existing ) and ( existing [ i ] [ : pflen ] == prefixed ) :
  def __init__ ( self , attrs = None , render_value = False ) :
          raise CommandError ( "App '%s' has migrations. Only the sqlmigrate and sqlflush commands can be used when an app has migrations." % app_config . label )
              params = conf . copy ( )
   result = new_result
  plen = len ( provided ) + 1
 from django . db import connections , DEFAULT_DB_ALIAS , migrations
      def __init__ ( self , context , * args , ** kwargs ) :
     templatetags_modules_candidates = [ 'django.templatetags' ]
 t = super ( SafeBytes , self ) . __add__ ( rhs )
 while not bit . endswith ( sentinal ) :
 from io import BytesIO
              if hasattr ( base , 'base_fields' ) :
              import code
 self . add_item_elements ( handler , item )
  except NotImplementedError :
    class ViewDoesNotExist ( Exception ) :
  else :
          key = self . make_key ( key , version = version )
              hextets += [ '' ]
  nodelist = parser . parse ( ( 'endautoescape' , ) )
 full_path = self . path ( name )
   else :
          provided = list ( provided )
          sample = f . read ( 4 )
from __future__ import unicode_literals
 if csrf_token is not None :
 def errors ( self ) :
 self . xgettext_options = self . xgettext_options [ : ] + [ '--no-location' ]
                  for i_item , i_args in zip ( inner_result , inner_args ) :
 PREV , NEXT , KEY , RESULT = 0 , 1 , 2 , 3
   @ property
    fields . update ( new_class . declared_fields )
   def unlock ( f ) :
  requires_system_checks = False
          cls = None
    return [ self . forms [ i [ 0 ] ] for i in self . _ordering ]
     def __repr__ ( self ) :
 hour , minute = divmod ( timezone , 60 )
                  warnings . warn (  'Reversing by dotted path is deprecated (%s).' % original_lookup ,  RemovedInDjango20Warning , stacklevel = 3  )
 return out
   def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
                  del self . _cache [ key ]
                      raise
     def close ( self ) :
 if server_port != ( '443' if self . is_secure ( ) else '80' ) :
             cache_key += '.%s' % getattr ( request , 'LANGUAGE_CODE' , get_language ( ) )
 if timeout == DEFAULT_TIMEOUT :
          raise SerializerDoesNotExist ( format )
    return type ( form ) ( class_name , ( form , ) , form_class_attrs )
              self . _start_relational_field ( field )
   try :
 self . prefix = prefix
                  return d [ key ]
   else :
 return attrs
   self . extra_context = extra_context or { }
 self . kwargs = kwargs
 from django . conf import settings
 if isinstance ( context , Context ) :
     @ register . filter ( is_safe = True )
 def length_is ( value , arg ) :
 message = ungettext_lazy (  'Ensure this value has at most %(limit_value)d character (it has %(show_value)d).' ,  'Ensure this value has at most %(limit_value)d characters (it has %(show_value)d).' ,  'limit_value' )
   def handle ( self , ** options ) :
     def _get_model ( model_identifier ) :
  else :
 if '()' in config :
 dfmt = config . get ( 'datefmt' , None )
              msg [ 'Message-ID' ] = make_msgid ( )
          return escape ( text )
   def add_error ( self , field , error ) :
              ret = fcntl . flock ( _fd ( f ) , flags )
  new_class = super ( ModelFormMetaclass , mcs ) . __new__ ( mcs , name , bases , attrs )
 return True
   def _create_message ( self , msg ) :
 s = s . replace ( '\t' , '\\t' )
   def close ( self ) :
              self . remove ( item )
          return s . get_data ( )
                  stream . unget ( chunk [ - rollback : ] )
          self . _post = post
              data = file . read ( chunk_size )
              handler . addQuickElement ( 'published' , rfc3339_date ( item [ 'pubdate' ] ) )
              continue
  except StandardError as e :
    def get_key_func ( key_func ) :
                  attrs = dict ( attrs or { } , ** { 'for' : id_for_label } )
              self . stream = stream_or_string
  get_valid_filename = allow_lazy ( get_valid_filename , six . text_type )
   def value ( self ) :
   def templatize ( src , origin = None ) :
  if hasattr ( response , 'render' ) and callable ( response . render ) :
   class Choice ( list ) :
          return "<%s: %r>" % ( self . __class__ . __name__ , self . var )
 bf = self [ name ]
    class SerializationError ( Exception ) :
  del attr
    except Exception as e :
              self . validators . append ( validators . MinLengthValidator ( int ( min_length ) ) )
 class_types = ( type , types . ClassType )
  except StopIteration :
           if settings . SECURE_PROXY_SSL_HEADER :
     def a ( self ) :
                  yield line
          app_name , target = options . pop ( 'name' ) , options . pop ( 'directory' )
          nodelist_false = NodeList ( )
 nan = ( 1e200 * 1e200 ) // ( 1e200 * 1e200 )
   is_compressed = False
          return get_supported_language_variant ( lang_code )
   def compile_filter_error ( self , token , e ) :
          return force_str ( "<%s: %s (%s)>" % (  self . __class__ . __name__ , self . name , self . content_type ) )
                          current_expires = result [ 1 ]
   def csrf ( request ) :
          if key not in self :
              filenames . append ( filename )
 import zipfile
                   raise ImportError
              if ( db . settings_dict [ 'ATOMIC_REQUESTS' ]  and db . alias not in non_atomic_requests ) :
 if six . PY2 and not isinstance ( path , six . text_type ) :
 self . args_check ( filter_name , filter_func , args )
   def handle ( self , * args , ** options ) :
  dow = days [ date . weekday ( ) ]
 self . resolver_match = None
                  guessed_filename += ext
                  result . parent = self
  return format_html ( '<input{0} />' , flatatt ( final_attrs ) )
 if converter :
                      return self . strptime ( value , format )
                  if tag . lower ( ) != self . cdata_tag :
  except ( ValueError , TypeError ) :
 if settings . SETTINGS_MODULE :
                  if self . asvar is None :
      while True :
 extra_params . update ( params )
                  raise TemplateSyntaxError ( "Malformed arguments to url tag" )
          pass
 def content ( self ) :
   def create_var ( self , value ) :
 params = { 'datetime' : value , 'current_timezone' : current_timezone }
           six . reraise ( DeserializationError , DeserializationError ( e ) , sys . exc_info ( ) [ 2 ] )
          parent = ( form . Meta , object )
          return datetime . fromtimestamp ( os . path . getmtime ( self . path ( name ) ) )
                                    over_bytes = len ( chunk ) % 4
  except ( KeyError , TypeError ) :
 return '' . join ( rendered_widgets )
  for field in unique_check :
 if cached is not None :
  if os . name == 'posix' :
  self . environ = environ
  if code is not None :
   def next_page_number ( self ) :
   def eval ( self , context ) :
 field_notes . append ( 'This field type is a guess.' )
     def _delete ( self , key ) :
           return s
 for dirpath , dirnames , filenames in os . walk ( root , topdown = True , followlinks = self . symlinks ) :
  if max_num is None :
                      for cmatch in cmatches :
  from argparse import ArgumentParser
                  self . __prepare_class__ ( )
                      block_context . push ( self . name , push )
          if value in self . empty_values :
                          cursor . execute ( "UPDATE %s SET value = %%s, expires = %%s "  "WHERE cache_key = %%s" % table ,  [ b64encoded , exp , key ] )
 if tags is not None :
          locale = options . get ( 'locale' )
 if widgets and f . name in widgets :
              buf = self . readline ( )
   try :
                  cls . __dispatch [ klass ] = { }
          kwargs [ 'max_age' ] = min ( int ( cc [ 'max-age' ] ) , kwargs [ 'max_age' ] )
   def end_object ( self , obj ) :
 for tok in rules :
    if item [ "author_name" ] and item [ "author_email" ] :
 raise CommandError ( 'There is no system check with the "%s" tag.' % invalid_tag )
 formatted = (  color_style ( ) . ERROR ( force_str ( e ) )  if e . is_serious ( )  else color_style ( ) . WARNING ( force_str ( e ) )  for e in issues )
 return other_dict
 parser . add_argument ( '--list-tags' , action = 'store_true' , dest = 'list_tags' ,  help = 'List available tags.' )
 if not old_style_list :
    def static ( request ) :
                      try :
   else :
          for name , field in self . fields . items ( ) :
                  msg += " You may need to add %r to ALLOWED_HOSTS." % domain
          raise DTDForbidden ( name , sysid , pubid )
 table = connections [ db ] . ops . quote_name ( self . _table )
 if not self . form . is_bound :
 def __init__ ( self ) :
              return
                          stats [ HITS ] += 1
  hidden_fields . append ( six . text_type ( bf ) )
                           context_match = context_re . match ( imatch . group ( 2 ) )
    try :
 self . current_token = self . next_token ( )
     def _get_foreign_key ( parent_model , model , fk_name = None , can_fail = False ) :
 from django . utils . encoding import force_text , iri_to_uri
              factor -= 1
 for app_label , app_migrations in changes . items ( ) :
  else :
 force_str = force_text
              migration = executor . loader . get_migration_by_prefix ( app_label , migration_name )
 def trim_url ( x , limit = trim_url_limit ) :
    return saved_instances
   if '.' in str_number :
 TB = 1 << 40
  with open ( filename , 'wb' ) as outfile :
    class CheckboxInput ( Widget ) :
 values = _itervalues
    return quote ( force_bytes ( path ) . replace ( b"\\" , b"/" ) , safe = b"/~!*()'" )
      import threading
 if token_string . find ( TRANSLATOR_COMMENT_MARK ) :
   class Command ( BaseCommand ) :
 if not check_for_language ( lang ) :
  else :
   try :
 from django . utils . module_loading import import_string
                      raise TemplateSyntaxError (  "'%s' tag takes at least 2 arguments and the "  "second last argument must be 'as'" % function_name )
  else :
              self . inverse_match = inverse_match
 return result
          key = self . make_key ( key , version = version )
  except ValueError :
   def __getitem__ ( self , idx ) :
          if value is None :
  for name , field in self . fields . items ( ) :
 return AssignmentNode ( takes_context , args , kwargs , target_var )
                          return True
          return False
  return self . _fname
              if csrf_token == 'NOTPROVIDED' :
                          continue
 using = options . get ( 'database' )
  else :
 return
          return True
   return lib
  def add_arguments ( self , parser ) :
  now = datetime . now ( ) . strftime ( '%B %d, %Y - %X' )
              yield self [ name ]
              raise ImproperlyConfigured ( 'Could not write to directory: %s' % self . file_path )
 if isinstance ( template , ( list , tuple ) ) :
  try :
          return s
  self . _stream = LimitedStream ( self . environ [ 'wsgi.input' ] , content_length )
                           context_match = context_re . match ( bmatch . group ( 1 ) )
 import sys
   def smart_urlquote ( url ) :
     def resolve ( self , context ) :
 dirs = [ upath ( os . path . abspath ( os . path . realpath ( d ) ) ) for d in dirs ]
          return self . scheme == 'https'
          get = '<could not parse>'
                      continue
 key = args
              escaped = True
 from django . forms . utils import ErrorList
                  msgs = fp . read ( )
    _supported = None
    internal_use_only = False
 if qs . _result_cache is not None :
      pass
 urlresolvers . set_urlconf ( urlconf )
 ratio = ( value / max_value ) * max_width
              logger . warning ( 'Bad Request (UnicodeDecodeError)' ,  exc_info = sys . exc_info ( ) ,  extra = {  'status_code' : 400 ,  }  )
  else :
   def render ( self , context ) :
      pass
 for pk in value :
 parser . add_argument ( '--settings' )
   def process ( self , command , domain ) :
  return self . connection
 num_args += 1
  else :
     def compile_messages ( self , locations ) :
                      plural . append ( '%%(%s)s' % t . contents )
          return force_str ( "<Text Node: '%s'>" % self . s [ : 25 ] , 'ascii' ,  errors = 'replace' )
 if not func_name :
 self . keyOrder . remove ( key )
          items = _iteritems
 pop = complain
 PY3 = sys . version_info [ 0 ] == 3
      def __init__ ( self , variables ) :
     def _render ( self , context ) :
  if failures :
 from yaml import CSafeDumper as SafeDumper
     def make_origin ( display_name , loader , name , dirs ) :
    @ register . filter ( is_safe = False )
              self [ key ] = result
 yield ( tok . name , toktext )
   def _mark_post_parse_error ( self ) :
   else :
              return s . decode ( 'utf-8' , errors ) . encode ( encoding , errors )
   def handle_app_config ( self , app_config , ** options ) :
  else :
 WARNING = 30
          length = int ( arg )
          self . nodelist = nodelist
                   break
  return self . _reverse_dict [ language_code ]
   else :
  else :
          if value . __traceback__ is not tb :
 if sys . platform == "win32" :
     if PY3 :
 _active = local ( )
 raise NotImplementedError ( 'subclasses of FileUploadHandler must provide a receive_data_chunk() method' )
 statements = sql_destroy_indexes ( app_config , self . style , connection )
  return '' . join ( c )
     for date_check in all_date_checks :
 if endbmatch :
 self . models = set ( )
              logger . propagate = propagate
  elif options [ "socket" ] and not options [ "host" ] and not options [ "port" ] :
          for d in self . dicts :
  except Exception :
 self . keyOrder = list ( data ) if data else [ ]
                  c = int ( text [ 1 : ] , 16 )
              name = p [ : i ] . strip ( ) . lower ( ) . decode ( 'ascii' )
 if self . alternatives :
   def _iteritems ( self ) :
  filter_raw_string = r""" ^(?P<constant>%(constant)s)| ^(?P<var>[%(var_chars)s]+|%(num)s)|  (?:\s*%(filter_sep)s\s*      (?P<filter_name>\w+)          (?:%(arg_sep)s              (?:               (?P<constant_arg>%(constant)s)|               (?P<var_arg>[%(var_chars)s]+|%(num)s)              )          )?  )""" % {  'constant' : constant_string ,  'num' : r'[-+\.]?\d[\d\.e]*' ,  'var_chars' : "\w\." ,  'filter_sep' : re . escape ( FILTER_SEPARATOR ) ,  'arg_sep' : re . escape ( FILTER_ARGUMENT_SEPARATOR ) ,  }
  if app_config . models_module is None or app_config in excluded_apps :
              archive . extract ( filename , tempdir )
              if isinstance ( self . _regex , six . string_types ) :
 get_language_bidi = lambda : settings . LANGUAGE_CODE in settings . LANGUAGES_BIDI
   return base . DeserializedObject ( obj , m2m_data )
  if code is not None :
          with self . mutex :
  comment_lineno_cache = None
          return self . __name
 def from_dict ( cls , file_dict ) :
                              raise VariableDoesNotExist ( "Failed lookup for key "  "[%s] in %r" ,  ( bit , current ) )
   def handle_m2m_field ( self , obj , field ) :
  except ValueError :
    def i18n ( request ) :
 message = _ ( 'Ensure this value is less than or equal to %(limit_value)s.' )
   def _construct_form ( self , i , ** kwargs ) :
   return list ( zip ( * flatten_result ( result ) ) )
   class MultiPartParserError ( Exception ) :
    def as_table ( self ) :
  warnings . warn (  "get_declared_fields is deprecated and will be removed in Django 1.9." ,  RemovedInDjango19Warning ,  stacklevel = 2 ,  )
                      self . stdout . write ( errors )
                      raise ValueError ( 'Unable to convert '  '%r at %r' % ( value , rest ) )
  elif args [ 1 ] == '404' :
              return
  else :
                  message , code , params = message . message , message . code , message . params
 interactive = options . get ( 'interactive' )
 msg_count += 1
              val = self . get ( k , version = version )
  return '\n\n' . join ( paras )
 lists = _iterlists
            raise CommandError ( "Django doesn't know which syntax to use for your SQL statements,\n" +  "because you haven't properly specified the ENGINE setting for the database.\n" +  "see: https://docs.djangoproject.com/en/dev/ref/settings/#databases" )
              year_val = month_val = day_val = None
   def resolve ( self , s ) :
 day_of_year = self . z ( )
from __future__ import unicode_literals
  else :
    def assertRaisesRegex ( self , * args , ** kwargs ) :
  from django . conf import settings
                      cursor . execute ( "SELECT cache_key, expires FROM %s "  "WHERE cache_key = %%s" % table , [ key ] )
  except ImproperlyConfigured as exc :
          command , source = self . command_stack . pop ( )
 return func ( * resolved_args , ** resolved_kwargs )
              if self . to_field :
 from django . core import serializers
   return name
 line = ''
                  return expanded_template
          _ExpatParser . __init__ ( self , * args , ** kwargs )
              cursor . execute ( "SELECT COUNT(*) FROM %s" % table )
                  result |= ord ( x ) ^ ord ( y )
  seqs = connection . introspection . sequence_list ( ) if reset_sequences else ( )
  sites = [ ]
      help = "Prints the CREATE TABLE SQL statements for the given app name(s)."
  bits = token . contents . split ( )
 from django . db import models , router
  int_part = int_part_gd [ : : - 1 ]
 return { }
 from django . utils . jslex import prepare_js_for_gettext
                                  chunk_length = len ( chunk )
 if self . use_ipv6 and not socket . has_ipv6 :
 FILE = "file"
    @ register . tag
                      attrvalue = None
                name = self . fk . name
               return dec ( func )
                  return type . __new__ ( cls , name , ( ) , d )
 with lock :
                      rest = rest [ m . end ( ) : ]
   def __nonzero__ ( self ) :
              self . flags = flags
 dirs = [ ]
  from django . utils import six
              return path . split ( '\\' , 1 )
              try :
          if size is None :
          return LANG_INFO [ lang_code ]
 super ( QueryDict , self ) . __delitem__ ( key )
 from django . core . management . base import CommandError , BaseCommand
   def external_entity_ref_handler ( self , context , base , sysid , pubid ) :
                  raise
          return value
                timeout = - 1
 end_index = None
                      offset = offset + len ( self . __starttag_text )
  else :
   class Command ( BaseCommand ) :
              value = formats . sanitize_separators ( value )
                    return
  return result
          path_info = get_bytes_from_wsgi ( environ , 'PATH_INFO' , '' )
                  pass
 return super ( BaseInlineFormSet , self ) . get_unique_error_message ( unique_check )
               if not isinstance ( node , TextNode ) :
   parts . append ( value )
      help = 'Deprecated. Use "check" command instead. ' + CheckCommand . help
  except ( KeyError , IndexError , AttributeError ) :
           daemonize = ( wsgi_opts [ 'bindAddress' ] is not None )
  elif var_arg :
  except AttributeError :
 return len ( self . children )
   def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
 import errno
  return self . __cast ( ) % rhs
 from io import BytesIO
  setattr ( self . _wrapped , name , value )
 @ stringfilter
          super ( BaseInlineFormSet , self ) . add_fields ( form , index )
                      words [ i ] = escape ( word )
              result = self . buffer + self . _read_limited ( )
 parts . append ( decimals )
   def add_post_render_callback ( self , callback ) :
              if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
 if app_label not in executor . loader . migrated_apps :
 self . pos = 0
 from django . core import checks
          token_name = TOKEN_MAPPING [ self . token_type ]
 re_escaped = re . compile ( r'\\(.)' )
              found = self . importer ( used )
   if in_tag and not self . verbatim :
              self . start_object ( obj )
 if result is not None :
   def __getitem__ ( self , alias ) :
 if self . compare ( cleaned , self . limit_value ) :
              return 'th'
   def forbid_multi_line_headers ( name , val , encoding ) :
  from django . utils . html import avoid_wrapping
          try :
    def time_format ( value , format_string ) :
    def __len__ ( self ) :
  return path
 import os
    def is_url ( self , template ) :
              self . validators . append ( validators . MaxValueValidator ( max_value ) )
 max_value = self . max_expr . resolve ( context )
              model_list = app_config . get_models ( )
              HTMLParser . __init__ ( self )
 pickled = None
     class ModelFormMetaclass ( DeclarativeFieldsMetaclass ) :
              weight += 2
     def configure_handler ( self , config ) :
  else :
    WSGIServer ( get_internal_wsgi_application ( ) , ** wsgi_opts ) . run ( )
 self . validate_key ( key )
      def __init__ ( self ) :
 none_value = ( 0 , '---' )
 reverse = complain
          try :
 _fields_ = [  ( 'Internal' , ULONG_PTR ) ,  ( 'InternalHigh' , ULONG_PTR ) ,  ( '_offset_union' , _OFFSET_UNION ) ,  ( 'hEvent' , HANDLE ) ]
   def _has_changed ( self , initial , data ) :
   def validate ( self , value ) :
 if keys :
              if self . pk_field :
 if isinstance ( s , ( SafeData , EscapeData ) ) :
                          deps . append ( rel_model )
  for template_dir in template_dirs :
 if self . cdata_tag is not None :
 for middleware_path in settings . MIDDLEWARE_CLASSES :
          return '<Page %s of %s>' % ( self . number , self . paginator . num_pages )
 length = int ( num )
          for node in self . nodelist :
 p = locale . find ( '_' )
   except ImportError :
                  raise ValidationError ( ungettext (  "Please submit %d or fewer forms." ,  "Please submit %d or fewer forms." , self . max_num ) % self . max_num ,  code = 'too_many_forms' ,  )
 norm_patterns = [ p [ : - len ( dir_suffix ) ] if p . endswith ( dir_suffix ) else p for p in self . ignore_patterns ]
 from django . utils . encoding import force_str , force_text
 if scheme not in self . schemes :
          if limit is None or len ( x ) <= limit :
 if not hasattr ( parser , '_namedCycleNodes' ) :
   return directories , files
 MONTHS = {  1 : _ ( 'January' ) , 2 : _ ( 'February' ) , 3 : _ ( 'March' ) , 4 : _ ( 'April' ) , 5 : _ ( 'May' ) , 6 : _ ( 'June' ) ,  7 : _ ( 'July' ) , 8 : _ ( 'August' ) , 9 : _ ( 'September' ) , 10 : _ ( 'October' ) , 11 : _ ( 'November' ) ,  12 : _ ( 'December' )  }
 d = data . get ( self . day_field % name )
  super ( RendererMixin , self ) . __init__ ( * args , ** kwargs )
 self . parent_name = parent_name
  for obj in objects :
          return s . encode ( "latin-1" )
          to_unicode = lambda s : force_text ( s , strings_only = True )
   def __getitem__ ( self , key ) :
 errors . extend ( new_errors )
  try :
          alter_sql = [ ]
                  key += tuple ( type ( v ) for k , v in sorted_items )
  except ValueError :
              content_type = "%s; charset=%s" % ( settings . DEFAULT_CONTENT_TYPE ,  self . _charset )
 try :
 if nodelist . get_nodes_by_type ( ExtendsNode ) :
     registry = CheckRegistry ( )
 fixture = open_method ( fixture_file , mode )
 self . _regex_dict [ language_code ] = regex_compiled
  return result
    class SignatureExpired ( BadSignature ) :
          if proto >= 2 :
  output = [ ]
    def to_current_timezone ( value ) :
 return binascii . unhexlify ( ( hex_format_string % x ) . encode ( 'ascii' ) )
         @ register . filter ( expects_localtime = True , is_safe = False )
  for part in plural :
                          raise CommandError ( "Unknown application: %s" % app_label )
 self . code = code
              object_data . update ( initial )
                      found = False
   if hasattr ( self . file , 'tell' ) and hasattr ( self . file , 'seek' ) :
 def __init__ ( self , setting , nodelist ) :
    def npgettext_lazy ( context , singular , plural , number = None ) :
      exec_ = getattr ( moves . builtins , "exec" )
 import warnings
  url = 'mailto:%s@%s' % ( local , domain )
 for i in range ( len ( result ) ) :
              str_hidden = '' . join ( hidden_fields )
 data = { }
      filepath = os . path . abspath ( filepath )
 for i , row in enumerate ( connection . introspection . get_table_description ( cursor , table_name ) ) :
  self . position += len ( output )
                   try :
              guid_attrs = { }
                  EventHandler . modified_code = FILE_MODIFIED
    def _isdst ( self , dt ) :
 def loaders ( self ) :
 if extra_attrs :
          count = since // seconds
          def dec ( func ) :
                      dirname = os . path . dirname ( filename )
   def send ( self , fail_silently = False ) :
              formfield = f . formfield ( ** kwargs )
  if flags is not None :
     if settings . is_overridden ( 'ADMINS' ) :
              self . stdout . write ( self . style . MIGRATE_HEADING ( "Running migrations:" ) )
              for name , value in props . items ( ) :
   def _has_changed ( self , initial , data ) :
 def __init__ ( self , callback ) :
 conditions_nodelists . append ( ( condition , nodelist ) )
          d = datetime . datetime ( d . year , d . month , d . day )
   else :
                         consume_next = False
  else :
          return self . _create_attachments ( self . _create_alternatives ( msg ) )
          if 'forloop' in context :
   @ property
   width = six . text_type ( len ( six . text_type ( len ( lines ) ) ) )
 return value . strftime ( format )
              reset_translations ( )
   @ property
              raise TypeError ( 'In order to allow non-dict objects to be '  'serialized set the safe parameter to False' )
 from functools import wraps
 if sign in self . digits :
                      break
                  output . extend ( connection . ops . prepare_sql_script ( fp . read ( ) , _allow_fallback = True ) )
               param , value = list ( six . iteritems ( kwarg ) ) [ 0 ]
 if age > max_age :
 StringIO = io . StringIO
                  continue
                  self . add_handlers ( logger , handlers )
  def _text_words ( self , length , truncate ) :
      msg_with_ctxt = "%s%s%s" % ( context , CONTEXT_SEPARATOR , message )
 return False
                      obj . delete ( )
     class BaseArchive ( object ) :
 with open ( writer . path , "wb" ) as fh :
   def has_key ( self , key , version = None ) :
 with self . _lock . writer ( ) :
  else :
                      callback = callback . func
  emit_post_migrate_signal ( set ( all_models ) , verbosity , interactive , database )
 if hasattr ( _active , "value" ) :
      pass
              response . content = b''
              handler . startElement ( 'item' , self . item_attributes ( item ) )
                  week_number = 1
 renamed = False
  import datetime
          for i , line in enumerate ( lines ) :
 from django . utils . safestring import mark_safe
 __M = r'(?P<mon>\w{3})'
 addr = '@' . join ( [ localpart , domain ] )
 child_nodelists = ( 'nodelist' , )
          _load_serializers ( )
 pass
              return func
 def verbatim ( parser , token ) :
   def get_exception_response ( self , request , resolver , status_code ) :
 k = m . end ( )
                          for matches , pat , defaults in pattern . reverse_dict . getlist ( name ) :
              result = handler . handle_raw_input ( self . _input_data ,  self . _meta ,  self . _content_length ,  self . _boundary ,  encoding )
   class Serializer ( PythonSerializer ) :
   def clear ( self ) :
              warnings . warn ( "cache_choices has been deprecated and will be "  "removed in Django 1.9." ,  RemovedInDjango19Warning , stacklevel = 2 )
  if cc :
 if options [ 'verbosity' ] > 0 :
 RFC1123_DATE = re . compile ( r'^\w{3}, %s %s %s %s GMT$' % ( __D , __M , __Y , __T ) )
              if not self . _has_expired ( key ) :
 autoescape = autoescape and not isinstance ( value , SafeData )
                      if t . token_type != TOKEN_COMMENT :
 use_natural_primary_keys = options . get ( 'use_natural_primary_keys' )
                      return ( 1 , 0 )
          current_timezone = timezone . get_current_timezone ( )
  else :
                    content = message_from_string ( content )
          wsgi_opts [ 'bindAddress' ] = ( options [ "host" ] , int ( options [ "port" ] ) )
     elif ch in "*?+{" :
  try :
          DJANGO_COLORS = os . environ . get ( 'DJANGO_COLORS' , '' )
 if not self . is_valid ( ) or not self . can_delete :
  for __ in xrange ( fill_to - sep ) :
 retval = self
 best_doublecolon_start = - 1
          return False
                  pass
 field_params [ 'max_digits' ] = row [ 4 ] if row [ 4 ] is not None else 10
              seen_data = set ( )
 converter = self . value_converters . get ( prefix , None )
              return bytes ( value )
  def clean ( self , value ) :
   if errors :
 if m is None :
  else :
   if hasattr ( middleware , 'process_view' ) :
 for pattern in self . url_patterns :
   def is_secure ( self ) :
                      try :
         @ python_2_unicode_compatible
     def _strip_once ( value ) :
                        if isinstance ( receiver , types . FunctionType ) :
     class Command ( BaseCommand ) :
              self . set ( key , value , timeout = timeout , version = version )
   def id_for_label ( self , id_ ) :
                  usage . append ( style . NOTICE (  "Note that only Django core commands are listed "  "as settings are not properly configured (error: %s)."  % self . settings_exception ) )
 for app_label in app_labels :
                  orig_vars . pop ( slots_var )
  elif issubclass ( klass , logging . handlers . SysLogHandler ) and 'address' in config :
  loader = MigrationLoader ( connection )
     class RequireDebugFalse ( logging . Filter ) :
          if self . feed [ 'language' ] is not None :
 if self . fk . rel . field_name != self . fk . rel . to . _meta . pk . name :
  break
      def represent_decimal ( self , data ) :
               if not re . search ( r'^[_a-zA-Z]' , name ) :
 return '{%s}' % ', ' . join ( '%r: %r' % ( k , v ) for k , v in six . iteritems ( self ) )
 def __init__ ( self , cmd , ** kwargs ) :
                      result = middleware . process_request ( request )
   return response
 from django . db import connections , router , transaction , DEFAULT_DB_ALIAS
   except ImportError :
   def visible_fields ( self ) :
 try :
   except KeyError :
 if isinstance ( file , six . string_types ) :
  elif hasattr ( pattern , '_callback' ) :
 def check_model_signals ( app_configs = None , ** kwargs ) :
                  raise
 from django . utils . translation import ugettext_lazy , ugettext as _ , pgettext
  else :
    if resolver . urlconf_module is None :
      help = 'Runs a development server with data from the given fixture(s).'
  except TypeError :
    @ register . tag
  self . urlconf_name = urlconf_name
   def start_doctype_decl ( self , name , sysid , pubid , has_internal_subset ) :
   def salted_hmac ( key_salt , value , secret = None ) :
 import cgi
 if commit :
 from django . db import models
              return (  _lazy_proxy_unpickle ,  ( func , self . __args , self . __kw ) + resultclasses  )
  except ( ImportError , IndentationError , NameError , SyntaxError ,  TypeError , AttributeError ) :
          return False
          val . encode ( 'ascii' )
                      cls . __bytes__ = cls . __bytes_cast
          path = self . path ( path )
  ipv4_re = re . compile ( r'^(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}$' )
  unescape_string_literal = allow_lazy ( unescape_string_literal )
      try :
 for ip in ( self . _ipython , self . _ipython_pre_100 , self . _ipython_pre_011 ) :
              return 0
  else :
                      for node in self . nodelist_loop :
 from django . core . exceptions import ImproperlyConfigured
 def check_1_7_compatibility ( ** kwargs ) :
  handler . addQuickElement ( "lastBuildDate" , rfc2822_date ( self . latest_post_date ( ) ) )
  yield data
 parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database onto which the cache tables will be '  'installed. Defaults to the "default" database.' )
          return value
   def _update_errors ( self , errors ) :
             self . _choices = self . widget . choices = list ( value )
  try :
   if is_templatized :
   def save ( self , save_m2m = True , using = None ) :
 self . m2m_data = m2m_data
   def as_ul ( self ) :
 xreadlines = property ( lambda self : self . file . xreadlines )
       def base36_to_int ( s ) :
 if 'charset' in content_params :
                      raise AttributeError
  if last == 2 :
 self . connection = connection
   def popitem ( self ) :
   class EmailBackend ( BaseEmailBackend ) :
  else :
 boundary = opts . get ( 'boundary' )
 return j
                      output . append ( self . render_option ( selected_choices , * option ) )
 self . charset = charset
 _itervalues = "itervalues"
  elif prefix != common_prefix :
                          from django . template . loader import get_template , select_template
 return obj
 os . makedirs ( original_path )
  if 'message-id' not in header_names :
 if isinstance ( s , Promise ) :
              os . remove ( fname )
    class TemporaryUploadedFile ( UploadedFile ) :
 return IfEqualNode ( val1 , val2 , nodelist_true , nodelist_false , negate )
    def to_locale ( language ) :
   def get_nodes_by_type ( self , nodetype ) :
  initial_set = set ( force_text ( value ) for value in self . prepare_value ( initial ) )
 indent = options . get ( 'indent' )
   else :
          _dec . __name__ = 'method_decorator(%s)' % decorator . __name__
  super ( RegexField , self ) . __init__ ( max_length , min_length , * args , ** kwargs )
  self . reset ( )
   return [ ]
 return result
 from django . utils . safestring import ( SafeData , EscapeData , mark_safe ,  mark_for_escaping )
          self . coerce = kwargs . pop ( 'coerce' , lambda val : val )
      pass
              return ipv4_unpacked
   self . filters = filters
           logging . captureWarnings ( True )
 if len ( bits ) != 6 :
          self . _stream = stream
 from pprint import pformat
    class RemovedInDjango19Warning ( DeprecationWarning ) :
    def get_date_error_message ( self , date_check ) :
                          file_ , _ , _ = imp . find_module ( module_name , [ entry ] )
 if _localtime is None :
  def join_tokens ( tokens , trim = False ) :
          del _prefixes . value
                  pass
   if not func . is_usable :
 if message :
 parser . add_argument ( 'migration_name' ,  help = 'Migration name to print the SQL for.' )
 readline . set_completer ( rlcompleter . Completer ( imported_objects ) . complete )
  except AttributeError :
 link_target_attribute_re = re . compile ( r'(<a [^>]*?)target=[^\s>]+' )
 for key , value in list ( attrs . items ( ) ) :
                      break
              self . connection . sendmail ( from_email , recipients , message . as_bytes ( ) )
 try :
  else :
  return force_str ( signature )
   def _has_changed ( self , initial , data ) :
                       field_value = [ getInnerText ( k ) . strip ( ) for k in keys ]
              if show_traceback :
   def chars ( self , num , truncate = None , html = False ) :
                              self . stdout . write ( "    Processing %s.%s model\n" % ( app_name , model . _meta . object_name ) )
  if not incremental :
 from django . http . response import ( HttpResponse , StreamingHttpResponse ,  HttpResponseRedirect , HttpResponsePermanentRedirect ,  HttpResponseNotModified , HttpResponseBadRequest , HttpResponseForbidden ,  HttpResponseNotFound , HttpResponseNotAllowed , HttpResponseGone ,  HttpResponseServerError , Http404 , BadHeaderError , JsonResponse )
 BASE64_ALPHABET = BASE62_ALPHABET + '-_'
    def assertCountEqual ( self , * args , ** kwargs ) :
 parser . add_argument ( '--app' , action = 'store' , dest = 'app_label' ,  default = None , help = 'Only look for fixtures in the specified app.' )
  field_type += '('
   class Tok ( object ) :
    @ register . filter ( "slice" , is_safe = True )
  sites . append ( j )
 return http . parse_cookie ( raw_cookie )
              updates . update ( processor ( request ) )
 seconds = abs ( seconds )
              raise ValidationError ( errors )
 if safe is not None :
  try :
  for path in format_module_path :
   Model = self . _get_model_from_node ( node , "model" )
    def pgettext ( context , message ) :
 args . append ( work_file )
              piece += elt [ 0 ]
    if os . name == 'nt' :
    def do_ntranslate ( singular , plural , number , translation_function ) :
   def clean ( self , value ) :
 boolean_attrs = [ ]
              self . _changed_data = [ ]
 try :
          if not value :
 pass
  if ch2 == '?' :
   def initial_form_count ( self ) :
                      logger = root . manager . loggerDict [ log ]
          self . _cache . clear ( )
 from django . utils . xmlutils import SimplerXMLGenerator
 prefix = 'django_%s_template_' % self . app_or_project
   def serialize_headers ( self ) :
 if node . hasAttribute ( 'pk' ) :
 self . choice_value = force_text ( choice [ 0 ] )
     def get_tag_uri ( url , date ) :
 context_extras [ 'LANGUAGE_CODE' ] = translation . get_language ( )
   def _new_gnu_trans ( self , localedir , use_null_fallback = True ) :
                 value = field . widget . value_from_datadict ( self . data , self . files , self . add_prefix ( name ) )
 self . connection . starttls ( )
    @ register . tag
                  parts = t . contents . split ( '|' )
 try :
 substitutions [ 'clear_checkbox_id' ] = conditional_escape ( checkbox_id )
  else :
  urlize = allow_lazy ( urlize , six . text_type )
  except ImportError :
 self . _lock = threading . RLock ( )
                      if f . rel and f . rel . to not in to_delete :
     class TemplateTagNode ( Node ) :
 if hasattr ( self , 'clean_%s' % name ) :
  else :
 from django . utils . translation import ugettext as _
  while k < endpos :
   def language ( self ) :
      def __init__ ( self , class_name , old_method_name , new_method_name , deprecation_warning ) :
 deactivate = deactivate_all = lambda : None
   output = [ ]
                                  pass
  return True
 def escapejs_filter ( value ) :
          cookies = ( pformat ( COOKIES_override )  if COOKIES_override is not None  else pformat ( request . COOKIES ) )
  _file . write ( chunk )
  import django
   def render ( self , context ) :
  return response
      if isinstance ( addr , six . string_types ) :
          pass
 return date ( datetime . now ( tz = tzinfo ) , self . format_string )
 val = force_text ( val )
              raise ValidationError ( self . error_messages [ 'contradiction' ] , code = 'contradiction' )
 toktext = match . group ( name )
 if six . PY2 and not isinstance ( path , bytes ) :
 start = 0
 import glob
   options = sorted ( ( k , v ) for k , v in options if k . startswith ( curr ) )
 return InMemoryUploadedFile (  file = self . file ,  field_name = self . field_name ,  name = self . file_name ,  content_type = self . content_type ,  size = file_size ,  charset = self . charset ,  content_type_extra = self . content_type_extra  )
   self . file . seek ( 0 )
 collect = [ ]
                  result_args [ i ] . append ( param )
   class DjangoUnicodeDecodeError ( UnicodeDecodeError ) :
 text = force_text ( text )
                          out . write ( ' _(%s) ' % fmatch )
 if t is not None :
    class DateTimeInput ( DateTimeBaseInput ) :
  from django . core . exceptions import ImproperlyConfigured
 block_re = re . compile ( r"""^\s*blocktrans(\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?')))?(?:\s+|$)""" )
 i = 0
              self . stdout . write ( "Rendering %s template files with "  "extensions: %s\n" %  ( app_or_project , ', ' . join ( extensions ) ) )
    @ register . tag
 if hasattr ( os , 'utime' ) :
  kwargs = {  'form' : form ,  'formfield_callback' : formfield_callback ,  'formset' : formset ,  'extra' : extra ,  'can_delete' : can_delete ,  'can_order' : can_order ,  'fields' : fields ,  'exclude' : exclude ,  'min_num' : min_num ,  'max_num' : max_num ,  'widgets' : widgets ,  'validate_min' : validate_min ,  'validate_max' : validate_max ,  'localized_fields' : localized_fields ,  'labels' : labels ,  'help_texts' : help_texts ,  'error_messages' : error_messages ,  }
     class RadioFieldRenderer ( ChoiceFieldRenderer ) :
 stream = open ( output , 'w' ) if output else None
   else :
              raise ValueError ( "Key '%s' not found" % key )
   if six . PY3 :
                  t = Template ( output , name = filepath )
 self . blocks = dict ( ( n . name , n ) for n in nodelist . get_nodes_by_type ( BlockNode ) )
          self . fed . append ( d )
               definition = { }
              app_name = commands [ subcommand ]
 from datetime import datetime
 self . month_none_value = ( 0 , empty_label [ 1 ] )
          for key in self . keyOrder :
      if isinstance ( message , SafeData ) :
 root [ : ] = [ root , root , None , None ]
  for attr in self . child_nodelists :
          try :
 for formset in formsets :
   def add_root_elements ( self , handler ) :
 shells = [ 'ipython' , 'bpython' ]
 def pprint ( value ) :
   def handle_m2m_field ( self , obj , field ) :
      setattr ( Module_six_moves_urllib_response , attr . name , attr )
   def reader_leaves ( self ) :
  except TemplateDoesNotExist :
 for name , tok in lexer . lex ( js ) :
 for t in type ( res ) . mro ( ) :
 if not options . get ( 'addrport' ) :
              id_for_label = widget . id_for_label ( id_ )
          super ( BaseMemcachedCache , self ) . __init__ ( params )
 def __init__ ( self , file ) :
          self . file . seek ( 0 )
      return _trans . get_language_from_request ( request , check_path )
           result = ungettext ( singular , plural , number )
 parser . print_help ( )
              continue
  self . stdout . flush ( )
               if len ( language [ p + 1 : ] ) > 2 :
              self . bcc = [ ]
          if self . cmd . _called_from_command_line :
     self . _validate_unique = False
   for key , op in OPERATORS . items ( ) :
  if not _cached_filenames and settings . USE_I18N :
   finally :
 if language_code not in self . _regex_dict :
              os . utime ( path , None )
          if len ( unique_check ) == 1 :
 handler . addQuickElement ( "link" , item [ 'link' ] )
  except TypeError :
 last = root [ PREV ]
    __dir__ = new_method_proxy ( dir )
                  pass
        def is_aware ( value ) :
 if key_func is not None :
     class IfChangedNode ( Node ) :
  try :
      plist = [ ]
                      value = getattr ( self , 'clean_%s' % name ) ( )
          for dict_ in self . dicts :
  else :
      BaseRunserverCommand = Command
                              current_expires = typecast_timestamp ( str ( current_expires ) )
      if not is_valid_ipv6_address ( value ) :
 new_ip = hextet [ 0 ] . split ( ':' )
 d = self . config [ m . groups ( ) [ 0 ] ]
                              nodelist . append ( node . render ( context ) )
          meta = '<could not parse>'
from __future__ import absolute_import
          style = no_style ( )
              if self . _wrapped is empty :
          __call__ = type . __call__
  elif self . name and os . path . exists ( self . name ) :
 self . _leftover = b''
              handler . addQuickElement ( "description" , item [ 'description' ] )
              raise TypeError (  "Variable must be a string or number, got %s" % type ( var ) )
    def valid_value ( self , value ) :
   def parse_date ( value ) :
 if hasattr ( self , '_regex_validator' ) and self . _regex_validator in self . validators :
 from django . utils import six
 if name is None :
   def __iter__ ( self ) :
  import re
                  return False
 memo [ id ( self ) ] = result
          os . environ [ 'DJANGO_SETTINGS_MODULE' ] = options . settings
                   continue
 return func
                  p_pattern = p_pattern [ 1 : ]
  else :
  from django . utils import six
          name , val = forbid_multi_line_headers ( name , val , self . encoding )
 try :
          self . max_digits , self . decimal_places = max_digits , decimal_places
  yield buf . read ( )
 if settings . DEBUG :
     def get_language_from_request ( request , check_path = False ) :
 return True
          return self . __class__ ( [ ( key , copy . deepcopy ( value , memo ) )  for key , value in self . items ( ) ] )
 default_settings = module_to_dict ( global_settings )
          return self . as_table ( )
          parser . add_argument ( '--locale' , '-l' , dest = 'locale' , action = 'append' , default = [ ] ,  help = 'Locale(s) to process (e.g. de_AT). Default is to process all. '  'Can be used multiple times.' )
                      return
              raise self . error ( token , "Invalid block tag: '%s', expected %s" %  ( command , get_text_list ( [ "'%s'" % p for p in parse_until ] ) ) )
 import re
   def render ( self , context ) :
  except KeyError :
  else :
  class CacheEntry ( object ) :
 del self [ 'Content-Transfer-Encoding' ]
 while bits :
  finally :
 import calendar
  locations = [ ]
                  if not self . can_import_settings :
                  self . verbatim = False
 from wsgiref import simple_server
 self . attachments . append ( ( filename , content , mimetype ) )
          if template_dirs :
 super ( ComboField , self ) . clean ( value )
  elif settings . USE_TZ :
  exec ( """exec _code_ in _globs_, _locs_""" )
  if isinstance ( number , int ) and not use_grouping and not decimal_pos :
    def render ( self , name , value , attrs = None ) :
 if formatter :
              pass
  connection = connections [ options [ 'database' ] ]
  field = Model . _meta . get_field ( field_name )
          escaper = lambda x : x
 now = timezone . now ( )
      bits = list ( token . split_contents ( ) )
          return self
  else :
                  self . stdout . write ( "  Installing indexes...\n" )
  elif action == "apply_success" :
 self . common_logger_config ( logger , config , incremental )
   def urlunquote_plus ( quoted_url ) :
          self . cmd = cmd
              self . _callback = callback
                       migrations_directory = os . path . dirname ( writer . path )
 from django . apps import apps
  bits = arg . split ( ',' )
 become_daemon ( our_home_dir = options [ "workdir" ] , ** daemon_kwargs )
 i += 1
              data = [ ]
  value = data . get ( name )
   def add_arguments ( self , parser ) :
                  try :
   def empty_block_tag ( self , token ) :
    def get_format ( format_type , lang = None , use_l10n = None ) :
      help = "Squashes an existing set of migrations (from first until specified) into a single new one."
 if endpos < 0 :
 def __init__ ( self , table ) :
     def _post_clean ( self ) :
          try :
 from io import StringIO
          try :
 from django . utils . text import unescape_entities
 from django . utils . functional import LazyObject
   def _findall ( text , substr ) :
              item , old_style_list = convert_old_style_list ( sublist )
 fields = (  DateField ( input_formats = input_date_formats ,  error_messages = { 'invalid' : errors [ 'invalid_date' ] } ,  localize = localize ) ,  TimeField ( input_formats = input_time_formats ,  error_messages = { 'invalid' : errors [ 'invalid_time' ] } ,  localize = localize ) ,  )
              reloader_thread ( )
  for k , v in six . iteritems ( kwargs ) :
  del _serializers [ format ]
            form . save_m2m = save_m2m
 cache . set ( cache_key , headerlist , cache_timeout )
  try :
 bits = token . split_contents ( )
   def convert ( self , number , from_digits , to_digits , sign ) :
 return True
          return '\n' . join ( sql_flush ( self . style , connections [ options [ 'database' ] ] , only_django = True ) )
              raise base . DeserializationError (  "<%s> node has invalid model identifier: '%s'"  % ( node . nodeName , model_identifier ) )
     @ register . filter ( "timeuntil" , is_safe = False )
                  deps = [ ]
            args [ 1 : 2 ] = [ '"%s"' % arg for arg in args [ 1 ] . split ( "," ) ]
 _super ( SimpleLazyObject , self ) . __init__ ( )
  output_transaction = True
          mail . attach_alternative ( html_message , 'text/html' )
          if encoding == 'utf-8' :
  from __future__ import unicode_literals
 self . lineno += token_string . count ( '\n' )
  else :
  except Exception :
              self . GET = QueryDict ( mutable = True )
              try :
 @ stringfilter
 app = TerminalIPythonApp . instance ( )
                  answer = None
                      e . args = ( "Problem installing fixture '%s': %s" % ( fixture_file , e ) , )
 from email . mime . base import MIMEBase
         class TokenBase ( object ) :
      attrs = { 'model' : model }
  except IndexError :
              super ( SortedDict , self ) . __init__ ( )
           all_unique_checks = set ( )
 return template , None
              pass
  else :
              handler . addQuickElement ( "language" , self . feed [ 'language' ] )
  import os
  else :
   return mark_safe ( '\n' . join ( lines ) )
              return self . handle_merge ( loader , conflicts )
 def wrapper ( * args , ** kwargs ) :
                  self . stderr . write ( "App '%s' could not be found. Is it in INSTALLED_APPS?" % app_label )
                      natural = value . natural_key ( )
    return self . has_key ( key )
              obj = self . var
 self . error_class = error_class
          signed_value = force_str ( signed_value )
  elif value in ( False , 'False' , '0' ) :
 with self . _lock . writer ( ) :
 self . dicts = [ builtins ]
 __delslice__ = complain
              return self . clear ( )
 import os
 while self . exists ( name ) :
          if not self :
  else :
 PB = 1 << 50
from __future__ import unicode_literals
 v = ValueError ( 'Cannot resolve %r: %s' % ( s , e ) )
  except KeyError :
                      self . verbatim = 'end%s' % block_content
          token = get_token ( request )
     class IncludeNode ( Node ) :
 if m :
           from collections import namedtuple
          return time_str + '-0000'
  unichr = unichr
    def validate_host ( host , allowed_hosts ) :
 def floatformat ( text , arg = - 1 ) :
    @ register . filter ( is_safe = True )
   def create_select ( self , name , field , value , val , choices , none_value ) :
 return http . QueryDict ( raw_query_string , encoding = self . _encoding )
 if len ( bits ) < 2 :
 if language not in _translations :
     class SelectMultiple ( Select ) :
  else :
  LANGUAGE_SESSION_KEY = '_language'
 return self . __to_language
     class DjangoTranslation ( gettext_module . GNUTranslations ) :
 orig_file = os . path . join ( self . dirpath , self . file )
 if 'version' not in config :
    class NonCapture ( list ) :
   def __getitem__ ( self , index ) :
 self . label_suffix = label_suffix
  self . mod = new
 if not file_name :
  return mark_safe ( data )
 match = tagfind . match ( rawdata , i + 1 )
 def iriencode ( value ) :
   self . xml . endElement ( "field" )
 from email . header import Header
   def handle_app_config ( self , app_config , ** options ) :
 return field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
 config [ '()' ] = factory
  used_column_names = [ ]
  def _generator ( ) :
   else :
                warnings . warn (  'Using SplitDateTimeWidget with DateTimeField is deprecated. '  'Use SplitDateTimeField instead.' ,  RemovedInDjango19Warning , stacklevel = 2 )
 self . waiting_writers -= 1
    code . interact ( local = imported_objects )
   def simple_tag ( self , func = None , takes_context = None , name = None ) :
  __all__ = [ 'File' ]
 pass
                      if hasattr ( field . rel . to . _default_manager , 'get_by_natural_key' ) :
                              f = os . path . join ( root , f )
     ret_ip = [ ]
from django . dispatch import Signal
   fields = fields_for_model ( opts . model , opts . fields , opts . exclude ,  opts . widgets , formfield_callback ,  opts . localized_fields , opts . labels ,  opts . help_texts , opts . error_messages )
   return m + Media ( definition )
    value = super ( URLField , self ) . to_python ( value )
          if self . _done :
          _supported = OrderedDict ( settings . LANGUAGES )
 value , timestamp = result . rsplit ( self . sep , 1 )
              handler . addQuickElement ( "author" , item [ "author_email" ] )
   @ property
     @ python_2_unicode_compatible
 def __promise__ ( cls , klass , funcname , method ) :
   template_dir = self . handle_template ( options [ 'template' ] ,  base_subdir )
 if not m :
 from django . utils . translation import ugettext , ungettext
          for i , line in enumerate ( lines ) :
 if num_entries < self . _max_entries :
              value = { True : '2' , False : '3' , '2' : '2' , '3' : '3' } [ value ]
 return
    def allow_lazy ( func , * resultclasses ) :
   def is_multipart ( self ) :
 import sys
 chunks . append ( bytes )
     def get_path_info ( environ ) :
 for model in router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) :
              val = self [ key ]
              handler . addQuickElement ( "enclosure" , '' ,  { "url" : item [ 'enclosure' ] . url , "length" : item [ 'enclosure' ] . length ,  "type" : item [ 'enclosure' ] . mime_type } )
  models . signals . pre_syncdb . send (  sender = app_config . models_module ,  app = app_config . models_module ,  create_models = create_models ,  verbosity = verbosity ,  interactive = interactive ,  db = db )
    def __setitem__ ( self , name , val ) :
              operations . extend ( smigration . operations )
 if isinstance ( data , bytes ) :
 if isinstance ( unicode_value , six . text_type ) :
 if len ( key ) > MEMCACHE_MAX_KEY_LENGTH :
 if hasattr ( file , 'mode' ) :
 if tzinfo == 'Z' :
  g = one_percent_re . sub ( '%%' , g )
 from django . db import connections , DEFAULT_DB_ALIAS
  return self . get_connection ( fail_silently ) . send_messages ( [ self ] )
                      curs . execute ( statement )
  except NotImplementedError :
    def get_major_version ( version = None ) :
              self . _fqdn = socket . getfqdn ( )
  except OverflowError :
          value = force_text ( value )
   if isinstance ( pk , OneToOneField ) or isinstance ( pk , ForeignKey ) :
              try :
 doublecolon_start = - 1
                      self . write_po_file ( potfile , locale )
  def add_arguments ( self , parser ) :
                  return True
              self . stdout . write ( "Flush cancelled.\n" )
 fp = kwargs . pop ( "file" , sys . stdout )
          return type ( self ) . __bool__ ( self )
              _default = translation ( settings . LANGUAGE_CODE )
  self . _ordering . append ( ( i , form . cleaned_data [ ORDERING_FIELD_NAME ] ) )
      allow_multiple_selected = True
 self . size = len ( content )
              raise TypeError ( "update expected at most 1 arguments, got %d" % len ( args ) )
 host_validation_re = re . compile ( r"^([a-z0-9.-]+|\[[a-f0-9]*:[a-f0-9:]+\])(:\d+)?$" )
          with self . mutex :
 words = word_split_re . split ( force_text ( text ) )
 with io . open ( orig_file , encoding = settings . FILE_CHARSET ) as fp :
   from __future__ import absolute_import
              self . saved_forms = [ ]
                  self . _view_middleware . append ( mw_instance . process_view )
 pass
  else :
 app_models = router . get_migratable_models ( app_config , connection . alias , include_auto_created = True )
   warnings . simplefilter ( "default" , RemovedInNextVersionWarning )
 orig_vars . pop ( '__weakref__' , None )
  except ValueError :
 def linebreaks_filter ( value , autoescape = None ) :
          if not getattr ( f , 'editable' , False ) :
  return '%s:%s' % ( self . g ( ) , self . i ( ) )
   if ( isinstance ( fp , file ) and  isinstance ( data , unicode ) and  fp . encoding is not None ) :
   form = modelform_factory ( model , form = form , fields = fields , exclude = exclude ,  formfield_callback = formfield_callback ,  widgets = widgets , localized_fields = localized_fields ,  labels = labels , help_texts = help_texts , error_messages = error_messages )
 try :
 if fp is None :
 v . __cause__ , v . __traceback__ = e , tb
                       value . encode ( charset )
 COMMENT_TAG_END = '#}'
   def start_serialization ( self ) :
              field_type = connection . introspection . get_field_type ( row [ 1 ] , row )
 return from_current_timezone ( result )
 translation = gettext_module . translation (  domain = 'django' ,  localedir = localedir ,  languages = [ self . __locale ] ,  codeset = 'utf-8' ,  fallback = use_null_fallback )
              return '%s=%s' % ( t [ 0 ] , t [ 1 ] )
  if request . _post_parse_error :
 from django . utils import six
   date_re = re . compile (  r'(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})$'  )
 os . dup2 ( so . fileno ( ) , sys . stdout . fileno ( ) )
              return '%s\n\n%s' % ( usage , self . help )
 params = { 'limit_value' : self . limit_value , 'show_value' : cleaned }
                          os . makedirs ( dirname )
  except Exception as e :
 def __new__ ( mcs , name , bases , attrs ) :
 from django . utils . functional import curry , Promise
 from django . utils . timezone import template_localtime
           name = args [ 1 ]
  def __repr__ ( self ) :
    class _LazyDescr ( object ) :
 _func_defaults = "func_defaults"
 row = cursor . fetchone ( )
    colors = styles . pop ( ) . split ( '/' )
              return super ( DjangoJSONEncoder , self ) . default ( o )
              location = settings . MEDIA_ROOT
   class DummyCache ( BaseCache ) :
 counters [ i ] += chunk_length
   def __copy__ ( self ) :
  ISO_INPUT_FORMATS = {  'DATE_INPUT_FORMATS' : ( '%Y-%m-%d' , ) ,  'TIME_INPUT_FORMATS' : ( '%H:%M:%S' , '%H:%M:%S.%f' , '%H:%M' ) ,  'DATETIME_INPUT_FORMATS' : (  '%Y-%m-%d %H:%M:%S' ,  '%Y-%m-%d %H:%M:%S.%f' ,  '%Y-%m-%d %H:%M' ,  '%Y-%m-%d'  ) ,  }
              dklen = None
   try :
              value , decimals = value . split ( decimal_separator , 1 )
                   def dec ( func ) :
          return item in list ( self )
   if content_length < 0 :
  elif self . waiting_readers != 0 :
          if offset is not None :
 found = getattr ( found , frag )
  for path in all_locale_paths ( ) :
 exclude = self . _get_validation_exclusions ( )
                   return getattr ( settings , format_type )
 try :
  result = user_function ( * args , ** kwds )
   def __str__ ( self ) :
              message = _ (  '%(datetime)s couldn\'t be interpreted '  'in time zone %(current_timezone)s; it '  'may be ambiguous or it may not exist.'  )
 if val is None :
  elif name is not None and compile_function is None :
          parser . add_argument ( '--all' , action = 'store_true' , dest = 'all' , default = False ,  help = 'Display all settings, regardless of their value. '  'Default values are prefixed by "###".' )
          if find_command ( program ) is None :
   view_path = url_name or self . _func_path
                          pass
 orig_file = os . path . join ( self . dirpath , self . file )
     class FileField ( Field ) :
   if not isinstance ( viewname , six . string_types ) :
                  self . waiting_writers += 1
    _cookie_encodes_correctly = http_cookies . SimpleCookie ( ) . value_encode ( ';' ) == ( ';' , '"\\073"' )
              raise TemplateSyntaxError ( "'%s' is not a valid tag library: %s" %  ( taglib , e ) )
 from django . utils . translation import ugettext as _
   raise TemplateDoesNotExist ( template_name )
      has_old_option = hasattr ( self , 'requires_model_validation' )
  except ( OSError , IOError ) :
  except socket . error as e :
       import pyinotify
 from django . db import models
 for app_config , model_list in app_list :
          self . _archive . list ( )
          initial_value = initial if initial is not None else ''
 bits = token . split_contents ( ) [ 1 : ]
 return MONTHS_3 [ self . data . month ]
  TYPE = RAW
 try :
  except ( LookupError , TypeError ) :
                  groupid = "t%d" % tok . id
  else :
    except PermissionDenied :
  msgmerge_options = [ '-q' , '--previous' ]
 import glob
   @ property
              try :
          if str ( number ) [ 0 ] == sign :
      def exec_ ( _code_ , _globs_ = None , _locs_ = None ) :
          self . _wrapped = get_storage_class ( ) ( )
 def center ( value , arg ) :
              deactivate ( )
 if not hasattr ( mail , 'outbox' ) :
  else :
    def deserialize ( format , stream_or_string , ** options ) :
 words [ i ] = mark_safe ( '%s%s%s' % ( lead , middle , trail ) )
 self . regex = regex
                  return dict_ . getlist ( key )
          class HTMLParser ( _html_parser . HTMLParser ) :
          raise Exception ( "This %s instance is not writable" % self . __class__ . __name__ )
      SafeString = SafeBytes
 handle_default_options ( options )
  if i >= len ( subject ) :
   if not chunks :
    def deactivate ( ) :
    else :
      def sort_dependencies ( app_list ) :
 for char in self . add_truncation_text ( '' , truncate ) :
 url , trimmed = escape ( url ) , escape ( trimmed )
  from __future__ import unicode_literals
 import io
                  newretval = post_callback ( retval )
 from django . forms import Form
          self . callback = callback
 from django . db import connections , DEFAULT_DB_ALIAS
    DEFAULT_ATTACHMENT_MIME_TYPE = 'application/octet-stream'
  else :
 output = self . nodelist . render ( context )
 __setitem__ = complain
  else :
              val = self . _cache . incr ( key , delta )
  bits = token . split_contents ( ) [ 1 : ]
      def __init__ ( self , attrs = None , check_test = None ) :
  except ImportError :
  continue
  return result
              raise AppRegistryNotReady (  "The translation infrastructure cannot be initialized before the "  "apps registry is ready. Check that you don't make non-lazy "  "gettext calls at import time." )
                  try :
 try :
   def handle_app_config ( self , app_config , ** options ) :
 self [ 'Allow' ] = ', ' . join ( permitted_methods )
              def __len__ ( self ) :
                          references_to_delete . setdefault ( f . rel . to , [ ] ) . append ( ( model , f ) )
  except StandardError as e :
  return ret
  except ( ssl . SSLError , smtplib . SMTPServerDisconnected ) :
                  self . extend_nodelist ( nodelist , TextNode ( token . contents ) , token )
   def write ( self , content ) :
  def render ( self , name , value , attrs = None ) :
   def as_ul ( self ) :
     def parse_time ( value ) :
 self . can_write . release ( )
   self . _rollback = len ( boundary ) + 6
  else :
 self . validate_key ( key )
      from unittest2 import *
  return { 'TIME_ZONE' : timezone . get_current_timezone_name ( ) }
 if truncate_len == 0 :
   def import_string ( dotted_path ) :
                      line = buffer_ + line
 fixture_name , ser_fmt , cmp_fmt = self . parse_name ( fixture_label )
                          tried . append ( [ pattern ] )
   chunk = b'' . join ( chunks )
   return result
   elif name == 'id' :
   return self . _client
   def url ( self , name ) :
 self . buffer = b''
 from django . utils import six
   for namespace , ( prefix , sub_pattern ) in pattern . namespace_dict . items ( ) :
   year = dt . year
               cache = dict ( )
              raise AttributeError ( self . warning )
 del self . _expire_info [ key ]
      @ register . filter ( expects_localtime = True , is_safe = False )
  elif self . reason_phrase is None :
   from PIL import Image
 from django . utils . _os import upath
                  related = getattr ( obj , field . name )
                       self . _request_middleware = None
              for obj in self . queryset . all ( ) :
      tagfind = re . compile ( '([a-zA-Z][-.a-zA-Z0-9:_]*)(?:\s|/(?!>))*' )
 def yesno ( value , arg = None ) :
                  self . stream . close ( )
  return self . size > chunk_size
          callback = getattr ( self . urlconf_module , 'handler%s' % view_type , None )
  self . base_url = base_url
 return
                  digits = decimals
   prefix = 'django_%s_template_' % self . app_or_project
              print ( "Running post-migrate handlers for application %s" % app_config . label )
 if app_label not in executor . loader . migrated_apps :
 for i in range ( 0 , self . total_form_count ( ) ) :
 if CONTEXT_SEPARATOR in result :
  else :
  else :
    def activate ( language ) :
  import os
     class DTDForbidden ( DefusedXmlException ) :
 @ stringfilter
          return self . _is_rendered
 if source is None :
              if action == "apply_start" :
  self . _cache . set_multi ( safe_data , self . get_backend_timeout ( timeout ) )
              if os . fork ( ) > 0 :
  from django . apps import apps
 _expire_info = { }
 if not e . connection_reset :
    def _generate_cache_key ( request , method , headerlist , key_prefix ) :
  else :
 if i >= len ( subject ) :
 return connection . send_messages ( messages )
  try :
 from lib2to3 . fixer_util import find_indentation , Name , syms , touch_import
                  header , value = settings . SECURE_PROXY_SSL_HEADER
  return self . _wrapped . __dict__
          return self . __dt ,
 for d in self . dicts :
 number_equal = len ( [ current_number for current_number in self . _unget_history  if current_number == num_bytes ] )
              return lambda x : x
                          return result
              base = sup_cls . media
          def dec ( func ) :
  except KeyError :
 for key , value in data . items ( ) :
 from django . utils . html import format_html
              raise KeyError ( "Unknown language code %s." % lang_code )
 str_number = str_number [ 1 : ]
 migration . ancestry = loader . graph . forwards_plan ( ( app_label , migration_name ) )
 field_value = self . cleaned_data . get ( field , None )
       class DefusedExpatParser ( _ExpatParser ) :
   if parse_until :
   def path ( self , name ) :
   def value_from_datadict ( self , data , files , name ) :
          return lookup_view
 for path in self . locale_paths :
 sites2 = _findall ( s2 , str ( year + 28 ) )
              if isinstance ( s , Exception ) :
 from django . utils import baseconv
                          limit_choices_to = limit_choices_to ( )
 current_len = 0
              raise MultiValueDictKeyError ( repr ( key ) )
    stderr = getattr ( self , 'stderr' , OutputWrapper ( sys . stderr , self . style . ERROR ) )
                  end -= 1
   def as_p ( self ) :
 from django . db . models import AutoField , OneToOneField , ForeignKey
   def appendlist ( self , key , value ) :
 if not settings . configured :
 self . use_ipv6 = True
     class BooleanField ( Field ) :
 _iterlists = "lists"
               self . tags [ name ] = compile_function
                  m2m_value = lambda value : value . natural_key ( )
 key = key [ len ( self . prefix ) : ]
 obj = Node ( connector = self . connector , negated = self . negated )
                  host = '%s:%s' % ( host , server_port )
from django . core . files . base import File
 self . timeout = timeout
               self . _func_path = '.' . join ( [ func . __class__ . __module__ , func . __class__ . __name__ ] )
 return self . forms [ self . initial_form_count ( ) : ]
       DefaultFeed = Rss201rev2Feed
  class SimpleCookie ( http_cookies . SimpleCookie ) :
  with transaction . atomic ( using = connection . alias , savepoint = connection . features . can_rollback_ddl ) :
    def fields_for_model ( model , fields = None , exclude = None , widgets = None ,  formfield_callback = None , localized_fields = None ,  labels = None , help_texts = None , error_messages = None ) :
              for dirname in dirnames [ : ] :
  except KeyError :
  result = getattr ( _default , translation_function ) ( eol_message )
                      top_errors . extend (  [ _ ( '(Hidden field %(name)s) %(error)s' ) % { 'name' : name , 'error' : force_text ( e ) }  for e in bf_errors ] )
 usage = '%%prog %s [options] %s' % ( subcommand , self . args )
 return etags
   for filename in filenames :
                  raise CommandError (  "AppCommand cannot handle app '%s' in legacy mode "  "because it doesn't have a models module."  % app_config . label )
  else :
 return fp . getvalue ( )
  if self . field . required and hasattr ( self . form , 'required_css_class' ) :
          from django . db . models . fields . related import RelatedObject
 def _dec ( * args , ** kwargs ) :
 match = _html_parser . endtagfind . match ( rawdata , i )
     def dumps ( obj , key = None , salt = 'django.core.signing' , serializer = JSONSerializer , compress = False ) :
  elif isinstance ( value , datetime . datetime ) :
                    output . append ( str_hidden )
 encoding = encoding or settings . DEFAULT_CHARSET
              translation = self . _new_gnu_trans ( localedir )
                  path_info = '/'
 from __future__ import unicode_literals
 parser . add_argument ( '--ignore' , '-i' , action = 'append' , dest = 'ignore_patterns' ,  default = [ ] , metavar = 'PATTERN' ,  help = 'Ignore files or directories matching this glob-style pattern. '  'Use multiple times to ignore more.' )
 if base_url is None :
          return super ( Critical , self ) . __init__ ( CRITICAL , * args , ** kwargs )
      class SafeMIMEMessage ( MIMEMixin , MIMEMessage ) :
  if error_messages and f . name in error_messages :
  load_template_source . is_usable = True
                  target_dir = path . join ( top_dir , relative_dir )
  return '&' . join ( output )
  except smtplib . SMTPException :
                          out . write ( ' #\n' )
              return smart_text ( auto_id ) % self . html_name
from collections import defaultdict
              app_output = self . handle_app_config ( app_config , ** options )
              offset_mins = int ( tzinfo [ - 2 : ] ) if len ( tzinfo ) > 3 else 0
     _super = super
 self . validate_key ( key )
  setattr ( filter_func , attr , value )
    if response . has_header ( 'Vary' ) :
 return result
              return replacement
 from django . utils . encoding import force_text
 parser . add_argument ( '--format' , default = 'json' , dest = 'format' ,  help = 'Specifies the output serialization format for fixtures.' )
     self . _post = QueryDict ( '' , mutable = True )
          handler . addQuickElement ( "title" , self . feed [ 'title' ] )
 pk = to_python ( pk )
 defaults = dict ( defaults . _get_kwargs ( ) , ** options )
                  if field . rel . through . _meta . auto_created :
          return node . render ( context )
 if self . body :
   class ExtendsError ( Exception ) :
    def __eq__ ( self , other ) :
 if option_value in selected_choices :
   name = property ( _get_name , _set_name )
      m = IDENTIFIER . match ( s )
 timeval = time . time ( )
  fp . write ( data )
                      bit = next ( bits )
  else :
 if text [ 0 ] == '#' :
  def serialize ( self , queryset , ** options ) :
 if filename :
 from django . utils . encoding import force_text
              msg = (  "The included urlconf '{name}' does not appear to have any "  "patterns in it. If you see valid patterns in the file then "  "the issue is probably caused by a circular import."  )
   def n ( self ) :
 g = generator . Generator ( fp , mangle_from_ = False )
    class TimeInput ( DateTimeBaseInput ) :
  except NoReverseMatch :
    decode = curry ( _proxy_method , method = bytes . decode )
  return self . __cast ( ) != other
   def handle_noargs ( self , ** options ) :
  return self . nodelist_false . render ( context )
 self . _num_pages = self . _count = None
          return ''
   def end_index ( self ) :
              raise CommandError ( "App '%s' does not have migrations (so squashmigrations on it makes no sense)" % app_label )
 try :
  def write ( self , outfile , encoding ) :
   try :
   def run_from_argv ( self , argv ) :
          if sender and getattr ( sender , 'handles_files' , False ) :
  out = text [ : end_text_pos ]
      year_days = [ None , 0 , 31 , 59 , 90 , 120 , 151 , 181 , 212 , 243 , 273 , 304 , 334 ]
                                  self . stdout . write ( "    No custom SQL for %s.%s model\n" % ( app_name , model . _meta . object_name ) )
                  sent = self . _send ( message )
      import threading
     def IE_sanitize ( self , filename ) :
                      found = getattr ( found , frag )
 import os
 INFO = 20
     role , instructions = part . split ( '=' )
                    continue
   class BadSerializer ( object ) :
  return initial_forms
              self . empty_label = None
   class CommandError ( Exception ) :
 if min_length is not None :
  from itertools import chain
  check_for_migrations ( app_config , connection )
                  if status != STATUS_OK :
           self . verbosity = options . get ( 'verbosity' )
   if not language_code_re . search ( accept_lang ) :
      def advance_iterator ( it ) :
      try :
 self . to_field = kwargs . pop ( "to_field" , None )
   @ property
  return False
          return mod . register
                      result = ( template , make_origin ( display_name , loader , name , dirs ) )
  except Exception :
 if lang_code in _supported and lang_code is not None and check_for_language ( lang_code ) :
  result = [ '' ]
 del bits [ : 1 ]
              return
         def fix_location_header ( request , response ) :
 n = getattr ( lookup_view , '__name__' , None )
 def __newobj__ ( cls , * args ) :
  return nodelist
      _version = "0.91"
 value = self . _convert_to_charset ( value , 'latin-1' , mime_encode = True )
 from django . utils . six . moves import reduce
    def reset_translations ( ) :
      pytz = None
 TOKEN_VAR = 1
 token = parser . next_token ( )
              msg = "Invalid HTTP_HOST header: %r." % host
 code = 'min_value'
   def open ( self ) :
  from django . conf import settings
          value = self . get ( key , version = version )
 keys = _iterkeys
 msg = SafeMIMEMultipart ( _subtype = self . alternative_subtype , encoding = encoding )
                  if self . allow_files :
                  self . literal = int ( self . literal )
 self . name = name
              checks = [ check for check in self . registered_checks  if hasattr ( check , 'tags' ) and set ( check . tags ) & set ( tags ) ]
  self . feed = {  'title' : to_unicode ( title ) ,  'link' : iri_to_uri ( link ) ,  'description' : to_unicode ( description ) ,  'language' : to_unicode ( language ) ,  'author_email' : to_unicode ( author_email ) ,  'author_name' : to_unicode ( author_name ) ,  'author_link' : iri_to_uri ( author_link ) ,  'subtitle' : to_unicode ( subtitle ) ,  'categories' : categories or ( ) ,  'feed_url' : iri_to_uri ( feed_url ) ,  'feed_copyright' : to_unicode ( feed_copyright ) ,  'id' : feed_guid or link ,  'ttl' : ttl ,  }
 for ch in input_iter :
  else :
     class TimestampSigner ( Signer ) :
   class warn_about_renamed_method ( object ) :
  except ( ValueError , KeyError ) :
                  if os . path . basename ( candidate ) in targets :
          bad_serializer = BadSerializer ( exc )
          self . test_runner = None
   class Command ( BaseCommand ) :
  else :
 for field , messages in errors . error_dict . items ( ) :
 match = self . regex . search ( path )
          split = [ ]
   return self . _num_pages
   return new_name , field_params , field_notes
 if self . feed [ 'author_name' ] is not None :
 while self . tokens :
          _supported = OrderedDict ( settings . LANGUAGES )
 parser . add_argument ( '--pythonpath' ,  help = 'A directory to add to the Python path, e.g. "/home/djangoprojects/myproject".' )
 if not bytes :
 raise NotImplementedError ( 'may be implemented in a future release' )
 self . _dir = os . path . abspath ( dir )
  def __init__ ( self , parent_instance , * args , ** kwargs ) :
 super ( TypedMultipleChoiceField , self ) . __init__ ( * args , ** kwargs )
   else :
  register = Library ( )
 compatibility = 'compatibility'
   @ property
 def is_rendered ( self ) :
              context [ self . asvar ] = url
 from django . utils . six . moves import input
  except IOError as e :
     def learn_cache_key ( request , response , cache_timeout = None , key_prefix = None , cache = None ) :
 return [ mark_safe ( force_text ( obj ) ) for obj in value ]
     class ModelChoiceIterator ( object ) :
      def __init__ ( self , data = None , files = None , auto_id = 'id_%s' , prefix = None ,  initial = None , error_class = ErrorList , label_suffix = None ,  empty_permitted = False , instance = None ) :
 if to :
                  field_value = getInnerText ( node ) . strip ( )
 table = connections [ db ] . ops . quote_name ( self . _table )
      if PY3 :
   self . _post_parse_error = False
  from django . core . mail . backends . base import BaseEmailBackend
 pass
 from django . core . mail . utils import DNS_NAME
 return "%s: %s%s%s" % ( obj , id , self . msg , hint )
                              pass
 pattern_iter = next_char ( iter ( pattern ) )
   def ngettext ( singular , plural , number ) :
 super ( WSGIRequestHandler , self ) . __init__ ( * args , ** kwargs )
    def make_style ( opts = ( ) , ** kwargs ) :
 return self . choice_input_class ( self . name , self . value , self . attrs . copy ( ) , choice , idx )
 if last == 1 :
 return [ field for field in self if field . is_hidden ]
  import os
  level = 0
 class ChoiceFieldRenderer ( object ) :
  from django . forms . utils import *
    class DjangoSafeDumper ( SafeDumper ) :
                   content = content . message ( )
  def _get_image_dimensions ( self ) :
              settings . INSTALLED_APPS
   @ upload_handlers . setter
 def __init__ ( self , urlconf_name , default_kwargs = None , app_name = None , namespace = None ) :
 return True
 if self . _leftover :
  urlquote = allow_lazy ( urlquote , six . text_type )
                      week_number -= 1
     if errors :
      ugettext = gettext
 if not data :
                      if p . find ( ':_(' ) >= 0 :
 if _time . daylight :
 self . children = [ obj , data ]
              if not hasattr ( e , 'django_template_source' ) :
   def B ( self ) :
          self . _container . append ( self . make_bytes ( content ) )
          self . _encoding = value
  else :
                  return fext
                  result . append ( ch )
 pass
  import os
                error = ValidationError ( error )
              return initial
 opts = model . _meta
 if not url_fields [ 0 ] :
 return form
  except ImportError as e :
              if attr in obj_dict :
   class ArchiveException ( Exception ) :
 commands . update ( { name : app_config . name for name in find_commands ( path ) } )
  else :
     if os . path . exists ( name ) :
     class MultipleChoiceField ( ChoiceField ) :
              app_configs = None
              media_attrs = kwargs
              filename = filename [ : - 1 ]
              with codecs . open ( sql_file , 'r' , encoding = settings . FILE_CHARSET ) as fp :
  from django . conf import settings
 pk_field = self . model . _meta . pk
   kwargs [ "required" ] = False
     def deactivate_all ( ) :
    if hasattr ( hmac , "compare_digest" ) :
  except ( OverflowError , ValueError ) as exc :
 parser . add_argument ( '-a' , '--all' , action = 'store_true' , dest = 'use_base_manager' , default = False ,  help = "Use Django's base manager to dump all models stored in the database, "  "including those that would otherwise be filtered or modified by a custom manager." )
                  return func ( context , self . first )
          arg = int ( arg )
  else :
   class ContextPopException ( Exception ) :
 from django . utils import formats , six
 dig1 . update ( u )
  if isinstance ( value , datetime . datetime ) :
   if isinstance ( boundary , six . text_type ) :
 from django . utils . _os import safe_join , abspathu
  return _make_decorator
              if not form . has_changed ( ) :
 return None
                          for handler in handlers :
 @ stringfilter
 defaults [ 'files' ] = self . files
              if shutdown_message :
                      fh . write ( writer . as_string ( ) )
          return len ( self . items )
 class RegexValidator ( object ) :
  if getattr ( ev , 'filename' , None ) is None :
 def __init__ ( self , attrs = None , choices = ( ) ) :
   class Command ( BaseCommand ) :
 parser . delete_first_token ( )
    from django . conf import settings
  if self . use_argparse :
 self . params = params
              raise ValidationError (  self . error_messages [ 'invalid_choice' ] ,  code = 'invalid_choice' ,  params = { 'value' : value } ,  )
              return None
   root = config . get ( 'root' , None )
 import sys
 _iteritems = "items"
            if self . _request_middleware is None :
          if instance is None :
  FILE_MODIFIED = 1
  except ( ValueError , TypeError ) :
 sec = int ( m . group ( 'sec' ) )
          BaseCache . __init__ ( self , params )
              value = getattr ( obj , field . get_attname ( ) )
                  raise ValidationError (  self . error_messages [ 'invalid_pk_value' ] ,  code = 'invalid_pk_value' ,  params = { 'pk' : pk } ,  )
 return mark_safe ( '\n' . join ( [ six . text_type ( self . management_form ) , forms ] ) )
 for refto , refs in references . items ( ) :
      setattr ( _MovedItems , attr . name , attr )
  return self . _body
   USE_INOTIFY = False
 import zlib
 base = force_text ( base )
   def render ( self , context ) :
    except ValueError :
              raise AttributeError ( "'%s' object has no attribute 'ordered_forms'" % self . __class__ . __name__ )
  else :
  finally :
  as_form = True
          output . extend ( custom_sql_for_model ( model , style , connection ) )
 if params . get ( 'filename' ) :
                  if isinstance ( value , str ) :
 def phone2numeric_filter ( value ) :
  except ( ValueError , TypeError ) :
    @ python_2_unicode_compatible
          if code_changed ( ) :
     class MultiValueDictKeyError ( KeyError ) :
 if six . PY3 :
  if kwargs is None :
              raise CommandError ( "couldn't extract file %s to %s: %s" %  ( filename , tempdir , e ) )
 from django . utils . module_loading import module_has_submodule
   else :
   template_source_loaders = tuple ( loaders )
 super ( NoArgsCommand , self ) . __init__ ( )
  import os
          _anonymous_ = [ '_offset' ]
 response [ 'Cache-Control' ] = cc
 val = self . _cache . get ( key )
  if isinstance ( loader , six . string_types ) :
 s = m . group ( 0 )
   def validate_name ( self , name , app_or_project ) :
 opt_dict = { 'bold' : '1' , 'underscore' : '4' , 'blink' : '5' , 'reverse' : '7' , 'conceal' : '8' }
      from django . utils . six . moves import cPickle as pickle
              return
                  return default
   def get ( self , key , default = None ) :
   else :
    if isinstance ( self . regex , six . string_types ) :
 from django . conf import settings
              continue
   def __eq__ ( self , other ) :
              pass
              continue
  template_with_clear = '%(clear)s <label for="%(clear_checkbox_id)s">%(clear_checkbox_label)s</label>'
              args = [ 'msgmerge' ] + self . msgmerge_options + [ pofile , potfile ]
              return self . _urlconf_module
 global _translations
    def _load_serializers ( ) :
          from django import VERSION as version
              self . connection = connection_class ( self . host , self . port , ** connection_params )
      return lazy_number ( npgettext , six . text_type , context = context , singular = singular , plural = plural , number = number )
              basedirs . append ( os . path . join ( app_config . path , 'locale' ) )
 from importlib import import_module
 self . tags = { }
   extra_attrs = self . widget_attrs ( widget )
                  del self . _cache [ key ]
  pofile = os . path . join ( basedir , '%s.po' % str ( self . domain ) )
    def _unpack_ipv4 ( ip_str ) :
      print ( FASTCGI_HELP )
   class Storage ( object ) :
   def _iteritems ( self ) :
 namemap = options . get ( 'with' , { } )
    def get_language ( ) :
                          pk_value = None
     def __deepcopy__ ( self , memo ) :
 pass
   class BaseMemcachedCacheMethods ( RenameMethodsBase ) :
              return self . stream . getvalue ( )
  except KeyError :
   elif count > 1 :
                    return self . data . tzinfo . tzname ( self . data ) or ""
   def filter ( self , record ) :
              raise ValueError ( "Key '%s' not found" % key )
          return repr ( self . dicts )
                  return True
                  pieces . append ( force_text ( getattr ( self , piece ) ( ) ) )
  return _wrapper
 from threading import local
    def normalize ( pattern ) :
 self [ 'Location' ] = iri_to_uri ( redirect_to )
           return timezone . localize ( value , is_dst = None )
          cache_timeout = 0
 self . remaining = limit
                       value . decode ( charset )
  try :
   def write_migration_files ( self , changes ) :
 self . url = iri_to_uri ( url )
              return host
          for first_select in _parse_date_fmt ( ) :
     class Template ( object ) :
 self . _current = None
  else :
 args = [ arg . resolve ( context ) for arg in self . args ]
 import sys
              return self . _size
    sequence = parser . compile_filter ( bits [ in_index + 1 ] )
      def send_messages ( self , email_messages ) :
   compile_func . __doc__ = func . __doc__
              handler . addQuickElement ( "copyright" , self . feed [ 'feed_copyright' ] )
  else :
                  error_messages = self . fields [ field ] . error_messages
 if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
 self . name = name
   if i == 0 and not is_writable ( npath ( base_path + '.mo' ) ) :
 return result
    return output
  bits = urlsplit ( location )
  from django . core . management . base import BaseCommand
  if isinstance ( f , ManyToManyField ) :
 i = i % j
    class URLInput ( TextInput ) :
  if i >= self . initial_form_count ( ) and self . initial_extra :
              return result
                  if old_attr is None :
                  raise CommandError ( "Incompatible values of 'leave_locale_alone' "  "(%s) and 'can_import_settings' (%s) command "  "options." % ( self . leave_locale_alone ,  self . can_import_settings ) )
   def set_many ( self , data , timeout = DEFAULT_TIMEOUT , version = None ) :
                  raise TypeError ( "end must be None or a string" )
          nesting = 1
                          for c in lineno_comment_map [ comment_lineno_cache ] :
 flup_module += '_fork'
  self . style = no_style ( )
 DIGIT_PATTERN = re . compile ( r'^\d+$' )
   if self . to_field :
  try :
 if isinstance ( other_dict , MultiValueDict ) :
  elif msg and visible_issue_count :
      import termios
      if used_name != guessed_filename :
 res = to_digits [ digit ] + res
 from django . utils import timezone , six
                  self . _callback_strs . add ( pattern . _callback_str )
 return bool ( self . children )
              questioner = MigrationQuestioner ( defaults = { 'ask_merge' : True } )
    if display_num_errors :
  return value
          self . app_or_project = app_or_project
                 return context [ 'forloop' ]
  MEDIA_TYPES = ( 'css' , 'js' )
 for possibility , pattern , defaults in possibilities :
  setattr ( cls , k , meth )
   def __getinitargs__ ( self ) :
   class classonlymethod ( classmethod ) :
    if settings . is_overridden ( 'TEMPLATE_LOADERS' ) :
      from yaml import CSafeLoader as SafeLoader
   try :
      error_class = ValueError
 import re
  return value
   else :
                       field_value = [ getInnerText ( k ) . strip ( ) for k in keys ]
              handler . addQuickElement ( "link" , '' ,  { "rel" : "enclosure" ,  "href" : item [ 'enclosure' ] . url ,  "length" : item [ 'enclosure' ] . length ,  "type" : item [ 'enclosure' ] . mime_type } )
  except Exception as e :
  msg = ""
              raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
   return value
   if strings_only and is_protected_type ( s ) :
              return list ( self . iterlists ( ) )
  import time
 from django . utils . functional import total_ordering
  import copy
          self . _stream = stream
 if isinstance ( widget , NumberInput ) :
  datetime_re = re . compile (  r'(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})'  r'[T ](?P<hour>\d{1,2}):(?P<minute>\d{1,2})'  r'(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?'  r'(?P<tzinfo>Z|[+-]\d{2}(?::?\d{2})?)?$'  )
 from django . utils . module_loading import import_string
  return super ( SimpleTemplateResponse , self ) . content
          is_dst = False if dt is None else self . _isdst ( dt )
 if isinstance ( choice_label , ( tuple , list ) ) :
  if invalid_var_format_string :
 from django . utils import six
 if imatch :
                  absolute_path = path . abspath ( expanded_template )
 from django . db . migrations . executor import MigrationExecutor
 break
                              return settings . TEMPLATE_STRING_IF_INVALID % self . var
  self . stream . write ( '%s\n' % msg_data )
     def prepare_js_for_gettext ( js ) :
              self . stdout . write ( "Loading '%s' fixtures..." % fixture_name )
  return self . field . prepare_value ( data )
  targets = [ ( app_label , migration . name ) ]
 chunks = [ ]
   for entry in package_path :
          is_accept_language_redundant = settings . USE_I18N or settings . USE_L10N
                  new_value . append ( self . coerce ( choice ) )
 condition = TemplateIfParser ( parser , bits ) . parse ( )
 if item [ 'description' ] is not None :
  return self . limit_choices_to
              self . months = months
 from __future__ import unicode_literals
 if path . exists ( new_path ) :
  elif field in self . fields :
 return '%02d' % calendar . monthrange ( self . data . year , self . data . month ) [ 1 ]
 def __init__ ( self , producer , length = None ) :
  def __init__ ( self , queryset , cache_choices = None , required = True ,  widget = None , label = None , initial = None ,  help_text = '' , * args , ** kwargs ) :
 if root :
   def remove_potfiles ( self ) :
   def reset ( self ) :
          if location is None :
 def callback ( self ) :
              if template . startswith ( 'file://' ) :
          from pprint import pformat
 self . stream . write ( b'\n' )
  since = delta . days * 24 * 60 * 60 + delta . seconds
          obj = getattr ( models . signals , name )
 self . _regex_dict = { }
  for potfile in potfiles :
                          len_item = 1
   app_list_value = app_list . setdefault ( app_config , [ ] )
 memo [ id ( self ) ] = result
                              _file . close ( )
 result = self . configurator . convert ( value )
 if callable ( data ) :
  from django . db . models . fields import Field as ModelField
      if self . verbosity >= 1 :
   if errors_on_separate_row and bf_errors :
      if palette == PALETTES [ NOCOLOR_PALETTE ] :
  target_app_labels_only = False
 self . use_tz = use_tz
        script_url = get_bytes_from_wsgi ( environ , 'SCRIPT_URL' , '' )
  self . from_email = from_email or settings . DEFAULT_FROM_EMAIL
 msg = "Unclosed tag '%s'. Looking for one of: %s " % ( command , ', ' . join ( parse_until ) )
  raise DisallowedHost ( msg )
  if not response . has_header ( 'Expires' ) :
                          raise TemplateSyntaxError (  "'%s' received too many positional arguments" %  name )
              value = [ ]
 self . value = value
       for app_config in apps . get_app_configs ( ) :
 def url ( parser , token ) :
   def _create_mime_attachment ( self , content , mimetype ) :
    if not self . use_ssl and self . use_tls :
  except ValueError :
 from django . forms . utils import from_current_timezone , to_current_timezone
     class override ( object ) :
  except ImportError :
          if cmd . endswith ( ext ) :
   hextets = ip_str . split ( ':' )
              return 'StopUpload: Halt current upload.'
      errors = [ ]
  handlers = config . get ( 'handlers' , None )
   def clear_url_caches ( ) :
 from email . header import Header
 if not name :
          asvar = bits [ - 1 ]
           return super ( PythonSerializer , self ) . getvalue ( )
              hextets = [ '' ] + hextets
    if '.' not in var and 'e' not in var . lower ( ) :
 if self . __language == settings . LANGUAGE_CODE :
    return False
          warnings . warn (  "NoArgsCommand class is deprecated and will be removed in Django 2.0. "  "Use BaseCommand instead, which takes no arguments by default." ,  RemovedInDjango20Warning  )
                              out . write ( blankout ( part , 'S' ) )
  if name not in parser . _namedCycleNodes :
   _cached_modules = _cached_modules . union ( new_modules )
  try :
          self . form = form
  else :
              apps . get_model ( 'auth' , 'Permission' )
 while remaining_bits :
          if accept_lang == '*' :
      return _trans . check_for_language ( lang_code )
  from django . utils . deprecation import RemovedInDjango19Warning
                      self . empty_block_tag ( token )
 return d ( stream_or_string , ** options )
                  current_fields . append ( ( key , value ) )
                  return dict_ [ key ]
     @ classmethod
          return value
                  stream_created = self . open ( )
               pass
  except ImportError :
  related = related . natural_key ( )
    def sql_delete ( app_config , style , connection , close_connection = True ) :
 if not squash :
       for name , field in self . fields . items ( ) :
   def __repr__ ( self ) :
 if template_source_loaders is None :
          if value in self . empty_values :
    count = itertools . count ( 1 )
                      data [ f . name ] = list ( qs . values_list ( 'pk' , flat = True ) )
              sys . stdout = NullDevice ( )
  def to_python ( self , value ) :
          self . parent_widget = parent_widget
   if len ( name ) > 255 :
          self . loopvars , self . sequence = loopvars , sequence
                  raise
 if processors is None :
   elif bmatch :
  if item [ 'pubdate' ] is not None :
              return False
 return MONTHS [ self . data . month ]
  if not dklen :
 from django . utils . deprecation import RemovedInDjango19Warning
   def empty_variable ( self , token ) :
              return Context ( context )
                  raise TemplateSyntaxError ( "%r must be the first tag "  "in the template." % node )
 from django . template . loader import BaseLoader
   def lists ( self ) :
              self . stderr . write ( msg )
  else :
                  for pythonrc in ( os . environ . get ( "PYTHONSTARTUP" ) , '~/.pythonrc.py' ) :
              rest = rest [ m . end ( ) : ]
       self . _is_rendered = False
 try :
          self . format_string = format_string
                       name = self . get_available_name ( name )
                  format = color_settings . get ( role , { } )
   if sublist_item :
  def nud ( self , parser ) :
      class CacheClass ( FileBasedCache ) :
 from django . utils . module_loading import module_has_submodule
      class TemporaryFile ( FileProxyMixin ) :
 raise CommandError ( "Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'" % name_str )
   def U ( self ) :
   @ content . setter
 thread . start_new_thread ( main_func , args )
 if not template_name_list :
          try :
                  result . parent = self
                  result . parent = self
 for smigration in migrations_to_squash :
 output = [ ]
 existing = list ( root . manager . loggerDict )
 pass
 content_type = content_type . strip ( )
      if isinstance ( value , bytes ) :
 self . exclude = getattr ( options , 'exclude' , None )
          parser . add_argument ( 'app_label' ,  help = 'App label of the application containing the migration.' )
              return
   def path ( self , name ) :
 result = result [ : start ] + [ inner ]
 kwargs = { }
          final_attrs = dict ( self . attrs , type = self . input_type , name = self . name , value = self . choice_value )
 return str ( dict ( self . items ( ) ) )
 if inplural :
      SimpleCookie = http_cookies . SimpleCookie
  escapejs = allow_lazy ( escapejs , six . text_type )
 existing_headers = set ( header . lower ( ) for header in vary_headers )
              return debug . technical_500_response ( request , * exc_info )
    def available_attrs ( fn ) :
    except ValueError :
                          out . write ( ' %s ' % p . split ( ':' , 1 ) [ 1 ] )
  self . stream . write ( "[" )
              fail_message = 'created'
  else :
              if saved_locale is not None :
      def _setup ( self ) :
      def b ( s ) :
 leave_locale_alone = True
 return SpacelessNode ( nodelist )
 try :
                  week_number = 53
              return bytes ( value . encode ( self . _charset ) )
          offset = date . tzinfo . utcoffset ( date )
                  return getattr ( self , shell ) ( )
   class Loader ( BaseLoader ) :
  if not data and initial :
              return exit_code
   while token . contents . startswith ( 'elif' ) :
    @ wraps ( func )
    def parse_bits ( parser , bits , params , varargs , varkw , defaults ,  takes_context , name ) :
   def A ( self ) :
          self . objects . append ( self . get_dump_object ( obj ) )
      EscapeString = EscapeText
              timestamp = datetime . datetime . now ( ) . strftime ( "%Y%m%d-%H%M%S" )
  else :
  except AttributeError :
   def widget_attrs ( self , widget ) :
    def load_template_source ( self , template_name , template_dirs = None ) :
  elif isinstance ( o , datetime . date ) :
          if value is None :
          self . file_name = None
              try :
 for processor in get_standard_processors ( ) + processors :
   _default = None
 return ''
 yield "# Feel free to rename the models, but don't rename db_table values or field names."
              return list ( self . iteritems ( ) )
 if self . save_as_new :
                  logger . removeHandler ( h )
   def handle ( self , * fixture_labels , ** options ) :
 oldroot [ RESULT ] = result
   class InvalidCacheBackendError ( ImproperlyConfigured ) :
    def pop ( self , name ) :
 from django . core . signals import request_finished
  except Exception :
    def activate ( language ) :
                  self . stdout . write ( "No fixture '%s' in %s." %  ( fixture_name , humanize ( fixture_dir ) ) )
  else :
 comment = [ ]
          return ( len ( self . queryset ) +  ( 1 if self . field . empty_label is not None else 0 ) )
   while '<' in value and '>' in value :
 return parser . parse ( )
 return obj
              file_name = data . name
      class DebugNodeList ( NodeList ) :
    class FieldError ( Exception ) :
              if '.' in exclude :
    exec_ ( """def reraise(tp, value, tb=None):     raise tp, value, tb """ )
               break
          super ( InMemoryUploadedFile , self ) . __init__ ( file , name , content_type , size , charset , content_type_extra )
      def __init__ ( self , dirpath , file_name , locale_dir ) :
 from django . utils import datastructures
          name = args [ - 1 ]
               raise
 output = [ ]
  if boundary :
              if not callable ( view_func ) :
  return get_template ( parent )
      @ register . tag ( 'block' )
  key = self . to_field_name or 'pk'
                  raise CommandError ( "You must supply at least one app label when using --empty." )
          attrs = [ "__doc__" , "__name__" ]
  output_transaction = True
                  palette [ role ] = definition
 import hashlib
 try :
  if not file_name :
          instance = super ( SortedDict , cls ) . __new__ ( cls , * args , ** kwargs )
              continue
 class FileSystemStorage ( Storage ) :
 self . error_class = error_class
 value = super ( IntegerField , self ) . to_python ( value )
  except ( ValueError , TypeError ) :
  else :
             self . _request = request
          return not self . file or self . file . closed
 val2 = parser . compile_filter ( bits [ 2 ] )
          lbp = bp
                      attrs [ 'class' ] = self . form . required_css_class
   def extract ( self , to_path ) :
  for slots_var in slots :
 def errors ( self ) :
    if is_protected_type ( value ) :
  self . cache_model_class = CacheEntry
              fext = f + ext
  else :
 self . backout = [ ]
  except TemplateSyntaxError as e :
  elif len ( bits ) == 6 :
                  clean_data . append ( field . clean ( field_value ) )
 return wrap ( value , int ( arg ) )
    if isinstance ( message , dict ) :
              if self . min_value is not None :
 if CONTEXT_SEPARATOR in result :
                  int_part_gd += thousand_sep
    @ register . filter ( is_safe = True )
  if not host_validation_re . match ( host ) :
 if not hasattr ( translation , '_catalog' ) :
 decompress = False
      child_nodelists = ( 'nodelist_true' , 'nodelist_false' )
 if '%(truncated_text)s' in truncate :
 result = ungettext ( * msgs_with_ctxt )
 cache [ mem_args ] = result
   @ property
  if force_text ( value ) != force_text ( orig ) :
          nodelist_empty = None
          try :
  factory = klass
  elif self . _delegate_text :
 @ stringfilter
      if self . ignore and field_name not in model_fields :
                      raise
          self . _archive . extract ( to_path )
   def __str__ ( self ) :
 try :
                      if latest_date is None or item_date > latest_date :
  in_tag = not in_tag
   if hasattr ( f , 'seek' ) and callable ( f . seek ) :
              settings . BASE_DIR
    context_re = re . compile ( r"""^\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?'))\s*""" )
  db_module = 'django.db'
  self . _meta = META
          super ( HttpResponse , self ) . __init__ ( * args , ** kwargs )
 if value in ( True , 'True' , '1' ) :
     class ConvertingTuple ( tuple ) :
 return new_context
from __future__ import unicode_literals
  return meta ( name , bases , d )
          return unbound
          return EscapeBytes ( s )
 return name + '-clear'
          if self . field . empty_label is not None :
 if data in self . children :
     class CallbackFilter ( logging . Filter ) :
            return '%s%s' % ( self . path , ( '?' + iri_to_uri ( self . META . get ( 'QUERY_STRING' , '' ) ) ) if self . META . get ( 'QUERY_STRING' , '' ) else '' )
              nodes . extend ( node . get_nodes_by_type ( nodetype ) )
 from django . db . migrations . loader import MigrationLoader , AmbiguityError
          self . msg = msg
 if not hasattr ( other_dict , '__getitem__' ) :
              data [ Model . _meta . pk . attname ] = Model . _meta . pk . to_python ( d . get ( "pk" , None ) )
              if six . PY2 :
              raise CommandError ( "Can't resolve dependencies for %s in serialized app list." %  ', ' . join ( '%s.%s' % ( model . _meta . app_label , model . _meta . object_name )  for model , deps in sorted ( skipped , key = lambda obj : obj [ 0 ] . __name__ ) )  )
 if token . contents == 'else' :
  from datetime import timedelta , tzinfo
 extra_params . update ( field_params )
  strip_entities = allow_lazy ( strip_entities , six . text_type )
  return translation
  app_models = router . get_migratable_models ( app_config , connection . alias )
   def h ( self ) :
    return msgs
 return isinstance ( obj , _PROTECTED_TYPES )
          new_class = ( super ( MediaDefiningClass , mcs )  . __new__ ( mcs , name , bases , attrs ) )
  app_dir = os . path . join ( app_config . path , 'fixtures' )
    def delete ( self , key , version = None ) :
              url = urlunsplit ( ( scheme , netloc , path , query , fragment ) )
   return urljoin ( prefix , path )
              @ wraps ( fget )
                              d = d [ idx ]
              c = SimpleCookie ( )
                  e . django_template_source = self . source
 try :
          script_name = get_bytes_from_wsgi ( environ , 'SCRIPT_NAME' , '' )
          if response . streaming :
from __future__ import unicode_literals
   headers = [  ( b': ' . join ( [ to_bytes ( key , 'ascii' ) , to_bytes ( value , 'latin-1' ) ] ) )  for key , value in self . _headers . values ( )  ]
   def widget_attrs ( self , widget ) :
      if module_has_submodule ( app_config . module , module_to_search ) :
  except KeyError :
  upto = match . end ( )
   def javascript_quote ( s , quote_double_quotes = False ) :
          return list ( reversed ( modules ) )
                  before_import_registry = copy . copy ( register_to . _registry )
  del attr
              return ( t [ 0 ] . lower ( ) , True )
 if autoescape :
 level = config . get ( 'level' , None )
 self . error_messages = messages
  update_wrapper ( _wrapper , func )
 return avoid_wrapping ( value )
   next = advance_iterator
             self . template_name = template
                      plural . append ( contents )
          def parts ( ) :
 return remove_tags ( value , tags )
              raise TemplateSyntaxError ( "'for' tag received an invalid argument:"  " %s" % token . contents )
 if language in _DJANGO_DEPRECATED_LOCALES :
          raise TemplateSyntaxError ( "'now' statement takes one argument" )
          from django . utils . html import strip_spaces_between_tags
              if ord ( char ) < 33 or ord ( char ) == 127 :
           int2byte = operator . methodcaller ( "to_bytes" , 1 , "big" )
 key = self . cache_key ( name , dirs )
 def firstof ( parser , token ) :
 def urlizetrunc ( value , limit , autoescape = None ) :
 return data
          super ( SortedDict , self ) . __delitem__ ( key )
  try :
 max_value = float ( max_value )
                 tok = tok . replace ( "\\" , "U" )
 field_params [ 'decimal_places' ] = row [ 5 ] if row [ 5 ] is not None else 5
    @ register . filter ( is_safe = True , needs_autoescape = True )
 ns_pattern = ns_pattern + extra
      self . _queryset = qs
          raise TemplateSyntaxError ( "second argument to 'regroup' tag must be 'by'" )
 if index_sql :
 self . body = body
 sys . stderr . write ( "  Unable to load the flup package.  In order to run django\n" )
 assert is_iterable ( new_errors ) , (  "The function %r did not return a list. All functions registered "  "with the checks registry must return a list." % check )
  try :
          return 'Raw content'
   def __copy__ ( self ) :
  handler . addQuickElement ( "id" , self . feed [ 'id' ] )
   def escapejs ( value ) :
 return "(" + " " . join ( out ) + ")"
 import errno
 if match :
                        self . children . extend ( data . children )
              current_uri = '{scheme}://{host}{path}' . format ( scheme = self . scheme ,  host = self . get_host ( ) ,  path = self . path )
 if connections [ db ] . features . needs_datetime_string_cast and not isinstance ( expires , datetime ) :
 return make_middleware_decorator ( middleware_class ) ( )
                                  with transaction . atomic ( using = connection . alias ) :
 self . run_validators ( value )
 def __init__ ( self , name , content , content_type = 'text/plain' ) :
     class FileInput ( Input ) :
  if i >= self . initial_form_count ( ) and not form . has_changed ( ) :
  else :
              self . __offset = offset
     class Form ( six . with_metaclass ( DeclarativeFieldsMetaclass , BaseForm ) ) :
                  return ugettext_lazy ( value )
 if num > self . _max_entries :
              sys . stdout . write ( django . get_version ( ) + '\n' )
 return { '2' : True ,  True : True ,  'True' : True ,  '3' : False ,  'False' : False ,  False : False } . get ( value , None )
   get_format_lazy = lazy ( get_format , six . text_type , list , tuple )
          orig_vars = cls . __dict__ . copy ( )
  return list ( self )
              base_url += '/'
          name , val = forbid_multi_line_headers ( name , val , self . encoding )
  if i < self . initial_form_count ( ) and 'instance' not in kwargs :
 UnlockFileEx . argtypes = [ HANDLE , DWORD , DWORD , DWORD , LPOVERLAPPED ]
      from pkg_resources import resource_string
  self . _cache [ key ] = value
   kwargs = { }
 for key in keys :
                  self . test_runner = arg [ len ( option ) : ]
   UserModel = get_user_model ( )
  else :
              value = ConvertingList ( value )
          def __new__ ( cls , * args , ** kwargs ) :
                      message %= error . params
              max_width = min ( ( line . endswith ( '\n' ) and width + 1 or width ) , width )
              encode = lambda k , v : urlencode ( { k : v } )
          if not self . render_value :
   def __repr__ ( self ) :
                      for fmatch in constant_re . findall ( t . contents ) :
 del options [ 'liveserver' ]
 six . reraise ( ImproperlyConfigured , ImproperlyConfigured ( msg ) ,  sys . exc_info ( ) [ 2 ] )
 self . widgets = getattr ( options , 'widgets' , None )
  return int ( values [ 0 ] ) , ch
   args = [ self . program ] + self . program_options + [ '-o' ,  npath ( base_path + '.mo' ) , npath ( base_path + '.po' ) ]
  else :
   class Command ( BaseCommand ) :
          return force_text ( list_ [ 0 ] )
              sys . stdout = open ( out_log , 'a' , buffering )
      def exhaust ( stream_or_iterable ) :
  if isinstance ( value , list ) :
     from django . utils import translation
 def truncatechars ( value , arg ) :
              client . behaviors = self . _options
  else :
 break
 stream . unget ( chunk [ next : ] )
                              terminal_char = '>'
                              if not hasattr ( e , 'django_template_source' ) :
 for key , value in data . items ( ) :
 if settings . USE_TZ :
 self . pointer = i
 from email . mime . message import MIMEMessage
                          if hasattr ( field_value , '__iter__' ) and not isinstance ( field_value , six . text_type ) :
   name = '.' . join ( parts )
 return data_set != initial_set
          return ( self . func , self . args , self . kwargs ) [ index ]
          daemon_kwargs [ 'out_log' ] = options [ 'outlog' ]
              m = re . match ( naiveip_re , options [ 'addrport' ] )
      def __init__ ( self , regex , callback , default_args = None , name = None ) :
 days = ( 'Mon' , 'Tue' , 'Wed' , 'Thu' , 'Fri' , 'Sat' , 'Sun' )
  def nud ( self , parser ) :
 resolver = urlresolvers . RegexURLResolver ( r'^/' , urlconf )
              mail . outbox = [ ]
 if version [ 3 ] == 'alpha' and version [ 4 ] == 0 :
          query = query . items ( )
  else :
          raise ImproperlyConfigured (  "Calling modelformset_factory without defining 'fields' or "  "'exclude' explicitly is prohibited."  )
 get_function_globals = operator . attrgetter ( _func_globals )
                   def wrapper ( * args , ** kwds ) :
  builtins = [ ]
      if not sys . warnoptions :
 obj . __class__ = cls
          fn = inotify_code_changed
   raise CommandError ( "Unknown serialization format: %s" % format )
    class SafeData ( object ) :
   return '\n' . join ( output )
 del attrs [ attr ]
 return ( ret == 0 )
  data [ field . attname ] = value
  else :
 sites1 = _findall ( s1 , str ( year ) )
 value = value . replace ( arg , '' )
 return value . rjust ( int ( arg ) )
  def __init__ ( self , choices = ( ) , required = True , widget = None , label = None ,  initial = None , help_text = '' , * args , ** kwargs ) :
 pass
      widget = TimeInput
 lib = get_library ( taglib )
  from django . utils import termcolors
              valid = False
      regex = re . compile (  r'^(?:[a-z0-9\.\-]*)://'  r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}(?<!-)\.?)|'  r'localhost|'  r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|'  r'\[?[A-F0-9]*:[A-F0-9:]+\]?)'  r'(?::\d+)?'  r'(?:/?|[/?]\S+)$' , re . IGNORECASE )
              raise CommandError ( "Error: %s" % message )
  if self . decimal_places is not None and decimals > self . decimal_places :
  return self . dicts . pop ( )
                          extracted . close ( )
    except IndexError :
  except AttributeError :
 for node in self :
          pass
  try :
from __future__ import unicode_literals
          kwargs = { }
   def has_key ( self , key ) :
                        pass
  try :
  chunk_size *= 2
 colors . reverse ( )
   self . xml . endElement ( "field" )
                  default_list = [ ]
          pass
 msg_count += 1
 for line in content . split ( "\n" ) :
              options , args = parser . parse_known_args ( self . argv [ 2 : ] )
          return 'ValidationError(%s)' % self
              categories = [ ( c ) for c in categories ]
                  result . parent = self
                      if extracted :
 return obj
  from __future__ import unicode_literals
 self . validate_key ( key )
              dec_part = dec_part [ : decimal_pos ]
  try :
 field_name = disposition [ 'name' ] . strip ( )
          module = importlib . import_module ( '.%s' % flup_module , 'flup' )
 readline = property ( lambda self : self . file . readline )
          self . _archive . close ( )
              raise TypeError
 default_error_messages = {  'invalid_choice' : _ ( 'The inline foreign key did not match the parent instance primary key.' ) ,  }
          return ContextDict ( self , * args , ** kwargs )
 buffer_ = None
          nm = Header ( nm , 'utf-8' ) . encode ( )
 return make_middleware_decorator ( middleware_class )
 from django . conf import settings
      return _trans . get_language_bidi ( )
   counters = [ 0 ] * len ( handlers )
  check_for_migrations ( app_config , connection )
    def __copy__ ( self ) :
     elif field in self . _errors . keys ( ) :
      if sys . version_info [ : 2 ] >= ( 3 , 4 ) :
      def exists ( self , name ) :
     class NumberInput ( TextInput ) :
 if pattern . app_name :
   attachment = SafeMIMEMessage ( content , subtype )
   update_watch ( )
              self . stream = open ( self . _get_filename ( ) , 'ab' )
    def inclusion_tag ( self , file_name , context_class = Context , takes_context = False , name = None ) :
   self . template_cache [ key ] = ( template , None )
 for obj in queryset :
  HTMLParseError = _html_parser . HTMLParseError
 if self . require_all_fields :
  self . regexes [ state ] = re . compile ( "|" . join ( parts ) , re . MULTILINE | re . VERBOSE )
                  m2m_value = lambda value : smart_text ( value . _get_pk_val ( ) , strings_only = True )
              exts = extensions if extensions else [ 'html' , 'txt' ]
  extra_classes = set ( extra_classes or [ ] )
   def get_field_type ( self , connection , table_name , row ) :
 for key , value in dict . items ( self ) :
                      if inplural :
   class EmailBackend ( ConsoleEmailBackend ) :
 if ( ( context . autoescape and not isinstance ( value , SafeData ) ) or  isinstance ( value , EscapeData ) ) :
 return self . file
       app_models = app_config . get_models ( include_auto_created = True )
 if not widget :
                  defaults [ 'initial' ] = self . initial [ i ]
  os . setsid ( )
              return bytes ( ( i , ) )
  return t
   else :
  elif item_type == FILE :
   def tzname ( self , dt ) :
              self . __args = args
   def validate ( self , value ) :
  elif action == "unapply_success" :
 import io
              self . file_path = getattr ( settings , 'EMAIL_FILE_PATH' , None )
              sys . stderr . write ( "fork #1 failed: (%d) %s\n" % ( e . errno , e . strerror ) )
   try :
              return self . file . close ( )
   klass . __new__ = staticmethod ( __new__ )
  if app_names :
 callback = getattr ( urls , 'handler%s' % view_type )
 if not self . leave_locale_alone :
   @ register ( Tags . compatibility )
               iter ( second_item )
     @ register . tag ( 'if' )
  return value
 line = line [ space : ]
  return numberformat . format (  value ,  get_format ( 'DECIMAL_SEPARATOR' , lang , use_l10n = use_l10n ) ,  decimal_pos ,  get_format ( 'NUMBER_GROUPING' , lang , use_l10n = use_l10n ) ,  get_format ( 'THOUSAND_SEPARATOR' , lang , use_l10n = use_l10n ) ,  force_grouping = force_grouping  )
    if hasattr ( request , 'session' ) :
 migration . merged_operations = [ ]
    def push ( self , name , block ) :
  return self . _object_dict . get ( pk )
 if value == self . empty_value or value in self . empty_values :
              six . reraise ( UnreadablePostError , UnreadablePostError ( * e . args ) , sys . exc_info ( ) [ 2 ] )
 if not self . connection :
                           old_field_name = field_name
 self . write_items ( handler )
 ignored = [ ]
    def get_git_changeset ( ) :
 utcdate = time . strftime ( '%Y%m%d%H%M%S' , time . gmtime ( timeval ) )
                  lookup_view = get_callable ( lookup_view , True )
   def validate ( self , value ) :
  elif field_type == 'IntegerField(' and not connection . features . can_introspect_autofield :
  requires_system_checks = False
          project_name , target = options . pop ( 'name' ) , options . pop ( 'directory' )
   def handle ( self , ** options ) :
 pass
              raise ValueError (  "EMAIL_USE_TLS/EMAIL_USE_SSL are mutually exclusive, so only set "  "one of those settings to True." )
              message . message ( )
 bad_app_labels = set ( )
              initial = bool ( initial )
     else :
              return True
      def jython_reloader ( main_func , args , kwargs ) :
 if not self . use_argparse :
  from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT
          pass
 from datetime import datetime
 admin = 'admin'
 def dictsortreversed ( value , arg ) :
                      return supported_code
 if not response . has_header ( 'Cache-Control' ) :
 if self . variable_name :
 parser . add_argument ( '--exclude' , '-x' , default = [ ] , dest = 'exclude' , action = 'append' ,  help = 'Locales to exclude. Default is none. Can be used multiple times.' )
 parser = self . create_parser ( prog_name , subcommand )
                      raise CommandError ( 'Unknown model in excludes: %s' % exclude )
  p_pattern = pattern . regex . pattern
       def get_format_modules ( lang = None , reverse = False ) :
                  self . _closable_objects . append ( value )
 s = s [ end : ]
 sys . stdin . close ( )
 bits = bits [ : - 2 ]
          script_url = get_bytes_from_wsgi ( environ , 'REDIRECT_URL' , '' )
  def __init__ ( self , dir , params ) :
              return self . forms [ 0 ] . media
 self . keep_pot = options . get ( 'keep_pot' )
              self . stdout . write ( "No conflicts detected to merge." )
   for locale in locales :
  except OSError as e :
                                  self . stdout . write ( "    Installing index for %s.%s model\n" % ( app_name , model . _meta . object_name ) )
              tmp = url . rstrip ( '/' )
                      warnings . warn (  "`%s.%s` method should be renamed `%s`." %  ( class_name , old_method_name , new_method_name ) ,  deprecation_warning , 2 )
 return re . sub ( r'&(?:\w+|#\d+);' , '' , force_text ( value ) )
          wsgi_opts = {  'maxSpare' : int ( options [ "maxspare" ] ) ,  'minSpare' : int ( options [ "minspare" ] ) ,  'maxChildren' : int ( options [ "maxchildren" ] ) ,  'maxRequests' : int ( options [ "maxrequests" ] ) ,  }
              return self . limit_choices_to ( )
  try :
 max_age = max ( 0 , delta . days * 86400 + delta . seconds )
 def streaming_content ( self , value ) :
 self . allow_files , self . allow_folders = allow_files , allow_folders
  if i >= len ( subject ) :
  return value
    class Lexer ( object ) :
              assert not isinstance ( to , six . string_types ) , '"to" argument must be a list or tuple'
 parser . add_argument ( '--no-default-ignore' , action = 'store_false' , dest = 'use_default_ignore_patterns' ,  default = True , help = "Don't ignore the common glob-style patterns 'CVS', '.*', '*~' and '*.pyc'." )
 new_context . _reset_dicts ( values )
              if name . lower ( ) in ( 'from' , 'to' ) :
              self . first = left
   field = Model . _meta . get_field ( field_name )
  except ( AttributeError , UnsupportedOperation ) :
 for field in self . fields . values ( ) :
 self . delete ( key , version = version )
                     f . required = False
                          rel_to = "self" if relations [ i ] [ 1 ] == table_name else table2model ( relations [ i ] [ 1 ] )
                  libraries [ library_name ] = lib
 all_date_checks = all_date_checks . union ( set ( date_checks ) )
 src = force_text ( src , settings . FILE_CHARSET )
 for key in sorted ( user_settings ) :
                  if path not in self . _js :
  else :
  if tok . next :
                          filters [ name ] = self . configure_filter ( filters [ name ] )
                  self . stdout . write ( self . style . MIGRATE_HEADING ( "Migrations for '%s':" % app_label ) + "\n" )
 pk_value = getattr ( self . instance , self . fk . rel . field_name )
  except UnicodeEncodeError :
    class InputStreamExhausted ( Exception ) :
   else :
   @ property
 with open ( writer . path , "wb" ) as fh :
 self . func = func
          return value
  self . help_text = field . help_text or ''
 from django . utils . crypto import constant_time_compare , salted_hmac
   def __repr__ ( self ) :
                              field_type = "ForeignKey('%s'" % rel_to
              field_output = [ qn ( f . name ) , f . db_type ( connection = connection ) ]
                    compare_to = [ var . resolve ( context , True ) for var in self . _varlist ]
     class GenericIPAddressField ( CharField ) :
  else :
   def iterkeys ( d , ** kw ) :
          exp = self . _expire_info . get ( key , - 1 )
 if charset == 'utf-8' :
                      if primary_keys :
   def __call__ ( self , value ) :
                  sys . exit ( 0 )
  def _text_chars ( self , length , truncate , text , truncate_len ) :
 self . files = files or { }
   if six . PY2 :
  import django
                    if int ( hextet , 16 ) < 0x0 or int ( hextet , 16 ) > 0xFFFF :
 paras = re . split ( '\n{2,}' , value )
 result = factory ( ** kwargs )
 if value in self . empty_values :
  if not chunk :
              self . DSTOFFSET = self . STDOFFSET
  if self . verbosity > 0 :
              func = import_string ( path )
              self . active_readers -= 1
  def start_serialization ( self ) :
  widget = self . field . widget
 index_output . append ( "CREATE %sINDEX %s ON %s (%s);" %  ( unique , qn ( '%s_%s' % ( tablename , f . name ) ) , qn ( tablename ) ,  qn ( f . name ) ) )
 pass
   class Command ( BaseCommand ) :
 def media ( self ) :
  if whitelist is not None :
  super ( SimpleCookie , self ) . load ( rawdata )
              return
 def do_with ( parser , token ) :
  def add_arguments ( self , parser ) :
      help = "Runs a Python interactive interpreter. Tries to use IPython or bpython, if one of them is available."
  val1 = parser . compile_filter ( bits [ 1 ] )
 import struct
              raise TypeError ( "If the flags are set, regex must be a regular expression string." )
   return tuple ( app_template_dirs )
   def eval ( self , context ) :
  return wrapper
 valid_forms = [ form for form in self . forms if form . is_valid ( ) and form not in forms_to_delete ]
  except IndexError :
    def clean ( self , value ) :
          evens = sum ( int ( c ) for c in candidate [ - 1 : : - 2 ] )
              raise ValidationError (  self . error_messages [ 'max_digits' ] ,  code = 'max_digits' ,  params = { 'max' : self . max_digits } ,  )
   activate = lambda x : None
  def add_item_elements ( self , handler , item ) :
              params = [ source [ 1 ] ]
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
    @ staticmethod
 from django . utils . deprecation import RemovedInDjango19Warning
 if arg is None :
  if response . has_header ( 'Vary' ) :
    def _explode_shorthand_ip_string ( ip_str ) :
 decorator = Node ( syms . decorator , [ Leaf ( token . AT , "@" ) , Name ( 'python_2_unicode_compatible' ) ] )
 for pos , elt in enumerate ( source ) :
  else :
 if os . path . exists ( pot_path ) :
   def render ( self , context ) :
              six . reraise ( UnreadablePostError , UnreadablePostError ( * e . args ) , sys . exc_info ( ) [ 2 ] )
  to_py = super ( ModelMultipleChoiceField , self ) . to_python
  if self . domain not in ( 'django' , 'djangojs' ) :
    def templatize ( src , origin = None ) :
 raise NotImplementedError ( 'subclasses of Tokenparser must provide a top() method' )
   new_key = self . key_func ( key , self . key_prefix , version )
  return False
                              if self . verbosity >= 2 :
    if x == 0 :
                  msg = ( "%(model)s.Meta.%(opt)s cannot be a string. "  "Did you mean to type: ('%(value)s',)?" % {  'model' : new_class . __name__ ,  'opt' : opt ,  'value' : value ,  } )
 self . chunk_size = chunk_size
    if six . PY3 :
 if change == FILE_MODIFIED :
 yield ''
 if '\n' in val or '\r' in val :
 ser_fmts = serializers . get_public_serializer_formats ( ) if ser_fmt is None else [ ser_fmt ]
 for filename in filelist :
              raise CommandError ( "currently makemessages only supports domains "  "'django' and 'djangojs'" )
      message = _ ( 'Enter a valid email address.' )
  regex = re_words if words else re_chars
              self . content = self . rendered_content
  return val
   def render ( self , context ) :
 return _get_timezone_name ( get_default_timezone ( ) )
  def __call__ ( self , environ , start_response ) :
  from django . apps import apps
    def set_signed_cookie ( self , key , value , salt = '' , ** kwargs ) :
                              return field . rel . to . _default_manager . db_manager ( db ) . get_by_natural_key ( * value ) . pk
  def __init__ ( self , tagtype ) :
 if t is not None :
 self . tags = { }
  new_value = value + delta
           name , val = forbid_multi_line_headers ( name , val , 'ascii' )
 if self . timezone and self . timezone . dst ( self . data ) :
                  pass
  elif domain == 'django' and ( file_ext == '.py' or file_ext in command . extensions ) :
   def discard ( self , item ) :
  if filters :
   def create_nodelist ( self ) :
   loop_dict = context [ 'forloop' ] = { 'parentloop' : parentloop }
    def parse_http_date ( date ) :
  nodelist = parser . parse ( ( 'endblock' , ) )
 from __future__ import unicode_literals
    if new_name . startswith ( '_' ) :
 self . digits = digits
   return value
 self . data = data or { }
   self . indent ( 1 )
              if not renamed :
              try :
  except IndexError :
 if domain and validate_host ( domain , settings . ALLOWED_HOSTS ) :
 from django . utils . functional import lazy
  from django . apps import apps
  def items ( self ) :
              return None
    PY2 = sys . version_info [ 0 ] == 2
   output = [ ]
           if name is not None :
 dictConfigClass ( config ) . configure ( )
              val = self . _cache . decr ( key , delta )
                  new_name = new_name . replace ( '__' , '_' )
 if command . use_argparse :
     def load_template_source ( self , template_name , template_dirs = None ) :
 return self . _html_output (  normal_row = '<li%(html_class_attr)s>%(errors)s%(label)s %(field)s%(help_text)s</li>' ,  error_row = '<li>%s</li>' ,  row_ender = '</li>' ,  help_text_html = ' <span class="helptext">%s</span>' ,  errors_on_separate_row = False )
 self . pubid = pubid
                  raise TemplateSyntaxError ( "'%s' is not a valid tag library: %s" %  ( taglib , e ) )
 new = '#: ' + orig_file [ 2 : ]
   def validate ( self , value ) :
    @ register ( Tags . models , Tags . signals )
          return None
               final_attrs [ 'value' ] = force_text ( self . _format_value ( value ) )
 if name :
          if self . deactivate :
            if cursor and close_connection :
 raise CommandError ( "Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'" % name_str )
 self . request = request
               self . json_kwargs [ 'separators' ] = ( ',' , ': ' )
     class LoadNode ( Node ) :
              context . render_context [ BLOCK_CONTEXT_KEY ] = BlockContext ( )
    def copy ( self ) :
 runfastcgi ( args )
     class ReferenceLocalTimezone ( tzinfo ) :
                  i += 1
 return [ value . date ( ) , value . time ( ) . replace ( microsecond = 0 ) ]
 def byte2int ( bs ) :
  if exclude and f . name in exclude :
 xgettext_options = [ '--from-code=UTF-8' , '--add-comments=Translators' ]
              factory = config [ '()' ]
   def add_item ( self , title , link , description , author_email = None ,  author_name = None , author_link = None , pubdate = None , comments = None ,  unique_id = None , unique_id_is_permalink = None , enclosure = None ,  categories = ( ) , item_copyright = None , ttl = None , updateddate = None , ** kwargs ) :
         @ register . filter ( is_safe = False )
              return self . g ( )
                  if self . cdata_tag is not None :
          _translations [ language ] = DjangoTranslation ( language )
 non_capturing_groups = [ ]
                      var_obj = Variable ( var )
          return ord ( bs [ 0 ] )
   def clear ( self ) :
              if self . verbosity >= 1 :
   for line in header . split ( b'\r\n' ) :
   if fdel is not None :
 return '%02d' % self . data . month
          print ( message )
 if field . rel . through . _meta . auto_created :
 import sys
          field_dict = OrderedDict (  [ ( f , field_dict . get ( f ) ) for f in fields  if ( ( not exclude ) or ( exclude and f not in exclude ) ) and ( f not in ignored ) ]  )
  for app_name , namespace_list in pattern . app_dict . items ( ) :
      default_validators = [ validators . validate_slug ]
  except ValidationError as e :
 return cls ( file_dict [ 'filename' ] ,  file_dict [ 'content' ] ,  file_dict . get ( 'content-type' , 'text/plain' ) )
                  config [ 'mailhost' ] = self . as_tuple ( config [ 'mailhost' ] )
  else :
 self . selected_fields = options . pop ( "fields" , None )
   class Command ( BaseCommand ) :
   def render ( self , context ) :
     class CachedDnsName ( object ) :
           sup_cls = super ( cls , self )
 loop_dict [ 'revcounter0' ] = len_values - i - 1
               if id_ :
    def sanitize_separators ( value ) :
          import pylibmc
          if not self . _is_rendered :
 self . prefix = prefix or self . get_default_prefix ( )
                  return [ ]
 from django . core . management . templates import TemplateCommand
 from django . forms . widgets import (  TextInput , NumberInput , EmailInput , URLInput , HiddenInput ,  MultipleHiddenInput , ClearableFileInput , CheckboxInput , Select ,  NullBooleanSelect , SelectMultiple , DateInput , DateTimeInput , TimeInput ,  SplitDateTimeWidget , SplitHiddenDateTimeWidget , FILE_INPUT_CONTRADICTION  )
                  if hasattr ( field . rel . to . _default_manager , 'get_by_natural_key' ) :
              stream_class = BytesIO
              pass
 from django . utils . text import get_text_list
  except ImportError :
   literal_match = self . literal_regex . match ( domain_part )
  write_pot_file ( potfile , msgs )
 for match in matches :
                  continue
                      lineno_comment_map . setdefault ( t . lineno ,  [ ] ) . append ( t . contents )
  rv = logging . _levelNames [ level ]
  import collections
   output . append ( normal_row % {  'errors' : force_text ( bf_errors ) ,  'label' : force_text ( label ) ,  'field' : six . text_type ( bf ) ,  'help_text' : help_text ,  'html_class_attr' : html_class_attr ,  'field_name' : bf . html_name ,  } )
              obj = force_str ( self . obj )
  else :
   def subwidgets ( self , name , value , attrs = None , choices = ( ) ) :
   if ( domain_part not in self . domain_whitelist and  not self . validate_domain_part ( domain_part ) ) :
  logging . _handlers . clear ( )
          try :
  output . append ( '</select>' )
 ignore_patterns = options . get ( 'ignore_patterns' )
  else :
 confirm = input ( msg )
          return ord ( buf [ i ] )
 from xml . sax . expatreader import ExpatParser as _ExpatParser
   def _itervalues ( self ) :
 self . msgattrib_options = self . msgattrib_options [ : ] + [ '--no-wrap' ]
              response = None
 output = [ format_html ( '<select{0}>' , flatatt ( final_attrs ) ) ]
    for handler in handlers :
 self . tag ( function_name , compile_func )
 try :
          self . _queryset = queryset
   _standard_context_processors = None
 if content_disposition :
  return filename , display_url
 media = Media ( )
 if queryset is None :
   return False
                  f . process ( self , self . domain )
              return default
 self . find_template_cache = { }
                  import_module ( '.management' , app_config . name )
  return klass
  try :
 if custom_sql :
 if isinstance ( data , bytes ) :
          return [  Warning (  "MIDDLEWARE_CLASSES is not set." ,  hint = ( "Django 1.7 changed the global defaults for the MIDDLEWARE_CLASSES. "  "django.contrib.sessions.middleware.SessionMiddleware, "  "django.contrib.auth.middleware.AuthenticationMiddleware, and "  "django.contrib.messages.middleware.MessageMiddleware were removed from the defaults. "  "If your project needs these middleware then you should configure this setting." ) ,  obj = None ,  id = '1_7.W001' ,  )  ]
 if self . feed [ 'author_email' ] is not None :
  return result
    def get_script_prefix ( ) :
          int_part , dec_part = str_number . split ( '.' )
 return import_string ( path ) ( * args , ** kwargs )
  else :
  try :
 def linenumbers ( value , autoescape = None ) :
 try :
   from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT
              return
                  kwargs [ name ] = parser . compile_filter ( value )
 g . flatten ( self , unixfrom = unixfrom )
  if not self . is_bound :
              if e . args [ 0 ] not in not_found :
   mod_name , func_name = get_mod_func ( lookup_view )
              return t . to_language ( )
   try :
              warnings . warn (  "AppCommand.handle_app() is superseded by "  "AppCommand.handle_app_config()." ,  RemovedInDjango19Warning , stacklevel = 2 )
 result = ':' . join ( hextets [ 0 : 6 ] )
      def _make_decorator ( * m_args , ** m_kwargs ) :
   elif cls . _delegate_bytes :
              return raw_data
              self . xml . characters ( field . value_to_string ( obj ) )
 if ip_str . count ( '::' ) == 1 :
      _assertCountEqual = "assertItemsEqual"
 attachment . set_payload ( content )
                  return nodelist . render ( context )
 default_error_messages = {  'invalid' : _ ( 'Enter a valid date.' ) ,  }
 nodelist = parser . parse ( ( 'endverbatim' , ) )
 cursor . execute ( "DELETE FROM %s WHERE expires < %%s" % table ,  [ connections [ db ] . ops . value_to_db_datetime ( now ) ] )
 self . _cache . set ( key , value , self . get_backend_timeout ( timeout ) )
          super ( Command , self ) . add_arguments ( parser )
          raise TemplateSyntaxError ( "%r tag takes at least one argument: the name of the template to be included." % bits [ 0 ] )
          self . parent_instance = parent_instance
                  setattr ( result , name , value )
   return self . parent_instance
          return not ( self == other )
    class FileUploadHandler ( object ) :
              args = [ '"%s"' % arg for arg in args ]
 i = self . pointer
                              line = '%s\n' % plural_form_line
  return quote ( force_bytes ( iri ) , safe = b"/#%[]=:;$&()+,!?*@'~" )
  except KeyError :
                      old_handler = None
 MIMEMultipart . __setitem__ ( self , name , val )
    def b64_decode ( s ) :
  else :
 context_extras [ 'sql_queries' ] = connection . queries
 memo [ id ( self ) ] = result
              origin = StringOrigin ( template_string )
 return (  output ,  force_text ( errors , DEFAULT_LOCALE_ENCODING , strings_only = True ) ,  p . returncode  )
    def has_key ( self , key ) :
 if self . is_bound :
          raise SerializerDoesNotExist ( format )
  if hasattr ( self , '_post' ) :
 import sys
 setattr ( _MovedItems , move . name , move )
 from django . db import connections , DEFAULT_DB_ALIAS
   else :
 pflen = len ( prefixed )
      def __init__ ( self , max_length = None , min_length = None , * args , ** kwargs ) :
 if isinstance ( value , list ) :
  def prepare_value ( self , value ) :
  if sys . platform . startswith ( 'java' ) :
    def time_format ( value , format = None , use_l10n = None ) :
      return trim_whitespace_re . sub ( ' ' , s . strip ( ) )
 from django . core . files import locks , File
              for cache_alias in settings . CACHES :
  if not model . _meta . proxy and router . allow_migrate ( using , model ) :
from django . core . management . base import BaseCommand , CommandError
              raise ValidationError ( self . error_messages [ 'list' ] , code = 'list' )
              if key in d :
  try :
    def _createdir ( self ) :
   def end_serialization ( self ) :
                  pk_value = form . instance . pk
 self . filters . update ( lib . filters )
  if val is None :
                   ch , escaped = next ( pattern_iter )
  else :
     _format_cache = { }
 parser . add_argument ( '--keep-pot' , action = 'store_true' , dest = 'keep_pot' ,  default = False , help = "Keep .pot file after making messages. Useful when debugging." )
              return mark_safe ( output )
 file_root , file_ext = os . path . splitext ( file_name )
   end = kwargs . pop ( "end" , None )
          filelist = new_filenames
              activate ( self . timezone )
                  yield subnode
    def _check_middleware_classes ( app_configs = None , ** kwargs ) :
   child_loggers = [ ]
  else :
  except TemplateDoesNotExist :
 ns_pattern = ''
 raise NotImplementedError ( 'Subclasses must implement this method.' )
  emitting = chunk [ : remaining ]
              self . reader_leaves ( )
   @ property
     loggers = config . get ( 'loggers' , EMPTY_DICT )
              if contains ( elt , inst ) :
              lines [ i ] = ( "%0" + width + "d. %s" ) % ( i + 1 , line )
 self . run_validators ( out )
          return language . lower ( )
       finally :
 self . _unget_history = [ num_bytes ] + self . _unget_history [ : 49 ]
   def readline ( self , size = None ) :
          return settings . DEBUG
 if errors is None :
              response . streaming_content = [ ]
     def get_valid_filename ( s ) :
   def get ( self , key , default = None ) :
              qs = queryset . filter ( ** { self . fk . name : self . instance } )
              option_value = ''
      return CsrfTokenNode ( )
              self . loaddata ( fixture_labels )
              second_item = new_second_item
  return '%s%s' % ( text , truncate )
  for app_label , migration_names in conflicts . items ( ) :
    def is_valid_ipv6_address ( ip_str ) :
   def __iter__ ( self ) :
  else :
                  return template . render ( context )
     try :
 path = parts [ 1 : ]
  self . stream = options . pop ( "stream" , six . StringIO ( ) )
          return get_supported_language_variant ( lang_code , strict = strict )
   def __iter__ ( self ) :
  else :
          post = '<could not parse>'
 inner = NonCapture ( result [ start : ] )
    def get_full_path ( self ) :
       except self . LibraryValueNotFoundException :
    def _resolve ( self ) :
                  cull_num = num // self . _cull_frequency
              _localtime = pytz . timezone ( settings . TIME_ZONE )
   def d ( self ) :
   re_words = re . compile ( r'<.*?>|((?:\w[-\w]*|&.*?;)+)' , re . U | re . S )
                              if isinstance ( val , tuple ) :
  def __init__ ( self , loopvars , sequence , is_reversed , nodelist_loop , nodelist_empty = None ) :
                  return None
 found = False
 from django . utils import six
 add_to_builtins ( 'django.template.defaultfilters' )
  handler . addQuickElement ( "id" , unique_id )
              et , ev , tb = sys . exc_info ( )
 from functools import wraps
        def __str__ ( self ) :
              fixture_dirs = self . fixture_dirs
                  return True
 from django . core import signals
          self . file . seek ( 0 )
  def __new__ ( cls , * args , ** kwargs ) :
  return super ( FileField , self ) . clean ( data )
 class Media ( object ) :
                          raise ValueError ( 'Unable to configure handler '  '%r: %s' % ( name , e ) )
  chunk = next ( self )
 try :
 response . add_post_render_callback ( callback )
                      expires = timezone . make_naive ( expires , timezone . utc )
   def log_message ( self , format , * args ) :
                 kwargs = match . groupdict ( )
 return select_html
  return proxy
   class FilterExpression ( object ) :
 if bf . is_hidden :
      return force_text ( ngettext ( singular , plural , number ) )
  else :
  if self . max_value is not None :
 return self . data . hour
          tpl = "EntitiesForbidden(name='{}', system_id={!r}, public_id={!r})"
          seen = set ( )
              widget . input_type = 'hidden'
                  raise CommandError ( "No migrations present for: %s" % ( ", " . join ( invalid_apps ) ) )
   _serializers = serializers
  else :
              return match . group ( 0 )
   connection_params = { 'local_hostname' : DNS_NAME . get_fqdn ( ) }
   def add_filters ( self , filterer , filters ) :
 break
    def color_style ( ) :
 if html_message :
  if isinstance ( s , six . text_type ) :
 if USE_INOTIFY :
              return get_supported_language_variant ( accept_lang )
 setattr ( self , attr , value )
 var = var [ 2 : - 1 ]
          self . _archive . close ( )
  except OSError as err :
 if key in cache :
 self . buffer = b''
 self . context_data = context
          database = options . get ( 'database' )
 use_grouping = use_grouping and grouping > 0
  if colors and colors [ - 1 ] in color_names :
   self . widget = widget
   else :
          if not self . _is_rendered :
  self . error ( "junk characters in start tag: %r"  % ( rawdata [ k : endpos ] [ : 20 ] , ) )
 truncate = property ( lambda self : self . file . truncate )
 self . content_type = content_type
   def usage ( self , subcommand ) :
 template_tuple = self . template_cache . get ( key )
  def __init__ ( self ) :
 assert content is not None
     _entity_re = re . compile ( r"&(#?[xX]?(?:[0-9a-fA-F]+|\w{1,8}));" )
              now = datetime . utcnow ( )
     ip_address_validator_map = {  'both' : ( [ validate_ipv46_address ] , _ ( 'Enter a valid IPv4 or IPv6 address.' ) ) ,  'ipv4' : ( [ validate_ipv4_address ] , _ ( 'Enter a valid IPv4 address.' ) ) ,  'ipv6' : ( [ validate_ipv6_address ] , _ ( 'Enter a valid IPv6 address.' ) ) ,  }
              fk = fks_to_parent [ 0 ]
          return value
 return len ( self . non_form_errors ( ) ) + sum ( len ( form_errors ) for form_errors in self . errors )
  def __init__ ( self , file = None , name = None , content_type = None , size = None , charset = None , content_type_extra = None ) :
          try :
 if self . data . day in ( 11 , 12 , 13 ) :
          if isinstance ( elt , six . string_types ) :
 return tf . format ( format_string )
 return getattr ( _urlconfs , "value" , default )
 is_templatized = file_ext in command . extensions
 def default ( self , o ) :
 insert = complain
 self . index = index
  except TypeError :
   def _add_installed_apps_translations ( self ) :
 from django . utils import six
          self . _assert_mutable ( )
 yield "from __future__ import unicode_literals"
  return int ( value )
                      config [ 'target' ] = self . config [ 'handlers' ] [ config [ 'target' ] ]
              state_frame [ self ] = compare_to
          if params [ 0 ] == 'context' :
              return self . nodelist . render ( context )
  if not url_fields [ 1 ] :
     class BaseModelForm ( BaseForm ) :
 base64 = BaseConverter ( BASE64_ALPHABET , sign = '$' )
              as_form = True
                      continue
   except UnicodeEncodeError :
      pass
 raise
 raise NotImplementedError ( 'subclasses of Storage must provide a modified_time() method' )
  from . messages import ( CheckMessage ,  Debug , Info , Warning , Error , Critical ,  DEBUG , INFO , WARNING , ERROR , CRITICAL )
                  request_middleware . append ( mw_instance . process_request )
                  declared_fields . update ( base . declared_fields )
                raise RuntimeError (  "The method to extend accepted command-line arguments by the "  "test management command has changed in Django 1.8. Please "  "create an add_arguments class method to achieve this." )
 if path is None :
             def read ( self , * args , ** kwargs ) :
          length = int ( arg )
  self . backout . append ( self . pointer )
   from django . conf import settings
 factor = 0
   class Command ( BaseCommand ) :
    def get_language_from_path ( path , strict = False ) :
 if self . feed [ 'feed_url' ] is not None :
   patterns = [ pattern for ( possibility , pattern , defaults ) in possibilities ]
           hextets [ index ] = hextets [ index ] . lstrip ( '0' )
              field = field . rel . get_related_field ( )
              if key in d :
 RFC850_DATE = re . compile ( r'^\w{6,9}, %s-%s-%s %s GMT$' % ( __D , __M , __Y2 , __T ) )
  return ( ( not url_info . netloc or url_info . netloc == host ) and  ( not url_info . scheme or url_info . scheme in [ 'http' , 'https' ] ) )
   def __getstate__ ( self ) :
              return True
 index_output = [ ]
              try :
                  yield safe_join ( template_dir , template_name )
  if end . endswith ( '/>' ) :
 pass
  except UnicodeDecodeError :
              return
   return commands
 self . add_root_elements ( handler )
 return self . as_widget ( Textarea ( ) , attrs , ** kwargs )
 import stat
                  for receiver , _ , _ in receivers :
    def label_from_instance ( self , obj ) :
              return _ ( 'PM' )
                  res , args = flatten_result ( item )
 from importlib import import_module
          _load_serializers ( )
              try :
   def splitext ( self , the_path ) :
   class Serializer ( PythonSerializer ) :
          pattern = pattern . lower ( )
 return super ( QueryDict , self ) . setlistdefault ( key , default_list )
      class DebugVariableNode ( VariableNode ) :
          return NodeList ( node for _ , nodelist in self . conditions_nodelists for node in nodelist )
                      super ( AssignmentNode , self ) . __init__ ( takes_context , args , kwargs )
 if value is not result :
 from django . utils . deprecation import RemovedInDjango20Warning
              return self . func ( value )
                  EventHandler . modified_code = I18N_MODIFIED
          c = cookie
                          content_length = None
              data = self . flo . read ( self . chunk_size )
          return caches [ DEFAULT_CACHE_ALIAS ] == other
  else :
 hidden_widget = HiddenInput
   ipv4_address = "%d.%d.%d.%d" % (  int ( hextets [ 6 ] [ 0 : 2 ] , 16 ) ,  int ( hextets [ 6 ] [ 2 : 4 ] , 16 ) ,  int ( hextets [ 7 ] [ 0 : 2 ] , 16 ) ,  int ( hextets [ 7 ] [ 2 : 4 ] , 16 ) ,  )
 result . key = key
       def __init__ ( self , object_list , number , paginator ) :
    ext = self . splitext ( guessed_filename ) [ 1 ]
 from django . core . exceptions import ImproperlyConfigured
              return ( t [ 0 ] . lower ( ) , t [ 1 ] )
 notifier . read_events ( )
   def _create_alternatives ( self , msg ) :
          super ( TemporaryFileUploadHandler , self ) . __init__ ( * args , ** kwargs )
          resolved_args = [ var . resolve ( context ) for var in self . args ]
   def _get_page ( self , * args , ** kwargs ) :
   context = Context ( dict ( options , ** {  base_name : name ,  base_directory : top_dir ,  'docs_version' : docs_version ,  } ) , autoescape = False )
    cursor = connection . cursor ( )
              value = formats . sanitize_separators ( value )
  self . bad_cookies . add ( key )
                  return self . filter_function ( func , ** flags )
                  field_value = smart_text ( field_value , options . get ( "encoding" , settings . DEFAULT_CHARSET ) , strings_only = True )
              return self . _callback
          hfile = msvcrt . get_osfhandle ( _fd ( f ) )
  elif getattr ( current , 'alters_data' , False ) :
   def __str__ ( self ) :
           MAXSIZE = int ( ( 1 << 31 ) - 1 )
   def _raw_value ( self , fieldname ) :
              dklen = hlen
                  m = self . DOT_PATTERN . match ( rest )
  else :
   if pop_context :
 force_unicode = force_text
 statements = connection . ops . sequence_reset_sql ( self . style , models )
  LOCK_SH = 0
  elif not self . required and not value :
  FASTCGI_OPTIONS = {  'protocol' : 'fcgi' ,  'host' : None ,  'port' : None ,  'socket' : None ,  'method' : 'fork' ,  'daemonize' : None ,  'workdir' : '/' ,  'pidfile' : None ,  'maxspare' : 5 ,  'minspare' : 2 ,  'maxchildren' : 50 ,  'maxrequests' : 0 ,  'debug' : None ,  'outlog' : None ,  'errlog' : None ,  'umask' : None ,  }
   if len ( bits ) :
 global _standard_context_processors
              return { "xmlns" : self . ns , "xml:lang" : self . feed [ 'language' ] }
  return dec
      def __init__ ( self , language , deactivate = False ) :
  del bits [ : 1 ]
 tags_re = '(%s)' % '|' . join ( tags )
   def __iter__ ( self ) :
   return False
 parser . add_argument ( '--domain' , '-d' , default = 'django' , dest = 'domain' ,  help = 'The domain of the message files (default: "django").' )
              primary_keys = [ ]
              raise ValidationError ( errors )
           def split_url ( url ) :
 bits = urlparse ( url )
              raise TemplateSyntaxError ( "Could not parse the remainder: '%s' "  "from '%s'" % ( token [ upto : ] , token ) )
  if value :
 parser . UnparsedEntityDeclHandler = self . unparsed_entity_decl
    class Token ( object ) :
   name = self . get_available_name ( name )
  BASE2_ALPHABET = '01'
   def __delitem__ ( self , key ) :
   except TypeError :
   def sign ( self , value ) :
          return self . mapping . get ( self . tagtype , '' )
 def __init__ ( self , * dicts ) :
 parser . add_argument ( '--symlinks' , '-s' , action = 'store_true' , dest = 'symlinks' ,  default = False , help = 'Follows symlinks to directories when examining '  'source code and templates for translation strings.' )
 return data
 super ( IPAddressField , self ) . __init__ ( * args , ** kwargs )
   result = user_function ( * args , ** kwds )
   end = rawdata [ k : endpos ] . strip ( )
  return format_html ( '<input{0} />' , flatatt ( final_attrs ) )
                                  file_ . close ( )
   def __setstate__ ( self , state ) :
    def __deepcopy__ ( self , memo ) :
 os . umask ( umask )
  root = max ( roots )
                      suffix = d [ 'suffix' ]
          return self . render ( )
                  continue
  return handle_app ( app_config . models_module , ** options )
 block_context . add_blocks ( blocks )
 if relative_dir :
      help = ( "Creates a Django app directory structure for the given app "  "name in the current directory or optionally in the given "  "directory." )
              result . setFormatter ( formatter )
              line = sio . readline ( size )
                  six . reraise ( UnreadablePostError , UnreadablePostError ( * e . args ) , sys . exc_info ( ) [ 2 ] )
  except ImportError :
  except ( ValueError , TypeError , OverflowError ) :
 hhmm = '%02d%02d' % divmod ( abs ( offset ) , 60 )
          for _ , nodelist in self . conditions_nodelists :
  else :
              if parts [ - 1 ] in self . serialization_formats :
              exc_info = sys . exc_info ( )
 if PY3 :
                      self . setlistdefault ( key ) . extend ( value_list )
   if commit and hasattr ( form , 'save_m2m' ) :
 return duplicate
 writelines = property ( lambda self : self . file . writelines )
   if host [ - 1 ] == ']' :
 kwargs [ 'instance' ] = self . _existing_object ( pk )
      urlconf = settings . ROOT_URLCONF
 self . stream . write ( '-' * 79 )
    def call_command ( name , * args , ** options ) :
              app_label = options [ 'app_label' ]
 if '_' in locale :
 for line in msgs . split ( '\n' ) :
   self . save_m2m = save_m2m
          if self . _wrapped is empty :
  if path . exists ( absolute_path ) :
  if bmatch . group ( 1 ) :
      class Deserializer ( six . Iterator ) :
   def date ( self ) :
    return current
             for handler in self . _upload_handlers :
     def make_naive ( value , timezone ) :
           members = [ member for member in self . _archive . getmembers ( )  if member . name != 'pax_global_header' ]
  return bool ( value )
  def __getattr__ ( self , real_name ) :
              return url
 break
              form = ManagementForm ( self . data , auto_id = self . auto_id , prefix = self . prefix )
 parser . add_argument ( '--merge' , action = 'store_true' , dest = 'merge' , default = False ,  help = "Enable fixing of migration conflicts." )
              list_ = super ( MultiValueDict , self ) . __getitem__ ( key )
 self . current_token = self . next_token ( )
 try :
 get_function_closure = operator . attrgetter ( _func_closure )
                  return None
 self . stderr = OutputWrapper ( options . get ( 'stderr' , sys . stderr ) )
   if num_loopvars != len_item :
 def __repr__ ( self ) :
 LOCK_NB = 0x1
  except IndexError :
                  local , domain = middle . rsplit ( '@' , 1 )
              end , next = boundary
   qs = self . queryset . filter ( ** { '%s__in' % key : value } )
          obj_dict = self . __dict__ . copy ( )
 hard_coded_bullets_re = re . compile ( r'((?:<p>(?:%s).*?[a-zA-Z].*?</p>\s*)+)' % '|' . join ( re . escape ( x ) for x in DOTS ) , re . DOTALL )
 if i >= 0 :
            unhandled_params = unhandled_params [ : - len ( defaults ) ]
 integer_types = int ,
     headerlist = [ ]
  except LookupError :
  else :
          key = self . make_key ( key , version = version )
  return Truncator ( value ) . chars ( length )
                  return kwargs
 binary_type = str
 self . _chunk_size = min ( [ 2 ** 31 - 4 ] + possible_sizes )
 @ stringfilter
      pass
  elif self . _delegate_text :
 from django . core . management . color import no_style
              top_dir = os . path . abspath ( path . expanduser ( target ) )
              with self . initLock :
   return otherwise
  src_data = prepare_js_for_gettext ( src_data )
          msg = ( "The use of the language code '%s' is deprecated. "  "Please use the '%s' translation instead." )
                  output . append ( "%s = %s" % ( key , user_settings [ key ] ) )
              if key in dict_ :
                       value = value . decode ( charset )
   __all__ = [  'activate' , 'deactivate' , 'override' , 'deactivate_all' ,  'get_language' , 'get_language_from_request' ,  'get_language_info' , 'get_language_bidi' ,  'check_for_language' , 'to_locale' , 'templatize' , 'string_concat' ,  'gettext' , 'gettext_lazy' , 'gettext_noop' ,  'ugettext' , 'ugettext_lazy' , 'ugettext_noop' ,  'ngettext' , 'ngettext_lazy' ,  'ungettext' , 'ungettext_lazy' ,  'pgettext' , 'pgettext_lazy' ,  'npgettext' , 'npgettext_lazy' ,  'LANGUAGE_SESSION_KEY' ,  ]
          return formats . localize_input ( value ,  self . format or formats . get_format ( self . format_key ) [ 0 ] )
 buffer_types = ( bytes , bytearray , memoryview )
              options = parser . parse_args ( argv [ 2 : ] )
   def _set_post ( self , post ) :
  return bits [ 0 ] , ''
          if six . PY3 :
  else :
          super ( BaseTemporalField , self ) . __init__ ( * args , ** kwargs )
    class EmptyPage ( InvalidPage ) :
   def print_help ( self , prog_name , subcommand ) :
                      date_value = datetime . date ( int ( y ) , int ( m ) , int ( d ) )
    @ property
   elif issubclass ( klass , logging . handlers . SMTPHandler ) and 'mailhost' in config :
    class CommandParser ( ArgumentParser ) :
          import fcntl
                          custom_sql = custom_sql_for_model ( model , no_style ( ) , connection )
 salt = force_bytes ( salt )
              return lang_code
 self . _post_clean ( )
              return None
                  year += 2000
    def __str__ ( self ) :
   def __str__ ( self ) :
     class Select ( Widget ) :
 super ( URLValidator , self ) . __call__ ( url )
   class Module_six_moves_urllib_error ( _LazyModule ) :
   if pickled is not None :
 from django . utils . deprecation import RemovedInDjango19Warning
   existing_headers = set ( header . lower ( ) for header in vary_headers )
  urlunquote = allow_lazy ( urlunquote , six . text_type )
              pass
 if len ( val1 ) != len ( val2 ) :
    function_name = ( name or  getattr ( func , '_decorated_function' , func ) . __name__ )
 def do_if ( parser , token ) :
 self . xml = SimplerXMLGenerator ( self . stream , self . options . get ( "encoding" , settings . DEFAULT_CHARSET ) )
 if not parent :
   def __str__ ( self ) :
  if self . feed [ 'feed_copyright' ] is not None :
              raise TypeError ( "can't delete _wrapped." )
 formatter = config . pop ( 'formatter' , None )
          try :
 def escape_quotes ( m ) :
 self . bcc = list ( bcc )
          kw = dict ( ( k , int ( v ) ) for k , v in six . iteritems ( match . groupdict ( ) ) )
  except UnicodeError :
  elif _len ( cache ) >= maxsize :
                  continue
  else :
  else :
                   def wrapper ( * args , ** kwds ) :
  else :
 MONTHS_3 = {  1 : _ ( 'jan' ) , 2 : _ ( 'feb' ) , 3 : _ ( 'mar' ) , 4 : _ ( 'apr' ) , 5 : _ ( 'may' ) , 6 : _ ( 'jun' ) ,  7 : _ ( 'jul' ) , 8 : _ ( 'aug' ) , 9 : _ ( 'sep' ) , 10 : _ ( 'oct' ) , 11 : _ ( 'nov' ) , 12 : _ ( 'dec' )  }
 warnings . warn ( msg , RemovedInDjango19Warning , stacklevel = 2 )
              resolved_args = [ context ] + resolved_args
  WORD_PATTERN = re . compile ( r'^\s*(\w+)\s*' )
  return backend_cls ( location , params )
   def _get_media ( self ) :
    @ register . filter ( is_safe = True )
 if self . is_bound :
 self . interactive = options . get ( 'interactive' )
                  raise ImproperlyConfigured ( 'Could not create directory for saving email messages: %s (%s)' % ( self . file_path , err ) )
              yield d
  import re
 top_errors = self . non_field_errors ( )
          if app_config . models_module is None :
              new_path = path [ match . end ( ) : ]
     def emit_post_migrate_signal ( created_models , verbosity , interactive , db ) :
          tag , this_value_expr , max_value_expr , max_width , as_ , asvar = bits
 server_port = str ( self . META [ 'SERVER_PORT' ] )
   def create_var ( self , value ) :
 def unordered_list ( value , autoescape = None ) :
              klass = load_command_class ( app_name , subcommand )
  s2 = time . strftime ( fmt , ( year + 28 , ) + timetuple [ 1 : ] )
 title = ''
   def value_from_datadict ( self , data , files , name ) :
 parser . add_option ( '--no-color' , action = 'store_true' , dest = 'no_color' , default = False ,  help = "Don't colorize the command output." )
          super ( ErrorList , self ) . __init__ ( initlist )
 remaining_bits = bits [ 1 : ]
                  if hasattr ( field . rel , 'to' ) :
 run ( self . addr , int ( self . port ) , handler ,  ipv6 = self . use_ipv6 , threading = threading )
          super ( MultiValueDict , self ) . __setitem__ ( key , [ value ] )
 @ stringfilter
  from django . core import mail
   def avoid_wrapping ( value ) :
          if kwargs . pop ( 'ipv6' , False ) :
 self . validate_key ( key )
 def __init__ ( self , * args , ** kwargs ) :
 name = name [ : 255 - len ( ext ) ] + ext
        months = ( 'Jan' , 'Feb' , 'Mar' , 'Apr' , 'May' , 'Jun' , 'Jul' , 'Aug' , 'Sep' , 'Oct' , 'Nov' , 'Dec' , )
          self . timezone = timezone
   except AttributeError :
 return s . getvalue ( )
 for f in opts . fields :
          return LoaderOrigin ( display_name , loader , name , dirs )
   def handle_data ( self , d ) :
  __all__ = [  'CheckMessage' ,  'Debug' , 'Info' , 'Warning' , 'Error' , 'Critical' ,  'DEBUG' , 'INFO' , 'WARNING' , 'ERROR' , 'CRITICAL' ,  'register' , 'run_checks' , 'tag_exists' , 'Tags' ,  ]
  closing_tag , tagname , self_closing = tag . groups ( )
 self . stdout . write ( "Rendering %s template files with "  "filenames: %s\n" %  ( app_or_project , ', ' . join ( extra_files ) ) )
      abspathu = abspath
     def sql_create ( app_config , style , connection ) :
  else :
                  if issues :
 return value . center ( int ( arg ) )
         for log in existing :
                  raise ValueError
  if sys . platform . startswith ( "java" ) :
 self . _called_from_command_line = True
 def __init__ ( self , host = None , port = None , username = None , password = None ,  use_tls = None , fail_silently = False , use_ssl = None , timeout = None ,  ** kwargs ) :
  connection = connections [ options [ 'database' ] ]
  else :
              self . regex = re . compile ( self . regex , self . flags )
  else :
 for sub_stream in boundarystream :
 if self . max_length is not None :
                  widget_value = None
    result = ":" . join ( hextets )
    class SimpleTemplateResponse ( HttpResponse ) :
                  form . fields [ ORDERING_FIELD_NAME ] = IntegerField ( label = _ ( 'Order' ) , initial = index + 1 , required = False )
 defaults = dict ( defaults . __dict__ , ** options )
            if self . forms :
          value = dict . __getitem__ ( self , key )
  def add_arguments ( self , parser ) :
 value = converter ( suffix )
          key = self . make_key ( key , version = version )
 self . _tzname = self . tzname ( dt )
    class Origin ( object ) :
 self . set_charset ( utf8_charset )
  try :
 if has_bz2 :
              use_func = True
 self . _delete ( f . name )
              self . _populate ( )
 return do_ntranslate ( singular , plural , number , 'ngettext' )
              digits . append ( '0' )
                      lookups . appendlist ( pattern . name , ( bits , p_pattern , pattern . default_args ) )
          handler = SimplerXMLGenerator ( outfile , encoding )
      string_types = str ,
 def do_extends ( parser , token ) :
  used_column_names . append ( att_name )
 from django . forms . forms import *
              raise ValueError ( 'ModelForm has no model class specified.' )
          return any ( self . dicts )
  for key , value in parse_qsl ( query_string or '' ,  keep_blank_values = True ,  encoding = encoding ) :
   def is_multipart ( self ) :
     class ImmutableList ( tuple ) :
 if timeout is None :
  for shell in available_shells :
  return urlquote ( value , ** kwargs )
 if self . takes_context :
    TRAILING_PUNCTUATION = [ '.' , ',' , ':' , ';' , '.)' , '"' , '\'' ]
  except zlib . error as e :
 use_base_manager = options . get ( 'use_base_manager' )
   def wrap ( text , width ) :
  mail . send ( fail_silently = fail_silently )
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
 if self . interactive :
  else :
 if not form . is_valid ( ) :
              del attrs [ attr ]
 backend = params . pop ( 'BACKEND' )
  return force_text ( error )
          if "=" in x :
 from django . utils . six . moves . urllib . parse import urlparse
    run_syncdb = False
          if self . timezone is None :
 if not encoding :
 from django . utils . six . moves . urllib . parse import quote , unquote , urlsplit , urlunsplit
 import sys
          return smart_text ( self . name or '' )
  out . write ( ' pgettext(%r, %r) ' % ( message_context , g ) )
          if app_config . models_module is None :
              output = self . filter_expression . resolve ( context )
  for cat in self . feed [ 'categories' ] :
              if ( field == NON_FIELD_ERRORS and opts . error_messages and  NON_FIELD_ERRORS in opts . error_messages ) :
 return resolved_args , resolved_kwargs
      help = "Checks the entire Django project for potential problems."
                      translated = translated % rhs
  urlquote_plus = allow_lazy ( urlquote_plus , six . text_type )
 return dateformat . format ( value , get_format ( format or 'DATE_FORMAT' , use_l10n = use_l10n ) )
                  values = list ( values )
 if urlconf_name :
      def __init__ ( self , nodelist ) :
              pass
 from django . core . mail . backends . console import EmailBackend as ConsoleEmailBackend
          return self . _choices
                      resolved_args , resolved_kwargs = self . get_resolved_arguments ( context )
              if self . active_writers == 0 and self . waiting_writers == 0 :
 try :
   def accessed_time ( self , name ) :
  except ImportError :
          if can_fail :
    def cache_clear ( ) :
   def __bool__ ( self ) :
      help = 'Discover and run tests in the specified modules or the current directory.'
 html [ 'month' ] = self . create_select ( name , self . month_field , value , month_val , choices , self . month_none_value )
 cls = extension_map . get ( tail_ext )
   def unsign ( self , value , max_age = None ) :
   def __mod__ ( self , rhs ) :
                              result . append ( Group ( ( ( "%%(%s)s" % param ) , None ) ) )
 def truncatechars_html ( value , arg ) :
    def _long_to_bin ( x , hex_format_string ) :
 self . locale_paths = [ ]
  else :
                  s = six . text_type ( s )
          if float ( value ) != 1 :
 words = self . _wrapped . split ( )
 chunk += over_chunk
 values = [ parser . compile_filter ( arg ) for arg in args [ 1 : - 2 ] ]
 if not answer :
          self . view_name = view_name
                  if is_templatized :
               for tablename in tablenames :
 self . namespace = namespace
 if len ( args ) != 2 :
   def get_objects ( ) :
                      if contains ( result [ - 1 ] , Group ) :
 if related :
 return force_text ( quote_plus ( force_str ( url ) , force_str ( safe ) ) )
 from email . message import Message
  return ForNode ( loopvars , sequence , is_reversed , nodelist_loop , nodelist_empty )
  if self . field . cache_choices :
  return dict ( self )
   class Loader ( BaseLoader ) :
              for error in self . error_list :
                  f . save_form_data ( instance , cleaned_data [ f . name ] )
              yield obj
 self . _is_rendered = True
 missing_fields = ( set ( none_model_fields ) -  set ( new_class . declared_fields . keys ( ) ) )
   def writeString ( self , encoding ) :
      help = "Updates database schema. Manages both apps with migrations and those without."
          for bit in bits :
          fn = code_changed
 return state
              filename = file
    if self . _validate_unique :
   class InvalidPage ( Exception ) :
          return self . get_renderer ( name , value , attrs , choices ) . render ( )
    def ungettext_lazy ( singular , plural , number = None ) :
          return "<BaseConverter: base%s (%s)>" % ( len ( self . digits ) , self . digits )
    class JSONSerializer ( object ) :
  def __init__ ( self , loaders ) :
     if with_base_fields :
   if plan_node in loader . applied_migrations :
         if run_syncdb and executor . loader . unmigrated_apps :
  if any ( len ( x ) < 4 for x in ip_str . split ( ':' ) ) :
                  exhaust ( self . _input_data )
 exclude = options . get ( 'exclude' )
  except AttributeError :
      compare = lambda self , a , b : a is not b
  return attachment
          try :
      _meth_func = "im_func"
              raise CommandError ( "%s. Are you sure your INSTALLED_APPS setting is correct?" % e )
 process_all = options . get ( 'all' )
 return re_newlines . sub ( '\n' , text )
              return self . empty_value
 if lang_code is not None :
     class RssFeed ( SyndicationFeed ) :
          return settings . LANGUAGE_CODE
                      self . saved_forms . append ( form )
   filelist = random . sample ( filelist ,  int ( num_entries / self . _cull_frequency ) )
 if min_num is None :
                                  handler . new_file ( field_name , file_name ,  content_type , content_length ,  charset , content_type_extra )
  if len ( parts ) > 1 and parts [ - 1 ] in self . compression_formats :
  if filename . endswith ( ".pyc" ) or filename . endswith ( ".pyo" ) :
  if settings . USE_THOUSAND_SEPARATOR :
 return out
  if not ( value is True or value is False or value is None or value == '' ) :
      class Rss201rev2Feed ( RssFeed ) :
 if not data :
              docs_version = '%d.%d' % django . VERSION [ : 2 ]
 instance . keyOrder = [ ]
                              current = current ( )
          tried = [ ]
 WEEKDAYS_REV = {  'monday' : 0 , 'tuesday' : 1 , 'wednesday' : 2 , 'thursday' : 3 , 'friday' : 4 ,  'saturday' : 5 , 'sunday' : 6  }
              start , end = match . span ( )
   return ( TYPE , outdict , stream )
  try :
 try :
    def dst ( self , dt ) :
          if not support_legacy :
  except ( ValueError , TypeError ) :
              raise MultiPartParserError ( 'Invalid boundary in multipart: %s' % boundary )
 jan1_weekday = self . data . replace ( month = 1 , day = 1 ) . weekday ( ) + 1
  result = 0
          yield self
 if autoescape :
              token = Token ( TOKEN_TEXT , token_string )
   self . _handler_class = None
  return ""
      def __init__ ( self , * args , ** kwargs ) :
 def first ( value ) :
   for f in self . instance . _meta . fields :
  template_source_loaders = None
   return data . get ( name , None )
                  dirs = [ os . path . join ( basedir , l , 'LC_MESSAGES' ) for l in locales ]
   if hidden_fields :
     def _to_tuple ( s ) :
 from django . utils . safestring import mark_safe
  except ( LookupError , TypeError ) :
     if att_name == 'id' and extra_params == { 'primary_key' : True } :
  file_move_safe ( tmp_path , fname , allow_overwrite = True )
              continue
   possibilities = self . reverse_dict . getlist ( lookup_view )
              if isinstance ( expires , datetime . datetime ) :
 obj = Node ( children , connector , negated )
    def next_token ( self ) :
              return self . DSTDIFF
              return host
  updates = dict ( )
                              cursor . execute ( statement )
                      filter_expression = self . compile_filter ( token . contents )
  else :
   if is_relation :
          return timedelta ( 0 )
              if self . _delegate_bytes :
              self . xml . ignorableWhitespace ( '\n' + ' ' * self . options . get ( 'indent' , None ) * level )
   @ property
  from django . db import models
  return self . data . hour
                      for line in sequence_sql :
 self . upload_handlers = ImmutableList (  self . upload_handlers ,  warning = "You cannot alter upload handlers after the upload has been processed."  )
   def t ( self ) :
          if self . has_key ( key , version ) :
 readinto = property ( lambda self : self . file . readinto )
  except ( ValueError , TypeError ) :
          value = dict . pop ( self , key , default )
  if var_obj is None :
          self . stream . write ( message . message ( ) . as_bytes ( ) + b'\n' )
     def common_logger_config ( self , logger , config , incremental = False ) :
          iteritems = _iteritems
 msguniq_options = [ '--to-code=utf-8' ]
        @ register . filter ( is_safe = True )
 if match :
                      netloc = netloc . encode ( 'idna' ) . decode ( 'ascii' )
  delta = expires - expires . utcnow ( )
 from django . utils . six import StringIO
 return header . lower ( ) in self . _headers
          self . data = obj
  def clean ( self ) :
 reporter = ExceptionReporter ( request , is_email = True , * exc_info )
    def get ( self , key , default = None , version = None ) :
   queryset = objects . using ( using ) . order_by ( model . _meta . pk . name )
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
          if filter_name in self . filters :
 changed = True
 start_ipython ( argv = [ ] )
                      space = line . find ( ' ' ) + 1
 filename = os . path . basename ( path )
   def execute ( self ) :
  else :
 link [ NEXT ] = root
        must_be_first = False
  else :
          thread . start_new_thread ( main_func , args , kwargs )
                  raise TypeError ( "relative imports require the 'package' argument" )
    def pgettext ( context , message ) :
 self . extend_nodelist ( nodelist , var_node , token )
     def delete ( self , key , version = None ) :
  lines . append ( line )
                      biggest_number = max ( [ x for x in numbers if x is not None ] )
  for migration in app_migrations :
              return self . _cache . incr ( key , - delta )
   FILTER_SEPARATOR = '|'
 return self . data . isocalendar ( ) [ 0 ]
 if not value or isinstance ( value , ( list , tuple ) ) :
 timetuple = dt . timetuple ( )
   else :
          try :
 self . var = var_obj
  return dec
          return [ f [ : - 3 ] for f in os . listdir ( command_dir )  if not f . startswith ( '_' ) and f . endswith ( '.py' ) ]
   else :
 num = cursor . fetchone ( ) [ 0 ]
              class_name = base . __name__
 def safe ( value ) :
   class DebugLexer ( Lexer ) :
 return data_set != initial_set
   def resolve ( self , context , ignore_failures = False ) :
     def make_middleware_decorator ( middleware_class ) :
  except UnicodeDecodeError :
          logging . Handler . __init__ ( self )
 field_notes = [ ]
 super ( CommandParser , self ) . __init__ ( ** kwargs )
 return base64 . urlsafe_b64encode ( s ) . rstrip ( b'\n=' )
   @ property
 if level is not None :
  PALETTES = {  NOCOLOR_PALETTE : {  'ERROR' : { } ,  'WARNING' : { } ,  'NOTICE' : { } ,  'SQL_FIELD' : { } ,  'SQL_COLTYPE' : { } ,  'SQL_KEYWORD' : { } ,  'SQL_TABLE' : { } ,  'HTTP_INFO' : { } ,  'HTTP_SUCCESS' : { } ,  'HTTP_REDIRECT' : { } ,  'HTTP_NOT_MODIFIED' : { } ,  'HTTP_BAD_REQUEST' : { } ,  'HTTP_NOT_FOUND' : { } ,  'HTTP_SERVER_ERROR' : { } ,  'MIGRATE_HEADING' : { } ,  'MIGRATE_LABEL' : { } ,  'MIGRATE_SUCCESS' : { } ,  'MIGRATE_FAILURE' : { } ,  } ,  DARK_PALETTE : {  'ERROR' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  'WARNING' : { 'fg' : 'yellow' , 'opts' : ( 'bold' , ) } ,  'NOTICE' : { 'fg' : 'red' } ,  'SQL_FIELD' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'SQL_COLTYPE' : { 'fg' : 'green' } ,  'SQL_KEYWORD' : { 'fg' : 'yellow' } ,  'SQL_TABLE' : { 'opts' : ( 'bold' , ) } ,  'HTTP_INFO' : { 'opts' : ( 'bold' , ) } ,  'HTTP_SUCCESS' : { } ,  'HTTP_REDIRECT' : { 'fg' : 'green' } ,  'HTTP_NOT_MODIFIED' : { 'fg' : 'cyan' } ,  'HTTP_BAD_REQUEST' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  'HTTP_NOT_FOUND' : { 'fg' : 'yellow' } ,  'HTTP_SERVER_ERROR' : { 'fg' : 'magenta' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_HEADING' : { 'fg' : 'cyan' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_LABEL' : { 'opts' : ( 'bold' , ) } ,  'MIGRATE_SUCCESS' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_FAILURE' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  } ,  LIGHT_PALETTE : {  'ERROR' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  'WARNING' : { 'fg' : 'yellow' , 'opts' : ( 'bold' , ) } ,  'NOTICE' : { 'fg' : 'red' } ,  'SQL_FIELD' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'SQL_COLTYPE' : { 'fg' : 'green' } ,  'SQL_KEYWORD' : { 'fg' : 'blue' } ,  'SQL_TABLE' : { 'opts' : ( 'bold' , ) } ,  'HTTP_INFO' : { 'opts' : ( 'bold' , ) } ,  'HTTP_SUCCESS' : { } ,  'HTTP_REDIRECT' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'HTTP_NOT_MODIFIED' : { 'fg' : 'green' } ,  'HTTP_BAD_REQUEST' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  'HTTP_NOT_FOUND' : { 'fg' : 'red' } ,  'HTTP_SERVER_ERROR' : { 'fg' : 'magenta' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_HEADING' : { 'fg' : 'cyan' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_LABEL' : { 'opts' : ( 'bold' , ) } ,  'MIGRATE_SUCCESS' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_FAILURE' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  }  }
 tempdir = tempfile . mkdtemp ( prefix = prefix , suffix = '_extract' )
              pass
               now = now . replace ( tzinfo = None )
          super ( StreamingHttpResponse , self ) . __init__ ( * args , ** kwargs )
                      initial_prefixed_name = self . add_initial_prefix ( name )
   class_name = model . __name__ + str ( 'Form' )
              return [ ]
                  obj = mark_safe ( new_obj )
 pass
              kwargs [ 'label' ] = labels [ f . name ]
  return value
          values = [ parser . compile_filter ( arg ) for arg in args [ 1 : ] ]
                              out . write ( ' ngettext(%r, %r, count) ' % (  join_tokens ( singular , trimmed ) ,  join_tokens ( plural , trimmed ) ) )
                  self . stdout . write ( "  Unapplying %s..." % migration , ending = "" )
   def run ( self , ** options ) :
  if self . domain == 'djangojs' :
 from django . utils . text import Truncator , wrap , phone2numeric
  self . xml . endElement ( "field" )
 try :
              return ZERO
          change = fn ( )
  __all__ = ( 'NamedTemporaryFile' , 'gettempdir' , )
 @ stringfilter
 tables = connection . introspection . table_names ( )
 if origin :
              return self
 from django . db . migrations . state import ProjectState
  from datetime import datetime
 if hasattr ( extra_classes , 'split' ) :
   else :
                        continue
  class _HashedSeq ( list ) :
 self . stdout . write ( "  the new migration will be used for new installs. Once you are sure" )
   def _setup ( self ) :
 attrs . pop ( key )
 key = bytes_to_text ( key , self . encoding )
          addr . encode ( 'ascii' )
 def extra_forms ( self ) :
 from django . utils . encoding import force_text , filepath_to_uri
          return [ 'parse' , 'error' , 'request' , 'response' , 'robotparser' ]
    class RequestContext ( Context ) :
  option_value = force_text ( option_value )
  from django . conf import settings
 if last_bit :
    class SuspiciousOperation ( Exception ) :
 class ChoiceInput ( SubWidget ) :
     class BaseContext ( object ) :
  return attrs
    def http_date ( epoch_seconds = None ) :
                  yield self . choice ( obj )
 self . waiting_readers = 0
                  return os . path . getsize ( self . file . name )
              activate ( self . old_language )
          result = getattr ( t , translation_function ) ( eol_message )
  height = property ( _get_height )
      content_type = META . get ( 'HTTP_CONTENT_TYPE' , META . get ( 'CONTENT_TYPE' , '' ) )
    invalid_var_format_string = None
                   return self . tag_function ( name )
  return normpath ( path )
     def resolve ( path , urlconf = None ) :
          attrs [ 'widgets' ] = widgets
    lang_code = request . COOKIES . get ( settings . LANGUAGE_COOKIE_NAME )
 self . _expire_info = _expire_info . setdefault ( name , { } )
  page_range = property ( _get_page_range )
  else :
  except TemplateDoesNotExist :
                              out . write ( ' gettext(%r) ' % join_tokens ( singular ,  trimmed ) )
              now = datetime . now ( )
                      return ( fp . read ( ) . decode ( settings . FILE_CHARSET ) , filepath )
   @ python_2_unicode_compatible
 current = context
   def has_other_pages ( self ) :
  connection = connections [ options [ 'database' ] ]
 if not url :
              raise ValidationError ( self . error_messages [ 'invalid_choice' ] , code = 'invalid_choice' )
  if os . path . exists ( self . file_path ) and not os . path . isdir ( self . file_path ) :
  import fnmatch
 from django . db . migrations . executor import MigrationExecutor
     class HttpResponseGone ( HttpResponse ) :
              locks . lock ( fd , locks . LOCK_EX )
  def _get_height ( self ) :
 return dict ( ( key , self [ key ] ) for key in self )
 self . cc = list ( cc )
              if settings . TEMPLATE_DEBUG :
          self . template_cache = { }
  else :
 parser . add_argument ( '--traceback' , action = 'store_true' ,  help = 'Raise on exception' )
   def __len__ ( self ) :
    def create_parser ( self , prog_name , subcommand ) :
 import io
 import time
                      message . message = error_messages [ message . code ]
 oldkey = root [ KEY ]
 self . limit_choices_to = limit_choices_to
              test_runner_class . add_arguments ( parser )
          return self . input_type == 'hidden' if hasattr ( self , 'input_type' ) else False
  from django . conf import settings
   def get_many ( self , keys , version = None ) :
     @ register . filter ( is_safe = True , needs_autoescape = True )
     new_class . base_fields = declared_fields
   return str ( name ) , val
     libraries = { }
   if self . empty :
              raise ValueError ( "This file is not accessible via a URL." )
                  if dirname . startswith ( '.' ) or dirname == '__pycache__' :
              orig = self . parent_instance . pk
              fmt = config . get ( 'format' , None )
  if ( 3 , 2 ) < sys . version_info < ( 3 , 3 , 4 ) :
      from django . utils . six . moves import cPickle as pickle
 class ContentFile ( File ) :
    if six . PY3 :
 from django . utils . encoding import force_str , force_text
  return smart_text ( value )
  bits = token . contents . split ( )
          del _active . value
  else :
 self . paths_to_remove . append ( tempdir )
   signals . request_finished . send ( sender = self . _handler_class )
      has_bz2 = False
 while len ( digits ) <= abs ( exponent ) :
              six . reraise ( * exc_info )
               settings . INSTALLED_APPS
 if err_log :
          warnings . warn ( '`request.REQUEST` is deprecated, use `request.GET` or '  '`request.POST` instead.' , RemovedInDjango19Warning , 2 )
    dictConfigClass = DictConfigurator
          form = self . form (  auto_id = self . auto_id ,  prefix = self . add_prefix ( '__prefix__' ) ,  empty_permitted = True ,  )
  return os . path . normpath ( path )
   if check_path :
          if os . path . exists ( sql_file ) :
                      pass
   def __iter__ ( self ) :
  new_context = context_class ( _dict , ** {  'autoescape' : context . autoescape ,  'current_app' : context . current_app ,  'use_l10n' : context . use_l10n ,  'use_tz' : context . use_tz ,  } )
   class EscapeData ( object ) :
          assert len ( version ) == 5
              model , deps = model_dependencies . pop ( )
 _file = os . fdopen ( fd , mode )
  def __init__ ( self , attrs = None , years = None , months = None , empty_label = None ) :
          self . template_parser = parser
                  output . append ( label_output )
          if self . old_timezone is None :
                          self . _close_files ( )
                          continue
  check_for_migrations ( app_config , connection )
      def __init__ ( self , server , params , library , value_not_found_exception ) :
          if not app_config . path :
from django . http import HttpResponse
      def __init__ ( self , lexer ) :
                  error = error . error_dict
                  return False
                  e . reason += ', HTTP response headers must be in %s format' % charset
    @ property
          return ugettext ( "Please correct the duplicate values below." )
                      os . remove ( path_to_remove )
  raise ValueError (  "'%s.%s' has no ForeignKey to '%s.%s'."  % ( model . _meta . app_label , model . _meta . object_name , parent_model . _meta . app_label , parent_model . _meta . object_name ) )
              loader = find_template_loader ( loader_name )
  raise CommandError ( "Unable to serialize database: %s" % e )
   self . _post . appendlist ( field_name ,  force_text ( data , encoding , errors = 'replace' ) )
 ext = ext [ : 255 ]
 if 'file_path' in kwargs :
   def write ( self , val ) :
 parser . add_argument ( '--no-location' , action = 'store_true' , dest = 'no_location' ,  default = False , help = "Don't write '#: filename:line' lines." )
              return self . empty_form . media
              return self . data . hour - 12
   def gettext ( message ) :
 self . interactive = options . get ( 'interactive' )
                return text
  return self . as_widget ( )
                          if model not in app_list_value :
                  common_prefix = prefix
          match = self . regex . search ( path )
  for domain in domains :
   except UnicodeDecodeError as e :
 s = s . replace ( '</' , '<\\/' )
    def __deepcopy__ ( self , memo ) :
   incomment = False
              return context
 content = content . encode ( 'utf-8' )
 if slots is not None :
   def resolve_expression ( self , obj , context ) :
 if not len ( self . backout ) :
from django . utils . six . moves import html_parser as _html_parser
  return no
  except ImportError :
  with connections [ db ] . cursor ( ) as cursor :
              full_statement . append ( '    %s%s' % ( line , ',' if i < len ( table_output ) - 1 else '' ) )
 if block is None :
      from django . utils import translation
 self . xml . endElement ( "natural" )
 self . name = name
   def timesince ( d , now = None , reversed = False ) :
 leading = self . has_leading_dir ( namelist )
   except ValueError :
  else :
 from django . utils . translation import ugettext , ungettext_lazy
          self . _current = { }
              migration = executor . loader . get_migration_by_prefix ( app_label , migration_name )
 from subprocess import PIPE , Popen
  else :
                         self . stdout . write ( self . style . MIGRATE_HEADING ( "Full migrations file '%s':" % writer . filename ) + "\n" )
                          len_item = len ( item )
              for bit in self . lookups :
              raise TemplateDoesNotExist
                  targets = [ ( app_label , None ) ]
  if isinstance ( s , bytes ) :
 return FormSet
   self . key_prefix = params . get ( 'KEY_PREFIX' , '' )
 for loader_name in settings . TEMPLATE_LOADERS :
 from django . utils . http import cookie_date
              raise ValidationError ( errors )
  else :
 return ( RAW , { } , stream )
                  parser . add_option ( opt )
   if not response . has_header ( 'Last-Modified' ) :
          handler . endElement ( "channel" )
                      if f == '__pycache__' :
              self . execute ( * args , ** cmd_options )
      def __init__ ( self , stream , boundary ) :
   create_bound_method = types . MethodType
                  next_item = list_ [ i + 1 ]
 return do_ifequal ( parser , token , True )
 self . file . seek ( pos )
  if verbosity >= 2 :
  return dec
          d = ',%s' % datetime_safe . new_datetime ( date ) . strftime ( '%Y-%m-%d' )
  return Truncator ( value ) . words ( length , html = True , truncate = ' ...' )
      help = "Starts a lightweight Web server for development."
   else :
   def __exit__ ( self , exc_type , exc_value , traceback ) :
   sign = ''
 assert iterations > 0
   def valid_ident ( s ) :
           if cursor :
   def close ( self ) :
from __future__ import unicode_literals
 ret = LockFileEx ( hfile , flags , 0 , 0 , 0xFFFF0000 , byref ( overlapped ) )
   return result
                           context . pop ( )
              pass
              return True
              pass
   changes = dict (  ( app , [ Migration ( "custom" , app ) ] )  for app in app_labels  )
    def __getitem__ ( self , name ) :
  except http_cookies . CookieError :
 self . validate_key ( key )
    def __iter__ ( self ) :
            try :
              result = factory ( ** kwargs )
          wsgi_opts [ 'bindAddress' ] = None
 if len ( args ) > 1 :
  result . queryset = result . queryset
 lock = RLock ( )
              return reduce ( operator . add , dict ( self ) . values ( ) )
 import warnings
 if self . method != 'POST' :
    class MovedAttribute ( _LazyDescr ) :
              return None
    _moved_attributes = [ ]
 def __init__ ( self , initlist = None , error_class = None ) :
  else :
              self . nodelist_empty = nodelist_empty
  quote = s [ 0 ]
 choices = list ( chain ( self . choices , choices ) )
     header_end = chunk . find ( b'\r\n\r\n' )
              raise ValueError ( "Zip-compressed fixtures must contain one file." )
 g . flatten ( self , unixfrom = unixfrom )
      if not _serializers :
   response = response . render ( )
          if input_val in special_floats :
  from django . core . management . base import AppCommand
  if isinstance ( source , Group ) :
 pass
 sorted_issues = [  ( criticals , 'CRITICALS' ) ,  ( errors , 'ERRORS' ) ,  ( warnings , 'WARNINGS' ) ,  ( infos , 'INFOS' ) ,  ( debugs , 'DEBUGS' ) ,  ]
          return tuple ( bits )
 def get_resolver ( urlconf ) :
                if e . errno != errno . ENOENT :
  else :
  except Exception :
  if settings . USE_TZ :
  from django . utils . encoding import force_text , DEFAULT_LOCALE_ENCODING
  if request . method == 'HEAD' :
          raise ValueError ( 'Not a valid Python identifier: %r' % s )
 if constant_time_compare ( sig , self . signature ( value ) ) :
 self . choices . append ( ( f , f . replace ( path , "" , 1 ) ) )
 yield "# into your database."
 def is_hidden ( self ) :
                      if field . rel is None :
 filename = os . path . basename ( path )
 return any ( form . has_changed ( ) for form in self )
              nesting += 1
                      label = ''
                  formatter = self . config [ 'formatters' ] [ formatter ]
              name = config . get ( 'name' , '' )
   return getattr ( settings , format_type )
                      value = flags [ attr ]
              return _cached_filenames
  for func , args in self . filters :
  return node
                          if message_context :
   if PY3 :
   if self . match is not None :
  else :
  self . _update_unget_history ( len ( bytes ) )
   def handle ( self , * labels , ** options ) :
  else :
 app_dirs . append ( old_app_dir )
 for message in email_messages :
    for f in fields :
 self . children = children [ : ] if children else [ ]
   return value
              raise ContentNotRenderedError ( 'The response content must be '  'rendered before it can be pickled.' )
 super ( SplitDateTimeField , self ) . __init__ ( fields , * args , ** kwargs )
  def __init__ ( self , attrs = None , format = None ) :
          if hasattr ( self , '_size' ) :
    def autodiscover_modules ( * args , ** kwargs ) :
 fname = self . _key_to_file ( key , version )
  return r
 for key , value in six . iterlists ( self ) :
  KB = 1 << 10
   with io . open ( potfile , 'w' , encoding = 'utf-8' ) as fp :
              self . _setup ( )
                  if status != STATUS_OK :
 for app_config in apps . get_app_configs ( ) :
 import posixpath
  return '%s %s' % ( self . f ( ) , self . a ( ) )
 def check_1_6_compatibility ( ** kwargs ) :
                      app = 'django'
     class RegexURLResolver ( LocaleRegexProvider ) :
      import imp
              for date_key in date_keys :
          if self . pos >= len ( self . tokens ) :
    def sanitize_address ( addr , encoding ) :
 return self . is_bound and not self . errors
 def to_bytes ( val , encoding ) :
              self . message = message
    def quote_etag ( etag ) :
 warnings . warn ( warn_msg , TranslatorCommentWarning )
 if ch :
  except VariableDoesNotExist :
 if six . PY2 :
 key = bytes_to_text ( key , self . encoding )
 fp = six . StringIO ( )
              view_func = getattr ( mod , func_name )
              raise BadSignature ( 'No "%s" found in value' % self . sep )
 if len ( bits ) != 2 :
 self . _reverse_dict = { }
    def _lazy_proxy_unpickle ( func , args , kwargs , * resultclasses ) :
  except AttributeError :
    def get_template ( template_name , dirs = None ) :
          __slots__ = 'hashvalue'
 for basedir in basedirs :
                      data [ field . attname ] = None
          return s
      input_type = 'file'
 if isinstance ( self , nodetype ) :
 allow_cascade = options . get ( 'allow_cascade' , False )
 self . app_name = app_name
          attrs = super ( IntegerField , self ) . widget_attrs ( widget )
 import re
  raise TemplateDoesNotExist ( error_msg )
    def __delattr__ ( self , name ) :
    def get_str_from_wsgi ( environ , key , default ) :
              mimetype , _ = mimetypes . guess_type ( filename )
  else :
              daemonize = False
  return False
   def _assert_mutable ( self ) :
     def import_by_path ( dotted_path , error_prefix = '' ) :
 from django . utils import six
                  pass
                  lineno , offset = self . getpos ( )
 if not field . show_hidden_initial :
          if name . lower ( ) == 'subject' :
  excluded_models . add ( model )
  language_code_re = re . compile ( r'^[a-z]{1,8}(?:-[a-z0-9]{1,8})*$' , re . IGNORECASE )
              num = 0
  return '<%s: %r>' % ( type ( self ) . __name__ , repr_attr )
 return response
              result = datetime . datetime ( value . year , value . month , value . day )
   def to_python ( self , value ) :
 inner_html = '<li>{choice_value}{sub_widgets}</li>'
   def add_truncation_text ( self , text , truncate = None ) :
       import datetime
   if six . PY2 and value > sys . maxint :
     def translation ( language ) :
              self . stdout . write ( self . style . MIGRATE_HEADING ( "Optimizing..." ) )
 self . use_l10n = use_l10n
  if command . verbosity > 1 :
 from django . db import connections , DEFAULT_DB_ALIAS
 import os
 __init__ = type . __init__
              return value . date ( )
 inplural = False
 if '/' in path and ( ( '\\' in path and path . find ( '/' ) < path . find ( '\\' ) )  or '\\' not in path ) :
  options [ option ] = value
               self . _initialize_handlers ( )
    def get_system_encoding ( ) :
      self . _request_middleware = request_middleware
   def __repr__ ( self ) :
 if imatch . group ( 2 ) :
 def errors ( self ) :
                  validate_ipv46_address ( ip_address )
  else :
                      content = content . decode ( 'utf-8' )
 fname = "%s-%s.log" % ( timestamp , abs ( id ( self ) ) )
   def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
          return text . __html__ ( )
 if self . _num_pages is None :
 options = self . render_options ( choices , value )
 super ( DecimalField , self ) . __init__ ( max_value , min_value , * args , ** kwargs )
              name_str = "; " . join (  "%s in %s" % ( ", " . join ( names ) , app )  for app , names in conflicts . items ( )  )
                      self . stderr . write (  "Notice: Couldn't set permission bits on %s. You're "  "probably using an uncommon filesystem setup. No "  "problem." % new_path , self . style . NOTICE )
 propagate = config . get ( 'propagate' , None )
 messages = [ EmailMessage ( subject , message , sender , recipient ,  connection = connection )  for subject , message , sender , recipient in datatuple ]
  except smtplib . SMTPException :
  c . append ( tok )
   if initial_forms > self . max_num >= 0 :
                          try :
      help = ( "Creates a Django project directory structure for the given "  "project name in the current directory or optionally in the "  "given directory." )
      return lazy_number ( ungettext , six . text_type , singular = singular , plural = plural , number = number )
  self . namespace = ':' . join ( self . namespaces )
 if ( isinstance ( args [ 0 ] , SafeData ) and  getattr ( _dec . _decorated_function , 'is_safe' , False ) ) :
   else :
  def to_python ( self , value ) :
  tagname = tagname . lower ( )
              return
      def sync_apps ( self , connection , app_labels ) :
 self . _clean_form ( )
   def keys ( self ) :
 return tpl . format ( self . sysid , self . pubid )
 if not roots :
  handle_default_options ( options )
 filename = tmp . split ( '/' ) [ - 1 ]
          """         Set a value in the cache if the key does not already exist. If         timeout is given, that timeout will be used for the key; otherwise         the default cache timeout will be used.         Returns True if the value was stored, False otherwise.         """
      help = "Prints the CREATE INDEX SQL statements for the given model module name(s)."
      def __init__ ( self , filter_expr , nodelist ) :
  except TypeError :
  nodelist = parser . parse ( ( 'endwith' , ) )
              output = ''
    return LoadNode ( )
  elif isinstance ( obj , EscapeData ) :
  except UnicodeError :
   def strip_spaces_between_tags ( value ) :
 for refto , refs in references . items ( ) :
  else :
   def modified_time ( self , name ) :
 int2byte = chr
                          self . template_cache [ key ] = ( template , origin )
 from django . utils . encoding import force_text , smart_text
   def __str__ ( self ) :
                      declared_fields . pop ( attr )
 from importlib import import_module
 if len ( fks_to_parent ) == 1 :
 memoryview = memoryview
 self . symlinks = options . get ( 'symlinks' )
          return apps . get_model ( model_identifier )
  else :
 break
                          data = field_stream . read ( )
   def _html_output ( self , normal_row , error_row , row_ender , help_text_html , errors_on_separate_row ) :
 return obj
      def __init__ ( self , field ) :
 if 'max-age' in cc :
              try :
                          out . write ( ' gettext(%r) ' % g )
   return EventHandler . modified_code
   return statements
 REQUEST = property ( _get_request )
    return self . _post , self . _files
                  qs = self . model . _default_manager . get_queryset ( )
  return [ None , None ]
 return mark_safe ( _helper ( value ) )
  return render_value_in_context ( value , context )
 self . _template_response_middleware = [ ]
 if loader is not None :
   def extract ( self , to_path = '' ) :
   class MultiPartParser ( object ) :
   if klass not in cls . __dispatch :
   response . _closable_objects . append ( request )
          available_shells = [ shell ] if shell else self . shells
                  url = smart_urlquote ( 'http://%s' % middle )
 from email . utils import formatdate , getaddresses , formataddr , parseaddr
              if new_name . endswith ( '_id' ) :
 return func
       _version = "2.0"
                  continue
 from django . utils . deprecation import RemovedInDjango19Warning
 return filelist
          with open ( options [ "pidfile" ] , "w" ) as fp :
                  if name in lib . tags :
    def gettext_noop ( message ) :
  mapped_tokens . append ( self . translate_token ( token ) )
   def add_blocks ( self , blocks ) :
          return VariableNode ( filter_expression )
          LocaleRegexProvider . __init__ ( self , regex )
 self . META = { }
                      shutil . rmtree ( path_to_remove ,  onerror = rmtree_errorhandler )
 return mark_safe ( linebreaks ( value , autoescape ) )
                              self . stdout . write ( "    Creating table %s\n" % model . _meta . db_table )
  def __init__ ( self , * args , ** kwargs ) :
          warnings . warn ( '"validate" has been deprecated in favor of "check".' ,  RemovedInDjango19Warning )
  except KeyError :
          raise NotImplementedError ( 'subclasses of BaseArchive must provide a list() method' )
      def _key_to_file ( self , key , version = None ) :
                  if self . verbosity > 0 :
              return [ ( k , self [ k ] ) for k in self . keyOrder ]
 now = now . replace ( microsecond = 0 )
  def add_arguments ( self , parser ) :
    def _import_module ( name ) :
 notifier = pyinotify . Notifier ( wm , EventHandler ( ) )
 from django . core import signals
 base = base [ : - 4 ]
 re_newlines = re . compile ( r'\r\n|\r' )
 return
 if self . _is_rendered :
 for p in plist :
              raise CommandError ( "Type '%s help %s' for usage information." % (  os . path . basename ( sys . argv [ 0 ] ) , sys . argv [ 1 ] ) )
  except ( ValueError , TypeError , ValidationError ) :
 from django . utils import six
         for cache in caches . all ( ) :
   url_fields = split_url ( urlunsplit ( url_fields ) )
 self . ignore = options . pop ( 'ignorenonexistent' , False )
              return False
  else :
 inverse_match = False
    def now ( ) :
    class CheckboxSelectMultiple ( RendererMixin , SelectMultiple ) :
    translation . activate ( settings . LANGUAGE_CODE )
              args . append ( self . choices )
    @ register . filter ( is_safe = True )
 self . _headers [ header . lower ( ) ] = ( header , value )
 self . verbose_name_plural = 'cache entries'
 s = force_text ( s ) . strip ( ) . replace ( ' ' , '_' )
  except IndexError :
                  if block_content [ : 9 ] in ( 'verbatim' , 'verbatim ' ) :
 lib = import_library ( taglib_module )
 self . _app_dict = { }
              x = x * len ( from_digits ) + from_digits . index ( digit )
    self . base_fields [ MIN_NUM_FORM_COUNT ] = IntegerField ( required = False , widget = HiddenInput )
               self . filters [ name ] = filter_func
              msg = self . style . HTTP_NOT_MODIFIED ( msg )
   self . invoked_for_django = False
 BLOCK_TAG_START = '{%'
  else :
      def __init__ ( self , * args , ** kwargs ) :
   def _get_to_python ( self , field ) :
 return self . set_cookie ( key , value , ** kwargs )
                      help_text = help_text_html % force_text ( field . help_text )
 from django . utils . encoding import force_text
 def lower ( value ) :
  if pk_is_not_editable ( pk ) or pk . name not in form . fields :
def deconstructible ( * args , ** kwargs ) :
  super ( Textarea , self ) . __init__ ( default_attrs )
 from django . core . management . sql import sql_flush
                  msgs = self . copy_plural_forms ( msgs , locale )
 raise ImproperlyConfigured ( msg . format ( name = self . urlconf_name ) )
  else :
   __getattr__ = new_method_proxy ( getattr )
                      command = token . contents . split ( ) [ 0 ]
 c . load ( cookie )
              potfile = os . path . join ( path , '%s.pot' % str ( self . domain ) )
 remove = complain
    self . xml . startElement ( "object" , attrs )
          return date_format ( value , use_l10n = use_l10n )
              super ( Serializer , self ) . handle_field ( obj , field )
              if isinstance ( other , Promise ) :
   if ':' not in ip_str :
  return obj_pk
                  raise CommandError ( "Destination directory '%s' does not "  "exist, please create it first." % top_dir )
          LocaleRegexProvider . __init__ ( self , regex )
 if comment_notes :
              return self . sign + value
     if opts . managed :
              with io . open ( potfile , 'r' , encoding = 'utf-8' ) as fp :
              self . _close_files ( )
 if not self . _is_rendered :
  elif name == 'string' :
          from django . conf import settings
               return dec
 return tpl . format ( self . name , self . sysid , self . pubid )
from __future__ import unicode_literals
  output_transaction = True
     class ExternalReferenceForbidden ( DefusedXmlException ) :
   def render_option ( self , selected_choices , option_value , option_label ) :
                       field_value = getInnerText ( node ) . strip ( )
 for ext in extensions :
                      pass
 while model_dependencies :
          return self . value == self . choice_value
   _BROWSERS_DEPRECATED_LOCALES = {  'zh-cn' : 'zh-hans' ,  'zh-tw' : 'zh-hant' ,  }
                      common_ancestor = level [ 0 ]
          form = super ( BaseInlineFormSet , self ) . _construct_form ( i , ** kwargs )
          from importlib . util import find_spec as importlib_find
  if os . path . exists ( filename ) :
 parser . add_argument ( '--natural-foreign' , action = 'store_true' , dest = 'use_natural_foreign_keys' , default = False ,  help = 'Use natural foreign keys if they are available.' )
   self . _current_app = current_app
 _cached_modules = set ( )
 global _default
 raise NotImplementedError ( 'subclasses of NoArgsCommand must provide a handle_noargs() method' )
          idstring = ''
    def ngettext ( singular , plural , number ) :
  localize = kwargs . get ( 'localize' , False )
              self [ key ] = result
 super ( ChoiceField , self ) . validate ( value )
    def add_never_cache_headers ( response ) :
  del attr
 from django . utils import six
      def __init__ ( self , template , * args , ** kwargs ) :
                  if app == 'django.core' :
 @ stringfilter
                      del self [ key ]
 regexes = self . regexes
 if settings . USE_I18N :
   def add_library ( self , lib ) :
 counters = [ 0 ] * len ( handlers )
  if doublecolon_len > best_doublecolon_len :
 from django . core . management . templates import TemplateCommand
       def __init__ ( self , file ) :
              data = bool ( data )
                          yield obj
              app_configs = reversed ( list ( apps . get_app_configs ( ) ) )
              return language [ : p ] . lower ( ) + '_' + language [ p + 1 : ] . lower ( )
    if var . endswith ( '.' ) :
              raise TemplateSyntaxError ( "No named cycles in template. '%s' is not defined" % name )
 parts = fixture_name . rsplit ( '.' , 2 )
                  file_path = os . path . normpath ( os . path . join ( dirpath , filename ) )
   def new_method_proxy ( func ) :
              table_names = connection . introspection . table_names ( cursor )
 self . pos += 1
  else :
   def render ( self , name , value , attrs = None ) :
  result = super ( DateTimeField , self ) . to_python ( value )
  sys . modules [ __name__ + ".moves.urllib_request" ] = sys . modules [ __name__ + ".moves.urllib.request" ] = Module_six_moves_urllib_request ( __name__ + ".moves.urllib.request" )
 def closed ( self ) :
       self . fields = copy . deepcopy ( self . base_fields )
    class RWLock ( object ) :
          try :
 def nodelist ( self ) :
  chars = allow_lazy ( chars )
   super ( Command , self ) . run_from_argv ( argv )
   elif t . token_type == TOKEN_VAR :
   if not now :
              from django . utils . translation import trans_real as trans
          super ( ModelMultipleChoiceField , self ) . __init__ ( queryset , None ,  cache_choices , required , widget , label , initial , help_text ,  * args , ** kwargs )
      def __init__ ( self , token_type , contents ) :
 from django . template import loader , Context , RequestContext
 def needs_multipart_form ( self ) :
                if comment_lineno_cache is not None :
 output , errors , status = popen_wrapper ( args )
   def compile_filter ( self , token ) :
    def get_language_bidi ( ) :
                  raise
     self . instance = construct_instance ( self , self . instance , opts . fields , construct_instance_exclude )
   def unescape_string_literal ( s ) :
 self . toks [ groupid ] = tok
  if cache_choices is not None :
  def chunks ( self , chunk_size = None ) :
  else :
 return self . data . isoformat ( )
 if match :
              iter ( patterns )
 urlresolvers . set_urlconf ( urlconf )
              getattr ( self , 'add_' + name ) ( media_attrs . get ( name , None ) )
              size = self . remaining
   if locales :
              value = formats . sanitize_separators ( value )
  elif user_settings [ key ] != default_settings [ key ] :
   def __getattr__ ( self , attr ) :
 d = ''
 return qs
              self . seek ( 0 )
              format_module_path = [ format_module_path ]
          parser . add_argument ( 'addrport' , nargs = '?' ,  help = 'Optional port number, or ipaddr:port' )
  else :
          path = str ( path )
      class SkipFile ( UploadFileException ) :
                      errors = "strict"
  return cache_key
              return list_ , False
  except CommandError :
                      lookup_str = callback . __module__ + "." + callback . __class__ . __name__
                  _html_parser . HTMLParser . __init__ ( self , convert_charrefs = convert_charrefs , ** kwargs )
 while '%s_%d' % ( new_name , num ) in used_column_names :
          return SafeText ( s )
   def translate_token ( self , token ) :
 if options [ 'outlog' ] :
 try :
          self . content = content
 connection = connections [ options . get ( 'database' , DEFAULT_DB_ALIAS ) ]
  else :
              taglib_module = '%s.%s' % ( module , library_name )
   def _has_changed ( self , initial , data ) :
   RUN_RELOADER = True
          return value
  return result
  else :
  elif len ( options . args ) < 1 :
 if not buf :
                  with open ( filepath , 'rb' ) as fp :
    sign , digits , exponent = d . quantize ( exp , ROUND_HALF_UP ,  Context ( prec = prec ) ) . as_tuple ( )
   from django . core . exceptions import ValidationError
 msgs , errors , status = popen_wrapper ( args )
    def ungettext ( singular , plural , number ) :
   def __getinitargs__ ( self ) :
   ugettext_noop = gettext_noop
  else :
  exclude = self . _get_validation_exclusions ( )
       major = get_major_version ( version )
 def __init__ ( self , name , value , base , sysid , pubid , notation_name ) :
          raise ValueError ( "%r is not in a valid HTTP date format" % date )
  commands_dict [ app ] . append ( name )
 if fg in color_names :
 choices = [ ( i , i ) for i in range ( 1 , 32 ) ]
          if self . _encoding is None :
   def render ( self , name , value , attrs = None ) :
  return get_resolver ( urlconf ) . resolve ( path )
          self . _reset_dicts ( dict_ )
  elif isinstance ( value , datetime . time ) :
                             six . reraise ( * exc_info )
  except AttributeError :
 if jan1_weekday > 4 :
  else :
     def unregister_serializer ( format ) :
 import stat
 if value is None :
              raise self . error_class ( "Unused '%s' at end of if expression." %  self . current_token . display ( ) )
 id_ = widget . attrs . get ( 'id' ) or self . auto_id
   if msgs :
   save . alters_data = True
 from django . utils . six . moves import input
 changes = autodetector . changes ( graph = executor . loader . graph )
 from django . utils . encoding import force_text
   def open ( self , mode = None ) :
 from django . template . loader import BaseLoader
 self . _cache . delete ( key )
              param = None
  elif args [ - 2 ] == "as" :
      @ lru_cache . lru_cache ( maxsize = None )
  result . sort ( key = lambda k : k [ 1 ] , reverse = True )
     class MemcachedCache ( BaseMemcachedCache ) :
          attrs = super ( FloatField , self ) . widget_attrs ( widget )
    class HttpRequest ( object ) :
  else :
                  new_msg = (  "Database %s couldn't be flushed. Possible reasons:\n"  "  * The database isn't running or isn't configured correctly.\n"  "  * At least one of the expected database tables doesn't exist.\n"  "  * The SQL was invalid.\n"  "Hint: Look at the output of 'django-admin.py sqlflush'. That's the SQL this command wasn't able to run.\n"  "The full error: %s" ) % ( connection . settings_dict [ 'NAME' ] , e )
  return result
              u = salt + struct . pack ( b'>I' , i )
   def extract ( self ) :
  if len ( args ) < 2 :
 base_path = abspathu ( base )
 if words and length <= 0 :
              continue
              queryset = self . model . _default_manager
   def resolve ( self , path ) :
                  field_output . append ( "PRIMARY KEY" )
     return offset . days * 86400 + offset . seconds
 if not directory_created . get ( app_label , False ) :
  self = tuple . __new__ ( cls , * args , ** kwargs )
   except GeneratorExit :
 end_text_pos = 0
 for k , v in self . choices :
                  if app_name not in loader . migrated_apps :
          if value :
  except AttributeError :
    all_locales = [ ]
                  for app_name , model_list in manifest . items ( ) :
  def __init__ ( self , streaming_content = ( ) , * args , ** kwargs ) :
 try :
 base_lang = get_language ( ) . split ( '-' ) [ 0 ]
                      data [ f . name ] = [ item . pk for item in qs ]
          for path in self . locale_paths :
   class Command ( TemplateCommand ) :
  __all__ = ( 'Template' , 'Context' , 'RequestContext' , 'compile_string' )
    if item [ 'unique_id' ] is not None :
   else :
      def __init__ ( self , * args , ** kwargs ) :
 handlers [ name ] = handler
   for opening , closing in WRAPPING_PUNCTUATION :
              try :
              return { }
  return
              return key [ 0 ]
   else :
          self . file = file
  return force_bytes ( s , encoding , strings_only , errors )
                  self . stdout . write ( "Cache table '%s' already exists." % tablename )
 if self . required and not value :
      class CommentNode ( Node ) :
            try :
 self . content_length = content_length
  except UnicodeDecodeError :
 if is_templatized :
  except KeyError :
              formfield = self . fields [ field_name ]
    def save_instance ( form , instance , fields = None , fail_message = 'saved' ,  commit = True , exclude = None , construct = True ) :
 offset = ( len ( self . __starttag_text )  - self . __starttag_text . rfind ( "\n" ) )
 default_error_messages = {  'invalid_date' : _ ( 'Enter a valid date.' ) ,  'invalid_time' : _ ( 'Enter a valid time.' ) ,  }
 parser . add_argument ( '-e' , '--exclude' , dest = 'exclude' , action = 'append' , default = [ ] ,  help = 'An app_label or app_label.ModelName to exclude '  '(use multiple --exclude to exclude multiple apps/models).' )
  if priority :
   call_command ( 'loaddata' , * fixture_labels , ** { 'verbosity' : verbosity } )
    @ register . filter ( is_safe = True )
     class TypedChoiceField ( ChoiceField ) :
 self . setlistdefault ( key ) . append ( value )
      pass
          return ip_address_validator_map [ protocol . lower ( ) ]
          return self . represent_scalar ( 'tag:yaml.org,2002:str' , str ( data ) )
              if args [ - 1 ] != "silent" :
  return TemplateTagNode ( tag )
 return self . field . widget . value_from_datadict ( self . form . data , self . form . files , self . html_name )
 get_resolver . cache_clear ( )
 value = map ( force_text , value )
 module = import_module ( '%s.management.commands.%s' % ( app_name , name ) )
 kw = [ d . year , d . month , d . day ]
          tables = connection . introspection . table_names ( )
          return iter ( self . _container )
   def __exit__ ( self , exc_type , exc_value , traceback ) :
          timezone = get_current_timezone ( )
   self . autocomplete ( )
 has_bz2 = True
 def fset ( instance , value , name = fset . __name__ ) :
          encoding = self . encoding or settings . DEFAULT_CHARSET
 obj = '%s.%s' % ( app , model . _meta . object_name )
          path = force_text ( path )
  return self . parent_instance
                  display_url = url
  except ( ValueError , InvalidOperation , TypeError , UnicodeEncodeError ) :
 field = self . fields [ fieldname ]
  else :
  try :
   class SerializerDoesNotExist ( KeyError ) :
 models = app_config . get_models ( include_auto_created = True )
   return self . _count
  __all__ = [  'utc' , 'get_fixed_timezone' ,  'get_default_timezone' , 'get_default_timezone_name' ,  'get_current_timezone' , 'get_current_timezone_name' ,  'activate' , 'deactivate' , 'override' ,  'localtime' , 'now' ,  'is_aware' , 'is_naive' , 'make_aware' , 'make_naive' ,  ]
              self . _update_errors ( e )
 parser . add_argument ( '--no-wrap' , action = 'store_true' , dest = 'no_wrap' ,  default = False , help = "Don't break long message lines into several lines." )
 obj_dict = super ( SimpleTemplateResponse , self ) . __getstate__ ( )
 class SubWidget ( object ) :
 foreground = dict ( ( color_names [ x ] , '3%s' % x ) for x in range ( 8 ) )
 bits = token . split_contents ( )
                  break
              if len ( new_operations ) == len ( operations ) :
 start += len ( toktext )
 args = hashlib . md5 ( force_bytes ( key ) )
                  slots = [ slots ]
 globalpath = os . path . join (  os . path . dirname ( upath ( sys . modules [ settings . __module__ ] . __file__ ) ) , 'locale' )
 if options [ 'app_label' ] and options [ 'migration_name' ] :
              return QueryDict ( '' , encoding = self . _encoding ) , MultiValueDict ( )
   def update_error_dict ( self , error_dict ) :
          try :
  def load_template_source ( self , template_name , template_dirs = None ) :
 return '' . join ( char2number . get ( c , c ) for c in phone . lower ( ) )
  if f . name in cleaned_data :
              final_output . append ( '-- The following references should be added but depend on non-existent tables:' )
  return original_urlencode (  [ ( force_str ( k ) ,  [ force_str ( i ) for i in v ] if isinstance ( v , ( list , tuple ) ) else force_str ( v ) )  for k , v in query ] ,  doseq )
                  raise ImproperlyConfigured ( 'The SECURE_PROXY_SSL_HEADER setting must be a tuple containing two values.' )
          if self . _wrapped is empty :
                      compile_func = self . tags [ command ]
 from itertools import chain
 from django . utils . deconstruct import deconstructible
  except ValueError :
  except OSError as e :
                  last_row = output [ - 1 ]
 if self . feed [ 'ttl' ] is not None :
   def set_cdata_mode ( self , tag ) :
 if dirname and not os . path . exists ( dirname ) :
  return initial != data
 self . _populated = True
           if id_ :
   return obj
 if print_ is None :
              django . setup ( )
 error = sys . modules [ __name__ + ".moves.urllib_error" ]
                  self . stdout . write ( "  Creating tables...\n" )
          raise BadHeaderError ( "Header values can't contain newlines (got %r for header %r)" % ( val , name ) )
              return True
  elif self . nodelist_false :
   def connection ( self ) :
    return iri_to_uri ( resolver . _reverse_with_prefix ( view , prefix , * args , ** kwargs ) )
   def itervalues ( d , ** kw ) :
 def path ( self ) :
from __future__ import unicode_literals
 if label_output :
 def __getattr__ ( self , name ) :
  all_files . append ( TranslatableFile ( dirpath , filename , locale_dir ) )
              return self . forms [ 0 ] . is_multipart ( )
    def get_serializer_formats ( ) :
 parts . reverse ( )
   choices = property ( _get_choices , ChoiceField . _set_choices )
     def media_property ( cls ) :
  def __init__ ( self , data = None , files = None , auto_id = 'id_%s' , prefix = None ,  queryset = None , ** kwargs ) :
          fks_to_parent = [ f for f in opts . fields if f . name == fk_name ]
  else :
  elif char in 'Yy' :
   except KeyError :
   elif self . verbosity == 3 :
 for h in handlers :
          _active . value = pytz . timezone ( timezone )
   def _get_scheme ( self ) :
 if lang_code not in _supported and replacement in _supported :
 for member in members :
 parser . add_argument ( '--template' ,  help = 'The path or URL to load the template from.' )
              header = header . upper ( ) . replace ( '-' , '_' )
 value . configurator = self
 logger = logging . getLogger ( name )
 def _get_val ( ) :
                  return getattr ( instance , name ) ( )
              new_conn_created = self . open ( )
  if isinstance ( s , ( six . text_type , Promise ) ) :
              if getattr ( e , 'winerror' , 0 ) != 32 and getattr ( e , 'errno' , 0 ) != 13 :
                  v ( value )
 if hasattr ( timezone , 'normalize' ) :
                  break
          return [ ]
  def add_arguments ( self , parser ) :
 if in_tag and token_string . startswith ( BLOCK_TAG_START ) :
  register = Library ( )
   if six . PY3 :
              i += 1
    if callable ( current ) :
                      template , display_name = loader ( name , dirs )
 def spaceless ( parser , token ) :
   size = property ( _get_size , _set_size )
 yield "#   * Make sure each model has one field with primary_key=True"
 pk = self . data [ pk_key ]
 register = registry . register
                   return self . filter_function ( name , ** flags )
                  return self . __text_cast ( )
   return super ( ModelChoiceField , self ) . prepare_value ( value )
                  return template . render ( context . new ( values ) )
               ERRORS = {  errno . EACCES : "You don't have permission to access that port." ,  errno . EADDRINUSE : "That port is already in use." ,  errno . EADDRNOTAVAIL : "That IP address can't be assigned-to." ,  }
  elif isinstance ( value , ( decimal . Decimal , float ) + six . integer_types ) :
  def __init__ ( self , subject = '' , body = '' , from_email = None , to = None , bcc = None ,  connection = None , attachments = None , headers = None , alternatives = None ,  cc = None ) :
                          data [ field . attname ] = field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
           return ip_str
          self . fail_silently = fail_silently
          return len ( list ( self . __iter__ ( ) ) )
 message_context = context_match . group ( 1 )
  except StandardError as e :
   def __eq__ ( self , other ) :
 directories , files = [ ] , [ ]
 return self . file . closed
    for hextet in ip_str . split ( ':' ) :
          choice = self . choices [ idx ]
              self . extra_context [ name ] = var
       sites = [ ]
   def __contains__ ( self , item ) :
          get = ( pformat ( GET_override )  if GET_override is not None  else pformat ( request . GET ) )
 from django . core . management import call_command
              try :
          return "<WithNode>"
 def data ( self ) :
          result = self . __class__ ( '' , mutable = True , encoding = self . encoding )
              template , origin = self . find_template ( template_name , template_dirs )
              extra_classes = extra_classes . split ( )
              connection_params [ 'timeout' ] = self . timeout
              if cnt and not cnt % grouping :
 from django . template . base import ( Node , NodeList , Template , Context , Library ,  TemplateSyntaxError , VariableDoesNotExist , InvalidTemplateLibrary ,  BLOCK_TAG_START , BLOCK_TAG_END , VARIABLE_TAG_START , VARIABLE_TAG_END ,  SINGLE_BRACE_START , SINGLE_BRACE_END , COMMENT_TAG_START , COMMENT_TAG_END ,  VARIABLE_ATTRIBUTE_SEPARATOR , get_library , token_kwargs , kwarg_re ,  render_value_in_context )
   class RemovedInDjango20Warning ( PendingDeprecationWarning ) :
 filter = get_exception_reporter_filter ( request )
  else :
                  self . active_writers += 1
   DEFAULT_LOCALE_ENCODING = get_system_encoding ( )
   T = [ F ( x ) for x in range ( 1 , l ) ]
  return self . _post
    @ register . filter ( is_safe = True )
          return do_translate ( message , 'ugettext' )
 self . validate_key ( key )
 for migration in migrations_to_squash :
     def localize_input ( value , default = None ) :
              defaults [ 'data' ] = self . data
    @ property
  else :
  return base , ext
 weekday = self . data . weekday ( ) + 1
    def parse ( self ) :
 return '%06d' % self . data . microsecond
  table2model = lambda table_name : re . sub ( r'[^a-zA-Z0-9]' , '' , table_name . title ( ) )
    return default
 handler . addQuickElement ( "link" , self . feed [ 'link' ] )
 if version is None :
                  if bf_errors :
   if self . verbosity > 0 :
 for field , errors in self . items ( ) :
from __future__ import unicode_literals
          return self . load_template ( template_name , template_dirs )
   if pathext is None :
              handler . startElement ( "entry" , self . item_attributes ( item ) )
  except UnicodeEncodeError :
              obj . save ( )
 nodes = [ ]
 if self . output_transaction :
 from django . utils . deprecation import RemovedInDjango19Warning
              executor . migrate ( targets , plan , fake = options . get ( "fake" , False ) )
              with io . open ( fd , 'wb' ) as f :
   return inner
      DEFAULT_CHUNK_SIZE = 64 * 2 ** 10
 import sys
 return self . _callback
 if app_config . label in loader . migrated_apps :
          pass
 self . verbatim = False
   class AutoEscapeControlNode ( Node ) :
 try :
          db = router . db_for_write ( self . cache_model_class )
    def save_m2m ( ) :
 connection = connection or get_connection ( username = auth_user ,  password = auth_password ,  fail_silently = fail_silently )
 from django . utils import six
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
 digits = [ six . text_type ( digit ) for digit in reversed ( digits ) ]
 fg = colors . pop ( )
          return self . as_ul ( )
 result = [ ]
  for p in parts [ 1 : ] :
 return data . get ( name , None )
 _empty_value = ''
   def strptime ( self , value , format ) :
 from django . db . migrations . executor import MigrationExecutor
              if hasattr ( message , 'error_dict' ) :
  from django . utils . encoding import force_str
 return self . as_widget ( self . field . hidden_widget ( ) , attrs , ** kwargs )
          if self . domain_regex . match ( domain_part ) :
 self . __dt = dt
                      for f in files :
                  sys . stdout . write ( self . main_help_text ( ) + '\n' )
   def __str__ ( self ) :
 import threading
  if node . getElementsByTagName ( 'None' ) :
  del cache [ oldkey ]
 from django . utils . encoding import force_text , iri_to_uri
  else :
              raise SuspiciousMultipartForm (  "The multipart parser got stuck, which shouldn't happen with"  " normal uploaded files. Check for malicious upload activity;"  " if there is none, report this to the Django developers."  )
                          idx = m . groups ( ) [ 0 ]
  app_template_dirs = [ ]
 new_permissions = stat . S_IMODE ( st . st_mode ) | stat . S_IWUSR
   self . _callback_strs = set ( )
          if to_lower :
 zfile . write ( s )
   def list ( self ) :
          try :
 class MinLengthValidator ( BaseValidator ) :
              self . children . append ( data )
  for ext in pathext :
                          self . configure_root ( root , True )
          if hasattr ( self , '_files' ) :
   try :
                  other = other . __cast ( )
  if ch == '+' :
 self . _errors = None
              handler . addQuickElement ( "author" , "%s (%s)" %  ( item [ 'author_email' ] , item [ 'author_name' ] ) )
  else :
  potfiles . append ( potfile )
  if tablename in connection . introspection . table_names ( ) :
 if len ( bits ) != 2 :
  except StandardError as e :
 six . reraise ( CommandError , CommandError ( new_msg ) , sys . exc_info ( ) [ 2 ] )
 self . old_language = get_language ( )
 get_method_self = operator . attrgetter ( _meth_self )
                      if plan_node not in shown and plan_node [ 0 ] == app_name :
 if not model_identifier :
  kwargs . setdefault ( 'content_type' , 'application/json' )
 request = sys . modules [ __name__ + ".moves.urllib_request" ]
              return mark_safe ( self . render ( self . context ) )
 if not hasattr ( c , '__call__' ) and hasattr ( types , 'ClassType' ) and type ( c ) != types . ClassType :
                      try :
  return save_instance ( self , self . instance , self . _meta . fields ,  fail_message , commit , self . _meta . exclude ,  construct = False )
              handler . addQuickElement ( "category" , cat )
                          apps . setdefault ( app_name , [ ] ) . extend ( namespace_list )
    if six . PY2 :
   def full_clean ( self ) :
                  if isinstance ( field , FileField ) :
     return Operator
 data_set = set ( force_text ( value ) for value in data )
   def trim_whitespace ( s ) :
    location = urljoin ( current_uri , location )
          tables = connection . introspection . django_table_names ( only_existing = True )
              try :
          formfield_callback = attrs . pop ( 'formfield_callback' , None )
              return default
              def m2m_convert ( n ) :
    def filepath_to_uri ( path ) :
    def runfastcgi ( argset = [ ] , ** kwargs ) :
    def save ( self , commit = True ) :
  except KeyError :
 safe_data [ key ] = value
 if ch in "iLmsu#" :
  raise CommandError ( message )
 self . _read_started = False
   def id_for_label ( self , id_ ) :
                  return list ( urlsplit ( url ) )
  with connections [ db ] . cursor ( ) as cursor :
 result = c ( ** kwargs )
 hidden_widget = MultipleHiddenInput
   def close ( self , ** kwargs ) :
  except ImportError :
      pass
              weight += 1
 from django . utils import six
   def _create_attachment ( self , filename , content , mimetype = None ) :
                          current = settings . TEMPLATE_STRING_IF_INVALID
                   self . _files . appendlist (  force_text ( old_field_name , self . _encoding , errors = 'replace' ) ,  file_obj )
  def __init__ ( self , stream_or_string , ** options ) :
              pkg_name = 'templates/' + template_name
 if comment_lineno_cache == cur_lineno :
 if m is not None and n is not None :
 return self
 def content ( self ) :
  return _ ( 'AM' )
 if autoescape and not safe_input :
  with connections [ db ] . cursor ( ) as cursor :
 if index < 0 :
 if value in self . empty_values :
                   raise ViewDoesNotExist (  "Could not import '%s.%s'. View is not callable." %  ( mod_name , func_name ) )
 parser . add_argument ( '--pks' , dest = 'primary_keys' ,  help = "Only dump objects with given primary keys. "  "Accepts a comma separated list of keys. "  "This option will only work when you specify one model." )
   @ classmethod
  self . backout . append ( self . pointer )
              value = ''
 return scheme in self . url_schemes
 kwargs [ 'error_messages' ] = error_messages
 from importlib import import_module
                  r = r [ : - 6 ] + 'Z'
  states = {   'div' : both_before + [  Tok ( "punct" , literals ( "/= /" ) , next = 'reg' ) ,  ] + both_after ,    'reg' : both_before + [  Tok ( "regex" ,  r"""                     /                       # opening slash                     # First character is..                     (   [^*\\/[]            # anything but * \ / or [                     |   \\.                 # or an escape sequence                     |   \[                  # or a class, which has                             (   [^\]\\]     #   anything but \ or ]                             |   \\.         #   or an escape sequence                             )*              #   many times                         \]                     )                     # Following characters are same, except for excluding a star                     (   [^\\/[]             # anything but \ / or [                     |   \\.                 # or an escape sequence                     |   \[                  # or a class, which has                             (   [^\]\\]     #   anything but \ or ]                             |   \\.         #   or an escape sequence                             )*              #   many times                         \]                     )*                      # many times                     /                       # closing slash                     [a-zA-Z0-9]*            # trailing flags                 """ , next = 'div' ) ,  ] + both_after ,  }
 supports_microseconds = False
 if deps :
           pid = 1
 self . stdout . write ( "  all instances of the codebase have applied the migrations you squashed," )
 from django . utils . translation import templatize
  except smtplib . SMTPException :
  warnings . warn ( "django.utils.dictconfig will be removed in Django 1.9." ,  RemovedInDjango19Warning , stacklevel = 2 )
  else :
              fail_message = 'changed'
  if isinstance ( value , datetime . date ) :
 from django . db . migrations . questioner import MigrationQuestioner , InteractiveMigrationQuestioner
          return value
                  self . _template_response_middleware . insert ( 0 , mw_instance . process_template_response )
 list_ = [ bytes_to_text ( elt , self . encoding ) for elt in list_ ]
 from django . core . checks . registry import registry
  def configure ( self ) :
              sub = '.dev%s' % git_changeset
          super ( StringOrigin , self ) . __init__ ( UNKNOWN_SOURCE )
   month = MONTHS . index ( m . group ( 'mon' ) . lower ( ) ) + 1
                      label = conditional_escape ( force_text ( bf . label ) )
              connection . client . runshell ( )
   block_context . add_blocks ( self . blocks )
 self . hide_empty = options . get ( 'hide_empty' , False )
  from django . core . files import File
 if getattr ( self , '_client' , None ) is None :
              yield key
                              pending_references . setdefault ( refto , [ ] ) . extend ( refs )
                  if resolved_path :
          return t . render ( context_instance )
 obj_pk = field . rel . to . _default_manager . db_manager ( self . db ) . get_by_natural_key ( * field_value ) . pk
  return encoding
 thefile = '%s.c' % self . file
   errors = [ ]
  def write ( data ) :
              raise ValueError ( 'Sign character found in converter base digits.' )
              parentloop = context [ 'forloop' ]
              return super ( MultiValueDict , self ) . __getitem__ ( key )
   def __lt__ ( self , other ) :
 if exp is None or exp > time . time ( ) :
   if not hasattr ( callback , '__name__' ) :
                  return format_html ( "<input type='hidden' name='csrfmiddlewaretoken' value='{0}' />" , csrf_token )
  except UnicodeDecodeError :
    setattr ( form . instance , self . fk . get_attname ( ) , self . instance . pk )
    class Literal ( TokenBase ) :
          return s . encode ( encoding , errors )
   def _get_choices ( self ) :
                  obj = new_obj
 from django . utils . translation import ugettext_lazy as _ , ungettext_lazy
  from django . db import models
          return self . get_fqdn ( )
 if len ( bits ) < 2 :
   RAW = "raw"
 if digest is None :
              new_name += '_field'
                  raise ImproperlyConfigured (  '"%s" is not a valid regular expression: %s' %  ( regex , six . text_type ( e ) ) )
 self . xml . endElement ( "object" )
              error_msg = "Invalid template name in 'extends' tag: %r." % parent
          del cc [ 'private' ]
          locales . append ( locale . split ( '_' ) [ 0 ] )
  form . _meta . fields . append ( self . fk . name )
    else :
 self . stdout . write ( self . style . NOTICE ( "Run 'python manage.py migrate' to apply them.\n" ) )
              raise CommandError ( "%r conflicts with the name of an existing "  "Python module and cannot be used as an app "  "name. Please try another name." % app_name )
 self . add_fallback ( default_translation )
 params = kwargs
          return t [ 0 ] . lower ( ) , t [ 1 ]
              for item_type , meta_data , field_stream in Parser ( stream , self . _boundary ) :
 return MONTHS_3 [ self . data . month ] . title ( )
    __class__ = property ( new_method_proxy ( operator . attrgetter ( "__class__" ) ) )
 from django . utils . functional import cached_property
   def apply_response_fixes ( self , request , response ) :
          return value
                  self . stdout . write ( "  Applying %s..." % migration , ending = "" )
    @ register . filter ( is_safe = True )
          return formats . time_format ( value , arg )
          meta = ( pformat ( META_override )  if META_override is not None  else pformat ( request . META ) )
   del attr
  else :
     class HttpResponseBadRequest ( HttpResponse ) :
 self . _raw_ipv6 = True
    changes = autodetector . changes (  graph = loader . graph ,  trim_to_apps = app_labels or None ,  convert_apps = app_labels or None ,  )
 def __init__ ( self , * args , ** kwargs ) :
   if self . interactive :
  from django . apps import apps
              with io . open ( fname , 'rb' ) as f :
              file_obj = handler . file_complete ( counters [ i ] )
  except StandardError as e :
              self . interesting = _html_parser . interesting_normal
      if isinstance ( loader , ( tuple , list ) ) :
  current_version = sys . version_info
    finally :
   prev_opts = [ x . split ( '=' ) [ 0 ] for x in cwords [ 1 : cword - 1 ] ]
 output . append ( format_html ( self . inner_html , choice_value = choice_value ,  sub_widgets = sub_ul_renderer . render ( ) ) )
 if not using_sysrandom :
 styles . reverse ( )
              rv = level
 from django . utils . _os import rmtree_errorhandler
  else :
  else :
 def force_escape ( value ) :
 inner_result . extend ( res )
              return self . empty_form . is_multipart ( )
          return sorted ( value , key = Variable ( arg ) . resolve )
 while ch != '}' :
 self . _errors . append ( form . errors )
 try :
              continue
   def urlquote ( url , safe = '/' ) :
 self . verbosity = options . get ( 'verbosity' )
 self . kwargs = kwargs
          raise TemplateSyntaxError ( "'firstof' statement requires at least one argument" )
 parser = MultiPartParser ( META , post_data , self . upload_handlers , self . encoding )
                  return func . __get__ ( self , type ( self ) ) ( * args2 , ** kwargs2 )
 tempdir = tempfile . mkdtemp ( prefix = prefix , suffix = '_download' )
 _assertRegex = "assertRegex"
  ALLOWED_VARIABLE_CHARS = ( 'abcdefghijklmnopqrstuvwxyz'  'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.' )
 schemes = [ 'http' , 'https' , 'ftp' , 'ftps' ]
 fixture_name = os . path . basename ( fixture_name )
    def dict ( self ) :
  for attr in self . rendering_attrs :
   def error ( self , message ) :
   if not isinstance ( d , datetime . datetime ) :
              raise ImproperlyConfigured (  'Command %s defines both "requires_model_validation" '  'and "requires_system_checks", which is illegal. Use only '  '"requires_system_checks".' % self . __class__ . __name__ )
          value = ungettext ( "%(size)d byte" , "%(size)d bytes" , bytes ) % { 'size' : bytes }
   tags = options . get ( 'tags' , None )
          value = force_str ( value )
                  try :
    def iter_format_modules ( lang , format_module_path = None ) :
          USE_INOTIFY = True
                       old = '#: ' + work_file
      is_usable = False
  for item in self . items :
          for format in settings . SERIALIZATION_MODULES :
  fixture_files . extend ( fixture_files_in_dir )
 def __init__ ( self , convert_charrefs = False , ** kwargs ) :
 from IPython . frontend . terminal . ipapp import TerminalIPythonApp
                  continue
              curr = ''
    def __exit__ ( self , exc_type , exc_value , traceback ) :
 if fields is not None :
                  k = item [ 0 ]
 args = [ ]
    def load_template ( self , template_name , template_dirs = None ) :
      def __init__ ( self , * args , ** kwargs ) :
 f . write ( pickle . dumps ( expiry , - 1 ) )
 if token is None :
              raise TemplateEncodingError ( "Templates can only be constructed "  "from unicode or UTF-8 strings." )
   def attach ( self , filename = None , content = None , mimetype = None ) :
              self . message = message
  if hasattr ( mw_instance , 'process_response' ) :
 while escaped or ch != ']' :
   def g ( self ) :
   def exit_command ( self ) :
 self . loader , self . loadname , self . dirs = loader , name , dirs
          key_prefix = settings . CACHE_MIDDLEWARE_KEY_PREFIX
  self . _init_translation_catalog ( )
 from django . utils . safestring import mark_safe
   TOTAL_FORM_COUNT = 'TOTAL_FORMS'
  else :
              if isinstance ( other , Promise ) :
    @ register . filter ( is_safe = True )
 class BaseForm ( object ) :
  language_code_prefix_re = re . compile ( r'^/([\w-]+)(/|$)' )
   def set_cookie ( self , key , value = '' , max_age = None , expires = None , path = '/' ,  domain = None , secure = False , httponly = False ) :
                  self . stdout . write ( " (no migrations)" , self . style . MIGRATE_FAILURE )
    raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
    class SuspiciousMultipartForm ( SuspiciousOperation ) :
          return ''
 if extra_params :
   class SimplerXMLGenerator ( XMLGenerator ) :
    @ register . filter ( is_safe = True )
 from django . db import DEFAULT_DB_ALIAS
   @ property
      _dec . _decorated_function = getattr ( func , '_decorated_function' , func )
          return [ '' ] , [ [ ] ]
      is_usable = True
  encoded = encoded . replace ( ";" , "\\073" ) . replace ( "," , "\\054" )
  else :
 if not os . path . exists ( self . _dir ) :
  elif ch == '|' :
              value = bool ( value )
              self . stdout . write ( "Extracting %s\n" % filename )
  if isinstance ( value , datetime . date ) :
          value = datetime_safe . new_datetime ( value )
 url_fields [ 2 ] = ''
      def __init__ ( self , dict_ = None ) :
  else :
    self . handle_endtag ( tag . lower ( ) )
              conf = settings . CACHES [ backend ]
 if lib :
  re_formatchars = re . compile ( r'(?<!\\)([aAbBcdDeEfFgGhHiIjlLmMnNoOPrsStTUuwWyYzZ])' )
  else :
          return '' , ''
  return _wrapped_view
    else :
from django . forms . extras . widgets import SelectDateWidget
    return value if six . PY2 else value . encode ( ISO_8859_1 )
  __all__ = [  'UploadFileException' , 'StopUpload' , 'SkipFile' , 'FileUploadHandler' ,  'TemporaryFileUploadHandler' , 'MemoryFileUploadHandler' , 'load_handler' ,  'StopFutureHandlers'  ]
   if type ( s ) == bytes :
          connection = connections [ options . get ( 'database' ) ]
 from __future__ import unicode_literals
          return date_format ( value , 'DATETIME_FORMAT' , use_l10n = use_l10n )
                              message_context = message_context . strip ( '"' )
 sys . stderr . write ( "  http://www.saddi.com/software/flup/   If you've already\n" )
  return msg
     found = True
           state_frame = self . _get_context_stack_frame ( context )
  return ( 0 , k [ 1 ] )
                      if len ( args ) != len ( params ) + len ( prefix_args ) :
                      rel_model = field . rel . to
          httpd_cls = type ( str ( 'WSGIServer' ) , ( socketserver . ThreadingMixIn , WSGIServer ) , { } )
 return klass ( fail_silently = fail_silently , ** kwds )
  return language [ : p ] . lower ( ) + '_' + language [ p + 1 : ] . upper ( )
                   data = BytesIO ( self . _body )
 DARK_PALETTE = 'dark'
 if safe and arg != ';' :
 unpack = num_loopvars > 1
                  pass
   def save ( self , commit = True ) :
           default_attrs = { 'cols' : '40' , 'rows' : '10' }
          kw = match . groupdict ( )
              if cleaned_data is not None :
          msg = '%sError importing module %s: "%s"' % (  error_prefix , dotted_path , e )
   def __ne__ ( self , other ) :
 import threading
              if not len ( empty_label ) == 3 :
    if token . contents == 'else' :
 syear = "%04d" % ( dt . year , )
                  values = [ ]
              raise CommandError ( "This script should be run from the Django Git "  "checkout or your project or app tree, or with "  "the settings module specified." )
 from django . utils . encoding import force_text
 self . fixture_object_count = 0
   except VariableDoesNotExist :
 from django . core . files import locks
 tried_modules = [ ]
          if args :
              try :
  try :
          return getattr ( caches [ DEFAULT_CACHE_ALIAS ] , name )
from __future__ import unicode_literals
    return result
  if isinstance ( value , datetime . datetime ) :
  from django . core . exceptions import ImproperlyConfigured , DjangoRuntimeWarning
          return number_format ( value , use_l10n = use_l10n )
   self . stdout . write ( output )
  return cls
  return [ first_item , second_item ] , old_style_list
                  mimetype = DEFAULT_ATTACHMENT_MIME_TYPE
  def __init__ ( self , attrs = None ) :
      input_type = 'email'
  def get_template_sources ( self , template_name , template_dirs = None ) :
          if name is None and filter_func is None :
  if dec_part :
 for i in range ( 0 , self . total_form_count ( ) ) :
 last [ NEXT ] = root [ PREV ] = cache [ key ] = link
    class DeserializationError ( Exception ) :
 input_text = ugettext_lazy ( 'Change' )
 import re
  for part in singular :
          processors = [ ]
          try :
  else :
 from django . core . exceptions import DisallowedRedirect
    def serialize ( format , queryset , ** options ) :
              continue
      operations = [ ]
 if takes_context :
   @ register . filter ( is_safe = True )
 use_null_fallback = True
          module = _import_module ( self . mod )
 self . origin = origin
  except ( ValueError , TypeError ) :
              unique_id = get_tag_uri ( item [ 'link' ] , item [ 'pubdate' ] )
  if '.' in hextets [ - 1 ] :
   def render ( self ) :
 return result
                      if varargs is None :
  return value
                   raise
 if ( connections [ db ] . features . needs_datetime_string_cast and not  isinstance ( current_expires , datetime ) ) :
          return six . text_type ( s , encoding , 'replace' )
    for cat in item [ 'categories' ] :
 super ( FileField , self ) . __init__ ( * args , ** kwargs )
  res = instance . __dict__ [ self . name ] = self . func ( instance )
              self . full_clean ( )
  __len__ = new_method_proxy ( len )
                          raw_data = field_stream . read ( )
 count2 = ( since - ( seconds * count ) ) // seconds2
              return 'rd'
 from django . core . management import call_command
  return smart_text ( value )
   class Command ( AppCommand ) :
          stream_or_string = stream_or_string . decode ( 'utf-8' )
          from django . db import models
 if num_repl > 0 :
   def __repr__ ( self ) :
  if mtime != _mtimes [ filename ] :
 __Y2 = r'(?P<year>\d{2})'
   return False
 if expires is not None :
   return formataddr ( ( nm , addr ) )
 self . stdout . write ( "  you can delete them." )
          super ( EmailBackend , self ) . __init__ ( fail_silently = fail_silently )
  options = { }
                  continue
              self . _update_errors ( e )
     class CharField ( Field ) :
          super ( DictWrapper , self ) . __init__ ( data )
 return six . text_type ( self . data . year ) [ 2 : ]
 from django . utils import six , timezone
              data = self . form . initial . get ( self . name , self . field . initial )
 form . _errors [ NON_FIELD_ERRORS ] = self . error_class ( [ self . get_form_error ( ) ] )
   def delete ( self , key , version = None ) :
   self . _errors [ field ] . extend ( error_list )
  else :
  except ValueError :
           command = app_name
    class DisallowedRedirect ( SuspiciousOperation ) :
  return result
          if value in self . empty_values :
          self . filters = { }
  return value . strip ( )
                              raise ValueError ( 'No handler found with '  'name %r' % name )
 from django . utils . functional import cached_property
              exc_info = ( None , record . getMessage ( ) , None )
 try :
 should_convert = ( isinstance ( value , datetime )  and ( settings . USE_TZ if use_tz is None else use_tz )  and not is_naive ( value )  and getattr ( value , 'convert_to_local_time' , True ) )
  except InvalidOperation :
              value = to_current_timezone ( value )
 from django . db . migrations . autodetector import MigrationAutodetector
    def __repr__ ( self ) :
 self . validate ( value )
 if status is not None :
              f . save_form_data ( instance , cleaned_data [ f . name ] )
 for app_dir in app_dirs :
          return t . render ( Context ( dictionary ) )
 if not os . path . isdir ( basedir ) :
  except KeyError :
      def pbkdf2 ( password , salt , iterations , dklen = 0 , digest = None ) :
              raise StopIteration ( )
 self . pubid = pubid
 parts = parts [ : - 1 ]
    self . localize = localize
 def __add__ ( self , rhs ) :
 for j in xrange ( int ( iterations ) ) :
     if m :
 in_tag = False
   if len ( parts ) > 1 :
 from __future__ import unicode_literals
          now = datetime . datetime ( now . year , now . month , now . day )
     return d
          git_changeset = get_git_changeset ( )
                  for plan_node in graph . forwards_plan ( node ) :
              continue
  if isinstance ( pattern , RegexURLResolver ) :
     if value != value or value == Decimal ( "Inf" ) or value == Decimal ( "-Inf" ) :
 close = True
   def display ( self ) :
    try :
          return get_wsgi_application ( )
  elif args [ 1 ] == '304' :
  except StandardError as e :
          raise ValidationError ( _ ( 'Enter a valid integer.' ) , code = 'invalid' )
 if self . _fname is None :
 self . extra_headers = headers or { }
                  raise CommandError ( "You can only use --pks option with one model" )
 from django . db . migrations . optimizer import MigrationOptimizer
 __import__ ( name )
 from django . utils import six
              self . _callback = None
 default_error_messages = {  'invalid' : _ ( 'Enter a valid time.' )  }
          while b'\n' not in self . buffer and ( size is None or len ( self . buffer ) < size ) :
  elif ch == ':' :
      pad = b'=' * ( - len ( s ) % 4 )
          nodelist_false = NodeList ( )
      def __init__ ( self , func , args , kwargs , url_name = None , app_name = None , namespaces = None ) :
                  msgs = msgs . decode ( 'utf-8' )
   def __str__ ( self ) :
 if os . environ . get ( 'DJANGO_SETTINGS_MODULE' ) :
                  kwargs [ "initial" ] = getattr ( self . parent_instance , self . to_field )
   def __bool__ ( self ) :
 from django . utils import six
    def add_root_elements ( self , handler ) :
              try :
           args = token . split_contents ( )
          warnings . warn (  "FastCGI support has been deprecated and will be removed in Django 1.9." ,  RemovedInDjango19Warning )
 module_values = set ( sys . modules . values ( ) )
    _PROTECTED_TYPES = six . integer_types + ( type ( None ) , float , Decimal ,  datetime . datetime , datetime . date , datetime . time )
 try :
                    opts . fields = None
 pass
               return dec
 for k , v in data . items ( ) :
 if option in options :
   def multiple_chunks ( self , chunk_size = None ) :
  return result
              if options . traceback or not isinstance ( e , CommandError ) :
 timezone = ( offset . days * 24 * 60 ) + ( offset . seconds // 60 )
     self . loaded_object_count += loaded_objects_in_fixture
 if header == 'ACCEPT_LANGUAGE' and is_accept_language_redundant :
 result . widget = copy . deepcopy ( self . widget , memo )
  for key_value in related :
              self . keyOrder . remove ( k )
              raise NoReverseMatch ( "Error importing '%s': %s." % ( lookup_view , e ) )
  import datetime
 return node_class ( takes_context , args , kwargs )
  if not bytes :
    if item [ 'author_name' ] is not None :
          language_code = get_language ( )
              host = self . META [ 'HTTP_HOST' ]
   __contains__ = has_header
    def __call__ ( self , value ) :
                  if table_name_filter is not None and callable ( table_name_filter ) :
      compare = lambda self , a , b : a > b
              return apps . get_model ( model_identifier )
  digits . insert ( - exponent , '.' )
 for f in filters :
               msg = self . style . HTTP_SERVER_ERROR ( msg )
          self . vals = [ ]
     header_names = [ key . lower ( ) for key in self . extra_headers ]
   except ValidationError as e :
      child_nodelists = ( 'nodelist_loop' , 'nodelist_empty' )
     return bound_func ( * args , ** kwargs )
              style = no_style ( )
   except NameError :
   def __repr__ ( self ) :
          return self . __offset
 UnlockFileEx = windll . kernel32 . UnlockFileEx
      def __init__ ( self ) :
   def initial_form_count ( self ) :
    def sql_flush ( style , connection , only_django = False , reset_sequences = True , allow_cascade = False ) :
  else :
                  return code
 if isinstance ( timezone , tzinfo ) :
 self . POST = QueryDict ( mutable = True )
  return ''
    def same_origin ( url1 , url2 ) :
   form . data [ form . add_prefix ( self . fk . name ) ] = None
   else :
          return self
 return self . form . errors . get ( self . name , self . form . error_class ( ) )
               for h in logger . handlers [ : ] :
              if getattr ( e , 'silent_variable_failure' , False ) :
                  raise
 yield SubWidget ( self , name , value , attrs , choices )
   def phone2numeric ( phone ) :
 tags = [ re . escape ( tag ) for tag in tags . split ( ) ]
   stream = self . _stream
  def clean ( self , value ) :
              self . stream = six . StringIO ( stream_or_string )
          return self . s
              handler . addQuickElement ( "ttl" , item [ 'ttl' ] )
 _active . value = gettext_module . NullTranslations ( )
 if exit_code < 0 :
 import warnings
 from django . template . base import TemplateDoesNotExist
from __future__ import unicode_literals
              _module = self . _resolve ( )
  match = kwarg_re . match ( bits [ 0 ] )
          """Close the cache connection"""
 if count != 0 :
 new_args = [ ]
    with self . _lock . writer ( ) :
                  raise CommandError ( "You can only use --pks option with one model" )
 try :
          mem_args = args [ : num_args ]
 alternative_subtype = 'alternative'
 if token . token_type == TOKEN_BLOCK and token . contents == endtag :
   sys . stderr . write ( msg )
  import datetime
                              new_matches = normalize ( parent_pat + pat )
    if text . endswith ( truncate ) :
           return [ etag_str ]
   def __getitem__ ( self , key ) :
  if hasattr ( self . file , 'name' ) :
                       if row_data in seen_data :
 msg_data = msg . as_bytes ( )
      return _entity_re . sub ( _replace_entity , text )
          for d in self . dicts [ - 1 ] :
                      current = current [ bit ]
       for field in model . _meta . many_to_many :
          source , display_name = self . load_template_source ( template_name , template_dirs )
  else :
 if self . options . get ( "indent" ) :
  except AttributeError :
                  self . load_label ( fixture_label )
   def get_signed_cookie ( self , key , default = RAISE_ERROR , salt = '' , max_age = None ) :
 field_params = OrderedDict ( )
                  import_module ( '%s.%s' % ( app_config . name , module_to_search ) )
 super ( MultiWidget , self ) . __init__ ( attrs )
   def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
          fill_to = 8
  except ValidationError :
  IDENTIFIER = re . compile ( '^[a-z_][a-z0-9_]*$' , re . I )
  model_dependencies = [ ]
                  break
  @ wraps ( func )
  for root , dirs , files in os . walk ( template_dir ) :
  parent_name = parser . compile_filter ( bits [ 1 ] )
   @ property
      pass
                           continue
     class LoaderOrigin ( Origin ) :
  from django . conf import settings
   TOKEN_TEXT = 0
  else :
                  raise ViewDoesNotExist (  "Could not import '%s'. Parent module %s does not exist." %  ( lookup_view , mod_name ) )
 MIMEMultipart . __init__ ( self , _subtype , boundary , _subparts , ** _params )
            return s . get_data ( ) + s . rawdata
 return False
                              child_loggers . append ( existing [ i ] )
          try :
 leave_locale_alone = False
 node = CycleNode ( values , name , silent = silent )
    def send_mass_mail ( datatuple , fail_silently = False , auth_user = None ,  auth_password = None , connection = None ) :
   def render ( self , context ) :
                if self . verbosity >= 1 :
 del self . dicts [ - 1 ] [ key ]
              remaining = self . _remaining if size is None else size
  l = - ( - dklen // hlen )
  except ( ValueError , TypeError ) :
 from django . utils . formats import get_format
              boolean_attrs . append ( ( attr , ) )
    unused_char = self . _stream . read ( 1 )
   else :
  if hasattr ( model , 'natural_key' ) :
                   if ( form . cleaned_data and form . cleaned_data [ field ] is not None  and form . cleaned_data [ unique_for ] is not None ) :
  self . ending = ending
  _standard_context_processors = tuple ( processors )
 template = '%(input)s'
 needs_multipart_form = True
                  try :
    def execute ( self , * args , ** options ) :
     def resolve_variable ( path , context ) :
                              t = file_name
 self . asvar = asvar
          return ''
                            errors . append ( self . get_unique_error_message ( unique_check ) )
 if extend :
import os
 handler . endElement ( "entry" )
   else :
  if attrvalue :
  if exctype is not WindowsError or 'Access is denied' not in str ( value ) :
 return s
 from django . utils . six . moves import socketserver
 from django . core . exceptions import SuspiciousMultipartForm
   class Module_six_moves_urllib_request ( _LazyModule ) :
 if only_django :
 if self . active_readers == 0 and self . waiting_writers != 0 :
   class date ( real_date ) :
   saved_locale = None
 def add ( value , arg ) :
                  return True
          return iri
  def __init__ ( self , * args , ** kwargs ) :
 from django . core . serializers . python import Serializer as PythonSerializer
   def _has_changed ( self , initial , data ) :
 del self [ 'content-type' ]
                  handlers = config . get ( 'handlers' , EMPTY_DICT )
 return WEEKDAYS [ self . data . weekday ( ) ]
    REASON_PHRASES = {  100 : 'CONTINUE' ,  101 : 'SWITCHING PROTOCOLS' ,  102 : 'PROCESSING' ,  200 : 'OK' ,  201 : 'CREATED' ,  202 : 'ACCEPTED' ,  203 : 'NON-AUTHORITATIVE INFORMATION' ,  204 : 'NO CONTENT' ,  205 : 'RESET CONTENT' ,  206 : 'PARTIAL CONTENT' ,  207 : 'MULTI-STATUS' ,  208 : 'ALREADY REPORTED' ,  226 : 'IM USED' ,  300 : 'MULTIPLE CHOICES' ,  301 : 'MOVED PERMANENTLY' ,  302 : 'FOUND' ,  303 : 'SEE OTHER' ,  304 : 'NOT MODIFIED' ,  305 : 'USE PROXY' ,  306 : 'RESERVED' ,  307 : 'TEMPORARY REDIRECT' ,  308 : 'PERMANENT REDIRECT' ,  400 : 'BAD REQUEST' ,  401 : 'UNAUTHORIZED' ,  402 : 'PAYMENT REQUIRED' ,  403 : 'FORBIDDEN' ,  404 : 'NOT FOUND' ,  405 : 'METHOD NOT ALLOWED' ,  406 : 'NOT ACCEPTABLE' ,  407 : 'PROXY AUTHENTICATION REQUIRED' ,  408 : 'REQUEST TIMEOUT' ,  409 : 'CONFLICT' ,  410 : 'GONE' ,  411 : 'LENGTH REQUIRED' ,  412 : 'PRECONDITION FAILED' ,  413 : 'REQUEST ENTITY TOO LARGE' ,  414 : 'REQUEST-URI TOO LONG' ,  415 : 'UNSUPPORTED MEDIA TYPE' ,  416 : 'REQUESTED RANGE NOT SATISFIABLE' ,  417 : 'EXPECTATION FAILED' ,  418 : "I'M A TEAPOT" ,  422 : 'UNPROCESSABLE ENTITY' ,  423 : 'LOCKED' ,  424 : 'FAILED DEPENDENCY' ,  426 : 'UPGRADE REQUIRED' ,  428 : 'PRECONDITION REQUIRED' ,  429 : 'TOO MANY REQUESTS' ,  431 : 'REQUEST HEADER FIELDS TOO LARGE' ,  500 : 'INTERNAL SERVER ERROR' ,  501 : 'NOT IMPLEMENTED' ,  502 : 'BAD GATEWAY' ,  503 : 'SERVICE UNAVAILABLE' ,  504 : 'GATEWAY TIMEOUT' ,  505 : 'HTTP VERSION NOT SUPPORTED' ,  506 : 'VARIANT ALSO NEGOTIATES' ,  507 : 'INSUFFICIENT STORAGE' ,  508 : 'LOOP DETECTED' ,  510 : 'NOT EXTENDED' ,  511 : 'NETWORK AUTHENTICATION REQUIRED' ,  }
   return valid
                               last = root [ PREV ]
 ignore = lambda pattern : fnmatch . fnmatchcase ( filename , pattern )
 return mark_safe ( force_text ( value ) . translate ( _js_escapes ) )
 super ( BaseModelForm , self ) . __init__ ( data , files , auto_id , prefix , object_data ,  error_class , label_suffix , empty_permitted )
 def upper ( value ) :
from __future__ import unicode_literals
 import warnings
          if self . is_bound and i < self . initial_form_count ( ) :
  else :
          return sorted ( value , key = Variable ( arg ) . resolve , reverse = True )
 from django . core . management . base import BaseCommand , CommandError
 if not ( self . inverse_match is not bool ( self . regex . search (  force_text ( value ) ) ) ) :
          return ''
                  self . _count = self . object_list . count ( )
    def _iterkeys ( self ) :
              handler . addQuickElement ( "dc:creator" , item [ "author_name" ] , { "xmlns:dc" : "http://purl.org/dc/elements/1.1/" } )
 import os
    self . _reverse_dict [ language_code ] = lookups
 from django . utils . http import urlquote
                              open ( init_path , "w" ) . close ( )
    class MiddlewareNotUsed ( Exception ) :
  from django . core . serializers . base import DeserializationError
   def _construct_form ( self , i , ** kwargs ) :
 if not self . first :
   def __getitem__ ( self , key ) :
          self . _post = QueryDict ( '' )
          self . tagtype = tagtype
 new_context = copy ( self )
          self . _archive . close ( )
  if end < 0 :
   def y ( self ) :
          return input_val
              is_templatized = True
  output = [ ]
 six . reraise ( MultiPartParserError , MultiPartParserError ( msg ) , sys . exc_info ( ) [ 2 ] )
          self . nodelist_true , self . nodelist_false = nodelist_true , nodelist_false
  else :
 def __init__ ( self , data = None , files = None , auto_id = 'id_%s' , prefix = None ,  initial = None , error_class = ErrorList ) :
 try :
              self . stdout . write ( msg )
                  self . stream . write ( " " )
    if self . _content_length == 0 :
          os . symlink ( original_path , symlink_path )
 from django . utils import six
 from decimal import Decimal , DecimalException
 outdict = { }
 filters = [ ]
                  raise InvalidCacheBackendError ( "Could not find backend '%s': %s" % (  backend , e ) )
              now = now . decode ( 'utf-8' )
  from django . conf import settings
          if media :
  except ValidationError as e :
    def execute ( self , * args , ** options ) :
 parser = self . _parser
 return force_text ( self . prepare_value ( initial_value ) ) != force_text ( data_value )
   else :
  except KeyError :
 return "|" . join ( prefix + re . escape ( c ) + suffix for c in choices . split ( ) )
              raise TypeError ( "Non-integer base36 conversion input." )
                      opt_label += '='
  if self . current_token is not EndToken :
  digits = len ( digittuple )
 try :
 VARIABLE_TAG_START = '{{'
      pass
              fn ( * args , ** kwargs )
 if not isinstance ( value , ConvertingDict ) and isinstance ( value , dict ) :
 parser . add_argument ( '-n' , '--natural' , action = 'store_true' , dest = 'use_natural_keys' , default = False ,  help = 'Use natural keys if they are available (deprecated: use --natural-foreign instead).' )
          namelist = self . _archive . namelist ( )
                  kwargs [ 'initial' ] = self . initial_extra [ i - self . initial_form_count ( ) ]
            pass
    return ''
   class Module_six_moves_urllib ( types . ModuleType ) :
   def validate_number ( self , number ) :
                  message = 'make sure the name begins with a letter or underscore'
              if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
                  pass
  from django . utils . encoding import smart_text
     def is_library_missing ( name ) :
 if m is None :
          return unbound . im_func
   def _convert_to_charset ( self , value , charset , mime_encode = False ) :
 FormSet . fk = fk
         while True :
      def delete ( self , name ) :
                               oldroot = root
      def _curried ( * moreargs , ** morekwargs ) :
   def __deepcopy__ ( self , memo ) :
    def end_serialization ( self ) :
  if issubclass ( klass , logging . handlers . MemoryHandler ) and 'target' in config :
  except LookupError :
     if not shown :
                          var_obj = None
          return
  return self . parent_widget . render ( * args )
  self [ 'Content-Type' ] = content_type
  return result
        if ( not normcase ( final_path ) . startswith ( normcase ( base_path + sep ) ) and  normcase ( final_path ) != normcase ( base_path ) and  dirname ( normcase ( base_path ) ) != normcase ( base_path ) ) :
 f = super ( ImageField , self ) . to_python ( data )
          try :
              return
      def create_table ( self , database , tablename ) :
              k , v = x . split ( '=' , 1 )
          if app_config . models_module is None :
 self . _expire_info [ key ] = self . get_backend_timeout ( timeout )
  return data . get ( name , None )
  return super ( SimpleTemplateResponse , self ) . __iter__ ( )
   else :
  output_transaction = True
 _supported = None
  else :
     if line [ - 1 : ] in ( b'\n' , b'\r' ) :
              raise TypeError ( 'formfield_callback must be a function or callable' )
                          new_context [ 'csrf_token' ] = csrf_token
              nodes . append ( self )
 result = ugettext ( msg_with_ctxt )
      return force_text ( gettext ( message ) )
    if sys . platform . startswith ( 'java' ) :
 from django . db . migrations import Migration
          return ''
 if not digest :
  if ch == '?' :
  if _default is None :
 try :
    def delete_many ( self , keys , version = None ) :
 self . stream . flush ( )
  def __init__ ( self , value ) :
   if timeout > 2592000 :
   def _load_post_and_files ( self ) :
                 return ''
  if 'args' in options :
  if verbosity >= 2 :
  import decimal
   def eval ( self , context ) :
   url = hashlib . md5 ( force_bytes ( iri_to_uri ( request . build_absolute_uri ( ) ) ) )
 try :
  Module_six_moves_urllib_response . _moved_attributes = _urllib_response_moved_attributes
   def fastcgi_help ( message = None ) :
              continue
  def __init__ ( self ) :
 from django . utils . formats import localize
import os
   def dst ( self , dt ) :
                  filename . encode ( 'ascii' )
 if finder is None :
              raise BadHeaderError ( "Header values can't contain newlines (got %r)" % value )
 if quote_double_quotes :
          raise ImproperlyConfigured ( 'Loader does not define a "load_template" callable template source loader' )
     def _bin_to_long ( x ) :
      def __init__ ( self , path , match = None , recursive = False , allow_files = True ,  allow_folders = False , required = True , widget = None , label = None ,  initial = None , help_text = '' , * args , ** kwargs ) :
          try :
 self . validate_key ( key )
  while factor >= 0 :
  cache_key = ( format_type , lang )
 match = date_re . match ( value )
          result = self . __class__ ( '' , mutable = True , encoding = self . encoding )
 comment_lineno_cache = t . lineno
              field = f . name
                  not_found . append ( e . args [ 0 ] )
              kwargs [ 'widget' ] = widgets [ f . name ]
      input_type = 'hidden'
              return False
  def _get_num_pages ( self ) :
   def remove ( self , item ) :
  if self . feed [ 'author_link' ] is not None :
 from django . utils . translation import ugettext_lazy
 if isinstance ( template_name , ( list , tuple ) ) :
          self . _assert_mutable ( )
   for lineno , line in enumerate ( content . splitlines ( True ) ) :
   else :
   def __bool__ ( self ) :
   @ python_2_unicode_compatible
              return lookup_view
  url = quote ( url , safe = b'!*\'();:@&=+$,/?#[]~' )
  inner , outer = digest ( ) , digest ( )
               MAXSIZE = int ( ( 1 << 63 ) - 1 )
   return value . replace ( tzinfo = timezone )
          for k , v in six . iteritems ( dict_ ) :
       def __setitem__ ( self , name , val ) :
              version = self . version
      WindowsError = WindowsError
 import os
          from django . utils . daemonize import become_daemon
           self . _iterator = iter ( value )
  if errors :
 self . auto_id = auto_id
   def _read_limited ( self , size = None ) :
   def render ( self , context ) :
          return mark_safe ( message )
              return [ ]
 cc = dict ( dictitem ( el ) for el in cc )
    validate_email = EmailValidator ( )
     def restart_with_reloader ( ) :
                                  with transaction . atomic ( using = connection . alias , savepoint = connection . features . can_rollback_ddl ) :
   try :
              if self . verbosity >= 2 :
     if type ( field_type ) is tuple :
   except IndexError :
 super ( GenericIPAddressField , self ) . __init__ ( * args , ** kwargs )
 intrans = False
  try :
  return True
  msg [ name ] = value
  if value is None :
           if initial is not None :
 if self . m2m_data and save_m2m :
                            if not isinstance ( item , ( list , tuple ) ) :
              if not nesting :
 self . use_tls = settings . EMAIL_USE_TLS if use_tls is None else use_tls
   def start_object ( self , obj ) :
 for app_config in apps . get_app_configs ( ) :
                  message = 'use only numbers, letters and underscores'
 return copy . copy ( self )
                  return cached
   if script_url :
 if not self . timezone :
class FileProxyMixin ( object ) :
                  if status != STATUS_OK :
  args = [ 'msguniq' ] + self . msguniq_options + [ potfile ]
    if is_relation :
                  compiled_regex = re . compile ( regex , re . UNICODE )
   except OSError as e :
  truncate = force_text ( truncate )
                                  e . django_template_source = node . source
 return '%s-%s' % ( self . prefix , field_name ) if self . prefix else field_name
                  raise
  super ( Command , self ) . execute ( * args , ** options )
 def __init__ ( self , fail_silently = False , ** kwargs ) :
  else :
  else :
 def _cache ( self ) :
          assert isinstance ( level , int ) , "The first argument should be level."
 assert mimetype is not None
          substitutions = {  'initial_text' : self . initial_text ,  'input_text' : self . input_text ,  'clear_template' : '' ,  'clear_checkbox_label' : self . clear_checkbox_label ,  }
          key = self . make_key ( key , version = version )
 request . resolver_match = resolver_match
                          self . stdout . write ( "copying plural forms: %s\n" % plural_form_line )
  except Resolver404 as e :
 if hasattr ( timezone , 'localize' ) :
 message_context = None
  except KeyError :
              self . locale_paths = [ os . path . abspath ( os . path . join ( 'conf' , 'locale' ) ) ]
              selected_html = mark_safe ( ' selected="selected"' )
                          self . xml . startElement ( "natural" , { } )
          upload = super ( ClearableFileInput , self ) . value_from_datadict ( data , files , name )
 if isinstance ( widget , NumberInput ) and 'step' not in widget . attrs :
 pass
              return list_ [ - 1 ]
   def __repr__ ( self ) :
 def __init__ ( self , message , code = None , params = None ) :
    self . find_template_cache [ key ] = result
 self . method = environ [ 'REQUEST_METHOD' ] . upper ( )
          self . __dict__ . update ( state )
     def new_date ( d ) :
 widget = SelectMultiple
 convert = {  '__lt__' : [ ( '__gt__' , lambda self , other : not ( self < other or self == other ) ) ,  ( '__le__' , lambda self , other : self < other or self == other ) ,  ( '__ge__' , lambda self , other : not self < other ) ] ,  '__le__' : [ ( '__ge__' , lambda self , other : not self <= other or self == other ) ,  ( '__lt__' , lambda self , other : self <= other and not self == other ) ,  ( '__gt__' , lambda self , other : not self <= other ) ] ,  '__gt__' : [ ( '__lt__' , lambda self , other : not ( self > other or self == other ) ) ,  ( '__ge__' , lambda self , other : self > other or self == other ) ,  ( '__le__' , lambda self , other : not self > other ) ] ,  '__ge__' : [ ( '__le__' , lambda self , other : ( not self >= other ) or self == other ) ,  ( '__gt__' , lambda self , other : self >= other and not self == other ) ,  ( '__lt__' , lambda self , other : not self >= other ) ]  }
 if url . endswith ( '/' ) :
 self . _loaders = loaders
 return FASTCGI_HELP
 super ( QueryDict , self ) . __setitem__ ( key , value )
              self . cookies [ key ] [ 'domain' ] = domain
          self . stream = stream
     field_desc = '%s = %s%s' % (  att_name ,   '' if '.' in field_type else 'models.' ,  field_type ,  )
 for option in options :
                          fh . write ( migration_string )
    def w ( self ) :
  else :
     class QueryDict ( MultiValueDict ) :
 factor -= 1
 new_filenames = [ filename . __file__ for filename in new_modules  if hasattr ( filename , '__file__' ) ]
 try :
 return self . field . widget . is_hidden
                      raise TemplateSyntaxError ( "Variables and attributes may "  "not begin with underscores: '%s'" %  var )
          if name is None :
   @ property
  return settings . TEMPLATE_STRING_IF_INVALID
  except Resolver404 :
 parser . add_argument ( '--noinput' ,  action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' ) ,
  except OSError as e :
                      m = self . INDEX_PATTERN . match ( rest )
  return True
                  filter_name = match . group ( "filter_name" )
                  return - 1
  else :
              docs_version = 'dev'
   def value ( self ) :
 yield self . read ( )
 for filepath in self . get_template_sources ( template_name , template_dirs ) :
 if rel_to in known_models :
 self . length = length
                       exhaust ( stream )
 import warnings
              field = self . fields [ name ]
          super ( Command , self ) . add_arguments ( parser )
 import datetime
  if subcommand == 'help' :
  else :
 pending_references = { }
            media = sorted ( self . _css . keys ( ) )
   self . can_write . acquire ( )
 if value in self . empty_values :
  return _curried
          super ( Command , self ) . add_arguments ( parser )
                          with open ( pythonrc ) as handle :
                      args . append ( ( True , Variable ( var_arg ) ) )
    def ugettext ( message ) :
  if interactive :
      except SkipFile :
   if args [ 1 ] [ 0 ] == '2' :
    ip_str = _explode_shorthand_ip_string ( ip_str )
                  if not self . fail_silently :
  MAXSIZE = sys . maxsize
  except ValueError :
                      singular . append ( contents )
    def __repr__ ( self ) :
 return super ( TimestampSigner , self ) . sign ( value )
 dirs . append ( '' )
       def __init__ ( self , level , msg , hint = None , obj = None , id = None ) :
 result . append ( Group ( ( ( "%%(%s)s" % name ) , name ) ) )
  self . buffer = sio . read ( )
   def handle ( self , ** options ) :
 httpd . serve_forever ( )
 if exit_code != 3 :
 return 'initial-%s' % self . add_prefix ( field_name )
 return WEEKDAYS_ABBR [ self . data . weekday ( ) ]
 from django . utils . translation import get_language
 return self . serialize_headers ( ) + b'\r\n\r\n' + self . content
   def __getitem__ ( self , i ) :
          self . _request_middleware = self . _view_middleware = self . _template_response_middleware = self . _response_middleware = self . _exception_middleware = None
   try :
 if sign :
      def __init__ ( self , template_string , origin ) :
  self . _ordering . sort ( key = compare_ordering_key )
  except KeyError :
 from lib2to3 . pytree import Leaf , Node
      widget = DateTimeInput
              check . tags = tags
 from django . utils import six
                  keys = node . getElementsByTagName ( 'natural' )
    def add_item_elements ( self , handler , item ) :
     ADDRESS_HEADERS = set ( [  'from' ,  'sender' ,  'reply-to' ,  'to' ,  'cc' ,  'bcc' ,  'resent-from' ,  'resent-sender' ,  'resent-to' ,  'resent-cc' ,  'resent-bcc' ,  ] )
  else :
      def __init__ ( self , tokens ) :
  if not settings . configured :
                        self . prepend_token ( token )
          return os . path . getsize ( self . path ( name ) )
      op . id = key
      def compress_sequence ( sequence ) :
 if not os . path . exists ( potfile ) :
          connection = connections [ options [ 'database' ] ]
 return mark_safe ( force_text ( text ) . replace ( '&' , '&amp;' ) . replace ( '<' , '&lt;' ) . replace ( '>' , '&gt;' ) . replace ( '"' , '&quot;' ) . replace ( "'" , '&#39;' ) )
              self . seek ( 0 )
                  if not isinstance ( e , CommandError ) :
 def __iter__ ( self ) :
   data = { }
 import random
   if ',' in args [ 1 ] :
          return mark_safe ( '\n' . join ( chain ( * [ getattr ( self , 'render_' + name ) ( ) for name in MEDIA_TYPES ] ) ) )
 from django . http . cookie import SimpleCookie
 code = 'limit_value'
 self . dirpath = dirpath
          main_value_pair , params = parse_header ( line )
  last_bit = self . template_string [ upto : ]
                          pass
          if value is None :
              raise ContentNotRenderedError ( 'The response content must be '  'rendered before it can be accessed.' )
          super ( ContextDict , self ) . __init__ ( * args , ** kwargs )
              return f
          if self . options . get ( 'indent' , None ) is not None :
 self . pk_field = kwargs . pop ( "pk_field" , False )
 for val in value :
    def update ( self , dict_ ) :
  return format_html ( '<input{0} />' , flatatt ( final_attrs ) )
 background = dict ( ( color_names [ x ] , '4%s' % x ) for x in range ( 8 ) )
              if settings . DEBUG :
  cls . __dispatch [ klass ] [ funcname ] = method
 from django . template . base import TemplateDoesNotExist
  if arg is None :
              self . _client = self . _lib . Client ( self . _servers )
 @ stringfilter
                  raise
              app_configs = [ apps . get_app_config ( app_label ) for app_label in app_labels ]
 from django . core import urlresolvers
 logger . handlers = [ ]
 self . parsed = parsed
                  raise ValueError ( 'Unable to add filter %r: %s' % ( f , e ) )
          time_str = time_str . decode ( 'utf-8' )
 from itertools import chain
 if response :
          f . save_form_data ( instance , cleaned_data [ f . name ] )
              localpart , domain = addr . split ( '@' , 1 )
          return ''
              output = self . filter_expression . resolve ( context )
 for digit in str ( number ) :
 try :
 if neg :
                   args . append ( parser . compile_filter ( bit ) )
    def attach_file ( self , path , mimetype = None ) :
    class NoReverseMatch ( Exception ) :
              return { }
  data [ field . name ] = value
  if isinstance ( s , Promise ) :
          if not hasattr ( e , 'django_template_source' ) :
              cursor . execute ( "SELECT cache_key, value, expires FROM %s "  "WHERE cache_key = %%s" % table , [ key ] )
 import re
 self . method = None
                  self . active_writers += 1
     @ register . filter ( is_safe = False )
 import pickle
  return end , next
  if hasattr ( os , 'chmod' ) :
  internal_use_only = True
  self . _current = None
   def __iter__ ( self ) :
  if best_doublecolon_end == len ( hextets ) :
   class ValidationError ( Exception ) :
 base62 = BaseConverter ( BASE62_ALPHABET )
 from django . core . management . base import BaseCommand
  qs = qs . using ( form . instance . _state . db )
          if not hasattr ( e , 'django_template_source' ) :
          return self . nodelist . render ( context )
                          self . configure_root ( root )
              if opname not in roots :
          return "<UTC>"
          changeset = None
          obj_list = self . target . resolve ( context , True )
              start = match . start ( )
             self . _headers = { }
          from importlib import find_loader as importlib_find
   @ property
 if plan :
      if row [ 6 ] :
                  self . cookies [ key ] [ 'expires' ] = cookie_date ( time . time ( ) +  max_age )
  for i , ( seconds , name ) in enumerate ( chunks ) :
                                  extra_params [ 'null' ] = True
   def accessed_time ( self , name ) :
 for loader in self . loaders :
 import os
   def clear_checkbox_id ( self , name ) :
                      url = reverse ( project_name + '.' + view_name ,  args = args , kwargs = kwargs ,  current_app = context . current_app )
 self . template_dirs = template_dirs
 self . tag ( function_name , compile_func )
              ext = base [ - 4 : ] + ext
  MONTHS = 'jan feb mar apr may jun jul aug sep oct nov dec' . split ( )
              raise CommandError ( "Command doesn't accept any arguments" )
              initial = [ ]
    def __ne__ ( self , other ) :
  self . set ( key , value , timeout , version )
     def method_decorator ( decorator ) :
  self . DSTDIFF = self . DSTOFFSET - self . STDOFFSET
  return False
 num = cursor . fetchone ( ) [ 0 ]
 if value is None :
 return '\n' . join ( statements )
               if index is not None and index < self . initial_form_count ( ) :
 from django . core . exceptions import ImproperlyConfigured
                      message = "'%s' already exists" % top_dir
 return do_ifequal ( parser , token , False )
 return __wrapper__
          if isinstance ( level , int ) :
 from django . core . management . base import BaseCommand , CommandError
   def __getattr__ ( self , name ) :
   if self . field . localize :
    class CheckboxFieldRenderer ( ChoiceFieldRenderer ) :
      return settings . LANGUAGE_CODE
          self . tokens = tokens
 import os
 if os . path . isdir ( os . path . join ( 'conf' , 'locale' ) ) :
    def parse_accept_lang_header ( lang_string ) :
                  obj = self . var . resolve ( context )
                          sub_match_dict = dict ( match . groupdict ( ) , ** self . default_kwargs )
               if upload :
  elif closing_tag :
                  self . _setup ( )
   message_context = None
  if ipv4_unpacked :
  if i >= self . initial_form_count ( ) and not form . has_changed ( ) :
          return self . __offset
   return value [ slice ( * bits ) ]
              sys . exit ( bool ( failures ) )
 level = handler_config . get ( 'level' , None )
 for bit in tag_re . split ( self . template_string ) :
          yaml . dump ( self . objects , self . stream , Dumper = DjangoSafeDumper , ** self . options )
                                  d = d [ idx ]
  for k , list_ in self . lists ( ) :
  def led ( self , left , parser ) :
              params , varargs , varkw , defaults = getargspec ( func )
                  if field_value is not None :
 msg = SafeMIMEText ( self . body , self . content_subtype , encoding )
 from threading import local
 BASE36_ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz'
          return commands
              raise ValueError ( "Key '%s' not found" % key )
          return value
          filepath = self . filepath . resolve ( context )
 if not content_type . startswith ( 'multipart/' ) :
                                      for sql in index_sql :
                      os . mkdir ( target_dir )
  if number < 1 :
    if as_form :
 odds = sum ( LUHN_ODD_LOOKUP [ int ( c ) ] for c in candidate [ - 2 : : - 2 ] )
    for regex in RFC1123_DATE , RFC850_DATE , ASCTIME_DATE :
   else :
  except KeyError :
  return super ( DateField , self ) . to_python ( value )
   def create_nodelist ( self ) :
   if field . rel and isinstance ( field . rel , models . ManyToManyRel ) :
                  for path in paths :
 for label in labels :
 value = bytes_to_text ( value , self . encoding )
  result = func ( * args )
  self . ignore_patterns = list ( set ( ignore_patterns ) )
 code = 'max_length'
              chunk_size = self . DEFAULT_CHUNK_SIZE
  elif ch != 'P' :
              if block_context is None :
          daemon_kwargs [ 'err_log' ] = options [ 'errlog' ]
  else :
                  attrs [ 'min' ] = self . min_value
                  output . append ( self . render_option ( selected_choices , option_value , option_label ) )
   return model_list
  if strings_only and is_protected_type ( s ) :
              self . add_filters ( result , filters )
              m = self . CONVERT_PATTERN . match ( value )
 def urlconf_module ( self ) :
  register = Library ( )
 try :
 try :
 from django . template import ( Lexer , TOKEN_TEXT , TOKEN_VAR , TOKEN_BLOCK ,  TOKEN_COMMENT , TRANSLATOR_COMMENT_MARK )
  termios . tcsetattr ( fd , termios . TCSANOW , attr_list )
      class BaseInlineFormSet ( BaseModelFormSet ) :
  else :
   def as_text ( self ) :
     for opt in [ 'fields' , 'exclude' , 'localized_fields' ] :
  else :
 import mimetypes
              return ''
   return _localtime
 import sys
              thefile = self . file
          non_atomic_requests = getattr ( view , '_non_atomic_requests' , set ( ) )
 from django . utils import timezone
  else :
   def expression ( self , rbp = 0 ) :
                          initial_value = field . to_python ( hidden_widget . value_from_datadict (  self . data , self . files , initial_prefixed_name ) )
   def i ( self ) :
 LOCK_SH = fcntl . LOCK_SH
    def render ( self ) :
 return self . errors . get ( NON_FIELD_ERRORS , self . error_class ( error_class = 'nonfield' ) )
 super ( MultiValueField , self ) . __init__ ( * args , ** kwargs )
   def choice ( self , obj ) :
     class MovedModule ( _LazyDescr ) :
          self . blocks [ name ] . append ( block )
      def __init__ ( self , environ ) :
      widget = CheckboxInput
   try :
              return SafeText ( t )
 obj . widgets = copy . deepcopy ( self . widgets )
 mail . mail_admins ( subject , message , fail_silently = True ,  html_message = html_message ,  connection = self . connection ( ) )
              os . unlink ( work_file )
   importer = __import__
    def close ( self ) :
              return s
  if not language_code_re . search ( lang_code ) :
      help = "Prints the SQL statements for the named migration."
  return self . _queryset
              if not self . required :
 return sys . modules [ name ]
    _urllib_robotparser_moved_attributes = [  MovedAttribute ( "RobotFileParser" , "robotparser" , "urllib.robotparser" ) ,  ]
                  raise ValueError ( 'Unknown level: %r' % level )
  except OSError :
 hint = "\n\tHINT: %s" % self . hint if self . hint else ''
          self . func = func
 UnlockFileEx . restype = BOOL
                          raise CommandError ( "You can only use --pks option with one model" )
      def __init__ ( self ) :
  except ( ValueError , TypeError , ValidationError ) :
                      lead , trail = escape ( lead ) , escape ( trail )
 from django . db . utils import DatabaseError
   class UploadedFile ( File ) :
   def _get_filename ( self ) :
 while ch != terminal_char :
 if value is not result :
 condition = TemplateIfParser ( parser , bits ) . parse ( )
   def to_locale ( language ) :
 from django . conf import settings
 if isinstance ( value , six . string_types ) and value != ALL_FIELDS :
          return "<IfEqualNode>"
              if self . to_field_name :
   def __str__ ( self ) :
   return data
 for f in sorted ( opts . concrete_fields + sortable_virtual_fields + opts . many_to_many ) :
  except AttributeError :
     def python_2_unicode_compatible ( klass ) :
          for base in bases [ : : - 1 ] :
     _localtime = None
  byte2int = operator . itemgetter ( 0 )
 number = self . validate_number ( number )
  else :
   def find_filter ( self , filter_name ) :
    comma_separated_int_list_re = re . compile ( '^[\d,]+$' )
  except ImportError :
               self . instance = opts . model ( )
   def compress ( self , data_list ) :
      widget = ClearableFileInput
                  apps . get_app_config ( app_label )
 from django . db import connections , DEFAULT_DB_ALIAS
import django
              self . keyOrder . append ( key )
          def activate ( timezone ) :
                  self . _exception_middleware . insert ( 0 , mw_instance . process_exception )
          p = Popen ( args , shell = False , stdout = PIPE , stderr = PIPE ,  close_fds = os . name != 'nt' , universal_newlines = True )
 __D2 = r'(?P<day>[ \d]\d)'
          sql_files . append ( os . path . join ( app_dir , "%s.%s.sql" % ( opts . model_name , backend_name ) ) )
   return ip_str . rsplit ( ':' , 1 ) [ 1 ]
 self . data = data or { }
          return cls ( date . year , date . month , date . day ,  time . hour , time . minute , time . second ,  time . microsecond , time . tzinfo )
 for widget in self . widgets :
  created_models = self . sync_apps ( connection , executor . loader . unmigrated_apps )
  if app_config is None :
          stream . unget ( chunk )
  except Exception as e :
    style . ERROR_OUTPUT = style . ERROR
 path = kwargs . pop ( 'path' , None )
    if isinstance ( f , models . FileField ) :
              return
              self . stream . write ( "," )
              return ugettext ( "Please correct the duplicate data for %(field)s, "  "which must be unique." ) % {  "field" : get_text_list ( unique_check , six . text_type ( _ ( "and" ) ) ) ,  }
 raise
                  continue
                      self . stdout . write ( self . style . MIGRATE_SUCCESS ( " FAKED" ) )
  elif len ( fks_to_parent ) == 0 :
 name = s . split ( '.' )
 if member . isdir ( ) :
              return force_text ( time . tzname [ is_dst ] , DEFAULT_LOCALE_ENCODING )
 message = message % ( ', ' . join ( missing_fields ) ,  opts . model . __name__ )
          os . rmdir ( original_path )
    def handle_extensions ( extensions = ( 'html' , ) , ignored = ( 'py' , ) ) :
 for i , piece in enumerate ( re_formatchars . split ( force_text ( formatstr ) ) ) :
          from django . core . servers . fastcgi import FASTCGI_HELP
 from django . conf import settings
 WRAPPING_PUNCTUATION = [ ( '(' , ')' ) , ( '<' , '>' ) , ( '[' , ']' ) , ( '&lt;' , '&gt;' ) , ( '"' , '"' ) , ( '\'' , '\'' ) ]
 from io import BytesIO
 best_doublecolon_start = doublecolon_start
                  self . handle_starttag ( tag , attrs )
  continue
   url = unquote ( force_str ( url ) )
   def tag ( self ) :
  except Exception :
              for result , params in possibility :
 return obj_dict
 from threading import RLock
          self . _assert_mutable ( )
    __iter__ = xreadlines
    @ register . filter ( "escapejs" )
 path_info = get_path_info ( environ )
    return '' . join ( _generator ( ) )
 field_notes . append ( "Field renamed because it ended with '_'." )
   self . _clean_fields ( )
     try :
  elif not options [ "socket" ] and not options [ "host" ] and not options [ "port" ] :
 break
   def reset ( self ) :
          from django . core . urlresolvers import reverse , NoReverseMatch
                      curs . execute ( "\n" . join ( full_statement ) )
   def get_meta ( self , table_name ) :
 self . nodelist_loop = nodelist_loop
          parser . add_argument ( 'app_label' , nargs = '?' ,  help = 'App label of an application to synchronize the state.' )
 def check_all_models ( app_configs = None , ** kwargs ) :
          self . _wrapped = self . _setupfunc ( )
   def as_ul ( self ) :
          parser . add_argument ( 'args' , metavar = 'fixture' , nargs = '*' ,  help = 'Path(s) to fixtures to load before running the server.' )
 _iterlists = "iterlists"
 def bound_func ( * args2 , ** kwargs2 ) :
   os . chmod ( path , stat . S_IWRITE )
     class Enclosure ( object ) :
 return initial_value != data_value
                  sys . stdout . write ( self . main_help_text ( commands_only = True ) + '\n' )
   value = value . astimezone ( timezone )
  self . backout . append ( self . pointer )
      return _trans . activate ( language )
      class WindowsError ( Exception ) :
              return False
     __all__ = [ 'file_move_safe' ]
      help = ( "Runs over the entire source tree of the current directory and "  "pulls out all strings marked for translation. It creates (or updates) a message "  "file in the conf/locale (in the django tree) or locale (for projects and "  "applications) directory.\n\nYou must run this command with one of either the "  "--locale, --exclude or --all options." )
   try :
   class Command ( BaseCommand ) :
  from django . utils . functional import Promise
    def remove_move ( name ) :
  if format not in _serializers :
              if isinstance ( form . _meta . fields , tuple ) :
          return "<%s: %s>" % ( self . __class__ . __name__ ,  super ( MultiValueDict , self ) . __repr__ ( ) )
  kw = dict ( ( k , int ( v ) ) for k , v in six . iteritems ( kw ) if v is not None )
  finally :
                            raise ValueError ( "Non-reversible reg-exp portion: '(?%s'" % ch )
      msg = (  "django.utils.text.javascript_quote() is deprecated. "  "Use django.utils.html.escapejs() instead."  )
 from django . utils import six
 changes = autodetector . arrange_for_graph ( changes , loader . graph )
 if self . show_traceback :
  sys . modules [ __name__ + ".moves.urllib_robotparser" ] = sys . modules [ __name__ + ".moves.urllib.robotparser" ] = Module_six_moves_urllib_robotparser ( __name__ + ".moves.urllib.robotparser" )
 if id_ :
 if kwargs :
 self . allow_empty_first_page = allow_empty_first_page
  return mark_safe ( '' . join ( bits ) )
 from django . utils . deprecation import RemovedInDjango19Warning
          if not _cookie_encodes_correctly :
  return IfNode ( conditions_nodelists )
          self . _fname = None
 from django . utils . http import http_date
                          setattr ( filter_func . _decorated_function , attr , value )
  else :
                  self . stdout . write ( self . style . MIGRATE_HEADING ( "Merging %s" % app_label ) )
          return value
 return re_camel_case . sub ( r' \1' , value ) . strip ( ) . lower ( )
              raise TemplateSyntaxError ( "Second (optional) argument to %s tag"  " must be 'parsed'" % bits [ 0 ] )
                from django . conf import urls
                  _ [ m [ k ] ] = v
  return [ smart_text ( val ) for val in value ]
    def __iter__ ( self ) :
          return True
      ensure_echo_on ( )
  with connection . cursor ( ) as cursor :
  except NotImplementedError :
  except VariableDoesNotExist :
  self . _stream . unget ( unused_char )
  def __init__ ( self , location = None , base_url = None , file_permissions_mode = None ,  directory_permissions_mode = None ) :
  if self . required :
 try :
  if ( self . validate_min and  self . total_form_count ( ) - len ( self . deleted_forms ) < self . min_num ) :
                  self . close_called = True
   def get_form_error ( self ) :
    tag_re = ( re . compile ( '(%s.*?%s|%s.*?%s|%s.*?%s)' %  ( re . escape ( BLOCK_TAG_START ) , re . escape ( BLOCK_TAG_END ) ,  re . escape ( VARIABLE_TAG_START ) , re . escape ( VARIABLE_TAG_END ) ,  re . escape ( COMMENT_TAG_START ) , re . escape ( COMMENT_TAG_END ) ) ) )
  else :
   def led ( self , left , parser ) :
  elif ch == '.' :
  from django . forms . widgets import Widget , Select
              raise ValueError ( "Key '%s' not found" % key )
  url_markup_template = '<a href="{0}">{1}</a>'
  except TypeError :
 VARIABLE_TAG_END = '}}'
   def check ( self , app_configs = None , tags = None , display_num_errors = False ) :
          fd = sys . stdin
 self . use_natural_primary_keys = options . pop ( 'use_natural_primary_keys' , False )
 try :
 handler . name = name
               value = self . _resolve_lookup ( context )
  @ total_ordering
              try :
 if ch != '?' or escaped :
   elif name is not None and compile_function is not None :
 output = force_text ( output )
          super ( MultipleHiddenInput , self ) . __init__ ( attrs )
  except serializers . SerializerDoesNotExist :
                  yield safe_join ( template_dir , template_name )
 self . lineno = None
 return Variable ( path ) . resolve ( context )
      if role in PALETTES [ NOCOLOR_PALETTE ] and definition :
  except AttributeError :
 all_date_checks = set ( )
  if domain is not None :
  except UnicodeDecodeError :
 new_second_item = [ ]
     for handler in handlers :
 s = s . replace ( "'" , "\\'" )
 if not self . DIGIT_PATTERN . match ( idx ) :
     class Archive ( object ) :
      SafeString = SafeText
 for f in opts . concrete_fields + opts . virtual_fields + opts . many_to_many :
                  self . stdout . write ( 'processing file %s in %s\n' % ( f , dirpath ) )
              raise OverflowError ( 'dklen too big' )
   def decode ( self , s ) :
                              t = get_template ( file_name )
  mail = EmailMultiAlternatives ( '%s%s' % ( settings . EMAIL_SUBJECT_PREFIX , subject ) ,  message , settings . SERVER_EMAIL , [ a [ 1 ] for a in settings . MANAGERS ] ,  connection = connection )
 self . connection_reset = connection_reset
                      cls . __str__ = cls . __bytes_cast
  try :
   def to_python ( self , data ) :
 self . old_timezone = getattr ( _active , 'value' , None )
   if isinstance ( field_value , str ) :
 from optparse import OptionParser
 from lib2to3 . pgen2 import token
                         for middleware_method in self . _exception_middleware :
                  if six . PY3 :
 from django . utils import six
      elif self . _meta . fields and field not in self . _meta . fields :
              attrs . update ( extra_attrs )
    out = b'' . join ( parts ( ) )
  else :
                  pass
 self . remove_potfiles ( )
 if not self . timezone :
  password += b'\x00' * ( inner . block_size - len ( password ) )
 if decimals > digits :
 self . second = None
  else :
          args = [ sys . executable ] + [ '-W%s' % o for o in sys . warnoptions ] + sys . argv
                  final_output . extend ( connection . creation . sql_for_pending_references ( refto , style , pending_references ) )
                   for hook in sys . path_hooks :
      callable = callable
                                       break
 if not self . initial_forms :
 from django . utils . encoding import force_bytes
    return True
              try :
 return DefusedExpatParser ( )
 self . content_length = None
                  tried . append ( filepath )
  if isinstance ( value , six . text_type ) :
  except KeyError :
          option = remaining_bits . pop ( 0 )
   def exists ( self , name ) :
                              file_ . close ( )
 if fk_name :
   def render ( self , context ) :
   def super ( self ) :
  elif self . verbosity > 0 :
  self . cache_choices = cache_choices
                  self . _delete ( k )
   def popitem ( self ) :
 from django . db import connections , DEFAULT_DB_ALIAS
              pathext = [ '' ]
  with transaction . atomic ( using = self . using ) :
  return copy . deepcopy ( self . _wrapped , memo )
  def __init__ ( self , template , context = None , content_type = None , status = None ) :
          obj = super ( MultiWidget , self ) . __deepcopy__ ( memo )
                      arg_vals . append ( arg . resolve ( context ) )
 extra_context = token_kwargs ( remaining_bits , parser , support_legacy = True )
  else :
                  value = value [ 1 : - 1 ]
          if self . is_localized :
              self . stdout . write ( '\n' . join ( sorted ( registry . tags_available ( ) ) ) )
              self . _delete ( fname )
                          if message_context :
 import django . core . checks . model_checks
  if format not in _serializers :
 saved_locale = translation . get_language ( )
                      if hasattr ( middleware , 'process_exception' ) :
  output = self . handle ( * args , ** options )
  return new_class
  from django . conf import settings
  return 0 , ch2
 result = logging . Filter ( name )
      default_validators = [ validators . validate_ipv4_address ]
 if not regex_match :
                  other = other . __cast ( )
                  pass
              self . delete ( key , version = version )
  if ( getattr ( Meta , 'fields' , None ) is None and  getattr ( Meta , 'exclude' , None ) is None ) :
                      raise ValueError ( "MultiValueDict.update() takes either a MultiValueDict or dictionary" )
 if not path . exists ( target_dir ) :
                            walk_to_end ( ch , pattern_iter )
   def get_limit_choices_to ( self ) :
 if self . connection :
 try :
 plural = [ ]
  isolated_context = options . get ( 'only' , False )
              raise TypeError ( 'Level not an integer or a '  'valid string: %r' % level )
 bits = token . split_contents ( )
 for name in sorted ( commands_dict [ app ] ) :
    def media ( request ) :
                      extracted = self . _archive . extractfile ( member )
 domain = domain . encode ( 'idna' ) . decode ( 'ascii' )
                              data = raw_data
 silent_variable_failure = True
                          response = middleware_method ( request , e )
          if not os . path . exists ( self . _dir ) :
 for file in options [ 'files' ] :
   truncate_len = length
 logger . propagate = True
 if over_bytes :
  else :
      def __init__ ( self , s ) :
 if self . data . minute == 0 and self . data . hour == 0 :
 if not chunk_size :
 from django . utils . http import urlquote
 if meta is None :
 return get_internal_wsgi_application ( )
 self . negated = negated
              from django . conf import settings
 from __future__ import unicode_literals
 return df . format ( format_string )
  else :
          raise TemplateSyntaxError ( "widthratio takes at least three arguments" )
  for model in app_models :
  except ( OSError ) :
  from django . core . management . base import BaseCommand
                      namespaces [ pattern . namespace ] = ( p_pattern , pattern )
              raise ValidationError ( self . message , code = self . code )
  else :
 check_for_language . cache_clear ( )
 _format_cache = { }
     return Operator
   def add_move ( move ) :
   def display ( self ) :
  except KeyError :
    except StopUpload as e :
          offset = date . tzinfo . utcoffset ( date )
       if hasattr ( os . path , 'samefile' ) :
                  self . interesting = re . compile ( r'</\s*%s\s*>' % tag . lower ( ) , re . I )
 code_list = [ ]
 try :
                  yield b'' . join ( self )
    form . fields [ name ] = InlineForeignKeyField ( self . instance , ** kwargs )
                          raise KeyError ( 'Your dictionary lacks key \'%s\'. '  'Please provide it, because it is required to '  'determine whether string is singular or plural.'  % number )
   def __deepcopy__ ( self , memodict ) :
 from __future__ import unicode_literals
 class EmailValidator ( object ) :
 from django . utils import dateformat , numberformat , datetime_safe
  return self . _namespace_dict [ language_code ]
 return errors
              self . full_clean ( )
          pass
 data_set = set ( force_text ( value ) for value in data )
    class HttpResponseServerError ( HttpResponse ) :
 formatted_subject = subject . replace ( '\n' , '\\n' ) . replace ( '\r' , '\\r' )
              for path in data :
  else :
 def urlize ( value , autoescape = None ) :
  plural_forms_re = re . compile ( r'^(?P<value>"Plural-Forms.+?\\n")\s*$' , re . MULTILINE | re . DOTALL )
 handler . addQuickElement ( "name" , item [ 'author_name' ] )
     def load_command_class ( app_name , name ) :
 first = second = None
 g = generator . BytesGenerator ( fp , mangle_from_ = False )
      def ungettext ( singular , plural , number ) :
  except ( ValueError , TypeError ) :
  else :
          raise ValidationError ( error_message , code = 'invalid' )
 if space == 0 :
   seen_data . add ( data )
    class HttpResponseNotModified ( HttpResponse ) :
  self . _callback_strs . add ( lookup_str )
  item = {  'title' : to_unicode ( title ) ,  'link' : iri_to_uri ( link ) ,  'description' : to_unicode ( description ) ,  'author_email' : to_unicode ( author_email ) ,  'author_name' : to_unicode ( author_name ) ,  'author_link' : iri_to_uri ( author_link ) ,  'pubdate' : pubdate ,  'updateddate' : updateddate ,  'comments' : to_unicode ( comments ) ,  'unique_id' : to_unicode ( unique_id ) ,  'unique_id_is_permalink' : unique_id_is_permalink ,  'enclosure' : enclosure ,  'categories' : categories or ( ) ,  'item_copyright' : to_unicode ( item_copyright ) ,  'ttl' : ttl ,  }
    def mail_managers ( subject , message , fail_silently = False , connection = None ,  html_message = None ) :
 self . id = id
 make_key = _make_key
 from gzip import GzipFile
 from django . forms . forms import DeclarativeFieldsMetaclass , BaseForm
 import os
  except NoReverseMatch :
  return ''
     class SortedDict ( dict ) :
 self . url_name = url_name
 from django . utils . six . moves import xrange
                          yield line
              self . _urlconf_module = import_module ( self . urlconf_name )
                      view_name = callback . __name__
 if len ( fks_to_parent ) == 1 :
  rawdata = self . rawdata
  return bool ( initial ) != bool ( data )
  else :
 field_notes . append ( "Field renamed because it wasn't a valid Python identifier." )
 setattr ( style , role , termcolors . make_style ( ** format ) )
  else :
                      raise TemplateSyntaxError ( "Could not find variable at "  "start of %s." % token )
 from django . utils import six
              self . cc = [ ]
          super ( LoaderOrigin , self ) . __init__ ( display_name )
 i = i + 1
          fname = self . _key_to_file ( key , version )
   gettempdir = tempfile . gettempdir
 return cache
  return format_html (  '<ul class="errorlist">{0}</ul>' ,  format_html_join ( '' , '<li>{0}{1}</li>' , ( ( k , force_text ( v ) ) for k , v in self . items ( ) ) )  )
    class ContextDict ( dict ) :
 deprecation_warning = renamed_method [ 2 ]
              return self . blocks [ name ] [ - 1 ]
    self . path = '%s/%s' % ( script_name . rstrip ( '/' ) ,  path_info . replace ( '/' , '' , 1 ) )
 return MONTHS_AP [ self . data . month ]
 if os . path . isfile ( fext ) :
          stream = stream_or_string
 import warnings
                  args . append ( parser . compile_filter ( value ) )
   else :
 self . _options = params . get ( 'OPTIONS' , None )
  import copy
          if name == "_wrapped" :
   return metaclass ( cls . __name__ , cls . __bases__ , orig_vars )
   if new_conn_created :
 statements = sql_delete ( app_config , self . style , connection )
  import os
   if field_type == 'DecimalField' :
 if not _is_shorthand_ip ( ip_str ) :
          cookies = '<could not parse>'
  except re . error as e :
  headerlist . sort ( )
  output [ - 1 ] = last_row [ : - len ( row_ender ) ] + str_hidden + row_ender
 translated = func ( ** kwargs )
                          try :
  except Exception :
 pass
 if self . use_natural_foreign_keys and hasattr ( field . rel . to , 'natural_key' ) :
                      self . _errors [ field ] = self . error_class ( error_class = 'nonfield' )
 if run_syncdb and executor . loader . unmigrated_apps :
          if truncate is None :
          return get_connection ( backend = self . email_backend , fail_silently = True )
   if any ( e . is_serious ( ) and not e . is_silenced ( ) for e in all_issues ) :
 from django . utils . safestring import mark_safe , SafeData , mark_for_escaping
          for arg in list ( args ) + list ( six . itervalues ( kwargs ) ) :
              for root , dirs , files in sorted ( os . walk ( self . path ) ) :
              raise IOError ( "Destination file %s exists and allow_overwrite is False" % new_file_name )
 from django . forms . widgets import *
   if filename not in _error_files :
  result . append ( self . create_token ( self . template_string [ start : end ] , ( start , end ) , True ) )
     class SingleZipReader ( zipfile . ZipFile ) :
              self . choices = [ ( "" , "---------" ) ]
  use_natural_foreign_keys = options . get ( 'use_natural_foreign_keys' ) or use_natural_keys
 run_syncdb = True
 if not unused_char :
 m = self . WORD_PATTERN . match ( rest )
                      try :
          if memo is None :
 if hasattr ( timezone , 'normalize' ) :
 for dict_ in self . dicts :
 import warnings
                      relations = { }
 pending_references = { }
     return OrderedDict ( fields )
 super ( PyLibMCCache , self ) . __init__ ( server , params ,  library = pylibmc ,  value_not_found_exception = pylibmc . NotFound )
   all_models = [  ( app_config . label ,  router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) )  for app_config in apps . get_app_configs ( )  if app_config . models_module is not None and app_config . label in app_labels  ]
 self . indent ( 2 )
   def temporary_file_path ( self ) :
 from django . utils . encoding import smart_text
 keys = _iterkeys
   def close ( self ) :
          try :
  except Exception :
 internal_use_only = False
 shutil . move ( the_path , guessed_path )
          return self . _get_image_dimensions ( ) [ 0 ]
 self . fed = [ ]
  except UnicodeEncodeError :
          super ( Truncator , self ) . __init__ ( lambda : force_text ( text ) )
 try :
 from django . utils . six . moves . urllib . parse import urljoin
 inplural = False
          text = text [ 1 : ]
   def handle_app_config ( self , app_config , ** options ) :
   return result , result_args
   default_error_messages = {  'invalid_choice' : _ ( 'Select a valid choice. That choice is not one of'  ' the available choices.' ) ,  }
  value = value . strip ( )
  return '%s%s' % ( ( '\x1b[%sm' % ';' . join ( code_list ) ) , text or '' )
  cc = ', ' . join ( dictvalue ( el ) for el in cc . items ( ) )
 from django . core . management . utils import find_command , popen_wrapper
          return isinstance ( other , self . __class__ ) and ( self . limit_value == other . limit_value ) and ( self . message == other . message ) and ( self . code == other . code )
          return super ( Error , self ) . __init__ ( ERROR , * args , ** kwargs )
              error_dict . setdefault ( NON_FIELD_ERRORS , [ ] ) . extend ( self . error_list )
      errors = [ model . check ( ** kwargs )  for model in apps . get_models ( )  if app_configs is None or model . _meta . app_config in app_configs ]
   def construct_instance ( form , instance , fields = None , exclude = None ) :
 if not kwarg_format :
  def handle_field ( self , obj , field ) :
  self . dicts . append ( other_dict )
 name = self . _save ( name , content )
  except ( TypeError , VariableDoesNotExist ) :
              if self . app_label and app_config . label != self . app_label :
 self . setup_environ ( )
          if data in ( None , FILE_INPUT_CONTRADICTION ) :
 from django . utils import six
    class EscapeBytes ( bytes , EscapeData ) :
                if isinstance ( field , models . TimeField ) and getattr ( obj , field . name ) is not None :
  _iterkeys = "iterkeys"
  elif token . token_type == 2 :
              guessed_filename = used_name
                      m = Media ( )
    def to_python ( self , value ) :
 codecs . lookup ( encoding )
  import warnings
 if not hasattr ( obj , "_meta" ) :
  msgs = msgs . replace ( old , new )
   return total_forms
 from django . forms . models import *
    def send_messages ( self , messages ) :
          return "<TranslatableFile: %s>" % os . sep . join ( [ self . dirpath , self . file ] )
 nodelist_loop = parser . parse ( ( 'else' , end_tag ) )
          self . flo = flo
 from django . utils . functional import lazy
              return SafeText ( data )
  def model_installed ( model ) :
                  raise ValidationError (  _ ( 'ManagementForm data is missing or has been tampered with' ) ,  code = 'missing_management_form' ,  )
   def __deepcopy__ ( self , memo ) :
 for chunk in self . chunks ( ) :
    def __iter__ ( self ) :
 m = dict ( zip ( new_keys , keys ) )
    else :
  else :
                  raise TypeError ( "sep must be None or a string" )
 from django . utils import six
   super ( ValidationError , self ) . __init__ ( message , code , params )
 def linebreaksbr ( value , autoescape = None ) :
   def clear ( self ) :
     class MemoryFileUploadHandler ( FileUploadHandler ) :
          raise self . exception
 return datetime . date ( ** kw )
   if isinstance ( value , six . text_type ) :
 _cached_filenames = [ ]
  else :
  try :
 def auto_id ( self ) :
  if isinstance ( s , bytes ) or ( isinstance ( s , Promise ) and s . _delegate_bytes ) :
   def make_key ( self , key , version = None ) :
 MB = 1 << 20
                  msg = "System check identified some issues:\n%s" % msg
                          namespaces [ namespace ] = ( p_pattern + prefix , sub_pattern )
 self . domain = options . get ( 'domain' )
 from django . core import signing
   def label_tag ( self , contents = None , attrs = None , label_suffix = None ) :
              response = func ( request , response )
  import os
  data = data . encode ( fp . encoding , errors )
              if hasattr ( pattern , '_callback_str' ) :
              self [ k ] = v
  def fix ( match ) :
   except SuspiciousOperation as e :
              attrs . setdefault ( 'step' , 'any' )
                  if self . fail_silently :
                      end_text_pos = pos
 def write ( self , s ) :
   def close ( self ) :
 try :
              callback , param_dict = resolver . resolve_error_handler ( status_code )
 Encoders . encode_base64 ( attachment )
  try :
              return op ( )
 six . reraise ( ImportError , ImportError ( msg ) , sys . exc_info ( ) [ 2 ] )
   def get_parent ( self , context ) :
 if connection . ops . start_transaction_sql ( ) :
          opts = self . _meta
  return path
 from django . conf import settings
 args = [ ]
              self . locale_paths . extend ( list ( settings . LOCALE_PATHS ) )
                      self . stdout . write ( "Installing %s fixture '%s' from %s." %  ( ser_fmt , fixture_name , humanize ( fixture_dir ) ) )
       mime_type = 'application/atom+xml; charset=utf-8'
          return input_val
 global templatetags_modules
  local_attrs = self . build_attrs ( id = field % id_ )
      def get_quantifier ( ch , input_iter ) :
  def __init__ ( self , data , encoder = DjangoJSONEncoder , safe = True , ** kwargs ) :
                  self . stdout . write ( "Installed %d object(s) (of %d) from %d fixture(s)" %  ( self . loaded_object_count , self . fixture_object_count , self . fixture_count ) )
   @ property
 if as_ != 'as' :
 from django . utils . text import normalize_newlines
 stats [ HITS ] += 1
    DjangoSafeDumper . add_representer ( decimal . Decimal , DjangoSafeDumper . represent_decimal )
  except :
  return wrapped
 result = cache_get ( key , root )
   except SystemExit :
                      match = condition . eval ( context )
                          g = g . strip ( "'" )
 from django . core . mail . backends . base import BaseEmailBackend
 from django . utils . text import normalize_newlines , slugify as _slugify
                    url_fields [ 1 ] = url_fields [ 2 ]
                  raise TemplateSyntaxError ( "Could not parse some characters: "  "%s|%s|%s" %  ( token [ : upto ] , token [ upto : start ] ,  token [ start : ] ) )
  return mark_safe ( '\n' . join ( inputs ) )
              self . _post_render_callbacks . append ( callback )
      smart_str = smart_bytes
                  widget = form . _meta . widgets . get ( self . _pk_field . name , HiddenInput )
   if new_name . find ( '__' ) >= 0 :
  except VariableDoesNotExist :
      def __get__ ( self , instance , owner ) :
   if hasattr ( error , 'error_dict' ) :
                  dirs . append ( app_dir )
    class BaseCache ( object ) :
from importlib import import_module
                          if field_type == 'BooleanField(' :
 for key in self :
                      date_value = datetime_safe . new_date ( date_value )
 def wordwrap ( value , arg ) :
 force_str = force_bytes
  bits = arg . split ( ',' )
              return path , ''
 return value . replace ( '\\' , '\\\\' ) . replace ( '"' , '\\"' ) . replace ( "'" , "\\'" )
  self . _current [ field . name ] = [ m2m_value ( related )  for related in getattr ( obj , field . name ) . iterator ( ) ]
  scheme = value . split ( '://' ) [ 0 ] . lower ( )
      def addQuickElement ( self , name , contents = None , attrs = None ) :
 return iter ( self . forms )
  except ( AttributeError , TypeError ) :
          raise ValueError ( e )
              return timedelta ( 0 )
  media = property ( _get_media )
    else :
  from django . core . exceptions import (  ImproperlyConfigured , ValidationError , NON_FIELD_ERRORS , FieldError )
  except ValueError :
 if value and ':' in value :
  generic_lang_code = lang_code . split ( '-' ) [ 0 ]
                  handler . addQuickElement ( "email" , item [ 'author_email' ] )
 id_ = widget . attrs . get ( 'id' ) or self . auto_id
 def truncatewords ( value , arg ) :
 import re
                  continue
  elif args [ 1 ] [ 0 ] == '1' :
 missing_args_message = "You must provide an application name."
                              t = select_template ( file_name )
                      self . importer ( used )
              return self . filters [ filter_name ]
 raise NotImplementedError ( 'subclasses of BaseCache must provide a set() method' )
   del Trans
   def I ( self ) :
  else :
  context . dicts . append ( self )
    def ngettext ( singular , plural , number ) :
 self . validate_key ( key )
     @ deconstructible
  if item [ 'unique_id' ] is not None :
                  replaces . append ( ( migration . app_label , migration . name ) )
  from django . apps import apps
    self . end_object ( obj )
 pass
  except ValueError :
   if getattr ( obj , field . name ) is not None :
          raise NotImplementedError ( 'subclasses of Origin must provide a reload() method' )
 self . choice_cache = None
   def get_many ( self , keys , version = None ) :
 if key_prefix is None :
  super ( WSGIServer , self ) . __init__ ( * args , ** kwargs )
                  src_data = fp . read ( )
   def decompress ( self , value ) :
 p = language . find ( '-' )
 loaded_objects_in_fixture = 0
              if six . PY3 :
   def loads ( self , data ) :
   class _OFFSET_UNION ( Union ) :
    if form . _meta . fields :
  else :
  final_attrs = self . build_attrs ( attrs , name = name )
    if not settings . is_overridden ( 'MIDDLEWARE_CLASSES' ) :
 self . content_type = None
 if new_attr is None :
                  data = data ( )
                  pass
   def setdefault ( self , key , default = None ) :
  if item [ 'ttl' ] is not None :
              return from_current_timezone ( value )
 MIMEText . __setitem__ ( self , name , val )
          timestamp = datetime . datetime . utcfromtimestamp ( int ( timestamp ) )
  return self . _dimensions_cache
   def keys ( self ) :
   if use_grouping :
  if is_aware ( date ) :
                          response = middleware . process_template_response ( request , response )
 from django . template import Template , Context
    if six . PY3 :
   html4_singlets = (  'br' , 'col' , 'link' , 'base' , 'img' ,  'param' , 'area' , 'hr' , 'input'  )
          value = ugettext ( "%s PB" ) % filesize_number_format ( bytes / PB )
   def __len__ ( self ) :
  if target_app_labels_only :
   def get_response ( self , request ) :
   elif len ( fks_to_parent ) == 0 :
   def _helper ( list_ , tabs = 1 ) :
    def _get_timezone_name ( timezone ) :
 from django . utils . encoding import force_bytes , force_text , iri_to_uri
          super ( Command , self ) . add_arguments ( parser )
  if remaining_bits :
 if not hasattr ( parser , '_namedCycleNodes' ) :
                  if error . code == code :
 if not ( self . data or self . files ) :
 if self . _non_form_errors is None :
              pass
   def __str__ ( self ) :
                      data = data . replace ( microsecond = 0 )
              self [ key ] = result
   def __eq__ ( self , other ) :
 plural = [ ]
              if primary_keys :
              if not self . fail_silently :
 try :
              warnings . warn ( "``use_natural_keys`` is deprecated; use ``use_natural_foreign_keys`` instead." ,  RemovedInDjango19Warning )
 _iteritems = "iteritems"
   return ''
                  return pickle . loads ( pickled )
     ESCAPE_MAPPINGS = {  "A" : None ,  "b" : None ,  "B" : None ,  "d" : "0" ,  "D" : "x" ,  "s" : " " ,  "S" : "x" ,  "w" : "x" ,  "W" : "!" ,  "Z" : None ,  }
   return False
      help = "Prints the custom table modifying SQL statements for the given app name(s)."
 if nodelist :
 tok = '"' + guts + '"'
  if self . feed [ 'feed_copyright' ] is not None :
 tzinfo . __init__ ( self )
  from django . conf import settings
                  return func ( * self . __args , ** self . __kw )
   if process_all :
 if base64d [ : 1 ] == b'.' :
 from IPython import start_ipython
              usage = [  "" ,  "Type '%s help <subcommand>' for help on a specific subcommand." % self . prog_name ,  "" ,  "Available subcommands:" ,  ]
   if found :
 regex_match = language_code_prefix_re . match ( path )
   def __setitem__ ( self , name , val ) :
                  if filename . endswith ( ( '.pyo' , '.pyc' , '.py.class' ) ) :
     class DjangoJSONEncoder ( json . JSONEncoder ) :
                      self . keyOrder . append ( key )
              url = reverse ( view_name , args = args , kwargs = kwargs , current_app = context . current_app )
     class RegexField ( CharField ) :
               value = self . literal
  else :
 ns = "http://www.w3.org/2005/Atom"
 import warnings
                          model = app_config . get_model ( model_label )
              exit_code = restart_with_reloader ( )
   def add_fields ( self , form , index ) :
   def __ne__ ( self , other ) :
          for taglib in bits [ 1 : ] :
              self . _setup ( )
                field_name = field_node . getAttribute ( "name" )
 if options . settings :
 self . _current = None
 return form
 extend = complain
          return getattr ( self . _out , name )
  if delta < 0 :
              self . stdout . write ( self . style . MIGRATE_HEADING ( "Operations to perform:" ) )
          tag , this_value_expr , max_value_expr , max_width = bits
 from django . utils . six . moves import http_cookies
 if self . feed [ 'feed_url' ] is not None :
 pass
              if key in dict_ :
 if o . microsecond :
              _ , params = cgi . parse_header ( content_disposition )
 raise TypeError ( msg )
 while not answer or answer not in "yn" :
   def flatatt ( attrs ) :
                      form . save_m2m ( )
  return iri_to_uri ( location )
              self . mode = file . mode
   if ( ( os . stat ( path ) . st_mode & stat . S_IREAD ) != stat . S_IREAD ) :
  setattr ( self , real_name , getattr ( trans , real_name ) )
 for templatetag_module in templatetags_modules_candidates :
 return self . _handle_object ( node )
     if settings . DEBUG :
              if module_has_submodule ( app_config . module , "management" ) :
                      def m2m_convert ( value ) :
          connection = connections [ self . using ]
                                  val = list ( val )
              self . validators . append ( validators . MaxLengthValidator ( int ( max_length ) ) )
   def open ( self , mode = None ) :
   else :
 if value is None :
                   pass
      def ugettext ( message ) :
  else :
   def __repr__ ( self ) :
       BM_compatible = True
 self . labels = getattr ( options , 'labels' , None )
 from django . utils . translation import ugettext_lazy as _
     def open ( self , name , mode = 'rb' ) :
               if value :
 all_issues = checks . run_checks ( app_configs = app_configs , tags = tags )
          if response . streaming :
           self . blocks = defaultdict ( list )
   @ property
 parser . add_argument ( '--liveserver' ,  action = 'store' , dest = 'liveserver' , default = None ,  help = 'Overrides the default address where the live server (used '  'with LiveServerTestCase) is expected to run from. The '  'default value is localhost:8081.' ) ,
                  form_field = self . fields [ field ]
   def _get_size_from_underlying_file ( self ) :
 from django . core . handlers import base
 return WSGIHandler ( )
     def _iterkeys ( self ) :
              call_command (  'flush' ,  verbosity = max ( self . verbosity - 1 , 0 ) ,  interactive = False ,  database = db ,  reset_sequences = False ,  inhibit_post_migrate = True ,  )
 s = Select ( choices = choices )
 self . _app_dict [ language_code ] = apps
                  cursor . execute ( "DELETE FROM %s "  "WHERE cache_key = %%s" % table , [ key ] )
   def _update_unget_history ( self , num_bytes ) :
   else :
  if data in seen_data :
  return Truncator ( value ) . words ( length , truncate = ' ...' )
   def configure_filter ( self , config ) :
   def sign ( self , value ) :
                      response = wrapped_callback ( request , * callback_args , ** callback_kwargs )
 v = datetime . datetime . strptime ( force_str ( value ) , input_format )
                  if e . errno == errno . ENOENT :
      advance_iterator = next
 if len ( value ) >= 2 and value [ : 1 ] == value [ - 1 : ] == b'"' :
 from __future__ import unicode_literals
  field_name = force_text ( field_name , encoding , errors = 'replace' )
   return num_sent
                  args = match . groups ( )
 if check not in self . registered_checks :
          raise TemplateSyntaxError ( "'for' statements should have at least four"  " words: %s" % token . contents )
 while end > 0 and s . count ( b'"' , 0 , end ) % 2 :
    class RawPostDataException ( Exception ) :
  else :
 if next_item and isinstance ( next_item , ( list , tuple ) ) :
  def __init__ ( self , var1 , var2 , nodelist_true , nodelist_false , negate ) :
import copy
               return dec ( func )
          neg , value = self . convert ( i , self . decimal_digits , self . digits , '-' )
              newline = unicode ( "\n" )
 if primary_keys :
 missing_args_message = "You must provide a project name."
          return
    def gettext ( message ) :
 if self . can_delete :
          del _active . value
                   call_command ( 'loaddata' , 'initial_data' , ** options )
  elif bytes < GB :
  else :
 UnicodeDecodeError . __init__ ( self , * args )
 errors . extend ( _check_test_runner ( ** kwargs ) )
  return [ source [ 0 ] ] , [ params ]
  else :
  import codecs
 clean = lambda self , x : len ( x )
                  display_url = tmp + '/'
  for statement in sql :
                   open_tags . insert ( 0 , tagname )
      from django . conf import settings
                  _error_files . append ( filename )
      global _default
 if representative is None :
          t = select_template ( template_name , dirs )
   if field not in self . fields :
 def __getitem__ ( self , key ) :
  return self . _files
 _format_modules_cache = { }
          tpl = "DTDForbidden(name='{}', system_id={!r}, public_id={!r})"
 wrapper . cache_clear = cache_clear
     class TimeField ( BaseTemporalField ) :
                  field_value = None
  if isinstance ( stream_or_string , bytes ) :
                      view_name = callback . __class__ . __name__ + '.__call__'
 if format_module_path :
                      val = getattr ( module , format_type )
  table_name_filter = options . get ( 'table_name_filter' )
 if len ( compressed ) < ( len ( data ) - 1 ) :
 from django . utils import six
  return left
 get_supported_language_variant . cache_clear ( )
    outdict [ name ] = value , params
 if hasattr ( form , 'Meta' ) :
  mail = EmailMultiAlternatives ( '%s%s' % ( settings . EMAIL_SUBJECT_PREFIX , subject ) ,  message , settings . SERVER_EMAIL , [ a [ 1 ] for a in settings . ADMINS ] ,  connection = connection )
 self . fixture_object_count += objects_in_fixture
     finally :
 softspace = property ( lambda self : self . file . softspace )
          return datetime . datetime . strptime ( force_str ( value ) , format ) . time ( )
 def capfirst ( value ) :
 if value in self . empty_values :
  elif ':' not in middle and simple_email_re . match ( middle ) :
                  c = int ( text )
          return unicode ( s . replace ( r'\\' , r'\\\\' ) , "unicode_escape" )
              return False
  return context_extras
  default_translation = translation ( settings . LANGUAGE_CODE )
              self . _populate ( )
          if not value and self . required :
 label = bf . label_tag ( label ) or ''
 errors = [ ]
 from django . utils import six
 if tags and any ( not checks . tag_exists ( tag ) for tag in tags ) :
                          app_config = apps . get_app_config ( app_label )
   def __enter__ ( self ) :
      return _trans . gettext_noop ( message )
 if day_of_year <= ( 8 - jan1_weekday ) and jan1_weekday > 4 :
 self . msguniq_options = self . msguniq_options [ : ] + [ '--no-location' ]
              if isinstance ( query_string , bytes ) :
  return doy
 MAX_NUM_FORM_COUNT = 'MAX_NUM_FORMS'
 sublist = ''
  else :
 return update_wrapper ( wrapper , user_function )
          return key in self . dicts [ - 1 ]
  def __iter__ ( self ) :
  from django . apps import apps
 if handlers :
  for node in self . nodelist_empty :
                  for filename in locale_filenames :
 if not self . recipients ( ) :
 default_error_messages = {  'invalid' : _ ( 'Enter a valid URL.' ) ,  }
              taglib = bits [ - 1 ]
  from django . apps import apps
              lookup_view_s = lookup_view
          try :
 content = force_bytes ( content )
          super ( MultiValueDict , self ) . __setitem__ ( key , list_ )
  except TemplateDoesNotExist :
 DOT_PATTERN = re . compile ( r'^\.\s*(\w+)\s*' )
  token = Token ( TOKEN_COMMENT , content )
          return str ( self )
                  raise TemplateSyntaxError (  "'%s' received some positional argument(s) after some "  "keyword argument(s)" % name )
 return f . fileno ( ) if hasattr ( f , 'fileno' ) else f
 self . empty_value = kwargs . pop ( 'empty_value' , [ ] )
 STATUS_OK = 0
          pass
   def _coerce ( self , value ) :
                  if _ipv6 :
          return File ( open ( self . path ( name ) , mode ) )
 if renderer :
                              comment_notes . append ( 'AutoField?' )
 from django . conf import settings
     def _clean_form ( self ) :
   return property ( fget , fset , fdel , doc )
  arg = args [ 1 ]
 outer . update ( password . translate ( hmac . trans_5C ) )
      def render_node ( self , node , context ) :
                           title = plan_node [ 1 ]
  except LookupError :
              if connection . introspection . table_name_converter ( model . _meta . db_table ) in table_names :
   def pop ( self ) :
              return default
 leading = self . has_leading_dir ( x . name for x in members )
      try :
 if isinstance ( query , MultiValueDict ) :
                      attrs [ 'class' ] += ' ' + self . form . required_css_class
                          i += 1
   from django . conf import settings
  except ImportError as e :
 from datetime import datetime
          super ( Command , self ) . add_arguments ( parser )
 if os . path . exists ( potfile ) :
 if value is not None :
              if bits [ 0 ] != 'and' :
      def parse_header ( line ) :
     class WSGIRequest ( http . HttpRequest ) :
 DELETION_FIELD_NAME = 'DELETE'
 from django . db import connections , transaction
  except ValueError :
   def __reversed__ ( self ) :
  if filename . endswith ( extensions ) or filename in extra_files :
      return base64 . urlsafe_b64encode ( s ) . strip ( b'=' )
 setattr ( base , new_method_name , old_method )
   def __iter__ ( self ) :
 super ( SortedDict , self ) . __init__ ( data )
          return self
 try :
 self . day_none_value = self . none_value
 if threading :
 pass
 if _cached_modules == module_values :
   def strip_entities ( value ) :
  def copystat ( src , dst ) :
                              break
 return VerbatimNode ( nodelist . render ( Context ( ) ) )
   if self . verbosity > 0 :
          validate_ipv4_address ( value )
 with open ( path , 'rb' ) as f :
  if fields is not None and f . name not in fields :
   def is_checked ( self ) :
   def as_p ( self ) :
             root = logging . root
              ignored . append ( f . name )
  if self . number == self . paginator . num_pages :
          self . regexes = { }
          __str__ = new_method_proxy ( str )
    @ register . tag
      def execute_from_command_line ( argv = None ) :
          return self . META . get ( 'HTTP_X_REQUESTED_WITH' ) == 'XMLHttpRequest'
          for name , block in six . iteritems ( blocks ) :
                  msg += " The domain name provided is not valid according to RFC 1034/1035."
   def unclosed_block_tag ( self , parse_until ) :
                return False
          if hasattr ( self , 'error_dict' ) :
 from django . utils import six
                  if e . errno != errno . EEXIST :
  with connection . cursor ( ) as cursor :
                      m2m_convert = lambda v : smart_text ( field . rel . to . _meta . pk . to_python ( v ) )
    def close ( self ) :
                   url_fields [ 0 ] = 'http'
      help = 'Prints the SQL statements for resetting sequences for the given app name(s).'
 return message
  else :
  if not basedirs :
 cache_key = 'views.decorators.cache.cache_page.%s.%s.%s.%s' % (  key_prefix , method , url . hexdigest ( ) , ctx . hexdigest ( ) )
  self . errors
   def tag_exists ( self , tag ) :
 self . _closable_objects = [ ]
  if len ( list_ ) == 1 :
          return "<IfNode>"
 from django . utils . six . moves import html_entities
          return force_text ( settings . FORCE_SCRIPT_NAME )
 self . sysid = sysid
          reloader = jython_reloader
      def handle_template ( self , template , subdir ) :
                   self . literal = float ( var )
  try :
 return { 'STATIC_URL' : settings . STATIC_URL }
                      want_unicode = True
 sub = mapping [ version [ 3 ] ] + str ( version [ 4 ] )
          is_dst = False if dt is None else self . _isdst ( dt )
     class URLNode ( Node ) :
              warning = 'ImmutableList object is immutable.'
from __future__ import unicode_literals
  elif int ( timeout ) == 0 :
   self . fixture_count = 0
from __future__ import unicode_literals
   def __enter__ ( self ) :
 @ stringfilter
           try :
 reloader ( wrapped_main_func , args , kwargs )
 clean = lambda self , x : len ( x )
  return Truncator ( value ) . chars ( length , html = True )
 if mem_args in cache :
  else :
              questioner = InteractiveMigrationQuestioner ( )
  def readlines ( self ) :
  def add_arguments ( self , parser ) :
                  if register_to :
  from django import http
 link_prev [ NEXT ] = link_next
                      raise NoReverseMatch (  "%s is not a registered namespace inside '%s'" %  ( key , ':' . join ( resolved_path ) ) )
                  opt_label = option [ 0 ]
           value = timezone . normalize ( value )
                  if attr in flags :
   _active = local ( )
 def __wrapper__ ( * args , ** kw ) :
  width = property ( _get_width )
  else :
          if self . negated :
   def __repr__ ( self ) :
          data = conditional_escape ( arg ) . join ( value )
          six . reraise ( ValueError , ValueError ( "%r is not a valid date" % date ) , sys . exc_info ( ) [ 2 ] )
  if not hasattr ( values , '__len__' ) :
 return ''
    base2 = BaseConverter ( BASE2_ALPHABET )
   try :
              MIMEText . __init__ ( self , text , subtype , charset )
  _MovedItems . _moved_attributes = _moved_attributes
import logging
  warnings . warn ( "django.utils.unittest will be removed in Django 1.9." ,  RemovedInDjango19Warning , stacklevel = 2 )
                          raise
              self . xml . addQuickElement ( "None" )
          return
  from django . core . mail . backends . base import BaseEmailBackend
          super ( DebugParser , self ) . __init__ ( lexer )
                          errors . append ( field . error_messages [ 'incomplete' ] )
                  if self . verbosity >= 2 :
          if hasattr ( self , 'error_dict' ) :
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to create SQL for. Defaults to the '  '"default" database.' )
          return int ( str ( value ) [ - arg ] )
 self . set ( key , new_value , version = version )
   def serialize ( self ) :
   return False
          result = super ( ChoiceField , self ) . __deepcopy__ ( memo )
 content_type = info . get ( 'content-type' )
   def dictConfig ( config ) :
          if o in opt_dict :
          parser . add_argument ( 'args' , metavar = 'table_name' , nargs = '*' ,  help = 'Optional table names. Otherwise, settings.CACHES is used to '  'find cache tables.' )
          if path . startswith ( ( 'http://' , 'https://' , '/' ) ) :
                      new_result . append ( item + i_item )
  elif isinstance ( value , datetime . date ) :
     def has_error ( self , field , code = None ) :
          return self . attrs . get ( 'id' , '' )
     class HttpResponse ( HttpResponseBase ) :
     class LocalTimezone ( ReferenceLocalTimezone ) :
  return patterns
 field_list = [ ]
      error_class = TemplateSyntaxError
   def gen_filenames ( only_new = False ) :
   def _get_count ( self ) :
      string_types = basestring ,
           raw_query_string = get_bytes_from_wsgi ( self . environ , 'QUERY_STRING' , '' )
              new_name = '%sfield' % new_name
      def __init__ ( self , display_name , loader , name , dirs ) :
 if file_obj :
   @ property
 for k , v in defaults . items ( ) :
     class Context ( BaseContext ) :
              return 'nd'
    if url :
           class X ( object ) :
                          continue
  args_check = staticmethod ( args_check )
              handler . startElement ( "author" , { } )
   cache = _create_cache ( alias )
              field_list . append ( ( f . name , formfield ) )
      return _trans . get_language_from_path ( path )
 self . _table = table
  problem_fields = [  field  for model in apps . get_models ( ** kwargs )  if app_configs is None or model . _meta . app_config in app_configs  for field in model . _meta . local_fields  if isinstance ( field , models . BooleanField ) and not field . has_default ( )  ]
  elif isinstance ( timezone , six . string_types ) and pytz is not None :
 self . setFeature ( handler . feature_external_ges , False )
                  if e . errno == errno . EEXIST :
 return '%s-%s-%s GMT' % ( rfcdate [ : 7 ] , rfcdate [ 8 : 11 ] , rfcdate [ 12 : 25 ] )
   except TypeError :
              if not isinstance ( initial , list ) :
 if date is not None :
           pass
 return SsiNode ( filepath , parsed )
  from django . utils import six
 prefix = d [ 'prefix' ]
          wsgi_opts = {  'maxSpare' : int ( options [ "maxspare" ] ) ,  'minSpare' : int ( options [ "minspare" ] ) ,  'maxThreads' : int ( options [ "maxchildren" ] ) ,  }
   def _has_changed ( self , initial , data ) :
          if options [ "daemonize" ] . lower ( ) in ( 'true' , 'yes' , 't' ) :
 return force_text ( iri_to_uri ( value ) )
 key += kwd_mark
  else :
  data = self . _prepare_data ( data )
          if options . get ( 'list_tags' ) :
          return PALETTES [ DEFAULT_PALETTE ]
       def __init__ ( self ) :
              for format in self . input_formats :
                   return False
              db = router . db_for_write ( self . cache_model_class )
              return
  __all__ = (  'Media' , 'MediaDefiningClass' , 'Widget' , 'TextInput' ,  'EmailInput' , 'URLInput' , 'NumberInput' , 'PasswordInput' ,  'HiddenInput' , 'MultipleHiddenInput' , 'ClearableFileInput' ,  'FileInput' , 'DateInput' , 'DateTimeInput' , 'TimeInput' , 'Textarea' , 'CheckboxInput' ,  'Select' , 'NullBooleanSelect' , 'SelectMultiple' , 'RadioSelect' ,  'CheckboxSelectMultiple' , 'MultiWidget' ,  'SplitDateTimeWidget' , 'SplitHiddenDateTimeWidget' ,  )
              value = ''
 if not ip_str . lower ( ) . startswith ( '0000:0000:0000:0000:0000:ffff:' ) :
              continue
                   import_string ( backend )
          parser . add_argument ( 'args' , metavar = 'app_label' , nargs = '+' ,  help = 'One or more application label.' )
              handler . addQuickElement ( 'updated' , rfc3339_date ( item [ 'updateddate' ] ) )
 return self . data . year
  if isinstance ( source , NonCapture ) :
              self . error_class = 'errorlist'
   if hasattr ( mw_instance , 'process_request' ) :
 ASCTIME_DATE = re . compile ( r'^\w{3} %s %s %s %s$' % ( __M , __D2 , __T , __Y ) )
   from django . core . validators import EMPTY_VALUES
              raise DisallowedRedirect ( "Unsafe redirect to URL with protocol '%s'" % parsed . scheme )
  return name . replace ( '_' , ' ' ) . capitalize ( )
 default_validators = [ ]
 self . to_field_name = to_field_name
  new_value = value + delta
   if formfield_callback is None :
   class Page ( collections . Sequence ) :
   def parse_file_upload ( self , META , post_data ) :
   def resolve_context ( self , context ) :
      @ decorator
      return compiled_parent . _render ( context )
 if not self . use_natural_primary_keys or not hasattr ( obj , 'natural_key' ) :
 assert match , 'unexpected call to parse_starttag()'
  if not locale_dir :
 return _i18n_cache_key_suffix ( request , cache_key )
                          out . write ( ' _(%s) ' % cmatch )
    def ugettext ( message ) :
          value = tuple . __getitem__ ( self , key )
 if isinstance ( rhs , SafeText ) :
 self . xml . endDocument ( )
    return msg
 for name in pattern . reverse_dict :
 comment_notes . extend ( notes )
  else :
              self . addr = ''
          return False
          s . feed ( value )
  kw = dict ( ( k , int ( v ) ) for k , v in six . iteritems ( kw ) if v is not None )
 super ( IncludeNode , self ) . __init__ ( * args , ** kwargs )
    try :
 raise NotImplementedError ( 'Subclasses must implement this method.' )
              priority = 1.0
  import StringIO
  return errors
  new_name = '%s_%d' % ( new_name , num )
  if not dictionary :
              self . error ( self . cmd . missing_args_message )
 self . command_stack = [ ]
              self . addr = '::1' if self . use_ipv6 else '127.0.0.1'
 self . __dict__ [ '_setupfunc' ] = func
 if not self . activated :
  else :
    class LazyObject ( object ) :
    else :
       def __init__ ( self , _subtype = 'mixed' , boundary = None , _subparts = None , encoding = None , ** _params ) :
              if self . use_natural_foreign_keys and hasattr ( field . rel . to , 'natural_key' ) :
          if not hasattr ( self , '_dimensions_cache' ) :
              pass
   except StandardError as e :
 file_pos = file . tell ( )
   def __iter__ ( self ) :
 if hasattr ( rel_model , 'natural_key' ) and rel_model != model :
  else :
 changed = False
  def __init__ ( self , max_value = None , min_value = None , max_digits = None , decimal_places = None , * args , ** kwargs ) :
   @ deconstructible
                  digit = x % len ( to_digits )
                   def wrapper ( * args , ** kwds ) :
 match = time_re . match ( value )
     class PyLibMCCache ( BaseMemcachedCache ) :
          return Field . validate ( self , value )
   def _clean_fields ( self ) :
   else :
              self . status_code = status
   def handle ( self , ** options ) :
    except OSError :
 with self . _lock . reader ( ) :
                  logger . addHandler ( self . config [ 'handlers' ] [ h ] )
              return [ ]
   def get ( self , key , default = None , version = None ) :
 pass
 additional_headers = [ newheader for newheader in newheaders  if newheader . lower ( ) not in existing_headers ]
      def __init__ ( self , media = None , ** kwargs ) :
 if categories :
 remaining -= len ( emitting )
    def prefix ( bp , func ) :
    if not _cookie_allows_colon_in_names :
   elif name in lib . filters :
                  exclude . append ( f . name )
   def lex ( self , text ) :
 def COOKIES ( self ) :
 pass
  singular_suffix , plural_suffix = bits [ : 2 ]
 return '%s(%s)' % ( self . __class__ . __name__ , dictreprs )
   to_delete = set ( )
              form . fields [ DELETION_FIELD_NAME ] = BooleanField ( label = _ ( 'Delete' ) , required = False )
      class IfEqualNode ( Node ) :
  else :
                  return result [ 0 ] , result [ 1 ]
 if decompress :
 if data [ last : last + 1 ] == b'\r' :
        def compare_ordering_key ( k ) :
 self . timezone = None
  _ , rest = token . contents . split ( None , 1 )
   def copy ( self ) :
              checks = self . registered_checks
  safe_input = isinstance ( text , SafeData )
          exp = Decimal ( 1 )
  try :
                          if self . match is None or self . match_re . search ( f ) :
    def tzname ( self , dt ) :
  now = now . replace ( microsecond = 0 )
 from django . template . base import Origin , Template , Context , TemplateDoesNotExist
    if hasattr ( data , 'temporary_file_path' ) :
          results [ predicate ( item ) ] . append ( item )
          if instance is not None :
 output = localize ( output , use_l10n = context . use_l10n )
 from django . utils . encoding import force_bytes
 def autoescape ( parser , token ) :
              return 0
                  w = self . choice_input_class ( self . name , self . value ,  self . attrs . copy ( ) , choice , i )
   except ( ValueError , TypeError ) :
                      old_handler = signal . signal ( signal . SIGTTOU , signal . SIG_IGN )
          wsgi_opts [ 'bindAddress' ] = options [ "socket" ]
 parser = parser_class ( lexer . tokenize ( ) )
 warnings . warn ( "'get_cache' is deprecated in favor of 'caches'." ,  RemovedInDjango19Warning , stacklevel = 2 )
 call_command (  'runserver' ,  addrport = options [ 'addrport' ] ,  shutdown_message = shutdown_message ,  use_reloader = False ,  use_ipv6 = options [ 'use_ipv6' ] ,  use_threading = use_threading  )
 defaults = { 'data' : data , 'files' : files , 'auto_id' : auto_id , 'prefix' : prefix }
 sql_files . append ( os . path . join ( app_dir , "%s.sql" % opts . model_name ) )
   elif cwords [ 0 ] in ( 'dumpdata' , 'sql' , 'sqlall' , 'sqlclear' ,  'sqlcustom' , 'sqlindexes' , 'sqlsequencereset' , 'test' ) :
 from django . core . serializers import base
 sortable_virtual_fields = [ f for f in opts . virtual_fields  if isinstance ( f , ModelField ) ]
  try :
                  return language [ : p ] . lower ( ) + '_' + language [ p + 1 ] . upper ( ) + language [ p + 2 : ] . lower ( )
 from importlib import import_module
   def flatten ( self ) :
  WEEKDAYS_ABBR = {  0 : _ ( 'Mon' ) , 1 : _ ( 'Tue' ) , 2 : _ ( 'Wed' ) , 3 : _ ( 'Thu' ) , 4 : _ ( 'Fri' ) ,  5 : _ ( 'Sat' ) , 6 : _ ( 'Sun' )  }
   def _should_delete_form ( self , form ) :
 self . make_writeable ( new_path )
   class MLStripper ( HTMLParser ) :
              curr = cwords [ cword - 1 ]
 expires = row [ 2 ]
     def get_image_dimensions ( file_or_path , close = False ) :
              label_for = format_html ( ' for="{0}"' , self . id_for_label )
 return hashlib . pbkdf2_hmac (  digest ( ) . name , password , salt , iterations , dklen )
   @ classmethod
  return func ( self . _wrapped , * args )
  del attr
     if not url_info . netloc and url_info . scheme :
               raise NotImplementedError (  "Subclasses of AppCommand must provide"  "a handle_app_config() method." )
  except Exception as e :
 self . choices = choices
              return '%s_month' % id_
   def render_node ( self , node , context ) :
          return tag in self . tags_available ( )
   logger . error ( 'Internal Server Error: %s' , request . path ,  exc_info = exc_info ,  extra = {  'status_code' : 500 ,  'request' : request  }  )
  return [  Warning (  "BooleanField does not have a default value." ,  hint = ( "Django 1.6 changed the default value of BooleanField from False to None. "  "See https://docs.djangoproject.com/en/1.6/ref/models/fields/#booleanfield "  "for more information." ) ,  obj = field ,  id = '1_6.W002' ,  )  for field in problem_fields  ]
   def open ( self , mode = None ) :
 exclude = options . get ( 'exclude' )
  return data . get ( name , None )
   if not new_method and old_method :
   if serializers is None :
    return field_type , field_params , field_notes
   def _fd ( f ) :
  elif not isinstance ( sep , str ) :
 use_reloader = options . get ( 'use_reloader' )
 text = force_text ( text )
 yield "# You'll have to do the following manually to clean this up:"
  from . . import Warning , register , Tags
                           non_capturing_groups . append ( len ( result ) )
 notifier . check_events ( timeout = None )
 from decimal import Decimal
                      continue
          return False
              return False
 from django . utils import six
      lbp = 0
 __unicode__ = new_method_proxy ( unicode )
          return bool ( self . name )
 handler . addQuickElement ( "link" , item [ 'link' ] )
   update_wrapper ( _dec , decorator , assigned = available_attrs ( decorator ) )
 import sys
              return func ( * args , ** kwargs )
  encoding = self . _encoding
   for middleware_method in self . _view_middleware :
   def has_previous ( self ) :
                      cache . clear ( )
 import unicodedata
 try :
          return is_library_missing ( path )
          warnings . warn ( "IPAddressField has been deprecated. Use GenericIPAddressField instead." ,  RemovedInDjango19Warning )
              raise ValidationError ( self . message , code = self . code )
       handlers = config . get ( 'handlers' , EMPTY_DICT )
  for alternative in self . alternatives :
  WEEKDAYS = {  0 : _ ( 'Monday' ) , 1 : _ ( 'Tuesday' ) , 2 : _ ( 'Wednesday' ) , 3 : _ ( 'Thursday' ) , 4 : _ ( 'Friday' ) ,  5 : _ ( 'Saturday' ) , 6 : _ ( 'Sunday' )  }
  if self . translate :
    def timeuntil ( d , now = None ) :
          for closable in self . _closable_objects :
  list_length = len ( list_ )
                      raise CommandError ( '"%s" is not a valid IPv6 address.' % self . addr )
          key = self . make_key ( key , version = version )
          super ( ComboField , self ) . __init__ ( * args , ** kwargs )
              if hasattr ( base , 'declared_fields' ) :
   def end_serialization ( self ) :
                  self . literal = mark_safe ( unescape_string_literal ( var ) )
          key = self . make_key ( key , version = version )
 sign = '-' if seconds < 0 else '+'
 from django . db import models
                  return
      child_nodelists = ( 'nodelist_true' , 'nodelist_false' )
    class DeclarativeFieldsMetaclass ( MediaDefiningClass ) :
  except UnicodeDecodeError :
 show_traceback = options . get ( 'traceback' )
  except KeyError :
 if isinstance ( server , six . string_types ) :
     class EndToken ( TokenBase ) :
          if not hasattr ( self , '_files' ) :
   def get_host ( self ) :
  return self . _fqdn
  return self . __cast ( ) < other
          if not ext . startswith ( '.' ) :
    try :
 host = host [ : - 1 ] if host . endswith ( '.' ) else host
  if i > sys . maxint :
          mail . attach_alternative ( html_message , 'text/html' )
                      try :
  self . choices = choices
  def __init__ ( self , subject = '' , body = '' , from_email = None , to = None , bcc = None ,  connection = None , attachments = None , headers = None , cc = None ) :
              yield 'year'
   def values ( self ) :
              break
   def __delitem__ ( self , header ) :
 def scheme ( self ) :
  elif self . fixture_object_count == self . loaded_object_count :
    def writer_enters ( self ) :
              return '(NOT (%s: %s))' % ( self . connector , ', ' . join ( [ str ( c ) for c  in self . children ] ) )
              if level not in logging . _levelNames :
  except _BASE64_DECODE_ERROR :
 del cmd_options [ 'args' ]
                  week_number = 52
 from django . utils . translation import get_language , to_locale , check_for_language
  except DatabaseError as e :
              raise CommandError ( "Cannot find a migration matching '%s' from app '%s'. Is it in INSTALLED_APPS?" % (  migration_name , app_label ) )
    result = [ ]
      def __str__ ( self ) :
   def clean ( self , value ) :
 _func_globals = "func_globals"
  try :
 if not self . connection :
  defaults . update ( kwargs )
                              out . write ( ' pgettext(%r, %r) ' % (  message_context ,  join_tokens ( singular , trimmed ) ) )
              name = getattr ( file , 'name' , None )
 proxy = lazy ( func , resultclass ) ( ** kwargs )
 return self
  update_wrapper ( _wrapper , dummy )
  form . fields [ self . _pk_field . name ] = ModelChoiceField ( qs , initial = pk_value , required = False , widget = widget )
  import hashlib
 parser . delete_first_token ( )
 if 'id' in self . attrs :
  try :
                              out . write ( blankout ( part , 'P' ) )
 self . can_read = threading . Semaphore ( 0 )
 for attr in _urllib_error_moved_attributes :
 class StopUpload ( UploadFileException ) :
                  response = debug . technical_404_response ( request , e )
  s = subject [ p : i ]
          if data in self . empty_values :
   nodelist_true_output = None
     return errors
 return [ "" ,  "    class Meta:" ,  "        managed = False" ,  "        db_table = '%s'" % table_name ]
          value = ugettext ( "%s TB" ) % filesize_number_format ( bytes / TB )
   def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
  last = pos + 1
                  for model in model_list :
 if attrs is None :
          signature = base64_hmac ( self . salt + 'signer' , value , self . key )
   def end_serialization ( self ) :
                   best_doublecolon_len = doublecolon_len
  touch_import ( 'django.utils.encoding' , 'python_2_unicode_compatible' , decorated )
 return
 bits = bits [ : - 2 ]
 parts = 2 if version [ 2 ] == 0 else 3
              if six . PY2 :
                      block = self
                tok = '"REGEX"'
     def parse_datetime ( value ) :
 from django . utils . deprecation import RemovedInDjango20Warning
  except AttributeError :
 from django . utils . safestring import mark_safe
      NamedTemporaryFile = tempfile . NamedTemporaryFile
                  if self . require_all_fields :
 from django . forms . formsets import *
 for i , handler in enumerate ( self . _upload_handlers ) :
  def __init__ ( self , * args , ** kwargs ) :
 if hasattr ( out , 'isatty' ) and out . isatty ( ) :
 return FormSet
                  break
      allow_multiple_selected = False
              return path . split ( '/' , 1 )
   def top ( self ) :
      help = "Prints the DROP TABLE SQL statements for the given app name(s)."
          raise ValueError ( "Negative base36 conversion input." )
  if arg < 1 :
                          continue
              self . mod = old
          value = force_text ( value )
   for relobj in getattr ( obj , field . name ) . iterator ( ) :
  text_args = [ force_text ( v ) for v in args ]
   def is_valid ( self ) :
              raise AttributeError ( "You cannot set the upload handlers after the upload has been processed." )
  t = getattr ( _active , "value" , None )
 value . configurator = self
    Field . __init__ ( self , required , widget , label , initial , help_text ,  * args , ** kwargs )
 time_str = date . strftime ( '%Y-%m-%dT%H:%M:%S' )
                          logger . level = logging . NOTSET
                  raise
                  continue
              handler . addQuickElement ( "category" , cat )
     class Widget ( six . with_metaclass ( MediaDefiningClass ) ) :
 root [ KEY ] = root [ RESULT ] = None
 __D = r'(?P<day>\d{2})'
 return value . ljust ( int ( arg ) )
 import time
  else :
          return t . render ( context_instance )
 for field in self . fields . values ( ) :
    class SsiNode ( Node ) :
   if not changed :
        def close ( self ) :
          return self . as_table ( )
  values = {  name : var . resolve ( context )  for name , var in six . iteritems ( self . extra_context )  }
      widget = NumberInput
 for v in self . validators :
 try :
  elif auto_id :
 if dirname and not os . path . exists ( dirname ) :
  def __init__ ( self , name , value , attrs , choice , index ) :
          return None
  view_name = self . view_name . resolve ( context )
  renamed_methods = ( )
                      context [ self . loopvars [ 0 ] ] = item
   def get_fqdn ( self ) :
 def now ( parser , token ) :
 try :
        try :
          boundarystream = InterBoundaryIter ( self . _stream , self . _separator )
                  bits = token . split_contents ( ) [ 1 : ]
                  callback = pattern . _callback
          return False
 if callable ( self . limit_choices_to ) :
          key = self . make_key ( key , version = version )
                  raise
          arg = ugettext ( 'yes,no,maybe' )
  except Exception :
  candidate_subs = dict ( zip ( prefix_args + params , text_args ) )
   def is_silenced ( self ) :
 def title ( value ) :
   get_method_function = operator . attrgetter ( _meth_func )
 dir_name , file_name = os . path . split ( name )
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
 _cookie_allows_colon_in_names = True
                  if field . serialize :
   def __repr__ ( self ) :
              locales = all_locales
 def encoding ( self , value ) :
  else :
                   field_notes . append ( "Field renamed because it contained more than one '_' in a row." )
 i += 1
   if logging_config :
                          self . setlistdefault ( key ) . append ( value )
 import re
 if len ( bits ) >= 4 and bits [ - 2 ] == "from" :
                  return False
    @ register . filter ( is_safe = True , needs_autoescape = True )
 if len ( bits ) not in ( 2 , 3 ) :
  else :
 raise NotImplementedError ( 'subclasses of Serializer must provide an handle_fk_field() method' )
                      raise CommandError (  "errors happened while running msgmerge\n%s" % errors )
 from django . utils import six
 from django . utils import translation
  __all__ = [  'SimpleCookie' , 'parse_cookie' , 'HttpRequest' , 'QueryDict' ,  'RawPostDataException' , 'UnreadablePostError' , 'build_request_repr' ,  'HttpResponse' , 'StreamingHttpResponse' , 'HttpResponseRedirect' ,  'HttpResponsePermanentRedirect' , 'HttpResponseNotModified' ,  'HttpResponseBadRequest' , 'HttpResponseForbidden' , 'HttpResponseNotFound' ,  'HttpResponseNotAllowed' , 'HttpResponseGone' , 'HttpResponseServerError' ,  'Http404' , 'BadHeaderError' , 'fix_location_header' , 'JsonResponse' ,  'conditional_content_removal' ,  ]
 parser . add_argument ( '--no-initial-data' , action = 'store_false' ,  dest = 'load_initial_data' , default = True ,  help = 'Tells Django not to load any initial data after database synchronization.' )
                        start = non_capturing_groups . pop ( )
          return '%s-%s' % ( self . prefix , index )
   self . fields = fields
              handler . addQuickElement ( "description" , item [ 'description' ] )
    return value
    @ register . tag
  count = property ( _get_count )
                  if k [ 1 ] is None :
          return False
 from django . utils . deprecation import RemovedInDjango19Warning
 if not self . _is_rendered :
          ch , escaped = next ( pattern_iter )
    class Serializer ( object ) :
 if not os . path . isfile ( init_path ) :
 value = normalize_newlines ( value )
              self . address_family = socket . AF_INET6
              output . insert ( 0 , error_row % force_text ( top_errors ) )
  current = getattr ( current , bit )
 trimmed = False
 if git_changeset :
                   opts = model . _meta
   self . check ( app_configs = app_configs , tags = tags , display_num_errors = True )
  return result
 _locks = { }
 left = t . nud ( self )
                      continue
 if categories :
   finally :
 return str ( '%s%s%s' ) % ( value , self . sep , self . signature ( value ) )
   def dst ( self , dt ) :
  if self . localize :
 unifunc . replace ( strfunc )
   def tags_available ( self ) :
   finally :
                  if not lookup :
 if value is None :
 return obj
          raise TemplateSyntaxError ( "'autoescape' tag requires exactly one argument." )
  if not self . allow_empty_file and not file_size :
   class FixUnicode ( fixer_base . BaseFix ) :
 try :
  return context_extras
  except ( OSError , TypeError ) :
    @ register . filter ( is_safe = True , needs_autoescape = True )
 min = int ( m . group ( 'min' ) )
  end_tag = 'end' + bits [ 0 ]
   def render_js ( self ) :
  from django . core . management . base import AppCommand
    UNKNOWN_SOURCE = '<unknown source>'
 if year < 100 :
 return self . id in settings . SILENCED_SYSTEM_CHECKS
  except LookupError :
  import datetime
  try :
          if self . verbosity >= 1 :
                              data = base64 . b64decode ( raw_data )
  def next_space_index ( subject , i ) :
                       unhandled_params . pop ( 0 )
 if html_message :
 add_to_builtins ( 'django.template.loader_tags' )
              return super ( LocalTimezone , self ) . _isdst ( dt )
          self . takes_context = takes_context
                  raise EmptyPage ( 'That page contains no results' )
              r = o . isoformat ( )
 self . obj = obj
  def copy ( self ) :
 return tpl . format ( self . name , self . sysid , self . pubid )
   def __repr__ ( self ) :
          kwargs [ 'safe' ] = safe
  return force_text ( widget . render ( name , self . value ( ) , attrs = attrs ) )
  try :
 self . _dimensions_cache = get_image_dimensions ( self , close = close )
              msg [ 'Cc' ] = ', ' . join ( self . cc )
    new_modules = module_values - _cached_modules
                  j = day_of_year + ( 7 - weekday ) + ( jan1_weekday - 1 )
  t = getattr ( _active , "value" , None )
  nodelist = [ ]
 from __future__ import unicode_literals
                    self . children . append ( data )
      def getInnerText ( node ) :
  self . __language = language
              signals . got_request_exception . send ( sender = self . __class__ , request = request )
    @ register . tag ( 'extends' )
  nodelist = self . create_nodelist ( )
 if fd >= 0 :
 from django . conf import settings
          self . config = ConvertingDict ( config )
              nodelist = getattr ( self , attr , None )
          choices = ( ( '1' , ugettext_lazy ( 'Unknown' ) ) ,  ( '2' , ugettext_lazy ( 'Yes' ) ) ,  ( '3' , ugettext_lazy ( 'No' ) ) )
 from django . core . exceptions import AppRegistryNotReady
                  os . makedirs ( self . file_path )
              raise ValueError ( "attempted relative import beyond top-level package" )
 from django . utils . encoding import python_2_unicode_compatible
              raise ValueError ( 'must define at least one ordering operation: < > <= >=' )
                  opfunc . __name__ = opname
 field_params [ 'decimal_places' ] = row [ 5 ]
     def formset_factory ( form , formset = BaseFormSet , extra = 1 , can_order = False ,  can_delete = False , max_num = None , validate_max = False ,  min_num = None , validate_min = False ) :
 node = CycleNode ( values )
                              invalid_var_format_string = '%s' in settings . TEMPLATE_STRING_IF_INVALID
 from django . views import debug
 new_operations = optimizer . optimize ( operations , migration . app_label )
 setattr ( obj , self . fk . get_attname ( ) , getattr ( pk_value , 'pk' , pk_value ) )
      widget = Select
   def __repr__ ( self ) :
          if not isinstance ( i , six . integer_types ) :
              return Media ( ** { str ( name ) : getattr ( self , '_' + name ) } )
   else :
              digest = hashlib . sha256
                      biggest_number = 1
 self . xml . startElement ( "field" , {  "name" : field . name ,  "rel" : field . rel . __class__ . __name__ ,  "to" : smart_text ( field . rel . to . _meta ) ,  } )
     kwargs [ 'stream' ] = None
  if help_texts and f . name in help_texts :
  self . _callback_strs . update ( pattern . _callback_strs )
 value . configurator = self
  factory = c
 if kwargs [ 'setting' ] in ( 'LANGUAGES' , 'LANGUAGE_CODE' ) :
          try :
 parser . add_argument ( '--ignorenonexistent' , '-i' , action = 'store_true' ,  dest = 'ignore' , default = False ,  help = 'Ignores entries in the serialized data for fields that do not '  'currently exist on the model.' )
   message = "%s\n\nRequest repr(): %s" % ( self . format ( record ) , request_repr )
  except Exception as e :
 return value . strftime ( format )
 from django . forms . widgets import HiddenInput
              self . _cull ( )
     @ register . filter ( is_safe = False )
      pass
 format = force_str ( default or get_format ( 'DATETIME_INPUT_FORMATS' ) [ 0 ] )
 from django . utils . encoding import force_text
   name = self . timezone . tzname ( self . data ) if self . timezone else None
 pass
 app_dir = apps . get_app_config ( model . _meta . app_label ) . path
 base_subdir = '%s_template' % app_or_project
    from django . core . servers . basehttp import get_internal_wsgi_application
   if not args :
                      if use_base_manager :
  if not self . invoked_for_django :
 from django . utils import six
 for field , messages in message . items ( ) :
 opfunc . __doc__ = getattr ( int , opname ) . __doc__
 def __init__ ( self , argv = None ) :
   def camel_case_to_spaces ( value ) :
              response_headers . append ( ( str ( 'Set-Cookie' ) , str ( c . output ( header = '' ) ) ) )
                                      for sql in custom_sql :
 import binascii
         def total_ordering ( cls ) :
 class dummy :
              pass
   def __deepcopy__ ( self , memo ) :
                       urlconf = request . urlconf
                  os . remove ( tmp_path )
  _js_escapes = {  ord ( '\\' ) : '\\u005C' ,  ord ( '\'' ) : '\\u0027' ,  ord ( '"' ) : '\\u0022' ,  ord ( '>' ) : '\\u003E' ,  ord ( '<' ) : '\\u003C' ,  ord ( '&' ) : '\\u0026' ,  ord ( '=' ) : '\\u003D' ,  ord ( '-' ) : '\\u002D' ,  ord ( ';' ) : '\\u003B' ,  ord ( '\u2028' ) : '\\u2028' ,  ord ( '\u2029' ) : '\\u2029'  }
      return getattr ( self , _assertRaisesRegex ) ( * args , ** kwargs )
  else :
   def render ( self , context ) :
  shown . add ( plan_node )
  self . fields = fields
 from django . core . exceptions import ImproperlyConfigured , ViewDoesNotExist
   if pos >= last :
                   def render ( self , context ) :
  else :
    conflicts = loader . detect_conflicts ( )
  return media
              rawdata = self . rawdata
 self . waiting_readers = 0
                      self . stdout . write ( self . style . MIGRATE_SUCCESS ( " OK" ) )
 return django . get_version ( )
 TOKEN_MAPPING = {  TOKEN_TEXT : 'Text' ,  TOKEN_VAR : 'Var' ,  TOKEN_BLOCK : 'Block' ,  TOKEN_COMMENT : 'Comment' ,  }
                      model = apps . get_model ( exclude )
   if new_name [ 0 ] . isdigit ( ) :
 def divisibleby ( value , arg ) :
  except AttributeError :
   if msg :
 from django . core . mail . message import (  EmailMessage , EmailMultiAlternatives ,  SafeMIMEText , SafeMIMEMultipart ,  DEFAULT_ATTACHMENT_MIME_TYPE , make_msgid ,  BadHeaderError , forbid_multi_line_headers )
 for key in self . bad_cookies :
              if text [ 0 ] in 'xX' :
                      if not self . _is_expired ( f ) :
   value = self . get ( key , version = version )
  for field_name in self . fields :
 plist . append ( f . strip ( ) )
          self . filter_expression = filter_expression
   @ cached_property
 FormSet = modelformset_factory ( model , ** kwargs )
                      temp_lib . tags [ name ] = lib . tags [ name ]
  elif isinstance ( o , datetime . time ) :
    DEBUG = 10
  expanded_template = path . expanduser ( template )
   return metaclass ( 'temporary_class' , None , { } )
 def cut ( value , arg ) :
          return self . loader ( self . loadname , self . dirs ) [ 0 ]
 s = s . encode ( 'utf-8' )
          t = s . split ( '=' , 1 )
 return self . pointer < len ( self . subject )
     def to_language ( locale ) :
 return func
          _templatetags_modules = [ ]
  elif _locs_ is None :
   else :
          full_path = self . path ( name )
 if isinstance ( stream_or_string , bytes ) :
    elif field . rel and isinstance ( field . rel , models . ManyToOneRel ) :
 if ':' not in template :
                  serializers . get_serializer ( format )
  streaming = False
  except HTMLParseError :
    @ register . filter ( is_safe = False )
                                result [ - 1 ] = Choice ( [ None , result [ - 1 ] ] )
  if value is not result :
 try :
               tables = connection . introspection . table_names ( cursor )
          if value is None :
      def filter ( self , record ) :
   path , module = name . rsplit ( '.' , 1 )
   def __str__ ( self ) :
 import warnings
      renderer = None
 if isinstance ( obj , models . signals . ModelSignal ) :
          self . STDOFFSET = timedelta ( seconds = - _time . timezone )
 self . config . configurator = self
          pass
                  return
              self . _deleted_form_indexes = [ ]
          super ( CheckboxChoiceInput , self ) . __init__ ( * args , ** kwargs )
   def Y ( self ) :
  else :
          self . _assert_mutable ( )
    def ensure_echo_on ( ) :
  else :
 import re
              self . _request = datastructures . MergeDict ( self . POST , self . GET )
              self . inner_run ( None , ** options )
 from django . utils import six
              raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
 parser . delete_first_token ( )
          if isinstance ( settings . TIME_ZONE , six . string_types ) and pytz is not None :
   return avoid_wrapping ( value )
 for post_callback in self . _post_render_callbacks :
          warnings . warn ( "Custom SQL location '<app_label>/models/sql' is "  "deprecated, use '<app_label>/sql' instead." ,  RemovedInDjango19Warning )
   def tell ( self ) :
                  i += 1
 options = [ ( '--help' , None ) ]
 var_obj = None
          cc = { }
  except AttributeError :
 if color_settings :
 is_localized = False
              raise TemplateSyntaxError ( "Invalid filter: '%s'" % filter_name )
                  return kwargs
  name , value = match . groups ( )
              if self . fixture_count == 0 and self . hide_empty :
              return None
                  return self . nodelist_empty . render ( context )
          _default = translation ( settings . LANGUAGE_CODE )
 if _supported is None :
  len_values = len ( values )
          from django . conf import settings
 result , upto = [ ] , 0
 from django . db . migrations . loader import AmbiguityError
          super ( DTDForbidden , self ) . __init__ ( )
 dlen = len ( defaults or [ ] )
              if self . decimal_places is not None :
  def __setattr__ ( self , name , value ) :
    if item [ 'item_copyright' ] is not None :
 def cleaned_data ( self ) :
 parser . add_argument ( '--nothreading' , action = 'store_false' , dest = 'use_threading' , default = True ,  help = 'Tells Django to NOT use threading.' )
          return not settings . DEBUG
    @ deconstructible
    @ python_2_unicode_compatible
   else :
      if self . verbosity > 0 :
 if sep is not None :
              return os . path . samefile ( src , dst )
     class Error ( CheckMessage ) :
  except ValueError :
                     return b' ' . join ( [ force_bytes ( arg , encoding , strings_only ,  errors ) for arg in s ] )
                  return False
    elif isinstance ( message , list ) :
 PATTERN = """     classdef< 'class' any+ ':'               suite< any*                      funcdef< 'def' unifunc='__unicode__'                               parameters< '(' NAME ')' > any+ >                      any* > >     """
    else :
          parsed = urlparse ( force_text ( redirect_to ) )
              compare_to = None
   base64d = b64_encode ( data )
              if is_naive ( obj ) :
                  self . stdout . write ( "Installed %d object(s) from %d fixture(s)" %  ( self . loaded_object_count , self . fixture_count ) )
   def delete ( self , name ) :
 endblock_re = re . compile ( r"""^\s*endblocktrans$""" )
  else :
   formatters = config . get ( 'formatters' , EMPTY_DICT )
 __ne__ = new_method_proxy ( operator . ne )
              created_models = [ ]
              weight += 1
 validate_comma_separated_integer_list = RegexValidator ( comma_separated_int_list_re , _ ( 'Enter only digits separated by commas.' ) , 'invalid' )
  return six . unichr ( c )
  bf_errors = self . error_class ( [ conditional_escape ( error ) for error in bf . errors ] )
 exc_value . __cause__ = exc
 parser . add_argument ( '--fake' , action = 'store_true' , dest = 'fake' , default = False ,  help = 'Mark migrations as run without actually running them' )
              obj_pk = obj . _get_pk_val ( )
  else :
  def __init__ ( self , attrs = None , date_format = None , time_format = None ) :
  output . append ( '</optgroup>' )
  else :
 pluralmatch = plural_re . match ( t . contents )
  else :
 self . cookies = SimpleCookie ( self . cookies )
  return split
                  if e . errno != errno . EEXIST :
 import warnings
 super ( QueryDict , self ) . setlist ( key , list_ )
  try :
                  fields = list ( six . iteritems ( base . declared_fields ) ) + fields
  else :
              handler . addQuickElement ( "atom:link" , None ,  { "rel" : "self" , "href" : self . feed [ 'feed_url' ] } )
                           from django . core . exceptions import ImproperlyConfigured
    class Variable ( object ) :
from django . core . management . base import BaseCommand , CommandError
    def patch_vary_headers ( response , newheaders ) :
   def __init__ ( self , data = None ) :
 self . _upload_handlers = upload_handlers
      help = "Prints the DROP INDEX SQL statements for the given model module name(s)."
  if error_class is None :
 bits = token . split_contents ( )
    return settings . LANGUAGE_CODE
                  r = r [ : 23 ] + r [ 26 : ]
                      m = plural_forms_re . search ( fp . read ( ) )
 zfile = GzipFile ( mode = 'wb' , compresslevel = 6 , fileobj = zbuf )
                      parent_pat = pattern . regex . pattern
      def normalize_col_name ( self , col_name , used_column_names , is_relation ) :
 self . position = 0
 self . name = name
 directory_created = { }
   def get_backend_timeout ( self , timeout = DEFAULT_TIMEOUT ) :
     class TypedMultipleChoiceField ( MultipleChoiceField ) :
   def get_resolved_arguments ( self , context ) :
          return it . next ( )
          if data is None :
          return list ( self ) == other
              params , varargs , varkw , defaults = getargspec ( func )
  if ( i - day_of_year ) < ( 4 - weekday ) :
          return build_request_repr ( self )
  viewname = parser . compile_filter ( bits [ 1 ] )
 parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS ,  help = 'Nominates a specific database to dump fixtures from. '  'Defaults to the "default" database.' )
  res = subject [ p : i ]
  from . import Error , Tags , register
   def as_json ( self , escape_html = False ) :
                          continue
                      fp . write ( content )
 parser . add_argument ( 'migration_name' ,  help = 'Migrations will be squashed until and including this migration.' )
  finally :
          self . autoescape = autoescape
                  register_to . _registry = before_import_registry
  self . nodelist = t . nodelist
 locale = to_locale ( lang )
  table_output . append ( " " . join ( field_output ) )
 from django . conf import settings
     class RadioSelect ( RendererMixin , Select ) :
 super ( QueryDict , self ) . clear ( )
          handler . addQuickElement ( "title" , item [ 'title' ] )
              return fastcgi_help ( "ERROR: Invalid option for daemonize "  "parameter." )
   def u ( s ) :
          from django . core . mail import get_connection
  else :
              return True
   return False
 parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS , help = 'Nominates a database to synchronize. '  'Defaults to the "default" database.' )
 from django . utils import autoreload
 cache [ key ] = oldroot
  def write ( self , outfile , encoding ) :
 from django . utils . module_loading import import_string
                      return False
 with context . push ( ** values ) :
              doublecolon_len = 0
              if status != STATUS_OK :
                          initial_value = initial_value ( )
   delta = 2000 - year
 loop_dict [ 'counter' ] = i + 1
                      if set ( kwargs . keys ( ) ) | set ( defaults . keys ( ) ) != set ( params ) | set ( defaults . keys ( ) ) | set ( prefix_args ) :
 inhibit_post_migrate = options . get ( 'inhibit_post_migrate' , False )
 self . indent ( 0 )
 if keys :
   self . tokens = mapped_tokens
                            field_type , field_params , field_notes = self . get_field_type ( connection , table_name , row )
    default_storage = DefaultStorage ( )
          raise TypeError ( "strftime of dates before 1900 does not handle" + illegal_formatting . group ( 0 ) )
   def complain ( self , * wargs , ** kwargs ) :
 from django . core . management . base import BaseCommand , CommandError
              result [ i ] += piece
                  self . default_locale_path = self . locale_paths [ 0 ]
 self . _post_parse_error = False
  with context . push ( var = output ) :
  except AppRegistryNotReady :
  self . xml . startElement ( "object" , { } )
 self . active_readers = 0
              raise StopIteration ( )
 import zlib
 bottom = ( number - 1 ) * self . per_page
  else :
 from threading import Lock
 if subcommand_cls . use_argparse :
  else :
     parent = ( object , )
              file = tempfile . NamedTemporaryFile ( suffix = '.upload' )
 self . _post_parse_error = True
   else :
          try :
 parser . add_argument ( '--empty' , action = 'store_true' , dest = 'empty' , default = False ,  help = "Create an empty migration." )
          if options [ 'verbosity' ] > 0 :
          if name == 'regex' :
   except IOError :
  value_converters = {  'ext' : 'ext_convert' ,  'cfg' : 'cfg_convert' ,  }
     class ConvertingList ( list ) :
 self . __to_language = to_language ( language )
     _translations = { }
  for sql_file in sql_files :
       check_for_migrations ( app_config , connection )
 from django . utils . timezone import get_current_timezone_name
                   result . append ( ch )
 if timeout is not None :
 if cache is None :
  def close ( self ) :
 if not etags :
  from django . conf import settings
   choices = property ( _get_choices , _set_choices )
              related = getattr ( obj , field . name )
                  pass
  from django . utils . encoding import force_text
                  continue
              return list ( self . itervalues ( ) )
              return None
  except TemplateSyntaxError as e :
 key = self . make_key ( key , version = version )
                   continue
  style = dummy ( )
 self . empty_permitted = empty_permitted
 if value != '' :
   def chunks ( self , chunk_size = None ) :
    for f in opts . many_to_many + opts . virtual_fields :
   def __repr__ ( self ) :
   if self . can_delete :
                                      handler . setLevel ( _checkLevel ( level ) )
                      compiled_result = compile_func ( self , token )
   def D ( self ) :
  return super ( BooleanField , self ) . to_python ( value )
    @ register . filter
  old_path = path . join ( root , filename )
  time . sleep ( 1 )
 self . host = host or settings . EMAIL_HOST
  def __getitem__ ( self , key ) :
              self . attrs = { }
 if secret is None :
 super ( EmailBackend , self ) . __init__ ( * args , ** kwargs )
   def save_new ( self , form , commit = True ) :
          raise ValueError ( "The protocol '%s' is unknown. Supported: %s"  % ( protocol , list ( ip_address_validator_map ) ) )
  from . import six
          self . encoding = charset
          super ( Command , self ) . add_arguments ( parser )
  return result
  self . use_natural_foreign_keys = options . pop ( 'use_natural_foreign_keys' , False ) or self . use_natural_keys
 global _default
from __future__ import unicode_literals
 kwargs = { 'pk_field' : True }
    def ext_convert ( self , value ) :
  lexer = lexer_class ( template_string , origin )
           if not allow_overwrite and os . access ( new_file_name , os . F_OK ) :
 output = options . get ( 'output' )
 return output
 if log in child_loggers :
  self . file_path = os . path . abspath ( self . file_path )
  except AttributeError :
              name = member . name
  else :
 try :
              del self . _post
 try :
 from django . core . serializers . base import SerializerDoesNotExist
 return force_text ( unquote ( force_str ( quoted_url ) ) )
     @ classmethod
                  self . add_filters ( logger , filters )
              self . xml . addQuickElement ( "None" )
 class EventHandler ( pyinotify . ProcessEvent ) :
 raise ValidationError ( self . error_messages [ 'max_length' ] , code = 'max_length' , params = params )
 message_context = context_match . group ( 1 )
 link_next [ PREV ] = link_prev
              @ wraps ( view_func , assigned = available_attrs ( view_func ) )
 for item in sequence :
          return value
   if recursive :
                def __wrapper__ ( self , * args , ** kw ) :
              raise PageNotAnInteger ( 'That page number is not an integer' )
 if kwargs . get ( 'localize' ) and self . widget == NumberInput :
          return ''
                  output . append ( app_output )
          lang = get_language ( )
   try :
 self . name = name
 if result :
          handler = SimplerXMLGenerator ( outfile , encoding )
 plist = _parse_header_params ( b';' + line )
 EMPTY_DICT = { }
      def __init__ ( self , value , text ) :
    daemon_kwargs = { }
              del _urlconfs . value
 clean_data = [ ]
 while 1 :
 i = 0
              raise StopIteration ( )
 self . value = set ( force_text ( v ) for v in self . value )
   def reload ( self ) :
 return getattr ( trans , real_name )
   return '' . join ( words )
              self . _done = True
 root = [ ]
 self . style_func = None
                      content = token_string [ 2 : - 2 ] . strip ( )
                   query_string = query_string . decode ( )
                  return six . text_type ( s ) . encode ( encoding )
           return False
 self . model_name = 'cacheentry'
 @ stringfilter
                      help_text = ''
 def striptags ( value ) :
  if self . parsed :
 def reset_cache ( ** kwargs ) :
          if self . save_as_new :
                  qs = qs . order_by ( self . model . _meta . pk . name )
  if options . pythonpath :
                  self . stdout . write ( "No changes detected" )
 if protocol != 'both' and unpack_ipv4 :
 security_logger . error (  force_text ( e ) ,  extra = {  'status_code' : 400 ,  'request' : request  } )
 text_type = unicode
              default_attrs . update ( attrs )
          return escape ( value )
  import copy
              self . validators . append ( validators . MinValueValidator ( min_value ) )
  token = Token ( TOKEN_BLOCK , block_content )
 request_finished = Signal ( )
  else :
      default_error_messages = {  'invalid_image' : _ ( "Upload a valid image. The file you uploaded was either not an image or a corrupted image." ) ,  }
    def number_format ( value , decimal_pos = None , use_l10n = None , force_grouping = False ) :
      Signer = import_string ( settings . SIGNING_BACKEND )
                      self . stdout . write ( "processing locale %s\n" % locale )
                  url = smart_urlquote ( middle )
  bit = ' ' . join ( trans_bit )
    if commit :
  elif type ( s ) != six . text_type :
 raise NoReverseMatch ( "Reverse for '%s' with arguments '%s' and keyword "  "arguments '%s' not found. %d pattern(s) tried: %s" %  ( lookup_view_s , args , kwargs , len ( patterns ) , patterns ) )
              name = self . html_initial_name
   def __copy__ ( self ) :
                   absolute_path = self . download ( template )
   return nodes
   def escape ( text ) :
       from django . db . migrations . loader import MigrationLoader
              super ( CommandParser , self ) . error ( message )
 class BaseFormSet ( object ) :
                if not ip_str . split ( ':' ) [ - 1 ] == hextet :
 _format_modules_cache = { }
               try :
          return "<%s: %s>" % ( self . __class__ . __name__ , self )
          def wrapped ( * args , ** kwargs ) :
               context . render_context [ self ] = itertools_cycle ( self . cyclevars )
  if value [ 0 ] in self . empty_values and value [ 1 ] in self . empty_values :
   try :
 self . _add_fallback ( )
 handler . addQuickElement ( "updated" , rfc3339_date ( self . latest_post_date ( ) ) )
   kwargs . update ( self . default_args )
 self . _cull ( )
 super ( DebugParser , self ) . extend_nodelist ( nodelist , node , token )
   queryset = property ( _get_queryset , _set_queryset )
     seen_data . add ( row_data )
  self . compression_formats = {  None : ( open , 'rb' ) ,  'gz' : ( gzip . GzipFile , 'rb' ) ,  'zip' : ( SingleZipReader , 'r' ) ,  }
  try :
                      singular . append ( '%%(%s)s' % t . contents )
                  if extend is True :
    def get_cache ( backend , ** kwargs ) :
   def as_text ( self ) :
      def __init__ ( self , var , name , nodelist , extra_context = None ) :
    class PasswordInput ( TextInput ) :
 from django . utils . dateformat import format , time_format
              return len ( self . get_queryset ( ) )
          return singular
                      construct_instance_exclude . append ( name )
  return '\n' . join ( output )
          return self . has_key ( key )
 while model_dependencies :
              try :
   except UnicodeError :
 return tt . tm_isdst > 0
            if 'forloop' in context :
                      app_configs = apps . get_app_configs ( )
  messages = { }
from django . core . management . base import BaseCommand
  self . feed . update ( kwargs )
   def handle ( self , ** options ) :
 class __proxy__ ( Promise ) :
     db = options . get ( 'database' )
   super ( Command , self ) . handle ( 'app' , app_name , target , ** options )
  if settings . USE_X_FORWARDED_HOST and (  'HTTP_X_FORWARDED_HOST' in self . META ) :
 sys . exit ( 1 )
                  codecs . lookup ( content_params [ 'charset' ] )
  from __future__ import unicode_literals
   def render ( self , name , value , attrs = None , choices = ( ) ) :
     class Parser ( object ) :
 sql_statements = executor . collect_sql ( plan )
      status_code = 403
  last = max ( 0 , end - 1 )
   class EmailBackend ( BaseEmailBackend ) :
              digest = hashlib . sha256
               ttl = force_text ( ttl )
   if six . PY3 :
   class Truncator ( SimpleLazyObject ) :
                  qs = pk . rel . to . _default_manager . get_queryset ( )
   if bad_app_labels :
          return False
                  final_attrs = dict ( final_attrs , id = '%s_%s' % ( id_ , i ) )
              self . cookies [ key ] [ 'httponly' ] = True
 for f in post_sql_fields :
   def __iter__ ( self ) :
  def compile_func ( parser , token ) :
          super ( SplitHiddenDateTimeWidget , self ) . __init__ ( attrs , date_format , time_format )
 cword = int ( os . environ [ 'COMP_CWORD' ] )
  else :
  except NotImplementedError :
   @ streaming_content . setter
 from django . utils import six
 attachment = SafeMIMEText ( content , subtype , encoding )
           return datetime . utcnow ( ) . replace ( tzinfo = utc )
              return ""
    def read ( self ) :
 value = str ( '%s%s%s' ) % ( value , self . sep , self . timestamp ( ) )
 signals . request_started . send ( sender = self . __class__ )
    def format_html_join ( sep , format_string , args_generator ) :
 choices = [ ( i , i ) for i in self . years ]
    return exclude
              msg += ending
 self . negated = not self . negated
 if len ( bits ) != 3 :
 return pickle . loads ( base64 . b64decode ( force_bytes ( value ) ) )
          try :
      if not _serializers :
 compile_func . __doc__ = func . __doc__
  except AttributeError :
              processors = ( )
    def get_script_name ( environ ) :
          self . model = getattr ( options , 'model' , None )
 self . items . append ( item )
              try :
 parser . add_argument ( '--all' , '-a' , action = 'store_true' , dest = 'all' ,  default = False , help = 'Updates the message files for all existing locales.' )
                  yield import_module ( '%s.formats' % ( location % loc ) )
          if not filename :
  else :
  except InputStreamExhausted :
   def error ( self , token , msg ) :
   @ property
      decimal_digits = '0123456789'
   def __getstate__ ( self ) :
 try :
          tzinfo = timezone . get_current_timezone ( ) if settings . USE_TZ else None
    for chunk in field_stream :
   @ encoding . setter
          return tuple ( a for a in WRAPPER_ASSIGNMENTS if hasattr ( fn , a ) )
     if label_suffix and contents and contents [ - 1 ] not in _ ( ':?.!' ) :
   return '\n' . join ( output )
              return timedelta ( seconds = - time . altzone )
                          description = "The '%s' function" % receiver . __name__
   def __enter__ ( self ) :
          raise TemplateSyntaxError ( "'%s' tag takes only one argument" % bits [ 0 ] )
  def add_arguments ( self , parser ) :
              if hasattr ( handler , 'file' ) :
  return self . _get_page ( self . object_list [ bottom : top ] , number , self )
 self . xml . endElement ( "natural" )
                  self . add_error ( name , e )
  password = force_bytes ( password )
              for reference , receivers in obj . unresolved_references . items ( ) :
 self . add_fields ( form , None )
 def get_default_prefix ( cls ) :
 raise NotImplementedError ( 'subclasses of FileUploadHandler must provide a file_complete() method' )
 if error . params :
 if not hasattr ( package , 'rindex' ) :
  from django . utils import six
  data = b64_decode ( base64d )
  return _serializers [ format ] . Deserializer
 language_code = get_language ( )
          return self . size
   def clean_ipv6_address ( ip_str , unpack_ipv4 = False ,  error_message = _ ( "This is not a valid IPv6 address." ) ) :
 for form in valid_forms :
 msg = SafeMIMEMultipart ( _subtype = self . mixed_subtype , encoding = encoding )
 with lock :
  except KeyError :
              self . stdout . write ( "Cache table '%s' created." % tablename )
                      M = self . get ( key , Morsel ( ) )
  fixture_files = [ ]
                      self . handle_data ( rawdata [ i : j ] )
   def render ( self , context ) :
 from __future__ import unicode_literals
 return e
                 memo [ id ( self ) ] = self
      must_be_first = True
                  self . saved_forms . append ( form )
  else :
          while True :
    def contains ( source , inst ) :
              handler . addQuickElement ( "subtitle" , self . feed [ 'subtitle' ] )
from __future__ import unicode_literals
          if app_config . models_module is None :
          if name is None and compile_function is None :
                          app_config = apps . get_app_config ( app_label )
   self . _mutable = mutable
  unescape_entities = allow_lazy ( unescape_entities , six . text_type )
          if ( hasattr ( value , '__iter__' ) and  not isinstance ( value , six . text_type ) and  not hasattr ( value , '_meta' ) ) :
    except IOError as e :
          warnings . warn (  "SortedDict is deprecated and will be removed in Django 1.9." ,  RemovedInDjango19Warning , stacklevel = 2  )
    if unpack_ipv4 :
 walk_to_end ( ch , pattern_iter )
          return arg
 new_migration = subclass ( "0001_squashed_%s" % migration . name , app_label )
  raise CommandError (  "errors happened while running xgettext on %s\n%s" %  ( self . file , errors ) )
                  widget = HiddenInput
                  if not isinstance ( messages , ValidationError ) :
          self . close ( )
 raise NotImplementedError ( 'subclasses of Storage must provide an accessed_time() method' )
    class HttpResponsePermanentRedirect ( HttpResponseRedirectBase ) :
   def handle_m2m_field ( self , obj , field ) :
  seen . add ( k )
 bits = token . split_contents ( )
  scheme = template . split ( ':' , 1 ) [ 0 ] . lower ( )
   return found
 self . name = name
              if key not in default_settings :
              handler . addQuickElement ( "ttl" , self . feed [ 'ttl' ] )
 klass . prefix = '\n' + find_indentation ( node )
  nesting -= 1
 DEFAULT_PORT = "8000"
   signals . request_finished . connect ( close_caches )
              os . chmod ( full_path , self . file_permissions_mode )
 while i < len ( subject ) and subject [ i ] not in ( ' ' , '\t' ) :
    @ register . filter ( is_safe = True )
          cache = BaseDatabaseCache ( tablename , { } )
              parentloop = { }
  else :
                          answer = answer [ 0 ] . lower ( )
          new_ip = ip_str . split ( ':' )
     class WSGIServer ( simple_server . WSGIServer , object ) :
                                  raise
                  try :
                  self . stdout . write ( "  Optimized from %s operations to %s operations." % ( len ( operations ) , len ( new_operations ) ) )
   if p . image :
  else :
  for index in range ( len ( hextets ) ) :
   __all__ = (  'Field' , 'CharField' , 'IntegerField' ,  'DateField' , 'TimeField' , 'DateTimeField' ,  'RegexField' , 'EmailField' , 'FileField' , 'ImageField' , 'URLField' ,  'BooleanField' , 'NullBooleanField' , 'ChoiceField' , 'MultipleChoiceField' ,  'ComboField' , 'MultiValueField' , 'FloatField' , 'DecimalField' ,  'SplitDateTimeField' , 'IPAddressField' , 'GenericIPAddressField' , 'FilePathField' ,  'SlugField' , 'TypedChoiceField' , 'TypedMultipleChoiceField'  )
 cmatches = constant_re . findall ( t . contents )
          response [ 'Expires' ] = http_date ( time . time ( ) + cache_timeout )
  url_schemes = [ 'http' , 'https' , 'ftp' ]
  elif item [ "author_email" ] :
                  push = block = block_context . pop ( self . name )
              pass
 if value in self . empty_values :
  except ImportError :
  quant = quant [ : - 1 ]
 attrs += [ attr . name for attr in self . _moved_attributes ]
  else :
   def modified_time ( self , name ) :
 match = (  pattern == '*' or  pattern . startswith ( '.' ) and (  host . endswith ( pattern ) or host == pattern [ 1 : ]  ) or  pattern == host  )
      self . m2m_data = None
  else :
   def tell ( self ) :
   app_labels = set ( app_labels )
   class UploadFileException ( Exception ) :
 import warnings
  del frame
          handler . addQuickElement ( "title" , self . feed [ 'title' ] )
  def __init__ ( self , redirect_to , * args , ** kwargs ) :
 for bit in smart_split_re . finditer ( text ) :
 import datetime
  def __init__ ( self ) :
              return input_val
          memoryview = memoryview
   is_reversed = bits [ - 1 ] == 'reversed'
 if cls . _delegate_text :
 if settings . USE_TZ and value is not None and timezone . is_aware ( value ) :
 _assertRegex = "assertRegexpMatches"
  requires_system_checks = False
          return "Error in formatting: %s" % force_text ( e , errors = "replace" )
              return 1
      get_callable . cache_clear ( )
 from django . core . files . base import File
                      blocks = dict ( ( n . name , n ) for n in  compiled_parent . nodelist . get_nodes_by_type ( BlockNode ) )
 continue
          self . tags [ getattr ( func , "_decorated_function" , func ) . __name__ ] = func
     class Warning ( CheckMessage ) :
   def start_index ( self ) :
     self . run_validators ( value )
  else :
 if template is None :
                              if transfer_encoding == 'base64' :
 final_attrs = self . build_attrs ( attrs )
      def __new__ ( mcs , name , bases , attrs ) :
 if threading :
  except TypeError :
   def _get_request ( self ) :
      smart_str = smart_text
 for candidate in ( ( d not in models or d in model_list ) for d in deps ) :
  except ValidationError :
 if not cleaned_line :
  except UnicodeEncodeError :
 from django . utils . encoding import python_2_unicode_compatible
   def extend_nodelist ( self , nodelist , node , token ) :
              format_locations . append ( path + '.%s' )
  else :
 LockFileEx . argtypes = [ HANDLE , DWORD , DWORD , DWORD , DWORD , LPOVERLAPPED ]
 constant_arg , var_arg = match . group ( "constant_arg" , "var_arg" )
 while i < len ( subject ) and subject [ i ] != c :
              try :
          path = os . path . join ( app_config . path , 'management' )
   if daemonize :
 field_notes . append ( 'Field renamed because of name conflict.' )
    def get_template_from_string ( source , origin = None , name = None ) :
  loop_dict [ 'revcounter' ] = len_values - i
          msg = "%s doesn't look like a module path" % dotted_path
                              message_context = message_context . strip ( '"' )
 FormSet = formset_factory ( form , formset , extra = extra , min_num = min_num , max_num = max_num ,  can_order = can_order , can_delete = can_delete ,  validate_min = validate_min , validate_max = validate_max )
 import os
 self . xml . endElement ( "django-objects" )
              base_url = settings . MEDIA_URL
   declared_fields = OrderedDict ( )
  self . buffer += chunk
              if not self . valid_value ( val ) :
 def fget ( instance , instance_type = None , name = fget . __name__ ) :
  def process_default ( self , event ) :
              cursor . close ( )
                      message = ValidationError ( message )
                                      over_chunk = field_stream . read ( 4 - over_bytes )
 return _get_timezone_name ( get_current_timezone ( ) )
  except ( TypeError , AttributeError , KeyError , ValueError ) :
                  pass
 if propagate is not None :
 from django . utils . encoding import force_bytes
     class SplitDateTimeWidget ( MultiWidget ) :
                   kwargs [ str ( param ) ] = value
          reversed_text = ' reversed' if self . is_reversed else ''
              return path . join ( django . __path__ [ 0 ] , 'conf' , subdir )
          return force_str ( self . _tzname )
 inner . update ( password . translate ( hmac . trans_36 ) )
  try :
 def wrapper ( * args ) :
                  handler . addQuickElement ( "uri" , item [ 'author_link' ] )
  return args , kwargs
                  if buffer_ :
 self . to = list ( to )
                  other = other . __cast ( )
          if node . must_be_first and nodelist :
  if last == 3 :
 if errors :
                  validate_ipv4_address ( hextet )
          self . file . close ( )
   def render ( self , context ) :
    def inotify_code_changed ( ) :
    @ register . filter ( is_safe = True )
 self . choices = choices
      return ( form_class is not None and (  hasattr ( form_class , '_meta' ) and  ( form_class . _meta . fields is not None or  form_class . _meta . exclude is not None )  ) )
 if truncate_text :
    if ip_str . count ( '::' ) > 1 :
 parser . add_argument ( '--ipv6' , '-6' , action = 'store_true' , dest = 'use_ipv6' , default = False ,  help = 'Tells Django to use an IPv6 address.' )
  httpd . set_app ( wsgi_handler )
  def add_arguments ( self , parser ) :
   def receive_data_chunk ( self , raw_data , start ) :
          lang = None
              return LANG_INFO [ generic_lang_code ]
          super ( MemoryFileUploadHandler , self ) . new_file ( * args , ** kwargs )
  except ( IndexError ,  ValueError ,  KeyError ,  TypeError ) :
              return self . create_var ( token )
          paras = [ '<p>%s</p>' % p . replace ( '\n' , '<br />' ) for p in paras ]
  try :
 try :
 commands_dict = collections . defaultdict ( lambda : [ ] )
 parser = OptionParser ( prog = prog_name ,  usage = self . usage ( subcommand ) ,  version = self . get_version ( ) )
    if settings . is_overridden ( 'MANAGERS' ) :
          raise TemplateSyntaxError ( "%r takes two arguments" % bits [ 0 ] )
              if kwargs :
 TOKEN_BLOCK = 2
 from django . utils . encoding import force_text
 hlen = digest ( ) . digest_size
 def _new_instance ( cls , children = None , connector = None , negated = False ) :
                      messages = ValidationError ( messages )
 return chunk [ : end ]
   used_name = the_path . split ( '/' ) [ - 1 ]
      def __init__ ( self , protocol = 'both' , unpack_ipv4 = False , * args , ** kwargs ) :
 try :
 self . isolated_context = kwargs . pop ( 'isolated_context' , False )
     kwarg_re = re . compile ( r"(?:(\w+)=)?(.+)" )
                          continue
   def validate_ipv6_address ( value ) :
 self . validators . append ( self . _regex_validator )
     class SimpleUploadedFile ( InMemoryUploadedFile ) :
    def cookie_date ( epoch_seconds = None ) :
  requires_system_checks = False
  return _translations [ language ]
   def migration_progress_callback ( self , action , migration , fake = False ) :
          instance = construct_instance ( form , instance , fields , exclude )
 break
from __future__ import unicode_literals
 bpython . embed ( )
  else :
 nodelist = parser . parse ( ( 'elif' , 'else' , 'endif' ) )
                      for key , value in other_dict . items ( ) :
                  obj = mark_for_escaping ( new_obj )
    def _add_local_translations ( self ) :
 if not value :
 self . _populated = False
 if id_ :
   def args_check ( name , func , provided ) :
 self . _set_regex ( regex )
  __version__ = "0.1"
   os . rename ( old_file_name , new_file_name )
 from django . utils . text import get_valid_filename
                      if filename . endswith ( '.mo' ) :
              self . stdout . write ( 'examining files with the extensions: %s\n'  % get_text_list ( list ( self . extensions ) , 'and' ) )
  with connections [ db ] . cursor ( ) as cursor :
                         self . _mark_post_parse_error ( )
   @ classmethod
 exp = pickle . load ( f )
   def __repr__ ( self ) :
 version = get_complete_version ( version )
 for module in templatetags_modules :
     class InvalidTemplateLibrary ( Exception ) :
   return response
 try :
 bits = token . split_contents ( )
              content_length = int ( META . get ( 'HTTP_CONTENT_LENGTH' , META . get ( 'CONTENT_LENGTH' , 0 ) ) )
 for message in message :
 if not hasattr ( c , '__call__' ) and hasattr ( types , 'ClassType' ) and type ( c ) != types . ClassType :
              super ( URLValidator , self ) . __call__ ( value )
          return self . objects
  except Exception as e :
              raise TemplateSyntaxError ( "back called without some previous "  "parsing" )
      help = "Creates the tables needed to use the SQL cache backend."
          if required and ( initial is not None ) :
 from django . utils . html import escape
  else :
                      raise ValueError ( 'Unable to set target handler '  '%r: %s' % ( config [ 'target' ] , e ) )
              return usage
    if item [ 'enclosure' ] is not None :
    def _create_cache ( backend , ** kwargs ) :
 from django . utils import six
 self . new_method_name = new_method_name
     ZERO = timedelta ( 0 )
  if settings . USE_ETAGS and not response . has_header ( 'ETag' ) :
   def value_from_datadict ( self , data , files , name ) :
 from __future__ import unicode_literals
   current_fields . sort ( key = lambda x : x [ 1 ] . creation_counter )
     class DatabaseCache ( BaseDatabaseCache ) :
 for bit in bits :
 self . settings_exception = None
   finally :
 from __future__ import unicode_literals
  closed = property ( _get_closed )
from __future__ import unicode_literals
 self . username = settings . EMAIL_HOST_USER if username is None else username
  def decorator ( klass ) :
          language_code = get_language ( )
 reason_phrase = None
               initial = False
  else :
          warnings . warn (  "django.utils.tzinfo.LocalTimezone will be removed in Django 1.9. "  "Use django.utils.timezone.get_default_timezone instead." ,  RemovedInDjango19Warning )
  def add_item_elements ( self , handler , item ) :
 from django . utils . functional import lazy
   def dst ( self , dt ) :
    @ register . tag
          bytes = float ( bytes )
              params , varargs , varkw , defaults = getargspec ( func )
  from django . db . models import ForeignKey
          return value [ 0 ]
          zipfile . ZipFile . __init__ ( self , * args , ** kwargs )
     @ python_2_unicode_compatible
     class DateTimeBaseInput ( TextInput ) :
   def flush ( self ) :
         for name , field in self . fields . items ( ) :
      def get_urlconf ( default = None ) :
     class FixedOffset ( tzinfo ) :
          if _default is None :
  else :
                  self . _body = self . read ( )
                  form . _meta . fields = list ( form . _meta . fields )
   def handle_fk_field ( self , obj , field ) :
  else :
 self . version = params . get ( 'VERSION' , 1 )
 if token . contents == 'empty' :
  return self . _regex_dict [ language_code ]
    def get_cache_key ( request , key_prefix = None , method = 'GET' , cache = None ) :
                   qs = f . value_from_object ( instance )
 best_doublecolon_len = 0
                  return render_value_in_context ( value , context )
 return NowNode ( format_string )
       class metaclass ( meta ) :
   subcommands = list ( get_commands ( ) ) + [ 'help' ]
  import time
  return result
 output . extend ( [ encode ( k , force_bytes ( v , self . encoding ) )  for v in list_ ] )
     class FloatField ( IntegerField ) :
   def get_data ( self ) :
          compiled_parent = self . get_parent ( context )
  else :
 self . file . seek ( 0 , os . SEEK_END )
    class Group ( list ) :
                              obj . save ( using = self . using )
from django . conf import settings
 self . _non_form_errors = None
   else :
 from django . db import router , DEFAULT_DB_ALIAS
      from django . utils . six . moves import cPickle as pickle
  headerlist . append ( 'HTTP_' + header )
 self . merge ( translation )
 return new_key
   return singular_suffix
              signals . got_request_exception . send ( sender = self . __class__ , request = request )
                          continue
  import datetime
 return escapejs ( value )
 from __future__ import unicode_literals
                      call_command ( "createsuperuser" , interactive = True , database = options [ 'database' ] )
  logging_config_func ( DEFAULT_LOGGING )
     def npgettext ( context , singular , plural , number ) :
              yield node
              post = ( pformat ( POST_override )  if POST_override is not None  else pformat ( request . POST ) )
 try :
                  if self . required :
  elif self . verbosity > 0 :
              if isinstance ( value , Field ) :
 if link is not None :
                      value = field . clean ( value )
 if _locs_ is None :
   def _proxy_method ( self , * args , ** kwargs ) :
 for name in namelist :
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
                           if isinstance ( current , BaseContext ) and getattr ( type ( current ) , bit ) :
  except VariableDoesNotExist :
                  step = 'any'
 self . xml . startElement ( "field" , {  "name" : field . name ,  "type" : field . get_internal_type ( )  } )
              try :
 comment_notes . extend ( field_notes )
    def urlsafe_base64_encode ( s ) :
 return '%s. You passed in %r (%s)' % ( original , self . obj ,  type ( self . obj ) )
                      self . close ( )
              handler . addQuickElement ( "link" , "" , { "rel" : "self" , "href" : self . feed [ 'feed_url' ] } )
  if localized_fields is not None :
 self . connector = conn_type
 mode = stat . S_IMODE ( st . st_mode )
  except http_cookies . CookieError :
              try :
          return os . path . exists ( self . path ( name ) )
 class File ( FileProxyMixin ) :
 if current_len == truncate_len :
   endblock = parser . next_token ( )
   except IOError :
              del self . _cache [ key ]
 try :
 known_models = set ( model for model in connection . introspection . installed_models ( tables ) if model not in app_models )
   return neg , res
 from django . utils . six . moves import map
                  return pgettext_lazy ( self . message_context , value )
          s = s [ 1 : ]
  self . cdata_tag = tag . lower ( )
  return '%s...' % x [ : max ( 0 , limit - 3 ) ]
    elif name is not None and filter_func is not None :
 self . __name = "%s%02d%02d" % ( sign , abs ( offset ) / 60. , abs ( offset ) % 60 )
    def parse ( self , parse_until = None ) :
 bits = token . split_contents ( )
  else :
   def _ipython ( self ) :
              return False
   def __call__ ( self , * args , ** kwargs ) :
 lines = value . split ( '\n' )
 self . first = True
  else :
              escaped = False
   def make_view_atomic ( self , view ) :
              return [ ]
              final_attrs [ 'checked' ] = 'checked'
          if self . callback ( record ) :
                          if os . path . abspath ( dirpath ) . startswith ( os . path . dirname ( path ) ) :
  return new_class
                  assert remaining > 0 , 'remaining bytes to read should never go negative'
 from __future__ import unicode_literals
 class ErrorList ( UserList , list ) :
   return view_func
 parser . delete_first_token ( )
 ugettext_lazy = lazy ( ugettext , six . text_type )
  result = datetime . datetime . combine ( * data_list )
 doy = self . year_days [ self . data . month ] + self . data . day
  if _default is None :
 parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to flush. Defaults to the "default" database.' )
 self . _payload = payload . decode ( 'ascii' , 'surrogateescape' )
  except ImportError :
   except GeneratorExit :
    def inlineformset_factory ( parent_model , model , form = ModelForm ,  formset = BaseInlineFormSet , fk_name = None ,  fields = None , exclude = None , extra = 3 , can_order = False ,  can_delete = True , max_num = None , formfield_callback = None ,  widgets = None , validate_max = False , localized_fields = None ,  labels = None , help_texts = None , error_messages = None ,  min_num = None , validate_min = False ) :
              self . msgmerge_options = self . msgmerge_options [ : ] + [ '--no-wrap' ]
          serializers [ format ] = module
 if len ( bits ) == 4 :
 return force_text ( quote ( force_str ( url ) , force_str ( safe ) ) )
              return '0'
              ns = path . pop ( )
     def load_label ( self , fixture_label ) :
     def upath ( path ) :
  def to_python ( self , value ) :
   def validate ( self , value ) :
                      with connection . cursor ( ) as cursor :
  self . default_args = default_args or { }
  except ValueError :
                      return self . tag ( name , func )
 super ( WSGIServer , self ) . server_bind ( )
 subject = self . subject
               kwargs . setdefault ( 'widget' , super ( IntegerField , self ) . widget )
              self . code = code
          return callback , ''
      initial_text = ugettext_lazy ( 'Currently' )
 usage . append ( style . NOTICE ( "[%s]" % app ) )
                   prefix = settings . MEDIA_URL
      default_error_messages = {  'invalid' : _ ( 'Enter a number.' ) ,  'max_digits' : ungettext_lazy (  'Ensure that there are no more than %(max)s digit in total.' ,  'Ensure that there are no more than %(max)s digits in total.' ,  'max' ) ,  'max_decimal_places' : ungettext_lazy (  'Ensure that there are no more than %(max)s decimal place.' ,  'Ensure that there are no more than %(max)s decimal places.' ,  'max' ) ,  'max_whole_digits' : ungettext_lazy (  'Ensure that there are no more than %(max)s digit before the decimal point.' ,  'Ensure that there are no more than %(max)s digits before the decimal point.' ,  'max' ) ,  }
   exp = connections [ db ] . ops . value_to_db_datetime ( exp )
  return wraps ( func ) ( _dec )
 if not commit :
   block = type ( self ) ( block . name , block . nodelist )
                      inplural = True
          return ZERO
  else :
 parser . delete_first_token ( )
   def _truncate_html ( self , length , truncate , text , truncate_len , words ) :
              handler . addQuickElement ( "rights" , item [ 'item_copyright' ] )
              messages . update ( getattr ( c , 'default_error_messages' , { } ) )
  except InvalidOperation :
              return self . queryset . none ( )
 from django . core import signing
   else :
  else :
 clear_checkbox_label = ugettext_lazy ( 'Clear' )
                      if settings . TEMPLATE_STRING_IF_INVALID :
              table_names = [ ]
                   loop_dict [ 'counter0' ] = i
   def is_valid ( self ) :
     class TemplateIfParser ( IfParser ) :
                      yield meta_line
                  self . stdout . write ( self . style . MIGRATE_HEADING ( "Synchronizing apps without migrations:" ) )
          return len ( self . content )
   writer = MigrationWriter ( new_migration )
  import hashlib
 from django . core . management . sql import sql_flush , emit_post_migrate_signal
          return self . __offset ,
              lang = get_language ( )
     class BaseConfigurator ( object ) :
  return False
                  self . cleaned_data = cleaned_data
          errors = self . default_error_messages . copy ( )
  from os import path
    class ObjectDoesNotExist ( Exception ) :
 if input_formats is not None :
   _format_cache [ cache_key ] = val
  exhaust ( field_stream )
          parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
 raise NotImplementedError ( 'subclasses of Serializer must provide an handle_m2m_field() method' )
 from django . core . management . color import color_style
  else :
 for fname in filelist :
          self . template = template
              self . cookies [ key ] [ 'max-age' ] = max_age
   try :
  self . deleted_objects . append ( obj )
   return format_html (  '<ul class="{0}">{1}</ul>' ,  self . error_class ,  format_html_join ( '' , '<li>{0}</li>' , ( ( force_text ( e ) , ) for e in self ) )  )
      @ total_ordering
              new_name = 'field%s' % new_name
  time . sleep ( 1 )
                  regex = self . _regex
 if isinstance ( offset , timedelta ) :
 if auto_id and '%s' in smart_text ( auto_id ) :
 from importlib import import_module
 self . _catalog . update ( other . _catalog )
 if path . isdir ( expanded_template ) :
  while current_len <= length :
  if labels is not None :
          raw_cookie = get_str_from_wsgi ( self . environ , 'HTTP_COOKIE' , '' )
  status = '%s %s' % ( response . status_code , response . reason_phrase )
 from django . utils import six
 html = starttag_re . sub ( '' , html )
  raise
                              exec ( compile ( handle . read ( ) , pythonrc , 'exec' ) , imported_objects )
          super ( Command , self ) . add_arguments ( parser )
                      deps = [ apps . get_model ( dep ) for dep in deps ]
          if safe and not isinstance ( data , dict ) :
 if six . PY3 and isinstance ( val1 , bytes ) and isinstance ( val2 , bytes ) :
   def gettext ( message ) :
              return { "xmlns" : self . ns }
  except StandardError as e :
                  with open ( filename , 'wb' ) as outfile :
  smart_unicode = smart_text
    def dictvalue ( t ) :
                          if field_type == 'AutoField(' :
   return msg
   content_disposition = info . get ( 'content-disposition' )
 return version + delta
              try :
   def render ( self , context ) :
 from django . utils . encoding import force_str
  return True
   def read ( self , size = None ) :
   return force_text ( name . replace ( '\\' , '/' ) )
  migration_string = writer . as_string ( )
 options . update ( kwargs )
 truncate_text = self . add_truncation_text ( '' , truncate )
    if current_len <= length :
 self . _cache = _caches . setdefault ( name , { } )
  class InclusionNode ( TagHelperNode ) :
     class TextInput ( Input ) :
  except LookupError :
 p1 , p2 = urlparse ( url1 ) , urlparse ( url2 )
  args = [  'xgettext' ,  '-d' , domain ,  '--language=C' ,  '--keyword=gettext_noop' ,  '--keyword=gettext_lazy' ,  '--keyword=ngettext_lazy:1,2' ,  '--keyword=pgettext:1c,2' ,  '--keyword=npgettext:1c,2,3' ,  '--output=-'  ] + command . xgettext_options
   def __getstate__ ( self ) :
      help = 'Compiles .po files to .mo files for use with builtin gettext support.'
                          logger . disabled = True
 from django . utils . six . moves import xrange
          self . field = field
                      raise CommandError ( "Cannot find a migration matching '%s' from app '%s'." % (  migration_name , app_label ) )
    @ register . filter ( is_safe = True )
              post = '<could not parse>'
 return self . _urlconf_module
          return _time . tzname [ self . _isdst ( dt ) ]
            if sys . version_info [ : 2 ] == ( 3 , 2 ) :
          self . nodelist = nodelist
 num_entries = len ( filelist )
          encoding = self . encoding or settings . DEFAULT_CHARSET
 walk_to_end ( ch , pattern_iter )
 def do_filter ( parser , token ) :
 infos = [ e for e in all_issues if checks . INFO <= e . level < checks . WARNING and not e . is_silenced ( ) ]
                              locale_dir = path
  raise TemplateSyntaxError ( error_msg )
          if value in self . empty_values :
          try :
 return tempdir
    class EmailInput ( TextInput ) :
    if response . has_header ( 'Cache-Control' ) :
  target_var = bits [ - 1 ]
 return True
  except ( DatabaseError , IntegrityError ) as e :
  template_dir = os . path . join ( app_config . path , 'templates' )
 kwargs = dict ( ( smart_text ( k , 'ascii' ) , v . resolve ( context ) )  for k , v in self . kwargs . items ( ) )
  return value
   if options [ "daemonize" ] is None :
                     return FILE_INPUT_CONTRADICTION
   def get_default_timezone ( ) :
      widget = DateInput
 if self . forms :
          return EscapeText ( s )
 import os
 self . field_name = field_name
   def __iter__ ( self ) :
 if ch == '(' :
          output . extend ( connection . creation . sql_destroy_indexes_for_model ( model , style ) )
          if self . id_for_label :
                  self . encoding = content_params [ 'charset' ]
 if mimetype is None :
from __future__ import unicode_literals
 parser . add_argument ( '--testrunner' ,  action = 'store' , dest = 'testrunner' ,  help = 'Tells Django to use specified test runner class instead of '  'the one specified by the TEST_RUNNER setting.' ) ,
 if self . first :
  else :
 from django . conf import settings
       def __init__ ( self , name , old_mod , new_mod , old_attr = None , new_attr = None ) :
                      raise CommandError ( "%s already exists, overlaying a "  "project or app into an existing "  "directory won't replace conflicting "  "files" % new_path )
 from django . utils . translation import get_language
              extra_classes . add ( self . form . required_css_class )
                  result . append ( self . create_token ( bit , in_tag ) )
          idstring = '.' + idstring
  if not self . _populated :
   def __repr__ ( self ) :
   def _base_set ( self , mode , key , value , timeout = DEFAULT_TIMEOUT ) :
 db = router . db_for_write ( self . cache_model_class )
          try :
           class LocalTimezone ( tzinfo ) :
                      buffer_ = line
 if app_path is None :
 try :
  def __init__ ( self , * args , ** kwargs ) :
 import sys
                  out . write ( blankout ( t . contents , 'X' ) )
      from importlib import import_module
   if six . PY3 :
          return ''
 result = [ ]
      def format ( self , formatstr ) :
              try :
          self . tags . update ( lib . tags )
          if option_value is None :
      renderer = CheckboxFieldRenderer
 self . xml . characters ( smart_text ( key_value ) )
 import locale
 if isinstance ( source , inst ) :
   def add_js ( self , data ) :
              raise CommandError ( "More than one migration matches '%s' in app '%s'. Please be more specific." % ( migration_name , app_label ) )
   from django . conf import settings
 nofollow_attr = ' rel="nofollow"' if nofollow else ''
  i += 1
 if self . connection is None :
                  new_name = new_name [ : - 3 ]
           if ( hasattr ( self . cmd , 'missing_args_message' ) and  not ( args or any ( [ not arg . startswith ( '-' ) for arg in args ] ) ) ) :
          t = self . current_token
  tables . append ( connection . introspection . table_name_converter ( model . _meta . db_table ) )
   def _prepare_data ( self , data ) :
          while True :
      EscapeString = EscapeBytes
 year_field = '%s_year'
  else :
    else :
                      initial_value = self . initial . get ( name , field . initial )
 from __future__ import unicode_literals
 from django . core . management import call_command
              if row [ 4 ] is None or row [ 5 ] is None :
  except ValueError :
 import os
                      resolved_args , resolved_kwargs = self . get_resolved_arguments ( context )
 _empty_value = None
          duplicate = super ( Context , self ) . __copy__ ( )
 if not settings . MANAGERS :
          return mark_safe ( formats . number_format ( '%d' % ( int ( d ) ) , 0 ) )
              cached = _format_cache [ cache_key ]
   else :
          super ( HttpResponseNotModified , self ) . __init__ ( * args , ** kwargs )
   directory_created [ app_label ] = True
 parser . add_argument ( '--pythonpath' )
              self . instance = instance
                  data = str ( data )
   def display ( self ) :
    def negate ( self ) :
   module = import_module ( module_path )
              break
                      return '%s-%s-%s' % ( y , m , d )
                  if middle . startswith ( opening ) :
   if response is None :
          return _curried_func ( * ( args + moreargs ) , ** dict ( kwargs , ** morekwargs ) )
   self . extend_nodelist ( nodelist , compiled_result , token )
        from django . utils . encoding import force_unicode
 iterator = None
 return bool ( self . changed_data )
 return iter ( getattr ( d , _iteritems ) ( ** kw ) )
 import errno
 super ( TemplateResponse , self ) . __init__ (  template , context , content_type , status )
              res = to_digits [ 0 ]
          iteritems = _iteritems
 validate_slug = RegexValidator ( slug_re , _ ( "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens." ) , 'invalid' )
 locales = set ( locales ) - set ( exclude )
  def render ( self , context ) :
 return ResolverMatch ( sub_match . func , sub_match . args , sub_match_dict , sub_match . url_name , self . app_name or sub_match . app_name , [ self . namespace ] + sub_match . namespaces )
 kwargs = {  'label' : getattr ( form . fields . get ( name ) , 'label' , capfirst ( self . fk . verbose_name ) )  }
 use_threading = connection . features . test_db_allows_multiple_connections
   new_class . base_fields = fields
  _DJANGO_DEPRECATED_LOCALES = _BROWSERS_DEPRECATED_LOCALES
 pks = options . get ( 'primary_keys' )
 for operation in migration . operations :
                  msgs = msgs . decode ( 'utf-8' )
 while True :
          raise ValueError ( "Invalid timezone: %r" % timezone )
   sql . extend ( connection . creation . sql_for_pending_references ( model , no_style ( ) , pending_references ) )
   if compare_to != state_frame [ self ] :
 val2 = self . var2 . resolve ( context , True )
              pass
 for match in tag_re . finditer ( self . template_string ) :
 for node_app , node_name in migration . branch :
        def reloader_thread ( ) :
   def delete_many ( self , keys , version = None ) :
                  return lookup_view
     def split_domain_port ( host ) :
 return mark_safe ( '\n' . join ( output ) )
              if not self . keep_pot :
 with io . open ( os . path . join ( self . dirpath , thefile ) , "w" , encoding = 'utf-8' ) as fp :
  else :
          super ( FloatField , self ) . validate ( value )
                  os . makedirs ( top_dir )
 app_label , migration_name = options [ 'app_label' ] , options [ 'migration_name' ]
          import memcache
 from django . core . mail . utils import DNS_NAME
 for label in app_labels :
                  d = m . groupdict ( )
 from django . utils . regex_helper import normalize
                  bit = node
          package = import_module ( path )
  etags = [ e . encode ( 'ascii' ) . decode ( 'unicode_escape' ) for e in etags ]
  else :
          original = UnicodeDecodeError . __str__ ( self )
              try :
   for message in messages :
 class Operator ( TokenBase ) :
 from inspect import getargspec , getcallargs
   @ content . setter
                  result = self . configure_custom ( config )
      @ lru_cache . lru_cache ( maxsize = None )
 import warnings
              self . settings_exception = exc
  def __init__ ( self , * args , ** kwargs ) :
          del self . tokens [ 0 ]
                                       msg = "Could not decode base64 data: %r" % e
              try :
 from django . core . serializers . python import Serializer as PythonSerializer
 return default
                  if isinstance ( arg , unicode ) :
 if domain :
  if r . endswith ( '+00:00' ) :
                                  sql . extend ( connection . creation . sql_for_pending_references ( refto , no_style ( ) , pending_references ) )
 unique_checks , date_checks = form . instance . _get_unique_checks ( exclude = exclude )
  if not cls :
 __bool__ = new_method_proxy ( bool )
              self . object_list = list ( self . object_list )
   from logging import NullHandler
  except :
                  bits = normalize ( p_pattern )
                  extra , resolver = resolver . namespace_dict [ ns ]
                  return mark_safe ( func ( * args , ** kwargs ) )
 if not isinstance ( candidate , six . string_types ) :
 import glob
 if self . verbosity > 1 :
  except OSError :
              return hash ( self . __cast ( ) )
          if hextet . count ( '.' ) == 3 :
                  current = settings . TEMPLATE_STRING_IF_INVALID
                  with io . open ( django_po , 'r' , encoding = 'utf-8' ) as fp :
          parser . add_argument ( 'app_label' ,  help = 'App label of the application to squash migrations for.' )
  date = datetime_safe . new_datetime ( date )
  block_name = bits [ 1 ]
  week_number = None
   def get ( self , key , default = None ) :
 import re
 root = nonlocal_root [ 0 ]
          return maybe
   class TemplateCommand ( BaseCommand ) :
  candidate_subs = text_kwargs
 def check_for_language ( lang_code ) :
  output . append ( '</select>' )
                  if isinstance ( rhs , dict ) and number :
     class lazy_property ( property ) :
  __import__ ( name )
  value = super ( DictWrapper , self ) . __getitem__ ( key )
 targets = set ( '.' . join ( ( fixture_name , suffix ) ) for suffix in suffixes )
 def initial_forms ( self ) :
 self . _add_local_translations ( )
          output = [ ]
 requires_system_checks = False
 from django . db import connections , transaction , router , DatabaseError
  else :
  if not isinstance ( s , six . string_types ) :
          self . max_length , self . min_length = max_length , min_length
 from django . utils . _os import upath
 self . length , self . mime_type = length , mime_type
                  self . locale_paths . append ( os . path . abspath ( 'locale' ) )
          self . _delete ( self . _key_to_file ( key , version ) )
 for child in node . childNodes :
                  message = message . error_list
 def do_for ( parser , token ) :
 FIELD = "field"
     elif subcommand == 'version' or self . argv [ 1 : ] == [ '--version' ] :
    else :
  from django . core . exceptions import ValidationError
          lexer_class , parser_class = Lexer , Parser
              self . setlist ( k , v )
  elif ( attrvalue [ : 1 ] == '\'' == attrvalue [ - 1 : ] or  attrvalue [ : 1 ] == '"' == attrvalue [ - 1 : ] ) :
          try :
 return form . save ( commit = commit )
 if arg not in ( 'on' , 'off' ) :
 color_settings = termcolors . parse_color_setting ( DJANGO_COLORS )
              self . file = open ( self . name , mode or self . mode )
  except ValueError :
   try :
  try :
              k = force_bytes ( k , self . encoding )
  def indent ( self , level ) :
  def _get_closed ( self ) :
              message = list ( error ) [ 0 ]
 handler . addQuickElement ( "link" , "" , { "href" : item [ 'link' ] , "rel" : "alternate" } )
          raise self . error ( token , "Empty variable tag" )
 self . loaded_object_count = 0
 if settings . DEBUG :
              raise ValueError (  "'%s.%s' has no field named '%s'."  % ( model . _meta . app_label , model . _meta . object_name , fk_name ) )
    _add_doc ( reraise , """Reraise an exception.""" )
   def __getitem__ ( self , index ) :
                    step = str ( Decimal ( '1' ) / 10 ** self . decimal_places ) . lower ( )
  filenames = [ ]
 if leading :
                  msg . attach ( body_msg )
 add_move ( MovedModule ( "_thread" , "thread" ) )
          return os . path . join ( self . dirpath , self . file )
 self . password = settings . EMAIL_HOST_PASSWORD if password is None else password
 neg = 1
 def messages ( self ) :
  klass = node . clone ( )
   def render ( self , name , value , attrs = None ) :
      with open ( old_path , 'rb' ) as template_file :
   class Field ( object ) :
   def message ( self ) :
     class HiddenInput ( Input ) :
          try :
           return ip_str
 i = 0
  except KeyError :
    QuerySetPaginator = Paginator
 for template_name in template_name_list :
   old_app_dir = os . path . normpath ( os . path . join ( app_dir , 'models/sql' ) )
           base64d = base64d [ 1 : ]
      if path is None :
               six . reraise ( ValidationError , ValidationError (  self . error_messages [ 'invalid_image' ] ,  code = 'invalid_image' ,  ) , sys . exc_info ( ) [ 2 ] )
     def humanize ( dirname ) :
          return type ( self ) . __bool__ ( self )
                      args . append ( ( False , Variable ( constant_arg ) . resolve ( { } ) ) )
 if self . can_order :
              out += '</%s>' % tag
      @ contextlib . contextmanager
 from __future__ import unicode_literals
                  opts = model . _meta
              response = _set_response_etag ( response )
                  keys = n . getElementsByTagName ( 'natural' )
   def id_for_label ( self , id_ ) :
  except base . DeserializationError :
   def split_contents ( self ) :
    def clear_script_prefix ( ) :
  for d in object_list :
                     pass
 from django . utils import six , lru_cache
  else :
  return retval
               return 0
  reset_sequences = options . get ( 'reset_sequences' , True )
                  ch , escaped = next ( pattern_iter )
                  return getattr ( instance , name ) ( value )
  else :
              @ wraps ( fdel )
 if autoescape :
 pass
 return { }
         from datetime import date as real_date , datetime as real_datetime
          return TemplateSyntaxError ( msg )
 return dirs
  if bytes < KB :
 if os . path . exists ( django_po ) :
          return ( p1 . scheme , p1 . hostname , p1 . port ) == ( p2 . scheme , p2 . hostname , p2 . port )
                  try :
 self . _charset = settings . DEFAULT_CHARSET
 lead = lead + opening
      widget = SplitDateTimeWidget
 format = force_str ( default or get_format ( 'DATE_INPUT_FORMATS' ) [ 0 ] )
              raise ImproperlyConfigured ( 'Path for saving emails is invalid: %r' % self . file_path )
 if not response . has_header ( 'Vary' ) :
   def colorize ( text = '' , opts = ( ) , ** kwargs ) :
     if self . merge and conflicts :
     @ register . filter ( is_safe = True , needs_autoescape = True )
   if not hasattr ( content , 'chunks' ) :
 __contains__ = new_method_proxy ( operator . contains )
 self . html_name = form . add_prefix ( name )
 self . error_list = [ self ]
  from django . core . servers . fastcgi import runfastcgi
  if self . verbosity >= 2 :
 if not prefix . endswith ( '/' ) :
 def do_block ( parser , token ) :
 if hasattr ( test_runner_class , 'option_list' ) :
  if name in lib . filters :
  except ValidationError as e :
 return self . resolve ( value )
    return output
  return True
 handler . startElement ( 'feed' , self . root_attributes ( ) )
 from django . utils . module_loading import import_string
  except OSError as e :
 if not tag or current_len >= truncate_len :
   def calculate_app_template_dirs ( ) :
     csrf_token = context . get ( 'csrf_token' , None )
 assert rawdata [ i : i + 2 ] == "</" , "unexpected call to parse_endtag"
 return '\n' . join ( statements )
 return mark_safe ( '\n' . join ( [ six . text_type ( self . management_form ) , forms ] ) )
    def debug ( request ) :
 content = template . render ( context )
  msg_count = 0
 def dictitem ( s ) :
   if keyword . iskeyword ( new_name ) :
          return { "version" : self . _version ,  "xmlns:atom" : "http://www.w3.org/2005/Atom" }
 max_entries = params . get ( 'max_entries' , options . get ( 'MAX_ENTRIES' , 300 ) )
              boundary = boundary . encode ( 'ascii' )
   def getvalue ( self ) :
  return instance
  try :
          self . set_cookie ( key , max_age = 0 , path = path , domain = domain ,  expires = 'Thu, 01-Jan-1970 00:00:00 GMT' )
 return timezone . make_naive ( value , current_timezone )
              try :
                  return default
 upto = 0
          if isinstance ( self . urlconf_name , list ) and len ( self . urlconf_name ) :
                      num_sent += 1
                          if kwargs . get ( k , v ) != v :
  if expires < now :
          return self . __name
 substitutions [ 'clear' ] = CheckboxInput ( ) . render ( checkbox_name , False , attrs = { 'id' : checkbox_id } )
 return smart_text ( obj )
 if not script_url :
  if settings . DEBUG :
  else :
  except AttributeError :
 if value in ( None , '' ) :
                result = type ( self ) ( )
                      out . write ( blankout ( t . contents , 'B' ) )
   def _get_post ( self ) :
 obj . attrs = self . attrs . copy ( )
              val = Header ( val ) . encode ( )
     class RadioChoiceInput ( ChoiceInput ) :
  except LookupError :
          if regex is not None :
            weight = 0
          super ( JsLexer , self ) . __init__ ( self . states , 'reg' )
             return self . copy ( )
           selected_choices = set ( force_text ( v ) for v in selected_choices )
 created_models = set ( )
  import codecs
              debugs = [ e for e in all_issues if e . level < checks . INFO and not e . is_silenced ( ) ]
 self . dry_run = options . get ( 'dry_run' , False )
  if sep is None :
          if args and kwargs :
              assert not isinstance ( cc , six . string_types ) , '"cc" argument must be a list or tuple'
    if ':::' in ip_str :
 if upto != start :
                  raise
              fp . write ( msgs )
  except IndexError :
                  self . stdout . write ( "  Installing custom SQL...\n" )
           return ip_str
  except ImportError :
 if ( obj . pk is None and hasattr ( Model , 'natural_key' ) and  hasattr ( Model . _default_manager , 'get_by_natural_key' ) ) :
import argparse
  if self . initial and 'initial' not in kwargs :
 return True
 message_context = None
 rollback = self . _rollback
 exc_value = exc_type (  "Unsupported value: %r. You should install pytz." % dt )
              _ , ser_fmt , cmp_fmt = self . parse_name ( os . path . basename ( fixture_file ) )
 break
 import itertools
 raise StopFutureHandlers ( )
 from django . core import serializers
  try :
 strip_prefix = lambda s : s [ 1 : ] if s . startswith ( "u'" ) else s
 if not os . path . exists ( self . _dir ) :
 self . json_kwargs . pop ( 'fields' , None )
          e = TemplateSyntaxError ( msg )
          if isinstance ( value , datetime . datetime ) :
 trans_bit . append ( bit )
   def __setitem__ ( self , key , value ) :
    finally :
              result = self . buffer + self . _read_limited ( size - len ( self . buffer ) )
 ret = self . _cache . get_multi ( new_keys )
                  if isinstance ( s , bytes ) :
 ORDERING_FIELD_NAME = 'ORDER'
                  data [ field . name ] = field . to_python ( field_value )
          self . _upload_handlers = [ uploadhandler . load_handler ( handler , self )  for handler in settings . FILE_UPLOAD_HANDLERS ]
     def _replace_entity ( match ) :
 from django . core . management . base import CommandError
    initial_value = initial if initial is not None else ''
  self . new_objects . append ( self . save_new ( form , commit = commit ) )
       m = getattr ( lookup_view , '__module__' , None )
 def __init__ ( self , regex ) :
                          try :
          return b'' . join ( self . _container )
    except StopIteration :
 return super ( QueryDict , self ) . popitem ( )
              value = signing . get_cookie_signer ( salt = key + salt ) . unsign (  cookie_value , max_age = max_age )
    return week_number
 def __getitem__ ( self , key ) :
  if not self . user_regex . match ( user_part ) :
   class Command ( BaseCommand ) :
                  if errors :
 s = subject [ p : i ]
          self . _read_started = True
                  pass
 if literal_match :
              return '%s_%s' % ( id_ , first_select )
                  if six . PY2 :
     def Deserializer ( object_list , ** options ) :
                                  self . stdout . write ( "    Installing custom SQL for %s.%s model\n" % ( app_name , model . _meta . object_name ) )
  elif '=' in part :
                      raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
 substitutions [ 'clear_checkbox_name' ] = conditional_escape ( checkbox_name )
 fp = six . BytesIO ( )
   class Command ( BaseCommand ) :
          key = self . make_key ( key , version = version )
 for app in sorted ( commands_dict . keys ( ) ) :
  elif basetype == 'message' and subtype == 'rfc822' :
 import sys
              raise TemplateSyntaxError ( 'Unknown argument for %r tag: %r.' %  ( bits [ 0 ] , option ) )
   except Exception :
 self . use_ssl = settings . EMAIL_USE_SSL if use_ssl is None else use_ssl
   class ManagementForm ( Form ) :
   self . write_migration_files ( changes )
              raise AttributeError ( "You cannot set content to a 304 (Not Modified) response" )
  style = color_style ( )
 if not config_string :
 raise
                  del self . cleaned_data [ field ]
  if httponly :
   return command . execute ( * args , ** defaults )
                  cached_loaders . append ( find_template_loader ( loader ) )
  except ValueError :
              regex_compiled = re . compile ( '^%s/' % language_code , re . UNICODE )
          value = datetime_safe . new_date ( value )
 for model in router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) :
          if '@' in addr :
  if os . path . exists ( pofile ) :
   def non_form_errors ( self ) :
 output . append ( pformat ( sys . modules ) )
          format_module_path = settings . FORMAT_MODULE_PATH
              yield buffer_
          return [ widget . value_from_datadict ( data , files , name + '_%s' % i ) for i , widget in enumerate ( self . widgets ) ]
 if isinstance ( context , Context ) :
    def code_changed ( ) :
  return _default
                      src_data = fp . read ( )
 def widthratio ( parser , token ) :
                      msg = "Execution of %s failed: %s" % ( self . program , errors )
   base_name = '%s_name' % app_or_project
   old_field_name = None
      text = match . group ( 1 )
                return
 self . _separator = b'--' + boundary
 obj_dict [ '_data' ] = dict ( ( k , self . getlist ( k ) ) for k in self )
          raise base . DeserializationError ( "Invalid model identifier: '%s'" % model_identifier )
 if not self . is_bound :
    return mark_safe ( '' . join ( force_text ( n ) for n in nodelist ) )
  except ValueError :
              weight += 2
 for opt in self . option_list :
 from django . utils . http import urlquote
   if len ( hextet ) > 1 :
                  project_name = settings . SETTINGS_MODULE . split ( '.' ) [ 0 ]
   def strptime ( self , value , format ) :
          try :
          input_val = force_text ( text )
          return self . value . resolve ( context , ignore_failures = True )
 return '%02d' % self . G ( )
          return '<ExtendsNode: extends %s>' % self . parent_name . token
  return val
 if six . PY2 :
   def pretty_name ( name ) :
  else :
          pass
          raise EntitiesForbidden ( name , value , base , sysid , pubid , notation_name )
              print ( "Running pre-migrate handlers for application %s" % app_config . label )
  app_list = OrderedDict ( )
                              f = os . path . join ( root , f )
   try :
  if self . verbosity >= 2 :
                      continue
          return any ( w . needs_multipart_form for w in self . widgets )
                      s = six . text_type ( s , encoding , errors )
  sys . modules [ __name__ + ".moves.urllib_parse" ] = sys . modules [ __name__ + ".moves.urllib.parse" ] = Module_six_moves_urllib_parse ( __name__ + ".moves.urllib_parse" )
 re_chars = re . compile ( r'<.*?>|(.)' , re . U | re . S )
  elif template_tuple is None :
 all_files = [ ]
 import gzip
 from django . utils . _os import safe_join
          text = '%s\x1b[%sm' % ( text or '' , RESET )
 bits = token . split_contents ( )
 del logging . _handlerList [ : ]
   def usage ( self , subcommand ) :
 self . args = args
  self . mod = new_mod
           l = len ( tokens )
  ret = _
 from django . core . mail . message import sanitize_address
          if not getattr ( f , 'editable' , False ) :
 from django . db import connections , DEFAULT_DB_ALIAS
  def __init__ ( self , * args , ** kwargs ) :
          return t
 def encoding ( self ) :
                  filename = file . name
 self . silent = silent
 chunks = (  ( 60 * 60 * 24 * 365 , ungettext_lazy ( '%d year' , '%d years' ) ) ,  ( 60 * 60 * 24 * 30 , ungettext_lazy ( '%d month' , '%d months' ) ) ,  ( 60 * 60 * 24 * 7 , ungettext_lazy ( '%d week' , '%d weeks' ) ) ,  ( 60 * 60 * 24 , ungettext_lazy ( '%d day' , '%d days' ) ) ,  ( 60 * 60 , ungettext_lazy ( '%d hour' , '%d hours' ) ) ,  ( 60 , ungettext_lazy ( '%d minute' , '%d minutes' ) )  )
              if jan1_weekday == 5 or ( jan1_weekday == 6 and calendar . isleap ( self . data . year - 1 ) ) :
   def initial_form_count ( self ) :
              try :
    @ register . tag ( 'for' )
 from __future__ import unicode_literals
    forms_valid = True
 if auto_id and 'id' not in attrs and 'id' not in widget . attrs :
  else :
 getattr ( combined , 'add_' + name ) ( getattr ( other , '_' + name , None ) )
          return { }
 if not ip_str . lower ( ) . startswith ( '0000:0000:0000:0000:0000:ffff:' ) :
      def __init__ ( self , * args , ** kwargs ) :
   def add ( self , item ) :
 return from_current_timezone ( result )
   if field . rel . to . _meta . pk . rel :
   def check_for_migrations ( app_config , connection ) :
  return value
  def __init__ ( self ) :
          if size is None or size > self . remaining :
              yield obj
  def add_arguments ( self , parser ) :
              result . append ( self . create_token ( last_bit , ( upto , upto + len ( last_bit ) ) , False ) )
  except OSError as e :
          return "<%s: %s>" % ( self . __class__ . __name__ , self or "None" )
  elif 'public' in cc and 'private' in kwargs :
  if has_old_option and has_new_option :
     try :
 self . plural = lambda n : int ( n != 1 )
  for state , rules in states . items ( ) :
    def int_to_base36 ( i ) :
  self . addr , _ipv4 , _ipv6 , _fqdn , self . port = m . groups ( )
                  self . compile_messages ( locations )
    def getvalue ( self ) :
   def __hash__ ( self ) :
 return Signer ( b'django.http.cookies' + key , salt = salt )
 import os
              if default is not RAISE_ERROR :
    class CacheHandler ( object ) :
 self . lineno = 1
   def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
 if not self . allow_multiple_selected :
 from django . utils . deprecation import RemovedInDjango19Warning
 return FilterNode ( filter_expr , nodelist )
          return self . _queryset
 if cmatch :
  if self . _cull_frequency == 0 :
          try :
 def get_digit ( value , arg ) :
              args = [ 'msgattrib' ] + self . msgattrib_options + [ '-o' , pofile , pofile ]
     def _has_changed ( self , initial , data ) :
                  e . django_template_source = node . source
                  msgs = msgs . decode ( 'utf-8' )
              raise TypeError ( "invalid keyword arguments to print()" )
 if t is not None :
 try :
   callback , param_dict = resolver . resolve_error_handler ( 500 )
              raise TemplateSyntaxError ( "widthratio final argument must be a number" )
 from django . conf import settings
              Model = _get_model ( d [ "model" ] )
  super ( TemporaryUploadedFile , self ) . __init__ ( file , name , content_type , size , charset , content_type_extra )
 def __init__ ( self , token , parser ) :
  if ttl is not None :
 return self . file . name
                      os . makedirs ( filename )
   except ValueError :
   @ property
      def _checkLevel ( level ) :
                  unique = "UNIQUE " if f . unique else ""
   class BadHeaderError ( ValueError ) :
     self . add_error ( None , errors )
 from django . core import signals
 ctx = hashlib . md5 ( )
                handle_app = self . handle_app
      with open ( fn , 'rb' ) as f :
      @ register . tag
   level = config . pop ( 'level' , None )
      status_code = 500
   def merge ( self , other ) :
  else :
   def clean ( self , value ) :
 for w in self . widgets :
   def __repr__ ( self ) :
 parser . add_argument ( '-v' , '--verbosity' , action = 'store' , dest = 'verbosity' , default = '1' ,  type = int , choices = [ 0 , 1 , 2 , 3 ] ,  help = 'Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output' )
          value = force_str ( value )
                  self . appendlist ( force_text ( key , encoding , errors = 'replace' ) ,  force_text ( value , encoding , errors = 'replace' ) )
              callback ( self )
                  raise ImproperlyConfigured (  "Creating a ModelForm without either the 'fields' attribute "  "or the 'exclude' attribute is prohibited; form %s "  "needs updating." % name  )
 from django . test . utils import get_runner
   def fetch_command ( self , subcommand ) :
                  if reduce ( operator . eq , level ) :
    class HttpResponseNotAllowed ( HttpResponse ) :
 self . _expire_info . clear ( )
   def lru_cache ( maxsize = 100 , typed = False ) :
                  if isinstance ( attachment , MIMEBase ) :
          args = [ self . name , self . value , self . attrs ]
 pgettext_lazy = lazy ( pgettext , six . text_type )
          paras = [ '<p>%s</p>' % escape ( p ) . replace ( '\n' , '<br />' ) for p in paras ]
 current_chunk = None
 def upload_handlers ( self , upload_handlers ) :
  except Exception :
          if value is None :
  else :
                      return ( fp . read ( ) . decode ( settings . FILE_CHARSET ) , filepath )
  elif self . required :
  bytes_read = 0
   from django . template . base import ( compile_string , resolve_variable ,  unescape_string_literal , generic_tag_compiler )
              locks . unlock ( fd )
              stamp = time . mktime ( tt )
 from django . core . files . uploadhandler import StopUpload , SkipFile , StopFutureHandlers
  return default
              if t . token_type == TOKEN_BLOCK and t . contents == 'endcomment' :
                      try :
   return out
              pass
 pass
          msgs = msgs . replace ( 'charset=CHARSET' , 'charset=UTF-8' )
 for i in range ( len ( result ) ) :
 result . key = key
          output . extend ( connection . creation . sql_indexes_for_model ( model , style ) )
  else :
              msg = self . style . HTTP_NOT_FOUND ( msg )
   def supports_color ( ) :
              break
 if submod and not module_has_submodule ( import_module ( parentmod ) , submod ) :
      def __init__ ( self , params ) :
      from UserList import UserList
   def _get_name ( self ) :
 parser . add_argument ( '--no-initial-data' , action = 'store_false' , dest = 'load_initial_data' , default = True ,  help = 'Tells Django not to load any initial data after database synchronization.' )
 return '\n' . join ( statements )
                  response = self . get_exception_response ( request , resolver , 404 )
   class Serializer ( base . Serializer ) :
      def __html__ ( self ) :
          super ( UploadedFile , self ) . __init__ ( file , name )
                      os . makedirs ( filename )
     class IfNode ( Node ) :
              res = ''
    def render ( self , context ) :
    return out . getvalue ( )
 from django . dispatch import receiver
 from django . utils . module_loading import import_string
   try :
 while 1 :
  pop_context = False
      return _trans . ungettext ( singular , plural , number )
  elif msg :
 value = environ . get ( str ( key ) , str ( default ) )
 widget = widget or self . widget
 for app_config in apps . get_app_configs ( ) :
 result = str ( int ( round ( ratio ) ) )
              connection . check_constraints ( table_names = table_names )
              self . _set ( key , pickled , timeout )
  filename = os . path . join ( to_path , name )
 def __init__ ( self , url , length , mime_type ) :
                  var , constant = match . group ( "var" , "constant" )
 if definition :
 c = config . pop ( '()' )
  if not plan :
              body_msg = msg
    def sql_all ( app_config , style , connection ) :
 if f . primary_key :
              encoding = self . encoding or settings . DEFAULT_CHARSET
  except ImportError :
              if callable ( name ) :
 for message in messages :
 max_width = int ( self . max_width . resolve ( context ) )
          with open ( path , 'a' ) :
 prefix_length = len ( template_dir ) + 1
                                  raise ValueError ( 'Unable to configure handler '  '%r: %s' % ( name , e ) )
 try :
 value = value . replace ( b'\\\\' , b'\\' ) . replace ( b'\\"' , b'"' )
 return chain ( * [  [ format_html ( '<link href="{0}" type="text/css" media="{1}" rel="stylesheet" />' , self . absolute_path ( path ) , medium )  for path in self . _css [ medium ] ]  for medium in media ] )
 for name in sorted ( handlers ) :
    def get_bytes_from_wsgi ( environ , key , default ) :
 from django . utils . deprecation import RemovedInDjango19Warning
      def wrapper ( * args , ** kwargs ) :
 os . close ( fd )
 return Template ( source , origin , name )
       def __init__ ( self , name ) :
    for i , handler in enumerate ( handlers ) :
                  break
   if t . token_type == TOKEN_BLOCK :
             self . _regex = regex
 tok = toks [ name ]
  else :
  MONTHS_ALT = {  1 : pgettext_lazy ( 'alt. month' , 'January' ) ,  2 : pgettext_lazy ( 'alt. month' , 'February' ) ,  3 : pgettext_lazy ( 'alt. month' , 'March' ) ,  4 : pgettext_lazy ( 'alt. month' , 'April' ) ,  5 : pgettext_lazy ( 'alt. month' , 'May' ) ,  6 : pgettext_lazy ( 'alt. month' , 'June' ) ,  7 : pgettext_lazy ( 'alt. month' , 'July' ) ,  8 : pgettext_lazy ( 'alt. month' , 'August' ) ,  9 : pgettext_lazy ( 'alt. month' , 'September' ) ,  10 : pgettext_lazy ( 'alt. month' , 'October' ) ,  11 : pgettext_lazy ( 'alt. month' , 'November' ) ,  12 : pgettext_lazy ( 'alt. month' , 'December' )  }
      @ register . filter ( "timesince" , is_safe = False )
    if sizeof ( c_ulong ) != sizeof ( c_void_p ) :
                  raise RawPostDataException ( "You cannot access body after reading from request's data stream" )
   def get_nodes_by_type ( self , nodetype ) :
   return super ( BaseModelFormSet , self ) . _construct_form ( i , ** kwargs )
   return key , pdict
     class JsLexer ( Lexer ) :
              if e . errno != errno . ENOENT :
 model_identifier = node . getAttribute ( attr )
                  loaders . append ( loader )
      ungettext = ngettext
          try :
  else :
          if arg :
          if lang is None :
              yield
 new_class . declared_fields = declared_fields
 if not match :
  except Exception :
              return None
              ignore_patterns += [ 'CVS' , '.*' , '*~' , '*.pyc' ]
    if field_type == 'CharField' and row [ 3 ] :
 if "\n" in self . __starttag_text :
                                  break
 return cache
 continue
    encode = curry ( _proxy_method , method = six . text_type . encode )
 basedirs . extend ( [ upath ( path ) for path in settings . LOCALE_PATHS ] )
 from django . db . migrations . executor import MigrationExecutor
 if self . activated :
                          raise ValueError ( 'Unable to configure logger '  '%r: %s' % ( name , e ) )
 result = self . configurator . convert ( value )
  except ( TypeError , AttributeError ) :
    return script_name . decode ( UTF_8 )
   def compile_function_error ( self , token , e ) :
              token = tokens [ i ]
 def __init__ ( self , data , func , prefix ) :
  try :
 return self
          ch = None
          return self
                  self . stdout . write ( "No changes detected in app '%s'" % app_labels . pop ( ) )
   plan = executor . migration_plan ( targets )
      return ugettext ( message )
 result = self . configurator . convert ( value )
   save . alters_data = True
 self . proxy = False
 self . xgettext_options = self . xgettext_options [ : ] + [ '--no-wrap' ]
    def has_key ( self , key , version = None ) :
          view = viewname
              warnings . warn ( "``--natural`` is deprecated; use ``--natural-foreign`` instead." ,  RemovedInDjango19Warning )
 fileno = property ( lambda self : self . file . fileno )
    def to_python ( self , value ) :
          if self . base_url is None :
 self . setFeature ( handler . feature_external_pes , False )
 os . dup2 ( si . fileno ( ) , sys . stdin . fileno ( ) )
              raise TemplateSyntaxError ( "Invalid arguments provided to simple_tag" )
          stream_or_string = stream_or_string . read ( )
                                  filemsg = 'file %s, ' % origin
  errors . extend ( e . error_list )
 internal_use_only = False
 pass
          locale = options . get ( 'locale' )
                  msg += '\n'
 field_params . update ( new_params )
               ttl = force_text ( ttl )
           if isinstance ( o , datetime . datetime ) :
  return plist
 if self . args :
          global _supported
    from django . conf import settings
              return o . isoformat ( )
          sep = len ( hextet [ 0 ] . split ( ':' ) ) + len ( hextet [ 1 ] . split ( ':' ) )
 parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
  else :
 if not template_dirs :
   def __next__ ( self ) :
  def __init__ ( self , tokens ) :
 if new_value == value :
               if hasattr ( base , 'declared_fields' ) :
          if child . nodeType == child . TEXT_NODE or child . nodeType == child . CDATA_SECTION_NODE :
 return '%02d' % self . data . day
                return ( self . __newobj__ , ( self . __class__ , ) , self . __getstate__ ( ) )
   default = 'DEFAULT'
     class ExtendsNode ( Node ) :
 @ stringfilter
    def value_from_datadict ( self , data , files , name ) :
 if not m :
          fill_to = 7
 method = kwargs . pop ( 'method' )
 original_path = os . path . join ( tmpdir , 'original' )
              if not self . _has_expired ( key ) :
              return value
                      self . stdout . write ( "  %s:\n" % ( self . style . MIGRATE_LABEL ( writer . filename ) , ) )
              for subnode in node :
  else :
   def __iter__ ( self ) :
   if formfield :
 self . _non_form_errors = self . error_class ( )
                              self . handle_field ( obj , field )
   offset = self . timezone . utcoffset ( self . data )
  def u ( s ) :
  return six . text_type ( name )
 sys . stderr . write ( "  as a FastCGI application, you will need to get flup from\n" )
          sys . path . insert ( 0 , options . pythonpath )
    if ns_pattern :
              bytes_read += len ( bytes )
 def split_leading_dir ( self , path ) :
   class EmailBackend ( BaseEmailBackend ) :
      return _trans . pgettext ( context , message )
           compressed = zlib . compress ( data )
 return data
 self . _input_data = input_data
                      transfer_encoding = transfer_encoding [ 0 ] . strip ( )
 def slugify ( value ) :
 from django . core . serializers . base import DeserializationError
   try :
   __all__ = ( 'BaseFormSet' , 'formset_factory' , 'all_valid' )
          value = super ( TypedMultipleChoiceField , self ) . clean ( value )
    opts = tuple ( s for s in styles if s in opt_dict . keys ( ) )
          self . db_table = table
 import re
          if self . _isdst ( dt ) :
 class_types = type ,
  kwargs = dict ( ( k , config [ k ] ) for k in config if valid_ident ( k ) )
   fields = (   models . CharField ( name = 'cache_key' , max_length = 255 , unique = True , primary_key = True ) ,  models . TextField ( name = 'value' ) ,  models . DateTimeField ( name = 'expires' , db_index = True ) ,  )
          int_part , dec_part = str_number , ''
 if basetype == 'text' :
                      if line . lstrip ( ) . startswith ( TRANSLATOR_COMMENT_MARK ) :
   def add_handlers ( self , logger , handlers ) :
 from django . test . utils import get_runner
   else :
import logging
    def get_serializer ( format ) :
 if app_config . models_module is None :
  else :
          return False
  return wrapper
  else :
      return _trans . to_locale ( language )
              package_name = package . __name__
          result = copy . copy ( self )
  except KeyError :
   def server_bind ( self ) :
                  num += 1
 def __init__ ( self , func , name = None ) :
          response [ 'ETag' ] = '"%s"' % hashlib . md5 ( response . content ) . hexdigest ( )
 if ( self . negate and val1 != val2 ) or ( not self . negate and val1 == val2 ) :
 basedirs = [ os . path . abspath ( basedir ) for basedir in basedirs  if os . path . isdir ( basedir ) ]
  return value
              args = list ( args )
   def pop ( self , key , * args ) :
  props = config . pop ( '.' , None )
 for form in valid_forms :
   def get_connection ( self , fail_silently = False ) :
              raise ValueError ( "Unsupported version: %s" % config [ 'version' ] )
                    if e . args [ 0 ] . startswith ( "Error -5" ) :
   if six . PY3 :
              source , display_name = loader ( name , dirs )
    if hasattr ( middleware , 'process_response' ) :
   return d
   with connection . constraint_checks_disabled ( ) :
                      raise CommandError ( 'Unknown app in excludes: %s' % exclude )
  result . append ( ( lang , priority ) )
  pythonrc = os . path . expanduser ( pythonrc )
 return do_ntranslate ( singular , plural , number , 'ungettext' )
 global _supported
              raise CommandError ( 'Your Python does not support IPv6.' )
 if _standard_context_processors is None :
   def to_python ( self , value ) :
              logging_config_func ( logging_settings )
   def __eq__ ( self , other ) :
                  self . first = False
    def write_items ( self , handler ) :
  elif common_prefix is None :
      fmt = get_format ( 'DATE_FORMAT' )
 from django . core . management . utils import handle_extensions
   def as_text ( self , attrs = None , ** kwargs ) :
  if remaining is None :
 for form in valid_forms :
  autodetector = MigrationAutodetector (  executor . loader . project_state ( ) ,  ProjectState . from_apps ( apps ) ,  )
  except AttributeError :
  else :
                  block_content = token_string [ 2 : - 2 ] . strip ( )
   else :
  elif token_string . startswith ( COMMENT_TAG_START ) :
 tmpdir = tempfile . mkdtemp ( )
      class VerbatimNode ( Node ) :
          value = [ conditional_escape ( v ) for v in value ]
   def value_from_datadict ( self , data , files , name ) :
    return False
 year_val , month_val , day_val = v . year , v . month , v . day
            obj = form . save ( commit = False )
  except TypeError :
 from django . utils import six
           renderer = kwargs . pop ( 'renderer' , None )
 if settings . FORCE_SCRIPT_NAME is not None :
              if not callable ( original_lookup ) and callable ( lookup_view ) :
 return self . get ( key , version = version ) is not None
 mail = EmailMultiAlternatives ( subject , message , from_email , recipient_list ,  connection = connection )
   def render ( self , name , value , attrs = None ) :
          return
    def _itervalues ( self ) :
  if delta < 0 :
  except ( TypeError , ValueError , UnicodeDecodeError ) :
 if self_closing or tagname in html4_singlets :
      random = random . SystemRandom ( )
    def tzname ( self , dt ) :
 try :
          if escaped :
 return time_str + '%+03d:%02d' % ( hour , minute )
                  if six . PY3 :
 if num > self . _max_entries :
   requires_system_checks = False
 statements = [ ]
                          pass
  return [ m2m_convert ( c ) for c in node . getElementsByTagName ( "object" ) ]
  def b ( self ) :
          new_keys = [ self . make_key ( x , version = version ) for x in keys ]
    model_dependencies . append ( ( model , deps ) )
  result = self . stream . read ( size )
 from django . utils import six
 self . tag ( function_name , compile_func )
          offset = offset . seconds // 60
          try :
                                          cursor . execute ( sql )
   from django . template . base import ( ALLOWED_VARIABLE_CHARS , BLOCK_TAG_END ,  BLOCK_TAG_START , COMMENT_TAG_END , COMMENT_TAG_START ,  FILTER_ARGUMENT_SEPARATOR , FILTER_SEPARATOR , SINGLE_BRACE_END ,  SINGLE_BRACE_START , TOKEN_BLOCK , TOKEN_COMMENT , TOKEN_TEXT , TOKEN_VAR ,  TRANSLATOR_COMMENT_MARK , UNKNOWN_SOURCE , VARIABLE_ATTRIBUTE_SEPARATOR ,  VARIABLE_TAG_END , VARIABLE_TAG_START , filter_re , tag_re )
          file = file_or_path
       def make_msgid ( idstring = None ) :
              if can_fail :
 tried_modules . append ( taglib_module )
   def make_key ( self , key , version = None ) :
  self . extensions = handle_extensions ( exts )
                  data [ field . attname ] = self . _handle_fk_field_node ( field_node , field )
              app_names = sorted ( loader . migrated_apps )
 if app_output :
          super ( _LazyModule , self ) . __init__ ( name )
              content_length = int ( environ . get ( 'CONTENT_LENGTH' ) )
 sys . stdout . close ( )
 def use_argparse ( self ) :
              form = self . forms [ i ]
 parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
   if errors :
   if count == 0 :
              raise CommandError ( "Cannot find a migration matching '%s' from app '%s'." % ( migration_name , app_label ) )
              del moves . __dict__ [ name ]
 self . initial_extra = kwargs . pop ( 'initial' , None )
 def __init__ ( self , * args , ** kwargs ) :
                          root , = nonlocal_root
   work_file = os . path . join ( self . dirpath , thefile )
  except ImportError :
   except KeyError :
 class BaseValidator ( object ) :
     if not settings . is_overridden ( 'TEST_RUNNER' ) :
   else :
  def __init__ ( self , takes_context , args , kwargs ) :
  if value is not result :
          self . dict = OrderedDict ( ( ( x , None ) for x in iterable ) if iterable else [ ] )
              deactivate ( )
   def clean ( self ) :
           current_fields = [ ]
   def __repr__ ( self ) :
 return result
              token = self . next_token ( )
                          os . umask ( old_umask )
 commands = { name : 'django.core' for name in find_commands ( __path__ [ 0 ] ) }
              file = data . temporary_file_path ( )
          return [ ]
     class FilterNode ( Node ) :
  elif isinstance ( template , six . string_types ) :
 self . hint = hint
 try :
              deactivate ( )
 return FilterExpression ( token , self )
 try :
  slugify = allow_lazy ( slugify , six . text_type )
  target = parser . compile_filter ( bits [ 1 ] )
 self . buffer = self . buffer [ size : ]
  if hasattr ( decorator , '__name__' ) :
              output . append ( options )
    class DictWrapper ( dict ) :
  BLOCK_CONTEXT_KEY = 'block_context'
  file_name = force_text ( file_name , encoding , errors = 'replace' )
   connection_class = smtplib . SMTP_SSL if self . use_ssl else smtplib . SMTP
                  disable_existing = config . pop ( 'disable_existing_loggers' , True )
 etags = ETAG_MATCH . findall ( etag_str )
              if self . _has_expired ( key ) :
 self . value = value
 import sys
          return True
          y = data . get ( self . year_field % name )
   def clean ( self , value ) :
              if self . _read_started :
               context [ self . var_name ] = [ ]
              attr_list = termios . tcgetattr ( fd )
 self . add_root_elements ( handler )
 def ifequal ( parser , token ) :
       def __init__ ( self , input_formats = None , * args , ** kwargs ) :
  except ValidationError :
          if hasattr ( self , 'error_dict' ) :
 self . name , self . value = name , value
     existing . sort ( )
       except Exception as e :
 return DebugNode ( )
          return strftime ( self , fmt )
  return serializer ( ) . loads ( data )
  return output
 try :
          _load_serializers ( )
          for d in reversed ( self . dicts ) :
 if not prefix :
              self . _servers = server . split ( ';' )
  filter_re = re . compile ( filter_raw_string , re . UNICODE | re . VERBOSE )
              raise ValueError (  "make_aware expects a naive datetime, got %s" % value )
      try :
  return force_text ( s , encoding , strings_only , errors )
 filters . append ( ( filter_func , args ) )
   def parse_color_setting ( config_string ) :
              field_notes . append ( 'Field renamed to remove unsuitable characters.' )
 if param :
              return
          if args :
 from django . utils . translation import ungettext , ugettext as _
 results = ( [ ] , [ ] )
              result . setlist ( key , value )
                  self . stdout . write ( self . style . MIGRATE_LABEL ( "  Synchronize unmigrated apps: " ) + ( ", " . join ( executor . loader . unmigrated_apps ) ) )
              value = self . _empty_value
   def _has_changed ( self , initial , data ) :
    def find_template ( self , name , dirs = None ) :
 if isinstance ( s , Promise ) :
 return base64 . urlsafe_b64decode ( s + pad )
   warnings . warn ( "django.utils.importlib will be removed in Django 1.9." ,  RemovedInDjango19Warning , stacklevel = 2 )
  else :
 def reverse_dict ( self ) :
 if form . errors :
                  if not token . contents :
   response . _handler_class = self . __class__
          BaseCache . __init__ ( self , params )
          self . name = name
      from django . utils . six . moves import _dummy_thread as thread
 if key . startswith ( self . prefix ) :
 literal_regex = re . compile (   r'\[([A-f0-9:\.]+)\]$' ,  re . IGNORECASE )
    wrapper . __wrapped__ = user_function
  except InvalidTemplateLibrary as e :
   args = [ ]
      class InlineForeignKeyField ( Field ) :
 return token
          return True
   def file_complete ( self , file_size ) :
    class FileBasedCache ( BaseCache ) :
 return s . getvalue ( )
                              extra_params [ 'blank' ] = True
              return _ ( 'midnight' )
  except ImportError as e :
 def __init__ ( self , mode = 'w+b' , bufsize = - 1 , suffix = '' , prefix = '' ,  dir = None ) :
 iterlists = _iterlists
                        unhandled_params . remove ( param )
   try :
 one_percent_re = re . compile ( r"""(?<!%)%(?!%)""" )
   def send_messages ( self , email_messages ) :
 for i , line in enumerate ( table_output ) :
 with io . open ( work_file , "w" , encoding = 'utf-8' ) as fp :
 from django . utils . encoding import smart_text , force_text , python_2_unicode_compatible
                  return False
  else :
  else :
      mapping = { 'openblock' : BLOCK_TAG_START ,  'closeblock' : BLOCK_TAG_END ,  'openvariable' : VARIABLE_TAG_START ,  'closevariable' : VARIABLE_TAG_END ,  'openbrace' : SINGLE_BRACE_START ,  'closebrace' : SINGLE_BRACE_END ,  'opencomment' : COMMENT_TAG_START ,  'closecomment' : COMMENT_TAG_END ,  }
          if k == 'fg' :
  while start < end :
  else :
  else :
              self . fetch_command ( subcommand ) . run_from_argv ( self . argv )
          class NumberAwareString ( resultclass ) :
  from __future__ import unicode_literals
              self [ : ] = tup
      _tc . load ( str ( 'foo:bar=1' ) )
   def __copy__ ( self ) :
 self . template_cache . clear ( )
 from django . template . base import TemplateDoesNotExist
                      pass
  int_part_gd += digit
          if self . _isdst ( dt ) :
      _cookie_allows_colon_in_names = False
  hextets [ best_doublecolon_start : best_doublecolon_end ] = [ '' ] 
                        tt = ( 2037 , ) + tt [ 1 : ]
  self . _boundary = boundary
              raise CommandError ( msg )
                      pass
                  if middle . endswith ( punctuation ) :
 from django . utils . html import conditional_escape , format_html
                  args = ( )
 self . location = abspathu ( self . base_location )
 if sys . platform . startswith ( 'java' ) :
  new_value = [ ]
   def validate ( self , value ) :
  else :
 parser . add_argument ( '--natural-primary' , action = 'store_true' , dest = 'use_natural_primary_keys' , default = False ,  help = 'Use natural primary keys if they are available.' )
   return False
  else :
              class dummy :
 if p >= 0 :
              self . namespaces = [ x for x in namespaces if x ]
    def force_bytes ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) :
 parser . skip_past ( 'endcomment' )
               age = time . time ( ) - timestamp
     def incr_version ( self , key , delta = 1 , version = None ) :
              new_errors = check ( app_configs = app_configs )
  except ValidationError as e :
  register_to = kwargs . get ( 'register_to' )
 substitutions [ 'initial' ] = format_html ( self . url_markup_template ,  value . url ,  force_text ( value ) )
                  want_unicode = True
          if message is not None :
          return hmac . compare_digest ( force_bytes ( val1 ) , force_bytes ( val2 ) )
               klass = app_name
 if len ( password ) > inner . block_size :
  tzinfo = kw . pop ( 'tzinfo' )
                  os . remove ( name )
  try :
          try :
              all_models . extend ( router . get_migratable_models ( app_config , database , include_auto_created = True ) )
  def items ( self ) :
                          pop_context = True
  else :
 attrs [ 'declared_fields' ] = OrderedDict ( current_fields )
 sys . exit ( 1 )
              return data . getlist ( name )
 parser . add_argument ( '--dry-run' , action = 'store_true' , dest = 'dry_run' , default = False ,  help = "Just show what migrations would be made; don't actually write them." )
          self . _wrapped = empty
 if new_name != col_name :
              return ''
  else :
  if record . exc_info :
 self . help_texts = getattr ( options , 'help_texts' , None )
                  end_index = i
          self . max_value , self . min_value = max_value , min_value
 for i , widget in enumerate ( self . widgets ) :
    class AppRegistryNotReady ( Exception ) :
  if errors :
              for dirpath , dirnames , locale_filenames in os . walk ( basedir ) :
              fields = new_class . declared_fields
 try :
          csrf_token = context . get ( 'csrf_token' , None )
 from django . db import models , DEFAULT_DB_ALIAS
   else :
              if bit :
     ip_str = _explode_shorthand_ip_string ( ip_str )
     set_script_prefix ( get_script_name ( environ ) )
   return "%s.%s" % ( package [ : dot ] , name )
    class Command ( BaseCommand ) :
   from django . conf import settings
 can_import_settings = True
   def with_metaclass ( meta , * bases ) :
 inner_args . extend ( args )
 for candidate in glob . iglob ( os . path . join ( fixture_dir , fixture_name + '*' ) ) :
      def abspathu ( path ) :
 to_unicode = lambda s : force_text ( s , strings_only = True )
 from django . utils . translation import TranslatorCommentWarning , trim_whitespace , LANGUAGE_SESSION_KEY
          assert name , "The name argument is not allowed to be empty."
          self . _caches = local ( )
     FILE_INPUT_CONTRADICTION = object ( )
   if self . can_delete and self . _should_delete_form ( form ) :
 import shutil
          cache . close ( )
   def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
  patch_cache_control ( response , max_age = cache_timeout )
 if self . choices :
 raise NotImplementedError ( 'subclasses of Serializer must provide a start_object() method' )
 from django . core . cache import caches
 prefix = self . add_prefix ( fieldname )
          if self . required and not value :
  return attrs
   def decr ( self , key , delta = 1 , version = None ) :
          if app_config . models_module is None :
                  if field != NON_FIELD_ERRORS and field not in self . fields :
 table = connections [ db ] . ops . quote_name ( self . _table )
             chunk_size = 1024
   class Node ( object ) :
 exctype , value = exc_info [ : 2 ]
 self . _num_pages = int ( ceil ( hits / float ( self . per_page ) ) )
  elif args [ 1 ] [ 0 ] == '4' :
  def handle ( self , ** options ) :
   for model in model_list :
 import sys
 boundary = self . _find_boundary ( chunk , len ( chunk ) < self . _rollback )
 self . __kw = kw
     m2m_data = { }
  return I18N_MODIFIED if filename . endswith ( '.mo' ) else FILE_MODIFIED
   @ property
                      usage . append ( "    %s" % name )
   def W ( self ) :
                              os . mkdir ( migrations_directory )
  else :
   def render ( self , name , value , attrs = None , choices = ( ) ) :
   def _handle_fk_field_node ( self , node , field ) :
 self . can_write . release ( )
              if isinstance ( field , InlineForeignKeyField ) :
                  value = value . replace ( replacement , '' )
            opts = self . _meta
          _load_serializers ( )
 self . key = key or settings . SECRET_KEY
 from django . core . files . uploadedfile import TemporaryUploadedFile , InMemoryUploadedFile
 _func_defaults = "__defaults__"
 left = t . led ( left , self )
 if since <= 0 :
  def add_arguments ( self , parser ) :
              media = media + field . widget . media
  getLogger = logging . getLogger
              data = self . to_python ( data )
              potfiles = self . build_potfiles ( )
   self . set ( key , value , version = version + delta )
    class ModelFormOptions ( object ) :
   return mail . send ( )
              raise IOError ( "%s exists and is not a directory." % directory )
    return self [ key ]
   def invalid_block_tag ( self , token , command , parse_until = None ) :
 context_extras [ 'LANGUAGES' ] = settings . LANGUAGES
    def smart_bytes ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) :
              self . _current [ field . name ] = field . value_to_string ( obj )
    def _itervalues ( self ) :
  else :
              name , value = main_value_pair . split ( ':' , 1 )
 setattr ( base , old_method_name , wrapper ( old_method ) )
   def num_items ( self ) :
   def handle ( self , * app_labels , ** options ) :
              return self . _render ( context )
 if y == m == d == "0" :
      def copy_plural_forms ( self , msgs , locale ) :
  else :
 from ctypes . wintypes import BOOL , DWORD , HANDLE
 c = [ ]
 return range ( 1 , self . num_pages + 1 )
 try :
 if options :
 key = bytes_to_text ( key , self . encoding )
  if exclude and f . name in exclude :
 def __init__ ( self , name , sysid , pubid ) :
                  self . create_table ( db , tablename )
  else :
   def _create_attachments ( self , msg ) :
 if field_type not in ( 'TextField(' , 'CharField(' ) :
 from django . template . loader import get_template
              self . cookies [ key ] [ 'secure' ] = True
   __all__ = ( 'BaseForm' , 'Form' )
   if initial is not None :
              super ( TypedMultipleChoiceField , self ) . validate ( value )
 return size
              parser . _namedCycleNodes = { }
          return language [ : p ] . lower ( ) + '_' + language [ p + 1 : ] . upper ( )
 while x > 0 :
 sep = kwargs . pop ( "sep" , None )
  from collections import OrderedDict
    cls . _delegate_bytes = bytes in resultclasses
 for var in loopvars :
 _assertRaisesRegex = "assertRaisesRegexp"
                  filename = ev . filename
 from django . core . management . base import BaseCommand
                  return min ( self . management_form . cleaned_data [ TOTAL_FORM_COUNT ] , self . absolute_max )
      def __init__ ( self , name , params ) :
              self . stdout . write ( statement )
               exhaust ( self . _input_data )
 warnings . warn ( "resolve_variable() is deprecated. Use django.template."  "Variable(path).resolve(context) instead" ,  RemovedInDjango20Warning , stacklevel = 2 )
  _tc = http_cookies . SimpleCookie ( )
   @ property
                      os . makedirs ( directory )
 if _win :
   def _proxy_method ( self , * args , ** kwargs ) :
 if not isinstance ( list_ , ( tuple , list ) ) or len ( list_ ) != 2 :
 return [ field for field in self if not field . is_hidden ]
              sys . exit ( 3 )
   try :
  get_text_list = allow_lazy ( get_text_list , six . text_type )
              return self . _truncate_html ( length , truncate , self . _wrapped , length , True )
    def _is_expired ( self , f ) :
  else :
          raise InvalidCacheBackendError (  "Could not find backend '%s': %s" % ( backend , e ) )
  return [ k for k , v in six . iteritems ( _serializers ) if not v . Serializer . internal_use_only ]
              if self . verbosity >= 1 :
          return False
 try :
  else :
              end = newline
 root [ : ] = [ root , root , None , None ]
 in_index = - 3 if is_reversed else - 2
 if nodelist_empty is None :
   return self . check ( app_configs = app_configs , display_num_errors = display_num_errors )
          return iter ( self . keyOrder )
              yield key , self [ key ]
 self . keyOrder . remove ( result [ 0 ] )
 representative = ESCAPE_MAPPINGS . get ( ch , ch )
              mtime -= stat . st_ctime
  url_info = urlparse ( url )
 try :
 statements = sql_all ( app_config , self . style , connection )
   copystat ( old_file_name , new_file_name )
      help = "Runs this project as a FastCGI application. Requires flup."
          m = int ( d ) - d
      from django . core . mail . utils import CachedDnsName , DNS_NAME
              if '--commands' in args :
        class FixedOffset ( tzinfo ) :
  import re
  if response is None :
                    raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
 def get_ns_resolver ( ns_pattern , resolver ) :
  else :
                      locale_dir = None
  else :
 return res
          if name . lower ( ) in ADDRESS_HEADERS :
           value = timezone . normalize ( value )
 global _format_cache , _format_modules_cache
 s = get_serializer ( format ) ( )
   return data
  else :
              return x
 location = params . pop ( 'LOCATION' , '' )
 return self . renderer ( name , value , final_attrs , choices )
              if mime_encode :
 connection = connections [ db ]
 ext_list = [ ]
   else :
  import hmac
    class Paginator ( object ) :
              daemonize = True
   header = chunk [ : header_end ]
 self . keyOrder = [ ]
 substitutions [ 'clear_template' ] = self . template_with_clear % substitutions
 super ( Field , self ) . __init__ ( )
  except NameError :
 from django . db . migrations . loader import AmbiguityError
              raise self . warning
              return
 input_formats = formats . get_format_lazy ( 'DATETIME_INPUT_FORMATS' )
  self . stdout . write ( "Performing system checks...\n\n" )
              raise ValidationError ( self . message , code = self . code )
    def linebreaks ( value , autoescape = False ) :
          self . var = var
   year = year + ( ( 2000 - year ) // 28 ) * 28
              value = ''
 value = template_localtime ( value , use_tz = context . use_tz )
                                  getcallargs ( current )
 _assertRaisesRegex = "assertRaisesRegex"
 output = [ pformat ( val ) for val in context ]
                          translators_comment_start = lineno
  forms = [ self . _construct_form ( i ) for i in xrange ( self . total_form_count ( ) ) ]
  else :
  else :
  else :
 s = s . replace ( '\r' , '\\r' )
   def z ( self ) :
 del kwargs [ 'warning' ]
              os . makedirs ( basedir )
          self . _read_started = True
 self . default_kwargs = default_kwargs or { }
 __str__ = new_method_proxy ( str )
 return forms
              token = self . next_token ( )
 template = Template ( content )
                              if self . verbosity >= 3 :
 self . _namespace_dict = { }
   def _delete ( self , fname ) :
          if isinstance ( self . warning , Exception ) :
      return import_string ( import_path or settings . DEFAULT_FILE_STORAGE )
          self . id = Tok . num
                   def dec ( func ) :
                  yield field , list ( ValidationError ( errors ) )
   return style
              return force_text ( value )
              exclude = form . _get_validation_exclusions ( )
                      app_config = apps . get_app_config ( exclude )
  return self . _encoding
   def _get_size ( self ) :
   class Command ( BaseCommand ) :
 endtag_re = re . compile ( '</%s>' % tags_re )
   return value
              _locs_ = _globs_
  path = path_override if path_override is not None else request . path
                  result . parent = self
  def __init__ ( self , max_value = None , min_value = None , * args , ** kwargs ) :
              return six . unichr ( html_entities . name2codepoint [ text ] )
              if msg :
           return self . client_address [ 0 ]
   try :
 from django . utils import six
                          continue
                  os . makedirs ( self . _dir , 0o700 )
                      if translators_comment_start is not None and lineno >= translators_comment_start :
  import errno
   def _reset_dicts ( self , value = None ) :
          pass
    class SuspiciousFileOperation ( SuspiciousOperation ) :
          iterator = ChunkIter ( stream_or_iterable , 16384 )
          self . attrs = attrs or { }
 from django . core . servers . basehttp import run , get_internal_wsgi_application
 def get_callable ( lookup_view , can_fail = False ) :
   def __setitem__ ( self , header , value ) :
              raise AttributeError ( attr )
 parser . add_option ( '--traceback' , action = 'store_true' ,  help = 'Raise on exception' )
    if self . verbosity >= 1 :
              thousand_sep = get_format ( 'THOUSAND_SEPARATOR' )
  if not use_workaround :
          parser . add_argument ( '--locale' , '-l' , default = [ ] , dest = 'locale' , action = 'append' ,  help = 'Creates or updates the message files for the given locale(s) (e.g. pt_BR). '  'Can be used multiple times.' )
 from django . utils . six import StringIO
              self . connection = get_connection ( fail_silently = fail_silently )
 from functools import partial
          fp . write ( msgs )
   def as_tuple ( self , value ) :
    @ property
 is_required = False
 interactive = options . get ( 'interactive' )
          value = field . _get_val_from_obj ( obj )
  super ( TextInput , self ) . __init__ ( attrs )
 for bit in bits :
 if s == '"' :
    function_name = ( name or  getattr ( func , '_decorated_function' , func ) . __name__ )
           raise EntitiesForbidden ( name , None , base , sysid , pubid , notation_name )
 parts = parts [ : - 1 ]
 try :
          command = load_command_class ( app_name , name )
   def __repr__ ( self ) :
              f . seek ( 0 )
              categories = [ force_text ( c ) for c in categories ]
 singular = [ ]
                  if ignore_failures :
                       name = "_%d" % num_args
               msg = self . style . HTTP_SUCCESS ( msg )
 if csrf_token :
    def clean ( self ) :
 silent = True
 chunk = handler . receive_data_chunk ( chunk ,  counters [ i ] )
                      if not pythonrc :
 raise NotImplementedError ( 'subclasses of BaseCache must provide a clear() method' )
              if self . field . choice_cache is None :
    def tz ( request ) :
                  self . set_payload ( text , utf8_charset )
                          i = existing . index ( name )
  bits . append ( force_text ( bit ) )
    widget . is_required = self . required
 from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT
  if has_old_option :
              cmp_fmt = parts [ - 1 ]
              selected_html = ''
 if not dklen :
                  token = Token ( TOKEN_VAR , token_string [ 2 : - 2 ] . strip ( ) )
     class RequireDebugTrue ( logging . Filter ) :
                  self . active_readers += 1
     class EmailMessage ( object ) :
  model_dependencies = skipped
  from django . apps import apps
  name = _resolve_name ( name [ level : ] , package , level )
                      relations = connection . introspection . get_relations ( cursor , table_name )
          try :
          return types . MethodType ( func , obj , obj . __class__ )
              return ''
 parser . add_argument ( '--exclude' , '-x' , dest = 'exclude' , action = 'append' , default = [ ] ,  help = 'Locales to exclude. Default is none. Can be used multiple times.' )
      _prefixes = local ( )
   def reraise ( tp , value , tb = None ) :
 silent = False
     class ForNode ( Node ) :
   if hasattr ( test_runner_class , 'add_arguments' ) :
  else :
   def __next__ ( self ) :
                          self . bad_cookies = set ( )
 is_compressed = True
 self . toks = { }
 run_checks = registry . run_checks
    if item [ 'enclosure' ] is not None :
              for line in self . handle_inspection ( options ) :
  if DEFAULT_CACHE_ALIAS not in settings . CACHES :
              output = self . _leftover
   def as_widget ( self , widget = None , attrs = None , only_initial = False ) :
    else :
                  result |= x ^ y
     not_installed_models = set ( pending_references . keys ( ) )
   except OSError as e :
                       pass
              return val if isinstance ( val , bytes ) else val . encode ( encoding )
 self . auto_id = auto_id
  threading = options . get ( 'use_threading' )
              return b''
  except TemplateDoesNotExist as e :
     def parse_etags ( etag_str ) :
              if not package :
  return mark_safe ( '\n' . join ( output ) )
              self . _encoding = settings . DEFAULT_CHARSET
    _moved_attributes = [  MovedAttribute ( "cStringIO" , "cStringIO" , "io" , "StringIO" ) ,  MovedAttribute ( "filter" , "itertools" , "builtins" , "ifilter" , "filter" ) ,  MovedAttribute ( "filterfalse" , "itertools" , "itertools" , "ifilterfalse" , "filterfalse" ) ,  MovedAttribute ( "input" , "__builtin__" , "builtins" , "raw_input" , "input" ) ,  MovedAttribute ( "map" , "itertools" , "builtins" , "imap" , "map" ) ,  MovedAttribute ( "range" , "__builtin__" , "builtins" , "xrange" , "range" ) ,  MovedAttribute ( "reload_module" , "__builtin__" , "imp" , "reload" ) ,  MovedAttribute ( "reduce" , "__builtin__" , "functools" ) ,  MovedAttribute ( "StringIO" , "StringIO" , "io" ) ,  MovedAttribute ( "UserString" , "UserString" , "collections" ) ,  MovedAttribute ( "xrange" , "__builtin__" , "builtins" , "xrange" , "range" ) ,  MovedAttribute ( "zip" , "itertools" , "builtins" , "izip" , "zip" ) ,  MovedAttribute ( "zip_longest" , "itertools" , "itertools" , "izip_longest" , "zip_longest" ) ,   MovedModule ( "builtins" , "__builtin__" ) ,  MovedModule ( "configparser" , "ConfigParser" ) ,  MovedModule ( "copyreg" , "copy_reg" ) ,  MovedModule ( "dbm_gnu" , "gdbm" , "dbm.gnu" ) ,  MovedModule ( "http_cookiejar" , "cookielib" , "http.cookiejar" ) ,  MovedModule ( "http_cookies" , "Cookie" , "http.cookies" ) ,  MovedModule ( "html_entities" , "htmlentitydefs" , "html.entities" ) ,  MovedModule ( "html_parser" , "HTMLParser" , "html.parser" ) ,  MovedModule ( "http_client" , "httplib" , "http.client" ) ,  MovedModule ( "email_mime_multipart" , "email.MIMEMultipart" , "email.mime.multipart" ) ,  MovedModule ( "email_mime_text" , "email.MIMEText" , "email.mime.text" ) ,  MovedModule ( "email_mime_base" , "email.MIMEBase" , "email.mime.base" ) ,  MovedModule ( "BaseHTTPServer" , "BaseHTTPServer" , "http.server" ) ,  MovedModule ( "CGIHTTPServer" , "CGIHTTPServer" , "http.server" ) ,  MovedModule ( "SimpleHTTPServer" , "SimpleHTTPServer" , "http.server" ) ,  MovedModule ( "cPickle" , "cPickle" , "pickle" ) ,  MovedModule ( "queue" , "Queue" ) ,  MovedModule ( "reprlib" , "repr" ) ,  MovedModule ( "socketserver" , "SocketServer" ) ,  MovedModule ( "_thread" , "thread" , "_thread" ) ,  MovedModule ( "tkinter" , "Tkinter" ) ,  MovedModule ( "tkinter_dialog" , "Dialog" , "tkinter.dialog" ) ,  MovedModule ( "tkinter_filedialog" , "FileDialog" , "tkinter.filedialog" ) ,  MovedModule ( "tkinter_scrolledtext" , "ScrolledText" , "tkinter.scrolledtext" ) ,  MovedModule ( "tkinter_simpledialog" , "SimpleDialog" , "tkinter.simpledialog" ) ,  MovedModule ( "tkinter_tix" , "Tix" , "tkinter.tix" ) ,  MovedModule ( "tkinter_ttk" , "ttk" , "tkinter.ttk" ) ,  MovedModule ( "tkinter_constants" , "Tkconstants" , "tkinter.constants" ) ,  MovedModule ( "tkinter_dnd" , "Tkdnd" , "tkinter.dnd" ) ,  MovedModule ( "tkinter_colorchooser" , "tkColorChooser" ,  "tkinter.colorchooser" ) ,  MovedModule ( "tkinter_commondialog" , "tkCommonDialog" ,  "tkinter.commondialog" ) ,  MovedModule ( "tkinter_tkfiledialog" , "tkFileDialog" , "tkinter.filedialog" ) ,  MovedModule ( "tkinter_font" , "tkFont" , "tkinter.font" ) ,  MovedModule ( "tkinter_messagebox" , "tkMessageBox" , "tkinter.messagebox" ) ,  MovedModule ( "tkinter_tksimpledialog" , "tkSimpleDialog" ,  "tkinter.simpledialog" ) ,  MovedModule ( "urllib_parse" , __name__ + ".moves.urllib_parse" , "urllib.parse" ) ,  MovedModule ( "urllib_error" , __name__ + ".moves.urllib_error" , "urllib.error" ) ,  MovedModule ( "urllib" , __name__ + ".moves.urllib" , __name__ + ".moves.urllib" ) ,  MovedModule ( "urllib_robotparser" , "robotparser" , "urllib.robotparser" ) ,  MovedModule ( "xmlrpc_client" , "xmlrpclib" , "xmlrpc.client" ) ,  MovedModule ( "xmlrpc_server" , "xmlrpclib" , "xmlrpc.server" ) ,  MovedModule ( "winreg" , "_winreg" ) ,  ]
    if not os . access ( self . file_path , os . W_OK ) :
       def stringfilter ( func ) :
  except ValueError :
  elif ch == ')' :
   eol_message = message . replace ( str ( '\r\n' ) , str ( '\n' ) ) . replace ( str ( '\r' ) , str ( '\n' ) )
    class Command ( BaseCommand ) :
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
 pass
          self . _cache . flush_all ( )
   def delete ( self , key , version = None ) :
              raise ValidationError ( self . error_messages [ 'empty' ] , code = 'empty' )
 kwargs_safe = dict ( ( k , conditional_escape ( v ) ) for ( k , v ) in six . iteritems ( kwargs ) )
              if token_string . startswith ( VARIABLE_TAG_START ) :
     class IPAddressField ( CharField ) :
            if hasattr ( self , '_choices' ) :
  else :
   if isinstance ( elt , ( Choice , NonCapture ) ) :
              raise ValidationError (  self . error_messages [ 'max_decimal_places' ] ,  code = 'max_decimal_places' ,  params = { 'max' : self . decimal_places } ,  )
 from django . core . serializers . python import Deserializer as PythonDeserializer
 __iadd__ = complain
 if old_handler is not None :
 cls = extension_map . get ( ext )
   def decr_version ( self , key , delta = 1 , version = None ) :
                  args = ( )
              raise
  for i in range ( 0 , self . total_form_count ( ) ) :
  return self . _errors
 template = self . resolve_template ( self . template_name )
 try :
 from django . utils import six
      return _trans . get_language ( )
  else :
   def __str__ ( self ) :
   if locations :
          cache = caches [ settings . CACHE_MIDDLEWARE_ALIAS ]
 try :
  except TypeError :
          iteritems = _iteritems
 try :
 self . active_readers += t
  if compress :
                      match = RE_DATE . match ( value )
 self . base = base
               host = self . META [ 'SERVER_NAME' ]
 table = connections [ db ] . ops . quote_name ( self . _table )
  self . cookies = SimpleCookie ( )
 self . format = format if format else None
  for char in key :
    def next_char ( input_iter ) :
          skipped = [ ]
 try :
 return ( self . data . weekday ( ) + 1 ) % 7
 def _get_width ( self ) :
              if not hasattr ( e , 'django_template_source' ) :
          defaults = parser . parse_args ( args = args )
                  pass
  statement . append ( cleaned_line )
          while self . tokens :
  try :
 from django . utils import datetime_safe
 def cleanup_url ( url ) :
   if ( isinstance ( data , ( datetime . datetime , datetime . time ) ) and  not getattr ( self . field . widget , 'supports_microseconds' , True ) ) :
  request_started = Signal ( )
  elif options [ 'app_label' ] :
 def get_supported_language_variant ( lang_code , strict = False ) :
          errors = [ ]
  output_transaction = True
   def u ( self ) :
   def make_template_fragment_key ( fragment_name , vary_on = None ) :
   def __eq__ ( self , other ) :
  from django . conf import settings
 message = _ ( 'Ensure this value is %(limit_value)s (it is %(show_value)s).' )
  if old_style_list :
   def attach_alternative ( self , content , mimetype ) :
      def callable ( obj ) :
  return response
              content_length = 0
      import pickle
  elif not isinstance ( value , ConvertingList ) and isinstance ( value , list ) :
 options [ 'secret_key' ] = get_random_string ( 50 , chars )
 for char in fmt :
 self . _producer = [ ]
  import django
 attrs = { 'form' : form , 'extra' : extra ,  'can_order' : can_order , 'can_delete' : can_delete ,  'min_num' : min_num , 'max_num' : max_num ,  'absolute_max' : absolute_max , 'validate_min' : validate_min ,  'validate_max' : validate_max }
          parser . add_argument ( 'args' , metavar = 'app_label' , nargs = '*' ,  help = 'Specify the app label(s) to create migrations for.' )
    if settings . TEMPLATE_DEBUG :
                              if _file is None :
  if size == 0 :
  with transaction . atomic ( using = database ,  savepoint = connection . features . can_rollback_ddl ) :
 for app_name in app_names :
      return _trans . templatize ( src , origin )
           return super ( PythonSerializer , self ) . getvalue ( )
              settings . SITE_ID
              use_func = False
 return type ( form . __name__ + str ( 'FormSet' ) , ( formset , ) , attrs )
          self . _archive . printdir ( * args , ** kwargs )
 break
              raise TemplateSyntaxError ( "expected another tag, found "  "end of string: %s" % subject )
              result = None
       candidate_pat = prefix_norm . replace ( '%' , '%%' ) + result
 last [ NEXT ] = root [ PREV ] = link
 if kwds :
 self . options = options
   def __nonzero__ ( self ) :
              timeout = self . default_timeout
   def __nonzero__ ( self ) :
 self . current_token = self . next_token ( )
              msg = self . style . HTTP_BAD_REQUEST ( msg )
  else :
              return True
 if len ( bits ) != 2 :
   class Module_six_moves_urllib_parse ( _LazyModule ) :
 _templatetags_modules . append ( templatetag_module )
  if ( self . max_digits is not None and self . decimal_places is not None  and whole_digits > ( self . max_digits - self . decimal_places ) ) :
  try :
      pass
 lib = libraries . get ( library_name , None )
     def format ( value , format_string ) :
          try :
            self . token_type , self . contents = token_type , contents
              widget . is_localized = True
  from django . utils import six
 return os . path . join ( self . _dir , '' . join (  [ hashlib . md5 ( force_bytes ( key ) ) . hexdigest ( ) , self . cache_suffix ] ) )
          raise
 self . initial = initial
  zfile . close ( )
              sys . stderr = open ( err_log , 'a' , buffering )
 key = self . make_key ( key , version = version )
                              return smart_text ( field . rel . to . _meta . pk . to_python ( value ) )
 if 100 <= response . status_code < 200 or response . status_code in ( 204 , 304 ) :
                  c = self . resolve ( c )
  except IndexError :
              return timesince ( value , arg )
  if max_length is not None :
  for path_to_remove in self . paths_to_remove :
 open_method , mode = self . compression_formats [ cmp_fmt ]
 try :
                      cls . __str__ = cls . __text_cast
   def error ( self , token , msg ) :
                if not chunk [ : - rollback ] :
              f . close ( )
   def write ( self , content ) :
  if isinstance ( app_name , BaseCommand ) :
  if result is not None :
      return None
  super ( SortedDict , self ) . __setitem__ ( key , value )
          args = [ ]
                  self . cookies [ key ] [ 'expires' ] = expires
 return importlib_find ( full_module_name , package_path ) is not None
                  raise ValidationError ( self . error_messages [ 'invalid_date' ] , code = 'invalid_date' )
              self . _object_dict = dict ( ( o . pk , o ) for o in self . get_queryset ( ) )
          raise ValueError ( "'package' not set to a string" )
   raise TypeError ( "Lazy object returned unexpected type." )
  if item_type == FIELD :
   def __str__ ( self ) :
 response = http . HttpResponseBadRequest ( )
     class DebugParser ( Parser ) :
  def is_ignored ( path , ignore_patterns ) :
   @ cached_property
 handler . addQuickElement ( "link" , "" , { "rel" : "alternate" , "href" : self . feed [ 'link' ] } )
   except Exception :
  self . _regex = regex
          if self . _wrapped is empty :
  except Exception as e :
    def new_file ( self , * args , ** kwargs ) :
 t = re . sub ( "([a-z])'([A-Z])" , lambda m : m . group ( 0 ) . lower ( ) , value . title ( ) )
  from django . utils import six
              klass = self . resolve ( config . pop ( 'class' ) )
 for lookup , arg in args :
 for form in self . extra_forms :
              continue
  else :
     shutdown_message = '\nServer stopped.\nNote that the test database, %r, has not been deleted. You can explore it on your own.' % db_name
  import socket
 rest = value
  try :
          return self . _regex
  return '' . join ( base36 )
 self . _add_installed_apps_translations ( )
                      comment_notes = [ ]
       def __init__ ( self , * args , ** kwargs ) :
  else :
              raise AttributeError ( attr )
  return dec
  def __init__ ( self , stream , boundary ) :
          return self . content
  except ImproperlyConfigured :
          dec_part = dec_part + ( '0' * ( decimal_pos - len ( dec_part ) ) )
              self . error_class = 'errorlist {}' . format ( error_class )
 from django . utils . six . moves . urllib . parse import urlsplit , urlunsplit
   @ property
 for app_config in apps . get_app_configs ( ) :
          int ( value )
 from django . core . serializers . json import DjangoJSONEncoder
   def urlencode ( self , safe = None ) :
             models . Model . save_base ( self . object , using = using , raw = True )
 from django . utils . itercompat import is_iterable
                      resolved_args , resolved_kwargs = self . get_resolved_arguments ( context )
   def pop ( self , idx = - 1 ) :
 if kwds :
     class CsrfTokenNode ( Node ) :
 i = self . pointer
  import codecs
 if i < 0 :
                  return False
                  self . stdout . write ( self . style . MIGRATE_LABEL ( "  Apply all migrations: " ) + ( ", " . join ( set ( a for a , n in targets ) ) or "(none)" ) )
      pass
 if isinstance ( other , BaseContext ) :
          return DebugNodeList ( )
              if key in d :
  if isinstance ( s , bytes ) or ( isinstance ( s , Promise ) and s . _delegate_bytes ) :
     if isinstance ( value , six . string_types ) and value . lower ( ) in ( 'false' , '0' ) :
          if self . language is not None :
  from functools import wraps , update_wrapper , WRAPPER_ASSIGNMENTS
  urlunquote_plus = allow_lazy ( urlunquote_plus , six . text_type )
  class AssignmentNode ( TagHelperNode ) :
          try :
              result [ i ] += piece
      class ChunkIter ( six . Iterator ) :
    def _sanitize_ipv4_mapping ( ip_str ) :
                  if fake :
              usage = sorted ( get_commands ( ) . keys ( ) )
 for i , char in enumerate ( text ) :
 if version is None :
                      if hasattr ( middleware , 'process_response' ) :
    def get_language_from_request ( request , check_path = False ) :
          result = super ( MultiValueField , self ) . __deepcopy__ ( memo )
 num = 0
   def render ( self , context ) :
 from PIL import ImageFile as PillowImageFile
          value = self . to_python ( value ) . strip ( )
                  output . append ( "%s = %s  ###" % ( key , user_settings [ key ] ) )
  if template_tuple is TemplateDoesNotExist :
   def _setup ( self ) :
              return ''
          self . new_objects = [ ]
 default_error_messages = {  'invalid_choice' : _ ( 'Select a valid choice. %(value)s is not one of the available choices.' ) ,  }
                      import operator
                           self . _changed_data . append ( name )
 for attr in _urllib_robotparser_moved_attributes :
  except AttributeError :
              if not hasattr ( f , 'save_form_data' ) :
  json . dump ( self . get_dump_object ( obj ) , self . stream ,  cls = DjangoJSONEncoder , ** self . json_kwargs )
   def write_items ( self , handler ) :
                  handler . addQuickElement ( "email" , self . feed [ 'author_email' ] )
              dot = package . rindex ( '.' , 0 , dot )
 bits = bits [ 2 : ]
              self . stdout . write ( "Downloading %s\n" % display_url )
    @ register . filter ( "linebreaks" , is_safe = True , needs_autoescape = True )
 for subwidget in self . field . widget . subwidgets ( self . html_name , self . value ( ) , attrs ) :
  except ( ValueError , TypeError ) :
 if isinstance ( s , bytes ) :
 result = self . configure_custom ( config )
 table = connections [ db ] . ops . quote_name ( self . _table )
                  try :
  if namespaces :
 if 'Location' in response and request . get_host ( ) :
                  response = middleware_method ( request )
 raise FieldError ( message )
 args , kwargs = parse_bits ( parser , bits , params ,  varargs , varkw , defaults , takes_context , function_name )
  except KeyError as key :
                  new_obj = func ( obj , autoescape = context . autoescape , * arg_vals )
 from django . conf import settings
  from collections import OrderedDict
                   finder = sys . path_importer_cache [ entry ]
   def _init_translation_catalog ( self ) :
      return b64_encode ( salted_hmac ( salt , value , key ) . digest ( ) )
              parsed = True
          self . close ( )
 import time
              output . append ( options )
  def __str__ ( self ) :
              template = get_template_from_string ( source , origin , template_name )
 return
  elif g [ 0 ] == "'" :
          return getattr ( module , class_name )
 if not callback :
 COMMENT_TAG_START = '{#'
                             meth = cls . __promise__ ( resultclass , k , v )
 self . _errors = [ ]
   if header_end == - 1 :
 self . content_type_extra = content_type_extra
  else :
 self . _lock = threading . RLock ( )
 self . validate_key ( key )
  elif self . use_ipv6 and not _fqdn :
              self . _setup ( )
  if six . PY2 :
 try :
                      if callable ( limit_choices_to ) :
      def __init__ ( self , val_expr , max_expr , max_width , asvar = None ) :
  else :
          self . nodelist = nodelist
 return True
                  raise ValueError ( "Could not find common ancestor of %s" % migration_names )
 return bool ( ret )
     for field in model . _meta . fields :
 contents = contents or self . label
  request_middleware = [ ]
            basedirs = [ os . path . join ( os . path . dirname ( os . path . dirname ( __file__ ) ) ,  'conf' , 'locale' ) ,  'locale' ]
  def handle_raw_input ( self , input_data , META , content_length , boundary , encoding = None ) :
   def convert ( self , value ) :
  return super ( classonlymethod , self ) . __get__ ( instance , owner )
 self . charset = None
 utility . execute ( )
  return ( resource , 'egg:%s:%s' % ( app_config . name , pkg_name ) )
   excluded_apps = set ( )
   return result == 0
     if len ( fixture_files_in_dir ) > 1 :
 if first :
 default_error_messages = {  'invalid_choice' : _ ( 'Select a valid choice. %(value)s is not one of the available choices.' ) ,  'invalid_list' : _ ( 'Enter a list of values.' ) ,  }
  else :
 for statement in sql_statements :
import warnings
 return int ( binascii . hexlify ( x ) , 16 )
              return [ ]
 key = plist . pop ( 0 ) . lower ( ) . decode ( 'ascii' )
  try :
 self . META = environ
 self . paths_to_remove . append ( tempdir )
 def forms ( self ) :
  except signing . BadSignature :
  except LookupError :
                  if self . output_transaction :
  linebreaks = allow_lazy ( linebreaks , six . text_type )
           connection = connections [ options [ 'database' ] ]
          base64d = b'.' + base64d
 use_grouping = use_grouping or force_grouping
  else :
   def __exit__ ( self , exc_type , exc_value , tb ) :
   def P ( self ) :
 zfile . close ( )
 if not isinstance ( urlconf_name , six . string_types ) :
  while RUN_RELOADER :
              return truncate % { 'truncated_text' : text }
   @ property
          new_class = super ( RenameMethodsBase , cls ) . __new__ ( cls , name , bases , attrs )
  return template
 for k , v in ret . items ( ) :
                   command . stdout . write ( errors )
 if not lib :
  ALL_FIELDS = '__all__'
              return None
      from django . utils . six . moves import _thread as thread
  from __future__ import unicode_literals
              self . _servers = server
              self . nodelist_empty = NodeList ( )
 if not_installed_models :
  return self . _non_form_errors
     class StringOrigin ( Origin ) :
                  context [ 'block' ] = self
 default_error_messages = {  'invalid' : _ ( 'Enter a valid date/time.' ) ,  }
              e . django_template_source = token . source
      while remaining != 0 :
                  if is_ignored ( os . path . normpath ( os . path . join ( dirpath , dirname ) ) , norm_patterns ) :
              if isinstance ( sep , unicode ) :
   self . _regex_dict [ language_code ] = compiled_regex
 return parser . parse ( )
 __setitem__ = new_method_proxy ( operator . setitem )
 from __future__ import unicode_literals
   def incr ( self , key , delta = 1 , version = None ) :
  setattr ( obj , self . name , result )
     class VariableNode ( Node ) :
  _serializers = { }
          output , references = connection . creation . sql_create_model ( model , style , known_models )
   def handle_file_complete ( self , old_field_name , counters ) :
                 Image . open ( file ) . verify ( )
 db = router . db_for_read ( self . cache_model_class )
  try :
          return type ( self ) . __bool__ ( self )
      from functools import total_ordering
  cycle_iter = context . render_context [ self ]
 from django . utils import six
  import mimetypes
    @ register . filter ( is_safe = True )
                       sublist_item = next_item
    try :
   def update ( self , other_dict ) :
   class Command ( TemplateCommand ) :
 for i , choice in enumerate ( self . choices ) :
  try :
 using_sysrandom = True
  except ImportError :
 values = _itervalues
      def get_language ( ) :
 LockFileEx . restype = BOOL
  from django . utils . itercompat import is_iterable
    def extract ( path , to_path = '' ) :
  try :
                  timeout = int ( timeout )
 from django . utils . module_loading import import_string
  import base64
              raise InvalidTemplateLibrary ( "ImportError raised loading %s: %s" %  ( taglib_module , e ) )
 result . key = key
          return s
          if not self . _mutable :
              return timezone . make_aware ( value , current_timezone )
   self . clean ( )
              return None
   return dummy ( )
  from lib2to3 import fixer_base
 from django . utils import six
  for location in format_locations :
          parser . add_argument ( 'args' , metavar = 'app_label' , nargs = '*' )
 def __new__ ( cls , fget = None , fset = None , fdel = None , doc = None ) :
              try :
  for app_config in app_configs :
                       try :
       def constant_time_compare ( val1 , val2 ) :
   empty = object ( )
 return '%02d' % self . data . second
                       result = user_function ( * args , ** kwds )
  except AmbiguityError :
 tt = _time . localtime ( stamp )
                  error_text = str ( e )
              self . __name = name
    def has_vary_header ( response , header_query ) :
    def get_language_bidi ( ) :
              ch2 , escaped = next ( input_iter )
 if not commit :
              return ''
                  TYPE = FILE
              return type ( self ) . __next__ ( self )
 MIMEMessage . __setitem__ ( self , name , val )
  if self . username and self . password :
                  raise ValueError ( "JSON can't represent timezone-aware times." )
              def value_encode ( self , val ) :
 input_formats = formats . get_format_lazy ( 'TIME_INPUT_FORMATS' )
                       if transfer_encoding == 'base64' :
   def filter ( self , name = None , filter_func = None , ** flags ) :
              words [ i ] = escape ( word )
  def __init__ ( self , exception ) :
    construct_instance_exclude = list ( exclude )
  attrname , rest , attrvalue = m . group ( 1 , 2 , 3 )
 tell = property ( lambda self : self . file . tell )
                  try :
  if six . PY2 :
 if self . domain == 'djangojs' :
 return self . _coerce ( value )
  elif field . rel and isinstance ( field . rel , models . ManyToOneRel ) :
                      stream . close ( )
          return "<Block Node: %s. Contents: %r>" % ( self . name , self . nodelist )
              value = [ ]
     app_template_dirs = calculate_app_template_dirs ( )
 if self not in state_frame :
      from shutil import copystat
 self . _boundary = boundary
 from django . utils . text import ( smart_split , unescape_string_literal ,  get_text_list )
  naiveip_re = re . compile ( r"""^(?: (?P<addr>     (?P<ipv4>\d{1,3}(?:\.\d{1,3}){3}) |         # IPv4 address     (?P<ipv6>\[[a-fA-F0-9:]+\]) |               # IPv6 address     (?P<fqdn>[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*) # FQDN ):)?(?P<port>\d+)$""" , re . X )
 yield buf . read ( )
 result_args = [ [ ] ]
  if now and not isinstance ( now , datetime . datetime ) :
   self . attr = new_attr
  else :
 comment = [ ]
                          apps . setdefault ( pattern . app_name , [ ] ) . append ( pattern . namespace )
 return "%s%02d%02d" % ( sign , seconds // 3600 , ( seconds // 60 ) % 60 )
 i += 1
  request_queue_size = 10
   class Module_six_moves_urllib_robotparser ( _LazyModule ) :
                          if hasattr ( value , '__iter__' ) and not isinstance ( value , six . text_type ) :
   pos = 0
              assert content is not None
                  limit_choices_to = formfield . limit_choices_to
 localedir = os . path . join ( os . path . dirname ( settingsfile ) , 'locale' )
 if self . _errors is None :
 signals = 'signals'
 pickled = pickle . dumps ( value , pickle . HIGHEST_PROTOCOL )
  inner_result , inner_args = [ ] , [ ]
                  raise ValidationError (  self . error_messages [ 'invalid_choice' ] ,  code = 'invalid_choice' ,  params = { 'value' : val } ,  )
              if "'stream'" not in str ( te ) :
   try :
 self . deleted_objects = [ ]
    def parse_endtag ( self , i ) :
          raise ExternalReferenceForbidden ( context , base , sysid , pubid )
  return ustring_re . sub ( fix , s )
 if param in unhandled_params :
     def load_template_source ( self , template_name , template_dirs = None ) :
  row_data = tuple ( d . _get_pk_val ( ) if hasattr ( d , '_get_pk_val' ) else d  for d in row_data )
    self . enter_command ( command , token )
              try :
 pass
 import sys
 from django . utils . deprecation import RemovedInDjango19Warning
   def all ( self ) :
                      self . stdout . write ( self . style . MIGRATE_SUCCESS ( " FAKED" ) )
   def widget_attrs ( self , widget ) :
 self . base_fields [ INITIAL_FORM_COUNT ] = IntegerField ( widget = HiddenInput )
    def lazy ( func , * resultclasses ) :
   except ValidationError :
  options += [ ( app_config . label , 0 ) for app_config in app_configs ]
  return i
              warnings . warn (  '"requires_model_validation" is deprecated '  'in favor of "requires_system_checks".' ,  RemovedInDjango19Warning )
           return avoid_wrapping ( ugettext ( '0 minutes' ) )
          if self . use_natural_foreign_keys and hasattr ( field . rel . to , 'natural_key' ) :
 data = serializer ( ) . dumps ( obj )
 supported = True
  def __init__ ( self , regex = None , message = None , code = None , inverse_match = None , flags = None ) :
              if isinstance ( slots , str ) :
              year_val , month_val , day_val = value . year , value . month , value . day
   class BadHeaderError ( ValueError ) :
   creation_counter = 0
     class BaseCommand ( object ) :
                     raise
      from yaml import SafeLoader , SafeDumper
  klass . __unicode__ = klass . __str__
                  message = 'Unknown field(s) (%s) specified for %s'
          vary_headers = cc_delim_re . split ( response [ 'Vary' ] )
              continue
    def decorator_from_middleware_with_args ( middleware_class ) :
          raise TemplateSyntaxError ( "%r expected at least one variable "  "assignment" % bits [ 0 ] )
    class PermissionDenied ( Exception ) :
              sequence_sql = connection . ops . sequence_reset_sql ( no_style ( ) , self . models )
   def end_object ( self , obj ) :
                  try :
    def check_errors ( fn ) :
          if self . _callback is not None :
 return j
  def to_python ( self , value ) :
                  dig1 , dig2 = inner . copy ( ) , outer . copy ( )
              return ( ( not pk . editable ) or ( pk . auto_created or isinstance ( pk , AutoField ) )  or ( pk . rel and pk . rel . parent_link and pk_is_not_editable ( pk . rel . to . _meta . pk ) ) )
              domains = ( 'djangojs' , 'django' )
                          raise
 return form . cleaned_data . get ( DELETION_FIELD_NAME , False )
                              continue
 def dumps ( self , obj ) :
              value = var . resolve ( context , True )
                random . seed (  hashlib . sha256 (  ( "%s%s%s" % (  random . getstate ( ) ,  time . time ( ) ,  settings . SECRET_KEY ) ) . encode ( 'utf-8' )  ) . digest ( ) )
    filters = config . get ( 'filters' , EMPTY_DICT )
      _assertCountEqual = "assertCountEqual"
 self . asvar = asvar
                      locations . extend ( ( dirpath , f ) for f in filenames if f . endswith ( '.po' ) )
              return base
 def __init__ ( self , connection_reset = False ) :
              self . file . write ( raw_data )
   if self . no_obsolete :
 def ssi ( parser , token ) :
  except ( ValueError , TypeError ) :
 if not os . path . exists ( self . default_locale_path ) :
  def __init__ ( self , states , first ) :
               translation . _catalog = { }
   else :
  except TypeError :
 from django . utils . safestring import mark_safe , SafeData
 if cache is None :
                   def handle_m2m ( value ) :
   def handle ( self , * args , ** options ) :
  def __dir__ ( self ) :
                          link = cache_get ( key )
                  attr_list [ 3 ] |= termios . ECHO
   def add_prefix ( self , field_name ) :
 stats = [ 0 , 0 ]
                      candidate_subs = dict ( ( k , urlquote ( v ) ) for ( k , v ) in candidate_subs . items ( ) )
     def find_template_loader ( loader ) :
          return ValidationError ( self . data ) . error_list
          language_code = get_language ( )
 if origin :
 from django . utils import datetime_safe
  is_a_tty = hasattr ( sys . stdout , 'isatty' ) and sys . stdout . isatty ( )
 __dispatch = None
 def last ( value ) :
     class Debug ( CheckMessage ) :
    def _resolve ( self ) :
          yes , no , maybe = bits
  return 'tag:%s%s:%s/%s' % ( bits . hostname , d , bits . path , bits . fragment )
  base_path = os . path . splitext ( po_path ) [ 0 ]
           kwarg = token_kwargs ( [ bit ] , parser )
 import types
 def slice_filter ( value , arg ) :
              settings . configure ( USE_I18N = True )
 msgs , errors , status = popen_wrapper ( args )
   def __reduce_ex__ ( self , proto ) :
   return kwargs
 parser . add_argument ( '--no-obsolete' , action = 'store_true' , dest = 'no_obsolete' ,  default = False , help = "Remove obsolete message strings." )
 from django . db import connections , DEFAULT_DB_ALIAS
   def __copy__ ( self ) :
    def has_leading_dir ( self , paths ) :
     class Lexer ( object ) :
 if self . data . hour > 11 :
 assert not ( cls . _delegate_bytes and cls . _delegate_text ) , "Cannot call lazy() with both bytes and text return types."
          if isinstance ( data , ( MultiValueDict , MergeDict ) ) :
   self . default_timeout = timeout
                      raise CommandError (  "errors happened while running msgattrib\n%s" % errors )
                  raise ViewDoesNotExist (  "Could not import '%s'. View does not exist in module %s." %  ( lookup_view , mod_name ) )
 from django . contrib . auth import get_user_model
  try :
 try :
   def format_output ( self , rendered_widgets ) :
 return self . incr ( key , - delta , version = version )
  elif 'HTTP_HOST' in self . META :
 from django . db . migrations . writer import MigrationWriter
     def getlist ( self , key ) :
              return bytes ( func ( * self . __args , ** self . __kw ) )
   new_ip = [ ]
  user_settings = module_to_dict ( settings . _wrapped )
 self . _errors = None
 global _serializers
 def __init__ ( self , name , content_type , size , charset , content_type_extra = None ) :
 from django . utils . six . moves . urllib . parse import urlsplit , urlunsplit
 class MaxValueValidator ( BaseValidator ) :
 self . xml . startElement ( "django-objects" , { "version" : "1.0" } )
 view = parts [ 0 ]
              raise TypeError ( 'other_dict must be a mapping (dictionary-like) object.' )
 if len ( bits ) < 2 :
 with connections [ db ] . cursor ( ) as cursor :
      def strftime ( self , fmt ) :
              invalid_tag = next ( tag for tag in tags if not checks . tag_exists ( tag ) )
 self . close_called = False
 parser . add_argument ( '--indent' , default = None , dest = 'indent' , type = int ,  help = 'Specifies the indent level to use when pretty-printing output.' )
       if format not in serializers . get_public_serializer_formats ( ) :
   class UTC ( tzinfo ) :
 self . indent ( 1 )
              if ( self . validate_max and  self . total_form_count ( ) - len ( self . deleted_forms ) > self . max_num ) or self . management_form . cleaned_data [ TOTAL_FORM_COUNT ] > self . absolute_max :
              self . template_cache [ key ] = TemplateDoesNotExist
 exclude = [ ]
 if timezone is None :
          return time_str + 'Z'
      class Atom1Feed ( SyndicationFeed ) :
                  new_mod = name
                      middle = middle [ : - len ( punctuation ) ]
 models = set ( )
                      g = imatch . group ( 1 )
              result = self . _resolve ( )
              cursor . close ( )
 import copy
 return token
  elif options [ 'method' ] in ( 'thread' , 'threaded' ) :
 constant_string = constant_string . replace ( "\n" , "" )
 SINGLE_BRACE_END = '}'
    def base64_hmac ( salt , value , key ) :
          factor += 1
  try :
              params = { 'max' : self . max_length , 'length' : len ( file_name ) }
 return self . forms [ index ]
              encoding = settings . DEFAULT_CHARSET
  if f . db_index :
                      pass
                      return self . compress ( [ ] )
          result = super ( SortedDict , self ) . pop ( k , * args )
 return Page ( * args , ** kwargs )
              return '0'
              response . content = b''
 assert version [ 3 ] in ( 'alpha' , 'beta' , 'rc' , 'final' )
          super ( FileBasedCache , self ) . __init__ ( params )
          return self . _reverse_with_prefix ( lookup_view , '' , * args , ** kwargs )
 return getattr ( _active , "value" , get_default_timezone ( ) )
                  comment . append ( t . contents )
from importlib import import_module
          if callable ( key_func ) :
              msg = self . style . HTTP_REDIRECT ( msg )
  def save_m2m ( ) :
 for chunk in content . chunks ( ) :
  if not os . access ( filename , os . W_OK ) :
   def __nonzero__ ( self ) :
    @ register . tag
              return result
          msg = message . message ( )
  sys . modules [ __name__ + ".moves.urllib_response" ] = sys . modules [ __name__ + ".moves.urllib.response" ] = Module_six_moves_urllib_response ( __name__ + ".moves.urllib.response" )
    if not hasattr ( self , '_deleted_form_indexes' ) :
          return { f : e . as_data ( ) for f , e in self . items ( ) }
 comment_lineno_cache = None
              pass
  else :
              extend = getattr ( definition , 'extend' , True )
 saved_instances . append ( self . save_existing ( form , obj , commit = commit ) )
    class Http404 ( Exception ) :
              _active . value = self . old_timezone
   def create_bound_method ( func , obj ) :
 from django . core . exceptions import DisallowedHost , ImproperlyConfigured
 if o . microsecond :
     class TarArchive ( BaseArchive ) :
          if hasattr ( self . file , 'size' ) :
              result . setlist ( copy . deepcopy ( key , memo ) , copy . deepcopy ( value , memo ) )
     def strip_tags ( value ) :
 from email . mime . multipart import MIMEMultipart
 try :
 return super ( EmailField , self ) . clean ( value )
 msgattrib_options = [ '--no-obsolete' ]
   def urlencode ( query , doseq = 0 ) :
  for i in range ( 0 , len ( pieces ) - 1 , 3 ) :
 errors = [ ]
from __future__ import absolute_import
   def add_arguments ( self , parser ) :
    @ lru_cache . lru_cache ( maxsize = None )
   @ classmethod
          if not self . _upload_handlers :
    def _has_expired ( self , key ) :
 shown = set ( )
          return None
 from django . forms . utils import flatatt , to_current_timezone
 get_ns_resolver . cache_clear ( )
   def parse_name ( self , fixture_name ) :
              self . stderr = OutputWrapper ( options . get ( 'stderr' , sys . stderr ) , self . style . ERROR )
  def __init__ ( self , include_html = False , email_backend = None ) :
          dec_part = decimal_sep + dec_part
  output = [ ]
          self . target , self . expression = target , expression
          combined = Media ( )
  if not self . is_required :
   def __repr__ ( self ) :
 while i < len ( subject ) and subject [ i ] in ( ' ' , '\t' ) :
  def iterbytes ( buf ) :
                      self . stdout . write ( self . style . MIGRATE_LABEL ( "  Target specific migration: " ) + "%s, from %s" % ( targets [ 0 ] [ 1 ] , targets [ 0 ] [ 0 ] ) )
  if finder . find_module ( name ) :
              subcommand = self . argv [ 1 ]
          return False
    elif cwords [ 0 ] in subcommands and cwords [ 0 ] != 'help' :
          reloader = python_reloader
              del self . _expire_info [ key ]
              new_ip . append ( '0000' )
   def __repr__ ( self ) :
              if six . PY3 :
   def full_clean ( self ) :
              if new is None :
              out += truncate_text
   def as_ul ( self ) :
 self . port = port or settings . EMAIL_PORT
 self . write_migration_files ( changes )
              id_ = 'id_%s' % name
   def has_next ( self ) :
    if self . settings_exception is not None :
  if widgets is not None :
      input_type = 'checkbox'
          return key in caches [ DEFAULT_CACHE_ALIAS ]
   def add_fields ( self , form , index ) :
 self . base_fields [ MAX_NUM_FORM_COUNT ] = IntegerField ( required = False , widget = HiddenInput )
      for program in programs :
 self . objects = [ ]
          if not isinstance ( index , ( slice , ) + six . integer_types ) :
  except IndexError :
                          self . load_middleware ( )
              raise TemplateSyntaxError ( '"filter %s" is not permitted.  Use the "autoescape" tag instead.' % filter_name )
 if len ( bits ) < 2 or bits [ - 2 ] != 'as' :
 media = Media ( )
                  self . registered_checks . append ( check )
 return _slugify ( value )
 VARIABLE_ATTRIBUTE_SEPARATOR = '.'
 flags = 0
      class CacheClass ( DummyCache ) :
          for condition , nodelist in self . conditions_nodelists :
 target_app_labels_only = True
 import time
  return plural
                          return self . __dispatch [ t ] [ funcname ] ( res , * args , ** kw )
  except KeyError :
  if self . flags and not isinstance ( self . regex , six . string_types ) :
                  bits . append ( None )
 if message_context [ 0 ] == '"' :
  elif char == '\\' :
 match = _html_parser . endendtag . search ( rawdata , i + 1 )
 template , origin = find_template ( template_name , dirs )
    class TemplateDoesNotExist ( Exception ) :
                  file = BytesIO ( data . read ( ) )
  key , value = match . groups ( )
 pks = set ( force_text ( getattr ( o , key ) ) for o in qs )
          key = self . make_key ( key , version = version )
   def gettext_noop ( message ) :
  return final_path
   def slugify ( value ) :
  __all__ = ( 'UploadedFile' , 'TemporaryUploadedFile' , 'InMemoryUploadedFile' ,  'SimpleUploadedFile' )
          data = {  "model" : smart_text ( obj . _meta ) ,  "fields" : self . _current ,  }
 if six . PY2 and isinstance ( rawdata , six . text_type ) :
 if os . path . isdir ( app_dir ) :
    for app_name , model_list in manifest . items ( ) :
   if typed :
                  if timezone . is_aware ( expires ) :
 pickled = pickle . dumps ( new_value , pickle . HIGHEST_PROTOCOL )
  if PY3 :
  else :
 handler . startElement ( "channel" , self . root_attributes ( ) )
 from django . core . management . sql import sql_destroy_indexes
          key = self . make_key ( key , version = version )
               name = os . path . join ( dir_name , "%s_%s%s" % ( file_root , next ( count ) , file_ext ) )
 self . file_name = file_name
   def _set_name ( self , name ) :
 def __init__ ( self , timezone ) :
  lines = [ ]
 obj = field . rel . to . _default_manager . db_manager ( self . db ) . get_by_natural_key ( * field_value )
 def __init__ ( self , out , style_func = None , ending = '\n' ) :
  try :
  try :
   def handle ( self , * args , ** options ) :
   format_locations . append ( 'django.conf.locale.%s' )
   if bf . label :
                              out . write ( blankout ( part , 'S' ) )
 def __init__ ( self , META , input_data , upload_handlers , encoding = None ) :
          timeout = self . get_backend_timeout ( timeout )
  init_path = os . path . join ( migrations_directory , "__init__.py" )
              self . regex = regex
   def deconstruct ( obj ) :
      pass
              self . add_library ( lib )
          parser . add_argument ( 'args' , metavar = 'app_label[.ModelName]' , nargs = '*' ,  help = 'Restricts dumped data to the specified app_label or app_label.ModelName.' )
   def M ( self ) :
import cgi
                          latest_date = item_date
 from django . utils . encoding import force_bytes , force_str , force_text
                      objects_in_fixture += 1
              self . reason_phrase = reason
 def pluralize ( value , arg = 's' ) :
 d = get_deserializer ( format )
 request = None
 supports_microseconds = False
 if g [ 0 ] == '"' :
 import re
 def find_fixtures ( self , fixture_label ) :
 return self . cleaned_data
 if len_values < 1 :
          value = ungettext ( "%(size)d byte" , "%(size)d bytes" , 0 ) % { 'size' : 0 }
          value = list . pop ( self , idx )
               return False
  if filename . endswith ( "$py.class" ) :
   elif self . META . get ( 'CONTENT_TYPE' , '' ) . startswith ( 'application/x-www-form-urlencoded' ) :
  from django . utils . encoding import force_text , force_str
  excluded_apps . add ( app_config )
  cc_delim_re = re . compile ( r'\s*,\s*' )
     @ register . filter ( is_safe = True )
  except KeyError :
  return result
     class ModelMultipleChoiceField ( ModelChoiceField ) :
            stream . unget ( chunk )
                          if self . selected_fields is None or field . attname [ : - 3 ] in self . selected_fields :
              return self . STDOFFSET
                              extra_params [ 'unique' ] = True
          raise MultiPartParserError ( 'multipartparser.exhaust() was passed a non-iterable or stream parameter' )
 toks = self . toks
              self . code = code
      def __init__ ( self ) :
   if timeout is None :
  if error_messages is not None :
              raise ValidationError ( self . message , code = self . code , params = params )
  if self . silent :
 package_path = package . __path__
      format_key = ''
              raise ValueError ( "Base36 conversion input too large." )
 self . field_name = field_name
   if path is not None :
    @ lru_cache . lru_cache ( maxsize = 1000 )
      def __init__ ( self , obj , * args ) :
              self . stdout . write ( app_name , self . style . MIGRATE_LABEL )
              try :
   def created_time ( self , name ) :
              yield ( "" , self . field . empty_label )
  if fk . unique :
     def clear ( self ) :
 seek = property ( lambda self : self . file . seek )
              value = float ( value )
    else :
 from xml . dom import pulldom
      def _set_response_etag ( response ) :
  if six . PY2 :
   def module_to_dict ( module , omittable = lambda k : k . startswith ( '_' ) ) :
 self . _empty = False
          return six . text_type ( s ) . encode ( encoding , errors )
  return self . _errors
 from django . core . exceptions import SuspiciousFileOperation
    class DefaultStorage ( LazyObject ) :
  import os
              repr_attr = self . _wrapped
  except ( TypeError , ValueError ) :
          return formats . date_format ( value , arg )
 def csrf_token ( parser , token ) :
 self . _encoding = val
      def pbkdf2 ( password , salt , iterations , dklen = 0 , digest = None ) :
 import sys
 value = next ( cycle_iter ) . resolve ( context )
 if six . PY2 :
 if not content_type :
 subject = '%s (%s IP): %s' % (  record . levelname ,  ( 'internal' if request . META . get ( 'REMOTE_ADDR' ) in settings . INTERNAL_IPS  else 'EXTERNAL' ) ,  record . getMessage ( )  )
 if self . parent_instance is not None :
              if isinstance ( v , ( list , tuple ) ) :
  for i , ext in enumerate ( ext_list ) :
 self . app_label = 'django_cache'
   @ cached_property
                  hits = max ( 1 , self . count - self . orphans )
  p = PillowImageFile . Parser ( )
          return False
    def localize ( value , use_l10n = None ) :
      compare = lambda self , a , b : a < b
 roots = set ( dir ( cls ) ) & set ( convert )
              self . to = [ ]
   class ResolverMatch ( object ) :
      help = ( 'Removes ALL DATA from the database, including data added during '  'migrations. Unmigrated apps will also have their initial_data '  'fixture reloaded. Does not achieve a "fresh install" state.' )
 table = connections [ db ] . ops . quote_name ( self . _table )
   if field . _has_changed ( initial_value , data_value ) :
 link = [ last , root , key , result ]
              yield ch , False
  elif tzinfo is not None :
                  return True
 has_new_option = hasattr ( self , 'requires_system_checks' )
      replaces = [ ]
  import copy
              cookie_value = self . COOKIES [ key ]
   def get_backend_timeout ( self , timeout = DEFAULT_TIMEOUT ) :
  elif options [ 'all' ] :
               attrs . update ( { 'maxlength' : str ( self . max_length ) } )
                  i += 1
              self . match_re = re . compile ( self . match )
 return statements
  except AttributeError :
 for medium in extend :
    def do_ifequal ( parser , token , negate ) :
    def npgettext ( context , singular , plural , number ) :
   from django . template . base import ( Context , FilterExpression , Lexer , Node ,  NodeList , Parser , RequestContext , Origin , StringOrigin , Template ,  TextNode , Token , TokenParser , Variable , VariableNode , constant_string ,  filter_raw_string )
  def __init__ ( self , queryset , empty_label = "---------" , cache_choices = None ,  required = True , widget = None , label = None , initial = None ,  help_text = '' , to_field_name = None , limit_choices_to = None ,  * args , ** kwargs ) :
 self . validate_key ( key )
              if hasattr ( self . data , 'tzinfo' ) and self . data . tzinfo :
 while i < len ( subject ) and subject [ i ] in ( ' ' , '\t' ) :
  except LookupError :
      is_usable = resource_string is not None
  def __init__ ( self , tup , hash = hash ) :
     class SafeMIMEMultipart ( MIMEMixin , MIMEMultipart ) :
  if stream_created :
    parts = config_string . lower ( ) . split ( ';' )
 args [ 0 ] = force_text ( args [ 0 ] )
 if isinstance ( s , SafeData ) :
  import hashlib
 if isinstance ( attr , MovedModule ) :
 domain_regex = re . compile (    r'(?:[A-Z0-9](?:[A-Z0-9-]{0,247}[A-Z0-9])?\.)+(?:[A-Z]{2,6}|[A-Z0-9-]{2,}(?<!-))$' ,  re . IGNORECASE )
          return s
       def get_standard_processors ( ) :
  else :
 import zlib
   app_label = label
 if constant :
     def render_value_in_context ( value , context ) :
 args = args or [ ]
  def __init__ ( self , * args , ** kwargs ) :
 from django . core . management . sql import custom_sql_for_model , emit_post_migrate_signal , emit_pre_migrate_signal
   def _cull ( self ) :
  else :
    def mark_safe ( s ) :
  return wrapper
 self . translate = False
  if self . verbosity >= 2 :
          return "<%s: level=%r, msg=%r, hint=%r, obj=%r, id=%r>" % ( self . __class__ . __name__ , self . level , self . msg , self . hint , self . obj , self . id )
 memo [ id ( self ) ] = result
                    self . translate = True
 u = dig2 . digest ( )
   def _set_queryset ( self , queryset ) :
 super ( SimpleUploadedFile , self ) . __init__ ( BytesIO ( content ) , None , name ,  content_type , len ( content ) , None , None )
 leave_locale_alone = True
  if hasattr ( get_git_changeset , 'cache' ) :
 return t . render ( context )
              assert not isinstance ( bcc , six . string_types ) , '"bcc" argument must be a list or tuple'
  return output
              return path
 while path :
              return data
   url = url . replace ( '\\' , '/' )
 nodelist_loop = parser . parse ( ( 'empty' , 'endfor' , ) )
                  fp . write ( msgs )
 return
                      if not self . compile_function_error ( token , e ) :
 from django . utils import six
              self . namespaces = [ ]
 self . resolver_match = None
  matches = True
 import sys
  return value
 for lineno , line in enumerate ( content . splitlines ( True ) ) :
          natural_key = obj . natural_key ( )
 from django . db . migrations . state import ProjectState
                  sublist_item = title
  import importlib
  except ( ValueError , TypeError ) :
  import contextlib
   def list ( self , * args , ** kwargs ) :
              self . check_migrations ( )
      if dt . year >= 1900 :
    class MultipleHiddenInput ( HiddenInput ) :
  from django . template . base import Variable , Library , VariableDoesNotExist
    for attr , value in base . __dict__ . items ( ) :
   wsgi_opts [ 'debug' ] = options [ 'debug' ] is not None
  else :
                  attrs_plus = self . attrs . copy ( )
                  data = self
  _error_files = [ ]
 yield base . DeserializedObject ( obj , m2m_data )
 self . orphans = int ( orphans )
  wrap = allow_lazy ( wrap , six . text_type )
                  bit = self . render_node ( node , context )
          self . subject = subject
  resolver = get_resolver ( urlconf )
  from django . conf import settings
 if result is not None :
  def items ( self ) :
 if not cls :
  return value
  class Module_six_moves_urllib_response ( _LazyModule ) :
 asvar = None
 def GET ( self ) :
   class Command ( AppCommand ) :
 state = self . state
  from __future__ import unicode_literals
  else :
import inspect
  return copy . deepcopy ( self . _wrapped , memo )
  from django . http import QueryDict
              sites . append ( site )
   def signature ( self , value ) :
 append = complain
  def __new__ ( cls , name , bases , attrs ) :
 from django . core . exceptions import ImproperlyConfigured
              self . input_type = attrs . pop ( 'type' , self . input_type )
  except ValueError :
      def __init__ ( self , view_name , args , kwargs , asvar ) :
 try :
  if isinstance ( message , ValidationError ) :
 return re . sub ( r'>\s+<' , '><' , force_text ( value ) )
              pass
   if isinstance ( app_name , BaseCommand ) :
              lines [ i ] = ( "%0" + width + "d. %s" ) % ( i + 1 , escape ( line ) )
              settings . configure ( )
  if name is None :
              initial = [ '' for x in range ( 0 , len ( data ) ) ]
              result . setLevel ( _checkLevel ( level ) )
       if only_new :
   def __deepcopy__ ( self , memo = None ) :
  else :
          raise TemplateSyntaxError ( "'cycle' tag requires at least two arguments" )
     class Resolver404 ( Http404 ) :
   def _resolve_lookup ( self , context ) :
  return t [ 0 ] . lower ( ) , True
 self . cleaned_data [ name ] = value
 if value is not None :
      pass
              error_msg = "Tried %s" % tried
                      sub_match = pattern . resolve ( new_path )
  if id_ :
 statements = connection . ops . sql_flush ( style , tables , seqs , allow_cascade )
              if len ( x ) == 0 :
      if not _serializers :
              return s
              inner_text . append ( child . data )
      try :
   def as_hidden ( self , attrs = None , ** kwargs ) :
 if output :
  except UnicodeDecodeError :
          format = force_str ( default or get_format ( 'TIME_INPUT_FORMATS' ) [ 0 ] )
 from django . db import connection
          iterator = iter ( stream_or_iterable )
              exc_info = record . exc_info
                                  mode = 'wb' if isinstance ( chunk , bytes ) else 'wt'
 return callback ( request , ** param_dict )
          from django . conf import settings
 from django . core . management . base import BaseCommand , CommandError
                  message = error . message
  elif k == 'bg' :
   if years :
  return super ( BaseInlineFormSet , self ) . initial_form_count ( )
 output , hidden_fields = [ ] , [ ]
          length = int ( arg )
  from django . core . management . base import AppCommand
                  widget_value = value [ i ]
  formfield . queryset = formfield . queryset . complex_filter ( limit_choices_to )
 if label_suffix is None :
   def urlunquote ( quoted_url ) :
          return self . path == other . path
   def __contains__ ( self , key ) :
    if not isinstance ( self . object_list , list ) :
 DEFAULT_CHUNK_SIZE = 64 * 2 ** 10
  output_transaction = True
 if len ( list_ ) == 0 :
 return iter ( getattr ( d , _iterlists ) ( ** kw ) )
    class StreamingBuffer ( object ) :
    def assignment_tag ( self , func = None , takes_context = None , name = None ) :
          return NodeList ( )
 url = hashlib . md5 ( force_bytes ( iri_to_uri ( request . build_absolute_uri ( ) ) ) )
  else :
  else :
    def send_mail ( subject , message , from_email , recipient_list ,  fail_silently = False , auth_user = None , auth_password = None ,  connection = None , html_message = None ) :
 simple_email_re = re . compile ( r'^\S+@\S+\.\S+$' )
   if not priority :
  except ImportError :
  else :
              timeout = self . default_timeout
              raise StopIteration ( )
 yield 'from %s import models' % self . db_module
 if len ( value ) != 2 :
          self . func = func
     @ python_2_unicode_compatible
 import warnings
              self . error_dict = { }
  self . stderr . write ( "Error: %s" % error_text )
              error_messages = kwargs . get ( 'error_messages' ) or { }
  _add_doc ( get_unbound_function ,  """Get the function out of a possibly unbound function""" )
 def empty_form ( self ) :
 self . per_page = int ( per_page )
              initial_forms = self . initial_form_count ( )
      p = language . find ( '-' )
   def ip_address_validators ( protocol , unpack_ipv4 ) :
 charset = content_type_extra . get ( 'charset' )
   else :
   def reload ( self ) :
   def unsign ( self , signed_value ) :
 major = '.' . join ( str ( x ) for x in version [ : parts ] )
   if value != value or value in ( Decimal ( 'Inf' ) , Decimal ( '-Inf' ) ) :
      def __init__ ( self , filepath , parsed ) :
   base , tail_ext = os . path . splitext ( filename . lower ( ) )
     class DictConfigurator ( BaseConfigurator ) :
    def get_mod_func ( callback ) :
     class BaseTemporalField ( Field ) :
  except ValueError :
 super ( FilePathField , self ) . __init__ ( choices = ( ) , required = required ,  widget = widget , label = label , initial = initial , help_text = help_text ,  * args , ** kwargs )
 try :
 self . port = DEFAULT_PORT
                      try :
    def add_metaclass ( metaclass ) :
 if name is None :
 self . json_kwargs . pop ( 'stream' , None )
  else :
    class TemplateLiteral ( Literal ) :
               return False
   finally :
              result += ugettext ( ', ' ) + avoid_wrapping ( name2 % count2 )
 parser . add_argument ( '--list' , '-l' , action = 'store_true' , dest = 'list' , default = False ,  help = 'Show a list of all known migrations and which are applied' )
   def tzname ( self , dt ) :
   def decompress ( self , value ) :
 response = self . get_exception_response ( request , resolver , 403 )
 class VariableDoesNotExist ( Exception ) :
   class OVERLAPPED ( Structure ) :
    def __eq__ ( self , other ) :
          raise NotImplementedError ( 'subclasses of BaseArchive must provide an extract() method' )
        @ register . filter ( "escape" , is_safe = True )
   if self . verbosity >= 2 :
  for name in MEDIA_TYPES :
 if graph . nodes [ plan_node ] . replaces :
 fd , tmp_path = tempfile . mkstemp ( dir = self . _dir )
  connection = connections [ options [ 'database' ] ]
          if '-' not in lang_code :
 if second_item == [ ] :
  return _standard_context_processors
  elif command . verbosity > 0 :
 if self . field . label is None :
 if settings . USE_TZ and value is not None and timezone . is_naive ( value ) :
                  if nodelist . contains_nontext :
       def __init__ ( self , name ) :
  for middleware_method in self . _request_middleware :
          self . base_fields [ TOTAL_FORM_COUNT ] = IntegerField ( widget = HiddenInput )
   def non_field_errors ( self ) :
                  return ''
 day_field = '%s_day'
 self . verbose_name = 'cache entry'
     class DateField ( BaseTemporalField ) :
                          obj = settings . TEMPLATE_STRING_IF_INVALID
                          out . write ( blankout ( p , 'F' ) )
   def tag ( self ) :
                              raise ValueError ( "Non-reversible reg-exp portion: '(?P%s'" % ch )
 if match :
          attrs [ 'error_messages' ] = error_messages
   def get_templatetags_modules ( ) :
 return RegroupNode ( target , expression , var_name )
  choice_input_class = None
  else :
   def exit_command ( self ) :
  check_for_migrations ( app_config , connection )
   def create_token ( self , token_string , in_tag ) :
 word_split_re = re . compile ( r'(\s+)' )
   if self . verbosity > 1 :
 @ stringfilter
   def to_python ( self , value ) :
    @ register . filter ( is_safe = False )
   def setlist ( self , key , list_ ) :
  m2m_data [ field . name ] = [ m2m_convert ( pk ) for pk in field_value ]
          db = options . get ( 'database' )
 self . stdout . write ( "  You should commit this migration but leave the old ones in place;" )
          return decorator
              return bytes ( value )
    def get_current_timezone_name ( ) :
  token . lineno = self . lineno
          warnings . warn ( "The syncdb command will be removed in Django 1.9" , RemovedInDjango19Warning )
          key = self . make_key ( key , version = version )
  return self . _cached_loaders
 contents = format_html ( '<label{0}>{1}</label>' , attrs , contents )
              return data . getlist ( name )
 if not email_message . recipients ( ) :
   def __str__ ( self ) :
  self . _stream = BytesIO ( self . _body )
  buffer_types = ( bytearray , memoryview )
 stats [ MISSES ] += 1
          return self . choice_value in self . value
    @ python_2_unicode_compatible
              self . _mark_post_parse_error ( )
  except VariableDoesNotExist :
                              obj = field . rel . to . _default_manager . db_manager ( db ) . get_by_natural_key ( * field_value )
  from django . core . management . base import BaseCommand , CommandError
 from django . forms . widgets import ( SelectMultiple , HiddenInput ,  MultipleHiddenInput )
  if ( locale is None and not exclude and not process_all ) or self . domain is None :
 return '\n' . join ( statements )
  def add_arguments ( self , parser ) :
 value = normalize_newlines ( value )
              name = self . format ( 'O' )
   def is_protected_type ( obj ) :
   def __iter__ ( self ) :
              pending_references . setdefault ( refto , [ ] ) . extend ( refs )
  try :
 integer_types = ( int , long )
 if commit :
  ETAG_MATCH = re . compile ( r'(?:W/)?"((?:\\.|[^"])*)"' )
 class CheckMessage ( object ) :
              raise KeyError ( "Unknown language code %s and %s." % ( lang_code , generic_lang_code ) )
 return '%02d' % self . data . minute
      return not ( v is False or v is None or v == '' )
 month_field = '%s_month'
      input_type = 'url'
                      m = base
  else :
 from django . template . loader import BaseLoader
 handler . startDocument ( )
      import pickle
 if not chunk_size :
 return list ( value )
 if extra_attrs :
 return CommentNode ( )
 statements = sql_create ( app_config , self . style , connection )
          return "(%s %r)" % ( self . id , self . value )
      parser = CommandParser ( None , usage = "%(prog)s subcommand [options] [args]" , add_help = False )
              value = False
   def enter_command ( self , command , token ) :
  else :
 from threading import local
  elif ch == '$' :
   class Command ( BaseCommand ) :
 return form
 for migration in merge_migrations :
          try :
 parser . add_argument ( '--noreload' , action = 'store_false' , dest = 'use_reloader' , default = True ,  help = 'Tells Django to NOT use the auto-reloader.' )
 if isinstance ( stream_or_string , six . string_types ) :
          s = s . replace ( '"' , '&quot;' )
 all_locales = map ( os . path . basename , locale_dirs )
                   return self . add_truncation_text ( text [ : end_index or 0 ] ,  truncate )
   def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
    def strftime ( dt , fmt ) :
          return fastcgi_help ( )
 known_models = [ ]
 from django . forms . utils import ErrorList
 import os
  return self . _regex_dict [ language_code ]
  finally :
          return self . paginator . validate_number ( self . number + 1 )
   else :
 import tarfile
 weight += 2
 self . size = size
              request = record . request
 if isinstance ( cache , BaseDatabaseCache ) :
                  return not self . _is_expired ( f )
                  deps = getattr ( model . natural_key , 'dependencies' , [ ] )
          if ch != '\\' :
          return self . value
 import types
    def set_script_prefix ( prefix ) :
               if opts . fields is None and opts . exclude is None :
   def _get_regex ( self ) :
   def run_shell ( self , shell = None ) :
  _func_closure = "__closure__"
 id_ = final_attrs . get ( 'id' , None )
 from django . core . management . base import ( BaseCommand , CommandError ,  CommandParser , handle_default_options )
  else :
   class Command ( CheckCommand ) :
  return self . _upload_handlers
   def iteritems ( d , ** kw ) :
                  self . stdout . write ( "No changes detected in apps '%s'" % ( "', '" . join ( app_labels ) ) )
  CONVERT_PATTERN = re . compile ( r'^(?P<prefix>[a-z]+)://(?P<suffix>.*)$' )
 object_data = { }
 def __init__ ( self , attrs = None ) :
  __all__ = [  'CachedDnsName' , 'DNS_NAME' , 'EmailMessage' , 'EmailMultiAlternatives' ,  'SafeMIMEText' , 'SafeMIMEMultipart' , 'DEFAULT_ATTACHMENT_MIME_TYPE' ,  'make_msgid' , 'BadHeaderError' , 'forbid_multi_line_headers' ,  'get_connection' , 'send_mail' , 'send_mass_mail' , 'mail_admins' ,  'mail_managers' ,  ]
 if best_doublecolon_start == 0 :
   def L ( self ) :
 import datetime
      directory = os . path . dirname ( full_path )
  from django . utils . deprecation import RemovedInDjango19Warning
              if isinstance ( option_label , ( list , tuple ) ) :
              @ wraps ( fset )
 statement = [ ]
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
              self . cookies [ key ] [ 'path' ] = path
 result = datetime . datetime ( year , month , day , hour , min , sec )
          vary_on = ( )
  db = router . db_for_read ( self . cache_model_class )
 for c in reversed ( self . __class__ . __mro__ ) :
                  if isinstance ( callback , types . FunctionType ) :
                  exclude . append ( f . name )
  color_names = ( 'black' , 'red' , 'green' , 'yellow' , 'blue' , 'magenta' , 'cyan' , 'white' )
          urlconf = get_urlconf ( )
   def unget ( self , bytes ) :
    def __getitem__ ( self , header ) :
   def get_text_list ( list_ , last_word = ugettext_lazy ( 'or' ) ) :
  if col_name . lower ( ) . find ( '__' ) >= 0 :
   self . year_none_value = self . none_value
 content_subtype = 'plain'
 memo [ id ( self ) ] = result
  if not hasattr ( func , '__name__' ) :
  else :
 if autoescape :
       if self . verbosity >= 1 :
          sign = '-'
 from django . core . management . base import BaseCommand
              if len ( bits ) < 3 or bits [ 1 ] != 'as' :
     def build_potfiles ( self ) :
          language_code = get_language ( )
 special_floats = [ str ( pos_inf ) , str ( neg_inf ) , str ( nan ) ]
 parser . delete_first_token ( )
                  self . stdout . write ( "  No migrations to apply." )
   def delete_many ( self , keys , version = None ) :
  import glob
           from django . conf import settings , global_settings
  else :
              for module in get_format_modules ( lang ) :
   def __contains__ ( self , item ) :
 super ( JsonResponse , self ) . __init__ ( content = data , ** kwargs )
 self . _cache . delete_multi ( map ( l , keys ) )
   def make_writeable ( self , filename ) :
                          description = "An instance of the '%s' class" % receiver . __class__ . __name__
  value = getattr ( _module , attr )
              self . _post , self . _files = QueryDict ( '' , encoding = self . _encoding ) , MultiValueDict ( )
              return initial
      if 'max-age' in cc and 'max_age' in kwargs :
  else :
  return self . nodelist . render ( new_context )
 end = len ( text )
 from django . db import ( connections , router , transaction , DEFAULT_DB_ALIAS ,  IntegrityError , DatabaseError )
 return timesince ( d , now , reversed = True )
          mapping = { 'alpha' : 'a' , 'beta' : 'b' , 'rc' : 'c' }
          return get_git_changeset . cache
              fk = fks_to_parent [ 0 ]
          return parse_http_date ( date )
 lineno_comment_map = { }
                  initial = self . widget . decompress ( initial )
   def value_from_datadict ( self , data , files , name ) :
          return value [ - 1 ]
  return get_callable ( callback ) , { }
                          if f == '__pycache__' :
 return re . sub ( r'(?u)[^-\w.]' , '' , s )
  if not isinstance ( var , six . string_types ) :
 def id_for_label ( self ) :
 raise NotImplementedError ( 'subclasses of Storage must provide a size() method' )
   def validate ( self , value ) :
    except Exception as e :
              widget = widget ( )
  from itertools import chain
          from django . template . debug import DebugLexer , DebugParser
                  m = _html_parser . attrfind . match ( rawdata , k )
 if not match :
           raise TemplateSyntaxError (  "'%s' did not receive value(s) for the argument(s): %s" %  ( name , ", " . join ( "'%s'" % p for p in unhandled_params ) ) )
                  self . stdout . write ( " - %s" % migration . name )
 if hasattr ( file_or_path , 'read' ) :
 parser . add_argument ( 'migration_name' , nargs = '?' ,  help = 'Database state will be brought to the state after that migration.' )
  new_name = col_name . lower ( )
     return new_class
      renamed_methods = (  ( '_get_memcache_timeout' , 'get_backend_timeout' , RemovedInDjango19Warning ) ,  )
                       if self . _request_middleware is None :
  except StandardError as e :
            getattr ( self , 'error_dict' )
          return
  except ValueError :
               return self . tag_function
  else :
                  self . active_writers += 1
                  replaces . extend ( migration . replaces )
                  msg . attach ( self . _create_mime_attachment ( * alternative ) )
 for x in range ( level , 1 , - 1 ) :
    while True :
                  exclude . append ( f . name )
   def skip_past ( self , endtag ) :
  output . append ( widget . render ( name + '_%s' % i , widget_value , final_attrs ) )
   try :
 return tt . tm_isdst > 0
          parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
   def __eq__ ( self , other ) :
    if weight >= 6 :
 import warnings
  else :
  elif isinstance ( value , datetime . date ) :
 return self . _coerce ( value )
              return ''
  def __init__ ( self , digits , sign = '-' ) :
 if six . PY2 :
              obj . pk = Model . _default_manager . db_manager ( db ) . get_by_natural_key ( * natural_key ) . pk
              continue
  targets = [ key for key in executor . loader . graph . leaf_nodes ( ) if key [ 0 ] == app_label ]
    def filter_function ( self , func , ** flags ) :
  return sign + int_part + dec_part
 command_dir = os . path . join ( management_dir , 'commands' )
 trans_real . _default = None
      compare = lambda self , a , b : a > b
 self . merge = options . get ( 'merge' , False )
  return False
 consume_next = True
  att_name , params , notes = self . normalize_col_name (  column_name , used_column_names , is_relation )
   def __getitem__ ( self , idx ) :
 from django . utils . timezone import is_aware
        @ register . filter ( is_safe = False )
               self . __dict__ [ "_wrapped" ] = value
 if endblock . contents not in acceptable_endblocks :
 if contents is not None :
          encoding = 'ascii'
   if self . max_length is not None and len ( file_name ) > self . max_length :
              raise InputStreamExhausted ( )
              return
          raise ImproperlyConfigured (  "Calling modelform_factory without defining 'fields' or "  "'exclude' explicitly is prohibited."  )
 if tag in self . CDATA_CONTENT_ELEMENTS :
      choice_input_class = RadioChoiceInput
     DEFAULT_LOGGING = {  'version' : 1 ,  'disable_existing_loggers' : False ,  'filters' : {  'require_debug_false' : {  '()' : 'django.utils.log.RequireDebugFalse' ,  } ,  'require_debug_true' : {  '()' : 'django.utils.log.RequireDebugTrue' ,  } ,  } ,  'handlers' : {  'console' : {  'level' : 'INFO' ,  'filters' : [ 'require_debug_true' ] ,  'class' : 'logging.StreamHandler' ,  } ,  'null' : {  'class' : 'logging.NullHandler' ,  } ,  'mail_admins' : {  'level' : 'ERROR' ,  'filters' : [ 'require_debug_false' ] ,  'class' : 'django.utils.log.AdminEmailHandler'  }  } ,  'loggers' : {  'django' : {  'handlers' : [ 'console' ] ,  } ,  'django.request' : {  'handlers' : [ 'mail_admins' ] ,  'level' : 'ERROR' ,  'propagate' : False ,  } ,  'django.security' : {  'handlers' : [ 'mail_admins' ] ,  'level' : 'ERROR' ,  'propagate' : False ,  } ,  'py.warnings' : {  'handlers' : [ 'console' ] ,  } ,  }  }
          kwargs [ 'number' ] = number
  except ( ValueError , OverflowError , InvalidOperation ) :
 table_output = [ ]
               raise MultiPartParserError ( "Invalid content length: %r" % content_length )
  create_models = set ( itertools . chain ( * manifest . values ( ) ) )
          retval = self . expression ( )
   def show_migration_list ( self , connection , app_names = None ) :
   def __exit__ ( self , * args , ** kwargs ) :
  except ( TypeError , VariableDoesNotExist ) :
                  return "[Didn't have permission to include file]"
 self . _done = True
      def compile_string ( template_string , origin ) :
    def xreadlines ( self ) :
          if app_config . models_module is None :
 pass
 readlines = property ( lambda self : self . file . readlines )
                          os . makedirs ( directory , self . directory_permissions_mode )
                          input_format = get_format ( 'DATE_INPUT_FORMATS' ) [ 0 ]
   except ( ImportError , AttributeError ) as e :
 s = MLStripper ( )
 output . append ( format_html ( self . inner_html ,  choice_value = force_text ( w ) , sub_widgets = '' ) )
  elif total_forms > self . max_num >= 0 :
 break
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
 if self . _errors is None :
                          locale_dir = self . default_locale_path
                      middle = middle [ len ( opening ) : ]
                          cursor . execute ( "INSERT INTO %s (cache_key, value, expires) "  "VALUES (%%s, %%s, %%s)" % table ,  [ key , b64encoded , exp ] )
 encode = lambda k , v : '%s=%s' % ( ( quote ( k , safe ) , quote ( v , safe ) ) )
        def parse_cookie ( cookie ) :
              ext = mimetypes . guess_extension ( content_type )
          val1 = self . var1 . resolve ( context , True )
              raise ValidationError (  self . error_messages [ 'max_whole_digits' ] ,  code = 'max_whole_digits' ,  params = { 'max' : ( self . max_digits - self . decimal_places ) } ,  )
              response . add_post_render_callback ( _set_response_etag )
  continue
  else :
  except LookupError :
 from django . utils . encoding import force_str
      if cookie == '' :
 opts = model . _meta
    imported_objects = { }
 from django . core . exceptions import ValidationError
                          handler = self . configure_handler ( handlers [ name ] )
 for item , args in zip ( result , result_args ) :
  return inner
 relative_dir = path_rest . replace ( base_name , name )
  return [ form . cleaned_data for form in self . forms ]
  return EscapeBytes ( bytes ( s ) )
              line = sio . readline ( )
               return { }
 import os
               _localtime = LocalTimezone ( )
 global _localtime
              code_list . append ( opt_dict [ o ] )
              print ( ' ' . join ( sorted ( filter ( lambda x : x . startswith ( curr ) , subcommands ) ) ) )
 for error in self . as_data ( ) :
 self . xml . startDocument ( )
 self . msg = msg
              for arg in args :
 def regex ( self ) :
          if name == "_wrapped" :
 import tempfile
   def absolute_path ( self , path , prefix = None ) :
 if fd . isatty ( ) :
 import time
 from django . core . handlers . wsgi import WSGIHandler
  write ( arg )
              if not isinstance ( data , basestring ) :
  del form . cleaned_data [ field ]
   opts = new_class . _meta = ModelFormOptions ( getattr ( new_class , 'Meta' , None ) )
  def prepare_value ( self , value ) :
  def to_python ( self , value ) :
 from django . utils . timesince import timesince , timeuntil
 import traceback
          httpd_cls = WSGIServer
from django . core . management import call_command
 opts = instance . _meta
              logging . _releaseLock ( )
 from django . db import connections , DEFAULT_DB_ALIAS
          self . _assert_mutable ( )
 decimal_separator = get_format ( 'DECIMAL_SEPARATOR' )
               if args :
                   if ( attr in ( "__file__" , "__name__" , "__path__" ) and  self . mod not in sys . modules ) :
 if exp is not None and exp < time . time ( ) :
                      self . can_read . release ( )
 klass = import_string ( backend or settings . EMAIL_BACKEND )
   def more ( self ) :
              for item in six . iteritems ( dict_ ) :
                      cls . __unicode__ = cls . __text_cast
 return fp . getvalue ( )
 itervalues = _itervalues
 if item [ 'description' ] is not None :
 from django . utils . deprecation import RemovedInDjango19Warning
 widget = NullBooleanSelect
      def close ( self ) :
  func ( path )
                      return True
   CONTEXT_SEPARATOR = "\x04"
      return getattr ( self , _assertCountEqual ) ( * args , ** kwargs )
              retval = handler . upload_complete ( )
          if field . rel . through . _meta . auto_created :
              return ''
                  return plural_suffix
from __future__ import unicode_literals
              _meta = Options ( table )
 if count2 != 0 :
  if fields is not None and f . name not in fields :
  unichr = chr
  from django . core . management . base import BaseCommand , CommandError
          return len ( value )
              self . attrs = attrs . copy ( )
    callable = callable
 self . localized_fields = getattr ( options , 'localized_fields' , None )
  if option == 'with' :
 from django . db import connections , router , transaction , DEFAULT_DB_ALIAS
                  content = ''
  subject = self . format_subject ( subject )
          msg = (  "WSGI application '%(app_path)s' could not be loaded; "  "Error importing module: '%(exception)s'" % ( {  'app_path' : app_path ,  'exception' : e ,  } )  )
  value = b'' . join ( self . make_bytes ( chunk ) for chunk in value )
          if self . attachments :
  def __init__ ( self , obj , m2m_data = None ) :
              continue
 resolved_path . append ( ns )
 from django . utils import six
  raise
              return [ super ( ModelMultipleChoiceField , self ) . prepare_value ( v ) for v in value ]
                  self . connection . ehlo ( )
                          continue
          return "ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_name=%s, namespaces=%s)" % (  self . _func_path , self . args , self . kwargs , self . url_name , self . app_name , self . namespaces )
               signals . got_request_exception . send ( sender = self . __class__ , request = request )
   def pop ( self , k , * args ) :
 return dict ( ( k , repr ( v ) ) for k , v in module . __dict__ . items ( ) if not omittable ( k ) )
  value = new_value
 from django . utils . _os import safe_join
          if part in PALETTES :
 if neg :
                  if character != '.' :
 super ( TemporaryFileUploadHandler , self ) . new_file ( file_name , * args , ** kwargs )
   def get_connection ( backend = None , fail_silently = False , ** kwds ) :
   class Command ( AppCommand ) :
          pass
     utf8_charset = Charset . Charset ( 'utf-8' )
 validate_ipv4_address = RegexValidator ( ipv4_re , _ ( 'Enter a valid IPv4 address.' ) , 'invalid' )
 tried = [ ]
        try :
  def add_arguments ( self , parser ) :
 BASE16_ALPHABET = '0123456789ABCDEF'
          handler . addQuickElement ( "title" , item [ 'title' ] )
  else :
 parser . EntityDeclHandler = self . entity_decl
    parser = command . create_parser ( '' , name )
  nodelist . append ( node )
 if hasattr ( field . rel . to . _default_manager , 'get_by_natural_key' ) :
 self . initial = initial or { }
              context . render_context . pop ( )
                  raise SignatureExpired (  'Signature age %s > %s seconds' % ( age , max_age ) )
  full_statement . append ( ');' )
       self . LibraryValueNotFoundException = value_not_found_exception
 plat = sys . platform
              the_path , info = urlretrieve ( url , path . join ( tempdir , filename ) )
 from django . utils import formats
 @ stringfilter
   def unclosed_block_tag ( self , parse_until ) :
 from django . core . management . base import BaseCommand , CommandError
   elif name is not None and filter_func is None :
 args , kwargs = parse_bits ( parser , bits , params , varargs , varkw ,  defaults , takes_context , name )
                          raise CommandError (  "Unable to find a locale path to store translations for file %s" % file_path )
                      raise
 self . _done = False
 CRITICAL = 50
  return ' ' . join ( extra_classes )
   def bpython ( self ) :
              if not unicodedata . combining ( char ) :
          for key in self . keyOrder :
          warnings . warn (  "django.utils.tzinfo.FixedOffset will be removed in Django 1.9. "  "Use django.utils.timezone.get_fixed_timezone instead." ,  RemovedInDjango19Warning )
  except ( LookupError , ImportError ) as e :
                      if value == k2 or text_value == force_text ( k2 ) :
   _urlconfs = local ( )
   if invalid_apps :
      import dummy_threading as threading
          new_value = _strip_once ( value )
 from django . core . management . sql import sql_all
          return s
              logger . setLevel ( _checkLevel ( level ) )
 new_method_name = renamed_method [ 1 ]
 from django . core . management . sql import sql_indexes
              choices . insert ( 0 , none_value )
          return import_string ( app_path )
          __str__ = serialize_headers
 try :
 from io import BytesIO , StringIO , UnsupportedOperation
                      raise
 warnings . warn ( "Your TEMPLATE_LOADERS setting includes %r, but your Python installation doesn't support that type of template loading. Consider removing that line from TEMPLATE_LOADERS." % loader )
      pass
  return obj
              top_dir = path . join ( os . getcwd ( ) , name )
 self . msgattrib_options = self . msgattrib_options [ : ] + [ '--no-location' ]
 itervalues = _itervalues
          return datetime . now ( )
 serializers = { }
 try :
  requires_system_checks = False
   class BaseLoader ( object ) :
 if match :
     if self . loaded_object_count > 0 :
  if lang_code :
 if self . verbosity >= 2 :
 import binascii
 value = unicodedata . normalize ( 'NFKD' , value ) . encode ( 'ascii' , 'ignore' ) . decode ( 'ascii' )
 plan = executor . migration_plan ( executor . loader . graph . leaf_nodes ( ) )
 id = None
  else :
                      with transaction . atomic ( using = db ) :
  except IndexError :
              data [ Model . _meta . pk . attname ] = Model . _meta . pk . to_python (  node . getAttribute ( 'pk' ) )
 super_set = super ( SortedDict , self ) . __setitem__
    add_to_builtins ( 'django.template.defaulttags' )
   def __len__ ( self ) :
 self . test_database = options . get ( 'test_database' , False )
                      self . stdout . write ( errors )
 super ( BaseModelFormSet , self ) . __init__ ( ** defaults )
 for choice in value :
 bmatch = block_re . match ( t . contents )
      options = FASTCGI_OPTIONS . copy ( )
                      return
           seconds2 , name2 = chunks [ i + 1 ]
 if push is not None :
  if out_log :
 def __new__ ( mcs , name , bases , attrs ) :
              self . add_error ( None , e )
      def __init__ ( self , filter_expression ) :
    @ register . filter ( "phone2numeric" , is_safe = True )
 shutdown_message = options . get ( 'shutdown_message' , '' )
  from . base import CommandError
                   raise TemplateSyntaxError (  "'%s' received unexpected keyword argument '%s'" %  ( name , param ) )
  else :
                  if targets [ 0 ] [ 1 ] is None :
   def handle ( self , ** options ) :
  if self . max_digits is not None and digits > self . max_digits :
                      self . stdout . write ( errors )
  data = ( form . cleaned_data [ field ] , ) + date_data
 break
              i += 1
 _func_code = "func_code"
   def __call__ ( self , template_name , template_dirs = None ) :
   def write ( self , msg , style_func = None , ending = None ) :
   class Options ( object ) :
  from django . apps import apps
                  pass
 d = Decimal ( input_val )
          return yes
                      attrs_plus [ 'id' ] += '_{0}' . format ( i )
                  return self . __bytes_cast ( )
          self . unpack_ipv4 = unpack_ipv4
 if settings . USE_I18N or settings . USE_L10N :
              self . _caches . caches = { }
    possible_sizes = [ x . chunk_size for x in upload_handlers if x . chunk_size ]
  return results
  else :
 import ssl
              value = ConvertingDict ( value )
 from django . utils import timezone
          attrs = super ( CharField , self ) . widget_attrs ( widget )
 parser . add_argument ( '-o' , '--output' , default = None , dest = 'output' ,  help = 'Specifies file to which the output is written.' )
 from django . utils . module_loading import import_string
 if callable ( getattr ( self . stream , 'getvalue' , None ) ) :
   @ property
 if re . search ( '^%s%s' % ( prefix_norm , pattern ) , candidate_pat % candidate_subs , re . UNICODE ) :
 self . add_item_elements ( handler , item )
 while s [ : 1 ] == b';' :
      help = "Returns a list of the SQL statements required to return all tables in the database to the state they were in just after they were installed."
          scheme , netloc , path , query , fragment = urlsplit ( url )
          value = self . to_python ( value ) . strip ( )
          msg = 'Module "%s" does not define a "%s" attribute/class' % (  dotted_path , class_name )
 I18N_MODIFIED = 2
   base36 = [ ]
    def urlize ( text , trim_url_limit = None , nofollow = False , autoescape = False ) :
                  del obj_dict [ attr ]
 if not path_info :
                  exp = datetime . utcfromtimestamp ( timeout )
  delattr ( self . _wrapped , name )
  if secure :
 i = next_space_index ( subject , i )
  handler . endElement ( "author" )
              translation . activate ( settings . LANGUAGE_CODE )
   ISO_8859_1 , UTF_8 = str ( 'iso-8859-1' ) , str ( 'utf-8' )
   @ property
                      content = template_file . read ( )
          return time_format ( value , 'TIME_FORMAT' , use_l10n = use_l10n )
     utc = pytz . utc if pytz else UTC ( )
              raise SuspiciousFileOperation ( "Attempted access to '%s' denied." % name )
 LOCK_EX = 0x2
          return self . number < self . paginator . num_pages
 raise NotImplementedError ( 'subclasses of BaseCache must provide a delete() method' )
   def parse ( self ) :
                  kwargs [ 'to_field' ] = self . fk . rel . field_name
              connections [ self . using ] . close ( )
 hextet = ip_str . split ( '::' )
 from decimal import Decimal , InvalidOperation , Context , ROUND_HALF_UP
                 if instance . pk is None :
   def _coerce ( self , value ) :
 outer_html = '<ul{id_attr}>{content}</ul>'
  if val == [ ] :
  else :
  _add_doc ( b , """Byte literal""" )
              raise AttributeError ( "This method is available only on the view class." )
 six . reraise ( os_err_exc_type , os_err_exc_type ( 'Error executing %s: %s' %  ( args [ 0 ] , strerror ) ) , sys . exc_info ( ) [ 2 ] )
 context . update ( unpacked_vars )
 self . file . size = file_size
              for key , value in parse_qsl ( query_string or '' ,  keep_blank_values = True ) :
               return False
          raise self . error ( token , "Empty block tag" )
  from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT
 return other in self . children
 return super ( QueryDict , self ) . setdefault ( key , default )
 from django . utils . safestring import SafeData , mark_safe
 return instance
          return item in self . dict
 self . event_stream = pulldom . parse ( self . stream , self . _make_parser ( ) )
   if 'noreset' not in opts :
              value = float ( value )
   class TemplateSyntaxError ( Exception ) :
              raise InvalidTemplateLibrary ( "Template library %s not found, "  "tried %s" %  ( library_name ,  ',' . join ( tried_modules ) ) )
 if decimal_pos is not None :
 defaults = {  'auto_id' : self . auto_id ,  'prefix' : self . add_prefix ( i ) ,  'error_class' : self . error_class ,  }
 from django . utils . encoding import force_str , force_text , iri_to_uri
 import json
 @ stringfilter
              yield subwidget
 def __init__ ( self , parent_widget , name , value , attrs , choices ) :
          return not bool ( self . option_list )
  elif ch == ')' :
  return 'th'
 if output :
   def write_po_file ( self , potfile , locale ) :
 html = endtag_re . sub ( '' , html )
 if six . PY2 :
   @ HttpResponse . content . setter
    return retval
  param = '' . join ( name )
 if bytes_read > rollback :
           tupl = d . as_tuple ( )
    elif maxsize is None :
              return False
 converter = connection . introspection . table_name_converter
    def custom_sql_for_model ( model , style , connection ) :
                          global invalid_var_format_string
 version = get_complete_version ( version )
      if urlconf is None :
              if isinstance ( end , unicode ) :
   def handle ( self , * app_labels , ** options ) :
  elif char in 'dj' :
 from django . utils . timezone import is_aware , utc
          return input_val
 attrs = { 'id' : id_ } if id_ else { }
          self . token = token
 if refto in known_models :
   return True
          return _generate_cache_key ( request , method , headerlist , key_prefix )
 for attr in ( 'expects_localtime' , 'is_safe' , 'needs_autoescape' ) :
  strip_spaces_between_tags = allow_lazy ( strip_spaces_between_tags , six . text_type )
 for f in fields :
 if top + self . orphans >= self . count :
    for role in termcolors . PALETTES [ termcolors . NOCOLOR_PALETTE ] :
 if self . lookups is not None :
   def item_attributes ( self , item ) :
 try :
 import socket
    def loaddata ( self , fixture_labels ) :
 next = index + len ( self . _boundary )
          super ( QueryDict , self ) . __init__ ( )
  else :
              if field not in self . errors :
 return sys . modules [ name ]
                      confirm = input ( 'Please enter either "yes" or "no": ' )
    elif safe_input :
 super ( Context , self ) . __init__ ( dict_ )
  return list ( _serializers )
from __future__ import unicode_literals
      if not qs . ordered :
   key_salt = force_bytes ( key_salt )
   def convert_old_style_list ( list_ ) :
 self . extra_context = kwargs . pop ( 'extra_context' , { } )
   return str ( major + sub )
 self . sysid = sysid
 def urlencode ( value , safe = None ) :
 for header in headerlist :
    def incr ( self , key , delta = 1 , version = None ) :
 return '"%s"' % etag . replace ( '\\' , '\\\\' ) . replace ( '"' , '\\"' )
  else :
   def receive_data_chunk ( self , raw_data , start ) :
          nm = Header ( nm , encoding ) . encode ( )
 new = '#: ' + orig_file
 @ stringfilter
   def list ( self ) :
                              name . append ( ch )
     return ( os . path . normcase ( os . path . abspath ( src ) ) ==  os . path . normcase ( os . path . abspath ( dst ) ) )
      import pickle
 del bits [ : 3 ]
  def render ( self , name , value , attrs = None , choices = ( ) ) :
          self . argv = argv or sys . argv [ : ]
  elif not isinstance ( end , str ) :
 d = d [ n ]
          return None
 django . setup ( )
  return decorator ( * args , ** kwargs )
               if bit . startswith ( '_("' ) or bit . startswith ( "_('" ) :
   def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
          del self . dict [ item ]
          prefix = get_script_prefix ( )
  return repr ( list ( self ) )
                  raise TemplateSyntaxError ( '"with" in %r tag needs at least '  'one keyword argument.' % bits [ 0 ] )
 if not self . is_valid ( ) or not self . can_order :
  else :
              raise InvalidTemplateLibrary ( "Unsupported arguments to "  "Library.filter: (%r, %r)" , ( name , filter_func ) )
  for attachment in self . attachments :
  for app_name , model_list in manifest . items ( ) :
   if item [ 'updateddate' ] is not None :
          return 0
          hfile = msvcrt . get_osfhandle ( _fd ( f ) )
 return self . cleaned_data
  from django . utils . translation import ugettext_lazy as _ , pgettext_lazy
 constant_re = re . compile ( r"""_\(((?:".*?")|(?:'.*?'))\)""" )
  backend_cls = import_string ( backend )
 trail = closing + trail
  connection = connections [ options . get ( 'database' ) ]
 def __init__ ( self , attrs = None , date_format = None , time_format = None ) :
      initLock = Lock ( )
                          if indexes [ column_name ] [ 'primary_key' ] :
              label_output = self . handle_label ( label , ** options )
 try :
  import datetime
 def combine ( cls , date , time ) :
  self . error ( "bad end tag: %r" % ( rawdata [ i : j ] , ) )
 if field in self . cleaned_data :
    class MIMEMixin ( ) :
                          if not os . path . isdir ( migrations_directory ) :
  if alter_sql :
  if isinstance ( value , datetime . time ) :
                      raise CommandError ( "More than one migration matches '%s' in app '%s'. Please be more specific." % (  migration_name , app_label ) )
       def __init__ ( self , name , old , new = None ) :
          key = self . make_key ( key , version = version )
 text = force_text ( text )
 self . next = next
    if settings . configured :
          app_name = get_commands ( ) [ name ]
                  skipped . append ( ( model , deps ) )
   check_programs ( 'xgettext' )
 from django . core . management . sql import check_for_migrations
  except ( ValueError , TypeError ) :
    def _parse_header_params ( s ) :
  except IndexError :
      setattr ( Module_six_moves_urllib_error , attr . name , attr )
  headerlist = cache . get ( cache_key , None )
 orig_vars . pop ( '__dict__' , None )
    signals . request_finished . connect ( cache . close )
   def iterlists ( d , ** kw ) :
 FILTER_ARGUMENT_SEPARATOR = ':'
    for model in app_models :
              class ConvertingDict ( dict ) :
                      return True
          return self . render ( )
          return getattr ( self . _caches , 'caches' , { } ) . values ( )
                              continue
 re_tag = re . compile ( r'<(/)?([^ ]+?)(?:(\s*/)| .*?)?>' , re . S )
          key = self . make_key ( key , version = version )
              if unicodedata . combining ( char ) :
          old_setting = context . autoescape
   def _existing_object ( self , pk ) :
 if constant_arg :
  else :
              response . streaming_content = [ ]
  except Exception :
 self . vals = [ ]
  values = { 'true' : True , 'false' : False }
   def __hash__ ( self ) :
 if not template_dirs :
              raise ContentNotRenderedError ( 'The response content must be '  'rendered before it can be iterated over.' )
     def register_serializer ( format , serializer_module , serializers = None ) :
   def Z ( self ) :
 self . endChannelElement ( handler )
 singular = [ ]
                      continue
 import datetime
   def token_kwargs ( bits , parser , support_legacy = False ) :
 from django . core import signals
    id = "literal"
     def literals ( choices , prefix = "" , suffix = "" ) :
  from django . apps import apps
  randint = random . randrange ( 100000 )
   def get ( self , key , otherwise = None ) :
  else :
  from django . apps import apps
   class BaseHandler ( object ) :
                      i = open_tags . index ( tagname )
 if val is not None :
  if hasattr ( mw_instance , 'process_view' ) :
          value = super ( TypedChoiceField , self ) . clean ( value )
              kwargs [ 'error_messages' ] = error_messages [ f . name ]
 escaped = False
              check_programs ( 'msguniq' , 'msgmerge' , 'msgattrib' )
                  definition [ 'bg' ] = colors [ - 1 ]
          l = lambda x : self . make_key ( x , version = version )
 LOCK_EX = fcntl . LOCK_EX
              self . file = BytesIO ( )
          if value :
          file = open ( file_or_path , 'rb' )
 id_ = self . field . widget . attrs . get ( 'id' ) or self . auto_id
                        if self . required :
 self . alternatives = alternatives or [ ]
              context [ self . asvar ] = result
  else :
 return IncludeNode ( parser . compile_filter ( bits [ 1 ] ) , extra_context = namemap ,  isolated_context = isolated_context )
 bits = token . split_contents ( ) [ 1 : ]
   i += 1
   elif form . has_changed ( ) :
   def E ( self ) :
          return len ( list ( email_messages ) )
 return res
 while len ( line ) > max_width :
  from django . conf import settings
  from django . apps import apps
  elif isinstance ( o , decimal . Decimal ) :
 if len ( bits ) != 2 :
   def _dec ( func ) :
          if not hasattr ( self , '_object_dict' ) :
     def main ( main_func , args = None , kwargs = None ) :
 if self . body :
      from _systemrestart import SystemRestart
 from django . utils . safestring import mark_safe
          try :
      def __init__ ( self , content ) :
          value = request . META . get ( header , None )
  if is_aware ( date ) :
   def __deepcopy__ ( self , memo ) :
    def validate_domain_part ( self , domain_part ) :
                   value = str ( Header ( value , 'utf-8' , maxlinelen = sys . maxsize ) . encode ( ) )
                  return endpos
 forms_to_delete = self . deleted_forms
                  migration = loader . get_migration ( app_label , migration_name )
 use_natural_keys = options . get ( 'use_natural_keys' )
 if self . data . hour > 11 :
  return value
              fp . write ( "%d\n" % os . getpid ( ) )
           six . reraise ( DeserializationError , DeserializationError ( e ) , sys . exc_info ( ) [ 2 ] )
  use_workaround = (  ( current_version < ( 2 , 7 , 3 ) ) or  ( current_version >= ( 3 , 0 ) and current_version < ( 3 , 2 , 3 ) )  )
  else :
              with open ( filepath , 'r' ) as fp :
   def render ( self , context ) :
              return 'StopUpload: Consume request data, then halt.'
 token = parser . next_token ( )
 six . reraise ( ImproperlyConfigured , ImproperlyConfigured ( msg ) ,  sys . exc_info ( ) [ 2 ] )
 converter = getattr ( self , converter )
  def __init__ ( self , name , value , attrs , choices ) :
              m = regex . search ( text , pos )
   def _get_choices ( self ) :
  return f
                  self . stdout . write ( shutdown_message )
          filelist = _cached_filenames + new_filenames + _error_files
    except Exception as e :
 self . buffer = b''
  else :
      return lazy_number ( ngettext , str , singular = singular , plural = plural , number = number )
          t = get_template ( template_name , dirs )
                 def get ( self , key , default = None , version = None ) :
 name = self . path ( name )
 translation = self . _new_gnu_trans ( localedir )
          first , lang , priority = pieces [ i : i + 3 ]
   for tag in open_tags :
              exts = extensions if extensions else [ 'js' ]
 self . email_backend = email_backend
  from django . utils import six
 warnings . warn ( 'A secure pseudo-random number generator is not available '  'on your system. Falling back to Mersenne Twister.' )
 with Archive ( path ) as archive :
   class DefaultCacheProxy ( object ) :
      return _trans . deactivate ( )
     else :
      def add_css ( self , data ) :
           if not self . _cached_loaders :
   else :
    def memoize ( func , cache , num_args ) :
     if buffer_ is not None :
     absolute_max = max_num + DEFAULT_MAX_NUM
   def save_new_objects ( self , commit = True ) :
  def to_python ( self , value ) :
 return self . id
 self . content_type = content_type
  else :
              raise AttributeError ( "'%s' object has no attribute 'cleaned_data'" % self . __class__ . __name__ )
          parser . invalid_block_tag ( endblock , 'endblock' , acceptable_endblocks )
                  key += item
 self . indent ( 2 )
                    timeout += int ( time . time ( ) )
              pot_path = os . path . join ( path , '%s.pot' % str ( self . domain ) )
  except OSError :
       def __init__ ( self , msg , params = ( ) ) :
   gettext_noop = gettext_lazy = _ = gettext
     class OrderedSet ( object ) :
 try :
 if obj_list is None :
 raise self . source_error ( source , msg )
   response = self . get_exception_response ( request , resolver , 400 )
 cache_key = 'views.decorators.cache.cache_header.%s.%s' % (  key_prefix , url . hexdigest ( ) )
 sort = complain
           instance . save ( )
 missing_args_message = "Enter at least one %s." % label
              number = int ( number )
 msg_data = msg_data . decode ( charset )
  except NameError :
              sys . stderr . write ( "fork #2 failed: (%d) %s\n" % ( e . errno , e . strerror ) )
           pos_inf = 1e200 * 1e200
  else :
              e . args = ( "Problem installing fixtures: %s" % e , )
 off = 6 * ( delta // 100 + delta // 400 )
 if item_date :
 return ''
                  if stream :
    if self . can_delete and self . _should_delete_form ( form ) :
          return [ ]
               lead , middle , trail = '' , word , ''
  try :
  else :
  except ValueError :
 return result
              for f in chain . from_iterable ( l [ 1 ] for l in self . _files . lists ( ) ) :
  both_after = [  Tok ( "other" , r"." ) ,  ]
 empty_values = list ( validators . EMPTY_VALUES )
 if self . verbosity >= 2 :
 from django . db . backends . utils import typecast_timestamp
 raise NotImplementedError ( 'subclasses of LabelCommand must provide a handle_label() method' )
   @ property
      help = "Introspects the database tables in the given database and outputs a Django model module."
 import os
     class DateFormat ( TimeFormat ) :
 if isinstance ( value , six . string_types ) :
          key = self . make_key ( key , version = version )
                  errors = getattr ( fp , "errors" , None )
   def getlist ( self , key , default = None ) :
 from django . utils . html import ( conditional_escape , escapejs ,  escape , urlize as _urlize , linebreaks , strip_tags , avoid_wrapping ,  remove_tags )
 from django . utils import six
              yield 'day'
          return json . loads ( data . decode ( 'latin-1' ) )
 @ stringfilter
    if months :
          self . _out = out
              self . _non_form_errors = self . error_class ( e . error_list )
 basedir = os . path . join ( os . path . dirname ( potfile ) , locale , 'LC_MESSAGES' )
 s = StringIO ( )
                  template = template [ 7 : ]
              return ''
  if dklen > ( 2 ** 32 - 1 ) * hlen :
              ext_list [ i ] = '.%s' % ext_list [ i ]
      widget = EmailInput
   return result
  def __init__ ( self , args , kw ) :
 html [ 'day' ] = self . create_select ( name , self . day_field , value , day_val , choices , self . day_none_value )
 if not self . port . isdigit ( ) :
 app_path = getattr ( settings , 'WSGI_APPLICATION' )
                  app_list = resolver . app_dict [ ns ]
 auto_id = self . auto_id
  else :
 absolute_http_url_re = re . compile ( r"^https?://" , re . I )
 extra_params = OrderedDict ( )
 return self . _html_output (  normal_row = '<p%(html_class_attr)s>%(label)s %(field)s%(help_text)s</p>' ,  error_row = '%s' ,  row_ender = '</p>' ,  help_text_html = ' <span class="helptext">%s</span>' ,  errors_on_separate_row = True )
              urlconf_repr = repr ( self . urlconf_name )
 super ( Command , self ) . handle ( ** options )
   def get_available_name ( self , name ) :
  new_result = [ ]
 self . field = field
              extra_files . extend ( map ( lambda x : x . strip ( ) , file . split ( ',' ) ) )
                                      chunk = base64 . b64decode ( chunk )
 def __init__ ( self , * args , ** kwargs ) :
 if '()' in config :
  num_loopvars = len ( self . loopvars )
                  sublist = _helper ( sublist_item , tabs + 1 )
    def end_object ( self , obj ) :
 import sys
                              field_type = 'ForeignKey(%s' % rel_to
   def __repr__ ( self ) :
    if options . get ( 'load_initial_data' ) :
   def T ( self ) :
 sub_ul_renderer . choice_input_class = self . choice_input_class
  if subject [ i ] in ( '"' , "'" ) :
  val . append ( iso_input )
   if self . verbosity > 0 or self . interactive :
 for model in not_installed_models :
  if level is not None :
 self . _files = MultiValueDict ( )
 def content ( self , value ) :
     emit_post_migrate_signal ( created_models , self . verbosity , self . interactive , connection . alias )
    self . widget . choices = self . choices
 if not supported_platform or not is_a_tty :
         OPERATORS = {  'or' : infix ( 6 , lambda context , x , y : x . eval ( context ) or y . eval ( context ) ) ,  'and' : infix ( 7 , lambda context , x , y : x . eval ( context ) and y . eval ( context ) ) ,  'not' : prefix ( 8 , lambda context , x : not x . eval ( context ) ) ,  'in' : infix ( 9 , lambda context , x , y : x . eval ( context ) in y . eval ( context ) ) ,  'not in' : infix ( 9 , lambda context , x , y : x . eval ( context ) not in y . eval ( context ) ) ,  '=' : infix ( 10 , lambda context , x , y : x . eval ( context ) == y . eval ( context ) ) ,  '==' : infix ( 10 , lambda context , x , y : x . eval ( context ) == y . eval ( context ) ) ,  '!=' : infix ( 10 , lambda context , x , y : x . eval ( context ) != y . eval ( context ) ) ,  '>' : infix ( 10 , lambda context , x , y : x . eval ( context ) > y . eval ( context ) ) ,  '>=' : infix ( 10 , lambda context , x , y : x . eval ( context ) >= y . eval ( context ) ) ,  '<' : infix ( 10 , lambda context , x , y : x . eval ( context ) < y . eval ( context ) ) ,  '<=' : infix ( 10 , lambda context , x , y : x . eval ( context ) <= y . eval ( context ) ) ,  }
  connection = connections [ options [ 'database' ] ]
   @ register ( Tags . compatibility )
                   self . _done = True
          return datetime . fromtimestamp ( os . path . getatime ( self . path ( name ) ) )
                          raise
                  continue
   def clean ( self , value ) :
                      encoded = '"' + encoded + '"'
              value = '-' + value
                      raise CommandError (  "Cache table '%s' could not be created.\nThe error was: %s." %  ( tablename , force_text ( e ) ) )
                    input_attrs [ 'id' ] = '%s_%s' % ( id_ , i )
                  return self . extract ( absolute_path )
              ch2 = None
              val = Header ( val , encoding ) . encode ( )
    model_dependencies . reverse ( )
          super ( ExternalReferenceForbidden , self ) . __init__ ( )
 self . include_html = include_html
   @ encoding . setter
   def render_options ( self , choices , selected_choices ) :
          values = dict ( ( key , val . resolve ( context ) ) for key , val in  six . iteritems ( self . extra_context ) )
 raise NotImplementedError ( 'subclasses of Storage must provide a listdir() method' )
          parser . add_argument ( 'name' , help = 'Name of the application or project.' )
          if app_config . models_module is None :
   else :
                   raise
 token = parser . next_token ( )
 from django . conf import settings
   def __bool__ ( self ) :
 writer = MigrationWriter ( new_migration )
  from django . utils . deprecation import RemovedInDjango19Warning
 if start > upto :
   def get ( self , key , default = None , version = None ) :
              return False
                  return value . serializable_value ( self . to_field_name )
 import sys
 self . _files = MultiValueDict ( )
          if parse_until is None :
 block . context = context
          cursor = connection . cursor ( )
          if self . _wrapped is empty :
  SafeUnicode = SafeText
      help = "Prints the CREATE TABLE, custom SQL and CREATE INDEX SQL statements for the given model module name(s)."
      allowed_schemes = [ 'http' , 'https' , 'ftp' ]
                                  n = int ( idx )
  internal_use_only = False
       for app_config in apps . get_app_configs ( ) :
      if six . PY2 :
 return value . replace ( " " , "\xa0" )
     def has_key ( self , key , version = None ) :
  msgs = '\n' . join ( lines )
from __future__ import unicode_literals
  return super ( CommandParser , self ) . parse_args ( args , namespace )
                          if self . selected_fields is None or field . attname in self . selected_fields :
  raise
          super ( DateTimeBaseInput , self ) . __init__ ( attrs )
  try :
      if urlconf is None :
 result . validators = self . validators [ : ]
                      result . extend ( [ result [ - 1 ] ] * ( count - 1 ) )
 self . render_value = render_value
 utf8_charset . body_encoding = None
  from django . core . management . base import AppCommand
          pid = os . getpid ( )
 def __init__ ( self , server , params ) :
          for name in self . fields :
  def __init__ ( self , iterable = None ) :
   out = self . compress ( clean_data )
 if len ( t ) == 2 :
    if objects_in_fixture == 0 :
                      self . handle_data ( rawdata [ i : j ] )
 return time_str + '%+03d%02d' % ( hour , minute )
                  content = '' . join ( comment )
 nofollow_attr = ''
          raise TemplateDoesNotExist ( "No template names provided" )
 try :
                  fixture . close ( )
  print ( opt_label )
     class SlugField ( CharField ) :
          pass
 from django . db . migrations . loader import MigrationLoader
  elif '\\' in path :
   def c ( self ) :
     def infix ( bp , func ) :
                          raise ValueError ( 'Unable to configure '  'filter %r: %s' % ( name , e ) )
  raise self . error ( token , "Invalid block tag: '%s'" % command )
  from __future__ import unicode_literals
 @ stringfilter
   for cat in item [ 'categories' ] :
   DOTS = [ '&middot;' , '*' , '\u2022' , '&#149;' , '&bull;' , '&#8226;' ]
  if self . addr :
              continue
   if not lib :
 return formatted_subject [ : 989 ]
          return mark_safe ( six . text_type ( number ) )
 obj_pk = getattr ( obj , field . rel . field_name )
     class Promise ( object ) :
    @ register . tag
  def add_arguments ( self , parser ) :
    if not os . path . isdir ( directory ) :
   def luhn ( candidate ) :
    class ModelForm ( six . with_metaclass ( ModelFormMetaclass , BaseModelForm ) ) :
  if end is None :
              self . _max_entries = 300
              sep = space
              self . mod = old_mod
  from django . utils import six
    return the_path
                  d [ k ] = val
                                  current = settings . TEMPLATE_STRING_IF_INVALID
   if not last_row . endswith ( row_ender ) :
 result . fields = tuple ( [ x . __deepcopy__ ( memo ) for x in self . fields ] )
          raise TemplateSyntaxError ( "'%s' takes at least one argument"  " (path to a view)" % bits [ 0 ] )
                          continue
   while True :
    class MultiValueDict ( dict ) :
  import django
 from django . utils . encoding import force_str
 if use_l10n or ( use_l10n is None and settings . USE_L10N ) :
          parser . add_argument ( 'args' , metavar = self . label , nargs = '+' )
              if cursor and connection . introspection . table_name_converter ( model . _meta . db_table ) in table_names :
              template = self . template . resolve ( context )
 import smtplib
 return '%02d' % self . g ( )
      runfastcgi ( sys . argv [ 1 : ] )
  else :
 if not hextets [ index ] :
          kw . extend ( [ d . hour , d . minute , d . second , d . microsecond , d . tzinfo ] )
  try :
              if settings . USE_L10N :
 for name in formatters :
   def prepare_value ( self , value ) :
 models = 'models'
   def __setattr__ ( self , name , value ) :
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
 if refto in seen_models :
  return ':' . join ( ret_ip )
              field_params [ 'db_column' ] = col_name
   def __nonzero__ ( self ) :
          return ZERO
  self . _container = [ ]
              pk_key = "%s-%s" % ( self . add_prefix ( i ) , self . model . _meta . pk . name )
  elif self . argv [ 1 : ] in ( [ '--help' ] , [ '-h' ] ) :
 lbp = 0
 used = name . pop ( 0 )
   def start_object ( self , obj ) :
  piece = '' . join ( source [ last : pos ] )
 slots = orig_vars . get ( '__slots__' )
          tpl = "ExternalReferenceForbidden(system_id='{}', public_id={})"
      @ register . filter ( is_safe = False )
 if self . help :
 from django . utils . deprecation import RenameMethodsBase , RemovedInDjango19Warning
                  raise ValidationError ( self . error_messages [ 'invalid_time' ] , code = 'invalid_time' )
 self . validate_name ( app_name , "app" )
 return dateformat . time_format ( value , get_format ( format or 'TIME_FORMAT' , use_l10n = use_l10n ) )
    with open ( old_file_name , 'rb' ) as old_file :
     if app_list_value is not None :
          def int2byte ( i ) :
          return
              os . environ [ 'DJANGO_LIVE_TEST_SERVER_ADDRESS' ] = options [ 'liveserver' ]
 with context . push ( ) :
              return self . empty_value
  from django . utils import six
  def __init__ ( self , fields = ( ) , * args , ** kwargs ) :
  super ( HttpResponseRedirectBase , self ) . __init__ ( * args , ** kwargs )
                         ns = app_list [ 0 ]
 def rjust ( value , arg ) :
 connection = connections [ database ]
                          var_obj = Variable ( constant ) . resolve ( { } )
 import tempfile
  try :
  loggers = config . get ( 'loggers' , EMPTY_DICT )
    if not old_method and new_method :
 if isinstance ( widget , type ) :
 self . verbosity = int ( options . get ( 'verbosity' ) )
              self . _client = self . _lib . Client ( self . _servers , pickleProtocol = pickle . HIGHEST_PROTOCOL )
 if transfer_encoding is not None :
              kw [ 'microsecond' ] = kw [ 'microsecond' ] . ljust ( 6 , '0' )
  return self . object_list [ index ]
                          raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
 parser . ExternalEntityRefHandler = self . external_entity_ref_handler
  elif item [ "author_name" ] :
   def f ( self ) :
 self . kwargs = kwargs
          result = super ( SortedDict , self ) . popitem ( )
 if isinstance ( error , ValidationError ) :
    def get_cookie_signer ( salt = 'django.core.signing.get_cookie_signer' ) :
   def _cull ( self ) :
                      self . stdout . write ( "Creating %s\n" % new_path )
   yield '%s\n' % line [ : space - 1 ]
 pass
 urlconf = settings . ROOT_URLCONF
          if len ( self . _cache ) >= self . _max_entries :
                 expires = typecast_timestamp ( str ( expires ) )
   class BaseConverter ( object ) :
    class HttpResponseForbidden ( HttpResponse ) :
  else :
 self . connector = connector or self . default
   if fixture_name != 'initial_data' and not fixture_files :
 values = _itervalues
     @ python_2_unicode_compatible
          if key not in self :
   original_lookup = lookup_view
  common_ancestor = None
          if json . __version__ . split ( '.' ) >= [ '2' , '1' , '3' ] :
    lexer = JsLexer ( )
       comment_re = re . compile ( r"^((?:'[^']*'|[^'])*?)--.*$" )
   def get_wsgi_application ( ) :
  else :
    if ch == '<' :
 if m :
    @ register . filter ( is_safe = False )
  try :
                      self . _changed_data . append ( name )
 try :
 self . context = context
 if isinstance ( value , six . string_types ) :
   def _isdst ( self , dt ) :
              raise ValidationError ( _ ( 'Enter a valid IPv4 or IPv6 address.' ) , code = 'invalid' )
 mtime = stat . st_mtime
              return self . paginator . count
  warnings . warn (  "django.utils.tzinfo will be removed in Django 1.9. "  "Use django.utils.timezone instead." ,  RemovedInDjango19Warning , stacklevel = 2 )
 if isinstance ( rhs , SafeData ) :
    def get_complete_version ( version = None ) :
   class ClearableFileInput ( FileInput ) :
   def handle ( self , ** options ) :
 self . _changed_data = None
  output = [ ]
  return data
          zfile . write ( item )
   def emit ( self , record ) :
          return timeuntil ( value , arg )
     if self . verbosity > 1 :
   @ property
              try :
          return fastcgi_help ( "ERROR: Implementation must be one of prefork or "  "thread." )
  else :
  return new_value
 nodelist_true = parser . parse ( ( 'else' , 'endifchanged' ) )
 data_value = field . widget . value_from_datadict ( self . data , self . files , prefixed_name )
 utility = ManagementUtility ( argv )
  from django . core . exceptions import ValidationError
  except ImportError :
 if name . startswith ( '.' ) :
 from __future__ import unicode_literals
 def deleted_forms ( self ) :
 parser . add_argument ( 'directory' , nargs = '?' , help = 'Optional destination directory' )
                  break
 parser . add_argument ( '--extension' , '-e' , dest = 'extensions' ,  action = 'append' , default = [ 'py' ] ,  help = 'The file extension(s) to render (default: "py"). '  'Separate multiple extensions with commas, or use '  '-e multiple times.' )
   __all__ = [  'get_cache' , 'cache' , 'DEFAULT_CACHE_ALIAS' , 'InvalidCacheBackendError' ,  'CacheKeyWarning' , 'BaseCache' ,  ]
 message = email_message . message ( )
              match = kwarg_re . match ( bits [ 0 ] )
          pass
              validate_ipv6_address ( value )
 result . key = key
  try :
     if not options [ 'no_startup' ] :
  from collections import OrderedDict
   elif t . token_type == TOKEN_VAR :
              this_year = datetime . date . today ( ) . year
 import types
     subclass = type ( "Migration" , ( migrations . Migration , ) , {  "dependencies" : [ ] ,  "operations" : new_operations ,  "replaces" : replaces ,  } )
   else :
 if size :
  except IndexError :
 trail = punctuation + trail
 if illegal_formatting :
           replacement = _BROWSERS_DEPRECATED_LOCALES . get ( lang_code )
          for node in self . nodelist_loop :
 if m is not None :
 class ErrorDict ( dict ) :
          if not value :
  return field_dict
          return '\n' . join ( '* %s' % e for e in self )
  def __init__ ( self , query_string = None , mutable = False , encoding = None ) :
              return timedelta ( seconds = - time . timezone )
 if not match :
  except InvalidTemplateLibrary as e :
 if not value :
  try :
  if 'media' not in attrs :
              yield self [ key ]
  resolved_kwargs = dict ( ( k , v . resolve ( context ) ) for k , v in self . kwargs . items ( ) )
                  name = self . split_leading_dir ( name ) [ 1 ]
                  for middleware_method in self . _template_response_middleware :
  app_list = OrderedDict ( ( app_config , None )  for app_config in apps . get_app_configs ( )  if app_config . models_module is not None and app_config not in excluded_apps )
              qs = queryset . none ( )
 for attr in _moved_attributes :
                  space = line [ : max_width + 1 ] . rfind ( ' ' ) + 1
 from django . utils . module_loading import import_string
 gettext_module . GNUTranslations . __init__ ( self )
 with self . _lock :
                  error_msg += " Got this from the '%s' variable." % self . parent_name . token
  elif callable ( func ) :
   raise KeyError ( key )
  return response
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
          for loc in locales :
  Iterator = object
    def utcoffset ( self , dt ) :
 INDEX_PATTERN = re . compile ( r'^\[\s*(\w+)\s*\]\s*' )
 trans_real . _translations = { }
              f . required = False
          return ''
          return self . dicts [ - 1 ] [ key ]
  LUHN_ODD_LOOKUP = ( 0 , 2 , 4 , 6 , 8 , 1 , 3 , 5 , 7 , 9 )
              _ = { }
   stream = LazyStream ( ChunkIter ( self . _input_data , self . _chunk_size ) )
 self . __starttag_text = rawdata [ i : endpos ]
 def content ( self , value ) :
    migrations_to_squash = [  executor . loader . get_migration ( al , mn )  for al , mn in executor . loader . graph . forwards_plan ( ( migration . app_label , migration . name ) )  if al == migration . app_label  ]
   return self . new_objects
   elif t . contents == 'comment' :
