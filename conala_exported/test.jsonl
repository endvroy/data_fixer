{"src": ["send", "a", "signal", "VAR_0", "[", "signal", ".", "SIGUSR1", "]", "to", "the", "current", "process"], "token": ["os", ".", "kill", "(", "os", ".", "getpid", "(", ")", ",", "signal", ".", "SIGUSR1", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "os.kill(os.getpid(), signal.SIGUSR1)", "decano_code": "os.kill(os.getpid(), signal.SIGUSR1)", "raw_code": "os.kill(os.getpid(), signal.SIGUSR1)", "str_map": {}, "var_map": {"signal.SIGUSR1": "VAR_0"}}
{"src": ["decode", "a", "hex", "string", "_STR:0_", "to", "UTF-8", "."], "token": ["bytes", ".", "fromhex", "(", "\" _STR:0_ \"", ")", ".", "decode", "(", "'utf-8'", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "bytes.fromhex(\" _STR:0_ \").decode('utf-8')", "decano_code": "bytes.fromhex(\" _STR:0_ \").decode('utf-8')", "raw_code": "bytes.fromhex('4a4b4c').decode('utf-8')", "str_map": {"4a4b4c": "_STR:0_"}, "var_map": {}}
{"src": ["check", "if", "all", "elements", "in", "list", "VAR_0", "are", "identical"], "token": ["all", "(", "x", "==", "VAR_0", "[", "0", "]", "for", "x", "in", "VAR_0", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "all(x == myList[0] for x in myList)", "decano_code": "all(x == myList[0] for x in myList)", "raw_code": "all(x == myList[0] for x in myList)", "str_map": {}, "var_map": {"myList": "VAR_0"}}
{"src": ["format", "number", "of", "spaces", "between", "strings", "VAR_0", ",", "VAR_0", "and", "VAR_0", "to", "be", "VAR_0"], "token": ["print", "(", "'%*s : %*s'", "%", "(", "20", ",", "'Python'", ",", "20", ",", "'Very Good'", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "OP", "NUMBER", "OP", "STRING", "OP", "NUMBER", "OP", "STRING", "OP", "OP"], "cano_code": "print('%*s : %*s' % (20, 'Python', 20, 'Very Good'))", "decano_code": "print('%*s : %*s' % (20, 'Python', 20, 'Very Good'))", "raw_code": "print('%*s : %*s' % (20, 'Python', 20, 'Very Good'))", "str_map": {}, "var_map": {"Python": "VAR_0", ":": "VAR_0", "Very Good": "VAR_0", "20": "VAR_0"}}
{"src": ["how", "to", "convert", "a", "string", "from", "CP-1251", "to", "UTF-8", "?"], "token": ["d", ".", "decode", "(", "'cp1251'", ")", ".", "encode", "(", "'utf8'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "d.decode('cp1251').encode('utf8')", "decano_code": "d.decode('cp1251').encode('utf8')", "raw_code": "d.decode('cp1251').encode('utf8')", "str_map": {}, "var_map": {}}
{"src": ["get", "rid", "of", "none", "values", "in", "dictionary", "VAR_0"], "token": ["res", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "list", "(", "VAR_0", ".", "items", "(", ")", ")", "if", "v", "is", "not", "None", "}"], "type": ["NAME", "OP", "OP", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "KEYWORD", "OP"], "cano_code": "res = {k: v for k, v in list(kwargs.items()) if v is not None}", "decano_code": "res = {k: v for k, v in list(kwargs.items()) if v is not None}", "raw_code": "res = {k: v for k, v in list(kwargs.items()) if v is not None}", "str_map": {}, "var_map": {"kwargs": "VAR_0"}}
{"src": ["get", "rid", "of", "none", "values", "in", "dictionary", "VAR_0"], "token": ["res", "=", "dict", "(", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "VAR_0", ".", "items", "(", ")", "if", "v", "is", "not", "None", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "KEYWORD", "OP"], "cano_code": "res = dict((k, v) for k, v in kwargs.items() if v is not None)", "decano_code": "res = dict((k, v) for k, v in kwargs.items() if v is not None)", "raw_code": "res = dict((k, v) for k, v in kwargs.items() if v is not None)", "str_map": {}, "var_map": {"kwargs": "VAR_0"}}
{"src": ["capture", "final", "output", "of", "a", "chain", "of", "system", "commands", "VAR_0"], "token": ["subprocess", ".", "check_output", "(", "'ps -ef | grep something | wc -l'", ",", "shell", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "subprocess.check_output('ps -ef | grep something | wc -l', shell=True)", "decano_code": "subprocess.check_output('ps -ef | grep something | wc -l', shell=True)", "raw_code": "subprocess.check_output('ps -ef | grep something | wc -l', shell=True)", "str_map": {}, "var_map": {"ps -ef | grep something | wc -l": "VAR_0"}}
{"src": ["concatenate", "a", "list", "of", "strings", "VAR_0"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "[", "'a'", ",", "'b'", ",", "'c'", "]", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "\"\"\"\"\"\".join(['a', 'b', 'c'])", "decano_code": "\"\"\"\"\"\".join(['a', 'b', 'c'])", "raw_code": "\"\"\"\"\"\".join(['a', 'b', 'c'])", "str_map": {}, "var_map": {"['a', 'b', 'c']": "VAR_0"}}
{"src": ["find", "intersection", "data", "between", "series", "VAR_0", "and", "series", "VAR_0"], "token": ["pd", ".", "Series", "(", "list", "(", "set", "(", "VAR_0", ")", ".", "intersection", "(", "set", "(", "VAR_0", ")", ")", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "pd.Series(list(set(s1).intersection(set(s2))))", "decano_code": "pd.Series(list(set(s1).intersection(set(s2))))", "raw_code": "pd.Series(list(set(s1).intersection(set(s2))))", "str_map": {}, "var_map": {"s1": "VAR_0", "s2": "VAR_0"}}
{"src": ["sending", "http", "headers", "to", "VAR_0"], "token": ["VAR_0", ".", "send", "(", "'HTTP/1.0 200 OK\\r\\n'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "client.send('HTTP/1.0 200 OK\\r\\n')", "decano_code": "client.send('HTTP/1.0 200 OK\\r\\n')", "raw_code": "client.send('HTTP/1.0 200 OK\\r\\n')", "str_map": {}, "var_map": {"client": "VAR_0"}}
{"src": ["format", "a", "datetime", "string", "VAR_0", "to", "extract", "date", "only"], "token": ["then", "=", "datetime", ".", "datetime", ".", "strptime", "(", "VAR_0", ",", "'%Y-%m-%d'", ")", ".", "date", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "then = datetime.datetime.strptime(when, '%Y-%m-%d').date()", "decano_code": "then = datetime.datetime.strptime(when, '%Y-%m-%d').date()", "raw_code": "then = datetime.datetime.strptime(when, '%Y-%m-%d').date()", "str_map": {}, "var_map": {"when": "VAR_0"}}
{"src": ["split", "a", "multi-line", "string", "VAR_0", "into", "separate", "strings"], "token": ["VAR_0", ".", "split", "(", "'\\n'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "inputString.split('\\n')", "decano_code": "inputString.split('\\n')", "raw_code": "inputString.split('\\n')", "str_map": {}, "var_map": {"inputString": "VAR_0"}}
{"src": ["split", "a", "multi-line", "string", "VAR_0", "by", "new", "line", "character", "VAR_0"], "token": ["' a \\n b \\r\\n c '", ".", "split", "(", "'\\n'", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "' a \\n b \\r\\n c '.split('\\n')", "decano_code": "' a \\n b \\r\\n c '.split('\\n')", "raw_code": "' a \\n b \\r\\n c '.split('\\n')", "str_map": {}, "var_map": {" a \\n b \\r\\n c ": "VAR_0", "\\n": "VAR_0"}}
{"src": ["concatenate", "elements", "of", "list", "VAR_0", "by", "a", "colon", "_STR:0_"], "token": ["\" _STR:0_ \"", ".", "join", "(", "str", "(", "x", ")", "for", "x", "in", "VAR_0", ")"], "type": ["STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "\" _STR:0_ \".join(str(x) for x in b)", "decano_code": "\" _STR:0_ \".join(str(x) for x in b)", "raw_code": "\"\"\":\"\"\".join(str(x) for x in b)", "str_map": {":": "_STR:0_"}, "var_map": {"b": "VAR_0"}}
{"src": ["get", "the", "first", "object", "from", "a", "queryset", "in", "django", "model", "VAR_0"], "token": ["VAR_0", ".", "objects", ".", "filter", "(", ")", "[", ":", "1", "]", ".", "get", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "Entry.objects.filter()[:1].get()", "decano_code": "Entry.objects.filter()[:1].get()", "raw_code": "Entry.objects.filter()[:1].get()", "str_map": {}, "var_map": {"Entry": "VAR_0"}}
{"src": ["calculate", "sum", "over", "all", "rows", "of", "2D", "numpy", "array"], "token": ["a", ".", "sum", "(", "axis", "=", "1", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "a.sum(axis=1)", "decano_code": "a.sum(axis=1)", "raw_code": "a.sum(axis=1)", "str_map": {}, "var_map": {}}
{"src": ["enable", "warnings", "using", "action", "_STR:0_"], "token": ["warnings", ".", "simplefilter", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "warnings.simplefilter(\" _STR:0_ \")", "decano_code": "warnings.simplefilter(\" _STR:0_ \")", "raw_code": "warnings.simplefilter('always')", "str_map": {"always": "_STR:0_"}, "var_map": {}}
{"src": ["concatenate", "items", "of", "list", "VAR_0", "with", "a", "space", "_STR:0_"], "token": ["print", "(", "\" _STR:0_ \"", ".", "join", "(", "map", "(", "str", ",", "VAR_0", ")", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "print(\" _STR:0_ \".join(map(str, l)))", "decano_code": "print(\" _STR:0_ \".join(map(str, l)))", "raw_code": "print(' '.join(map(str, l)))", "str_map": {" ": "_STR:0_"}, "var_map": {"l": "VAR_0"}}
{"src": ["run", "script", "_STR:0_", "with", "argument", "_STR:1_", "on", "terminal", "using", "python", "executable"], "token": ["subprocess", ".", "call", "(", "[", "'python.exe'", ",", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "subprocess.call(['python.exe', \" _STR:0_ \", \" _STR:1_ \"])", "decano_code": "subprocess.call(['python.exe', \" _STR:0_ \", \" _STR:1_ \"])", "raw_code": "subprocess.call(['python.exe', 'hello.py', 'htmlfilename.htm'])", "str_map": {"hello.py": "_STR:0_", "htmlfilename.htm": "_STR:1_"}, "var_map": {}}
{"src": ["how", "can", "i", "parse", "a", "time", "string", "containing", "milliseconds", "in", "it", "with", "python", "?"], "token": ["time", ".", "strptime", "(", "'30/03/09 16:31:32.123'", ",", "'%d/%m/%y %H:%M:%S.%f'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "time.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')", "decano_code": "time.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')", "raw_code": "time.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')", "str_map": {}, "var_map": {}}
{"src": ["convert", "a", "string", "VAR_0", "with", "dot", "and", "comma", "into", "a", "float", "number", "VAR_0"], "token": ["VAR_0", "=", "float", "(", "VAR_0", ".", "replace", "(", "','", ",", "''", ")", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "my_float = float(my_string.replace(',', ''))", "decano_code": "my_float = float(my_string.replace(',', ''))", "raw_code": "my_float = float(my_string.replace(',', ''))", "str_map": {}, "var_map": {"my_string": "VAR_0", "my_float": "VAR_0"}}
{"src": ["convert", "a", "string", "VAR_0", "[", "123,456", ".", "908", "]", "with", "dot", "and", "comma", "into", "a", "floating", "number"], "token": ["float", "(", "'123,456.908'", ".", "replace", "(", "','", ",", "''", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "float('123,456.908'.replace(',', ''))", "decano_code": "float('123,456.908'.replace(',', ''))", "raw_code": "float('123,456.908'.replace(',', ''))", "str_map": {}, "var_map": {"123,456.908": "VAR_0"}}
{"src": ["set", "pythonpath", "in", "python", "script", "."], "token": ["sys", ".", "path", ".", "append", "(", "'/path/to/whatever'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "sys.path.append('/path/to/whatever')", "decano_code": "sys.path.append('/path/to/whatever')", "raw_code": "sys.path.append('/path/to/whatever')", "str_map": {}, "var_map": {}}
{"src": ["split", "string", "_STR:0_", "using", "a", "regex", "_STR:1_"], "token": ["re", ".", "split", "(", "\" _STR:1_ \"", ",", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.split(\" _STR:1_ \", \" _STR:0_ \")", "decano_code": "re.split(\" _STR:1_ \", \" _STR:0_ \")", "raw_code": "re.split('(\\\\W+)', 'Words, words, words.')", "str_map": {"Words, words, words.": "_STR:0_", "(\\W+)": "_STR:1_"}, "var_map": {}}
{"src": ["open", "a", "file", "VAR_0", "[", "Output", ".", "txt", "]", "in", "append", "mode"], "token": ["file", "=", "open", "(", "'Output.txt'", ",", "'a'", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "file = open('Output.txt', 'a')", "decano_code": "file = open('Output.txt', 'a')", "raw_code": "file = open('Output.txt', 'a')", "str_map": {}, "var_map": {"Output.txt": "VAR_0"}}
{"src": ["download", "a", "file", "_STR:0_", "over", "HTTP", "and", "save", "to", "_STR:1_"], "token": ["urllib", ".", "request", ".", "urlretrieve", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "urllib.request.urlretrieve(\" _STR:0_ \", \" _STR:1_ \")", "decano_code": "urllib.request.urlretrieve(\" _STR:0_ \", \" _STR:1_ \")", "raw_code": "urllib.request.urlretrieve('http://www.example.com/songs/mp3.mp3', 'mp3.mp3')", "str_map": {"http://www.example.com/songs/mp3.mp3": "_STR:0_", "mp3.mp3": "_STR:1_"}, "var_map": {}}
{"src": ["download", "a", "file", "VAR_0", "over", "HTTP", "and", "save", "to", "VAR_0"], "token": ["u", "=", "urllib", ".", "request", ".", "urlopen", "(", "VAR_0", ")", "\n", "f", "=", "open", "(", "VAR_0", ",", "'wb'", ")", "\n", "meta", "=", "u", ".", "info", "(", ")", "\n", "file_size", "=", "int", "(", "meta", ".", "getheaders", "(", "'Content-Length'", ")", "[", "0", "]", ")", "\n", "print", "(", "(", "'Downloading: %s Bytes: %s'", "%", "(", "VAR_0", ",", "file_size", ")", ")", ")", "\n", "file_size_dl", "=", "0", "\n", "block_sz", "=", "8192", "\n", "while", "True", ":", "\n", "    ", "buffer", "=", "u", ".", "read", "(", "block_sz", ")", "\n", "if", "(", "not", "buffer", ")", ":", "\n", "        ", "break", "\n", "", "file_size_dl", "+=", "len", "(", "buffer", ")", "\n", "f", ".", "write", "(", "buffer", ")", "\n", "status", "=", "(", "'%10d  [%3.2f%%]'", "%", "(", "file_size_dl", ",", "(", "(", "file_size_dl", "*", "100.0", ")", "/", "file_size", ")", ")", ")", "\n", "status", "=", "(", "status", "+", "(", "chr", "(", "8", ")", "*", "(", "len", "(", "status", ")", "+", "1", ")", ")", ")", "\n", "print", "(", "status", ",", "end", "=", "' '", ")", "\n", "", "f", ".", "close", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NEWLINE", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "NEWLINE", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NEWLINE", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NUMBER", "OP", "OP", "NEWLINE", "KEYWORD", "OP", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NEWLINE", "NAME", "OP", "NUMBER", "NEWLINE", "NAME", "OP", "NUMBER", "NEWLINE", "KEYWORD", "KEYWORD", "OP", "NEWLINE", "INDENT", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NEWLINE", "KEYWORD", "OP", "KEYWORD", "NAME", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "NEWLINE", "DEDENT", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NEWLINE", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NEWLINE", "NAME", "OP", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "OP", "OP", "NEWLINE", "NAME", "OP", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "NUMBER", "OP", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "OP", "OP", "NEWLINE", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NEWLINE", "DEDENT", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "u = urllib.request.urlopen(url)\nf = open(file_name, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders('Content-Length')[0])\nprint(('Downloading: %s Bytes: %s' % (file_name, file_size)))\nfile_size_dl = 0\nblock_sz = 8192\nwhile True:\n    buffer = u.read(block_sz)\n    if (not buffer):\n        break\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))\n    status = (status + (chr(8) * (len(status) + 1)))\n    print(status, end=' ')\nf.close()", "decano_code": "u = urllib.request.urlopen(url)\nf = open(file_name, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders('Content-Length')[0])\nprint(('Downloading: %s Bytes: %s' % (file_name, file_size)))\nfile_size_dl = 0\nblock_sz = 8192\nwhile True:\n    buffer = u.read(block_sz)\n    if (not buffer):\n        break\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))\n    status = (status + (chr(8) * (len(status) + 1)))\n    print(status, end=' ')\nf.close()", "raw_code": "u = urllib.request.urlopen(url)\nf = open(file_name, 'wb')\nmeta = u.info()\nfile_size = int(meta.getheaders('Content-Length')[0])\nprint(('Downloading: %s Bytes: %s' % (file_name, file_size)))\nfile_size_dl = 0\nblock_sz = 8192\nwhile True:\n    buffer = u.read(block_sz)\n    if (not buffer):\n        break\n    file_size_dl += len(buffer)\n    f.write(buffer)\n    status = ('%10d  [%3.2f%%]' % (file_size_dl, ((file_size_dl * 100.0) / file_size)))\n    status = (status + (chr(8) * (len(status) + 1)))\n    print(status, end=' ')\nf.close()", "str_map": {}, "var_map": {"url": "VAR_0", "file_name": "VAR_0"}}
{"src": ["download", "a", "file", "_STR:0_", "over", "HTTP"], "token": ["response", "=", "urllib", ".", "request", ".", "urlopen", "(", "\" _STR:0_ \"", ")", "\n", "html", "=", "response", ".", "read", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NEWLINE", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "response = urllib.request.urlopen(\" _STR:0_ \")\nhtml = response.read()", "decano_code": "response = urllib.request.urlopen(\" _STR:0_ \")\nhtml = response.read()", "raw_code": "response = urllib.request.urlopen('http://www.example.com/')\nhtml = response.read()", "str_map": {"http://www.example.com/": "_STR:0_"}, "var_map": {}}
{"src": ["download", "a", "file", "VAR_0", "over", "HTTP"], "token": ["r", "=", "requests", ".", "get", "(", "VAR_0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "r = requests.get(url)", "decano_code": "r = requests.get(url)", "raw_code": "r = requests.get(url)", "str_map": {}, "var_map": {"url": "VAR_0"}}
{"src": ["download", "a", "file", "VAR_0", "over", "HTTP", "and", "save", "to", "_STR:0_"], "token": ["response", "=", "requests", ".", "get", "(", "VAR_0", ",", "stream", "=", "True", ")", "\n", "with", "open", "(", "\" _STR:0_ \"", ",", "'wb'", ")", "as", "handle", ":", "\n", "    ", "for", "data", "in", "tqdm", "(", "response", ".", "iter_content", "(", ")", ")", ":", "\n", "        ", "handle", ".", "write", "(", "data", ")", "", ""], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NEWLINE", "KEYWORD", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "KEYWORD", "NAME", "OP", "NEWLINE", "INDENT", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NEWLINE", "INDENT", "NAME", "OP", "NAME", "OP", "NAME", "OP", "DEDENT", "DEDENT"], "cano_code": "response = requests.get(url, stream=True)\nwith open(\" _STR:0_ \", 'wb') as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)", "decano_code": "response = requests.get(url, stream=True)\nwith open(\" _STR:0_ \", 'wb') as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)", "raw_code": "response = requests.get(url, stream=True)\nwith open('10MB', 'wb') as handle:\n    for data in tqdm(response.iter_content()):\n        handle.write(data)", "str_map": {"10MB": "_STR:0_"}, "var_map": {"url": "VAR_0"}}
{"src": ["argparse", "add", "argument", "with", "flag", "_STR:0_", "and", "version", "action", "of", "_STR:1_", "to", "parser", "VAR_0"], "token": ["VAR_0", ".", "add_argument", "(", "\" _STR:0_ \"", ",", "action", "=", "'version'", ",", "version", "=", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "parser.add_argument(\" _STR:0_ \", action='version', version=\" _STR:1_ \")", "decano_code": "parser.add_argument(\" _STR:0_ \", action='version', version=\" _STR:1_ \")", "raw_code": "parser.add_argument('--version', action='version', version='%(prog)s 2.0')", "str_map": {"--version": "_STR:0_", "%(prog)s 2.0": "_STR:1_"}, "var_map": {"parser": "VAR_0"}}
{"src": ["remove", "key", "_STR:0_", "from", "dictionary", "VAR_0"], "token": ["{", "i", ":", "VAR_0", "[", "i", "]", "for", "i", "in", "VAR_0", "if", "i", "!=", "\" _STR:0_ \"", "}"], "type": ["OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "STRING", "OP"], "cano_code": "{i: d[i] for i in d if i != \" _STR:0_ \"}", "decano_code": "{i: d[i] for i in d if i != \" _STR:0_ \"}", "raw_code": "{i: d[i] for i in d if i != 'c'}", "str_map": {"c": "_STR:0_"}, "var_map": {"d": "VAR_0"}}
{"src": ["create", "new", "DataFrame", "object", "by", "merging", "columns", "_STR:0_", "of", "dataframes", "VAR_0", "and", "VAR_0", "and", "rename", "the", "columns", "from", "dataframes", "VAR_0", "and", "VAR_0", "with", "suffix", "VAR_0", "and", "VAR_0", "respectively"], "token": ["pd", ".", "merge", "(", "VAR_0", ",", "VAR_0", ",", "on", "=", "[", "\" _STR:0_ \"", "]", ",", "suffixes", "=", "(", "'_left'", ",", "'_right'", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "pd.merge(split_df, csv_df, on=[\" _STR:0_ \"], suffixes=('_left', '_right'))", "decano_code": "pd.merge(split_df, csv_df, on=[\" _STR:0_ \"], suffixes=('_left', '_right'))", "raw_code": "pd.merge(split_df, csv_df, on=['key'], suffixes=('_left', '_right'))", "str_map": {"key": "_STR:0_"}, "var_map": {"split_df": "VAR_0", "csv_df": "VAR_0", "_left": "VAR_0", "_right": "VAR_0"}}
{"src": ["split", "a", "string", "VAR_0", "by", "space", "with", "VAR_0", "splits"], "token": ["VAR_0", ".", "split", "(", "' '", ",", "4", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NUMBER", "OP"], "cano_code": "s.split(' ', 4)", "decano_code": "s.split(' ', 4)", "raw_code": "s.split(' ', 4)", "str_map": {}, "var_map": {"s": "VAR_0", "4": "VAR_0"}}
{"src": ["read", "keyboard-input"], "token": ["input", "(", "'Enter your input:'", ")"], "type": ["KEYWORD", "OP", "STRING", "OP"], "cano_code": "input('Enter your input:')", "decano_code": "input('Enter your input:')", "raw_code": "input('Enter your input:')", "str_map": {}, "var_map": {}}
{"src": ["enable", "debug", "mode", "on", "flask", "application", "VAR_0"], "token": ["VAR_0", ".", "run", "(", "debug", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "app.run(debug=True)", "decano_code": "app.run(debug=True)", "raw_code": "app.run(debug=True)", "str_map": {}, "var_map": {"app": "VAR_0"}}
{"src": ["python", "save", "list", "VAR_0", "to", "file", "object", "_STR:0_"], "token": ["pickle", ".", "dump", "(", "VAR_0", ",", "open", "(", "\" _STR:0_ \"", ",", "'wb'", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "pickle.dump(mylist, open(\" _STR:0_ \", 'wb'))", "decano_code": "pickle.dump(mylist, open(\" _STR:0_ \", 'wb'))", "raw_code": "pickle.dump(mylist, open('save.txt', 'wb'))", "str_map": {"save.txt": "_STR:0_"}, "var_map": {"mylist": "VAR_0"}}
{"src": ["multiply", "a", "matrix", "VAR_0", "with", "a", "3d", "tensor", "VAR_0", "in", "scipy"], "token": ["scipy", ".", "tensordot", "(", "VAR_0", ",", "VAR_0", ",", "axes", "=", "[", "1", ",", "1", "]", ")", ".", "swapaxes", "(", "0", ",", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)", "decano_code": "scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)", "raw_code": "scipy.tensordot(P, T, axes=[1, 1]).swapaxes(0, 1)", "str_map": {}, "var_map": {"P": "VAR_0", "T": "VAR_0"}}
{"src": ["create", "3d", "array", "of", "zeroes", "of", "size", "VAR_0"], "token": ["numpy", ".", "zeros", "(", "(", "3", ",", "3", ",", "3", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "numpy.zeros((3, 3, 3))", "decano_code": "numpy.zeros((3, 3, 3))", "raw_code": "numpy.zeros((3, 3, 3))", "str_map": {}, "var_map": {"(3,3,3)": "VAR_0"}}
{"src": ["cut", "off", "the", "last", "word", "of", "a", "sentence", "VAR_0"], "token": ["\"\"\" \"\"\"", ".", "join", "(", "VAR_0", ".", "split", "(", "' '", ")", "[", ":", "-", "1", "]", ")"], "type": ["STRING", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "\"\"\" \"\"\".join(content.split(' ')[:-1])", "decano_code": "\"\"\" \"\"\".join(content.split(' ')[:-1])", "raw_code": "\"\"\" \"\"\".join(content.split(' ')[:-1])", "str_map": {}, "var_map": {"content": "VAR_0"}}
{"src": ["convert", "scalar", "VAR_0", "to", "array"], "token": ["VAR_0", "=", "np", ".", "asarray", "(", "VAR_0", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "[", "(", "0", ")", ",", ":", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "OP", "OP", "OP"], "cano_code": "x = np.asarray(x).reshape(1, -1)[(0), :]", "decano_code": "x = np.asarray(x).reshape(1, -1)[(0), :]", "raw_code": "x = np.asarray(x).reshape(1, -1)[(0), :]", "str_map": {}, "var_map": {"x": "VAR_0"}}
{"src": ["sum", "all", "elements", "of", "nested", "list", "VAR_0"], "token": ["sum", "(", "sum", "(", "i", ")", "if", "isinstance", "(", "i", ",", "list", ")", "else", "i", "for", "i", "in", "VAR_0", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "sum(sum(i) if isinstance(i, list) else i for i in L)", "decano_code": "sum(sum(i) if isinstance(i, list) else i for i in L)", "raw_code": "sum(sum(i) if isinstance(i, list) else i for i in L)", "str_map": {}, "var_map": {"L": "VAR_0"}}
{"src": ["convert", "hex", "string", "_STR:0_", "to", "a", "float", "number"], "token": ["struct", ".", "unpack", "(", "'!f'", ",", "\" _STR:0_ \"", ".", "decode", "(", "'hex'", ")", ")", "[", "0", "]"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "struct.unpack('!f', \" _STR:0_ \".decode('hex'))[0]", "decano_code": "struct.unpack('!f', \" _STR:0_ \".decode('hex'))[0]", "raw_code": "struct.unpack('!f', '470FC614'.decode('hex'))[0]", "str_map": {"470FC614": "_STR:0_"}, "var_map": {}}
{"src": ["multiple", "each", "value", "by", "VAR_0", "for", "all", "keys", "in", "a", "dictionary", "VAR_0"], "token": ["VAR_0", ".", "update", "(", "(", "x", ",", "y", "*", "2", ")", "for", "x", ",", "y", "in", "list", "(", "VAR_0", ".", "items", "(", ")", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "my_dict.update((x, y * 2) for x, y in list(my_dict.items()))", "decano_code": "my_dict.update((x, y * 2) for x, y in list(my_dict.items()))", "raw_code": "my_dict.update((x, y * 2) for x, y in list(my_dict.items()))", "str_map": {}, "var_map": {"2": "VAR_0", "my_dict": "VAR_0"}}
{"src": ["running", "bash", "script", "_STR:0_"], "token": ["subprocess", ".", "call", "(", "\" _STR:0_ \"", ",", "shell", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "subprocess.call(\" _STR:0_ \", shell=True)", "decano_code": "subprocess.call(\" _STR:0_ \", shell=True)", "raw_code": "subprocess.call('sleep.sh', shell=True)", "str_map": {"sleep.sh": "_STR:0_"}, "var_map": {}}
{"src": ["join", "elements", "of", "list", "VAR_0", "with", "a", "comma", "VAR_0"], "token": ["\"\"\",\"\"\"", ".", "join", "(", "VAR_0", ")"], "type": ["STRING", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "\"\"\",\"\"\".join(l)", "decano_code": "\"\"\",\"\"\".join(l)", "raw_code": "\"\"\",\"\"\".join(l)", "str_map": {}, "var_map": {"l": "VAR_0", ",": "VAR_0"}}
{"src": ["make", "a", "comma-separated", "string", "from", "a", "list", "VAR_0"], "token": ["VAR_0", "=", "','", ".", "join", "(", "map", "(", "str", ",", "VAR_0", ")", ")"], "type": ["NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "myList = ','.join(map(str, myList))", "decano_code": "myList = ','.join(map(str, myList))", "raw_code": "myList = ','.join(map(str, myList))", "str_map": {}, "var_map": {"myList": "VAR_0"}}
{"src": ["reverse", "the", "list", "that", "contains", "1", "to", "10"], "token": ["list", "(", "reversed", "(", "list", "(", "range", "(", "10", ")", ")", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NUMBER", "OP", "OP", "OP", "OP"], "cano_code": "list(reversed(list(range(10))))", "decano_code": "list(reversed(list(range(10))))", "raw_code": "list(reversed(list(range(10))))", "str_map": {}, "var_map": {}}
{"src": ["remove", "substring", "_STR:0_", "from", "a", "string", "_STR:1_"], "token": ["print", "(", "\" _STR:1_ \"", ".", "replace", "(", "\" _STR:0_ \"", ",", "''", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "print(\" _STR:1_ \".replace(\" _STR:0_ \", ''))", "decano_code": "print(\" _STR:1_ \".replace(\" _STR:0_ \", ''))", "raw_code": "print('lamp, bag, mirror'.replace('bag,', ''))", "str_map": {"bag,": "_STR:0_", "lamp, bag, mirror": "_STR:1_"}, "var_map": {}}
{"src": ["reverse", "the", "order", "of", "words", ",", "delimited", "by", "VAR_0", ",", "in", "string", "VAR_0"], "token": ["\"\"\".\"\"\"", ".", "join", "(", "VAR_0", ".", "split", "(", "'.'", ")", "[", ":", ":", "-", "1", "]", ")"], "type": ["STRING", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "\"\"\".\"\"\".join(s.split('.')[::-1])", "decano_code": "\"\"\".\"\"\".join(s.split('.')[::-1])", "raw_code": "\"\"\".\"\"\".join(s.split('.')[::-1])", "str_map": {}, "var_map": {".": "VAR_0", "s": "VAR_0"}}
{"src": ["convert", "epoch", "time", "represented", "as", "milliseconds", "VAR_0", "to", "string", "using", "format", "_STR:0_"], "token": ["datetime", ".", "datetime", ".", "fromtimestamp", "(", "VAR_0", ")", ".", "strftime", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "datetime.datetime.fromtimestamp(s).strftime(\" _STR:0_ \")", "decano_code": "datetime.datetime.fromtimestamp(s).strftime(\" _STR:0_ \")", "raw_code": "datetime.datetime.fromtimestamp(s).strftime('%Y-%m-%d %H:%M:%S.%f')", "str_map": {"%Y-%m-%d %H:%M:%S.%f": "_STR:0_"}, "var_map": {"s": "VAR_0"}}
{"src": ["parse", "milliseconds", "epoch", "time", "_STR:0_", "to", "format", "_STR:1_"], "token": ["time", ".", "strftime", "(", "\" _STR:1_ \"", ",", "time", ".", "gmtime", "(", "1236472051807", "/", "1000.0", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "time.strftime(\" _STR:1_ \", time.gmtime(1236472051807 / 1000.0))", "decano_code": "time.strftime(\" _STR:1_ \", time.gmtime(1236472051807 / 1000.0))", "raw_code": "time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(1236472051807 / 1000.0))", "str_map": {"1236472051807": "_STR:0_", "%Y-%m-%d %H:%M:%S": "_STR:1_"}, "var_map": {}}
{"src": ["get", "the", "date", "7", "days", "before", "the", "current", "date"], "token": ["(", "datetime", ".", "datetime", ".", "now", "(", ")", "-", "datetime", ".", "timedelta", "(", "days", "=", "7", ")", ")", ".", "date", "(", ")"], "type": ["OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "(datetime.datetime.now() - datetime.timedelta(days=7)).date()", "decano_code": "(datetime.datetime.now() - datetime.timedelta(days=7)).date()", "raw_code": "(datetime.datetime.now() - datetime.timedelta(days=7)).date()", "str_map": {}, "var_map": {}}
{"src": ["sum", "elements", "at", "index", "VAR_0", "of", "each", "list", "in", "list", "VAR_0"], "token": ["print", "(", "sum", "(", "row", "[", "VAR_0", "]", "for", "row", "in", "VAR_0", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "print(sum(row[column] for row in data))", "decano_code": "print(sum(row[column] for row in data))", "raw_code": "print(sum(row[column] for row in data))", "str_map": {}, "var_map": {"column": "VAR_0", "data": "VAR_0"}}
{"src": ["sum", "columns", "of", "a", "list", "VAR_0"], "token": ["[", "sum", "(", "row", "[", "i", "]", "for", "row", "in", "VAR_0", ")", "for", "i", "in", "range", "(", "len", "(", "VAR_0", "[", "0", "]", ")", ")", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "OP"], "cano_code": "[sum(row[i] for row in array) for i in range(len(array[0]))]", "decano_code": "[sum(row[i] for row in array) for i in range(len(array[0]))]", "raw_code": "[sum(row[i] for row in array) for i in range(len(array[0]))]", "str_map": {}, "var_map": {"array": "VAR_0"}}
{"src": ["encode", "binary", "string", "_STR:0_", "to", "base64", "code"], "token": ["base64", ".", "b64encode", "(", "bytes", "(", "\" _STR:0_ \"", ",", "'utf-8'", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "base64.b64encode(bytes(\" _STR:0_ \", 'utf-8'))", "decano_code": "base64.b64encode(bytes(\" _STR:0_ \", 'utf-8'))", "raw_code": "base64.b64encode(bytes('your string', 'utf-8'))", "str_map": {"your string": "_STR:0_"}, "var_map": {}}
{"src": ["combine", "list", "of", "dictionaries", "VAR_0", "with", "the", "same", "keys", "in", "each", "list", "to", "a", "single", "dictionary"], "token": ["dict", "(", "(", "k", ",", "[", "d", "[", "k", "]", "for", "d", "in", "VAR_0", "]", ")", "for", "k", "in", "VAR_0", "[", "0", "]", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "dict((k, [d[k] for d in dicts]) for k in dicts[0])", "decano_code": "dict((k, [d[k] for d in dicts]) for k in dicts[0])", "raw_code": "dict((k, [d[k] for d in dicts]) for k in dicts[0])", "str_map": {}, "var_map": {"dicts": "VAR_0"}}
{"src": ["merge", "a", "nested", "dictionary", "VAR_0", "into", "a", "flat", "dictionary", "by", "concatenating", "nested", "values", "with", "the", "same", "key", "VAR_0"], "token": ["{", "VAR_0", ":", "[", "d", "[", "VAR_0", "]", "for", "d", "in", "VAR_0", "]", "for", "VAR_0", "in", "VAR_0", "[", "0", "]", "}"], "type": ["OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "{k: [d[k] for d in dicts] for k in dicts[0]}", "decano_code": "{k: [d[k] for d in dicts] for k in dicts[0]}", "raw_code": "{k: [d[k] for d in dicts] for k in dicts[0]}", "str_map": {}, "var_map": {"dicts": "VAR_0", "k": "VAR_0"}}
{"src": ["how", "do", "i", "get", "the", "url", "parameter", "in", "a", "flask", "view"], "token": ["request", ".", "args", "[", "'myParam'", "]"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "request.args['myParam']", "decano_code": "request.args['myParam']", "raw_code": "request.args['myParam']", "str_map": {}, "var_map": {}}
{"src": ["identify", "duplicate", "values", "in", "list", "VAR_0"], "token": ["[", "k", "for", "k", ",", "v", "in", "list", "(", "Counter", "(", "VAR_0", ")", ".", "items", "(", ")", ")", "if", "v", ">", "1", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "NAME", "OP", "NUMBER", "OP"], "cano_code": "[k for k, v in list(Counter(mylist).items()) if v > 1]", "decano_code": "[k for k, v in list(Counter(mylist).items()) if v > 1]", "raw_code": "[k for k, v in list(Counter(mylist).items()) if v > 1]", "str_map": {}, "var_map": {"mylist": "VAR_0"}}
{"src": ["insert", "directory", "_STR:0_", "into", "directory", "VAR_0"], "token": ["sys", ".", "path", ".", "insert", "(", "1", ",", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "VAR_0", ")", ",", "\" _STR:0_ \"", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "OP"], "cano_code": "sys.path.insert(1, os.path.join(os.path.dirname(__file__), \" _STR:0_ \"))", "decano_code": "sys.path.insert(1, os.path.join(os.path.dirname(__file__), \" _STR:0_ \"))", "raw_code": "sys.path.insert(1, os.path.join(os.path.dirname(__file__), 'apps'))", "str_map": {"apps": "_STR:0_"}, "var_map": {"__file__": "VAR_0"}}
{"src": ["modify", "sys.path", "[", "sys", ".", "path", "]", "for", "python", "module", "VAR_0"], "token": ["sys", ".", "path", ".", "append", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "'subdir'", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "OP"], "cano_code": "sys.path.append(os.path.join(os.path.dirname(__file__), 'subdir'))", "decano_code": "sys.path.append(os.path.join(os.path.dirname(__file__), 'subdir'))", "raw_code": "sys.path.append(os.path.join(os.path.dirname(__file__), 'subdir'))", "str_map": {}, "var_map": {"subdir": "VAR_0"}}
{"src": ["insert", "a", "_STR:0_", "value", "into", "a", "SQLite3", "table", "."], "token": ["db", ".", "execute", "(", "\"INSERT INTO present VALUES('test2', ?, 10)\"", ",", "(", "None", ",", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "KEYWORD", "OP", "OP", "OP"], "cano_code": "db.execute(\"INSERT INTO present VALUES('test2', ?, 10)\", (None,))", "decano_code": "db.execute(\"INSERT INTO present VALUES('test2', ?, 10)\", (None,))", "raw_code": "db.execute(\"INSERT INTO present VALUES('test2', ?, 10)\", (None,))", "str_map": {"None": "_STR:0_"}, "var_map": {}}
{"src": ["flatten", "list", "VAR_0"], "token": ["[", "image", "for", "menuitem", "in", "VAR_0", "for", "image", "in", "menuitem", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[image for menuitem in list_of_menuitems for image in menuitem]", "decano_code": "[image for menuitem in list_of_menuitems for image in menuitem]", "raw_code": "[image for menuitem in list_of_menuitems for image in menuitem]", "str_map": {}, "var_map": {"list_of_menuitems": "VAR_0"}}
{"src": ["append", "elements", "of", "a", "set", "VAR_0", "to", "a", "list", "VAR_0"], "token": ["VAR_0", ".", "extend", "(", "VAR_0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "a.extend(b)", "decano_code": "a.extend(b)", "raw_code": "a.extend(b)", "str_map": {}, "var_map": {"b": "VAR_0", "a": "VAR_0"}}
{"src": ["append", "elements", "of", "a", "set", "to", "a", "list", "in", "python"], "token": ["a", ".", "extend", "(", "list", "(", "b", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "a.extend(list(b))", "decano_code": "a.extend(list(b))", "raw_code": "a.extend(list(b))", "str_map": {}, "var_map": {}}
{"src": ["write", "the", "data", "of", "dataframe", "VAR_0", "into", "text", "file", "VAR_0", "[", "np", ".", "txt", "]"], "token": ["np", ".", "savetxt", "(", "'c:\\\\data\\\\np.txt'", ",", "VAR_0", ".", "values", ",", "fmt", "=", "'%d'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "np.savetxt('c:\\\\data\\\\np.txt', df.values, fmt='%d')", "decano_code": "np.savetxt('c:\\\\data\\\\np.txt', df.values, fmt='%d')", "raw_code": "np.savetxt('c:\\\\data\\\\np.txt', df.values, fmt='%d')", "str_map": {}, "var_map": {"df": "VAR_0", "np.txt": "VAR_0"}}
{"src": ["write", "content", "of", "DataFrame", "VAR_0", "into", "text", "file", "_STR:0_"], "token": ["VAR_0", ".", "to_csv", "(", "\" _STR:0_ \"", ",", "header", "=", "None", ",", "index", "=", "None", ",", "sep", "=", "' '", ",", "mode", "=", "'a'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df.to_csv(\" _STR:0_ \", header=None, index=None, sep=' ', mode='a')", "decano_code": "df.to_csv(\" _STR:0_ \", header=None, index=None, sep=' ', mode='a')", "raw_code": "df.to_csv('c:\\\\data\\\\pandas.txt', header=None, index=None, sep=' ', mode='a')", "str_map": {"c:\\data\\pandas.txt": "_STR:0_"}, "var_map": {"df": "VAR_0"}}
{"src": ["split", "a", "string", "VAR_0", "by", "last", "occurrence", "of", "character", "VAR_0"], "token": ["print", "(", "VAR_0", ".", "rpartition", "(", "'-'", ")", "[", "0", "]", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "print(x.rpartition('-')[0])", "decano_code": "print(x.rpartition('-')[0])", "raw_code": "print(x.rpartition('-')[0])", "str_map": {}, "var_map": {"x": "VAR_0", "-": "VAR_0"}}
{"src": ["get", "the", "last", "part", "of", "a", "string", "before", "the", "character", "_STR:0_"], "token": ["print", "(", "x", ".", "rsplit", "(", "\" _STR:0_ \"", ",", "1", ")", "[", "0", "]", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "print(x.rsplit(\" _STR:0_ \", 1)[0])", "decano_code": "print(x.rsplit(\" _STR:0_ \", 1)[0])", "raw_code": "print(x.rsplit('-', 1)[0])", "str_map": {"-": "_STR:0_"}, "var_map": {}}
{"src": ["upload", "file", "using", "FTP"], "token": ["ftp", ".", "storlines", "(", "'STOR '", "+", "filename", ",", "open", "(", "filename", ",", "'r'", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "ftp.storlines('STOR ' + filename, open(filename, 'r'))", "decano_code": "ftp.storlines('STOR ' + filename, open(filename, 'r'))", "raw_code": "ftp.storlines('STOR ' + filename, open(filename, 'r'))", "str_map": {}, "var_map": {}}
{"src": ["add", "one", "to", "the", "hidden", "web", "element", "with", "id", "_STR:0_", "with", "selenium", "python", "script"], "token": ["browser", ".", "execute_script", "(", "\"document.getElementById('XYZ').value+='1'\"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "browser.execute_script(\"document.getElementById('XYZ').value+='1'\")", "decano_code": "browser.execute_script(\"document.getElementById('XYZ').value+='1'\")", "raw_code": "browser.execute_script(\"document.getElementById('XYZ').value+='1'\")", "str_map": {"XYZ": "_STR:0_"}, "var_map": {}}
{"src": ["create", "array", "containing", "the", "maximum", "value", "of", "respective", "elements", "of", "array", "VAR_0", "and", "array", "VAR_0"], "token": ["np", ".", "maximum", "(", "[", "2", ",", "3", ",", "4", "]", ",", "[", "1", ",", "5", ",", "2", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "np.maximum([2, 3, 4], [1, 5, 2])", "decano_code": "np.maximum([2, 3, 4], [1, 5, 2])", "raw_code": "np.maximum([2, 3, 4], [1, 5, 2])", "str_map": {}, "var_map": {"[2, 3, 4]": "VAR_0", "[1, 5, 2]": "VAR_0"}}
{"src": ["print", "a", "list", "VAR_0", "and", "move", "first", "3", "elements", "to", "the", "end", "of", "the", "list"], "token": ["print", "(", "VAR_0", "[", "3", ":", "]", "+", "VAR_0", "[", ":", "3", "]", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "print(l[3:] + l[:3])", "decano_code": "print(l[3:] + l[:3])", "raw_code": "print(l[3:] + l[:3])", "str_map": {}, "var_map": {"l": "VAR_0"}}
{"src": ["loop", "over", "files", "in", "directory", "_STR:0_"], "token": ["for", "fn", "in", "os", ".", "listdir", "(", "\" _STR:0_ \"", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "isfile", "(", "fn", ")", ":", "\n", "        ", "pass", "", ""], "type": ["KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT", "DEDENT"], "cano_code": "for fn in os.listdir(\" _STR:0_ \"):\n    if os.path.isfile(fn):\n        pass", "decano_code": "for fn in os.listdir(\" _STR:0_ \"):\n    if os.path.isfile(fn):\n        pass", "raw_code": "for fn in os.listdir('.'):\n    if os.path.isfile(fn):\n        pass", "str_map": {".": "_STR:0_"}, "var_map": {}}
{"src": ["loop", "over", "files", "in", "directory", "VAR_0"], "token": ["for", "(", "root", ",", "dirs", ",", "filenames", ")", "in", "os", ".", "walk", "(", "VAR_0", ")", ":", "\n", "    ", "for", "f", "in", "filenames", ":", "\n", "        ", "pass", "", ""], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT", "DEDENT"], "cano_code": "for (root, dirs, filenames) in os.walk(source):\n    for f in filenames:\n        pass", "decano_code": "for (root, dirs, filenames) in os.walk(source):\n    for f in filenames:\n        pass", "raw_code": "for (root, dirs, filenames) in os.walk(source):\n    for f in filenames:\n        pass", "str_map": {}, "var_map": {"source": "VAR_0"}}
{"src": ["create", "a", "random", "list", "of", "integers"], "token": ["[", "int", "(", "1000", "*", "random", ".", "random", "(", ")", ")", "for", "i", "in", "range", "(", "10000", ")", "]"], "type": ["OP", "KEYWORD", "OP", "NUMBER", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "OP"], "cano_code": "[int(1000 * random.random()) for i in range(10000)]", "decano_code": "[int(1000 * random.random()) for i in range(10000)]", "raw_code": "[int(1000 * random.random()) for i in range(10000)]", "str_map": {}, "var_map": {}}
{"src": ["using", "%f", "with", "strftime(", ")", "in", "python", "to", "get", "microseconds"], "token": ["datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%H:%M:%S.%f'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "datetime.datetime.now().strftime('%H:%M:%S.%f')", "decano_code": "datetime.datetime.now().strftime('%H:%M:%S.%f')", "raw_code": "datetime.datetime.now().strftime('%H:%M:%S.%f')", "str_map": {}, "var_map": {}}
{"src": ["google", "app", "engine", "execute", "GQL", "query", "_STR:0_", "with", "parameter", "VAR_0", "[", "foo", ".", "key()", "]"], "token": ["db", ".", "GqlQuery", "(", "\" _STR:0_ \"", ",", "foo", ".", "key", "(", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "db.GqlQuery(\" _STR:0_ \", foo.key())", "decano_code": "db.GqlQuery(\" _STR:0_ \", foo.key())", "raw_code": "db.GqlQuery('SELECT * FROM Schedule WHERE station = $1', foo.key())", "str_map": {"SELECT * FROM Schedule WHERE station = $1": "_STR:0_"}, "var_map": {"foo.key()": "VAR_0"}}
{"src": ["filter", "rows", "in", "pandas", "starting", "with", "alphabet", "_STR:0_", "using", "regular", "expression", "."], "token": ["df", ".", "b", ".", "str", ".", "contains", "(", "'^f'", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df.b.str.contains('^f')", "decano_code": "df.b.str.contains('^f')", "raw_code": "df.b.str.contains('^f')", "str_map": {"f": "_STR:0_"}, "var_map": {}}
{"src": ["print", "a", "2", "dimensional", "list", "VAR_0", "as", "a", "table", "with", "delimiters"], "token": ["print", "(", "'\\n'", ".", "join", "(", "'\\t'", ".", "join", "(", "str", "(", "col", ")", "for", "col", "in", "row", ")", "for", "row", "in", "VAR_0", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "print('\\n'.join('\\t'.join(str(col) for col in row) for row in tab))", "decano_code": "print('\\n'.join('\\t'.join(str(col) for col in row) for row in tab))", "raw_code": "print('\\n'.join('\\t'.join(str(col) for col in row) for row in tab))", "str_map": {}, "var_map": {"tab": "VAR_0"}}
{"src": ["pandas", ":", "delete", "rows", "in", "dataframe", "VAR_0", "based", "on", "multiple", "columns", "values"], "token": ["VAR_0", ".", "set_index", "(", "list", "(", "'BC'", ")", ")", ".", "drop", "(", "tuples", ",", "errors", "=", "'ignore'", ")", ".", "reset_index", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "df.set_index(list('BC')).drop(tuples, errors='ignore').reset_index()", "decano_code": "df.set_index(list('BC')).drop(tuples, errors='ignore').reset_index()", "raw_code": "df.set_index(list('BC')).drop(tuples, errors='ignore').reset_index()", "str_map": {}, "var_map": {"df": "VAR_0"}}
{"src": ["format", "the", "variables", "VAR_0", "[", "self", ".", "goals", "]", "and", "VAR_0", "[", "self", ".", "penalties", "]", "using", "string", "formatting"], "token": ["\"\"\"({:d} goals, ${:d})\"\"\"", ".", "format", "(", "self", ".", "goals", ",", "self", ".", "penalties", ")"], "type": ["STRING", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "\"\"\"({:d} goals, ${:d})\"\"\".format(self.goals, self.penalties)", "decano_code": "\"\"\"({:d} goals, ${:d})\"\"\".format(self.goals, self.penalties)", "raw_code": "\"\"\"({:d} goals, ${:d})\"\"\".format(self.goals, self.penalties)", "str_map": {}, "var_map": {"self.goals": "VAR_0", "self.penalties": "VAR_0"}}
{"src": ["format", "string", "_STR:0_", "with", "variables", "VAR_0", "and", "VAR_0"], "token": ["\" _STR:0_ \"", ".", "format", "(", "self", ".", "VAR_0", ",", "self", ".", "VAR_0", ")"], "type": ["STRING", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "\" _STR:0_ \".format(self.goals, self.penalties)", "decano_code": "\" _STR:0_ \".format(self.goals, self.penalties)", "raw_code": "\"\"\"({} goals, ${})\"\"\".format(self.goals, self.penalties)", "str_map": {"({} goals, ${})": "_STR:0_"}, "var_map": {"goals": "VAR_0", "penalties": "VAR_0"}}
{"src": ["format", "string", "_STR:0_"], "token": ["\" _STR:0_ \"", ".", "format", "(", "self", ")"], "type": ["STRING", "OP", "KEYWORD", "OP", "NAME", "OP"], "cano_code": "\" _STR:0_ \".format(self)", "decano_code": "\" _STR:0_ \".format(self)", "raw_code": "\"\"\"({0.goals} goals, ${0.penalties})\"\"\".format(self)", "str_map": {"({0.goals} goals, ${0.penalties})": "_STR:0_"}, "var_map": {}}
{"src": ["convert", "list", "of", "lists", "VAR_0", "to", "list", "of", "integers"], "token": ["[", "int", "(", "''", ".", "join", "(", "str", "(", "d", ")", "for", "d", "in", "x", ")", ")", "for", "x", "in", "VAR_0", "]"], "type": ["OP", "KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[int(''.join(str(d) for d in x)) for x in L]", "decano_code": "[int(''.join(str(d) for d in x)) for x in L]", "raw_code": "[int(''.join(str(d) for d in x)) for x in L]", "str_map": {}, "var_map": {"L": "VAR_0"}}
{"src": ["combine", "elements", "of", "each", "list", "in", "list", "VAR_0", "into", "digits", "of", "a", "single", "integer"], "token": ["[", "''", ".", "join", "(", "str", "(", "d", ")", "for", "d", "in", "x", ")", "for", "x", "in", "VAR_0", "]"], "type": ["OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[''.join(str(d) for d in x) for x in L]", "decano_code": "[''.join(str(d) for d in x) for x in L]", "raw_code": "[''.join(str(d) for d in x) for x in L]", "str_map": {}, "var_map": {"L": "VAR_0"}}
{"src": ["convert", "a", "list", "of", "lists", "VAR_0", "to", "list", "of", "integers"], "token": ["VAR_0", "=", "[", "int", "(", "''", ".", "join", "(", "[", "str", "(", "y", ")", "for", "y", "in", "x", "]", ")", ")", "for", "x", "in", "VAR_0", "]"], "type": ["NAME", "OP", "OP", "KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "L = [int(''.join([str(y) for y in x])) for x in L]", "decano_code": "L = [int(''.join([str(y) for y in x])) for x in L]", "raw_code": "L = [int(''.join([str(y) for y in x])) for x in L]", "str_map": {}, "var_map": {"L": "VAR_0"}}
{"src": ["write", "the", "elements", "of", "list", "VAR_0", "concatenated", "by", "special", "character", "_STR:0_", "to", "file", "VAR_0"], "token": ["VAR_0", ".", "write", "(", "\" _STR:0_ \"", ".", "join", "(", "VAR_0", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "myfile.write(\" _STR:0_ \".join(lines))", "decano_code": "myfile.write(\" _STR:0_ \".join(lines))", "raw_code": "myfile.write('\\n'.join(lines))", "str_map": {"\n": "_STR:0_"}, "var_map": {"lines": "VAR_0", "myfile": "VAR_0"}}
{"src": ["removing", "an", "element", "from", "a", "list", "based", "on", "a", "predicate", "_STR:0_", "or", "_STR:1_"], "token": ["[", "x", "for", "x", "in", "[", "'AAT'", ",", "'XAC'", ",", "'ANT'", ",", "'TTA'", "]", "if", "\" _STR:0_ \"", "not", "in", "x", "and", "\" _STR:1_ \"", "not", "in", "x", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "KEYWORD", "STRING", "KEYWORD", "KEYWORD", "NAME", "KEYWORD", "STRING", "KEYWORD", "KEYWORD", "NAME", "OP"], "cano_code": "[x for x in ['AAT', 'XAC', 'ANT', 'TTA'] if \" _STR:0_ \" not in x and \" _STR:1_ \" not in x]", "decano_code": "[x for x in ['AAT', 'XAC', 'ANT', 'TTA'] if \" _STR:0_ \" not in x and \" _STR:1_ \" not in x]", "raw_code": "[x for x in ['AAT', 'XAC', 'ANT', 'TTA'] if 'X' not in x and 'N' not in x]", "str_map": {"X": "_STR:0_", "N": "_STR:1_"}, "var_map": {}}
{"src": ["remove", "duplicate", "words", "from", "a", "string", "VAR_0", "using", "regex"], "token": ["VAR_0", "=", "re", ".", "sub", "(", "'\\\\b(\\\\w+)( \\\\1\\\\b)+'", ",", "'\\\\1'", ",", "VAR_0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "text = re.sub('\\\\b(\\\\w+)( \\\\1\\\\b)+', '\\\\1', text)", "decano_code": "text = re.sub('\\\\b(\\\\w+)( \\\\1\\\\b)+', '\\\\1', text)", "raw_code": "text = re.sub('\\\\b(\\\\w+)( \\\\1\\\\b)+', '\\\\1', text)", "str_map": {}, "var_map": {"text": "VAR_0"}}
{"src": ["count", "non", "zero", "values", "in", "each", "column", "in", "pandas", "data", "frame"], "token": ["df", ".", "astype", "(", "bool", ")", ".", "sum", "(", "axis", "=", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "df.astype(bool).sum(axis=1)", "decano_code": "df.astype(bool).sum(axis=1)", "raw_code": "df.astype(bool).sum(axis=1)", "str_map": {}, "var_map": {}}
{"src": ["search", "for", "string", "that", "matches", "regular", "expression", "pattern", "_STR:0_", "in", "string", "_STR:1_"], "token": ["re", ".", "search", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.search(\" _STR:0_ \", \" _STR:1_ \")", "decano_code": "re.search(\" _STR:0_ \", \" _STR:1_ \")", "raw_code": "re.search('(?<!Distillr)\\\\\\\\AcroTray\\\\.exe', 'C:\\\\SomeDir\\\\AcroTray.exe')", "str_map": {"(?<!Distillr)\\\\AcroTray\\.exe": "_STR:0_", "C:\\SomeDir\\AcroTray.exe": "_STR:1_"}, "var_map": {}}
{"src": ["split", "string", "_STR:0_", "into", "a", "list", "on", "white", "spaces"], "token": ["\" _STR:0_ \"", ".", "split", "(", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP"], "cano_code": "\" _STR:0_ \".split()", "decano_code": "\" _STR:0_ \".split()", "raw_code": "\"\"\"QH QD JC KD JS\"\"\".split()", "str_map": {"QH QD JC KD JS": "_STR:0_"}, "var_map": {}}
{"src": ["search", "for", "occurrences", "of", "regex", "pattern", "_STR:0_", "in", "xml", "string", "VAR_0"], "token": ["print", "(", "re", ".", "search", "(", "\" _STR:0_ \"", ",", "VAR_0", ")", ".", "group", "(", "0", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "print(re.search(\" _STR:0_ \", line).group(0))", "decano_code": "print(re.search(\" _STR:0_ \", line).group(0))", "raw_code": "print(re.search('>.*<', line).group(0))", "str_map": {">.*<": "_STR:0_"}, "var_map": {"line": "VAR_0"}}
{"src": ["erase", "all", "the", "contents", "of", "a", "file", "VAR_0"], "token": ["open", "(", "VAR_0", ",", "'w'", ")", ".", "close", "(", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "open(filename, 'w').close()", "decano_code": "open(filename, 'w').close()", "raw_code": "open(filename, 'w').close()", "str_map": {}, "var_map": {"filename": "VAR_0"}}
{"src": ["convert", "a", "string", "into", "datetime", "using", "the", "format", "_STR:0_"], "token": ["datetime", ".", "datetime", ".", "strptime", "(", "string_date", ",", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "datetime.datetime.strptime(string_date, \" _STR:0_ \")", "decano_code": "datetime.datetime.strptime(string_date, \" _STR:0_ \")", "raw_code": "datetime.datetime.strptime(string_date, '%Y-%m-%d %H:%M:%S.%f')", "str_map": {"%Y-%m-%d %H:%M:%S.%f": "_STR:0_"}, "var_map": {}}
{"src": ["find", "the", "index", "of", "a", "list", "with", "the", "first", "element", "equal", "to", "_STR:0_", "within", "the", "list", "of", "lists", "VAR_0"], "token": ["[", "index", "for", "index", ",", "item", "in", "enumerate", "(", "VAR_0", ")", "if", "item", "[", "0", "]", "==", "\" _STR:0_ \"", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NUMBER", "OP", "OP", "STRING", "OP"], "cano_code": "[index for index, item in enumerate(thelist) if item[0] == \" _STR:0_ \"]", "decano_code": "[index for index, item in enumerate(thelist) if item[0] == \" _STR:0_ \"]", "raw_code": "[index for index, item in enumerate(thelist) if item[0] == '332']", "str_map": {"332": "_STR:0_"}, "var_map": {"thelist": "VAR_0"}}
{"src": ["lower", "a", "string", "VAR_0", "and", "remove", "non-alphanumeric", "characters", "aside", "from", "space"], "token": ["re", ".", "sub", "(", "'[^\\\\sa-zA-Z0-9]'", ",", "''", ",", "VAR_0", ")", ".", "lower", "(", ")", ".", "strip", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "re.sub('[^\\\\sa-zA-Z0-9]', '', text).lower().strip()", "decano_code": "re.sub('[^\\\\sa-zA-Z0-9]', '', text).lower().strip()", "raw_code": "re.sub('[^\\\\sa-zA-Z0-9]', '', text).lower().strip()", "str_map": {}, "var_map": {"text": "VAR_0"}}
{"src": ["remove", "all", "non-alphanumeric", "characters", "except", "space", "from", "a", "string", "VAR_0", "and", "lower", "it"], "token": ["re", ".", "sub", "(", "'(?!\\\\s)[\\\\W_]'", ",", "''", ",", "VAR_0", ")", ".", "lower", "(", ")", ".", "strip", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "re.sub('(?!\\\\s)[\\\\W_]', '', text).lower().strip()", "decano_code": "re.sub('(?!\\\\s)[\\\\W_]', '', text).lower().strip()", "raw_code": "re.sub('(?!\\\\s)[\\\\W_]', '', text).lower().strip()", "str_map": {}, "var_map": {"text": "VAR_0"}}
{"src": ["subscript", "text", "_STR:0_", "with", "_STR:1_", "as", "subscripted", "in", "matplotlib", "labels", "for", "arrays", "_STR:2_", "and", "_STR:3_", "."], "token": ["plt", ".", "plot", "(", "x", ",", "y", ",", "label", "=", "'H\\u2082O'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "plt.plot(x, y, label='H\\u2082O')", "decano_code": "plt.plot(x, y, label='H\\u2082O')", "raw_code": "plt.plot(x, y, label='H\\u2082O')", "str_map": {"H20": "_STR:0_", "2": "_STR:1_", "x": "_STR:2_", "y": "_STR:3_"}, "var_map": {}}
{"src": ["subscript", "text", "_STR:0_", "with", "_STR:1_", "as", "subscripted", "in", "matplotlib", "labels", "for", "arrays", "_STR:2_", "and", "_STR:3_", "."], "token": ["plt", ".", "plot", "(", "x", ",", "y", ",", "label", "=", "'$H_2O$'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "plt.plot(x, y, label='$H_2O$')", "decano_code": "plt.plot(x, y, label='$H_2O$')", "raw_code": "plt.plot(x, y, label='$H_2O$')", "str_map": {"H20": "_STR:0_", "2": "_STR:1_", "x": "_STR:2_", "y": "_STR:3_"}, "var_map": {}}
{"src": ["loop", "over", "a", "list", "VAR_0", "if", "sublists", "length", "equals", "3"], "token": ["[", "x", "for", "x", "in", "VAR_0", "if", "len", "(", "x", ")", "==", "3", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "OP", "NUMBER", "OP"], "cano_code": "[x for x in mylist if len(x) == 3]", "decano_code": "[x for x in mylist if len(x) == 3]", "raw_code": "[x for x in mylist if len(x) == 3]", "str_map": {}, "var_map": {"mylist": "VAR_0"}}
{"src": ["initialize", "a", "list", "VAR_0", "of", "100", "objects", "Object(", ")"], "token": ["VAR_0", "=", "[", "Object", "(", ")", "for", "_", "in", "range", "(", "100", ")", "]"], "type": ["NAME", "OP", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "OP"], "cano_code": "lst = [Object() for _ in range(100)]", "decano_code": "lst = [Object() for _ in range(100)]", "raw_code": "lst = [Object() for _ in range(100)]", "str_map": {}, "var_map": {"lst": "VAR_0"}}
{"src": ["create", "list", "VAR_0", "containing", "100", "instances", "of", "object", "VAR_0"], "token": ["VAR_0", "=", "[", "VAR_0", "(", ")", "for", "i", "in", "range", "(", "100", ")", "]"], "type": ["NAME", "OP", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "OP"], "cano_code": "lst = [Object() for i in range(100)]", "decano_code": "lst = [Object() for i in range(100)]", "raw_code": "lst = [Object() for i in range(100)]", "str_map": {}, "var_map": {"lst": "VAR_0", "Object": "VAR_0"}}
{"src": ["get", "the", "content", "of", "child", "tag", "with`href", "`", "attribute", "whose", "parent", "has", "css", "VAR_0"], "token": ["self", ".", "driver", ".", "find_element_by_css_selector", "(", "'.someclass a'", ")", ".", "get_attribute", "(", "'href'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "self.driver.find_element_by_css_selector('.someclass a').get_attribute('href')", "decano_code": "self.driver.find_element_by_css_selector('.someclass a').get_attribute('href')", "raw_code": "self.driver.find_element_by_css_selector('.someclass a').get_attribute('href')", "str_map": {}, "var_map": {"someclass": "VAR_0"}}
{"src": ["joining", "data", "from", "dataframe", "VAR_0", "with", "data", "from", "dataframe", "VAR_0", "based", "on", "matching", "values", "of", "column", "_STR:0_", "in", "both", "dataframes"], "token": ["VAR_0", ".", "merge", "(", "VAR_0", ",", "on", "=", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df1.merge(df2, on=\" _STR:0_ \")", "decano_code": "df1.merge(df2, on=\" _STR:0_ \")", "raw_code": "df1.merge(df2, on='Date_Time')", "str_map": {"Date_Time": "_STR:0_"}, "var_map": {"df1": "VAR_0", "df2": "VAR_0"}}
{"src": ["use", "VAR_0", "operator", "to", "print", "variable", "values", "VAR_0", "inside", "a", "string"], "token": ["'first string is: %s, second one is: %s'", "%", "(", "VAR_0", ",", "'geo.tif'", ")"], "type": ["STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "'first string is: %s, second one is: %s' % (str1, 'geo.tif')", "decano_code": "'first string is: %s, second one is: %s' % (str1, 'geo.tif')", "raw_code": "'first string is: %s, second one is: %s' % (str1, 'geo.tif')", "str_map": {}, "var_map": {"%s": "VAR_0", "str1": "VAR_0"}}
{"src": ["split", "a", "string", "by", "a", "delimiter", "in", "python"], "token": ["[", "x", ".", "strip", "(", ")", "for", "x", "in", "'2.MATCHES $$TEXT$$ STRING'", ".", "split", "(", "'$$TEXT$$'", ")", "]"], "type": ["OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "STRING", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "[x.strip() for x in '2.MATCHES $$TEXT$$ STRING'.split('$$TEXT$$')]", "decano_code": "[x.strip() for x in '2.MATCHES $$TEXT$$ STRING'.split('$$TEXT$$')]", "raw_code": "[x.strip() for x in '2.MATCHES $$TEXT$$ STRING'.split('$$TEXT$$')]", "str_map": {}, "var_map": {}}
{"src": ["check", "if", "directory", "VAR_0", "exists", "and", "create", "it", "if", "necessary"], "token": ["if", "(", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "directory", ")", ""], "type": ["KEYWORD", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NEWLINE", "INDENT", "NAME", "OP", "NAME", "OP", "NAME", "OP", "DEDENT"], "cano_code": "if (not os.path.exists(directory)):\n    os.makedirs(directory)", "decano_code": "if (not os.path.exists(directory)):\n    os.makedirs(directory)", "raw_code": "if (not os.path.exists(directory)):\n    os.makedirs(directory)", "str_map": {}, "var_map": {"directory ": "VAR_0"}}
{"src": ["check", "if", "a", "directory", "VAR_0", "exists", "and", "create", "it", "if", "necessary"], "token": ["try", ":", "\n", "    ", "os", ".", "makedirs", "(", "VAR_0", ")", "\n", "", "except", "OSError", ":", "\n", "    ", "if", "(", "not", "os", ".", "VAR_0", ".", "isdir", "(", "VAR_0", ")", ")", ":", "\n", "        ", "raise", "", ""], "type": ["KEYWORD", "OP", "NEWLINE", "INDENT", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NEWLINE", "DEDENT", "KEYWORD", "NAME", "OP", "NEWLINE", "INDENT", "KEYWORD", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT", "DEDENT"], "cano_code": "try:\n    os.makedirs(path)\nexcept OSError:\n    if (not os.path.isdir(path)):\n        raise", "decano_code": "try:\n    os.makedirs(path)\nexcept OSError:\n    if (not os.path.isdir(path)):\n        raise", "raw_code": "try:\n    os.makedirs(path)\nexcept OSError:\n    if (not os.path.isdir(path)):\n        raise", "str_map": {}, "var_map": {"path": "VAR_0"}}
{"src": ["check", "if", "a", "directory", "VAR_0", "exists", "and", "create", "it", "if", "necessary"], "token": ["distutils", ".", "dir_util", ".", "mkpath", "(", "VAR_0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "distutils.dir_util.mkpath(path)", "decano_code": "distutils.dir_util.mkpath(path)", "raw_code": "distutils.dir_util.mkpath(path)", "str_map": {}, "var_map": {"path": "VAR_0"}}
{"src": ["check", "if", "a", "directory", "VAR_0", "exists", "and", "create", "it", "if", "necessary"], "token": ["try", ":", "\n", "    ", "os", ".", "makedirs", "(", "VAR_0", ")", "\n", "", "except", "OSError", "as", "exception", ":", "\n", "    ", "if", "(", "exception", ".", "errno", "!=", "errno", ".", "EEXIST", ")", ":", "\n", "        ", "raise", "", ""], "type": ["KEYWORD", "OP", "NEWLINE", "INDENT", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NEWLINE", "DEDENT", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NEWLINE", "INDENT", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT", "DEDENT"], "cano_code": "try:\n    os.makedirs(path)\nexcept OSError as exception:\n    if (exception.errno != errno.EEXIST):\n        raise", "decano_code": "try:\n    os.makedirs(path)\nexcept OSError as exception:\n    if (exception.errno != errno.EEXIST):\n        raise", "raw_code": "try:\n    os.makedirs(path)\nexcept OSError as exception:\n    if (exception.errno != errno.EEXIST):\n        raise", "str_map": {}, "var_map": {"path": "VAR_0"}}
{"src": ["replace", "a", "separate", "word", "_STR:0_", "by", "_STR:1_", "in", "a", "string", "_STR:2_"], "token": ["re", ".", "sub", "(", "'\\\\bH3\\\\b'", ",", "\" _STR:1_ \"", ",", "text", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.sub('\\\\bH3\\\\b', \" _STR:1_ \", text)", "decano_code": "re.sub('\\\\bH3\\\\b', \" _STR:1_ \", text)", "raw_code": "re.sub('\\\\bH3\\\\b', 'H1', text)", "str_map": {"H3": "_STR:0_", "H1": "_STR:1_", "text": "_STR:2_"}, "var_map": {}}
{"src": ["substitute", "ASCII", "letters", "in", "string", "_STR:0_", "with", "empty", "string", "_STR:1_"], "token": ["re", ".", "sub", "(", "'\\\\D'", ",", "\" _STR:1_ \"", ",", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.sub('\\\\D', \" _STR:1_ \", \" _STR:0_ \")", "decano_code": "re.sub('\\\\D', \" _STR:1_ \", \" _STR:0_ \")", "raw_code": "re.sub('\\\\D', '', 'aas30dsa20')", "str_map": {"aas30dsa20": "_STR:0_", "": "_STR:1_"}, "var_map": {}}
{"src": ["get", "digits", "only", "from", "a", "string", "VAR_0", "using", "lambda", "function"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "[", "x", "for", "x", "in", "'aas30dsa20'", "if", "x", ".", "isdigit", "(", ")", "]", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "STRING", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "\"\"\"\"\"\".join([x for x in 'aas30dsa20' if x.isdigit()])", "decano_code": "\"\"\"\"\"\".join([x for x in 'aas30dsa20' if x.isdigit()])", "raw_code": "\"\"\"\"\"\".join([x for x in 'aas30dsa20' if x.isdigit()])", "str_map": {}, "var_map": {"aas30dsa20": "VAR_0"}}
{"src": ["access", "a", "tag", "called", "_STR:0_", "in", "beautifulsoup", "VAR_0"], "token": ["print", "(", "VAR_0", ".", "find", "(", "\" _STR:0_ \"", ")", ".", "string", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP"], "cano_code": "print(soup.find(\" _STR:0_ \").string)", "decano_code": "print(soup.find(\" _STR:0_ \").string)", "raw_code": "print(soup.find('name').string)", "str_map": {"name": "_STR:0_"}, "var_map": {"soup": "VAR_0"}}
{"src": ["get", "a", "dictionary", "VAR_0", "of", "key-value", "pairs", "in", "PyMongo", "cursor", "VAR_0"], "token": ["VAR_0", "=", "dict", "(", "(", "record", "[", "'_id'", "]", ",", "record", ")", "for", "record", "in", "VAR_0", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "records = dict((record['_id'], record) for record in cursor)", "decano_code": "records = dict((record['_id'], record) for record in cursor)", "raw_code": "records = dict((record['_id'], record) for record in cursor)", "str_map": {}, "var_map": {"records": "VAR_0", "cursor": "VAR_0"}}
{"src": ["create", "new", "matrix", "object", "by", "concatenating", "data", "from", "matrix", "a", "and", "matrix", "b"], "token": ["np", ".", "concatenate", "(", "(", "A", ",", "B", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "np.concatenate((A, B))", "decano_code": "np.concatenate((A, B))", "raw_code": "np.concatenate((A, B))", "str_map": {}, "var_map": {}}
{"src": ["concat", "two", "matrices", "VAR_0", "and", "VAR_0", "in", "numpy"], "token": ["np", ".", "vstack", "(", "(", "VAR_0", ",", "VAR_0", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "np.vstack((A, B))", "decano_code": "np.vstack((A, B))", "raw_code": "np.vstack((A, B))", "str_map": {}, "var_map": {"A": "VAR_0", "B": "VAR_0"}}
{"src": ["get", "the", "characters", "count", "in", "a", "file", "VAR_0"], "token": ["os", ".", "stat", "(", "VAR_0", ")", ".", "st_size"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME"], "cano_code": "os.stat(filepath).st_size", "decano_code": "os.stat(filepath).st_size", "raw_code": "os.stat(filepath).st_size", "str_map": {}, "var_map": {"filepath": "VAR_0"}}
{"src": ["count", "the", "occurrences", "of", "item", "_STR:0_", "in", "list", "VAR_0"], "token": ["VAR_0", ".", "count", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "l.count(\" _STR:0_ \")", "decano_code": "l.count(\" _STR:0_ \")", "raw_code": "l.count('a')", "str_map": {"a": "_STR:0_"}, "var_map": {"l": "VAR_0"}}
{"src": ["count", "the", "occurrences", "of", "items", "in", "list", "VAR_0"], "token": ["Counter", "(", "VAR_0", ")"], "type": ["NAME", "OP", "NAME", "OP"], "cano_code": "Counter(l)", "decano_code": "Counter(l)", "raw_code": "Counter(l)", "str_map": {}, "var_map": {"l": "VAR_0"}}
{"src": ["count", "the", "occurrences", "of", "items", "in", "list", "VAR_0"], "token": ["[", "[", "x", ",", "VAR_0", ".", "count", "(", "x", ")", "]", "for", "x", "in", "set", "(", "VAR_0", ")", "]"], "type": ["OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "[[x, l.count(x)] for x in set(l)]", "decano_code": "[[x, l.count(x)] for x in set(l)]", "raw_code": "[[x, l.count(x)] for x in set(l)]", "str_map": {}, "var_map": {"l": "VAR_0"}}
{"src": ["count", "the", "occurrences", "of", "items", "in", "list", "VAR_0"], "token": ["dict", "(", "(", "(", "x", ",", "VAR_0", ".", "count", "(", "x", ")", ")", "for", "x", "in", "set", "(", "VAR_0", ")", ")", ")"], "type": ["KEYWORD", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "dict(((x, l.count(x)) for x in set(l)))", "decano_code": "dict(((x, l.count(x)) for x in set(l)))", "raw_code": "dict(((x, l.count(x)) for x in set(l)))", "str_map": {}, "var_map": {"l": "VAR_0"}}
{"src": ["count", "the", "occurrences", "of", "item", "_STR:0_", "in", "list", "VAR_0"], "token": ["VAR_0", ".", "count", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "l.count(\" _STR:0_ \")", "decano_code": "l.count(\" _STR:0_ \")", "raw_code": "l.count('b')", "str_map": {"b": "_STR:0_"}, "var_map": {"l": "VAR_0"}}
{"src": ["copy", "file", "VAR_0", "to", "directory", "VAR_0"], "token": ["shutil", ".", "copy", "(", "VAR_0", ",", "VAR_0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "shutil.copy(srcfile, dstdir)", "decano_code": "shutil.copy(srcfile, dstdir)", "raw_code": "shutil.copy(srcfile, dstdir)", "str_map": {}, "var_map": {"srcfile": "VAR_0", "dstdir": "VAR_0"}}
{"src": ["find", "the", "key", "associated", "with", "the", "largest", "value", "in", "dictionary", "VAR_0", "whilst", "key", "is", "non-zero", "value"], "token": ["max", "(", "k", "for", "k", ",", "v", "in", "VAR_0", ".", "items", "(", ")", "if", "v", "!=", "0", ")"], "type": ["KEYWORD", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "OP", "NUMBER", "OP"], "cano_code": "max(k for k, v in x.items() if v != 0)", "decano_code": "max(k for k, v in x.items() if v != 0)", "raw_code": "max(k for k, v in x.items() if v != 0)", "str_map": {}, "var_map": {"x": "VAR_0"}}
{"src": ["get", "the", "largest", "key", "whose", "not", "associated", "with", "value", "of", "0", "in", "dictionary", "VAR_0"], "token": ["(", "k", "for", "k", ",", "v", "in", "VAR_0", ".", "items", "(", ")", "if", "v", "!=", "0", ")"], "type": ["OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "OP", "NUMBER", "OP"], "cano_code": "(k for k, v in x.items() if v != 0)", "decano_code": "(k for k, v in x.items() if v != 0)", "raw_code": "(k for k, v in x.items() if v != 0)", "str_map": {}, "var_map": {"x": "VAR_0"}}
{"src": ["get", "the", "largest", "key", "in", "a", "dictionary", "VAR_0", "with", "non-zero", "value"], "token": ["max", "(", "k", "for", "k", ",", "v", "in", "VAR_0", ".", "items", "(", ")", "if", "v", "!=", "0", ")"], "type": ["KEYWORD", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "OP", "NUMBER", "OP"], "cano_code": "max(k for k, v in x.items() if v != 0)", "decano_code": "max(k for k, v in x.items() if v != 0)", "raw_code": "max(k for k, v in x.items() if v != 0)", "str_map": {}, "var_map": {"x": "VAR_0"}}
{"src": ["put", "the", "curser", "at", "beginning", "of", "the", "file"], "token": ["file", ".", "seek", "(", "0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "file.seek(0)", "decano_code": "file.seek(0)", "raw_code": "file.seek(0)", "str_map": {}, "var_map": {}}
{"src": ["combine", "values", "from", "column", "_STR:0_", "and", "column", "_STR:1_", "of", "dataframe", "VAR_0", "into", "column", "_STR:2_", "of", "datafram", "VAR_0"], "token": ["VAR_0", "[", "\" _STR:2_ \"", "]", "=", "np", ".", "where", "(", "VAR_0", "[", "\" _STR:1_ \"", "]", ".", "isnull", ",", "VAR_0", "[", "\" _STR:0_ \"", "]", ",", "VAR_0", "[", "\" _STR:1_ \"", "]", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "df[\" _STR:2_ \"] = np.where(df[\" _STR:1_ \"].isnull, df[\" _STR:0_ \"], df[\" _STR:1_ \"])", "decano_code": "df[\" _STR:2_ \"] = np.where(df[\" _STR:1_ \"].isnull, df[\" _STR:0_ \"], df[\" _STR:1_ \"])", "raw_code": "df['c'] = np.where(df['a'].isnull, df['b'], df['a'])", "str_map": {"b": "_STR:0_", "a": "_STR:1_", "c": "_STR:2_"}, "var_map": {"df": "VAR_0"}}
{"src": ["remove", "key", "_STR:0_", "from", "dictionary", "VAR_0"], "token": ["del", "VAR_0", "[", "\" _STR:0_ \"", "]"], "type": ["KEYWORD", "NAME", "OP", "STRING", "OP"], "cano_code": "del d[\" _STR:0_ \"]", "decano_code": "del d[\" _STR:0_ \"]", "raw_code": "del d['ele']", "str_map": {"ele": "_STR:0_"}, "var_map": {"d": "VAR_0"}}
{"src": ["update", "datetime", "field", "in", "VAR_0", "to", "be", "the", "existing", "VAR_0", "plus", "100", "years"], "token": ["VAR_0", ".", "objects", ".", "update", "(", "VAR_0", "=", "F", "(", "'timestamp'", ")", "+", "timedelta", "(", "days", "=", "36524.25", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "MyModel.objects.update(timestamp=F('timestamp') + timedelta(days=36524.25))", "decano_code": "MyModel.objects.update(timestamp=F('timestamp') + timedelta(days=36524.25))", "raw_code": "MyModel.objects.update(timestamp=F('timestamp') + timedelta(days=36524.25))", "str_map": {}, "var_map": {"MyModel": "VAR_0", "timestamp": "VAR_0"}}
{"src": ["merge", "list", "VAR_0", "and", "list", "VAR_0", "and", "list", "VAR_0", "into", "one", "list"], "token": ["[", "'it'", "]", "+", "[", "'was'", "]", "+", "[", "'annoying'", "]"], "type": ["OP", "STRING", "OP", "OP", "OP", "STRING", "OP", "OP", "OP", "STRING", "OP"], "cano_code": "['it'] + ['was'] + ['annoying']", "decano_code": "['it'] + ['was'] + ['annoying']", "raw_code": "['it'] + ['was'] + ['annoying']", "str_map": {}, "var_map": {"['it']": "VAR_0", "['was']": "VAR_0", "['annoying']": "VAR_0"}}
{"src": ["increment", "a", "value", "with", "leading", "zeroes", "in", "a", "number", "VAR_0"], "token": ["str", "(", "int", "(", "VAR_0", ")", "+", "1", ")", ".", "zfill", "(", "len", "(", "VAR_0", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "str(int(x) + 1).zfill(len(x))", "decano_code": "str(int(x) + 1).zfill(len(x))", "raw_code": "str(int(x) + 1).zfill(len(x))", "str_map": {}, "var_map": {"x": "VAR_0"}}
{"src": ["check", "if", "a", "pandas", "dataframe", "VAR_0", "'s", "index", "is", "sorted"], "token": ["all", "(", "VAR_0", ".", "index", "[", ":", "-", "1", "]", "<=", "VAR_0", ".", "index", "[", "1", ":", "]", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "all(df.index[:-1] <= df.index[1:])", "decano_code": "all(df.index[:-1] <= df.index[1:])", "raw_code": "all(df.index[:-1] <= df.index[1:])", "str_map": {}, "var_map": {"df": "VAR_0"}}
{"src": ["convert", "tuple", "VAR_0", "to", "list"], "token": ["list", "(", "VAR_0", ")"], "type": ["KEYWORD", "OP", "NAME", "OP"], "cano_code": "list(t)", "decano_code": "list(t)", "raw_code": "list(t)", "str_map": {}, "var_map": {"t": "VAR_0"}}
{"src": ["convert", "list", "VAR_0", "to", "tuple"], "token": ["tuple", "(", "l", ")"], "type": ["KEYWORD", "OP", "NAME", "OP"], "cano_code": "tuple(l)", "decano_code": "tuple(l)", "raw_code": "tuple(l)", "str_map": {}, "var_map": {"t": "VAR_0"}}
{"src": ["convert", "tuple", "VAR_0", "to", "list"], "token": ["VAR_0", "=", "map", "(", "list", ",", "VAR_0", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP"], "cano_code": "level1 = map(list, level1)", "decano_code": "level1 = map(list, level1)", "raw_code": "level1 = map(list, level1)", "str_map": {}, "var_map": {"level1": "VAR_0"}}
{"src": ["send", "the", "output", "of", "pprint", "object", "VAR_0", "to", "file", "VAR_0"], "token": ["pprint", ".", "pprint", "(", "VAR_0", ",", "VAR_0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "pprint.pprint(dataobject, logFile)", "decano_code": "pprint.pprint(dataobject, logFile)", "raw_code": "pprint.pprint(dataobject, logFile)", "str_map": {}, "var_map": {"dataobject": "VAR_0", "logFile": "VAR_0"}}
{"src": ["get", "index", "of", "rows", "in", "column", "_STR:0_"], "token": ["df", ".", "loc", "[", "df", "[", "\" _STR:0_ \"", "]", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "df.loc[df[\" _STR:0_ \"]]", "decano_code": "df.loc[df[\" _STR:0_ \"]]", "raw_code": "df.loc[df['BoolCol']]", "str_map": {"BoolCol": "_STR:0_"}, "var_map": {}}
{"src": ["create", "a", "list", "containing", "the", "indexes", "of", "rows", "where", "the", "value", "of", "column", "_STR:0_", "in", "dataframe", "VAR_0", "are", "equal", "to", "true"], "token": ["VAR_0", ".", "iloc", "[", "np", ".", "flatnonzero", "(", "VAR_0", "[", "\" _STR:0_ \"", "]", ")", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "df.iloc[np.flatnonzero(df[\" _STR:0_ \"])]", "decano_code": "df.iloc[np.flatnonzero(df[\" _STR:0_ \"])]", "raw_code": "df.iloc[np.flatnonzero(df['BoolCol'])]", "str_map": {"BoolCol": "_STR:0_"}, "var_map": {"df": "VAR_0"}}
{"src": ["get", "list", "of", "indexes", "of", "rows", "where", "column", "_STR:0_", "values", "match", "true"], "token": ["df", "[", "df", "[", "\" _STR:0_ \"", "]", "==", "True", "]", ".", "index", ".", "tolist", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "df[df[\" _STR:0_ \"] == True].index.tolist()", "decano_code": "df[df[\" _STR:0_ \"] == True].index.tolist()", "raw_code": "df[df['BoolCol'] == True].index.tolist()", "str_map": {"BoolCol": "_STR:0_"}, "var_map": {}}
{"src": ["get", "index", "of", "rows", "in", "dataframe", "VAR_0", "which", "column", "_STR:0_", "matches", "value", "true"], "token": ["VAR_0", "[", "VAR_0", "[", "\" _STR:0_ \"", "]", "]", ".", "index", ".", "tolist", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "df[df[\" _STR:0_ \"]].index.tolist()", "decano_code": "df[df[\" _STR:0_ \"]].index.tolist()", "raw_code": "df[df['BoolCol']].index.tolist()", "str_map": {"BoolCol": "_STR:0_"}, "var_map": {"df": "VAR_0"}}
{"src": ["change", "working", "directory", "to", "the", "directory", "VAR_0"], "token": ["os", ".", "chdir", "(", "VAR_0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "os.chdir(owd)", "decano_code": "os.chdir(owd)", "raw_code": "os.chdir(owd)", "str_map": {}, "var_map": {"owd": "VAR_0"}}
{"src": ["insert", "data", "from", "a", "string", "VAR_0", "to", "sqlite", "db", "VAR_0"], "token": ["VAR_0", ".", "execute", "(", "\"INSERT INTO test VALUES (?, 'bar')\"", ",", "(", "VAR_0", ",", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "c.execute(\"INSERT INTO test VALUES (?, 'bar')\", (testfield,))", "decano_code": "c.execute(\"INSERT INTO test VALUES (?, 'bar')\", (testfield,))", "raw_code": "c.execute(\"INSERT INTO test VALUES (?, 'bar')\", (testfield,))", "str_map": {}, "var_map": {"testfield": "VAR_0", "c": "VAR_0"}}
{"src": ["decode", "string", "_STR:0_", "into", "a", "normal", "string"], "token": ["\" _STR:0_ \"", ".", "decode", "(", "'string_escape'", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "\" _STR:0_ \".decode('string_escape')", "decano_code": "\" _STR:0_ \".decode('string_escape')", "raw_code": "\"\"\"\\\\x89\\\\n\"\"\".decode('string_escape')", "str_map": {"\\x89\\n": "_STR:0_"}, "var_map": {}}
{"src": ["convert", "a", "raw", "string", "VAR_0", "into", "a", "normal", "string"], "token": ["VAR_0", ".", "decode", "(", "'string_escape'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "raw_string.decode('string_escape')", "decano_code": "raw_string.decode('string_escape')", "raw_code": "raw_string.decode('string_escape')", "str_map": {}, "var_map": {"raw_string": "VAR_0"}}
{"src": ["convert", "a", "raw", "string", "VAR_0", "into", "a", "normal", "string"], "token": ["VAR_0", ".", "decode", "(", "'unicode_escape'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "raw_byte_string.decode('unicode_escape')", "decano_code": "raw_byte_string.decode('unicode_escape')", "raw_code": "raw_byte_string.decode('unicode_escape')", "str_map": {}, "var_map": {"raw_byte_string": "VAR_0"}}
{"src": ["split", "a", "string", "VAR_0", "with", "into", "all", "strings", "of", "repeated", "characters"], "token": ["[", "m", ".", "group", "(", "0", ")", "for", "m", "in", "re", ".", "finditer", "(", "'(\\\\d)\\\\1*'", ",", "VAR_0", ")", "]"], "type": ["OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP"], "cano_code": "[m.group(0) for m in re.finditer('(\\\\d)\\\\1*', s)]", "decano_code": "[m.group(0) for m in re.finditer('(\\\\d)\\\\1*', s)]", "raw_code": "[m.group(0) for m in re.finditer('(\\\\d)\\\\1*', s)]", "str_map": {}, "var_map": {"s": "VAR_0"}}
{"src": ["scatter", "a", "plot", "with", "x", ",", "y", "position", "of", "VAR_0", "[", "np", ".", "random", ".", "randn(100)", "]", "and", "face", "color", "equal", "to", "none"], "token": ["plt", ".", "scatter", "(", "np", ".", "random", ".", "randn", "(", "100", ")", ",", "np", ".", "random", ".", "randn", "(", "100", ")", ",", "facecolors", "=", "'none'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "plt.scatter(np.random.randn(100), np.random.randn(100), facecolors='none')", "decano_code": "plt.scatter(np.random.randn(100), np.random.randn(100), facecolors='none')", "raw_code": "plt.scatter(np.random.randn(100), np.random.randn(100), facecolors='none')", "str_map": {}, "var_map": {"np.random.randn(100)": "VAR_0"}}
{"src": ["do", "a", "scatter", "plot", "with", "empty", "circles"], "token": ["plt", ".", "plot", "(", "np", ".", "random", ".", "randn", "(", "100", ")", ",", "np", ".", "random", ".", "randn", "(", "100", ")", ",", "'o'", ",", "mfc", "=", "'none'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "plt.plot(np.random.randn(100), np.random.randn(100), 'o', mfc='none')", "decano_code": "plt.plot(np.random.randn(100), np.random.randn(100), 'o', mfc='none')", "raw_code": "plt.plot(np.random.randn(100), np.random.randn(100), 'o', mfc='none')", "str_map": {}, "var_map": {}}
{"src": ["remove", "a", "div", "with", "a", "id", "VAR_0", "using", "beautifulsoup"], "token": ["soup", ".", "find", "(", "'div'", ",", "id", "=", "'main-content'", ")", ".", "decompose", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "soup.find('div', id='main-content').decompose()", "decano_code": "soup.find('div', id='main-content').decompose()", "raw_code": "soup.find('div', id='main-content').decompose()", "str_map": {}, "var_map": {"main-content": "VAR_0"}}
{"src": ["filter", "rows", "containing", "key", "word", "VAR_0", "in", "column", "VAR_0"], "token": ["df", "[", "df", "[", "'ids'", "]", ".", "str", ".", "contains", "(", "'ball'", ")", "]"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "df[df['ids'].str.contains('ball')]", "decano_code": "df[df['ids'].str.contains('ball')]", "raw_code": "df[df['ids'].str.contains('ball')]", "str_map": {}, "var_map": {"ball": "VAR_0", "ids": "VAR_0"}}
{"src": ["convert", "index", "at", "level", "0", "into", "a", "column", "in", "dataframe", "VAR_0"], "token": ["VAR_0", ".", "reset_index", "(", "level", "=", "0", ",", "inplace", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df.reset_index(level=0, inplace=True)", "decano_code": "df.reset_index(level=0, inplace=True)", "raw_code": "df.reset_index(level=0, inplace=True)", "str_map": {}, "var_map": {"df": "VAR_0"}}
{"src": ["add", "indexes", "in", "a", "data", "frame", "VAR_0", "to", "a", "column", "VAR_0"], "token": ["VAR_0", "[", "'index1'", "]", "=", "VAR_0", ".", "index"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME"], "cano_code": "df['index1'] = df.index", "decano_code": "df['index1'] = df.index", "raw_code": "df['index1'] = df.index", "str_map": {}, "var_map": {"df": "VAR_0", "index1": "VAR_0"}}
{"src": ["convert", "pandas", "index", "in", "a", "dataframe", "to", "columns"], "token": ["df", ".", "reset_index", "(", "level", "=", "[", "'tick'", ",", "'obs'", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "df.reset_index(level=['tick', 'obs'])", "decano_code": "df.reset_index(level=['tick', 'obs'])", "raw_code": "df.reset_index(level=['tick', 'obs'])", "str_map": {}, "var_map": {}}
{"src": ["get", "reverse", "of", "list", "items", "from", "list", "_STR:0_", "using", "extended", "slicing"], "token": ["[", "x", "[", ":", ":", "-", "1", "]", "for", "x", "in", "b", "]"], "type": ["OP", "NAME", "OP", "OP", "OP", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[x[::-1] for x in b]", "decano_code": "[x[::-1] for x in b]", "raw_code": "[x[::-1] for x in b]", "str_map": {"b": "_STR:0_"}, "var_map": {}}
{"src": ["join", "each", "element", "in", "array", "VAR_0", "with", "element", "at", "the", "same", "index", "in", "array", "VAR_0", "as", "a", "tuple"], "token": ["np", ".", "array", "(", "[", "zip", "(", "x", ",", "y", ")", "for", "x", ",", "y", "in", "zip", "(", "VAR_0", ",", "VAR_0", ")", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "np.array([zip(x, y) for x, y in zip(a, b)])", "decano_code": "np.array([zip(x, y) for x, y in zip(a, b)])", "raw_code": "np.array([zip(x, y) for x, y in zip(a, b)])", "str_map": {}, "var_map": {"a": "VAR_0", "b": "VAR_0"}}
{"src": ["zip", "two", "2-d", "arrays", "VAR_0", "and", "VAR_0"], "token": ["np", ".", "array", "(", "zip", "(", "VAR_0", ".", "ravel", "(", ")", ",", "VAR_0", ".", "ravel", "(", ")", ")", ",", "dtype", "=", "'i4,i4'", ")", ".", "reshape", "(", "VAR_0", ".", "shape", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)", "decano_code": "np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)", "raw_code": "np.array(zip(a.ravel(), b.ravel()), dtype='i4,i4').reshape(a.shape)", "str_map": {}, "var_map": {"a": "VAR_0", "b": "VAR_0"}}
{"src": ["convert", "list", "VAR_0", "into", "a", "comma", "separated", "string"], "token": ["\"\"\",\"\"\"", ".", "join", "(", "[", "str", "(", "i", ")", "for", "i", "in", "VAR_0", "]", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "\"\"\",\"\"\".join([str(i) for i in list_of_ints])", "decano_code": "\"\"\",\"\"\".join([str(i) for i in list_of_ints])", "raw_code": "\"\"\",\"\"\".join([str(i) for i in list_of_ints])", "str_map": {}, "var_map": {"list_of_ints": "VAR_0"}}
{"src": ["send", "a", "post", "request", "with", "raw", "data", "VAR_0", "and", "basic", "authentication", "with", "VAR_0", "and", "VAR_0"], "token": ["requests", ".", "post", "(", "url", ",", "data", "=", "VAR_0", ",", "headers", "=", "HEADERS_DICT", ",", "auth", "=", "(", "VAR_0", ",", "VAR_0", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "requests.post(url, data=DATA, headers=HEADERS_DICT, auth=(username, password))", "decano_code": "requests.post(url, data=DATA, headers=HEADERS_DICT, auth=(username, password))", "raw_code": "requests.post(url, data=DATA, headers=HEADERS_DICT, auth=(username, password))", "str_map": {}, "var_map": {"DATA": "VAR_0", "username": "VAR_0", "password": "VAR_0"}}
{"src": ["find", "last", "occurrence", "of", "character", "_STR:0_", "in", "string", "_STR:1_"], "token": ["\" _STR:1_ \"", ".", "rfind", "(", "\" _STR:0_ \"", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "\" _STR:1_ \".rfind(\" _STR:0_ \")", "decano_code": "\" _STR:1_ \".rfind(\" _STR:0_ \")", "raw_code": "'abcd}def}'.rfind('}')", "str_map": {"}": "_STR:0_", "abcd}def}": "_STR:1_"}, "var_map": {}}
{"src": ["iterate", "ove", "list", "VAR_0", "using", "list", "comprehension"], "token": ["print", "(", "[", "item", "for", "item", "in", "[", "1", ",", "2", ",", "3", "]", "]", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "print([item for item in [1, 2, 3]])", "decano_code": "print([item for item in [1, 2, 3]])", "raw_code": "print([item for item in [1, 2, 3]])", "str_map": {}, "var_map": {"[1, 2, 3]": "VAR_0"}}
{"src": ["extract", "all", "the", "values", "with", "keys", "_STR:0_", "and", "_STR:1_", "from", "a", "list", "of", "dictionaries", "VAR_0", "to", "list", "of", "tuples"], "token": ["[", "(", "x", "[", "\" _STR:0_ \"", "]", ",", "x", "[", "\" _STR:1_ \"", "]", ")", "for", "x", "in", "VAR_0", "]"], "type": ["OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[(x[\" _STR:0_ \"], x[\" _STR:1_ \"]) for x in d]", "decano_code": "[(x[\" _STR:0_ \"], x[\" _STR:1_ \"]) for x in d]", "raw_code": "[(x['x'], x['y']) for x in d]", "str_map": {"x": "_STR:0_", "y": "_STR:1_"}, "var_map": {"d": "VAR_0"}}
{"src": ["get", "the", "filename", "without", "the", "extension", "from", "file", "_STR:0_"], "token": ["print", "(", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "\" _STR:0_ \"", ")", ")", "[", "0", "]", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "print(os.path.splitext(os.path.basename(\" _STR:0_ \"))[0])", "decano_code": "print(os.path.splitext(os.path.basename(\" _STR:0_ \"))[0])", "raw_code": "print(os.path.splitext(os.path.basename('hemanth.txt'))[0])", "str_map": {"hemanth.txt": "_STR:0_"}, "var_map": {}}
{"src": ["create", "a", "dictionary", "by", "adding", "each", "two", "adjacent", "elements", "in", "tuple", "VAR_0", "as", "key/value", "pair", "to", "it"], "token": ["dict", "(", "VAR_0", "[", "i", ":", "i", "+", "2", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "VAR_0", ")", ",", "2", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "dict(x[i:i + 2] for i in range(0, len(x), 2))", "decano_code": "dict(x[i:i + 2] for i in range(0, len(x), 2))", "raw_code": "dict(x[i:i + 2] for i in range(0, len(x), 2))", "str_map": {}, "var_map": {"x": "VAR_0"}}
{"src": ["create", "a", "list", "containing", "flattened", "list", "VAR_0"], "token": ["values", "=", "sum", "(", "[", "[", "'A'", ",", "'B'", ",", "'C'", "]", ",", "[", "'D'", ",", "'E'", ",", "'F'", "]", ",", "[", "'G'", ",", "'H'", ",", "'I'", "]", "]", ",", "[", "]", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "OP", "OP", "OP"], "cano_code": "values = sum([['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']], [])", "decano_code": "values = sum([['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']], [])", "raw_code": "values = sum([['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']], [])", "str_map": {}, "var_map": {"[['A', 'B', 'C'], ['D', 'E', 'F'], ['G', 'H', 'I']]": "VAR_0"}}
{"src": ["select", "rows", "in", "a", "dataframe", "VAR_0", "column", "_STR:0_", "between", "two", "values", "99", "and", "101"], "token": ["VAR_0", "=", "VAR_0", "[", "(", "VAR_0", "[", "\" _STR:0_ \"", "]", ">=", "99", ")", "&", "(", "VAR_0", "[", "\" _STR:0_ \"", "]", "<=", "101", ")", "]"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "df = df[(df[\" _STR:0_ \"] >= 99) & (df[\" _STR:0_ \"] <= 101)]", "decano_code": "df = df[(df[\" _STR:0_ \"] >= 99) & (df[\" _STR:0_ \"] <= 101)]", "raw_code": "df = df[(df['closing_price'] >= 99) & (df['closing_price'] <= 101)]", "str_map": {"closing_price": "_STR:0_"}, "var_map": {"df": "VAR_0"}}
{"src": ["replace", "all", "occurences", "of", "newlines", "VAR_0", "with", "VAR_0", "in", "dataframe", "VAR_0"], "token": ["VAR_0", ".", "replace", "(", "{", "'\\n'", ":", "'<br>'", "}", ",", "regex", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df.replace({'\\n': '<br>'}, regex=True)", "decano_code": "df.replace({'\\n': '<br>'}, regex=True)", "raw_code": "df.replace({'\\n': '<br>'}, regex=True)", "str_map": {}, "var_map": {"\\n": "VAR_0", "<br>": "VAR_0", "df": "VAR_0"}}
{"src": ["replace", "all", "occurrences", "of", "a", "string", "VAR_0", "by", "string", "VAR_0", "in", "a", "pandas", "data", "frame", "VAR_0"], "token": ["VAR_0", ".", "replace", "(", "{", "'\\n'", ":", "'<br>'", "}", ",", "regex", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df.replace({'\\n': '<br>'}, regex=True)", "decano_code": "df.replace({'\\n': '<br>'}, regex=True)", "raw_code": "df.replace({'\\n': '<br>'}, regex=True)", "str_map": {}, "var_map": {"\\n": "VAR_0", "<br>": "VAR_0", "df": "VAR_0"}}
{"src": ["create", "a", "list", "containing", "each", "two", "adjacent", "letters", "in", "string", "VAR_0", "as", "its", "elements"], "token": ["[", "(", "x", "+", "y", ")", "for", "x", ",", "y", "in", "zip", "(", "VAR_0", ",", "VAR_0", "[", "1", ":", "]", ")", "]"], "type": ["OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "OP"], "cano_code": "[(x + y) for x, y in zip(word, word[1:])]", "decano_code": "[(x + y) for x, y in zip(word, word[1:])]", "raw_code": "[(x + y) for x, y in zip(word, word[1:])]", "str_map": {}, "var_map": {"word": "VAR_0"}}
{"src": ["get", "a", "list", "of", "pairs", "from", "a", "string", "VAR_0", "using", "lambda", "function"], "token": ["list", "(", "map", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ",", "VAR_0", "[", ":", "-", "1", "]", ",", "VAR_0", "[", "1", ":", "]", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "OP"], "cano_code": "list(map(lambda x, y: x + y, word[:-1], word[1:]))", "decano_code": "list(map(lambda x, y: x + y, word[:-1], word[1:]))", "raw_code": "list(map(lambda x, y: x + y, word[:-1], word[1:]))", "str_map": {}, "var_map": {"word": "VAR_0"}}
{"src": ["extract", "a", "url", "from", "a", "string", "VAR_0"], "token": ["print", "(", "re", ".", "findall", "(", "'(https?://[^\\\\s]+)'", ",", "VAR_0", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP"], "cano_code": "print(re.findall('(https?://[^\\\\s]+)', myString))", "decano_code": "print(re.findall('(https?://[^\\\\s]+)', myString))", "raw_code": "print(re.findall('(https?://[^\\\\s]+)', myString))", "str_map": {}, "var_map": {"myString": "VAR_0"}}
{"src": ["extract", "a", "url", "from", "a", "string", "VAR_0"], "token": ["print", "(", "re", ".", "search", "(", "'(?P<url>https?://[^\\\\s]+)'", ",", "VAR_0", ")", ".", "group", "(", "'url'", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "print(re.search('(?P<url>https?://[^\\\\s]+)', myString).group('url'))", "decano_code": "print(re.search('(?P<url>https?://[^\\\\s]+)', myString).group('url'))", "raw_code": "print(re.search('(?P<url>https?://[^\\\\s]+)', myString).group('url'))", "str_map": {}, "var_map": {"myString": "VAR_0"}}
{"src": ["remove", "all", "special", "characters", ",", "punctuation", "and", "spaces", "from", "a", "string", "VAR_0", "using", "regex"], "token": ["re", ".", "sub", "(", "'[^A-Za-z0-9]+'", ",", "''", ",", "VAR_0", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.sub('[^A-Za-z0-9]+', '', mystring)", "decano_code": "re.sub('[^A-Za-z0-9]+', '', mystring)", "raw_code": "re.sub('[^A-Za-z0-9]+', '', mystring)", "str_map": {}, "var_map": {"mystring": "VAR_0"}}
{"src": ["create", "a", "DatetimeIndex", "containing", "13", "periods", "of", "the", "second", "friday", "of", "each", "month", "starting", "from", "date", "_STR:0_"], "token": ["pd", ".", "date_range", "(", "\" _STR:0_ \"", ",", "freq", "=", "'WOM-2FRI'", ",", "periods", "=", "13", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "pd.date_range(\" _STR:0_ \", freq='WOM-2FRI', periods=13)", "decano_code": "pd.date_range(\" _STR:0_ \", freq='WOM-2FRI', periods=13)", "raw_code": "pd.date_range('2016-01-01', freq='WOM-2FRI', periods=13)", "str_map": {"2016-01-01": "_STR:0_"}, "var_map": {}}
{"src": ["create", "multidimensional", "array", "VAR_0", "with", "3", "rows", "and", "2", "columns", "in", "python"], "token": ["VAR_0", "=", "[", "[", "a", ",", "b", "]", ",", "[", "c", ",", "d", "]", ",", "[", "e", ",", "f", "]", "]"], "type": ["NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "matrix = [[a, b], [c, d], [e, f]]", "decano_code": "matrix = [[a, b], [c, d], [e, f]]", "raw_code": "matrix = [[a, b], [c, d], [e, f]]", "str_map": {}, "var_map": {"matrix": "VAR_0"}}
{"src": ["replace", "spaces", "with", "underscore"], "token": ["mystring", ".", "replace", "(", "' '", ",", "'_'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "mystring.replace(' ', '_')", "decano_code": "mystring.replace(' ', '_')", "raw_code": "mystring.replace(' ', '_')", "str_map": {}, "var_map": {}}
{"src": ["get", "an", "absolute", "file", "path", "of", "file", "_STR:0_"], "token": ["os", ".", "path", ".", "abspath", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "os.path.abspath(\" _STR:0_ \")", "decano_code": "os.path.abspath(\" _STR:0_ \")", "raw_code": "os.path.abspath('mydir/myfile.txt')", "str_map": {"mydir/myfile.txt": "_STR:0_"}, "var_map": {}}
{"src": ["split", "string", "VAR_0", "on", "white", "spaces"], "token": ["\"\"\" \"\"\"", ".", "join", "(", "VAR_0", ".", "split", "(", ")", ")"], "type": ["STRING", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "\"\"\" \"\"\".join(my_string.split())", "decano_code": "\"\"\" \"\"\".join(my_string.split())", "raw_code": "\"\"\" \"\"\".join(my_string.split())", "str_map": {}, "var_map": {"my_string": "VAR_0"}}
{"src": ["get", "filename", "without", "extension", "from", "file", "VAR_0"], "token": ["os", ".", "path", ".", "splitext", "(", "VAR_0", ")", "[", "0", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP"], "cano_code": "os.path.splitext(filename)[0]", "decano_code": "os.path.splitext(filename)[0]", "raw_code": "os.path.splitext(filename)[0]", "str_map": {}, "var_map": {"filename": "VAR_0"}}
{"src": ["get", "a", "list", "containing", "the", "sum", "of", "each", "element", "VAR_0", "in", "list", "VAR_0", "plus", "the", "previous", "elements"], "token": ["[", "sum", "(", "VAR_0", "[", ":", "VAR_0", "]", ")", "for", "VAR_0", ",", "_", "in", "enumerate", "(", "VAR_0", ")", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "[sum(l[:i]) for i, _ in enumerate(l)]", "decano_code": "[sum(l[:i]) for i, _ in enumerate(l)]", "raw_code": "[sum(l[:i]) for i, _ in enumerate(l)]", "str_map": {}, "var_map": {"i": "VAR_0", "l": "VAR_0"}}
{"src": ["split", "a", "string", "VAR_0", "by", "VAR_0", "keeping", "VAR_0", "in", "the", "result"], "token": ["\"\"\"Docs/src/Scripts/temp\"\"\"", ".", "replace", "(", "'/'", ",", "'/\\x00/'", ")", ".", "split", "(", "'\\x00'", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "\"\"\"Docs/src/Scripts/temp\"\"\".replace('/', '/\\x00/').split('\\x00')", "decano_code": "\"\"\"Docs/src/Scripts/temp\"\"\".replace('/', '/\\x00/').split('\\x00')", "raw_code": "\"\"\"Docs/src/Scripts/temp\"\"\".replace('/', '/\\x00/').split('\\x00')", "str_map": {}, "var_map": {"Docs/src/Scripts/temp": "VAR_0", "/": "VAR_0"}}
{"src": ["shuffle", "columns", "of", "an", "numpy", "array", "_STR:0_"], "token": ["np", ".", "random", ".", "shuffle", "(", "np", ".", "transpose", "(", "r", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "np.random.shuffle(np.transpose(r))", "decano_code": "np.random.shuffle(np.transpose(r))", "raw_code": "np.random.shuffle(np.transpose(r))", "str_map": {"r": "_STR:0_"}, "var_map": {}}
{"src": ["copy", "all", "values", "in", "a", "column", "_STR:0_", "to", "a", "new", "column", "_STR:1_", "in", "a", "pandas", "data", "frame", "_STR:2_"], "token": ["df", "[", "\" _STR:1_ \"", "]", "=", "df", "[", "\" _STR:0_ \"", "]"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df[\" _STR:1_ \"] = df[\" _STR:0_ \"]", "decano_code": "df[\" _STR:1_ \"] = df[\" _STR:0_ \"]", "raw_code": "df['D'] = df['B']", "str_map": {"B": "_STR:0_", "D": "_STR:1_", "df": "_STR:2_"}, "var_map": {}}
{"src": ["find", "a", "value", "within", "nested", "json", "_STR:0_", "where", "the", "key", "inside", "another", "key", "_STR:1_", "is", "unknown", "."], "token": ["list", "(", "data", "[", "'A'", "]", "[", "\" _STR:1_ \"", "]", ".", "values", "(", ")", ")", "[", "0", "]", "[", "'maindata'", "]", "[", "0", "]", "[", "'Info'", "]"], "type": ["KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP", "STRING", "OP", "OP", "NUMBER", "OP", "OP", "STRING", "OP"], "cano_code": "list(data['A'][\" _STR:1_ \"].values())[0]['maindata'][0]['Info']", "decano_code": "list(data['A'][\" _STR:1_ \"].values())[0]['maindata'][0]['Info']", "raw_code": "list(data['A']['B'].values())[0]['maindata'][0]['Info']", "str_map": {"data": "_STR:0_", "B": "_STR:1_"}, "var_map": {}}
{"src": ["check", "characters", "of", "string", "VAR_0", "are", "true", "predication", "of", "function", "VAR_0"], "token": ["all", "(", "VAR_0", "(", "x", ")", "for", "x", "in", "VAR_0", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "all(predicate(x) for x in string)", "decano_code": "all(predicate(x) for x in string)", "raw_code": "all(predicate(x) for x in string)", "str_map": {}, "var_map": {"string": "VAR_0", "predicate": "VAR_0"}}
{"src": ["determine", "number", "of", "files", "on", "a", "drive", "with", "python"], "token": ["os", ".", "statvfs", "(", "'/'", ")", ".", "f_files", "-", "os", ".", "statvfs", "(", "'/'", ")", ".", "f_ffree"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME"], "cano_code": "os.statvfs('/').f_files - os.statvfs('/').f_ffree", "decano_code": "os.statvfs('/').f_files - os.statvfs('/').f_ffree", "raw_code": "os.statvfs('/').f_files - os.statvfs('/').f_ffree", "str_map": {}, "var_map": {}}
{"src": ["how", "to", "get", "a", "single", "result", "from", "a", "SQLite", "query", "in", "python", "?"], "token": ["cursor", ".", "fetchone", "(", ")", "[", "0", "]"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "cursor.fetchone()[0]", "decano_code": "cursor.fetchone()[0]", "raw_code": "cursor.fetchone()[0]", "str_map": {}, "var_map": {}}
{"src": ["convert", "string", "VAR_0", "into", "a", "list", "of", "integers", "VAR_0"], "token": ["VAR_0", "=", "[", "int", "(", "number", ")", "for", "number", "in", "VAR_0", ".", "split", "(", "','", ")", "]"], "type": ["NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "user_list = [int(number) for number in user_input.split(',')]", "decano_code": "user_list = [int(number) for number in user_input.split(',')]", "raw_code": "user_list = [int(number) for number in user_input.split(',')]", "str_map": {}, "var_map": {"user_input": "VAR_0", "user_list": "VAR_0"}}
{"src": ["get", "a", "list", "of", "integers", "by", "splitting", "a", "string", "VAR_0", "with", "comma"], "token": ["[", "int", "(", "s", ")", "for", "s", "in", "VAR_0", ".", "split", "(", "','", ")", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "[int(s) for s in user.split(',')]", "decano_code": "[int(s) for s in user.split(',')]", "raw_code": "[int(s) for s in user.split(',')]", "str_map": {}, "var_map": {"user": "VAR_0"}}
{"src": ["sorting", "a", "python", "list", "by", "two", "criteria"], "token": ["sorted", "(", "list", ",", "key", "=", "lambda", "x", ":", "(", "x", "[", "0", "]", ",", "-", "x", "[", "1", "]", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "sorted(list, key=lambda x: (x[0], -x[1]))", "decano_code": "sorted(list, key=lambda x: (x[0], -x[1]))", "raw_code": "sorted(list, key=lambda x: (x[0], -x[1]))", "str_map": {}, "var_map": {}}
{"src": ["sort", "a", "list", "of", "objects", "VAR_0", ",", "based", "on", "a", "function", "VAR_0", "in", "descending", "order"], "token": ["VAR_0", ".", "sort", "(", "key", "=", "VAR_0", ",", "reverse", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "ut.sort(key=cmpfun, reverse=True)", "decano_code": "ut.sort(key=cmpfun, reverse=True)", "raw_code": "ut.sort(key=cmpfun, reverse=True)", "str_map": {}, "var_map": {"ut": "VAR_0", "cmpfun": "VAR_0"}}
{"src": ["reverse", "list", "VAR_0", "based", "on", "the", "VAR_0", "attribute", "of", "each", "object"], "token": ["VAR_0", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", ".", "VAR_0", ",", "reverse", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "ut.sort(key=lambda x: x.count, reverse=True)", "decano_code": "ut.sort(key=lambda x: x.count, reverse=True)", "raw_code": "ut.sort(key=lambda x: x.count, reverse=True)", "str_map": {}, "var_map": {"ut": "VAR_0", "count": "VAR_0"}}
{"src": ["sort", "a", "list", "of", "objects", "VAR_0", "in", "reverse", "order", "by", "their", "VAR_0", "property"], "token": ["VAR_0", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", ".", "VAR_0", ",", "reverse", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "ut.sort(key=lambda x: x.count, reverse=True)", "decano_code": "ut.sort(key=lambda x: x.count, reverse=True)", "raw_code": "ut.sort(key=lambda x: x.count, reverse=True)", "str_map": {}, "var_map": {"ut": "VAR_0", "count": "VAR_0"}}
{"src": ["click", "a", "href", "button", "_STR:0_", "with", "selenium"], "token": ["driver", ".", "find_element_by_partial_link_text", "(", "\" _STR:0_ \"", ")", ".", "click", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "driver.find_element_by_partial_link_text(\" _STR:0_ \").click()", "decano_code": "driver.find_element_by_partial_link_text(\" _STR:0_ \").click()", "raw_code": "driver.find_element_by_partial_link_text('Send').click()", "str_map": {"Send": "_STR:0_"}, "var_map": {}}
{"src": ["click", "a", "href", "button", "having", "text", "VAR_0", "with", "selenium"], "token": ["driver", ".", "findElement", "(", "By", ".", "linkText", "(", "'Send InMail'", ")", ")", ".", "click", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "driver.findElement(By.linkText('Send InMail')).click()", "decano_code": "driver.findElement(By.linkText('Send InMail')).click()", "raw_code": "driver.findElement(By.linkText('Send InMail')).click()", "str_map": {}, "var_map": {"Send InMail": "VAR_0"}}
{"src": ["click", "a", "href", "button", "with", "text", "_STR:0_", "with", "selenium"], "token": ["driver", ".", "find_element_by_link_text", "(", "\" _STR:0_ \"", ")", ".", "click", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "driver.find_element_by_link_text(\" _STR:0_ \").click()", "decano_code": "driver.find_element_by_link_text(\" _STR:0_ \").click()", "raw_code": "driver.find_element_by_link_text('Send InMail').click()", "str_map": {"Send InMail": "_STR:0_"}, "var_map": {}}
{"src": ["cast", "an", "int", "VAR_0", "to", "a", "string", "and", "concat", "to", "string", "_STR:0_"], "token": ["\" _STR:0_ \"", "+", "str", "(", "VAR_0", ")"], "type": ["STRING", "OP", "KEYWORD", "OP", "NAME", "OP"], "cano_code": "\" _STR:0_ \" + str(i)", "decano_code": "\" _STR:0_ \" + str(i)", "raw_code": "'ME' + str(i)", "str_map": {"ME": "_STR:0_"}, "var_map": {"i": "VAR_0"}}
{"src": ["sorting", "data", "in", "DataFrame", "pandas"], "token": ["df", ".", "sort_values", "(", "[", "'System_num'", ",", "'Dis'", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "df.sort_values(['System_num', 'Dis'])", "decano_code": "df.sort_values(['System_num', 'Dis'])", "raw_code": "df.sort_values(['System_num', 'Dis'])", "str_map": {}, "var_map": {}}
{"src": ["prepend", "the", "line", "_STR:0_", "to", "the", "contents", "of", "file", "_STR:1_", "and", "save", "as", "the", "file", "_STR:2_"], "token": ["open", "(", "\" _STR:2_ \"", ",", "'w'", ")", ".", "write", "(", "\" _STR:0_ \"", "+", "open", "(", "\" _STR:1_ \"", ")", ".", "read", "(", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "open(\" _STR:2_ \", 'w').write(\" _STR:0_ \" + open(\" _STR:1_ \").read())", "decano_code": "open(\" _STR:2_ \", 'w').write(\" _STR:0_ \" + open(\" _STR:1_ \").read())", "raw_code": "open('outfile', 'w').write('#test firstline\\n' + open('infile').read())", "str_map": {"#test firstline\n": "_STR:0_", "infile": "_STR:1_", "outfile": "_STR:2_"}, "var_map": {}}
{"src": ["sort", "a", "list", "VAR_0", "by", "length", "of", "value", "in", "tuple"], "token": ["VAR_0", ".", "sort", "(", "key", "=", "lambda", "t", ":", "len", "(", "t", "[", "1", "]", ")", ",", "reverse", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "l.sort(key=lambda t: len(t[1]), reverse=True)", "decano_code": "l.sort(key=lambda t: len(t[1]), reverse=True)", "raw_code": "l.sort(key=lambda t: len(t[1]), reverse=True)", "str_map": {}, "var_map": {"l": "VAR_0"}}
{"src": ["split", "string", "VAR_0", "by", "words", "that", "ends", "with", "_STR:0_"], "token": ["re", ".", "findall", "(", "'\\\\b(\\\\w+)d\\\\b'", ",", "VAR_0", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.findall('\\\\b(\\\\w+)d\\\\b', s)", "decano_code": "re.findall('\\\\b(\\\\w+)d\\\\b', s)", "raw_code": "re.findall('\\\\b(\\\\w+)d\\\\b', s)", "str_map": {"d": "_STR:0_"}, "var_map": {"s": "VAR_0"}}
{"src": ["return", "VAR_0", "if", "string", "VAR_0", "contains", "regex", "VAR_0"], "token": ["bool", "(", "re", ".", "search", "(", "'ba[rzd]'", ",", "'foobarrrr'", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "bool(re.search('ba[rzd]', 'foobarrrr'))", "decano_code": "bool(re.search('ba[rzd]', 'foobarrrr'))", "raw_code": "bool(re.search('ba[rzd]', 'foobarrrr'))", "str_map": {}, "var_map": {"True": "VAR_0", "foobarrrr": "VAR_0", "ba[rzd]": "VAR_0"}}
{"src": ["removing", "duplicates", "in", "list", "VAR_0"], "token": ["list", "(", "set", "(", "VAR_0", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "list(set(t))", "decano_code": "list(set(t))", "raw_code": "list(set(t))", "str_map": {}, "var_map": {"t": "VAR_0"}}
{"src": ["removing", "duplicates", "in", "list", "VAR_0"], "token": ["list", "(", "set", "(", "VAR_0", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "list(set(source_list))", "decano_code": "list(set(source_list))", "raw_code": "list(set(source_list))", "str_map": {}, "var_map": {"source_list": "VAR_0"}}
{"src": ["removing", "duplicates", "in", "list", "VAR_0"], "token": ["list", "(", "OrderedDict", ".", "fromkeys", "(", "'abracadabra'", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "list(OrderedDict.fromkeys('abracadabra'))", "decano_code": "list(OrderedDict.fromkeys('abracadabra'))", "raw_code": "list(OrderedDict.fromkeys('abracadabra'))", "str_map": {}, "var_map": {"abracadabra": "VAR_0"}}
{"src": ["convert", "array", "VAR_0", "into", "a", "list"], "token": ["numpy", ".", "array", "(", "VAR_0", ")", ".", "reshape", "(", "-", "1", ")", ".", "tolist", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "numpy.array(a).reshape(-1).tolist()", "decano_code": "numpy.array(a).reshape(-1).tolist()", "raw_code": "numpy.array(a).reshape(-1).tolist()", "str_map": {}, "var_map": {"a": "VAR_0"}}
{"src": ["convert", "the", "first", "row", "of", "numpy", "matrix", "VAR_0", "to", "a", "list"], "token": ["numpy", ".", "array", "(", "VAR_0", ")", "[", "0", "]", ".", "tolist", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "numpy.array(a)[0].tolist()", "decano_code": "numpy.array(a)[0].tolist()", "raw_code": "numpy.array(a)[0].tolist()", "str_map": {}, "var_map": {"a": "VAR_0"}}
{"src": ["in", "VAR_0", ",", "get", "the", "content", "of", "the", "sibling", "of", "the", "VAR_0", "tag", "with", "text", "content", "VAR_0"], "token": ["print", "(", "VAR_0", ".", "find", "(", "text", "=", "'Address:'", ")", ".", "findNext", "(", "'td'", ")", ".", "contents", "[", "0", "]", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "print(soup.find(text='Address:').findNext('td').contents[0])", "decano_code": "print(soup.find(text='Address:').findNext('td').contents[0])", "raw_code": "print(soup.find(text='Address:').findNext('td').contents[0])", "str_map": {}, "var_map": {"soup": "VAR_0", "td": "VAR_0", "Address:": "VAR_0"}}
{"src": ["convert", "elements", "of", "each", "tuple", "in", "list", "VAR_0", "into", "a", "string", "separated", "by", "character", "VAR_0"], "token": ["\"\"\" \"\"\"", ".", "join", "(", "[", "(", "'%d@%d'", "%", "t", ")", "for", "t", "in", "VAR_0", "]", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "\"\"\" \"\"\".join([('%d@%d' % t) for t in l])", "decano_code": "\"\"\" \"\"\".join([('%d@%d' % t) for t in l])", "raw_code": "\"\"\" \"\"\".join([('%d@%d' % t) for t in l])", "str_map": {}, "var_map": {"l": "VAR_0", "@": "VAR_0"}}
{"src": ["convert", "each", "tuple", "in", "list", "VAR_0", "to", "a", "string", "with", "_STR:0_", "separating", "the", "tuples", "'", "elements"], "token": ["\"\"\" \"\"\"", ".", "join", "(", "[", "(", "'%d@%d'", "%", "(", "t", "[", "0", "]", ",", "t", "[", "1", "]", ")", ")", "for", "t", "in", "VAR_0", "]", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP", "OP", "STRING", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "\"\"\" \"\"\".join([('%d@%d' % (t[0], t[1])) for t in l])", "decano_code": "\"\"\" \"\"\".join([('%d@%d' % (t[0], t[1])) for t in l])", "raw_code": "\"\"\" \"\"\".join([('%d@%d' % (t[0], t[1])) for t in l])", "str_map": {"@": "_STR:0_"}, "var_map": {"l": "VAR_0"}}
{"src": ["get", "the", "html", "from", "the", "current", "web", "page", "of", "a", "selenium", "driver"], "token": ["driver", ".", "execute_script", "(", "'return document.documentElement.outerHTML;'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "driver.execute_script('return document.documentElement.outerHTML;')", "decano_code": "driver.execute_script('return document.documentElement.outerHTML;')", "raw_code": "driver.execute_script('return document.documentElement.outerHTML;')", "str_map": {}, "var_map": {}}
{"src": ["get", "all", "matches", "with", "regex", "pattern", "VAR_0", "in", "list", "of", "string", "VAR_0"], "token": ["[", "i", "for", "i", "in", "VAR_0", "if", "re", ".", "search", "(", "'\\\\d+[xX]'", ",", "i", ")", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP"], "cano_code": "[i for i in teststr if re.search('\\\\d+[xX]', i)]", "decano_code": "[i for i in teststr if re.search('\\\\d+[xX]', i)]", "raw_code": "[i for i in teststr if re.search('\\\\d+[xX]', i)]", "str_map": {}, "var_map": {"\\\\d+[xX]": "VAR_0", "teststr": "VAR_0"}}
{"src": ["select", "values", "from", "column", "_STR:0_", "for", "which", "corresponding", "values", "in", "column", "_STR:1_", "will", "be", "greater", "than", "50", ",", "and", "in", "column", "_STR:2_", "-", "equal", "900", "in", "dataframe", "VAR_0"], "token": ["VAR_0", "[", "\" _STR:0_ \"", "]", "[", "(", "VAR_0", "[", "\" _STR:1_ \"", "]", ">", "50", ")", "&", "(", "VAR_0", "[", "\" _STR:2_ \"", "]", "==", "900", ")", "]"], "type": ["NAME", "OP", "STRING", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "df[\" _STR:0_ \"][(df[\" _STR:1_ \"] > 50) & (df[\" _STR:2_ \"] == 900)]", "decano_code": "df[\" _STR:0_ \"][(df[\" _STR:1_ \"] > 50) & (df[\" _STR:2_ \"] == 900)]", "raw_code": "df['A'][(df['B'] > 50) & (df['C'] == 900)]", "str_map": {"A": "_STR:0_", "B": "_STR:1_", "C": "_STR:2_"}, "var_map": {"df": "VAR_0"}}
{"src": ["sort", "dictionary", "VAR_0", "in", "ascending", "order", "based", "on", "its", "keys", "and", "items"], "token": ["sorted", "(", "VAR_0", ".", "items", "(", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "sorted(o.items())", "decano_code": "sorted(o.items())", "raw_code": "sorted(o.items())", "str_map": {}, "var_map": {"o": "VAR_0"}}
{"src": ["get", "sorted", "list", "of", "keys", "of", "dict", "VAR_0"], "token": ["sorted", "(", "VAR_0", ")"], "type": ["KEYWORD", "OP", "NAME", "OP"], "cano_code": "sorted(d)", "decano_code": "sorted(d)", "raw_code": "sorted(d)", "str_map": {}, "var_map": {"d": "VAR_0"}}
{"src": ["how", "to", "sort", "dictionaries", "by", "keys", "in", "python"], "token": ["sorted", "(", "d", ".", "items", "(", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "sorted(d.items())", "decano_code": "sorted(d.items())", "raw_code": "sorted(d.items())", "str_map": {}, "var_map": {}}
{"src": ["convert", "string", "_STR:0_", "into", "integer"], "token": ["int", "(", "\" _STR:0_ \"", ")"], "type": ["KEYWORD", "OP", "STRING", "OP"], "cano_code": "int(\" _STR:0_ \")", "decano_code": "int(\" _STR:0_ \")", "raw_code": "int('1')", "str_map": {"1": "_STR:0_"}, "var_map": {}}
{"src": ["function", "to", "convert", "strings", "into", "integers"], "token": ["int", "(", ")"], "type": ["KEYWORD", "OP", "OP"], "cano_code": "int()", "decano_code": "int()", "raw_code": "int()", "str_map": {}, "var_map": {}}
{"src": ["convert", "items", "in", "VAR_0", "to", "integers"], "token": ["T2", "=", "[", "map", "(", "int", ",", "x", ")", "for", "x", "in", "VAR_0", "]"], "type": ["NAME", "OP", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "T2 = [map(int, x) for x in T1]", "decano_code": "T2 = [map(int, x) for x in T1]", "raw_code": "T2 = [map(int, x) for x in T1]", "str_map": {}, "var_map": {"T1": "VAR_0"}}
{"src": ["call", "a", "shell", "script", "VAR_0", "using", "subprocess"], "token": ["subprocess", ".", "call", "(", "[", "'./test.sh'", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "OP"], "cano_code": "subprocess.call(['./test.sh'])", "decano_code": "subprocess.call(['./test.sh'])", "raw_code": "subprocess.call(['./test.sh'])", "str_map": {}, "var_map": {"./test.sh": "VAR_0"}}
{"src": ["call", "a", "shell", "script", "VAR_0", "using", "subprocess"], "token": ["subprocess", ".", "call", "(", "[", "'notepad'", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "OP"], "cano_code": "subprocess.call(['notepad'])", "decano_code": "subprocess.call(['notepad'])", "raw_code": "subprocess.call(['notepad'])", "str_map": {}, "var_map": {"notepad": "VAR_0"}}
{"src": ["combine", "lists", "VAR_0", "and", "VAR_0", "by", "alternating", "their", "elements"], "token": ["[", "val", "for", "pair", "in", "zip", "(", "VAR_0", ",", "VAR_0", ")", "for", "val", "in", "pair", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[val for pair in zip(l1, l2) for val in pair]", "decano_code": "[val for pair in zip(l1, l2) for val in pair]", "raw_code": "[val for pair in zip(l1, l2) for val in pair]", "str_map": {}, "var_map": {"l1": "VAR_0", "l2": "VAR_0"}}
{"src": ["encode", "string", "_STR:0_"], "token": ["encoded", "=", "base64", ".", "b64encode", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "encoded = base64.b64encode(\" _STR:0_ \")", "decano_code": "encoded = base64.b64encode(\" _STR:0_ \")", "raw_code": "encoded = base64.b64encode('data to be encoded')", "str_map": {"data to be encoded": "_STR:0_"}, "var_map": {}}
{"src": ["encode", "a", "string", "VAR_0", "to", "VAR_0", "encoding"], "token": ["encoded", "=", "'data to be encoded'", ".", "encode", "(", "'ascii'", ")"], "type": ["NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "encoded = 'data to be encoded'.encode('ascii')", "decano_code": "encoded = 'data to be encoded'.encode('ascii')", "raw_code": "encoded = 'data to be encoded'.encode('ascii')", "str_map": {}, "var_map": {"data to be encoded": "VAR_0", "ascii": "VAR_0"}}
{"src": ["parse", "tab-delimited", "CSV", "file", "_STR:0_", "into", "a", "list"], "token": ["lol", "=", "list", "(", "csv", ".", "reader", "(", "open", "(", "\" _STR:0_ \"", ",", "'rb'", ")", ",", "delimiter", "=", "'\\t'", ")", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "lol = list(csv.reader(open(\" _STR:0_ \", 'rb'), delimiter='\\t'))", "decano_code": "lol = list(csv.reader(open(\" _STR:0_ \", 'rb'), delimiter='\\t'))", "raw_code": "lol = list(csv.reader(open('text.txt', 'rb'), delimiter='\\t'))", "str_map": {"text.txt": "_STR:0_"}, "var_map": {}}
{"src": ["get", "attribute", "VAR_0", "of", "object", "VAR_0"], "token": ["getattr", "(", "VAR_0", ",", "VAR_0", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "getattr(my_object, my_str)", "decano_code": "getattr(my_object, my_str)", "raw_code": "getattr(my_object, my_str)", "str_map": {}, "var_map": {"my_str": "VAR_0", "my_object": "VAR_0"}}
{"src": ["group", "a", "list", "of", "dicts", "VAR_0", "into", "one", "dict", "by", "key"], "token": ["print", "(", "dict", "(", "zip", "(", "VAR_0", "[", "0", "]", ",", "zip", "(", "*", "[", "list", "(", "d", ".", "values", "(", ")", ")", "for", "d", "in", "VAR_0", "]", ")", ")", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "KEYWORD", "OP", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP", "OP", "OP", "OP"], "cano_code": "print(dict(zip(LD[0], zip(*[list(d.values()) for d in LD]))))", "decano_code": "print(dict(zip(LD[0], zip(*[list(d.values()) for d in LD]))))", "raw_code": "print(dict(zip(LD[0], zip(*[list(d.values()) for d in LD]))))", "str_map": {}, "var_map": {"LD": "VAR_0"}}
{"src": ["how", "do", "i", "sum", "the", "first", "value", "in", "each", "tuple", "in", "a", "list", "of", "tuples", "in", "python", "?"], "token": ["sum", "(", "[", "pair", "[", "0", "]", "for", "pair", "in", "list_of_pairs", "]", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "sum([pair[0] for pair in list_of_pairs])", "decano_code": "sum([pair[0] for pair in list_of_pairs])", "raw_code": "sum([pair[0] for pair in list_of_pairs])", "str_map": {}, "var_map": {}}
{"src": ["convert", "unicode", "string", "u\"{'code1':1,'code2':1}", "\"", "into", "dictionary"], "token": ["d", "=", "ast", ".", "literal_eval", "(", "\"{'code1':1,'code2':1}\"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "d = ast.literal_eval(\"{'code1':1,'code2':1}\")", "decano_code": "d = ast.literal_eval(\"{'code1':1,'code2':1}\")", "raw_code": "d = ast.literal_eval(\"{'code1':1,'code2':1}\")", "str_map": {}, "var_map": {}}
{"src": ["find", "all", "words", "in", "a", "string", "VAR_0", "that", "start", "with", "the", "VAR_0", "sign"], "token": ["[", "word", "for", "word", "in", "VAR_0", ".", "split", "(", ")", "if", "word", ".", "startswith", "(", "'$'", ")", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "[word for word in mystring.split() if word.startswith('$')]", "decano_code": "[word for word in mystring.split() if word.startswith('$')]", "raw_code": "[word for word in mystring.split() if word.startswith('$')]", "str_map": {}, "var_map": {"mystring": "VAR_0", "$": "VAR_0"}}
{"src": ["remove", "any", "url", "within", "string", "VAR_0"], "token": ["VAR_0", "=", "re", ".", "sub", "(", "'^https?:\\\\/\\\\/.*[\\\\r\\\\n]*'", ",", "''", ",", "VAR_0", ",", "flags", "=", "re", ".", "MULTILINE", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "text = re.sub('^https?:\\\\/\\\\/.*[\\\\r\\\\n]*', '', text, flags=re.MULTILINE)", "decano_code": "text = re.sub('^https?:\\\\/\\\\/.*[\\\\r\\\\n]*', '', text, flags=re.MULTILINE)", "raw_code": "text = re.sub('^https?:\\\\/\\\\/.*[\\\\r\\\\n]*', '', text, flags=re.MULTILINE)", "str_map": {}, "var_map": {"text": "VAR_0"}}
{"src": ["replace", "all", "elements", "in", "array", "VAR_0", "that", "are", "not", "present", "in", "array", "VAR_0", "with", "zeros"], "token": ["np", ".", "where", "(", "np", ".", "in1d", "(", "VAR_0", ",", "[", "1", ",", "3", ",", "4", "]", ")", ".", "reshape", "(", "VAR_0", ".", "shape", ")", ",", "VAR_0", ",", "0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)", "decano_code": "np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)", "raw_code": "np.where(np.in1d(A, [1, 3, 4]).reshape(A.shape), A, 0)", "str_map": {}, "var_map": {"A": "VAR_0", "[1, 3, 4]": "VAR_0"}}
{"src": ["calculate", "mean", "across", "dimension", "in", "a", "2d", "array", "VAR_0"], "token": ["np", ".", "mean", "(", "VAR_0", ",", "axis", "=", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "np.mean(a, axis=1)", "decano_code": "np.mean(a, axis=1)", "raw_code": "np.mean(a, axis=1)", "str_map": {}, "var_map": {"a": "VAR_0"}}
{"src": ["running", "r", "script", "_STR:0_", "from", "python"], "token": ["subprocess", ".", "call", "(", "[", "'/usr/bin/Rscript'", ",", "'--vanilla'", ",", "\" _STR:0_ \"", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "subprocess.call(['/usr/bin/Rscript', '--vanilla', \" _STR:0_ \"])", "decano_code": "subprocess.call(['/usr/bin/Rscript', '--vanilla', \" _STR:0_ \"])", "raw_code": "subprocess.call(['/usr/bin/Rscript', '--vanilla', '/pathto/MyrScript.r'])", "str_map": {"/pathto/MyrScript.r": "_STR:0_"}, "var_map": {}}
{"src": ["run", "r", "script", "_STR:0_"], "token": ["subprocess", ".", "call", "(", "\" _STR:0_ \"", ",", "shell", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "subprocess.call(\" _STR:0_ \", shell=True)", "decano_code": "subprocess.call(\" _STR:0_ \", shell=True)", "raw_code": "subprocess.call('/usr/bin/Rscript --vanilla /pathto/MyrScript.r', shell=True)", "str_map": {"/usr/bin/Rscript --vanilla /pathto/MyrScript.r": "_STR:0_"}, "var_map": {}}
{"src": ["add", "a", "header", "to", "a", "csv", "file"], "token": ["writer", ".", "writeheader", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "writer.writeheader()", "decano_code": "writer.writeheader()", "raw_code": "writer.writeheader()", "str_map": {}, "var_map": {}}
{"src": ["replacing", "nan", "in", "the", "dataframe", "VAR_0", "with", "row", "average"], "token": ["VAR_0", ".", "fillna", "(", "VAR_0", ".", "mean", "(", "axis", "=", "1", ")", ",", "axis", "=", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "df.fillna(df.mean(axis=1), axis=1)", "decano_code": "df.fillna(df.mean(axis=1), axis=1)", "raw_code": "df.fillna(df.mean(axis=1), axis=1)", "str_map": {}, "var_map": {"df": "VAR_0"}}
{"src": ["convert", "unix", "timestamp", "_STR:0_", "to", "formatted", "string", "_STR:1_"], "token": ["time", ".", "strftime", "(", "\" _STR:1_ \"", ",", "time", ".", "localtime", "(", "1347517370", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "time.strftime(\" _STR:1_ \", time.localtime(1347517370))", "decano_code": "time.strftime(\" _STR:1_ \", time.localtime(1347517370))", "raw_code": "time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(1347517370))", "str_map": {"1347517370": "_STR:0_", "%Y-%m-%d %H:%M:%S": "_STR:1_"}, "var_map": {}}
{"src": ["call", "a", "base", "class", "'", "s", "class", "method", "VAR_0", "from", "derived", "class", "VAR_0"], "token": ["super", "(", "VAR_0", ",", "cls", ")", ".", "VAR_0", "(", "a", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "super(Derived, cls).do(a)", "decano_code": "super(Derived, cls).do(a)", "raw_code": "super(Derived, cls).do(a)", "str_map": {}, "var_map": {"do": "VAR_0", "Derived": "VAR_0"}}
{"src": ["selecting", "rows", "in", "numpy", "ndarray", "_STR:0_", ",", "where", "the", "value", "in", "the", "first", "column", "is", "0", "and", "value", "in", "the", "second", "column", "is", "1"], "token": ["a", "[", "np", ".", "where", "(", "(", "a", "[", ":", ",", "(", "0", ")", "]", "==", "0", ")", "*", "(", "a", "[", ":", ",", "(", "1", ")", "]", "==", "1", ")", ")", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]", "decano_code": "a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]", "raw_code": "a[np.where((a[:, (0)] == 0) * (a[:, (1)] == 1))]", "str_map": {"a": "_STR:0_"}, "var_map": {}}
{"src": ["separate", "words", "delimited", "by", "one", "or", "more", "spaces", "into", "a", "list"], "token": ["re", ".", "split", "(", "' +'", ",", "'hello world sample text'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.split(' +', 'hello world sample text')", "decano_code": "re.split(' +', 'hello world sample text')", "raw_code": "re.split(' +', 'hello world sample text')", "str_map": {}, "var_map": {}}
{"src": ["length", "of", "longest", "element", "in", "list", "VAR_0"], "token": ["len", "(", "max", "(", "VAR_0", ",", "key", "=", "len", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "OP"], "cano_code": "len(max(words, key=len))", "decano_code": "len(max(words, key=len))", "raw_code": "len(max(words, key=len))", "str_map": {}, "var_map": {"words": "VAR_0"}}
{"src": ["get", "the", "value", "associated", "with", "unicode", "key", "_STR:0_", "of", "first", "dictionary", "in", "list", "VAR_0"], "token": ["VAR_0", "[", "0", "]", "[", "\" _STR:0_ \"", "]"], "type": ["NAME", "OP", "NUMBER", "OP", "OP", "STRING", "OP"], "cano_code": "result[0][\" _STR:0_ \"]", "decano_code": "result[0][\" _STR:0_ \"]", "raw_code": "result[0]['from_user']", "str_map": {"from_user": "_STR:0_"}, "var_map": {"result": "VAR_0"}}
{"src": ["retrieve", "each", "line", "from", "a", "file", "_STR:0_", "as", "a", "list"], "token": ["[", "line", ".", "split", "(", ")", "for", "line", "in", "open", "(", "\" _STR:0_ \"", ")", "]"], "type": ["OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "STRING", "OP", "OP"], "cano_code": "[line.split() for line in open(\" _STR:0_ \")]", "decano_code": "[line.split() for line in open(\" _STR:0_ \")]", "raw_code": "[line.split() for line in open('File.txt')]", "str_map": {"File.txt": "_STR:0_"}, "var_map": {}}
{"src": ["swap", "keys", "with", "values", "in", "a", "dictionary", "VAR_0"], "token": ["res", "=", "dict", "(", "(", "v", ",", "k", ")", "for", "k", ",", "v", "in", "VAR_0", ".", "items", "(", ")", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "res = dict((v, k) for k, v in a.items())", "decano_code": "res = dict((v, k) for k, v in a.items())", "raw_code": "res = dict((v, k) for k, v in a.items())", "str_map": {}, "var_map": {"a": "VAR_0"}}
{"src": ["open", "a", "file", "VAR_0", "[", "path/to/FILE_NAME", ".", "ext", "]", "in", "write", "mode"], "token": ["new_file", "=", "open", "(", "'path/to/FILE_NAME.ext'", ",", "'w'", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "new_file = open('path/to/FILE_NAME.ext', 'w')", "decano_code": "new_file = open('path/to/FILE_NAME.ext', 'w')", "raw_code": "new_file = open('path/to/FILE_NAME.ext', 'w')", "str_map": {}, "var_map": {"path/to/FILE_NAME.ext": "VAR_0"}}
{"src": ["how", "to", "count", "distinct", "values", "in", "a", "column", "of", "a", "pandas", "group", "by", "object", "?"], "token": ["df", ".", "groupby", "(", "[", "'col1'", ",", "'col2'", "]", ")", "[", "'col3'", "]", ".", "nunique", "(", ")", ".", "reset_index", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "df.groupby(['col1', 'col2'])['col3'].nunique().reset_index()", "decano_code": "df.groupby(['col1', 'col2'])['col3'].nunique().reset_index()", "raw_code": "df.groupby(['col1', 'col2'])['col3'].nunique().reset_index()", "str_map": {}, "var_map": {}}
{"src": ["check", "if", "any", "key", "in", "the", "dictionary", "VAR_0", "starts", "with", "the", "string", "VAR_0"], "token": ["any", "(", "key", ".", "startswith", "(", "'EMP$$'", ")", "for", "key", "in", "VAR_0", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "any(key.startswith('EMP$$') for key in dict1)", "decano_code": "any(key.startswith('EMP$$') for key in dict1)", "raw_code": "any(key.startswith('EMP$$') for key in dict1)", "str_map": {}, "var_map": {"dict1": "VAR_0", "EMP$$": "VAR_0"}}
{"src": ["create", "list", "of", "values", "from", "dictionary", "VAR_0", "that", "have", "a", "key", "that", "starts", "with", "_STR:0_"], "token": ["[", "value", "for", "key", ",", "value", "in", "list", "(", "VAR_0", ".", "items", "(", ")", ")", "if", "key", ".", "startswith", "(", "\" _STR:0_ \"", ")", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "[value for key, value in list(dict1.items()) if key.startswith(\" _STR:0_ \")]", "decano_code": "[value for key, value in list(dict1.items()) if key.startswith(\" _STR:0_ \")]", "raw_code": "[value for key, value in list(dict1.items()) if key.startswith('EMP$$')]", "str_map": {"EMP$$": "_STR:0_"}, "var_map": {"dict1": "VAR_0"}}
{"src": ["convert", "a", "pandas", "series", "VAR_0", "into", "a", "pandas", "dataframe", "VAR_0", "with", "columns", "VAR_0", "and", "VAR_0"], "token": ["pd", ".", "DataFrame", "(", "{", "'email'", ":", "VAR_0", ".", "index", ",", "'list'", ":", "VAR_0", ".", "values", "}", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "pd.DataFrame({'email': sf.index, 'list': sf.values})", "decano_code": "pd.DataFrame({'email': sf.index, 'list': sf.values})", "raw_code": "pd.DataFrame({'email': sf.index, 'list': sf.values})", "str_map": {}, "var_map": {"sf": "VAR_0", "df": "VAR_0", "email": "VAR_0", "list": "VAR_0"}}
{"src": ["print", "elements", "of", "list", "VAR_0", "seperated", "by", "tabs", "VAR_0"], "token": ["print", "(", "'\\t'", ".", "join", "(", "map", "(", "str", ",", "list", ")", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "OP", "OP"], "cano_code": "print('\\t'.join(map(str, list)))", "decano_code": "print('\\t'.join(map(str, list)))", "raw_code": "print('\\t'.join(map(str, list)))", "str_map": {}, "var_map": {"list": "VAR_0", "\\t": "VAR_0"}}
{"src": ["print", "unicode", "string", "_STR:0_", "with", "utf-8"], "token": ["print", "(", "\" _STR:0_ \"", ".", "encode", "(", "'raw_unicode_escape'", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "print(\" _STR:0_ \".encode('raw_unicode_escape'))", "decano_code": "print(\" _STR:0_ \".encode('raw_unicode_escape'))", "raw_code": "print('\\xd0\\xbf\\xd1\\x80\\xd0\\xb8'.encode('raw_unicode_escape'))", "str_map": {"\u00d0\u00bf\u00d1\u0080\u00d0\u00b8": "_STR:0_"}, "var_map": {}}
{"src": ["encode", "a", "latin", "character", "in", "string", "VAR_0", "properly"], "token": ["'Sopet\\xc3\\xb3n'", ".", "encode", "(", "'latin-1'", ")", ".", "decode", "(", "'utf-8'", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "'Sopet\\xc3\\xb3n'.encode('latin-1').decode('utf-8')", "decano_code": "'Sopet\\xc3\\xb3n'.encode('latin-1').decode('utf-8')", "raw_code": "'Sopet\\xc3\\xb3n'.encode('latin-1').decode('utf-8')", "str_map": {}, "var_map": {"Sopet\\xc3\\xb3n": "VAR_0"}}
{"src": ["resized", "image", "VAR_0", "to", "width", ",", "height", "of", "VAR_0", "with", "filter", "of", "VAR_0"], "token": ["VAR_0", "=", "VAR_0", ".", "resize", "(", "(", "x", ",", "y", ")", ",", "Image", ".", "VAR_0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "image = image.resize((x, y), Image.ANTIALIAS)", "decano_code": "image = image.resize((x, y), Image.ANTIALIAS)", "raw_code": "image = image.resize((x, y), Image.ANTIALIAS)", "str_map": {}, "var_map": {"image": "VAR_0", "(x, y)": "VAR_0", "ANTIALIAS": "VAR_0"}}
{"src": ["regex", ",", "find", "_STR:0_", "s", "only", "in", "the", "middle", "of", "string", "VAR_0"], "token": ["re", ".", "findall", "(", "'n(?<=[^n]n)n+(?=[^n])(?i)'", ",", "VAR_0", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.findall('n(?<=[^n]n)n+(?=[^n])(?i)', s)", "decano_code": "re.findall('n(?<=[^n]n)n+(?=[^n])(?i)', s)", "raw_code": "re.findall('n(?<=[^n]n)n+(?=[^n])(?i)', s)", "str_map": {"n": "_STR:0_"}, "var_map": {"s": "VAR_0"}}
{"src": ["display", "the", "float", "VAR_0", "as", "a", "percentage"], "token": ["print", "(", "'{0:.0f}%'", ".", "format", "(", "1.0", "/", "3", "*", "100", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "print('{0:.0f}%'.format(1.0 / 3 * 100))", "decano_code": "print('{0:.0f}%'.format(1.0 / 3 * 100))", "raw_code": "print('{0:.0f}%'.format(1.0 / 3 * 100))", "str_map": {}, "var_map": {"1/3*100": "VAR_0"}}
{"src": ["sort", "a", "list", "of", "dictionary", "VAR_0", "by", "the", "key", "VAR_0"], "token": ["VAR_0", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "'title'", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "mylist.sort(key=lambda x: x['title'])", "decano_code": "mylist.sort(key=lambda x: x['title'])", "raw_code": "mylist.sort(key=lambda x: x['title'])", "str_map": {}, "var_map": {"mylist": "VAR_0", "title": "VAR_0"}}
{"src": ["sort", "a", "list", "VAR_0", "of", "dicts", "by", "dict", "value", "_STR:0_"], "token": ["VAR_0", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "\" _STR:0_ \"", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "l.sort(key=lambda x: x[\" _STR:0_ \"])", "decano_code": "l.sort(key=lambda x: x[\" _STR:0_ \"])", "raw_code": "l.sort(key=lambda x: x['title'])", "str_map": {"title": "_STR:0_"}, "var_map": {"l": "VAR_0"}}
{"src": ["sort", "a", "list", "of", "dictionaries", "by", "the", "value", "of", "keys", "_STR:0_", ",", "_STR:1_", ",", "_STR:2_", "in", "ascending", "order", "."], "token": ["l", ".", "sort", "(", "key", "=", "lambda", "x", ":", "(", "x", "[", "\" _STR:0_ \"", "]", ",", "x", "[", "\" _STR:1_ \"", "]", ",", "x", "[", "\" _STR:2_ \"", "]", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "l.sort(key=lambda x: (x[\" _STR:0_ \"], x[\" _STR:1_ \"], x[\" _STR:2_ \"]))", "decano_code": "l.sort(key=lambda x: (x[\" _STR:0_ \"], x[\" _STR:1_ \"], x[\" _STR:2_ \"]))", "raw_code": "l.sort(key=lambda x: (x['title'], x['title_url'], x['id']))", "str_map": {"title": "_STR:0_", "title_url": "_STR:1_", "id": "_STR:2_"}, "var_map": {}}
{"src": ["find", "10", "largest", "differences", "between", "each", "respective", "elements", "of", "list", "VAR_0", "and", "list", "VAR_0"], "token": ["heapq", ".", "nlargest", "(", "10", ",", "range", "(", "len", "(", "VAR_0", ")", ")", ",", "key", "=", "lambda", "i", ":", "abs", "(", "VAR_0", "[", "i", "]", "-", "VAR_0", "[", "i", "]", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))", "decano_code": "heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))", "raw_code": "heapq.nlargest(10, range(len(l1)), key=lambda i: abs(l1[i] - l2[i]))", "str_map": {}, "var_map": {"l1": "VAR_0", "l2": "VAR_0"}}
{"src": ["BeautifulSoup", "find", "all", "_STR:0_", "elements", "in", "HTML", "string", "VAR_0", "with", "class", "of", "_STR:1_"], "token": ["VAR_0", ".", "find_all", "(", "\" _STR:0_ \"", ",", "{", "'class'", ":", "\" _STR:1_ \"", "}", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "soup.find_all(\" _STR:0_ \", {'class': \" _STR:1_ \"})", "decano_code": "soup.find_all(\" _STR:0_ \", {'class': \" _STR:1_ \"})", "raw_code": "soup.find_all('span', {'class': 'starGryB sp'})", "str_map": {"span": "_STR:0_", "starGryB sp": "_STR:1_"}, "var_map": {"soup": "VAR_0"}}
{"src": ["write", "records", "in", "dataframe", "VAR_0", "to", "table", "_STR:0_", "in", "schema", "_STR:1_"], "token": ["VAR_0", ".", "to_sql", "(", "\" _STR:0_ \"", ",", "engine", ",", "schema", "=", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df.to_sql(\" _STR:0_ \", engine, schema=\" _STR:1_ \")", "decano_code": "df.to_sql(\" _STR:0_ \", engine, schema=\" _STR:1_ \")", "raw_code": "df.to_sql('test', engine, schema='a_schema')", "str_map": {"test": "_STR:0_", "a_schema": "_STR:1_"}, "var_map": {"df": "VAR_0"}}
{"src": ["extract", "brackets", "from", "string", "VAR_0"], "token": ["brackets", "=", "re", ".", "sub", "(", "'[^(){}[\\\\]]'", ",", "''", ",", "VAR_0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "brackets = re.sub('[^(){}[\\\\]]', '', s)", "decano_code": "brackets = re.sub('[^(){}[\\\\]]', '', s)", "raw_code": "brackets = re.sub('[^(){}[\\\\]]', '', s)", "str_map": {}, "var_map": {"s": "VAR_0"}}
{"src": ["remove", "duplicate", "elements", "from", "list", "_STR:0_"], "token": ["list", "(", "dict", "(", "(", "x", "[", "0", "]", ",", "x", ")", "for", "x", "in", "L", ")", ".", "values", "(", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "list(dict((x[0], x) for x in L).values())", "decano_code": "list(dict((x[0], x) for x in L).values())", "raw_code": "list(dict((x[0], x) for x in L).values())", "str_map": {"L": "_STR:0_"}, "var_map": {}}
{"src": ["read", "a", "file", "VAR_0", "without", "newlines"], "token": ["[", "line", ".", "rstrip", "(", "'\\n'", ")", "for", "line", "in", "VAR_0", "]"], "type": ["OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[line.rstrip('\\n') for line in file]", "decano_code": "[line.rstrip('\\n') for line in file]", "raw_code": "[line.rstrip('\\n') for line in file]", "str_map": {}, "var_map": {"file": "VAR_0"}}
{"src": ["get", "the", "position", "of", "item", "1", "in", "VAR_0"], "token": ["[", "i", "for", "(", "i", ",", "x", ")", "in", "enumerate", "(", "VAR_0", ")", "if", "(", "x", "==", "1", ")", "]"], "type": ["OP", "NAME", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "[i for (i, x) in enumerate(testlist) if (x == 1)]", "decano_code": "[i for (i, x) in enumerate(testlist) if (x == 1)]", "raw_code": "[i for (i, x) in enumerate(testlist) if (x == 1)]", "str_map": {}, "var_map": {"testlist": "VAR_0"}}
{"src": ["get", "the", "position", "of", "item", "1", "in", "VAR_0"], "token": ["[", "i", "for", "(", "i", ",", "x", ")", "in", "enumerate", "(", "VAR_0", ")", "if", "(", "x", "==", "1", ")", "]"], "type": ["OP", "NAME", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "[i for (i, x) in enumerate(testlist) if (x == 1)]", "decano_code": "[i for (i, x) in enumerate(testlist) if (x == 1)]", "raw_code": "[i for (i, x) in enumerate(testlist) if (x == 1)]", "str_map": {}, "var_map": {"testlist": "VAR_0"}}
{"src": ["get", "the", "position", "of", "item", "1", "in", "VAR_0"], "token": ["for", "i", "in", "[", "i", "for", "(", "i", ",", "x", ")", "in", "enumerate", "(", "VAR_0", ")", "if", "(", "x", "==", "1", ")", "]", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "NAME", "KEYWORD", "OP", "NAME", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "for i in [i for (i, x) in enumerate(testlist) if (x == 1)]:\n    pass", "decano_code": "for i in [i for (i, x) in enumerate(testlist) if (x == 1)]:\n    pass", "raw_code": "for i in [i for (i, x) in enumerate(testlist) if (x == 1)]:\n    pass", "str_map": {}, "var_map": {"testlist": "VAR_0"}}
{"src": ["get", "the", "position", "of", "item", "1", "in", "VAR_0"], "token": ["for", "i", "in", "(", "i", "for", "(", "i", ",", "x", ")", "in", "enumerate", "(", "VAR_0", ")", "if", "(", "x", "==", "1", ")", ")", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "NAME", "KEYWORD", "OP", "NAME", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "for i in (i for (i, x) in enumerate(testlist) if (x == 1)):\n    pass", "decano_code": "for i in (i for (i, x) in enumerate(testlist) if (x == 1)):\n    pass", "raw_code": "for i in (i for (i, x) in enumerate(testlist) if (x == 1)):\n    pass", "str_map": {}, "var_map": {"testlist": "VAR_0"}}
{"src": ["get", "the", "position", "of", "item", "1", "in", "VAR_0"], "token": ["gen", "=", "(", "i", "for", "(", "i", ",", "x", ")", "in", "enumerate", "(", "VAR_0", ")", "if", "(", "x", "==", "1", ")", ")", "\n", "for", "i", "in", "gen", ":", "\n", "    ", "pass", ""], "type": ["NAME", "OP", "OP", "NAME", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NEWLINE", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "gen = (i for (i, x) in enumerate(testlist) if (x == 1))\nfor i in gen:\n    pass", "decano_code": "gen = (i for (i, x) in enumerate(testlist) if (x == 1))\nfor i in gen:\n    pass", "raw_code": "gen = (i for (i, x) in enumerate(testlist) if (x == 1))\nfor i in gen:\n    pass", "str_map": {}, "var_map": {"testlist": "VAR_0"}}
{"src": ["get", "the", "position", "of", "item", "VAR_0", "in", "list", "VAR_0"], "token": ["print", "(", "VAR_0", ".", "index", "(", "VAR_0", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "print(testlist.index(element))", "decano_code": "print(testlist.index(element))", "raw_code": "print(testlist.index(element))", "str_map": {}, "var_map": {"element": "VAR_0", "testlist": "VAR_0"}}
{"src": ["get", "the", "position", "of", "item", "VAR_0", "in", "list", "VAR_0"], "token": ["try", ":", "\n", "    ", "print", "(", "VAR_0", ".", "index", "(", "VAR_0", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "OP", "NEWLINE", "INDENT", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NEWLINE", "DEDENT", "KEYWORD", "NAME", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "try:\n    print(testlist.index(element))\nexcept ValueError:\n    pass", "decano_code": "try:\n    print(testlist.index(element))\nexcept ValueError:\n    pass", "raw_code": "try:\n    print(testlist.index(element))\nexcept ValueError:\n    pass", "str_map": {}, "var_map": {"element": "VAR_0", "testlist": "VAR_0"}}
{"src": ["find", "the", "first", "element", "of", "the", "tuple", "with", "the", "maximum", "second", "element", "in", "a", "list", "of", "tuples", "VAR_0"], "token": ["max", "(", "VAR_0", ",", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", ")", "[", "0", "]"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "max(lis, key=lambda item: item[1])[0]", "decano_code": "max(lis, key=lambda item: item[1])[0]", "raw_code": "max(lis, key=lambda item: item[1])[0]", "str_map": {}, "var_map": {"lis": "VAR_0"}}
{"src": ["get", "the", "item", "at", "index", "0", "from", "the", "tuple", "that", "has", "maximum", "value", "at", "index", "1", "in", "list", "VAR_0"], "token": ["max", "(", "VAR_0", ",", "key", "=", "itemgetter", "(", "1", ")", ")", "[", "0", "]"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "max(lis, key=itemgetter(1))[0]", "decano_code": "max(lis, key=itemgetter(1))[0]", "raw_code": "max(lis, key=itemgetter(1))[0]", "str_map": {}, "var_map": {"lis": "VAR_0"}}
{"src": ["make", "a", "delay", "of", "1", "second"], "token": ["time", ".", "sleep", "(", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "time.sleep(1)", "decano_code": "time.sleep(1)", "raw_code": "time.sleep(1)", "str_map": {}, "var_map": {}}
{"src": ["convert", "list", "of", "tuples", "VAR_0", "to", "a", "string"], "token": ["\"\"\", \"\"\"", ".", "join", "(", "'('", "+", "', '", ".", "join", "(", "i", ")", "+", "')'", "for", "i", "in", "VAR_0", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "\"\"\", \"\"\".join('(' + ', '.join(i) + ')' for i in L)", "decano_code": "\"\"\", \"\"\".join('(' + ', '.join(i) + ')' for i in L)", "raw_code": "\"\"\", \"\"\".join('(' + ', '.join(i) + ')' for i in L)", "str_map": {}, "var_map": {"L": "VAR_0"}}
{"src": ["django", "set", "default", "value", "of", "field", "VAR_0", "equal", "to", "_STR:0_"], "token": ["VAR_0", "=", "models", ".", "CharField", "(", "max_length", "=", "7", ",", "default", "=", "\" _STR:0_ \"", ",", "editable", "=", "False", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "b = models.CharField(max_length=7, default=\" _STR:0_ \", editable=False)", "decano_code": "b = models.CharField(max_length=7, default=\" _STR:0_ \", editable=False)", "raw_code": "b = models.CharField(max_length=7, default='0000000', editable=False)", "str_map": {"0000000": "_STR:0_"}, "var_map": {"b": "VAR_0"}}
{"src": ["sort", "lis", "VAR_0", "in", "ascending", "order", "based", "on", "the", "degrees", "value", "of", "its", "elements"], "token": ["sorted", "(", "VAR_0", ",", "lambda", "x", ":", "(", "degree", "(", "x", ")", ",", "x", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "sorted(list5, lambda x: (degree(x), x))", "decano_code": "sorted(list5, lambda x: (degree(x), x))", "raw_code": "sorted(list5, lambda x: (degree(x), x))", "str_map": {}, "var_map": {"list5": "VAR_0"}}
{"src": ["how", "do", "i", "perform", "secondary", "sorting", "in", "python", "?"], "token": ["sorted", "(", "list5", ",", "key", "=", "lambda", "vertex", ":", "(", "degree", "(", "vertex", ")", ",", "vertex", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "sorted(list5, key=lambda vertex: (degree(vertex), vertex))", "decano_code": "sorted(list5, key=lambda vertex: (degree(vertex), vertex))", "raw_code": "sorted(list5, key=lambda vertex: (degree(vertex), vertex))", "str_map": {}, "var_map": {}}
{"src": ["convert", "a", "list", "into", "a", "generator", "object"], "token": ["(", "n", "for", "n", "in", "[", "1", ",", "2", ",", "3", ",", "5", "]", ")"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "(n for n in [1, 2, 3, 5])", "decano_code": "(n for n in [1, 2, 3, 5])", "raw_code": "(n for n in [1, 2, 3, 5])", "str_map": {}, "var_map": {}}
{"src": ["remove", "elements", "from", "list", "VAR_0", "that", "have", "an", "index", "number", "mentioned", "in", "list", "VAR_0"], "token": ["newlist", "=", "[", "v", "for", "i", ",", "v", "in", "enumerate", "(", "VAR_0", ")", "if", "i", "not", "in", "VAR_0", "]"], "type": ["NAME", "OP", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "NAME", "OP"], "cano_code": "newlist = [v for i, v in enumerate(oldlist) if i not in removelist]", "decano_code": "newlist = [v for i, v in enumerate(oldlist) if i not in removelist]", "raw_code": "newlist = [v for i, v in enumerate(oldlist) if i not in removelist]", "str_map": {}, "var_map": {"oldlist": "VAR_0", "removelist": "VAR_0"}}
{"src": ["open", "a", "file", "VAR_0", "[", "yourfile", ".", "txt", "]", "in", "write", "mode"], "token": ["f", "=", "open", "(", "'yourfile.txt'", ",", "'w'", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "f = open('yourfile.txt', 'w')", "decano_code": "f = open('yourfile.txt', 'w')", "raw_code": "f = open('yourfile.txt', 'w')", "str_map": {}, "var_map": {"yourfile.txt": "VAR_0"}}
{"src": ["get", "attribute", "_STR:0_", "from", "object", "VAR_0"], "token": ["getattr", "(", "VAR_0", ",", "\" _STR:0_ \"", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "getattr(obj, \" _STR:0_ \")", "decano_code": "getattr(obj, \" _STR:0_ \")", "raw_code": "getattr(obj, 'attr')", "str_map": {"attr": "_STR:0_"}, "var_map": {"obj": "VAR_0"}}
{"src": ["convert", "tuple", "of", "tuples", "VAR_0", "to", "tuple"], "token": ["from", "functools", "import", "reduce", "\n", "reduce", "(", "lambda", "a", ",", "b", ":", "a", "+", "b", ",", "(", "(", "'aa'", ",", ")", ",", "(", "'bb'", ",", ")", ",", "(", "'cc'", ",", ")", ")", ")"], "type": ["KEYWORD", "NAME", "KEYWORD", "NAME", "NEWLINE", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "STRING", "OP", "OP", "OP", "OP", "STRING", "OP", "OP", "OP", "OP", "STRING", "OP", "OP", "OP", "OP"], "cano_code": "from functools import reduce\nreduce(lambda a, b: a + b, (('aa',), ('bb',), ('cc',)))", "decano_code": "from functools import reduce\nreduce(lambda a, b: a + b, (('aa',), ('bb',), ('cc',)))", "raw_code": "from functools import reduce\nreduce(lambda a, b: a + b, (('aa',), ('bb',), ('cc',)))", "str_map": {}, "var_map": {"(('aa',), ('bb',), ('cc',))": "VAR_0"}}
{"src": ["convert", "tuple", "of", "tuples", "VAR_0", "to", "list", "in", "one", "line"], "token": ["map", "(", "lambda", "a", ":", "a", "[", "0", "]", ",", "(", "(", "'aa'", ",", ")", ",", "(", "'bb'", ",", ")", ",", "(", "'cc'", ",", ")", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "OP", "STRING", "OP", "OP", "OP", "OP", "STRING", "OP", "OP", "OP", "OP", "STRING", "OP", "OP", "OP", "OP"], "cano_code": "map(lambda a: a[0], (('aa',), ('bb',), ('cc',)))", "decano_code": "map(lambda a: a[0], (('aa',), ('bb',), ('cc',)))", "raw_code": "map(lambda a: a[0], (('aa',), ('bb',), ('cc',)))", "str_map": {}, "var_map": {"(('aa',), ('bb',), ('cc',))": "VAR_0"}}
{"src": ["python", "pandas", ":", "how", "to", "replace", "a", "characters", "in", "a", "column", "of", "a", "dataframe", "?"], "token": ["df", "[", "'range'", "]", ".", "replace", "(", "','", ",", "'-'", ",", "inplace", "=", "True", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df['range'].replace(',', '-', inplace=True)", "decano_code": "df['range'].replace(',', '-', inplace=True)", "raw_code": "df['range'].replace(',', '-', inplace=True)", "str_map": {}, "var_map": {}}
{"src": ["unzip", "the", "list", "VAR_0"], "token": ["zip", "(", "*", "[", "(", "'a'", ",", "1", ")", ",", "(", "'b'", ",", "2", ")", ",", "(", "'c'", ",", "3", ")", ",", "(", "'d'", ",", "4", ")", "]", ")"], "type": ["KEYWORD", "OP", "OP", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])", "decano_code": "zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])", "raw_code": "zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])", "str_map": {}, "var_map": {"[('a', 1), ('b', 2), ('c', 3), ('d', 4)]": "VAR_0"}}
{"src": ["unzip", "the", "list", "VAR_0"], "token": ["zip", "(", "*", "[", "(", "'a'", ",", "1", ")", ",", "(", "'b'", ",", "2", ")", ",", "(", "'c'", ",", "3", ")", ",", "(", "'d'", ",", "4", ")", "]", ")"], "type": ["KEYWORD", "OP", "OP", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])", "decano_code": "zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])", "raw_code": "zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])", "str_map": {}, "var_map": {"[('a', 1), ('b', 2), ('c', 3), ('d', 4)]": "VAR_0"}}
{"src": ["unzip", "list", "VAR_0"], "token": ["result", "=", "(", "[", "a", "for", "(", "a", ",", "b", ")", "in", "VAR_0", "]", ",", "[", "b", "for", "(", "a", ",", "b", ")", "in", "VAR_0", "]", ")"], "type": ["NAME", "OP", "OP", "OP", "NAME", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP", "OP", "NAME", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "result = ([a for (a, b) in original], [b for (a, b) in original])", "decano_code": "result = ([a for (a, b) in original], [b for (a, b) in original])", "raw_code": "result = ([a for (a, b) in original], [b for (a, b) in original])", "str_map": {}, "var_map": {"original": "VAR_0"}}
{"src": ["unzip", "list", "VAR_0", "and", "return", "a", "generator"], "token": ["result", "=", "(", "(", "a", "for", "(", "a", ",", "b", ")", "in", "VAR_0", ")", ",", "(", "b", "for", "(", "a", ",", "b", ")", "in", "VAR_0", ")", ")"], "type": ["NAME", "OP", "OP", "OP", "NAME", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP", "OP", "NAME", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "result = ((a for (a, b) in original), (b for (a, b) in original))", "decano_code": "result = ((a for (a, b) in original), (b for (a, b) in original))", "raw_code": "result = ((a for (a, b) in original), (b for (a, b) in original))", "str_map": {}, "var_map": {"original": "VAR_0"}}
{"src": ["unzip", "list", "VAR_0"], "token": ["zip", "(", "*", "[", "(", "'a'", ",", "1", ")", ",", "(", "'b'", ",", "2", ")", ",", "(", "'c'", ",", "3", ")", ",", "(", "'d'", ",", "4", ")", ",", "(", "'e'", ",", ")", "]", ")"], "type": ["KEYWORD", "OP", "OP", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "OP", "STRING", "OP", "OP", "OP", "OP"], "cano_code": "zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])", "decano_code": "zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])", "raw_code": "zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])", "str_map": {}, "var_map": {"[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]": "VAR_0"}}
{"src": ["unzip", "list", "VAR_0", "and", "fill", "empty", "results", "with", "none"], "token": ["map", "(", "None", ",", "*", "[", "(", "'a'", ",", "1", ")", ",", "(", "'b'", ",", "2", ")", ",", "(", "'c'", ",", "3", ")", ",", "(", "'d'", ",", "4", ")", ",", "(", "'e'", ",", ")", "]", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "OP", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "OP", "STRING", "OP", "OP", "OP", "OP"], "cano_code": "map(None, *[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])", "decano_code": "map(None, *[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])", "raw_code": "map(None, *[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e',)])", "str_map": {}, "var_map": {"[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', )]": "VAR_0"}}
{"src": ["encode", "VAR_0", "[", "Decimal('3", ".", "9')", "]", "to", "a", "JSON", "string"], "token": ["json", ".", "dumps", "(", "Decimal", "(", "'3.9'", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "json.dumps(Decimal('3.9'))", "decano_code": "json.dumps(Decimal('3.9'))", "raw_code": "json.dumps(Decimal('3.9'))", "str_map": {}, "var_map": {"Decimal('3.9')": "VAR_0"}}
{"src": ["add", "key", "_STR:0_", "to", "dictionary", "VAR_0", "with", "value", "_STR:1_"], "token": ["VAR_0", "[", "\" _STR:0_ \"", "]", "=", "\" _STR:1_ \""], "type": ["NAME", "OP", "STRING", "OP", "OP", "STRING"], "cano_code": "d[\" _STR:0_ \"] = \" _STR:1_ \"", "decano_code": "d[\" _STR:0_ \"] = \" _STR:1_ \"", "raw_code": "d['mynewkey'] = 'mynewvalue'", "str_map": {"mynewkey": "_STR:0_", "mynewvalue": "_STR:1_"}, "var_map": {"d": "VAR_0"}}
{"src": ["add", "key", "_STR:0_", "to", "dictionary", "VAR_0", "with", "value", "1"], "token": ["VAR_0", ".", "update", "(", "{", "\" _STR:0_ \"", ":", "1", ",", "}", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "data.update({\" _STR:0_ \": 1, })", "decano_code": "data.update({\" _STR:0_ \": 1, })", "raw_code": "data.update({'a': 1, })", "str_map": {"a": "_STR:0_"}, "var_map": {"data": "VAR_0"}}
{"src": ["add", "key", "_STR:0_", "to", "dictionary", "VAR_0", "with", "value", "1"], "token": ["VAR_0", ".", "update", "(", "dict", "(", "a", "=", "1", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "data.update(dict(a=1))", "decano_code": "data.update(dict(a=1))", "raw_code": "data.update(dict(a=1))", "str_map": {"a": "_STR:0_"}, "var_map": {"data": "VAR_0"}}
{"src": ["add", "key", "_STR:0_", "to", "dictionary", "VAR_0", "with", "value", "1"], "token": ["VAR_0", ".", "update", "(", "a", "=", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "data.update(a=1)", "decano_code": "data.update(a=1)", "raw_code": "data.update(a=1)", "str_map": {"a": "_STR:0_"}, "var_map": {"data": "VAR_0"}}
{"src": ["find", "maximal", "value", "in", "matrix", "VAR_0"], "token": ["max", "(", "[", "max", "(", "i", ")", "for", "i", "in", "VAR_0", "]", ")"], "type": ["KEYWORD", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "max([max(i) for i in matrix])", "decano_code": "max([max(i) for i in matrix])", "raw_code": "max([max(i) for i in matrix])", "str_map": {}, "var_map": {"matrix": "VAR_0"}}
{"src": ["round", "number", "VAR_0", "to", "2", "precision", "after", "the", "decimal", "point"], "token": ["VAR_0", "=", "str", "(", "round", "(", "VAR_0", ",", "2", ")", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "answer = str(round(answer, 2))", "decano_code": "answer = str(round(answer, 2))", "raw_code": "answer = str(round(answer, 2))", "str_map": {}, "var_map": {"answer": "VAR_0"}}
{"src": ["extract", "ip", "address", "from", "an", "html", "string"], "token": ["ip", "=", "re", ".", "findall", "(", "'[0-9]+(?:\\\\.[0-9]+){3}'", ",", "s", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "ip = re.findall('[0-9]+(?:\\\\.[0-9]+){3}', s)", "decano_code": "ip = re.findall('[0-9]+(?:\\\\.[0-9]+){3}', s)", "raw_code": "ip = re.findall('[0-9]+(?:\\\\.[0-9]+){3}', s)", "str_map": {}, "var_map": {}}
{"src": ["filter", "dataframe", "VAR_0", "by", "values", "in", "column", "VAR_0", "that", "appear", "more", "than", "once"], "token": ["VAR_0", ".", "groupby", "(", "'A'", ")", ".", "filter", "(", "lambda", "x", ":", "len", "(", "x", ")", ">", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "KEYWORD", "OP", "KEYWORD", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NUMBER", "OP"], "cano_code": "df.groupby('A').filter(lambda x: len(x) > 1)", "decano_code": "df.groupby('A').filter(lambda x: len(x) > 1)", "raw_code": "df.groupby('A').filter(lambda x: len(x) > 1)", "str_map": {}, "var_map": {"df": "VAR_0", "A": "VAR_0"}}
{"src": ["append", "each", "line", "in", "file", "VAR_0", "into", "a", "list"], "token": ["[", "x", "for", "x", "in", "VAR_0", ".", "splitlines", "(", ")", "if", "x", "!=", "''", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "OP", "STRING", "OP"], "cano_code": "[x for x in myfile.splitlines() if x != '']", "decano_code": "[x for x in myfile.splitlines() if x != '']", "raw_code": "[x for x in myfile.splitlines() if x != '']", "str_map": {}, "var_map": {"myfile": "VAR_0"}}
{"src": ["get", "a", "list", "of", "integers", "VAR_0", "from", "a", "file", "VAR_0", "[", "filename", ".", "txt", "]"], "token": ["VAR_0", "=", "map", "(", "int", ",", "open", "(", "'filename.txt'", ")", ".", "readlines", "(", ")", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "lst = map(int, open('filename.txt').readlines())", "decano_code": "lst = map(int, open('filename.txt').readlines())", "raw_code": "lst = map(int, open('filename.txt').readlines())", "str_map": {}, "var_map": {"lst": "VAR_0", "filename.txt": "VAR_0"}}
{"src": ["add", "color", "bar", "with", "image", "VAR_0", "to", "plot", "VAR_0"], "token": ["VAR_0", ".", "colorbar", "(", "VAR_0", "=", "VAR_0", ",", "cax", "=", "ax3", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "plt.colorbar(mappable=mappable, cax=ax3)", "decano_code": "plt.colorbar(mappable=mappable, cax=ax3)", "raw_code": "plt.colorbar(mappable=mappable, cax=ax3)", "str_map": {}, "var_map": {"mappable": "VAR_0", "plt": "VAR_0"}}
{"src": ["count", "most", "frequent", "100", "words", "in", "column", "_STR:0_", "of", "dataframe", "VAR_0"], "token": ["Counter", "(", "' '", ".", "join", "(", "VAR_0", "[", "\" _STR:0_ \"", "]", ")", ".", "split", "(", ")", ")", ".", "most_common", "(", "100", ")"], "type": ["NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "Counter(' '.join(df[\" _STR:0_ \"]).split()).most_common(100)", "decano_code": "Counter(' '.join(df[\" _STR:0_ \"]).split()).most_common(100)", "raw_code": "Counter(' '.join(df['text']).split()).most_common(100)", "str_map": {"text": "_STR:0_"}, "var_map": {"df": "VAR_0"}}
{"src": ["python", "split", "a", "string", "using", "regex"], "token": ["re", ".", "findall", "(", "'(.+?):(.+?)\\\\b ?'", ",", "text", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.findall('(.+?):(.+?)\\\\b ?', text)", "decano_code": "re.findall('(.+?):(.+?)\\\\b ?', text)", "raw_code": "re.findall('(.+?):(.+?)\\\\b ?', text)", "str_map": {}, "var_map": {}}
{"src": ["generate", "all", "2-element", "subsets", "of", "tuple", "VAR_0"], "token": ["list", "(", "itertools", ".", "combinations", "(", "(", "1", ",", "2", ",", "3", ")", ",", "2", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "list(itertools.combinations((1, 2, 3), 2))", "decano_code": "list(itertools.combinations((1, 2, 3), 2))", "raw_code": "list(itertools.combinations((1, 2, 3), 2))", "str_map": {}, "var_map": {"(1, 2, 3)": "VAR_0"}}
{"src": ["get", "a", "value", "of", "datetime.today(", "[", "datetime", ".", "today(", "]", ")", "in", "the", "UTC", "time", "zone"], "token": ["datetime", ".", "now", "(", "pytz", ".", "utc", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "datetime.now(pytz.utc)", "decano_code": "datetime.now(pytz.utc)", "raw_code": "datetime.now(pytz.utc)", "str_map": {}, "var_map": {}}
{"src": ["get", "a", "new", "list", "VAR_0", "by", "removing", "empty", "list", "from", "a", "list", "of", "lists", "VAR_0"], "token": ["VAR_0", "=", "[", "x", "for", "x", "in", "VAR_0", "if", "x", "!=", "[", "]", "]"], "type": ["NAME", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "list2 = [x for x in list1 if x != []]", "decano_code": "list2 = [x for x in list1 if x != []]", "raw_code": "list2 = [x for x in list1 if x != []]", "str_map": {}, "var_map": {"list2": "VAR_0", "list1": "VAR_0"}}
{"src": ["create", "VAR_0", "to", "contain", "the", "lists", "from", "list", "VAR_0", "excluding", "the", "empty", "lists", "from", "VAR_0"], "token": ["VAR_0", "=", "[", "x", "for", "x", "in", "VAR_0", "if", "x", "]"], "type": ["NAME", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "list2 = [x for x in list1 if x]", "decano_code": "list2 = [x for x in list1 if x]", "raw_code": "list2 = [x for x in list1 if x]", "str_map": {}, "var_map": {"list2": "VAR_0", "list1": "VAR_0"}}
{"src": ["django", "response", "with", "JSON", "VAR_0"], "token": ["return", "HttpResponse", "(", "VAR_0", ",", "mimetype", "=", "'application/json'", ")"], "type": ["KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "return HttpResponse(data, mimetype='application/json')", "decano_code": "return HttpResponse(data, mimetype='application/json')", "raw_code": "return HttpResponse(data, mimetype='application/json')", "str_map": {}, "var_map": {"data": "VAR_0"}}
{"src": ["get", "all", "text", "that", "is", "not", "enclosed", "within", "square", "brackets", "in", "string", "VAR_0"], "token": ["re", ".", "findall", "(", "'(.*?)\\\\[.*?\\\\]'", ",", "VAR_0", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.findall('(.*?)\\\\[.*?\\\\]', example_str)", "decano_code": "re.findall('(.*?)\\\\[.*?\\\\]', example_str)", "raw_code": "re.findall('(.*?)\\\\[.*?\\\\]', example_str)", "str_map": {}, "var_map": {"example_str": "VAR_0"}}
{"src": ["use", "a", "regex", "to", "get", "all", "text", "in", "a", "string", "VAR_0", "that", "is", "not", "surrounded", "by", "square", "brackets"], "token": ["re", ".", "findall", "(", "'(.*?)(?:\\\\[.*?\\\\]|$)'", ",", "VAR_0", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.findall('(.*?)(?:\\\\[.*?\\\\]|$)', example_str)", "decano_code": "re.findall('(.*?)(?:\\\\[.*?\\\\]|$)', example_str)", "raw_code": "re.findall('(.*?)(?:\\\\[.*?\\\\]|$)', example_str)", "str_map": {}, "var_map": {"example_str": "VAR_0"}}
{"src": ["get", "whatever", "is", "between", "parentheses", "as", "a", "single", "match", ",", "and", "any", "char", "outside", "as", "an", "individual", "match", "in", "string", "_STR:0_"], "token": ["re", ".", "findall", "(", "'\\\\(.+?\\\\)|\\\\w'", ",", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.findall('\\\\(.+?\\\\)|\\\\w', \" _STR:0_ \")", "decano_code": "re.findall('\\\\(.+?\\\\)|\\\\w', \" _STR:0_ \")", "raw_code": "re.findall('\\\\(.+?\\\\)|\\\\w', '(zyx)bc')", "str_map": {"(zyx)bc": "_STR:0_"}, "var_map": {}}
{"src": ["match", "regex", "_STR:0_", "with", "string", "_STR:1_"], "token": ["re", ".", "findall", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.findall(\" _STR:0_ \", \" _STR:1_ \")", "decano_code": "re.findall(\" _STR:0_ \", \" _STR:1_ \")", "raw_code": "re.findall('\\\\((.*?)\\\\)|(\\\\w)', '(zyx)bc')", "str_map": {"\\((.*?)\\)|(\\w)": "_STR:0_", "(zyx)bc": "_STR:1_"}, "var_map": {}}
{"src": ["match", "multiple", "regex", "patterns", "with", "the", "alternation", "operator", "VAR_0", "in", "a", "string", "VAR_0"], "token": ["re", ".", "findall", "(", "'\\\\(.*?\\\\)|\\\\w'", ",", "'(zyx)bc'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.findall('\\\\(.*?\\\\)|\\\\w', '(zyx)bc')", "decano_code": "re.findall('\\\\(.*?\\\\)|\\\\w', '(zyx)bc')", "raw_code": "re.findall('\\\\(.*?\\\\)|\\\\w', '(zyx)bc')", "str_map": {}, "var_map": {"|": "VAR_0", "(zyx)bc": "VAR_0"}}
{"src": ["formate", "each", "string", "cin", "list", "VAR_0", "into", "pattern", "_STR:0_"], "token": ["VAR_0", "=", "[", "\" _STR:0_ \"", ".", "format", "(", "element", ")", "for", "element", "in", "VAR_0", "]"], "type": ["NAME", "OP", "OP", "STRING", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "elements = [\" _STR:0_ \".format(element) for element in elements]", "decano_code": "elements = [\" _STR:0_ \".format(element) for element in elements]", "raw_code": "elements = ['%{0}%'.format(element) for element in elements]", "str_map": {"%{0}%": "_STR:0_"}, "var_map": {"elements": "VAR_0"}}
{"src": ["open", "a", "background", "process", "_STR:0_", "with", "arguments", "_STR:1_"], "token": ["subprocess", ".", "Popen", "(", "[", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "subprocess.Popen([\" _STR:0_ \", \" _STR:1_ \"])", "decano_code": "subprocess.Popen([\" _STR:0_ \", \" _STR:1_ \"])", "raw_code": "subprocess.Popen(['background-process', 'arguments'])", "str_map": {"background-process": "_STR:0_", "arguments": "_STR:1_"}, "var_map": {}}
{"src": ["get", "list", "of", "values", "from", "dictionary", "_STR:0_", "w.r.t", "[", "w", ".", "r", ".", "t", "]", ".", "list", "of", "keys", "_STR:1_"], "token": ["[", "mydict", "[", "x", "]", "for", "x", "in", "mykeys", "]"], "type": ["OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[mydict[x] for x in mykeys]", "decano_code": "[mydict[x] for x in mykeys]", "raw_code": "[mydict[x] for x in mykeys]", "str_map": {"mydict": "_STR:0_", "mykeys": "_STR:1_"}, "var_map": {}}
{"src": ["convert", "list", "VAR_0", "into", "a", "dictionary"], "token": ["dict", "(", "[", "(", "'Name'", ",", "'Joe'", ")", ",", "(", "'Age'", ",", "22", ")", "]", ")"], "type": ["KEYWORD", "OP", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "dict([('Name', 'Joe'), ('Age', 22)])", "decano_code": "dict([('Name', 'Joe'), ('Age', 22)])", "raw_code": "dict([('Name', 'Joe'), ('Age', 22)])", "str_map": {}, "var_map": {"[('Name', 'Joe'), ('Age', 22)]": "VAR_0"}}
{"src": ["average", "each", "two", "columns", "of", "array", "VAR_0"], "token": ["VAR_0", ".", "reshape", "(", "-", "1", ",", "j", ")", ".", "mean", "(", "axis", "=", "1", ")", ".", "reshape", "(", "VAR_0", ".", "shape", "[", "0", "]", ",", "-", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "data.reshape(-1, j).mean(axis=1).reshape(data.shape[0], -1)", "decano_code": "data.reshape(-1, j).mean(axis=1).reshape(data.shape[0], -1)", "raw_code": "data.reshape(-1, j).mean(axis=1).reshape(data.shape[0], -1)", "str_map": {}, "var_map": {"data": "VAR_0"}}
{"src": ["double", "backslash", "escape", "all", "double", "quotes", "in", "string", "VAR_0"], "token": ["print", "(", "VAR_0", ".", "encode", "(", "'unicode-escape'", ")", ".", "replace", "(", "'\"'", ",", "'\\\\\"'", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "print(s.encode('unicode-escape').replace('\"', '\\\\\"'))", "decano_code": "print(s.encode('unicode-escape').replace('\"', '\\\\\"'))", "raw_code": "print(s.encode('unicode-escape').replace('\"', '\\\\\"'))", "str_map": {}, "var_map": {"s": "VAR_0"}}
{"src": ["split", "a", "string", "into", "a", "list", "of", "words", "and", "whitespace"], "token": ["re", ".", "split", "(", "'(\\\\W+)'", ",", "s", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.split('(\\\\W+)', s)", "decano_code": "re.split('(\\\\W+)', s)", "raw_code": "re.split('(\\\\W+)', s)", "str_map": {}, "var_map": {}}
{"src": ["plotting", "stacked", "barplots", "on", "a", "panda", "data", "frame"], "token": ["df", ".", "plot", "(", "kind", "=", "'barh'", ",", "stacked", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df.plot(kind='barh', stacked=True)", "decano_code": "df.plot(kind='barh', stacked=True)", "raw_code": "df.plot(kind='barh', stacked=True)", "str_map": {}, "var_map": {}}
{"src": ["reverse", "the", "keys", "and", "values", "in", "a", "dictionary", "VAR_0"], "token": ["{", "i", "[", "1", "]", ":", "i", "[", "0", "]", "for", "i", "in", "list", "(", "VAR_0", ".", "items", "(", ")", ")", "}"], "type": ["OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "{i[1]: i[0] for i in list(myDictionary.items())}", "decano_code": "{i[1]: i[0] for i in list(myDictionary.items())}", "raw_code": "{i[1]: i[0] for i in list(myDictionary.items())}", "str_map": {}, "var_map": {"myDictionary": "VAR_0"}}
{"src": ["finding", "the", "index", "of", "elements", "containing", "substring", "_STR:0_", "and", "_STR:1_", "in", "a", "list", "of", "strings", "_STR:2_", "."], "token": ["[", "i", "for", "i", ",", "j", "in", "enumerate", "(", "myList", ")", "if", "\" _STR:0_ \"", "in", "j", ".", "lower", "(", ")", "or", "\" _STR:1_ \"", "in", "j", ".", "lower", "(", ")", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "STRING", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "STRING", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "[i for i, j in enumerate(myList) if \" _STR:0_ \" in j.lower() or \" _STR:1_ \" in j.lower()]", "decano_code": "[i for i, j in enumerate(myList) if \" _STR:0_ \" in j.lower() or \" _STR:1_ \" in j.lower()]", "raw_code": "[i for i, j in enumerate(myList) if 'how' in j.lower() or 'what' in j.lower()]", "str_map": {"how": "_STR:0_", "what": "_STR:1_", "myList": "_STR:2_"}, "var_map": {}}
{"src": ["check", "if", "object", "VAR_0", "is", "a", "string"], "token": ["isinstance", "(", "VAR_0", ",", "str", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "isinstance(obj, str)", "decano_code": "isinstance(obj, str)", "raw_code": "isinstance(obj, str)", "str_map": {}, "var_map": {"obj": "VAR_0"}}
{"src": ["check", "if", "object", "VAR_0", "is", "a", "string"], "token": ["isinstance", "(", "VAR_0", ",", "str", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "isinstance(o, str)", "decano_code": "isinstance(o, str)", "raw_code": "isinstance(o, str)", "str_map": {}, "var_map": {"o": "VAR_0"}}
{"src": ["check", "if", "object", "VAR_0", "is", "a", "string"], "token": ["(", "type", "(", "VAR_0", ")", "is", "str", ")"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "KEYWORD", "OP"], "cano_code": "(type(o) is str)", "decano_code": "(type(o) is str)", "raw_code": "(type(o) is str)", "str_map": {}, "var_map": {"o": "VAR_0"}}
{"src": ["check", "if", "object", "VAR_0", "is", "a", "string"], "token": ["isinstance", "(", "VAR_0", ",", "str", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "isinstance(o, str)", "decano_code": "isinstance(o, str)", "raw_code": "isinstance(o, str)", "str_map": {}, "var_map": {"o": "VAR_0"}}
{"src": ["check", "if", "VAR_0", "is", "a", "string"], "token": ["isinstance", "(", "VAR_0", ",", "str", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "isinstance(obj_to_test, str)", "decano_code": "isinstance(obj_to_test, str)", "raw_code": "isinstance(obj_to_test, str)", "str_map": {}, "var_map": {"obj_to_test": "VAR_0"}}
{"src": ["append", "list", "VAR_0", "to", "VAR_0"], "token": ["VAR_0", ".", "extend", "(", "VAR_0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "list2.extend(list1)", "decano_code": "list2.extend(list1)", "raw_code": "list2.extend(list1)", "str_map": {}, "var_map": {"list1": "VAR_0", "list2": "VAR_0"}}
{"src": ["append", "list", "VAR_0", "to", "VAR_0"], "token": ["VAR_0", ".", "extend", "(", "VAR_0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "list1.extend(mylog)", "decano_code": "list1.extend(mylog)", "raw_code": "list1.extend(mylog)", "str_map": {}, "var_map": {"mylog": "VAR_0", "list1": "VAR_0"}}
{"src": ["append", "list", "VAR_0", "to", "VAR_0"], "token": ["VAR_0", ".", "extend", "(", "VAR_0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "c.extend(a)", "decano_code": "c.extend(a)", "raw_code": "c.extend(a)", "str_map": {}, "var_map": {"a": "VAR_0", "c": "VAR_0"}}
{"src": ["append", "items", "in", "list", "VAR_0", "to", "VAR_0"], "token": ["for", "line", "in", "VAR_0", ":", "\n", "    ", "VAR_0", ".", "append", "(", "line", ")", ""], "type": ["KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NEWLINE", "INDENT", "NAME", "OP", "NAME", "OP", "NAME", "OP", "DEDENT"], "cano_code": "for line in mylog:\n    list1.append(line)", "decano_code": "for line in mylog:\n    list1.append(line)", "raw_code": "for line in mylog:\n    list1.append(line)", "str_map": {}, "var_map": {"mylog": "VAR_0", "list1": "VAR_0"}}
{"src": ["append", "a", "tuple", "of", "elements", "from", "list", "VAR_0", "with", "indexes", "_STR:0_", "to", "list", "VAR_0"], "token": ["VAR_0", ".", "append", "(", "(", "VAR_0", "[", "0", "]", "[", "0", "]", ",", "VAR_0", "[", "0", "]", "[", "2", "]", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "b.append((a[0][0], a[0][2]))", "decano_code": "b.append((a[0][0], a[0][2]))", "raw_code": "b.append((a[0][0], a[0][2]))", "str_map": {"[0][0] [0][2]": "_STR:0_"}, "var_map": {"a": "VAR_0", "b": "VAR_0"}}
{"src": ["initialize", "VAR_0", "in", "flask", "config", "with", "VAR_0"], "token": ["app", ".", "config", "[", "'SECRET_KEY'", "]", "=", "'Your_secret_string'"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "STRING"], "cano_code": "app.config['SECRET_KEY'] = 'Your_secret_string'", "decano_code": "app.config['SECRET_KEY'] = 'Your_secret_string'", "raw_code": "app.config['SECRET_KEY'] = 'Your_secret_string'", "str_map": {}, "var_map": {"SECRET_KEY": "VAR_0", "Your_secret_string ": "VAR_0"}}
{"src": ["unpack", "a", "series", "of", "tuples", "in", "pandas", "into", "a", "DataFrame", "with", "column", "names", "_STR:0_", "and", "_STR:1_"], "token": ["pd", ".", "DataFrame", "(", "out", ".", "tolist", "(", ")", ",", "columns", "=", "[", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", "]", ",", "index", "=", "out", ".", "index", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "pd.DataFrame(out.tolist(), columns=[\" _STR:0_ \", \" _STR:1_ \"], index=out.index)", "decano_code": "pd.DataFrame(out.tolist(), columns=[\" _STR:0_ \", \" _STR:1_ \"], index=out.index)", "raw_code": "pd.DataFrame(out.tolist(), columns=['out-1', 'out-2'], index=out.index)", "str_map": {"out-1": "_STR:0_", "out-2": "_STR:1_"}, "var_map": {}}
{"src": ["find", "the", "index", "of", "an", "element", "_STR:0_", "in", "a", "list", "VAR_0"], "token": ["[", "x", "for", "x", "in", "range", "(", "len", "(", "VAR_0", ")", ")", "if", "VAR_0", "[", "x", "]", "==", "\" _STR:0_ \"", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP"], "cano_code": "[x for x in range(len(stocks_list)) if stocks_list[x] == \" _STR:0_ \"]", "decano_code": "[x for x in range(len(stocks_list)) if stocks_list[x] == \" _STR:0_ \"]", "raw_code": "[x for x in range(len(stocks_list)) if stocks_list[x] == 'MSFT']", "str_map": {"MSFT": "_STR:0_"}, "var_map": {"stocks_list": "VAR_0"}}
{"src": ["rotate", "the", "xtick", "labels", "of", "matplotlib", "plot", "VAR_0", "by", "VAR_0", "degrees", "to", "make", "long", "labels", "readable"], "token": ["VAR_0", ".", "set_xticklabels", "(", "labels", ",", "rotation", "=", "45", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "ax.set_xticklabels(labels, rotation=45)", "decano_code": "ax.set_xticklabels(labels, rotation=45)", "raw_code": "ax.set_xticklabels(labels, rotation=45)", "str_map": {}, "var_map": {"ax": "VAR_0", "45": "VAR_0"}}
{"src": ["remove", "symbols", "from", "a", "string", "VAR_0"], "token": ["re", ".", "sub", "(", "'[^\\\\w]'", ",", "' '", ",", "VAR_0", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.sub('[^\\\\w]', ' ', s)", "decano_code": "re.sub('[^\\\\w]', ' ', s)", "raw_code": "re.sub('[^\\\\w]', ' ', s)", "str_map": {}, "var_map": {"s": "VAR_0"}}
{"src": ["get", "the", "current", "directory", "of", "a", "script"], "token": ["os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "os.path.basename(os.path.dirname(os.path.realpath(__file__)))", "decano_code": "os.path.basename(os.path.dirname(os.path.realpath(__file__)))", "raw_code": "os.path.basename(os.path.dirname(os.path.realpath(__file__)))", "str_map": {}, "var_map": {}}
{"src": ["find", "octal", "characters", "matches", "from", "a", "string", "VAR_0", "using", "regex"], "token": ["print", "(", "re", ".", "findall", "(", "\"'\\\\\\\\[0-7]{1,3}'\"", ",", "str", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "OP", "OP"], "cano_code": "print(re.findall(\"'\\\\\\\\[0-7]{1,3}'\", str))", "decano_code": "print(re.findall(\"'\\\\\\\\[0-7]{1,3}'\", str))", "raw_code": "print(re.findall(\"'\\\\\\\\[0-7]{1,3}'\", str))", "str_map": {}, "var_map": {"str": "VAR_0"}}
{"src": ["split", "string", "VAR_0", "based", "on", "occurrences", "of", "regex", "pattern", "_STR:0_"], "token": ["re", ".", "split", "(", "\" _STR:0_ \"", ",", "input", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "OP"], "cano_code": "re.split(\" _STR:0_ \", input)", "decano_code": "re.split(\" _STR:0_ \", input)", "raw_code": "re.split('[ ](?=[A-Z]+\\\\b)', input)", "str_map": {"[ ](?=[A-Z]+\\b)": "_STR:0_"}, "var_map": {"input": "VAR_0"}}
{"src": ["split", "string", "VAR_0", "at", "every", "space", "followed", "by", "an", "upper-case", "letter"], "token": ["re", ".", "split", "(", "'[ ](?=[A-Z])'", ",", "input", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "OP"], "cano_code": "re.split('[ ](?=[A-Z])', input)", "decano_code": "re.split('[ ](?=[A-Z])', input)", "raw_code": "re.split('[ ](?=[A-Z])', input)", "str_map": {}, "var_map": {"input": "VAR_0"}}
{"src": ["send", "multipart", "encoded", "file", "VAR_0", "to", "url", "VAR_0", "with", "headers", "VAR_0", "and", "metadata", "VAR_0"], "token": ["r", "=", "requests", ".", "post", "(", "VAR_0", ",", "VAR_0", "=", "VAR_0", ",", "VAR_0", "=", "VAR_0", ",", "VAR_0", "=", "VAR_0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "r = requests.post(url, files=files, headers=headers, data=data)", "decano_code": "r = requests.post(url, files=files, headers=headers, data=data)", "raw_code": "r = requests.post(url, files=files, headers=headers, data=data)", "str_map": {}, "var_map": {"files": "VAR_0", "url": "VAR_0", "headers": "VAR_0", "data": "VAR_0"}}
{"src": ["write", "bytes", "VAR_0", "to", "a", "file", "VAR_0", "in", "python", "3"], "token": ["open", "(", "'filename'", ",", "'wb'", ")", ".", "write", "(", "VAR_0", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "open('filename', 'wb').write(bytes_)", "decano_code": "open('filename', 'wb').write(bytes_)", "raw_code": "open('filename', 'wb').write(bytes_)", "str_map": {}, "var_map": {"bytes_": "VAR_0", "filename": "VAR_0"}}
{"src": ["get", "a", "list", "from", "a", "list", "VAR_0", "with", "values", "mapped", "into", "a", "dictionary", "VAR_0"], "token": ["[", "VAR_0", "[", "k", "]", "for", "k", "in", "VAR_0", "]"], "type": ["OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[dct[k] for k in lst]", "decano_code": "[dct[k] for k in lst]", "raw_code": "[dct[k] for k in lst]", "str_map": {}, "var_map": {"lst": "VAR_0", "dct": "VAR_0"}}
{"src": ["find", "duplicate", "names", "in", "column", "_STR:0_", "of", "the", "dataframe", "VAR_0"], "token": ["VAR_0", ".", "set_index", "(", "\" _STR:0_ \"", ")", ".", "index", ".", "get_duplicates", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "x.set_index(\" _STR:0_ \").index.get_duplicates()", "decano_code": "x.set_index(\" _STR:0_ \").index.get_duplicates()", "raw_code": "x.set_index('name').index.get_duplicates()", "str_map": {"name": "_STR:0_"}, "var_map": {"x": "VAR_0"}}
{"src": ["truncate", "float", "1.923328437452", "[", "1", ".", "923328437452", "]", "to", "3", "decimal", "places"], "token": ["round", "(", "1.923328437452", ",", "3", ")"], "type": ["KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "round(1.923328437452, 3)", "decano_code": "round(1.923328437452, 3)", "raw_code": "round(1.923328437452, 3)", "str_map": {}, "var_map": {}}
{"src": ["sort", "list", "VAR_0", "in", "descending", "order", "based", "on", "the", "date", "value", "in", "second", "element", "of", "each", "list", "in", "list", "VAR_0"], "token": ["sorted", "(", "VAR_0", ",", "key", "=", "lambda", "x", ":", "datetime", ".", "strptime", "(", "x", "[", "1", "]", ",", "'%d/%m/%Y'", ")", ",", "reverse", "=", "True", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "sorted(li, key=lambda x: datetime.strptime(x[1], '%d/%m/%Y'), reverse=True)", "decano_code": "sorted(li, key=lambda x: datetime.strptime(x[1], '%d/%m/%Y'), reverse=True)", "raw_code": "sorted(li, key=lambda x: datetime.strptime(x[1], '%d/%m/%Y'), reverse=True)", "str_map": {}, "var_map": {"li": "VAR_0"}}
{"src": ["place", "the", "radial", "ticks", "in", "plot", "VAR_0", "at", "135", "degrees"], "token": ["VAR_0", ".", "set_rlabel_position", "(", "135", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "ax.set_rlabel_position(135)", "decano_code": "ax.set_rlabel_position(135)", "raw_code": "ax.set_rlabel_position(135)", "str_map": {}, "var_map": {"ax": "VAR_0"}}
{"src": ["check", "if", "path", "VAR_0", "is", "an", "absolute", "path"], "token": ["os", ".", "path", ".", "isabs", "(", "VAR_0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "os.path.isabs(my_path)", "decano_code": "os.path.isabs(my_path)", "raw_code": "os.path.isabs(my_path)", "str_map": {}, "var_map": {"my_path": "VAR_0"}}
{"src": ["get", "number", "of", "keys", "in", "dictionary", "VAR_0"], "token": ["len", "(", "list", "(", "VAR_0", ".", "keys", "(", ")", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "len(list(yourdict.keys()))", "decano_code": "len(list(yourdict.keys()))", "raw_code": "len(list(yourdict.keys()))", "str_map": {}, "var_map": {"yourdict": "VAR_0"}}
{"src": ["count", "the", "number", "of", "keys", "in", "dictionary", "VAR_0"], "token": ["len", "(", "set", "(", "open", "(", "VAR_0", ")", ".", "read", "(", ")", ".", "split", "(", ")", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "len(set(open(yourdictfile).read().split()))", "decano_code": "len(set(open(yourdictfile).read().split()))", "raw_code": "len(set(open(yourdictfile).read().split()))", "str_map": {}, "var_map": {"yourdictfile": "VAR_0"}}
{"src": ["pandas", "dataframe", "get", "first", "row", "of", "each", "group", "by", "_STR:0_"], "token": ["df", ".", "groupby", "(", "\" _STR:0_ \"", ")", ".", "first", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "df.groupby(\" _STR:0_ \").first()", "decano_code": "df.groupby(\" _STR:0_ \").first()", "raw_code": "df.groupby('id').first()", "str_map": {"id": "_STR:0_"}, "var_map": {}}
{"src": ["split", "a", "list", "in", "first", "column", "into", "multiple", "columns", "keeping", "other", "columns", "as", "well", "in", "pandas", "data", "frame"], "token": ["pd", ".", "concat", "(", "[", "df", "[", "0", "]", ".", "apply", "(", "pd", ".", "Series", ")", ",", "df", "[", "1", "]", "]", ",", "axis", "=", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "pd.concat([df[0].apply(pd.Series), df[1]], axis=1)", "decano_code": "pd.concat([df[0].apply(pd.Series), df[1]], axis=1)", "raw_code": "pd.concat([df[0].apply(pd.Series), df[1]], axis=1)", "str_map": {}, "var_map": {}}
{"src": ["extract", "attributes", "_STR:0_", "from", "string", "VAR_0"], "token": ["re", ".", "findall", "(", "\" _STR:0_ \"", ",", "VAR_0", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.findall(\" _STR:0_ \", data)", "decano_code": "re.findall(\" _STR:0_ \", data)", "raw_code": "re.findall('src=\"js/([^\"]*\\\\bjquery\\\\b[^\"]*)\"', data)", "str_map": {"src=\"js/([^\"]*\\bjquery\\b[^\"]*)\"": "_STR:0_"}, "var_map": {"data": "VAR_0"}}
{"src": ["sum", "integers", "contained", "in", "strings", "in", "list", "VAR_0", "[", "['',", "'3", ".", "4',", "'',", "'',", "'1", ".", "0']", "]"], "token": ["sum", "(", "int", "(", "float", "(", "item", ")", ")", "for", "item", "in", "[", "_f", "for", "_f", "in", "[", "''", ",", "'3.4'", ",", "''", ",", "''", ",", "'1.0'", "]", "if", "_f", "]", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "sum(int(float(item)) for item in [_f for _f in ['', '3.4', '', '', '1.0'] if _f])", "decano_code": "sum(int(float(item)) for item in [_f for _f in ['', '3.4', '', '', '1.0'] if _f])", "raw_code": "sum(int(float(item)) for item in [_f for _f in ['', '3.4', '', '', '1.0'] if _f])", "str_map": {}, "var_map": {"['', '3.4', '', '', '1.0']": "VAR_0"}}
{"src": ["call", "a", "subprocess", "with", "arguments", "VAR_0", "[", "c:\\\\Program", "Files\\\\VMware\\\\VMware", "Server\\\\vmware-cmd", ".", "bat", "]", "that", "may", "contain", "spaces"], "token": ["subprocess", ".", "Popen", "(", "[", "'c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "OP"], "cano_code": "subprocess.Popen(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])", "decano_code": "subprocess.Popen(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])", "raw_code": "subprocess.Popen(['c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat'])", "str_map": {}, "var_map": {"c:\\\\Program Files\\\\VMware\\\\VMware Server\\\\vmware-cmd.bat": "VAR_0"}}
{"src": ["reverse", "a", "priority", "queue", "VAR_0", "in", "python", "without", "using", "classes"], "token": ["VAR_0", ".", "put", "(", "(", "-", "n", ",", "n", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "q.put((-n, n))", "decano_code": "q.put((-n, n))", "raw_code": "q.put((-n, n))", "str_map": {}, "var_map": {"q": "VAR_0"}}
{"src": ["make", "a", "barplot", "of", "data", "in", "column", "VAR_0", "of", "dataframe", "VAR_0", "colour-coded", "according", "to", "list", "VAR_0"], "token": ["VAR_0", "[", "'group'", "]", ".", "plot", "(", "kind", "=", "'bar'", ",", "VAR_0", "=", "[", "'r'", ",", "'g'", ",", "'b'", ",", "'r'", ",", "'g'", ",", "'b'", ",", "'r'", "]", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "df['group'].plot(kind='bar', color=['r', 'g', 'b', 'r', 'g', 'b', 'r'])", "decano_code": "df['group'].plot(kind='bar', color=['r', 'g', 'b', 'r', 'g', 'b', 'r'])", "raw_code": "df['group'].plot(kind='bar', color=['r', 'g', 'b', 'r', 'g', 'b', 'r'])", "str_map": {}, "var_map": {"group": "VAR_0", "df": "VAR_0", "color": "VAR_0"}}
{"src": ["find", "all", "matches", "of", "regex", "pattern", "_STR:0_", "in", "string", "VAR_0"], "token": ["re", ".", "findall", "(", "\" _STR:0_ \"", ",", "VAR_0", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.findall(\" _STR:0_ \", data)", "decano_code": "re.findall(\" _STR:0_ \", data)", "raw_code": "re.findall('([a-fA-F\\\\d]{32})', data)", "str_map": {"([a-fA-F\\d]{32})": "_STR:0_"}, "var_map": {"data": "VAR_0"}}
{"src": ["get", "the", "length", "of", "list", "VAR_0"], "token": ["len", "(", "VAR_0", ")"], "type": ["KEYWORD", "OP", "NAME", "OP"], "cano_code": "len(my_list)", "decano_code": "len(my_list)", "raw_code": "len(my_list)", "str_map": {}, "var_map": {"my_list": "VAR_0"}}
{"src": ["getting", "the", "length", "of", "array", "VAR_0"], "token": ["len", "(", "VAR_0", ")"], "type": ["KEYWORD", "OP", "NAME", "OP"], "cano_code": "len(l)", "decano_code": "len(l)", "raw_code": "len(l)", "str_map": {}, "var_map": {"l": "VAR_0"}}
{"src": ["getting", "the", "length", "of", "array", "VAR_0"], "token": ["len", "(", "VAR_0", ")"], "type": ["KEYWORD", "OP", "NAME", "OP"], "cano_code": "len(s)", "decano_code": "len(s)", "raw_code": "len(s)", "str_map": {}, "var_map": {"s": "VAR_0"}}
{"src": ["getting", "the", "length", "of", "VAR_0"], "token": ["len", "(", "VAR_0", ")"], "type": ["KEYWORD", "OP", "NAME", "OP"], "cano_code": "len(my_tuple)", "decano_code": "len(my_tuple)", "raw_code": "len(my_tuple)", "str_map": {}, "var_map": {"my_tuple": "VAR_0"}}
{"src": ["getting", "the", "length", "of", "VAR_0"], "token": ["len", "(", "VAR_0", ")"], "type": ["KEYWORD", "OP", "NAME", "OP"], "cano_code": "len(my_string)", "decano_code": "len(my_string)", "raw_code": "len(my_string)", "str_map": {}, "var_map": {"my_string": "VAR_0"}}
{"src": ["remove", "escape", "character", "from", "string", "_STR:0_"], "token": ["\" _STR:0_ \"", ".", "decode", "(", "'string_escape'", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "\" _STR:0_ \".decode('string_escape')", "decano_code": "\" _STR:0_ \".decode('string_escape')", "raw_code": "\"\"\"\\\\a\"\"\".decode('string_escape')", "str_map": {"\\a": "_STR:0_"}, "var_map": {}}
{"src": ["replace", "each", "_STR:0_", "with", "_STR:1_", "and", "each", "_STR:1_", "with", "_STR:0_", "in", "the", "string", "_STR:2_", "in", "a", "single", "pass", "."], "token": ["\" _STR:2_ \"", ".", "replace", "(", "\" _STR:0_ \"", ",", "'%temp%'", ")", ".", "replace", "(", "\" _STR:1_ \"", ",", "\" _STR:0_ \"", ")", ".", "replace", "(", "'%temp%'", ",", "\" _STR:1_ \"", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "\" _STR:2_ \".replace(\" _STR:0_ \", '%temp%').replace(\" _STR:1_ \", \" _STR:0_ \").replace('%temp%', \" _STR:1_ \")", "decano_code": "\" _STR:2_ \".replace(\" _STR:0_ \", '%temp%').replace(\" _STR:1_ \", \" _STR:0_ \").replace('%temp%', \" _STR:1_ \")", "raw_code": "\"\"\"obama\"\"\".replace('a', '%temp%').replace('b', 'a').replace('%temp%', 'b')", "str_map": {"a": "_STR:0_", "b": "_STR:1_", "obama": "_STR:2_"}, "var_map": {}}
{"src": ["remove", "directory", "tree", "_STR:0_"], "token": ["shutil", ".", "rmtree", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "shutil.rmtree(\" _STR:0_ \")", "decano_code": "shutil.rmtree(\" _STR:0_ \")", "raw_code": "shutil.rmtree('/folder_name')", "str_map": {"/folder_name": "_STR:0_"}, "var_map": {}}
{"src": ["create", "a", "new", "column", "VAR_0", "in", "pandas", "data", "frame", "VAR_0", "based", "on", "the", "values", "in", "column", "VAR_0"], "token": ["VAR_0", "[", "'weekday'", "]", "=", "VAR_0", "[", "'my_dt'", "]", ".", "apply", "(", "lambda", "x", ":", "x", ".", "VAR_0", "(", ")", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "data['weekday'] = data['my_dt'].apply(lambda x: x.weekday())", "decano_code": "data['weekday'] = data['my_dt'].apply(lambda x: x.weekday())", "raw_code": "data['weekday'] = data['my_dt'].apply(lambda x: x.weekday())", "str_map": {}, "var_map": {"weekday": "VAR_0", "data": "VAR_0", "my_dt": "VAR_0"}}
{"src": ["reverse", "sort", "counter", "VAR_0", "by", "values"], "token": ["sorted", "(", "VAR_0", ",", "key", "=", "VAR_0", ".", "get", ",", "reverse", "=", "True", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "sorted(x, key=x.get, reverse=True)", "decano_code": "sorted(x, key=x.get, reverse=True)", "raw_code": "sorted(x, key=x.get, reverse=True)", "str_map": {}, "var_map": {"x": "VAR_0"}}
{"src": ["reverse", "sort", "counter", "VAR_0", "by", "value"], "token": ["sorted", "(", "list", "(", "VAR_0", ".", "items", "(", ")", ")", ",", "key", "=", "lambda", "pair", ":", "pair", "[", "1", "]", ",", "reverse", "=", "True", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "sorted(list(x.items()), key=lambda pair: pair[1], reverse=True)", "decano_code": "sorted(list(x.items()), key=lambda pair: pair[1], reverse=True)", "raw_code": "sorted(list(x.items()), key=lambda pair: pair[1], reverse=True)", "str_map": {}, "var_map": {"x": "VAR_0"}}
{"src": ["append", "a", "numpy", "array", "_STR:0_", "to", "a", "numpy", "array", "_STR:1_"], "token": ["np", ".", "vstack", "(", "(", "a", ",", "b", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "np.vstack((a, b))", "decano_code": "np.vstack((a, b))", "raw_code": "np.vstack((a, b))", "str_map": {"b": "_STR:0_", "a": "_STR:1_"}, "var_map": {}}
{"src": ["numpy", "concatenate", "two", "arrays", "VAR_0", "and", "VAR_0", "along", "the", "first", "axis"], "token": ["print", "(", "concatenate", "(", "(", "VAR_0", ",", "VAR_0", ")", ",", "axis", "=", "0", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "print(concatenate((a, b), axis=0))", "decano_code": "print(concatenate((a, b), axis=0))", "raw_code": "print(concatenate((a, b), axis=0))", "str_map": {}, "var_map": {"a": "VAR_0", "b": "VAR_0"}}
{"src": ["numpy", "concatenate", "two", "arrays", "VAR_0", "and", "VAR_0", "along", "the", "second", "axis"], "token": ["print", "(", "concatenate", "(", "(", "VAR_0", ",", "VAR_0", ")", ",", "axis", "=", "1", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "print(concatenate((a, b), axis=1))", "decano_code": "print(concatenate((a, b), axis=1))", "raw_code": "print(concatenate((a, b), axis=1))", "str_map": {}, "var_map": {"a": "VAR_0", "b": "VAR_0"}}
{"src": ["numpy", "concatenate", "two", "arrays", "VAR_0", "and", "VAR_0", "along", "the", "first", "axis"], "token": ["c", "=", "np", ".", "r_", "[", "(", "VAR_0", "[", "None", ",", ":", "]", ",", "VAR_0", "[", "None", ",", ":", "]", ")", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "KEYWORD", "OP", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "OP", "OP", "OP", "OP", "OP"], "cano_code": "c = np.r_[(a[None, :], b[None, :])]", "decano_code": "c = np.r_[(a[None, :], b[None, :])]", "raw_code": "c = np.r_[(a[None, :], b[None, :])]", "str_map": {}, "var_map": {"a": "VAR_0", "b": "VAR_0"}}
{"src": ["numpy", "concatenate", "two", "arrays", "VAR_0", "and", "VAR_0", "along", "the", "first", "axis"], "token": ["np", ".", "array", "(", "(", "VAR_0", ",", "VAR_0", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "np.array((a, b))", "decano_code": "np.array((a, b))", "raw_code": "np.array((a, b))", "str_map": {}, "var_map": {"a": "VAR_0", "b": "VAR_0"}}
{"src": ["fetch", "address", "information", "for", "host", "_STR:0_", "ion", "port", "80"], "token": ["print", "(", "socket", ".", "getaddrinfo", "(", "\" _STR:0_ \"", ",", "80", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NUMBER", "OP", "OP"], "cano_code": "print(socket.getaddrinfo(\" _STR:0_ \", 80))", "decano_code": "print(socket.getaddrinfo(\" _STR:0_ \", 80))", "raw_code": "print(socket.getaddrinfo('google.com', 80))", "str_map": {"google.com": "_STR:0_"}, "var_map": {}}
{"src": ["add", "a", "column", "_STR:0_", "with", "value", "_STR:1_", "to", "dataframe", "VAR_0"], "token": ["VAR_0", ".", "xs", "(", "\" _STR:1_ \"", ",", "level", "=", "\" _STR:0_ \"", ",", "drop_level", "=", "False", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df.xs(\" _STR:1_ \", level=\" _STR:0_ \", drop_level=False)", "decano_code": "df.xs(\" _STR:1_ \", level=\" _STR:0_ \", drop_level=False)", "raw_code": "df.xs('sat', level='day', drop_level=False)", "str_map": {"day": "_STR:0_", "sat": "_STR:1_"}, "var_map": {"df": "VAR_0"}}
{"src": ["return", "a", "401", "unauthorized", "in", "django"], "token": ["return", "HttpResponse", "(", "'Unauthorized'", ",", "status", "=", "401", ")"], "type": ["KEYWORD", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "return HttpResponse('Unauthorized', status=401)", "decano_code": "return HttpResponse('Unauthorized', status=401)", "raw_code": "return HttpResponse('Unauthorized', status=401)", "str_map": {}, "var_map": {}}
{"src": ["flask", "set", "folder", "_STR:0_", "as", "the", "default", "template", "folder"], "token": ["Flask", "(", "__name__", ",", "template_folder", "=", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "Flask(__name__, template_folder=\" _STR:0_ \")", "decano_code": "Flask(__name__, template_folder=\" _STR:0_ \")", "raw_code": "Flask(__name__, template_folder='wherever')", "str_map": {"wherever": "_STR:0_"}, "var_map": {}}
{"src": ["how", "do", "i", "INSERT", "INTO", "t1", "(SELECT", "*", "FROM", "t2", ")", "in", "SQLAlchemy", "?"], "token": ["session", ".", "execute", "(", "'INSERT INTO t1 (SELECT * FROM t2)'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "session.execute('INSERT INTO t1 (SELECT * FROM t2)')", "decano_code": "session.execute('INSERT INTO t1 (SELECT * FROM t2)')", "raw_code": "session.execute('INSERT INTO t1 (SELECT * FROM t2)')", "str_map": {}, "var_map": {}}
{"src": ["sort", "a", "list", "of", "lists", "_STR:0_", "such", "that", "third", "row", "comes", "first"], "token": ["c2", ".", "sort", "(", "key", "=", "lambda", "row", ":", "row", "[", "2", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "c2.sort(key=lambda row: row[2])", "decano_code": "c2.sort(key=lambda row: row[2])", "raw_code": "c2.sort(key=lambda row: row[2])", "str_map": {"c2": "_STR:0_"}, "var_map": {}}
{"src": ["sorting", "a", "list", "of", "lists", "in", "python"], "token": ["c2", ".", "sort", "(", "key", "=", "lambda", "row", ":", "(", "row", "[", "2", "]", ",", "row", "[", "1", "]", ",", "row", "[", "0", "]", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "c2.sort(key=lambda row: (row[2], row[1], row[0]))", "decano_code": "c2.sort(key=lambda row: (row[2], row[1], row[0]))", "raw_code": "c2.sort(key=lambda row: (row[2], row[1], row[0]))", "str_map": {}, "var_map": {}}
{"src": ["sorting", "a", "list", "of", "lists", "in", "python"], "token": ["c2", ".", "sort", "(", "key", "=", "lambda", "row", ":", "(", "row", "[", "2", "]", ",", "row", "[", "1", "]", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "c2.sort(key=lambda row: (row[2], row[1]))", "decano_code": "c2.sort(key=lambda row: (row[2], row[1]))", "raw_code": "c2.sort(key=lambda row: (row[2], row[1]))", "str_map": {}, "var_map": {}}
{"src": ["set", "font", "VAR_0", "to", "display", "non-ascii", "characters", "in", "matplotlib"], "token": ["matplotlib", ".", "rc", "(", "'font'", ",", "**", "{", "'sans-serif'", ":", "'Arial'", ",", "'family'", ":", "'sans-serif'", "}", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "matplotlib.rc('font', **{'sans-serif': 'Arial', 'family': 'sans-serif'})", "decano_code": "matplotlib.rc('font', **{'sans-serif': 'Arial', 'family': 'sans-serif'})", "raw_code": "matplotlib.rc('font', **{'sans-serif': 'Arial', 'family': 'sans-serif'})", "str_map": {}, "var_map": {"Arial": "VAR_0"}}
{"src": ["convert", "DateTime", "column", "_STR:0_", "of", "pandas", "dataframe", "_STR:1_", "to", "ordinal"], "token": ["df", "[", "\" _STR:0_ \"", "]", ".", "apply", "(", "lambda", "x", ":", "x", ".", "toordinal", "(", ")", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "df[\" _STR:0_ \"].apply(lambda x: x.toordinal())", "decano_code": "df[\" _STR:0_ \"].apply(lambda x: x.toordinal())", "raw_code": "df['date'].apply(lambda x: x.toordinal())", "str_map": {"date": "_STR:0_", "df": "_STR:1_"}, "var_map": {}}
{"src": ["get", "html", "source", "of", "selenium", "WebElement", "VAR_0"], "token": ["VAR_0", ".", "get_attribute", "(", "'innerHTML'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "element.get_attribute('innerHTML')", "decano_code": "element.get_attribute('innerHTML')", "raw_code": "element.get_attribute('innerHTML')", "str_map": {}, "var_map": {"element": "VAR_0"}}
{"src": ["get", "the", "integer", "location", "of", "a", "key", "VAR_0", "in", "a", "pandas", "data", "frame"], "token": ["df", ".", "index", ".", "get_loc", "(", "'bob'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df.index.get_loc('bob')", "decano_code": "df.index.get_loc('bob')", "raw_code": "df.index.get_loc('bob')", "str_map": {}, "var_map": {"bob": "VAR_0"}}
{"src": ["open", "a", "_STR:0_", "terminal", "from", "python", "script", "and", "run", "_STR:1_", "command", "."], "token": ["os", ".", "system", "(", "'gnome-terminal -e \\'bash -c \"sudo apt-get update; exec bash\"\\''", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "os.system('gnome-terminal -e \\'bash -c \"sudo apt-get update; exec bash\"\\'')", "decano_code": "os.system('gnome-terminal -e \\'bash -c \"sudo apt-get update; exec bash\"\\'')", "raw_code": "os.system('gnome-terminal -e \\'bash -c \"sudo apt-get update; exec bash\"\\'')", "str_map": {"gnome": "_STR:0_", "sudo apt-get update": "_STR:1_"}, "var_map": {}}
{"src": ["add", "an", "item", "with", "key", "_STR:0_", "and", "value", "1", "to", "an", "dictionary", "VAR_0"], "token": ["VAR_0", ".", "update", "(", "{", "\" _STR:0_ \"", ":", "1", "}", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "OP"], "cano_code": "my_dict.update({\" _STR:0_ \": 1})", "decano_code": "my_dict.update({\" _STR:0_ \": 1})", "raw_code": "my_dict.update({'third_key': 1})", "str_map": {"third_key": "_STR:0_"}, "var_map": {"my_dict": "VAR_0"}}
{"src": ["declare", "an", "array"], "token": ["my_list", "=", "[", "]"], "type": ["NAME", "OP", "OP", "OP"], "cano_code": "my_list = []", "decano_code": "my_list = []", "raw_code": "my_list = []", "str_map": {}, "var_map": {}}
{"src": ["insert", "item", "VAR_0", "to", "a", "list", "VAR_0"], "token": ["VAR_0", ".", "append", "(", "12", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "my_list.append(12)", "decano_code": "my_list.append(12)", "raw_code": "my_list.append(12)", "str_map": {}, "var_map": {"12": "VAR_0", "my_list": "VAR_0"}}
{"src": ["add", "an", "entry", "_STR:0_", "at", "the", "beginning", "of", "list", "VAR_0"], "token": ["VAR_0", ".", "insert", "(", "0", ",", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP", "STRING", "OP"], "cano_code": "myList.insert(0, \" _STR:0_ \")", "decano_code": "myList.insert(0, \" _STR:0_ \")", "raw_code": "myList.insert(0, 'wuggah')", "str_map": {"wuggah": "_STR:0_"}, "var_map": {"myList": "VAR_0"}}
{"src": ["convert", "a", "hex-string", "representation", "to", "actual", "bytes"], "token": ["\"\"\"\\\\xF3\\\\xBE\\\\x80\\\\x80\"\"\"", ".", "replace", "(", "'\\\\x'", ",", "''", ")", ".", "decode", "(", "'hex'", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "\"\"\"\\\\xF3\\\\xBE\\\\x80\\\\x80\"\"\".replace('\\\\x', '').decode('hex')", "decano_code": "\"\"\"\\\\xF3\\\\xBE\\\\x80\\\\x80\"\"\".replace('\\\\x', '').decode('hex')", "raw_code": "\"\"\"\\\\xF3\\\\xBE\\\\x80\\\\x80\"\"\".replace('\\\\x', '').decode('hex')", "str_map": {}, "var_map": {}}
{"src": ["select", "the", "last", "column", "of", "dataframe", "VAR_0"], "token": ["VAR_0", "[", "VAR_0", ".", "columns", "[", "-", "1", "]", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "df[df.columns[-1]]", "decano_code": "df[df.columns[-1]]", "raw_code": "df[df.columns[-1]]", "str_map": {}, "var_map": {"df": "VAR_0"}}
{"src": ["get", "the", "first", "value", "from", "dataframe", "VAR_0", "where", "column", "_STR:0_", "is", "equal", "to", "_STR:1_"], "token": ["VAR_0", ".", "loc", "[", "VAR_0", "[", "\" _STR:0_ \"", "]", "==", "\" _STR:1_ \"", ",", "\" _STR:0_ \"", "]", ".", "values", "[", "0", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "df.loc[df[\" _STR:0_ \"] == \" _STR:1_ \", \" _STR:0_ \"].values[0]", "decano_code": "df.loc[df[\" _STR:0_ \"] == \" _STR:1_ \", \" _STR:0_ \"].values[0]", "raw_code": "df.loc[df['Letters'] == 'C', 'Letters'].values[0]", "str_map": {"Letters": "_STR:0_", "C": "_STR:1_"}, "var_map": {"df": "VAR_0"}}
{"src": ["converting", "two", "lists", "VAR_0", "and", "VAR_0", "into", "a", "matrix"], "token": ["np", ".", "column_stack", "(", "(", "[", "1", ",", "2", ",", "3", "]", ",", "[", "4", ",", "5", ",", "6", "]", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "np.column_stack(([1, 2, 3], [4, 5, 6]))", "decano_code": "np.column_stack(([1, 2, 3], [4, 5, 6]))", "raw_code": "np.column_stack(([1, 2, 3], [4, 5, 6]))", "str_map": {}, "var_map": {"[1, 2, 3]": "VAR_0", "[4, 5, 6]": "VAR_0"}}
{"src": ["get", "the", "type", "of", "VAR_0"], "token": ["type", "(", "VAR_0", ")"], "type": ["KEYWORD", "OP", "NAME", "OP"], "cano_code": "type(i)", "decano_code": "type(i)", "raw_code": "type(i)", "str_map": {}, "var_map": {"i": "VAR_0"}}
{"src": ["determine", "the", "type", "of", "variable", "VAR_0"], "token": ["type", "(", "VAR_0", ")"], "type": ["KEYWORD", "OP", "NAME", "OP"], "cano_code": "type(v)", "decano_code": "type(v)", "raw_code": "type(v)", "str_map": {}, "var_map": {"v": "VAR_0"}}
{"src": ["determine", "the", "type", "of", "variable", "VAR_0"], "token": ["type", "(", "VAR_0", ")"], "type": ["KEYWORD", "OP", "NAME", "OP"], "cano_code": "type(v)", "decano_code": "type(v)", "raw_code": "type(v)", "str_map": {}, "var_map": {"v": "VAR_0"}}
{"src": ["determine", "the", "type", "of", "variable", "VAR_0"], "token": ["type", "(", "VAR_0", ")"], "type": ["KEYWORD", "OP", "NAME", "OP"], "cano_code": "type(v)", "decano_code": "type(v)", "raw_code": "type(v)", "str_map": {}, "var_map": {"v": "VAR_0"}}
{"src": ["determine", "the", "type", "of", "variable", "VAR_0"], "token": ["type", "(", "VAR_0", ")"], "type": ["KEYWORD", "OP", "NAME", "OP"], "cano_code": "type(v)", "decano_code": "type(v)", "raw_code": "type(v)", "str_map": {}, "var_map": {"v": "VAR_0"}}
{"src": ["get", "the", "type", "of", "variable", "VAR_0"], "token": ["print", "(", "type", "(", "VAR_0", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "print(type(variable_name))", "decano_code": "print(type(variable_name))", "raw_code": "print(type(variable_name))", "str_map": {}, "var_map": {"variable_name": "VAR_0"}}
{"src": ["get", "the", "5th", "item", "of", "a", "generator"], "token": ["next", "(", "itertools", ".", "islice", "(", "range", "(", "10", ")", ",", "5", ",", "5", "+", "1", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "next(itertools.islice(range(10), 5, 5 + 1))", "decano_code": "next(itertools.islice(range(10), 5, 5 + 1))", "raw_code": "next(itertools.islice(range(10), 5, 5 + 1))", "str_map": {}, "var_map": {}}
{"src": ["print", "a", "string", "VAR_0", "with", "string", "format"], "token": ["print", "(", "'\"{}\"'", ".", "format", "(", "VAR_0", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "print('\"{}\"'.format(word))", "decano_code": "print('\"{}\"'.format(word))", "raw_code": "print('\"{}\"'.format(word))", "str_map": {}, "var_map": {"word": "VAR_0"}}
{"src": ["join", "a", "list", "of", "strings", "VAR_0", "using", "a", "space", "_STR:0_"], "token": ["\" _STR:0_ \"", ".", "join", "(", "list", ")"], "type": ["STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "\" _STR:0_ \".join(list)", "decano_code": "\" _STR:0_ \".join(list)", "raw_code": "\"\"\" \"\"\".join(list)", "str_map": {" ": "_STR:0_"}, "var_map": {"list": "VAR_0"}}
{"src": ["create", "list", "VAR_0", "containing", "two", "empty", "lists"], "token": ["VAR_0", "=", "[", "[", "]", "for", "n", "in", "range", "(", "2", ")", "]"], "type": ["NAME", "OP", "OP", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "OP"], "cano_code": "y = [[] for n in range(2)]", "decano_code": "y = [[] for n in range(2)]", "raw_code": "y = [[] for n in range(2)]", "str_map": {}, "var_map": {"y": "VAR_0"}}
{"src": ["read", "a", "file", "_STR:0_", "into", "a", "list", "VAR_0"], "token": ["VAR_0", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "open", "(", "\" _STR:0_ \"", ",", "'r'", ")", "]"], "type": ["NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "data = [line.strip() for line in open(\" _STR:0_ \", 'r')]", "decano_code": "data = [line.strip() for line in open(\" _STR:0_ \", 'r')]", "raw_code": "data = [line.strip() for line in open('C:/name/MyDocuments/numbers', 'r')]", "str_map": {"C:/name/MyDocuments/numbers": "_STR:0_"}, "var_map": {"data": "VAR_0"}}
{"src": ["delete", "all", "occurrences", "of", "character", "_STR:0_", "in", "string", "_STR:1_"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "[", "char", "for", "char", "in", "\" _STR:1_ \"", "if", "char", "!=", "\" _STR:0_ \"", "]", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "STRING", "KEYWORD", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "\"\"\"\"\"\".join([char for char in \" _STR:1_ \" if char != \" _STR:0_ \"])", "decano_code": "\"\"\"\"\"\".join([char for char in \" _STR:1_ \" if char != \" _STR:0_ \"])", "raw_code": "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])", "str_map": {"i": "_STR:0_", "it is icy": "_STR:1_"}, "var_map": {}}
{"src": ["delete", "all", "instances", "of", "a", "character", "_STR:0_", "in", "a", "string", "_STR:1_"], "token": ["re", ".", "sub", "(", "\" _STR:0_ \"", ",", "''", ",", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.sub(\" _STR:0_ \", '', \" _STR:1_ \")", "decano_code": "re.sub(\" _STR:0_ \", '', \" _STR:1_ \")", "raw_code": "re.sub('i', '', 'it is icy')", "str_map": {"i": "_STR:0_", "it is icy": "_STR:1_"}, "var_map": {}}
{"src": ["delete", "all", "characters", "_STR:0_", "in", "string", "_STR:1_"], "token": ["\" _STR:1_ \"", ".", "replace", "(", "\" _STR:0_ \"", ",", "''", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "\" _STR:1_ \".replace(\" _STR:0_ \", '')", "decano_code": "\" _STR:1_ \".replace(\" _STR:0_ \", '')", "raw_code": "\"\"\"it is icy\"\"\".replace('i', '')", "str_map": {"i": "_STR:0_", "it is icy": "_STR:1_"}, "var_map": {}}
{"src": ["how", "to", "delete", "all", "instances", "of", "a", "character", "in", "a", "string", "in", "python", "?"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "[", "char", "for", "char", "in", "'it is icy'", "if", "char", "!=", "'i'", "]", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "STRING", "KEYWORD", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])", "decano_code": "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])", "raw_code": "\"\"\"\"\"\".join([char for char in 'it is icy' if char != 'i'])", "str_map": {}, "var_map": {}}
{"src": ["drop", "rows", "of", "pandas", "dataframe", "VAR_0", "having", "NaN", "in", "column", "at", "index", "_STR:0_"], "token": ["VAR_0", ".", "dropna", "(", "subset", "=", "[", "1", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "df.dropna(subset=[1])", "decano_code": "df.dropna(subset=[1])", "raw_code": "df.dropna(subset=[1])", "str_map": {"1": "_STR:0_"}, "var_map": {"df": "VAR_0"}}
{"src": ["get", "elements", "from", "list", "VAR_0", ",", "that", "have", "a", "field", "VAR_0", "value", "30"], "token": ["[", "x", "for", "x", "in", "VAR_0", "if", "x", ".", "VAR_0", "==", "30", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "[x for x in myList if x.n == 30]", "decano_code": "[x for x in myList if x.n == 30]", "raw_code": "[x for x in myList if x.n == 30]", "str_map": {}, "var_map": {"myList": "VAR_0", "n": "VAR_0"}}
{"src": ["converting", "list", "of", "strings", "VAR_0", "to", "list", "of", "integer", "VAR_0"], "token": ["VAR_0", "=", "[", "int", "(", "x", ")", "for", "x", "in", "VAR_0", "]"], "type": ["NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "nums = [int(x) for x in intstringlist]", "decano_code": "nums = [int(x) for x in intstringlist]", "raw_code": "nums = [int(x) for x in intstringlist]", "str_map": {}, "var_map": {"intstringlist": "VAR_0", "nums": "VAR_0"}}
{"src": ["convert", "list", "of", "string", "numbers", "into", "list", "of", "integers"], "token": ["map", "(", "int", ",", "eval", "(", "input", "(", "'Enter the unfriendly numbers: '", ")", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "map(int, eval(input('Enter the unfriendly numbers: ')))", "decano_code": "map(int, eval(input('Enter the unfriendly numbers: ')))", "raw_code": "map(int, eval(input('Enter the unfriendly numbers: ')))", "str_map": {}, "var_map": {}}
{"src": ["print", "_STR:0_", "without", "newline"], "token": ["sys", ".", "stdout", ".", "write", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "sys.stdout.write(\" _STR:0_ \")", "decano_code": "sys.stdout.write(\" _STR:0_ \")", "raw_code": "sys.stdout.write('.')", "str_map": {".": "_STR:0_"}, "var_map": {}}
{"src": ["round", "off", "the", "float", "that", "is", "the", "product", "of", "VAR_0", "[", "2", ".", "52", "*", "100", "]", "and", "convert", "it", "to", "an", "int"], "token": ["int", "(", "round", "(", "2.51", "*", "100", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "int(round(2.51 * 100))", "decano_code": "int(round(2.51 * 100))", "raw_code": "int(round(2.51 * 100))", "str_map": {}, "var_map": {"2.52 * 100": "VAR_0"}}
{"src": ["find", "all", "files", "in", "directory", "_STR:0_", "with", "extension", "_STR:1_"], "token": ["os", ".", "chdir", "(", "\" _STR:0_ \"", ")", "\n", "for", "file", "in", "glob", ".", "glob", "(", "'*.txt'", ")", ":", "\n", "    ", "pass", ""], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NEWLINE", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "os.chdir(\" _STR:0_ \")\nfor file in glob.glob('*.txt'):\n    pass", "decano_code": "os.chdir(\" _STR:0_ \")\nfor file in glob.glob('*.txt'):\n    pass", "raw_code": "os.chdir('/mydir')\nfor file in glob.glob('*.txt'):\n    pass", "str_map": {"/mydir": "_STR:0_", ".txt": "_STR:1_"}, "var_map": {}}
{"src": ["find", "all", "files", "in", "directory", "_STR:0_", "with", "extension", "_STR:1_"], "token": ["for", "file", "in", "os", ".", "listdir", "(", "\" _STR:0_ \"", ")", ":", "\n", "    ", "if", "file", ".", "endswith", "(", "\" _STR:1_ \"", ")", ":", "\n", "        ", "pass", "", ""], "type": ["KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT", "DEDENT"], "cano_code": "for file in os.listdir(\" _STR:0_ \"):\n    if file.endswith(\" _STR:1_ \"):\n        pass", "decano_code": "for file in os.listdir(\" _STR:0_ \"):\n    if file.endswith(\" _STR:1_ \"):\n        pass", "raw_code": "for file in os.listdir('/mydir'):\n    if file.endswith('.txt'):\n        pass", "str_map": {"/mydir": "_STR:0_", ".txt": "_STR:1_"}, "var_map": {}}
{"src": ["find", "all", "files", "in", "directory", "_STR:0_", "with", "extension", "_STR:1_"], "token": ["for", "(", "root", ",", "dirs", ",", "files", ")", "in", "os", ".", "walk", "(", "\" _STR:0_ \"", ")", ":", "\n", "    ", "for", "file", "in", "files", ":", "\n", "        ", "if", "file", ".", "endswith", "(", "\" _STR:1_ \"", ")", ":", "\n", "            ", "pass", "", "", ""], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NEWLINE", "INDENT", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT", "DEDENT", "DEDENT"], "cano_code": "for (root, dirs, files) in os.walk(\" _STR:0_ \"):\n    for file in files:\n        if file.endswith(\" _STR:1_ \"):\n            pass", "decano_code": "for (root, dirs, files) in os.walk(\" _STR:0_ \"):\n    for file in files:\n        if file.endswith(\" _STR:1_ \"):\n            pass", "raw_code": "for (root, dirs, files) in os.walk('/mydir'):\n    for file in files:\n        if file.endswith('.txt'):\n            pass", "str_map": {"/mydir": "_STR:0_", ".txt": "_STR:1_"}, "var_map": {}}
{"src": ["plot", "dataframe", "VAR_0", "without", "a", "legend"], "token": ["VAR_0", ".", "plot", "(", "legend", "=", "False", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df.plot(legend=False)", "decano_code": "df.plot(legend=False)", "raw_code": "df.plot(legend=False)", "str_map": {}, "var_map": {"df": "VAR_0"}}
{"src": ["loop", "through", "the", "IP", "address", "range", "_STR:0_"], "token": ["for", "i", "in", "range", "(", "256", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "256", ")", ":", "\n", "        ", "ip", "=", "(", "'192.168.%d.%d'", "%", "(", "i", ",", "j", ")", ")", "\n", "print", "(", "ip", ")", "", ""], "type": ["KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "OP", "NEWLINE", "INDENT", "NAME", "OP", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "NEWLINE", "KEYWORD", "OP", "NAME", "OP", "DEDENT", "DEDENT"], "cano_code": "for i in range(256):\n    for j in range(256):\n        ip = ('192.168.%d.%d' % (i, j))\n        print(ip)", "decano_code": "for i in range(256):\n    for j in range(256):\n        ip = ('192.168.%d.%d' % (i, j))\n        print(ip)", "raw_code": "for i in range(256):\n    for j in range(256):\n        ip = ('192.168.%d.%d' % (i, j))\n        print(ip)", "str_map": {"192.168.x.x": "_STR:0_"}, "var_map": {}}
{"src": ["loop", "through", "the", "IP", "address", "range", "_STR:0_"], "token": ["for", "(", "i", ",", "j", ")", "in", "product", "(", "list", "(", "range", "(", "256", ")", ")", ",", "list", "(", "range", "(", "256", ")", ")", ")", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NUMBER", "OP", "OP", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NUMBER", "OP", "OP", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "for (i, j) in product(list(range(256)), list(range(256))):\n    pass", "decano_code": "for (i, j) in product(list(range(256)), list(range(256))):\n    pass", "raw_code": "for (i, j) in product(list(range(256)), list(range(256))):\n    pass", "str_map": {"192.168.x.x": "_STR:0_"}, "var_map": {}}
{"src": ["loop", "through", "the", "IP", "address", "range", "_STR:0_"], "token": ["generator", "=", "iter_iprange", "(", "'192.168.1.1'", ",", "'192.168.255.255'", ",", "step", "=", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "generator = iter_iprange('192.168.1.1', '192.168.255.255', step=1)", "decano_code": "generator = iter_iprange('192.168.1.1', '192.168.255.255', step=1)", "raw_code": "generator = iter_iprange('192.168.1.1', '192.168.255.255', step=1)", "str_map": {"192.168.x.x": "_STR:0_"}, "var_map": {}}
{"src": ["sum", "the", "corresponding", "decimal", "values", "for", "binary", "values", "of", "each", "boolean", "element", "in", "list", "VAR_0"], "token": ["sum", "(", "1", "<<", "i", "for", "i", ",", "b", "in", "enumerate", "(", "VAR_0", ")", "if", "b", ")"], "type": ["KEYWORD", "OP", "NUMBER", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP"], "cano_code": "sum(1 << i for i, b in enumerate(x) if b)", "decano_code": "sum(1 << i for i, b in enumerate(x) if b)", "raw_code": "sum(1 << i for i, b in enumerate(x) if b)", "str_map": {}, "var_map": {"x": "VAR_0"}}
{"src": ["write", "multiple", "strings", "VAR_0", ",", "VAR_0", "and", "VAR_0", "in", "one", "line", "in", "a", "file", "VAR_0"], "token": ["VAR_0", ".", "write", "(", "'%r\\n%r\\n%r\\n'", "%", "(", "VAR_0", ",", "VAR_0", ",", "VAR_0", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "target.write('%r\\n%r\\n%r\\n' % (line1, line2, line3))", "decano_code": "target.write('%r\\n%r\\n%r\\n' % (line1, line2, line3))", "raw_code": "target.write('%r\\n%r\\n%r\\n' % (line1, line2, line3))", "str_map": {}, "var_map": {"line1": "VAR_0", "line2": "VAR_0", "line3": "VAR_0", "target": "VAR_0"}}
{"src": ["convert", "list", "of", "lists", "VAR_0", "into", "a", "flat", "list"], "token": ["[", "y", "for", "x", "in", "VAR_0", "for", "y", "in", "(", "x", "if", "isinstance", "(", "x", ",", "list", ")", "else", "[", "x", "]", ")", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "[y for x in data for y in (x if isinstance(x, list) else [x])]", "decano_code": "[y for x in data for y in (x if isinstance(x, list) else [x])]", "raw_code": "[y for x in data for y in (x if isinstance(x, list) else [x])]", "str_map": {}, "var_map": {"data": "VAR_0"}}
{"src": ["print", "new", "line", "character", "as", "VAR_0", "in", "a", "string", "VAR_0"], "token": ["print", "(", "'foo\\nbar'", ".", "encode", "(", "'string_escape'", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "print('foo\\nbar'.encode('string_escape'))", "decano_code": "print('foo\\nbar'.encode('string_escape'))", "raw_code": "print('foo\\nbar'.encode('string_escape'))", "str_map": {}, "var_map": {"\\n": "VAR_0", "foo\\nbar": "VAR_0"}}
{"src": ["remove", "last", "comma", "character", "_STR:0_", "in", "string", "VAR_0"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "VAR_0", ".", "rsplit", "(", "\" _STR:0_ \"", ",", "1", ")", ")"], "type": ["STRING", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NUMBER", "OP", "OP"], "cano_code": "\"\"\"\"\"\".join(s.rsplit(\" _STR:0_ \", 1))", "decano_code": "\"\"\"\"\"\".join(s.rsplit(\" _STR:0_ \", 1))", "raw_code": "\"\"\"\"\"\".join(s.rsplit(',', 1))", "str_map": {",": "_STR:0_"}, "var_map": {"s": "VAR_0"}}
{"src": ["calculate", "the", "mean", "of", "each", "element", "in", "array", "VAR_0", "with", "the", "element", "previous", "to", "it"], "token": ["(", "VAR_0", "[", "1", ":", "]", "+", "VAR_0", "[", ":", "-", "1", "]", ")", "/", "2"], "type": ["OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER"], "cano_code": "(x[1:] + x[:-1]) / 2", "decano_code": "(x[1:] + x[:-1]) / 2", "raw_code": "(x[1:] + x[:-1]) / 2", "str_map": {}, "var_map": {"x": "VAR_0"}}
{"src": ["get", "an", "array", "of", "the", "mean", "of", "each", "two", "consecutive", "values", "in", "numpy", "array", "VAR_0"], "token": ["VAR_0", "[", ":", "-", "1", "]", "+", "(", "VAR_0", "[", "1", ":", "]", "-", "VAR_0", "[", ":", "-", "1", "]", ")", "/", "2"], "type": ["NAME", "OP", "OP", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER"], "cano_code": "x[:-1] + (x[1:] - x[:-1]) / 2", "decano_code": "x[:-1] + (x[1:] - x[:-1]) / 2", "raw_code": "x[:-1] + (x[1:] - x[:-1]) / 2", "str_map": {}, "var_map": {"x": "VAR_0"}}
{"src": ["load", "data", "containing", "VAR_0", "from", "file", "VAR_0", "[", "new", ".", "txt", "]", "into", "numpy", "array", "VAR_0"], "token": ["VAR_0", "=", "numpy", ".", "fromiter", "(", "codecs", ".", "open", "(", "'new.txt'", ",", "encoding", "=", "'utf-8'", ")", ",", "dtype", "=", "'<U2'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "arr = numpy.fromiter(codecs.open('new.txt', encoding='utf-8'), dtype='<U2')", "decano_code": "arr = numpy.fromiter(codecs.open('new.txt', encoding='utf-8'), dtype='<U2')", "raw_code": "arr = numpy.fromiter(codecs.open('new.txt', encoding='utf-8'), dtype='<U2')", "str_map": {}, "var_map": {"utf-8": "VAR_0", "new.txt": "VAR_0", "arr": "VAR_0"}}
{"src": ["reverse", "sort", "list", "of", "dicts", "VAR_0", "by", "value", "for", "key", "VAR_0"], "token": ["VAR_0", "=", "sorted", "(", "VAR_0", ",", "key", "=", "itemgetter", "(", "'time'", ")", ",", "reverse", "=", "True", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "l = sorted(l, key=itemgetter('time'), reverse=True)", "decano_code": "l = sorted(l, key=itemgetter('time'), reverse=True)", "raw_code": "l = sorted(l, key=itemgetter('time'), reverse=True)", "str_map": {}, "var_map": {"l": "VAR_0", "time": "VAR_0"}}
{"src": ["sort", "a", "list", "of", "dictionary", "VAR_0", "based", "on", "key", "VAR_0", "in", "descending", "order"], "token": ["VAR_0", "=", "sorted", "(", "VAR_0", ",", "key", "=", "lambda", "a", ":", "a", "[", "'time'", "]", ",", "reverse", "=", "True", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "l = sorted(l, key=lambda a: a['time'], reverse=True)", "decano_code": "l = sorted(l, key=lambda a: a['time'], reverse=True)", "raw_code": "l = sorted(l, key=lambda a: a['time'], reverse=True)", "str_map": {}, "var_map": {"l": "VAR_0", "time": "VAR_0"}}
{"src": ["get", "rows", "of", "dataframe", "VAR_0", "that", "match", "regex", "_STR:0_"], "token": ["VAR_0", ".", "loc", "[", "VAR_0", "[", "0", "]", ".", "str", ".", "contains", "(", "\" _STR:0_ \"", ")", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "df.loc[df[0].str.contains(\" _STR:0_ \")]", "decano_code": "df.loc[df[0].str.contains(\" _STR:0_ \")]", "raw_code": "df.loc[df[0].str.contains('(Hel|Just)')]", "str_map": {"(Hel|Just)": "_STR:0_"}, "var_map": {"df": "VAR_0"}}
{"src": ["find", "the", "string", "in", "VAR_0", "between", "two", "special", "characters", "_STR:0_", "and", "_STR:1_"], "token": ["re", ".", "search", "(", "'\\\\[(.*)\\\\]'", ",", "VAR_0", ")", ".", "group", "(", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "re.search('\\\\[(.*)\\\\]', your_string).group(1)", "decano_code": "re.search('\\\\[(.*)\\\\]', your_string).group(1)", "raw_code": "re.search('\\\\[(.*)\\\\]', your_string).group(1)", "str_map": {"[": "_STR:0_", "]": "_STR:1_"}, "var_map": {"your_string": "VAR_0"}}
{"src": ["how", "to", "create", "a", "list", "of", "date", "string", "in", "_STR:0_", "format", "with", "python", "pandas", "?"], "token": ["[", "d", ".", "strftime", "(", "'%Y%m%d'", ")", "for", "d", "in", "pandas", ".", "date_range", "(", "'20130226'", ",", "'20130302'", ")", "]"], "type": ["OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "[d.strftime('%Y%m%d') for d in pandas.date_range('20130226', '20130302')]", "decano_code": "[d.strftime('%Y%m%d') for d in pandas.date_range('20130226', '20130302')]", "raw_code": "[d.strftime('%Y%m%d') for d in pandas.date_range('20130226', '20130302')]", "str_map": {"yyyymmdd": "_STR:0_"}, "var_map": {}}
{"src": ["count", "number", "of", "times", "string", "_STR:0_", "occurred", "in", "string", "_STR:1_"], "token": ["\" _STR:1_ \"", ".", "count", "(", "\" _STR:0_ \"", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "\" _STR:1_ \".count(\" _STR:0_ \")", "decano_code": "\" _STR:1_ \".count(\" _STR:0_ \")", "raw_code": "\"\"\"The big brown fox is brown\"\"\".count('brown')", "str_map": {"brown": "_STR:0_", "The big brown fox is brown": "_STR:1_"}, "var_map": {}}
{"src": ["decode", "json", "string", "VAR_0", "[", "request", ".", "body", "]", "to", "python", "dict"], "token": ["json", ".", "loads", "(", "request", ".", "body", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "json.loads(request.body)", "decano_code": "json.loads(request.body)", "raw_code": "json.loads(request.body)", "str_map": {}, "var_map": {"request.body": "VAR_0"}}
{"src": ["download", "the", "file", "from", "url", "VAR_0", "and", "save", "it", "under", "file", "VAR_0"], "token": ["urllib", ".", "request", ".", "urlretrieve", "(", "VAR_0", ",", "VAR_0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "urllib.request.urlretrieve(url, file_name)", "decano_code": "urllib.request.urlretrieve(url, file_name)", "raw_code": "urllib.request.urlretrieve(url, file_name)", "str_map": {}, "var_map": {"url": "VAR_0", "file_name": "VAR_0"}}
{"src": ["split", "string", "VAR_0", "by", "space"], "token": ["VAR_0", ".", "split", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "text.split()", "decano_code": "text.split()", "raw_code": "text.split()", "str_map": {}, "var_map": {"text": "VAR_0"}}
{"src": ["split", "string", "VAR_0", "by", "_STR:0_"], "token": ["VAR_0", ".", "split", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "text.split(\" _STR:0_ \")", "decano_code": "text.split(\" _STR:0_ \")", "raw_code": "text.split(',')", "str_map": {",": "_STR:0_"}, "var_map": {"text": "VAR_0"}}
{"src": ["split", "string", "VAR_0", "into", "a", "list", "by", "whitespace"], "token": ["VAR_0", ".", "split", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "line.split()", "decano_code": "line.split()", "raw_code": "line.split()", "str_map": {}, "var_map": {"line": "VAR_0"}}
{"src": ["replace", "dot", "characters", "_STR:0_", "associated", "with", "ascii", "letters", "in", "list", "VAR_0", "with", "space", "_STR:1_"], "token": ["[", "re", ".", "sub", "(", "'(?<!\\\\d)\\\\.(?!\\\\d)'", ",", "\" _STR:1_ \"", ",", "i", ")", "for", "i", "in", "VAR_0", "]"], "type": ["OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[re.sub('(?<!\\\\d)\\\\.(?!\\\\d)', \" _STR:1_ \", i) for i in s]", "decano_code": "[re.sub('(?<!\\\\d)\\\\.(?!\\\\d)', \" _STR:1_ \", i) for i in s]", "raw_code": "[re.sub('(?<!\\\\d)\\\\.(?!\\\\d)', ' ', i) for i in s]", "str_map": {".": "_STR:0_", " ": "_STR:1_"}, "var_map": {"s": "VAR_0"}}
{"src": ["sort", "list", "VAR_0", "based", "on", "second", "index", "of", "each", "string", "VAR_0"], "token": ["sorted", "(", "VAR_0", ",", "key", "=", "lambda", "VAR_0", ":", "VAR_0", ".", "split", "(", "','", ")", "[", "1", "]", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "sorted(list_of_strings, key=lambda s: s.split(',')[1])", "decano_code": "sorted(list_of_strings, key=lambda s: s.split(',')[1])", "raw_code": "sorted(list_of_strings, key=lambda s: s.split(',')[1])", "str_map": {}, "var_map": {"list_of_strings": "VAR_0", "s": "VAR_0"}}
{"src": ["call", "multiple", "bash", "function", "\u2018vasp\u2019", "and", "\u2018tee", "tee_output\u2019", "using", "\u2018|\u2019"], "token": ["subprocess", ".", "check_call", "(", "'vasp | tee tee_output'", ",", "shell", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "subprocess.check_call('vasp | tee tee_output', shell=True)", "decano_code": "subprocess.check_call('vasp | tee tee_output', shell=True)", "raw_code": "subprocess.check_call('vasp | tee tee_output', shell=True)", "str_map": {}, "var_map": {}}
{"src": ["eliminate", "all", "strings", "from", "list", "VAR_0"], "token": ["[", "element", "for", "element", "in", "VAR_0", "if", "isinstance", "(", "element", ",", "int", ")", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "OP", "OP"], "cano_code": "[element for element in lst if isinstance(element, int)]", "decano_code": "[element for element in lst if isinstance(element, int)]", "raw_code": "[element for element in lst if isinstance(element, int)]", "str_map": {}, "var_map": {"lst": "VAR_0"}}
{"src": ["get", "all", "the", "elements", "except", "strings", "from", "the", "list", "_STR:0_", "."], "token": ["[", "element", "for", "element", "in", "lst", "if", "not", "isinstance", "(", "element", ",", "str", ")", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "OP", "OP"], "cano_code": "[element for element in lst if not isinstance(element, str)]", "decano_code": "[element for element in lst if not isinstance(element, str)]", "raw_code": "[element for element in lst if not isinstance(element, str)]", "str_map": {"lst": "_STR:0_"}, "var_map": {}}
{"src": ["sort", "a", "list", "of", "dictionaries", "VAR_0", "by", "the", "value", "of", "the", "dictionary", "key", "VAR_0"], "token": ["newlist", "=", "sorted", "(", "VAR_0", ",", "key", "=", "lambda", "k", ":", "k", "[", "'name'", "]", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "newlist = sorted(list_to_be_sorted, key=lambda k: k['name'])", "decano_code": "newlist = sorted(list_to_be_sorted, key=lambda k: k['name'])", "raw_code": "newlist = sorted(list_to_be_sorted, key=lambda k: k['name'])", "str_map": {}, "var_map": {"list_to_be_sorted": "VAR_0", "name": "VAR_0"}}
{"src": ["sort", "a", "list", "of", "dictionaries", "VAR_0", "by", "values", "in", "key", "VAR_0", "in", "descending", "order"], "token": ["newlist", "=", "sorted", "(", "VAR_0", ",", "key", "=", "itemgetter", "(", "'name'", ")", ",", "reverse", "=", "True", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "newlist = sorted(l, key=itemgetter('name'), reverse=True)", "decano_code": "newlist = sorted(l, key=itemgetter('name'), reverse=True)", "raw_code": "newlist = sorted(l, key=itemgetter('name'), reverse=True)", "str_map": {}, "var_map": {"l": "VAR_0", "name": "VAR_0"}}
{"src": ["how", "do", "i", "sort", "a", "list", "of", "dictionaries", "by", "values", "of", "the", "dictionary", "in", "python", "?"], "token": ["list_of_dicts", ".", "sort", "(", "key", "=", "operator", ".", "itemgetter", "(", "'name'", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "list_of_dicts.sort(key=operator.itemgetter('name'))", "decano_code": "list_of_dicts.sort(key=operator.itemgetter('name'))", "raw_code": "list_of_dicts.sort(key=operator.itemgetter('name'))", "str_map": {}, "var_map": {}}
{"src": ["how", "do", "i", "sort", "a", "list", "of", "dictionaries", "by", "values", "of", "the", "dictionary", "in", "python", "?"], "token": ["list_of_dicts", ".", "sort", "(", "key", "=", "operator", ".", "itemgetter", "(", "'age'", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "list_of_dicts.sort(key=operator.itemgetter('age'))", "decano_code": "list_of_dicts.sort(key=operator.itemgetter('age'))", "raw_code": "list_of_dicts.sort(key=operator.itemgetter('age'))", "str_map": {}, "var_map": {}}
{"src": ["how", "to", "sort", "a", "dataframe", "by", "the", "ocurrences", "in", "a", "column", "in", "python", "(pandas", ")"], "token": ["df", ".", "groupby", "(", "'prots'", ")", ".", "sum", "(", ")", ".", "sort", "(", "'scores'", ",", "ascending", "=", "False", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "KEYWORD", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df.groupby('prots').sum().sort('scores', ascending=False)", "decano_code": "df.groupby('prots').sum().sort('scores', ascending=False)", "raw_code": "df.groupby('prots').sum().sort('scores', ascending=False)", "str_map": {}, "var_map": {}}
{"src": ["join", "together", "with", "_STR:0_", "elements", "inside", "a", "list", "indexed", "with", "_STR:1_", "within", "a", "dictionary", "VAR_0"], "token": ["\" _STR:0_ \"", ".", "join", "(", "VAR_0", "[", "\" _STR:1_ \"", "]", ")"], "type": ["STRING", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "\" _STR:0_ \".join(trans[\" _STR:1_ \"])", "decano_code": "\" _STR:0_ \".join(trans[\" _STR:1_ \"])", "raw_code": "\"\"\",\"\"\".join(trans['category'])", "str_map": {",": "_STR:0_", "category": "_STR:1_"}, "var_map": {"trans": "VAR_0"}}
{"src": ["concatenate", "array", "of", "strings", "VAR_0", "into", "a", "string"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "[", "'A'", ",", "'B'", ",", "'C'", ",", "'D'", "]", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "\"\"\"\"\"\".join(['A', 'B', 'C', 'D'])", "decano_code": "\"\"\"\"\"\".join(['A', 'B', 'C', 'D'])", "raw_code": "\"\"\"\"\"\".join(['A', 'B', 'C', 'D'])", "str_map": {}, "var_map": {"['A', 'B', 'C', 'D']": "VAR_0"}}
{"src": ["get", "json", "data", "from", "restful", "service", "_STR:0_"], "token": ["json", ".", "load", "(", "urllib", ".", "request", ".", "urlopen", "(", "\" _STR:0_ \"", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "json.load(urllib.request.urlopen(\" _STR:0_ \"))", "decano_code": "json.load(urllib.request.urlopen(\" _STR:0_ \"))", "raw_code": "json.load(urllib.request.urlopen('url'))", "str_map": {"url": "_STR:0_"}, "var_map": {}}
{"src": ["remove", "all", "strings", "from", "a", "list", "a", "strings", "VAR_0", "where", "the", "values", "starts", "with", "VAR_0", "or", "VAR_0"], "token": ["[", "x", "for", "x", "in", "VAR_0", "if", "not", "x", ".", "startswith", "(", "'@$\\t'", ")", "and", "not", "x", ".", "startswith", "(", "'#'", ")", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "[x for x in sents if not x.startswith('@$\\t') and not x.startswith('#')]", "decano_code": "[x for x in sents if not x.startswith('@$\\t') and not x.startswith('#')]", "raw_code": "[x for x in sents if not x.startswith('@$\\t') and not x.startswith('#')]", "str_map": {}, "var_map": {"sents": "VAR_0", "@$\\t": "VAR_0", "#": "VAR_0"}}
{"src": ["django", "filter", "by", "hour"], "token": ["Entry", ".", "objects", ".", "filter", "(", "pub_date__contains", "=", "'08:00'", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "Entry.objects.filter(pub_date__contains='08:00')", "decano_code": "Entry.objects.filter(pub_date__contains='08:00')", "raw_code": "Entry.objects.filter(pub_date__contains='08:00')", "str_map": {}, "var_map": {}}
{"src": ["sort", "a", "list", "of", "dictionary", "VAR_0", "first", "by", "key", "VAR_0", "and", "then", "by", "VAR_0"], "token": ["list", ".", "sort", "(", "key", "=", "lambda", "item", ":", "(", "item", "[", "'points'", "]", ",", "item", "[", "'time'", "]", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "list.sort(key=lambda item: (item['points'], item['time']))", "decano_code": "list.sort(key=lambda item: (item['points'], item['time']))", "raw_code": "list.sort(key=lambda item: (item['points'], item['time']))", "str_map": {}, "var_map": {"list": "VAR_0", "points": "VAR_0", "time": "VAR_0"}}
{"src": ["convert", "datetime", "object", "VAR_0", "to", "seconds"], "token": ["(", "t", "-", "datetime", ".", "datetime", "(", "1970", ",", "1", ",", "1", ")", ")", ".", "total_seconds", "(", ")"], "type": ["OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "(t - datetime.datetime(1970, 1, 1)).total_seconds()", "decano_code": "(t - datetime.datetime(1970, 1, 1)).total_seconds()", "raw_code": "(t - datetime.datetime(1970, 1, 1)).total_seconds()", "str_map": {}, "var_map": {"(1970, 1, 1)": "VAR_0"}}
{"src": ["insert", "VAR_0", "before", "the", "file", "extension", "in", "VAR_0", "[", "long", ".", "file", ".", "name", ".", "jpg", "]", "or", "replace", "VAR_0", "with", "VAR_0", "if", "it", "precedes", "the", "extension", "."], "token": ["re", ".", "sub", "(", "'(\\\\_a)?\\\\.([^\\\\.]*)$'", ",", "'_suff.\\\\2'", ",", "'long.file.name.jpg'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.sub('(\\\\_a)?\\\\.([^\\\\.]*)$', '_suff.\\\\2', 'long.file.name.jpg')", "decano_code": "re.sub('(\\\\_a)?\\\\.([^\\\\.]*)$', '_suff.\\\\2', 'long.file.name.jpg')", "raw_code": "re.sub('(\\\\_a)?\\\\.([^\\\\.]*)$', '_suff.\\\\2', 'long.file.name.jpg')", "str_map": {}, "var_map": {"_suff": "VAR_0", "long.file.name.jpg": "VAR_0", "_a": "VAR_0", "suff": "VAR_0"}}
{"src": ["reload", "a", "module", "VAR_0"], "token": ["import", "imp", "\n", "imp", ".", "reload", "(", "VAR_0", ")"], "type": ["KEYWORD", "NAME", "NEWLINE", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "import imp\nimp.reload(module)", "decano_code": "import imp\nimp.reload(module)", "raw_code": "import imp\nimp.reload(module)", "str_map": {}, "var_map": {"module": "VAR_0"}}
{"src": ["convert", "integer", "VAR_0", "into", "an", "unassigned", "integer"], "token": ["struct", ".", "unpack", "(", "'H'", ",", "struct", ".", "pack", "(", "'h'", ",", "VAR_0", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP"], "cano_code": "struct.unpack('H', struct.pack('h', number))", "decano_code": "struct.unpack('H', struct.pack('h', number))", "raw_code": "struct.unpack('H', struct.pack('h', number))", "str_map": {}, "var_map": {"number": "VAR_0"}}
{"src": ["convert", "int", "values", "in", "list", "VAR_0", "to", "float"], "token": ["VAR_0", "=", "[", "float", "(", "x", ")", "for", "x", "in", "VAR_0", "]"], "type": ["NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "numlist = [float(x) for x in numlist]", "decano_code": "numlist = [float(x) for x in numlist]", "raw_code": "numlist = [float(x) for x in numlist]", "str_map": {}, "var_map": {"numlist": "VAR_0"}}
{"src": ["write", "dataframe", "VAR_0", ",", "excluding", "index", ",", "to", "a", "csv", "file"], "token": ["VAR_0", ".", "to_csv", "(", "filename", ",", "index", "=", "False", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df.to_csv(filename, index=False)", "decano_code": "df.to_csv(filename, index=False)", "raw_code": "df.to_csv(filename, index=False)", "str_map": {}, "var_map": {"df": "VAR_0"}}
{"src": ["convert", "a", "urllib", "unquoted", "string", "VAR_0", "to", "a", "json", "data", "VAR_0"], "token": ["VAR_0", "=", "json", ".", "loads", "(", "VAR_0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "json_data = json.loads(unescaped)", "decano_code": "json_data = json.loads(unescaped)", "raw_code": "json_data = json.loads(unescaped)", "str_map": {}, "var_map": {"unescaped": "VAR_0", "json_data": "VAR_0"}}
{"src": ["create", "a", "list", "containing", "all", "ascii", "characters", "as", "its", "elements"], "token": ["[", "chr", "(", "i", ")", "for", "i", "in", "range", "(", "127", ")", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "OP"], "cano_code": "[chr(i) for i in range(127)]", "decano_code": "[chr(i) for i in range(127)]", "raw_code": "[chr(i) for i in range(127)]", "str_map": {}, "var_map": {}}
{"src": ["write", "VAR_0", "to", "a", "binary", "file", "VAR_0"], "token": ["VAR_0", ".", "write", "(", "struct", ".", "pack", "(", "'5B'", ",", "*", "VAR_0", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "newFile.write(struct.pack('5B', *newFileBytes))", "decano_code": "newFile.write(struct.pack('5B', *newFileBytes))", "raw_code": "newFile.write(struct.pack('5B', *newFileBytes))", "str_map": {}, "var_map": {"newFileBytes": "VAR_0", "newFile": "VAR_0"}}
{"src": ["python", "regex", "-", "check", "for", "a", "capital", "letter", "with", "a", "following", "lowercase", "in", "string", "VAR_0"], "token": ["re", ".", "sub", "(", "'^[A-Z0-9]*(?![a-z])'", ",", "''", ",", "VAR_0", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.sub('^[A-Z0-9]*(?![a-z])', '', string)", "decano_code": "re.sub('^[A-Z0-9]*(?![a-z])', '', string)", "raw_code": "re.sub('^[A-Z0-9]*(?![a-z])', '', string)", "str_map": {}, "var_map": {"string": "VAR_0"}}
{"src": ["get", "the", "last", "key", "of", "dictionary", "VAR_0"], "token": ["list", "(", "dict", ".", "keys", "(", ")", ")", "[", "-", "1", "]"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "list(dict.keys())[-1]", "decano_code": "list(dict.keys())[-1]", "raw_code": "list(dict.keys())[-1]", "str_map": {}, "var_map": {"dict": "VAR_0"}}
{"src": ["write", "line", "_STR:0_", "to", "file", "VAR_0"], "token": ["print", "(", "\" _STR:0_ \"", ",", "file", "=", "VAR_0", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "print(\" _STR:0_ \", file=f)", "decano_code": "print(\" _STR:0_ \", file=f)", "raw_code": "print('hi there', file=f)", "str_map": {"hi there": "_STR:0_"}, "var_map": {"f": "VAR_0"}}
{"src": ["write", "line", "_STR:0_", "to", "file", "VAR_0"], "token": ["f", "=", "open", "(", "'myfile'", ",", "'w'", ")", "\n", "f", ".", "write", "(", "'hi there\\n'", ")", "\n", "f", ".", "close", "(", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "NEWLINE", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NEWLINE", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "f = open('myfile', 'w')\nf.write('hi there\\n')\nf.close()", "decano_code": "f = open('myfile', 'w')\nf.write('hi there\\n')\nf.close()", "raw_code": "f = open('myfile', 'w')\nf.write('hi there\\n')\nf.close()", "str_map": {"hi there": "_STR:0_"}, "var_map": {"myfile": "VAR_0"}}
{"src": ["write", "line", "_STR:0_", "to", "file", "VAR_0", "[", "somefile", ".", "txt", "]"], "token": ["with", "open", "(", "'somefile.txt'", ",", "'a'", ")", "as", "the_file", ":", "\n", "    ", "the_file", ".", "write", "(", "'Hello\\n'", ")", ""], "type": ["KEYWORD", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "KEYWORD", "NAME", "OP", "NEWLINE", "INDENT", "NAME", "OP", "NAME", "OP", "STRING", "OP", "DEDENT"], "cano_code": "with open('somefile.txt', 'a') as the_file:\n    the_file.write('Hello\\n')", "decano_code": "with open('somefile.txt', 'a') as the_file:\n    the_file.write('Hello\\n')", "raw_code": "with open('somefile.txt', 'a') as the_file:\n    the_file.write('Hello\\n')", "str_map": {"Hello": "_STR:0_"}, "var_map": {"somefile.txt": "VAR_0"}}
{"src": ["convert", "unicode", "string", "VAR_0", "to", "ascii"], "token": ["VAR_0", ".", "encode", "(", "'iso-8859-15'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "s.encode('iso-8859-15')", "decano_code": "s.encode('iso-8859-15')", "raw_code": "s.encode('iso-8859-15')", "str_map": {}, "var_map": {"s": "VAR_0"}}
{"src": ["django", "get", "maximum", "value", "associated", "with", "field", "_STR:0_", "in", "model", "VAR_0"], "token": ["VAR_0", ".", "objects", ".", "filter", "(", "group", "=", "group", ")", ".", "order_by", "(", "'-added'", ")", "[", "0", "]"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NUMBER", "OP"], "cano_code": "AuthorizedEmail.objects.filter(group=group).order_by('-added')[0]", "decano_code": "AuthorizedEmail.objects.filter(group=group).order_by('-added')[0]", "raw_code": "AuthorizedEmail.objects.filter(group=group).order_by('-added')[0]", "str_map": {"added": "_STR:0_"}, "var_map": {"AuthorizedEmail": "VAR_0"}}
{"src": ["find", "all", "numbers", "and", "dots", "from", "a", "string", "VAR_0", "using", "regex"], "token": ["re", ".", "findall", "(", "'Test([0-9.]*[0-9]+)'", ",", "VAR_0", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.findall('Test([0-9.]*[0-9]+)', text)", "decano_code": "re.findall('Test([0-9.]*[0-9]+)', text)", "raw_code": "re.findall('Test([0-9.]*[0-9]+)', text)", "str_map": {}, "var_map": {"text": "VAR_0"}}
{"src": ["python", "regex", "to", "find", "all", "numbers", "and", "dots", "from", "_STR:0_"], "token": ["re", ".", "findall", "(", "'Test([\\\\d.]*\\\\d+)'", ",", "text", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.findall('Test([\\\\d.]*\\\\d+)', text)", "decano_code": "re.findall('Test([\\\\d.]*\\\\d+)', text)", "raw_code": "re.findall('Test([\\\\d.]*\\\\d+)', text)", "str_map": {"text": "_STR:0_"}, "var_map": {}}
{"src": ["execute", "script", "_STR:0_", "using", "_STR:1_", "shell"], "token": ["os", ".", "system", "(", "\" _STR:1_ \"", ",", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "os.system(\" _STR:1_ \", \" _STR:0_ \")", "decano_code": "os.system(\" _STR:1_ \", \" _STR:0_ \")", "raw_code": "os.system('powershell.exe', 'script.ps1')", "str_map": {"script.ps1": "_STR:0_", "powershell.exe": "_STR:1_"}, "var_map": {}}
{"src": ["sort", "a", "list", "of", "tuples", "VAR_0", "by", "third", "item", "in", "the", "tuple"], "token": ["VAR_0", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", "[", "2", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "b.sort(key=lambda x: x[1][2])", "decano_code": "b.sort(key=lambda x: x[1][2])", "raw_code": "b.sort(key=lambda x: x[1][2])", "str_map": {}, "var_map": {"b": "VAR_0"}}
{"src": ["get", "a", "list", "of", "all", "keys", "in", "cassandra", "database", "VAR_0", "with", "pycassa"], "token": ["list", "(", "VAR_0", ".", "get_range", "(", ")", ".", "get_keys", "(", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "list(cf.get_range().get_keys())", "decano_code": "list(cf.get_range().get_keys())", "raw_code": "list(cf.get_range().get_keys())", "str_map": {}, "var_map": {"cf": "VAR_0"}}
{"src": ["create", "a", "datetime", "with", "the", "current", "date", "&", "time"], "token": ["datetime", ".", "datetime", ".", "now", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "datetime.datetime.now()", "decano_code": "datetime.datetime.now()", "raw_code": "datetime.datetime.now()", "str_map": {}, "var_map": {}}
{"src": ["get", "the", "index", "of", "an", "integer", "VAR_0", "from", "a", "list", "VAR_0", "if", "the", "list", "also", "contains", "boolean", "items"], "token": ["next", "(", "i", "for", "i", ",", "x", "in", "enumerate", "(", "VAR_0", ")", "if", "not", "isinstance", "(", "x", ",", "bool", ")", "and", "x", "==", "1", ")"], "type": ["KEYWORD", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "NAME", "OP", "NUMBER", "OP"], "cano_code": "next(i for i, x in enumerate(lst) if not isinstance(x, bool) and x == 1)", "decano_code": "next(i for i, x in enumerate(lst) if not isinstance(x, bool) and x == 1)", "raw_code": "next(i for i, x in enumerate(lst) if not isinstance(x, bool) and x == 1)", "str_map": {}, "var_map": {"1": "VAR_0", "lst": "VAR_0"}}
{"src": ["subtract", "13", "from", "every", "number", "in", "a", "list", "VAR_0"], "token": ["VAR_0", "[", ":", "]", "=", "[", "(", "x", "-", "13", ")", "for", "x", "in", "VAR_0", "]"], "type": ["NAME", "OP", "OP", "OP", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "a[:] = [(x - 13) for x in a]", "decano_code": "a[:] = [(x - 13) for x in a]", "raw_code": "a[:] = [(x - 13) for x in a]", "str_map": {}, "var_map": {"a": "VAR_0"}}
{"src": ["choose", "a", "random", "file", "from", "the", "directory", "contents", "of", "the", "c", "drive", ",", "VAR_0"], "token": ["random", ".", "choice", "(", "os", ".", "listdir", "(", "'C:\\\\'", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "random.choice(os.listdir('C:\\\\'))", "decano_code": "random.choice(os.listdir('C:\\\\'))", "raw_code": "random.choice(os.listdir('C:\\\\'))", "str_map": {}, "var_map": {"C:\\\\": "VAR_0"}}
{"src": ["get", "the", "highest", "element", "in", "absolute", "value", "in", "a", "numpy", "matrix", "VAR_0"], "token": ["max", "(", "VAR_0", ".", "min", "(", ")", ",", "VAR_0", ".", "max", "(", ")", ",", "key", "=", "abs", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "KEYWORD", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "max(x.min(), x.max(), key=abs)", "decano_code": "max(x.min(), x.max(), key=abs)", "raw_code": "max(x.min(), x.max(), key=abs)", "str_map": {}, "var_map": {"x": "VAR_0"}}
{"src": ["get", "all", "urls", "within", "text", "VAR_0"], "token": ["re", ".", "findall", "(", "'\"(http.*?)\"'", ",", "VAR_0", ",", "re", ".", "MULTILINE", "|", "re", ".", "DOTALL", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "re.findall('\"(http.*?)\"', s, re.MULTILINE | re.DOTALL)", "decano_code": "re.findall('\"(http.*?)\"', s, re.MULTILINE | re.DOTALL)", "raw_code": "re.findall('\"(http.*?)\"', s, re.MULTILINE | re.DOTALL)", "str_map": {}, "var_map": {"s": "VAR_0"}}
{"src": ["match", "urls", "whose", "domain", "doesn't", "start", "with", "VAR_0", "from", "string", "VAR_0", "using", "regex"], "token": ["re", ".", "findall", "(", "'http://[^t][^s\"]+\\\\.html'", ",", "VAR_0", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.findall('http://[^t][^s\"]+\\\\.html', document)", "decano_code": "re.findall('http://[^t][^s\"]+\\\\.html', document)", "raw_code": "re.findall('http://[^t][^s\"]+\\\\.html', document)", "str_map": {}, "var_map": {"t": "VAR_0", "document": "VAR_0"}}
{"src": ["split", "a", "string", "VAR_0", "considering", "the", "spaces", "_STR:0_"], "token": ["VAR_0", ".", "replace", "(", "\" _STR:0_ \"", ",", "'! !'", ")", ".", "split", "(", "'!'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "mystring.replace(\" _STR:0_ \", '! !').split('!')", "decano_code": "mystring.replace(\" _STR:0_ \", '! !').split('!')", "raw_code": "mystring.replace(' ', '! !').split('!')", "str_map": {" ": "_STR:0_"}, "var_map": {"mystring": "VAR_0"}}
{"src": ["open", "file", "VAR_0", "with", "mode", "_STR:0_"], "token": ["open", "(", "VAR_0", ",", "\" _STR:0_ \"", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "open(path, \" _STR:0_ \")", "decano_code": "open(path, \" _STR:0_ \")", "raw_code": "open(path, 'r')", "str_map": {"r": "_STR:0_"}, "var_map": {"path": "VAR_0"}}
{"src": ["sum", "elements", "at", "the", "same", "index", "in", "list", "VAR_0"], "token": ["[", "[", "sum", "(", "item", ")", "for", "item", "in", "zip", "(", "*", "items", ")", "]", "for", "items", "in", "zip", "(", "*", "VAR_0", ")", "]"], "type": ["OP", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "[[sum(item) for item in zip(*items)] for items in zip(*data)]", "decano_code": "[[sum(item) for item in zip(*items)] for items in zip(*data)]", "raw_code": "[[sum(item) for item in zip(*items)] for items in zip(*data)]", "str_map": {}, "var_map": {"data": "VAR_0"}}
{"src": ["add", "a", "new", "axis", "to", "array", "VAR_0"], "token": ["VAR_0", "[", ":", ",", "(", "np", ".", "newaxis", ")", "]"], "type": ["NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "a[:, (np.newaxis)]", "decano_code": "a[:, (np.newaxis)]", "raw_code": "a[:, (np.newaxis)]", "str_map": {}, "var_map": {"a": "VAR_0"}}
