{"src": ["concatenate", "elements", "of", "a", "list", "_STR:0_", "of", "multiple", "integers", "to", "a", "single", "integer"], "token": ["sum", "(", "d", "*", "10", "**", "i", "for", "i", ",", "d", "in", "enumerate", "(", "x", "[", ":", ":", "-", "1", "]", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "sum(d * 10 ** i for i, d in enumerate(x[::-1]))", "decano_code": "sum(d * 10 ** i for i, d in enumerate(x[::-1]))", "raw_code": "sum(d * 10 ** i for i, d in enumerate(x[::-1]))", "str_map": {"x": "_STR:0_"}}
{"src": ["convert", "a", "list", "of", "integers", "into", "a", "single", "integer"], "token": ["r", "=", "int", "(", "''", ".", "join", "(", "map", "(", "str", ",", "x", ")", ")", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "r = int(''.join(map(str, x)))", "decano_code": "r = int(''.join(map(str, x)))", "raw_code": "r = int(''.join(map(str, x)))", "str_map": {}}
{"src": ["convert", "a", "DateTime", "string", "back", "to", "a", "DateTime", "object", "of", "format", "_STR:0_"], "token": ["datetime", ".", "strptime", "(", "'2010-11-13 10:33:54.227806'", ",", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "datetime.strptime('2010-11-13 10:33:54.227806', \" _STR:0_ \")", "decano_code": "datetime.strptime('2010-11-13 10:33:54.227806', \" _STR:0_ \")", "raw_code": "datetime.strptime('2010-11-13 10:33:54.227806', '%Y-%m-%d %H:%M:%S.%f')", "str_map": {"%Y-%m-%d %H:%M:%S.%f": "_STR:0_"}}
{"src": ["get", "the", "average", "of", "a", "list", "values", "for", "each", "key", "in", "dictionary", "d", ")"], "token": ["[", "(", "i", ",", "sum", "(", "j", ")", "/", "len", "(", "j", ")", ")", "for", "i", ",", "j", "in", "list", "(", "d", ".", "items", "(", ")", ")", "]"], "type": ["OP", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "[(i, sum(j) / len(j)) for i, j in list(d.items())]", "decano_code": "[(i, sum(j) / len(j)) for i, j in list(d.items())]", "raw_code": "[(i, sum(j) / len(j)) for i, j in list(d.items())]", "str_map": {}}
{"src": ["zip", "two", "lists", "[1, 2", "]", "and", "[3, 4", "]", "into", "a", "list", "of", "two", "tuples", "containing", "elements", "at", "the", "same", "index", "in", "each", "list"], "token": ["zip", "(", "[", "1", ",", "2", "]", ",", "[", "3", ",", "4", "]", ")"], "type": ["KEYWORD", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "zip([1, 2], [3, 4])", "decano_code": "zip([1, 2], [3, 4])", "raw_code": "zip([1, 2], [3, 4])", "str_map": {}}
{"src": ["prepend", "string", "_STR:0_", "to", "all", "items", "in", "list", "_STR:1_"], "token": ["[", "'hello{0}'", ".", "format", "(", "i", ")", "for", "i", "in", "a", "]"], "type": ["OP", "STRING", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "['hello{0}'.format(i) for i in a]", "decano_code": "['hello{0}'.format(i) for i in a]", "raw_code": "['hello{0}'.format(i) for i in a]", "str_map": {"hello": "_STR:0_", "a": "_STR:1_"}}
{"src": ["regex", "for", "repeating", "words", "in", "a", "string", "s"], "token": ["re", ".", "sub", "(", "'(?<!\\\\S)((\\\\S+)(?:\\\\s+\\\\2))(?:\\\\s+\\\\2)+(?!\\\\S)'", ",", "'\\\\1'", ",", "s", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.sub('(?<!\\\\S)((\\\\S+)(?:\\\\s+\\\\2))(?:\\\\s+\\\\2)+(?!\\\\S)', '\\\\1', s)", "decano_code": "re.sub('(?<!\\\\S)((\\\\S+)(?:\\\\s+\\\\2))(?:\\\\s+\\\\2)+(?!\\\\S)', '\\\\1', s)", "raw_code": "re.sub('(?<!\\\\S)((\\\\S+)(?:\\\\s+\\\\2))(?:\\\\s+\\\\2)+(?!\\\\S)', '\\\\1', s)", "str_map": {}}
{"src": ["normalize", "a", "pandas", "dataframe", "df", "by", "row"], "token": ["df", ".", "div", "(", "df", ".", "sum", "(", "axis", "=", "1", ")", ",", "axis", "=", "0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "df.div(df.sum(axis=1), axis=0)", "decano_code": "df.div(df.sum(axis=1), axis=0)", "raw_code": "df.div(df.sum(axis=1), axis=0)", "str_map": {}}
{"src": ["swap", "values", "in", "a", "tuple/list", "inside", "a", "list", "mylist"], "token": ["map", "(", "lambda", "t", ":", "(", "t", "[", "1", "]", ",", "t", "[", "0", "]", ")", ",", "mylist", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP"], "cano_code": "map(lambda t: (t[1], t[0]), mylist)", "decano_code": "map(lambda t: (t[1], t[0]), mylist)", "raw_code": "map(lambda t: (t[1], t[0]), mylist)", "str_map": {}}
{"src": ["swap", "values", "in", "a", "tuple/list", "in", "list", "mylist"], "token": ["[", "(", "t", "[", "1", "]", ",", "t", "[", "0", "]", ")", "for", "t", "in", "mylist", "]"], "type": ["OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[(t[1], t[0]) for t in mylist]", "decano_code": "[(t[1], t[0]) for t in mylist]", "raw_code": "[(t[1], t[0]) for t in mylist]", "str_map": {}}
{"src": ["find", "next", "sibling", "element", "in", "python", "selenium", "?"], "token": ["driver", ".", "find_element_by_xpath", "(", "\"//p[@id, 'one']/following-sibling::p\"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "driver.find_element_by_xpath(\"//p[@id, 'one']/following-sibling::p\")", "decano_code": "driver.find_element_by_xpath(\"//p[@id, 'one']/following-sibling::p\")", "raw_code": "driver.find_element_by_xpath(\"//p[@id, 'one']/following-sibling::p\")", "str_map": {}}
{"src": ["find", "all", "occurrences", "of", "the", "pattern", "_STR:0_", "within", "strs"], "token": ["re", ".", "findall", "(", "\" _STR:0_ \"", ",", "strs", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.findall(\" _STR:0_ \", strs)", "decano_code": "re.findall(\" _STR:0_ \", strs)", "raw_code": "re.findall('\\\\[[^\\\\]]*\\\\]|\\\\([^\\\\)]*\\\\)|\"[^\"]*\"|\\\\S+', strs)", "str_map": {"\\[[^\\]]*\\]|\\([^\\)]*\\)|\"[^\"]*\"|\\S+": "_STR:0_"}}
{"src": ["generate", "the", "combinations", "of", "3", "from", "a", "set", "{1, 2, 3, 4", "}"], "token": ["print", "(", "list", "(", "itertools", ".", "combinations", "(", "{", "1", ",", "2", ",", "3", ",", "4", "}", ",", "3", ")", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "print(list(itertools.combinations({1, 2, 3, 4}, 3)))", "decano_code": "print(list(itertools.combinations({1, 2, 3, 4}, 3)))", "raw_code": "print(list(itertools.combinations({1, 2, 3, 4}, 3)))", "str_map": {}}
{"src": ["add", "multiple", "columns", "hour", ",", "weekday", ",", "weeknum", "to", "pandas", "data", "frame", "df", "from", "lambda", "function", "lambdafunc"], "token": ["df", "[", "[", "'hour'", ",", "'weekday'", ",", "'weeknum'", "]", "]", "=", "df", ".", "apply", "(", "lambdafunc", ",", "axis", "=", "1", ")"], "type": ["NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "df[['hour', 'weekday', 'weeknum']] = df.apply(lambdafunc, axis=1)", "decano_code": "df[['hour', 'weekday', 'weeknum']] = df.apply(lambdafunc, axis=1)", "raw_code": "df[['hour', 'weekday', 'weeknum']] = df.apply(lambdafunc, axis=1)", "str_map": {}}
{"src": ["BeautifulSoup", "search", "string", "_STR:0_", "inside", "tag", "_STR:1_"], "token": ["soup", ".", "find_all", "(", "\" _STR:1_ \"", ",", "string", "=", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "soup.find_all(\" _STR:1_ \", string=\" _STR:0_ \")", "decano_code": "soup.find_all(\" _STR:1_ \", string=\" _STR:0_ \")", "raw_code": "soup.find_all('a', string='Elsie')", "str_map": {"Elsie": "_STR:0_", "a": "_STR:1_"}}
{"src": ["convert", "a", "datetime", "object", "my_datetime", "into", "readable", "format", "%B %d, %Y"], "token": ["my_datetime", ".", "strftime", "(", "'%B %d, %Y'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "my_datetime.strftime('%B %d, %Y')", "decano_code": "my_datetime.strftime('%B %d, %Y')", "raw_code": "my_datetime.strftime('%B %d, %Y')", "str_map": {}}
{"src": ["parse", "string", "s", "to", "int", "when", "string", "contains", "a", "number"], "token": ["int", "(", "''", ".", "join", "(", "c", "for", "c", "in", "s", "if", "c", ".", "isdigit", "(", ")", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "int(''.join(c for c in s if c.isdigit()))", "decano_code": "int(''.join(c for c in s if c.isdigit()))", "raw_code": "int(''.join(c for c in s if c.isdigit()))", "str_map": {}}
{"src": ["add", "dictionary", "{'class': {'section': 5}", "}", "to", "key", "_STR:0_", "of", "dictionary", "dic"], "token": ["dic", "[", "\" _STR:0_ \"", "]", ".", "update", "(", "{", "'class'", ":", "{", "'section'", ":", "5", "}", "}", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "STRING", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "dic[\" _STR:0_ \"].update({'class': {'section': 5}})", "decano_code": "dic[\" _STR:0_ \"].update({'class': {'section': 5}})", "raw_code": "dic['Test'].update({'class': {'section': 5}})", "str_map": {"Test": "_STR:0_"}}
{"src": ["transforming", "the", "string", "s", "into", "dictionary"], "token": ["dict", "(", "map", "(", "int", ",", "x", ".", "split", "(", "':'", ")", ")", "for", "x", "in", "s", ".", "split", "(", "','", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "dict(map(int, x.split(':')) for x in s.split(','))", "decano_code": "dict(map(int, x.split(':')) for x in s.split(','))", "raw_code": "dict(map(int, x.split(':')) for x in s.split(','))", "str_map": {}}
{"src": ["how", "to", "select", "element", "with", "selenium", "python", "xpath"], "token": ["driver", ".", "find_element_by_xpath", "(", "\"//div[@id='a']//a[@class='click']\"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "driver.find_element_by_xpath(\"//div[@id='a']//a[@class='click']\")", "decano_code": "driver.find_element_by_xpath(\"//div[@id='a']//a[@class='click']\")", "raw_code": "driver.find_element_by_xpath(\"//div[@id='a']//a[@class='click']\")", "str_map": {}}
{"src": ["find", "rows", "matching", "(0,1", ")", "in", "a", "2", "dimensional", "numpy", "array", "vals"], "token": ["np", ".", "where", "(", "(", "vals", "==", "(", "0", ",", "1", ")", ")", ".", "all", "(", "axis", "=", "1", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "np.where((vals == (0, 1)).all(axis=1))", "decano_code": "np.where((vals == (0, 1)).all(axis=1))", "raw_code": "np.where((vals == (0, 1)).all(axis=1))", "str_map": {}}
{"src": ["how", "to", "delete", "a", "record", "in", "django", "models", "?"], "token": ["SomeModel", ".", "objects", ".", "filter", "(", "id", "=", "id", ")", ".", "delete", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "SomeModel.objects.filter(id=id).delete()", "decano_code": "SomeModel.objects.filter(id=id).delete()", "raw_code": "SomeModel.objects.filter(id=id).delete()", "str_map": {}}
{"src": ["build", "a", "dictionary", "containing", "the", "conversion", "of", "each", "list", "in", "list", "[['two', 2], ['one', 1]", "]", "to", "a", "key/value", "pair", "as", "its", "items"], "token": ["dict", "(", "[", "[", "'two'", ",", "2", "]", ",", "[", "'one'", ",", "1", "]", "]", ")"], "type": ["KEYWORD", "OP", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "dict([['two', 2], ['one', 1]])", "decano_code": "dict([['two', 2], ['one', 1]])", "raw_code": "dict([['two', 2], ['one', 1]])", "str_map": {}}
{"src": ["convert", "list", "l", "to", "dictionary", "having", "each", "two", "adjacent", "elements", "as", "key/value", "pair"], "token": ["dict", "(", "zip", "(", "l", "[", ":", ":", "2", "]", ",", "l", "[", "1", ":", ":", "2", "]", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "dict(zip(l[::2], l[1::2]))", "decano_code": "dict(zip(l[::2], l[1::2]))", "raw_code": "dict(zip(l[::2], l[1::2]))", "str_map": {}}
{"src": ["assign", "float", "9.8", "[", "9", ".", "8", "]", "to", "variable", "GRAVITY"], "token": ["GRAVITY", "=", "9.8"], "type": ["NAME", "OP", "NUMBER"], "cano_code": "GRAVITY = 9.8", "decano_code": "GRAVITY = 9.8", "raw_code": "GRAVITY = 9.8", "str_map": {}}
{"src": ["separate", "numbers", "from", "characters", "in", "string", "_STR:0_"], "token": ["re", ".", "findall", "(", "'(([0-9]+)([A-Z]))'", ",", "'20M10000N80M'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.findall('(([0-9]+)([A-Z]))', '20M10000N80M')", "decano_code": "re.findall('(([0-9]+)([A-Z]))', '20M10000N80M')", "raw_code": "re.findall('(([0-9]+)([A-Z]))', '20M10000N80M')", "str_map": {"30m1000n20m": "_STR:0_"}}
{"src": ["separate", "numbers", "and", "characters", "in", "string", "_STR:0_"], "token": ["re", ".", "findall", "(", "'([0-9]+|[A-Z])'", ",", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.findall('([0-9]+|[A-Z])', \" _STR:0_ \")", "decano_code": "re.findall('([0-9]+|[A-Z])', \" _STR:0_ \")", "raw_code": "re.findall('([0-9]+|[A-Z])', '20M10000N80M')", "str_map": {"20M10000N80M": "_STR:0_"}}
{"src": ["separate", "numbers", "and", "characters", "in", "string", "_STR:0_"], "token": ["re", ".", "findall", "(", "'([0-9]+)([A-Z])'", ",", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.findall('([0-9]+)([A-Z])', \" _STR:0_ \")", "decano_code": "re.findall('([0-9]+)([A-Z])', \" _STR:0_ \")", "raw_code": "re.findall('([0-9]+)([A-Z])', '20M10000N80M')", "str_map": {"20M10000N80M": "_STR:0_"}}
{"src": ["get", "a", "list", "of", "words", "from", "a", "string", "Hello world, my name is...James the 2nd", "[", "Hello", "world,", "my", "name", "is", ".", "", ".", "", ".", "James", "the", "2nd", "]", "!", "removing", "punctuation"], "token": ["re", ".", "compile", "(", "'\\\\w+'", ")", ".", "findall", "(", "'Hello world, my name is...James the 2nd!'", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "re.compile('\\\\w+').findall('Hello world, my name is...James the 2nd!')", "decano_code": "re.compile('\\\\w+').findall('Hello world, my name is...James the 2nd!')", "raw_code": "re.compile('\\\\w+').findall('Hello world, my name is...James the 2nd!')", "str_map": {}}
{"src": ["convert", "string", "_STR:0_", "into", "datetime.time", "[", "datetime", ".", "time", "]", "object"], "token": ["datetime", ".", "datetime", ".", "strptime", "(", "\" _STR:0_ \"", ",", "'%H:%M'", ")", ".", "time", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "datetime.datetime.strptime(\" _STR:0_ \", '%H:%M').time()", "decano_code": "datetime.datetime.strptime(\" _STR:0_ \", '%H:%M').time()", "raw_code": "datetime.datetime.strptime('03:55', '%H:%M').time()", "str_map": {"03:55": "_STR:0_"}}
{"src": ["request", "url", "_STR:0_", "without", "verifying", "SSL", "certificates"], "token": ["requests", ".", "get", "(", "\" _STR:0_ \"", ",", "verify", "=", "False", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "requests.get(\" _STR:0_ \", verify=False)", "decano_code": "requests.get(\" _STR:0_ \", verify=False)", "raw_code": "requests.get('https://www.reporo.com/', verify=False)", "str_map": {"https://www.reporo.com/": "_STR:0_"}}
{"src": ["extract", "values", "not", "equal", "to", "0", "from", "numpy", "array", "a"], "token": ["a", "[", "a", "!=", "0", "]"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "a[a != 0]", "decano_code": "a[a != 0]", "raw_code": "a[a != 0]", "str_map": {}}
{"src": ["map", "two", "lists", "keys", "and", "values", "into", "a", "dictionary"], "token": ["new_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "keys", ",", "values", ")", "}"], "type": ["NAME", "OP", "OP", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "new_dict = {k: v for k, v in zip(keys, values)}", "decano_code": "new_dict = {k: v for k, v in zip(keys, values)}", "raw_code": "new_dict = {k: v for k, v in zip(keys, values)}", "str_map": {}}
{"src": ["map", "two", "lists", "keys", "and", "values", "into", "a", "dictionary"], "token": ["dict", "(", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "zip", "(", "keys", ",", "values", ")", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "dict((k, v) for k, v in zip(keys, values))", "decano_code": "dict((k, v) for k, v in zip(keys, values))", "raw_code": "dict((k, v) for k, v in zip(keys, values))", "str_map": {}}
{"src": ["map", "two", "lists", "keys", "and", "values", "into", "a", "dictionary"], "token": ["dict", "(", "[", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "zip", "(", "keys", ",", "values", ")", "]", ")"], "type": ["KEYWORD", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "dict([(k, v) for k, v in zip(keys, values)])", "decano_code": "dict([(k, v) for k, v in zip(keys, values)])", "raw_code": "dict([(k, v) for k, v in zip(keys, values)])", "str_map": {}}
{"src": ["find", "the", "string", "matches", "within", "parenthesis", "from", "a", "string", "s", "using", "regex"], "token": ["m", "=", "re", ".", "search", "(", "'\\\\[(\\\\w+)\\\\]'", ",", "s", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "m = re.search('\\\\[(\\\\w+)\\\\]', s)", "decano_code": "m = re.search('\\\\[(\\\\w+)\\\\]', s)", "raw_code": "m = re.search('\\\\[(\\\\w+)\\\\]', s)", "str_map": {}}
{"src": ["enable", "the", "SO_REUSEADDR", "socket", "option", "in", "socket", "object", "s", "to", "fix", "the", "error", "only one usage of each socket address is normally permitted"], "token": ["s", ".", "setsockopt", "(", "SOL_SOCKET", ",", "SO_REUSEADDR", ",", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)", "decano_code": "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)", "raw_code": "s.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)", "str_map": {}}
{"src": ["append", "the", "sum", "of", "each", "tuple", "pair", "in", "the", "grouped", "list", "list1", "and", "list", "list2", "elements", "to", "list", "list3"], "token": ["list3", "=", "[", "(", "a", "+", "b", ")", "for", "a", ",", "b", "in", "zip", "(", "list1", ",", "list2", ")", "]"], "type": ["NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "list3 = [(a + b) for a, b in zip(list1, list2)]", "decano_code": "list3 = [(a + b) for a, b in zip(list1, list2)]", "raw_code": "list3 = [(a + b) for a, b in zip(list1, list2)]", "str_map": {}}
{"src": ["converting", "hex", "string", "s", "to", "its", "integer", "representations"], "token": ["[", "ord", "(", "c", ")", "for", "c", "in", "s", ".", "decode", "(", "'hex'", ")", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "[ord(c) for c in s.decode('hex')]", "decano_code": "[ord(c) for c in s.decode('hex')]", "raw_code": "[ord(c) for c in s.decode('hex')]", "str_map": {}}
{"src": ["sort", "list", "student_tuples", "by", "second", "element", "of", "each", "tuple", "in", "ascending", "and", "third", "element", "of", "each", "tuple", "in", "descending"], "token": ["print", "(", "sorted", "(", "student_tuples", ",", "key", "=", "lambda", "t", ":", "(", "-", "t", "[", "2", "]", ",", "t", "[", "0", "]", ")", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "OP"], "cano_code": "print(sorted(student_tuples, key=lambda t: (-t[2], t[0])))", "decano_code": "print(sorted(student_tuples, key=lambda t: (-t[2], t[0])))", "raw_code": "print(sorted(student_tuples, key=lambda t: (-t[2], t[0])))", "str_map": {}}
{"src": ["get", "list", "of", "duplicated", "elements", "in", "range", "of", "3"], "token": ["[", "y", "for", "x", "in", "range", "(", "3", ")", "for", "y", "in", "[", "x", ",", "x", "]", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "[y for x in range(3) for y in [x, x]]", "decano_code": "[y for x in range(3) for y in [x, x]]", "raw_code": "[y for x in range(3) for y in [x, x]]", "str_map": {}}
{"src": ["read", "the", "contents", "of", "the", "file", "_STR:0_", "into", "txt"], "token": ["txt", "=", "open", "(", "\" _STR:0_ \"", ")", ".", "read", "(", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "txt = open(\" _STR:0_ \").read()", "decano_code": "txt = open(\" _STR:0_ \").read()", "raw_code": "txt = open('file.txt').read()", "str_map": {"file.txt": "_STR:0_"}}
{"src": ["divide", "each", "element", "in", "list", "myList", "by", "integer", "myInt"], "token": ["myList", "[", ":", "]", "=", "[", "(", "x", "/", "myInt", ")", "for", "x", "in", "myList", "]"], "type": ["NAME", "OP", "OP", "OP", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "myList[:] = [(x / myInt) for x in myList]", "decano_code": "myList[:] = [(x / myInt) for x in myList]", "raw_code": "myList[:] = [(x / myInt) for x in myList]", "str_map": {}}
{"src": ["python", ":", "dots", "in", "the", "name", "of", "variable", "in", "a", "format", "string"], "token": ["\"\"\"Name: {0[person.name]}\"\"\"", ".", "format", "(", "{", "'person.name'", ":", "'Joe'", "}", ")"], "type": ["STRING", "OP", "KEYWORD", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "\"\"\"Name: {0[person.name]}\"\"\".format({'person.name': 'Joe'})", "decano_code": "\"\"\"Name: {0[person.name]}\"\"\".format({'person.name': 'Joe'})", "raw_code": "\"\"\"Name: {0[person.name]}\"\"\".format({'person.name': 'Joe'})", "str_map": {}}
{"src": ["replace", "white", "spaces", "in", "dataframe", "df", "with", "_STR:0_"], "token": ["df", ".", "replace", "(", "' '", ",", "\" _STR:0_ \"", ",", "regex", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df.replace(' ', \" _STR:0_ \", regex=True)", "decano_code": "df.replace(' ', \" _STR:0_ \", regex=True)", "raw_code": "df.replace(' ', '_', regex=True)", "str_map": {"_": "_STR:0_"}}
{"src": ["convert", "date", "my_date", "to", "datetime"], "token": ["datetime", ".", "datetime", ".", "combine", "(", "my_date", ",", "datetime", ".", "time", ".", "min", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "datetime.datetime.combine(my_date, datetime.time.min)", "decano_code": "datetime.datetime.combine(my_date, datetime.time.min)", "raw_code": "datetime.datetime.combine(my_date, datetime.time.min)", "str_map": {}}
{"src": ["convert", "tuple", "tst", "to", "string", "tst2"], "token": ["tst2", "=", "str", "(", "tst", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "NAME", "OP"], "cano_code": "tst2 = str(tst)", "decano_code": "tst2 = str(tst)", "raw_code": "tst2 = str(tst)", "str_map": {}}
{"src": ["get", "modified", "time", "of", "file", "file"], "token": ["time", ".", "ctime", "(", "os", ".", "path", ".", "getmtime", "(", "file", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "time.ctime(os.path.getmtime(file))", "decano_code": "time.ctime(os.path.getmtime(file))", "raw_code": "time.ctime(os.path.getmtime(file))", "str_map": {}}
{"src": ["get", "creation", "time", "of", "file", "file"], "token": ["time", ".", "ctime", "(", "os", ".", "path", ".", "getctime", "(", "file", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "time.ctime(os.path.getctime(file))", "decano_code": "time.ctime(os.path.getctime(file))", "raw_code": "time.ctime(os.path.getctime(file))", "str_map": {}}
{"src": ["get", "modification", "time", "of", "file", "filename"], "token": ["t", "=", "os", ".", "path", ".", "getmtime", "(", "filename", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "t = os.path.getmtime(filename)", "decano_code": "t = os.path.getmtime(filename)", "raw_code": "t = os.path.getmtime(filename)", "str_map": {}}
{"src": ["get", "modification", "time", "of", "file", "path"], "token": ["os", ".", "path", ".", "getmtime", "(", "path", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "os.path.getmtime(path)", "decano_code": "os.path.getmtime(path)", "raw_code": "os.path.getmtime(path)", "str_map": {}}
{"src": ["get", "modified", "time", "of", "file", "file"], "token": ["print", "(", "(", "'last modified: %s'", "%", "time", ".", "ctime", "(", "os", ".", "path", ".", "getmtime", "(", "file", ")", ")", ")", ")"], "type": ["KEYWORD", "OP", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "print(('last modified: %s' % time.ctime(os.path.getmtime(file))))", "decano_code": "print(('last modified: %s' % time.ctime(os.path.getmtime(file))))", "raw_code": "print(('last modified: %s' % time.ctime(os.path.getmtime(file))))", "str_map": {}}
{"src": ["get", "the", "creation", "time", "of", "file", "file"], "token": ["print", "(", "(", "'created: %s'", "%", "time", ".", "ctime", "(", "os", ".", "path", ".", "getctime", "(", "file", ")", ")", ")", ")"], "type": ["KEYWORD", "OP", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "print(('created: %s' % time.ctime(os.path.getctime(file))))", "decano_code": "print(('created: %s' % time.ctime(os.path.getctime(file))))", "raw_code": "print(('created: %s' % time.ctime(os.path.getctime(file))))", "str_map": {}}
{"src": ["get", "the", "creation", "time", "of", "file", "path_to_file"], "token": ["return", "os", ".", "path", ".", "getctime", "(", "path_to_file", ")"], "type": ["KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "return os.path.getctime(path_to_file)", "decano_code": "return os.path.getctime(path_to_file)", "raw_code": "return os.path.getctime(path_to_file)", "str_map": {}}
{"src": ["execute", "os", "command", "_STR:0_", "TASKKILL", "/F", "/IM", "firefox.exe'", "[", "firefox", ".", "exe'", "]", "'"], "token": ["os", ".", "system", "(", "'TASKKILL /F /IM firefox.exe'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "os.system('TASKKILL /F /IM firefox.exe')", "decano_code": "os.system('TASKKILL /F /IM firefox.exe')", "raw_code": "os.system('TASKKILL /F /IM firefox.exe')", "str_map": {"": "_STR:0_"}}
{"src": ["split", "string", "string", "on", "whitespaces", "using", "a", "generator"], "token": ["return", "(", "x", ".", "group", "(", "0", ")", "for", "x", "in", "re", ".", "finditer", "(", "\"[A-Za-z']+\"", ",", "string", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP"], "cano_code": "return (x.group(0) for x in re.finditer(\"[A-Za-z']+\", string))", "decano_code": "return (x.group(0) for x in re.finditer(\"[A-Za-z']+\", string))", "raw_code": "return (x.group(0) for x in re.finditer(\"[A-Za-z']+\", string))", "str_map": {}}
{"src": ["unpack", "each", "value", "in", "list", "x", "to", "its", "placeholder", "_STR:0_", "in", "string", "_STR:1_"], "token": ["\"\"\", \"\"\"", ".", "join", "(", "[", "\" _STR:1_ \"", "]", "*", "len", "(", "x", ")", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP", "STRING", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "\"\"\", \"\"\".join([\" _STR:1_ \"] * len(x))", "decano_code": "\"\"\", \"\"\".join([\" _STR:1_ \"] * len(x))", "raw_code": "\"\"\", \"\"\".join(['%.2f'] * len(x))", "str_map": {"%": "_STR:0_", "%.2f": "_STR:1_"}}
{"src": ["match", "regex", "pattern", "_STR:0_", "with", "string", "_STR:1_"], "token": ["print", "(", "re", ".", "match", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")", ".", "group", "(", "1", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "print(re.match(\" _STR:0_ \", \" _STR:1_ \").group(1))", "decano_code": "print(re.match(\" _STR:0_ \", \" _STR:1_ \").group(1))", "raw_code": "print(re.match('(\\\\d+(\\\\.\\\\d+)?)', '3434.35353').group(1))", "str_map": {"(\\d+(\\.\\d+)?)": "_STR:0_", "3434.35353": "_STR:1_"}}
{"src": ["replace", "parentheses", "and", "all", "data", "within", "it", "with", "empty", "string", "_STR:0_", "in", "column", "_STR:1_", "of", "dataframe", "df"], "token": ["df", "[", "\" _STR:1_ \"", "]", ".", "str", ".", "replace", "(", "'\\\\(.*\\\\)'", ",", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "df[\" _STR:1_ \"].str.replace('\\\\(.*\\\\)', \" _STR:0_ \")", "decano_code": "df[\" _STR:1_ \"].str.replace('\\\\(.*\\\\)', \" _STR:0_ \")", "raw_code": "df['name'].str.replace('\\\\(.*\\\\)', '')", "str_map": {"": "_STR:0_", "name": "_STR:1_"}}
{"src": ["create", "a", "list", "result", "containing", "elements", "form", "list", "list_a", "if", "first", "element", "of", "list", "list_a", "is", "in", "list", "list_b"], "token": ["result", "=", "[", "x", "for", "x", "in", "list_a", "if", "x", "[", "0", "]", "in", "list_b", "]"], "type": ["NAME", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "OP"], "cano_code": "result = [x for x in list_a if x[0] in list_b]", "decano_code": "result = [x for x in list_a if x[0] in list_b]", "raw_code": "result = [x for x in list_a if x[0] in list_b]", "str_map": {}}
{"src": ["generate", "all", "possible", "string", "permutations", "of", "each", "two", "elements", "in", "list", "['hel', 'lo', 'bye'", "]"], "token": ["print", "(", "[", "''", ".", "join", "(", "a", ")", "for", "a", "in", "combinations", "(", "[", "'hel'", ",", "'lo'", ",", "'bye'", "]", ",", "2", ")", "]", ")"], "type": ["KEYWORD", "OP", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "print([''.join(a) for a in combinations(['hel', 'lo', 'bye'], 2)])", "decano_code": "print([''.join(a) for a in combinations(['hel', 'lo', 'bye'], 2)])", "raw_code": "print([''.join(a) for a in combinations(['hel', 'lo', 'bye'], 2)])", "str_map": {}}
{"src": ["get", "a", "list", "of", "items", "form", "nested", "list", "li", "where", "third", "element", "of", "each", "item", "contains", "string", "_STR:0_"], "token": ["[", "x", "for", "x", "in", "li", "if", "\" _STR:0_ \"", "in", "x", "[", "2", "]", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "STRING", "KEYWORD", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "[x for x in li if \" _STR:0_ \" in x[2]]", "decano_code": "[x for x in li if \" _STR:0_ \" in x[2]]", "raw_code": "[x for x in li if 'ar' in x[2]]", "str_map": {"ar": "_STR:0_"}}
{"src": ["sort", "lists", "in", "the", "list", "unsorted_list", "by", "the", "element", "at", "index", "3", "of", "each", "list"], "token": ["unsorted_list", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "3", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "unsorted_list.sort(key=lambda x: x[3])", "decano_code": "unsorted_list.sort(key=lambda x: x[3])", "raw_code": "unsorted_list.sort(key=lambda x: x[3])", "str_map": {}}
{"src": ["log", "message", "_STR:0_", "on", "the", "root", "logger", "."], "token": ["logging", ".", "info", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "logging.info(\" _STR:0_ \")", "decano_code": "logging.info(\" _STR:0_ \")", "raw_code": "logging.info('test')", "str_map": {"test": "_STR:0_"}}
{"src": ["return", "a", "subplot", "axes", "positioned", "by", "the", "grid", "definition", "1,1,1", "using", "matpotlib"], "token": ["fig", ".", "add_subplot", "(", "1", ",", "1", ",", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "fig.add_subplot(1, 1, 1)", "decano_code": "fig.add_subplot(1, 1, 1)", "raw_code": "fig.add_subplot(1, 1, 1)", "str_map": {}}
{"src": ["sort", "dictionary", "x", "by", "value", "in", "ascending", "order"], "token": ["sorted", "(", "list", "(", "x", ".", "items", "(", ")", ")", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "sorted(list(x.items()), key=operator.itemgetter(1))", "decano_code": "sorted(list(x.items()), key=operator.itemgetter(1))", "raw_code": "sorted(list(x.items()), key=operator.itemgetter(1))", "str_map": {}}
{"src": ["sort", "dictionary", "dict1", "by", "value", "in", "ascending", "order"], "token": ["sorted", "(", "dict1", ",", "key", "=", "dict1", ".", "get", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "sorted(dict1, key=dict1.get)", "decano_code": "sorted(dict1, key=dict1.get)", "raw_code": "sorted(dict1, key=dict1.get)", "str_map": {}}
{"src": ["sort", "dictionary", "d", "by", "value", "in", "descending", "order"], "token": ["sorted", "(", "d", ",", "key", "=", "d", ".", "get", ",", "reverse", "=", "True", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "sorted(d, key=d.get, reverse=True)", "decano_code": "sorted(d, key=d.get, reverse=True)", "raw_code": "sorted(d, key=d.get, reverse=True)", "str_map": {}}
{"src": ["sort", "dictionary", "d", "by", "value", "in", "ascending", "order"], "token": ["sorted", "(", "list", "(", "d", ".", "items", "(", ")", ")", ",", "key", "=", "(", "lambda", "x", ":", "x", "[", "1", "]", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "sorted(list(d.items()), key=(lambda x: x[1]))", "decano_code": "sorted(list(d.items()), key=(lambda x: x[1]))", "raw_code": "sorted(list(d.items()), key=(lambda x: x[1]))", "str_map": {}}
{"src": ["elementwise", "product", "of", "3d", "arrays", "a", "and", "b"], "token": ["np", ".", "einsum", "(", "'ijk,ikl->ijl'", ",", "A", ",", "B", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "np.einsum('ijk,ikl->ijl', A, B)", "decano_code": "np.einsum('ijk,ikl->ijl', A, B)", "raw_code": "np.einsum('ijk,ikl->ijl', A, B)", "str_map": {}}
{"src": ["print", "a", "string", "card", "with", "string", "formatting"], "token": ["print", "(", "'I have: {0.price}'", ".", "format", "(", "card", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "print('I have: {0.price}'.format(card))", "decano_code": "print('I have: {0.price}'.format(card))", "raw_code": "print('I have: {0.price}'.format(card))", "str_map": {}}
{"src": ["write", "a", "comment", "# Data for Class A\\n", "to", "a", "file", "object", "f"], "token": ["f", ".", "write", "(", "'# Data for Class A\\n'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "f.write('# Data for Class A\\n')", "decano_code": "f.write('# Data for Class A\\n')", "raw_code": "f.write('# Data for Class A\\n')", "str_map": {}}
{"src": ["move", "the", "last", "item", "in", "list", "a", "to", "the", "beginning"], "token": ["a", "=", "a", "[", "-", "1", ":", "]", "+", "a", "[", ":", "-", "1", "]"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "a = a[-1:] + a[:-1]", "decano_code": "a = a[-1:] + a[:-1]", "raw_code": "a = a[-1:] + a[:-1]", "str_map": {}}
{"src": ["parse", "DateTime", "object", "datetimevariable", "using", "format", "_STR:0_"], "token": ["datetimevariable", ".", "strftime", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "datetimevariable.strftime(\" _STR:0_ \")", "decano_code": "datetimevariable.strftime(\" _STR:0_ \")", "raw_code": "datetimevariable.strftime('%Y-%m-%d')", "str_map": {"%Y-%m-%d": "_STR:0_"}}
{"src": ["normalize", "line", "ends", "in", "a", "string", "_STR:0_"], "token": ["mixed", ".", "replace", "(", "'\\r\\n'", ",", "'\\n'", ")", ".", "replace", "(", "'\\r'", ",", "'\\n'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "mixed.replace('\\r\\n', '\\n').replace('\\r', '\\n')", "decano_code": "mixed.replace('\\r\\n', '\\n').replace('\\r', '\\n')", "raw_code": "mixed.replace('\\r\\n', '\\n').replace('\\r', '\\n')", "str_map": {"mixed": "_STR:0_"}}
{"src": ["find", "the", "real", "user", "home", "directory", "using", "python"], "token": ["os", ".", "path", ".", "expanduser", "(", "'~user'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "os.path.expanduser('~user')", "decano_code": "os.path.expanduser('~user')", "raw_code": "os.path.expanduser('~user')", "str_map": {}}
{"src": ["index", "a", "list", "l", "with", "another", "list", "idx"], "token": ["T", "=", "[", "L", "[", "i", "]", "for", "i", "in", "Idx", "]"], "type": ["NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "T = [L[i] for i in Idx]", "decano_code": "T = [L[i] for i in Idx]", "raw_code": "T = [L[i] for i in Idx]", "str_map": {}}
{"src": ["get", "a", "list", "of", "words", "words", "of", "a", "file", "_STR:0_"], "token": ["words", "=", "open", "(", "\" _STR:0_ \"", ")", ".", "read", "(", ")", ".", "split", "(", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "words = open(\" _STR:0_ \").read().split()", "decano_code": "words = open(\" _STR:0_ \").read().split()", "raw_code": "words = open('myfile').read().split()", "str_map": {"myfile": "_STR:0_"}}
{"src": ["get", "a", "list", "of", "lists", "with", "summing", "the", "values", "of", "the", "second", "element", "from", "each", "list", "of", "lists", "data"], "token": ["[", "[", "sum", "(", "[", "x", "[", "1", "]", "for", "x", "in", "i", "]", ")", "]", "for", "i", "in", "data", "]"], "type": ["OP", "OP", "KEYWORD", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[[sum([x[1] for x in i])] for i in data]", "decano_code": "[[sum([x[1] for x in i])] for i in data]", "raw_code": "[[sum([x[1] for x in i])] for i in data]", "str_map": {}}
{"src": ["summing", "the", "second", "item", "in", "a", "list", "of", "lists", "of", "lists"], "token": ["[", "sum", "(", "[", "x", "[", "1", "]", "for", "x", "in", "i", "]", ")", "for", "i", "in", "data", "]"], "type": ["OP", "KEYWORD", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[sum([x[1] for x in i]) for i in data]", "decano_code": "[sum([x[1] for x in i]) for i in data]", "raw_code": "[sum([x[1] for x in i]) for i in data]", "str_map": {}}
{"src": ["sort", "objects", "in", "articles", "in", "descending", "order", "of", "counts", "of", "likes"], "token": ["Article", ".", "objects", ".", "annotate", "(", "like_count", "=", "Count", "(", "'likes'", ")", ")", ".", "order_by", "(", "'-like_count'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "Article.objects.annotate(like_count=Count('likes')).order_by('-like_count')", "decano_code": "Article.objects.annotate(like_count=Count('likes')).order_by('-like_count')", "raw_code": "Article.objects.annotate(like_count=Count('likes')).order_by('-like_count')", "str_map": {}}
{"src": ["return", "a", "DateTime", "object", "with", "the", "current", "UTC", "date"], "token": ["today", "=", "datetime", ".", "datetime", ".", "utcnow", "(", ")", ".", "date", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "today = datetime.datetime.utcnow().date()", "decano_code": "today = datetime.datetime.utcnow().date()", "raw_code": "today = datetime.datetime.utcnow().date()", "str_map": {}}
{"src": ["create", "a", "list", "containing", "the", "multiplication", "of", "each", "elements", "at", "the", "same", "index", "of", "list", "lista", "and", "list", "listb"], "token": ["[", "(", "a", "*", "b", ")", "for", "a", ",", "b", "in", "zip", "(", "lista", ",", "listb", ")", "]"], "type": ["OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "[(a * b) for a, b in zip(lista, listb)]", "decano_code": "[(a * b) for a, b in zip(lista, listb)]", "raw_code": "[(a * b) for a, b in zip(lista, listb)]", "str_map": {}}
{"src": ["fetch", "smilies", "matching", "regex", "pattern", "_STR:0_", "in", "string", "s"], "token": ["re", ".", "findall", "(", "\" _STR:0_ \"", ",", "s", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.findall(\" _STR:0_ \", s)", "decano_code": "re.findall(\" _STR:0_ \", s)", "raw_code": "re.findall('(?::|;|=)(?:-)?(?:\\\\)|\\\\(|D|P)', s)", "str_map": {"(?::|;|=)(?:-)?(?:\\)|\\(|D|P)": "_STR:0_"}}
{"src": ["match", "the", "pattern", "_STR:0_", "to", "the", "string", "str"], "token": ["re", ".", "match", "(", "\" _STR:0_ \"", ",", "str", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "OP"], "cano_code": "re.match(\" _STR:0_ \", str)", "decano_code": "re.match(\" _STR:0_ \", str)", "raw_code": "re.match('[:;][)(](?![)(])', str)", "str_map": {"[:;][)(](?![)(])": "_STR:0_"}}
{"src": ["convert", "a", "list", "of", "objects", "list_name", "to", "json", "string", "json_string"], "token": ["json_string", "=", "json", ".", "dumps", "(", "[", "ob", ".", "__dict__", "for", "ob", "in", "list_name", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "json_string = json.dumps([ob.__dict__ for ob in list_name])", "decano_code": "json_string = json.dumps([ob.__dict__ for ob in list_name])", "raw_code": "json_string = json.dumps([ob.__dict__ for ob in list_name])", "str_map": {}}
{"src": ["create", "a", "list", "listofzeros", "of", "n", "zeros"], "token": ["listofzeros", "=", "[", "0", "]", "*", "n"], "type": ["NAME", "OP", "OP", "NUMBER", "OP", "OP", "NAME"], "cano_code": "listofzeros = [0] * n", "decano_code": "listofzeros = [0] * n", "raw_code": "listofzeros = [0] * n", "str_map": {}}
{"src": ["decode", "the", "string", "_STR:0_", "to", "UTF-8"], "token": ["stringnamehere", ".", "decode", "(", "'utf-8'", ",", "'ignore'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "stringnamehere.decode('utf-8', 'ignore')", "decano_code": "stringnamehere.decode('utf-8', 'ignore')", "raw_code": "stringnamehere.decode('utf-8', 'ignore')", "str_map": {"stringnamehere": "_STR:0_"}}
{"src": ["match", "regex", "pattern", "_STR:0_", "on", "string", "_STR:1_"], "token": ["re", ".", "findall", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.findall(\" _STR:0_ \", \" _STR:1_ \")", "decano_code": "re.findall(\" _STR:0_ \", \" _STR:1_ \")", "raw_code": "re.findall('((?:A|B|C)D)', 'BDE')", "str_map": {"((?:A|B|C)D)": "_STR:0_", "BDE": "_STR:1_"}}
{"src": ["create", "a", "key", "key", "if", "it", "does", "not", "exist", "in", "dict", "dic", "and", "append", "element", "value", "to", "value", "."], "token": ["dic", ".", "setdefault", "(", "key", ",", "[", "]", ")", ".", "append", "(", "value", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "dic.setdefault(key, []).append(value)", "decano_code": "dic.setdefault(key, []).append(value)", "raw_code": "dic.setdefault(key, []).append(value)", "str_map": {}}
{"src": ["get", "the", "value", "of", "the", "minimum", "element", "in", "the", "second", "column", "of", "array", "a"], "token": ["a", "[", "np", ".", "argmin", "(", "a", "[", ":", ",", "(", "1", ")", "]", ")", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP", "OP", "OP"], "cano_code": "a[np.argmin(a[:, (1)])]", "decano_code": "a[np.argmin(a[:, (1)])]", "raw_code": "a[np.argmin(a[:, (1)])]", "str_map": {}}
{"src": ["extend", "dictionary", "a", "with", "key/value", "pairs", "of", "dictionary", "b"], "token": ["a", ".", "update", "(", "b", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "a.update(b)", "decano_code": "a.update(b)", "raw_code": "a.update(b)", "str_map": {}}
{"src": ["removing", "key", "values", "pairs", "with", "key", "_STR:0_", "from", "a", "list", "of", "dictionaries", "mylist"], "token": ["[", "{", "k", ":", "v", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", "if", "k", "!=", "\" _STR:0_ \"", "}", "for", "d", "in", "mylist", "]"], "type": ["OP", "OP", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "OP", "STRING", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[{k: v for k, v in d.items() if k != \" _STR:0_ \"} for d in mylist]", "decano_code": "[{k: v for k, v in d.items() if k != \" _STR:0_ \"} for d in mylist]", "raw_code": "[{k: v for k, v in d.items() if k != 'mykey1'} for d in mylist]", "str_map": {"mykey1": "_STR:0_"}}
{"src": ["removing", "key", "values", "pairs", "from", "a", "list", "of", "dictionaries"], "token": ["[", "dict", "(", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", "if", "k", "!=", "'mykey1'", ")", "for", "d", "in", "mylist", "]"], "type": ["OP", "KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "OP", "STRING", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[dict((k, v) for k, v in d.items() if k != 'mykey1') for d in mylist]", "decano_code": "[dict((k, v) for k, v in d.items() if k != 'mykey1') for d in mylist]", "raw_code": "[dict((k, v) for k, v in d.items() if k != 'mykey1') for d in mylist]", "str_map": {}}
{"src": ["create", "3", "by", "3", "matrix", "of", "random", "numbers"], "token": ["numpy", ".", "random", ".", "random", "(", "(", "3", ",", "3", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "numpy.random.random((3, 3))", "decano_code": "numpy.random.random((3, 3))", "raw_code": "numpy.random.random((3, 3))", "str_map": {}}
{"src": ["make", "new", "column", "_STR:0_", "in", "panda", "dataframe", "by", "adding", "values", "from", "other", "columns", "_STR:1_", "and", "_STR:2_"], "token": ["df", "[", "\" _STR:0_ \"", "]", "=", "df", "[", "\" _STR:1_ \"", "]", "+", "df", "[", "\" _STR:2_ \"", "]"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df[\" _STR:0_ \"] = df[\" _STR:1_ \"] + df[\" _STR:2_ \"]", "decano_code": "df[\" _STR:0_ \"] = df[\" _STR:1_ \"] + df[\" _STR:2_ \"]", "raw_code": "df['C'] = df['A'] + df['B']", "str_map": {"C": "_STR:0_", "A": "_STR:1_", "B": "_STR:2_"}}
{"src": ["create", "a", "list", "of", "values", "from", "the", "dictionary", "programs", "that", "have", "a", "key", "with", "a", "case", "insensitive", "match", "to", "_STR:0_"], "token": ["[", "value", "for", "key", ",", "value", "in", "list", "(", "programs", ".", "items", "(", ")", ")", "if", "\" _STR:0_ \"", "in", "key", ".", "lower", "(", ")", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "STRING", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "[value for key, value in list(programs.items()) if \" _STR:0_ \" in key.lower()]", "decano_code": "[value for key, value in list(programs.items()) if \" _STR:0_ \" in key.lower()]", "raw_code": "[value for key, value in list(programs.items()) if 'new york' in key.lower()]", "str_map": {"new york": "_STR:0_"}}
{"src": ["append", "a", "path", "/path/to/main_folder", "in", "system", "path"], "token": ["sys", ".", "path", ".", "append", "(", "'/path/to/main_folder'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "sys.path.append('/path/to/main_folder')", "decano_code": "sys.path.append('/path/to/main_folder')", "raw_code": "sys.path.append('/path/to/main_folder')", "str_map": {}}
{"src": ["get", "all", "digits", "in", "a", "string", "s", "after", "a", "_STR:0_", "character"], "token": ["re", ".", "findall", "(", "'\\\\d+(?=[^[]+$)'", ",", "s", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.findall('\\\\d+(?=[^[]+$)', s)", "decano_code": "re.findall('\\\\d+(?=[^[]+$)', s)", "raw_code": "re.findall('\\\\d+(?=[^[]+$)', s)", "str_map": {"[": "_STR:0_"}}
{"src": ["python", "pickle/unpickle", "a", "list", "to/from", "a", "file", "_STR:0_"], "token": ["pickle", ".", "load", "(", "open", "(", "\" _STR:0_ \"", ",", "'rb'", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "pickle.load(open(\" _STR:0_ \", 'rb'))", "decano_code": "pickle.load(open(\" _STR:0_ \", 'rb'))", "raw_code": "pickle.load(open('afile', 'rb'))", "str_map": {"afile": "_STR:0_"}}
{"src": ["clicking", "a", "link", "using", "selenium", "using", "python"], "token": ["driver", ".", "find_element_by_xpath", "(", "'xpath'", ")", ".", "click", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "driver.find_element_by_xpath('xpath').click()", "decano_code": "driver.find_element_by_xpath('xpath').click()", "raw_code": "driver.find_element_by_xpath('xpath').click()", "str_map": {}}
{"src": ["count", "unique", "index", "values", "in", "column", "_STR:0_", "in", "pandas", "dataframe", "ex"], "token": ["ex", ".", "groupby", "(", "level", "=", "\" _STR:0_ \"", ")", ".", "agg", "(", "lambda", "x", ":", "x", ".", "index", ".", "get_level_values", "(", "1", ")", ".", "nunique", "(", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "ex.groupby(level=\" _STR:0_ \").agg(lambda x: x.index.get_level_values(1).nunique())", "decano_code": "ex.groupby(level=\" _STR:0_ \").agg(lambda x: x.index.get_level_values(1).nunique())", "raw_code": "ex.groupby(level='A').agg(lambda x: x.index.get_level_values(1).nunique())", "str_map": {"A": "_STR:0_"}}
{"src": ["create", "a", "pandas", "dataframe", "of", "values", "from", "a", "dictionary", "d", "which", "contains", "dictionaries", "of", "dictionaries"], "token": ["pd", ".", "concat", "(", "map", "(", "pd", ".", "DataFrame", ",", "iter", "(", "d", ".", "values", "(", ")", ")", ")", ",", "keys", "=", "list", "(", "d", ".", "keys", "(", ")", ")", ")", ".", "stack", "(", ")", ".", "unstack", "(", "0", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "pd.concat(map(pd.DataFrame, iter(d.values())), keys=list(d.keys())).stack().unstack(0)", "decano_code": "pd.concat(map(pd.DataFrame, iter(d.values())), keys=list(d.keys())).stack().unstack(0)", "raw_code": "pd.concat(map(pd.DataFrame, iter(d.values())), keys=list(d.keys())).stack().unstack(0)", "str_map": {}}
{"src": ["find", "out", "the", "number", "of", "non-matched", "elements", "at", "the", "same", "index", "of", "list", "a", "and", "list", "b"], "token": ["sum", "(", "1", "for", "i", ",", "j", "in", "zip", "(", "a", ",", "b", ")", "if", "i", "!=", "j", ")"], "type": ["KEYWORD", "OP", "NUMBER", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP"], "cano_code": "sum(1 for i, j in zip(a, b) if i != j)", "decano_code": "sum(1 for i, j in zip(a, b) if i != j)", "raw_code": "sum(1 for i, j in zip(a, b) if i != j)", "str_map": {}}
{"src": ["make", "all", "keys", "lowercase", "in", "dictionary", "d"], "token": ["d", "=", "{", "(", "a", ".", "lower", "(", ")", ",", "b", ")", ":", "v", "for", "(", "a", ",", "b", ")", ",", "v", "in", "list", "(", "d", ".", "items", "(", ")", ")", "}"], "type": ["NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "OP", "NAME", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "d = {(a.lower(), b): v for (a, b), v in list(d.items())}", "decano_code": "d = {(a.lower(), b): v for (a, b), v in list(d.items())}", "raw_code": "d = {(a.lower(), b): v for (a, b), v in list(d.items())}", "str_map": {}}
{"src": ["sort", "list", "list", "_", "based", "on", "first", "element", "of", "each", "tuple", "and", "by", "the", "length", "of", "the", "second", "element", "of", "each", "tuple"], "token": ["list_", ".", "sort", "(", "key", "=", "lambda", "x", ":", "[", "x", "[", "0", "]", ",", "len", "(", "x", "[", "1", "]", ")", ",", "x", "[", "1", "]", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "list_.sort(key=lambda x: [x[0], len(x[1]), x[1]])", "decano_code": "list_.sort(key=lambda x: [x[0], len(x[1]), x[1]])", "raw_code": "list_.sort(key=lambda x: [x[0], len(x[1]), x[1]])", "str_map": {}}
{"src": ["trim", "whitespace", "in", "string", "s"], "token": ["s", ".", "strip", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "s.strip()", "decano_code": "s.strip()", "raw_code": "s.strip()", "str_map": {}}
{"src": ["trim", "whitespace", "(including", "tabs", ")", "in", "s", "on", "the", "left", "side"], "token": ["s", "=", "s", ".", "lstrip", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "s = s.lstrip()", "decano_code": "s = s.lstrip()", "raw_code": "s = s.lstrip()", "str_map": {}}
{"src": ["trim", "whitespace", "(including", "tabs", ")", "in", "s", "on", "the", "right", "side"], "token": ["s", "=", "s", ".", "rstrip", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "s = s.rstrip()", "decano_code": "s = s.rstrip()", "raw_code": "s = s.rstrip()", "str_map": {}}
{"src": ["trim", "characters", "_STR:0_", "in", "s"], "token": ["s", "=", "s", ".", "strip", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "s = s.strip(\" _STR:0_ \")", "decano_code": "s = s.strip(\" _STR:0_ \")", "raw_code": "s = s.strip(' \\t\\n\\r')", "str_map": {" \t\n\r": "_STR:0_"}}
{"src": ["trim", "whitespaces", "(including", "tabs", ")", "in", "string", "s"], "token": ["print", "(", "re", ".", "sub", "(", "'[\\\\s+]'", ",", "''", ",", "s", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP", "OP"], "cano_code": "print(re.sub('[\\\\s+]', '', s))", "decano_code": "print(re.sub('[\\\\s+]', '', s))", "raw_code": "print(re.sub('[\\\\s+]', '', s))", "str_map": {}}
{"src": ["in", "django", ",", "filter", "Task.objects", "[", "Task", ".", "objects", "]", "based", "on", "all", "entities", "in", "['A'", ",", "_STR:0_", ",", "_STR:1_", "]"], "token": ["Task", ".", "objects", ".", "exclude", "(", "prerequisites__status__in", "=", "[", "'A'", ",", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "Task.objects.exclude(prerequisites__status__in=['A', \" _STR:0_ \", \" _STR:1_ \"])", "decano_code": "Task.objects.exclude(prerequisites__status__in=['A', \" _STR:0_ \", \" _STR:1_ \"])", "raw_code": "Task.objects.exclude(prerequisites__status__in=['A', 'P', 'F'])", "str_map": {"P": "_STR:0_", "F": "_STR:1_"}}
{"src": ["change", "background", "color", "in", "tkinter"], "token": ["root", ".", "configure", "(", "background", "=", "'black'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "root.configure(background='black')", "decano_code": "root.configure(background='black')", "raw_code": "root.configure(background='black')", "str_map": {}}
{"src": ["convert", "dict", "result", "to", "numpy", "structured", "array"], "token": ["numpy", ".", "array", "(", "[", "(", "key", ",", "val", ")", "for", "key", ",", "val", "in", "result", ".", "items", "(", ")", "]", ",", "dtype", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP"], "cano_code": "numpy.array([(key, val) for key, val in result.items()], dtype)", "decano_code": "numpy.array([(key, val) for key, val in result.items()], dtype)", "raw_code": "numpy.array([(key, val) for key, val in result.items()], dtype)", "str_map": {}}
{"src": ["concatenate", "dataframe", "df_1", "to", "dataframe", "df_2", "sorted", "by", "values", "of", "the", "column", "_STR:0_"], "token": ["pd", ".", "concat", "(", "[", "df_1", ",", "df_2", ".", "sort_values", "(", "\" _STR:0_ \"", ")", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "pd.concat([df_1, df_2.sort_values(\" _STR:0_ \")])", "decano_code": "pd.concat([df_1, df_2.sort_values(\" _STR:0_ \")])", "raw_code": "pd.concat([df_1, df_2.sort_values('y')])", "str_map": {"y": "_STR:0_"}}
{"src": ["replace", "the", "last", "occurence", "of", "an", "expression", "_STR:0_", "with", "_STR:1_", "in", "a", "string", "s"], "token": ["re", ".", "sub", "(", "'(.*)</div>'", ",", "'\\\\1</bad>'", ",", "s", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.sub('(.*)</div>', '\\\\1</bad>', s)", "decano_code": "re.sub('(.*)</div>', '\\\\1</bad>', s)", "raw_code": "re.sub('(.*)</div>', '\\\\1</bad>', s)", "str_map": {"</div>": "_STR:0_", "</bad>": "_STR:1_"}}
{"src": ["get", "the", "maximum", "of", "_STR:0_", "and", "_STR:1_", "values", "in", "a", "dictionary"], "token": ["print", "(", "max", "(", "d", ",", "key", "=", "lambda", "x", ":", "(", "d", "[", "x", "]", "[", "\" _STR:0_ \"", "]", ",", "d", "[", "x", "]", "[", "\" _STR:1_ \"", "]", ")", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "OP", "OP", "OP"], "cano_code": "print(max(d, key=lambda x: (d[x][\" _STR:0_ \"], d[x][\" _STR:1_ \"])))", "decano_code": "print(max(d, key=lambda x: (d[x][\" _STR:0_ \"], d[x][\" _STR:1_ \"])))", "raw_code": "print(max(d, key=lambda x: (d[x]['salary'], d[x]['bonus'])))", "str_map": {"salary": "_STR:0_", "bonus": "_STR:1_"}}
{"src": ["filter", "django", "objects", "by", "author", "with", "ids", "1", "and", "2"], "token": ["Book", ".", "objects", ".", "filter", "(", "author__id", "=", "1", ")", ".", "filter", "(", "author__id", "=", "2", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "Book.objects.filter(author__id=1).filter(author__id=2)", "decano_code": "Book.objects.filter(author__id=1).filter(author__id=2)", "raw_code": "Book.objects.filter(author__id=1).filter(author__id=2)", "str_map": {}}
{"src": ["split", "string", "_STR:0_", "based", "on", "case-insensitive", "matching", "using", "string", "_STR:1_"], "token": ["re", ".", "compile", "(", "\" _STR:1_ \"", ",", "re", ".", "IGNORECASE", ")", ".", "split", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "re.compile(\" _STR:1_ \", re.IGNORECASE).split(\" _STR:0_ \")", "decano_code": "re.compile(\" _STR:1_ \", re.IGNORECASE).split(\" _STR:0_ \")", "raw_code": "re.compile('XYZ', re.IGNORECASE).split('fooxyzbar')", "str_map": {"fooxyzbar": "_STR:0_", "XYZ": "_STR:1_"}}
{"src": ["get", "list", "of", "sums", "of", "neighboring", "integers", "in", "string", "example"], "token": ["[", "sum", "(", "map", "(", "int", ",", "s", ")", ")", "for", "s", "in", "example", ".", "split", "(", ")", "]"], "type": ["OP", "KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "[sum(map(int, s)) for s in example.split()]", "decano_code": "[sum(map(int, s)) for s in example.split()]", "raw_code": "[sum(map(int, s)) for s in example.split()]", "str_map": {}}
{"src": ["get", "all", "the", "keys", "from", "dictionary", "y", "whose", "value", "is", "1"], "token": ["[", "i", "for", "i", "in", "y", "if", "y", "[", "i", "]", "==", "1", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP"], "cano_code": "[i for i in y if y[i] == 1]", "decano_code": "[i for i in y if y[i] == 1]", "raw_code": "[i for i in y if y[i] == 1]", "str_map": {}}
{"src": ["converting", "byte", "string", "c", "in", "unicode", "string"], "token": ["c", ".", "decode", "(", "'unicode_escape'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "c.decode('unicode_escape')", "decano_code": "c.decode('unicode_escape')", "raw_code": "c.decode('unicode_escape')", "str_map": {}}
{"src": ["unpivot", "first", "2", "columns", "into", "new", "columns", "_STR:0_", "and", "_STR:1_", "from", "a", "pandas", "dataframe", "x"], "token": ["pd", ".", "melt", "(", "x", ",", "id_vars", "=", "[", "'farm'", ",", "'fruit'", "]", ",", "var_name", "=", "\" _STR:0_ \"", ",", "value_name", "=", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "pd.melt(x, id_vars=['farm', 'fruit'], var_name=\" _STR:0_ \", value_name=\" _STR:1_ \")", "decano_code": "pd.melt(x, id_vars=['farm', 'fruit'], var_name=\" _STR:0_ \", value_name=\" _STR:1_ \")", "raw_code": "pd.melt(x, id_vars=['farm', 'fruit'], var_name='year', value_name='value')", "str_map": {"year": "_STR:0_", "value": "_STR:1_"}}
{"src": ["add", "key", "_STR:0_", "and", "value", "_STR:1_", "to", "dictionary", "default_data "], "token": ["default_data", "[", "\" _STR:0_ \"", "]", "=", "3"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NUMBER"], "cano_code": "default_data[\" _STR:0_ \"] = 3", "decano_code": "default_data[\" _STR:0_ \"] = 3", "raw_code": "default_data['item3'] = 3", "str_map": {"item3": "_STR:0_", "3": "_STR:1_"}}
{"src": ["add", "key", "_STR:0_", "and", "value", "_STR:1_", "to", "dictionary", "default_data "], "token": ["default_data", ".", "update", "(", "{", "\" _STR:0_ \"", ":", "3", ",", "}", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "default_data.update({\" _STR:0_ \": 3, })", "decano_code": "default_data.update({\" _STR:0_ \": 3, })", "raw_code": "default_data.update({'item3': 3, })", "str_map": {"item3": "_STR:0_", "3": "_STR:1_"}}
{"src": ["add", "key", "value", "pairs", "_STR:0_", ",", "4", "and", "_STR:1_", ",", "5", "to", "dictionary", "default_data"], "token": ["default_data", ".", "update", "(", "{", "\" _STR:0_ \"", ":", "4", ",", "\" _STR:1_ \"", ":", "5", ",", "}", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "default_data.update({\" _STR:0_ \": 4, \" _STR:1_ \": 5, })", "decano_code": "default_data.update({\" _STR:0_ \": 4, \" _STR:1_ \": 5, })", "raw_code": "default_data.update({'item4': 4, 'item5': 5, })", "str_map": {"item4": "_STR:0_", "item5": "_STR:1_"}}
{"src": ["get", "the", "first", "and", "last", "3", "elements", "of", "list", "l"], "token": ["l", "[", ":", "3", "]", "+", "l", "[", "-", "3", ":", "]"], "type": ["NAME", "OP", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "l[:3] + l[-3:]", "decano_code": "l[:3] + l[-3:]", "raw_code": "l[:3] + l[-3:]", "str_map": {}}
{"src": ["reset", "index", "to", "default", "in", "dataframe", "df"], "token": ["df", "=", "df", ".", "reset_index", "(", "drop", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df = df.reset_index(drop=True)", "decano_code": "df = df.reset_index(drop=True)", "raw_code": "df = df.reset_index(drop=True)", "str_map": {}}
{"src": ["for", "each", "index", "x", "from", "0", "to", "3", ",", "append", "the", "element", "at", "index", "x", "of", "list", "b", "to", "the", "list", "at", "index", "x", "of", "list", "a", "."], "token": ["[", "a", "[", "x", "]", ".", "append", "(", "b", "[", "x", "]", ")", "for", "x", "in", "range", "(", "3", ")", "]"], "type": ["OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "OP"], "cano_code": "[a[x].append(b[x]) for x in range(3)]", "decano_code": "[a[x].append(b[x]) for x in range(3)]", "raw_code": "[a[x].append(b[x]) for x in range(3)]", "str_map": {}}
{"src": ["get", "canonical", "path", "of", "the", "filename", "path"], "token": ["os", ".", "path", ".", "realpath", "(", "path", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "os.path.realpath(path)", "decano_code": "os.path.realpath(path)", "raw_code": "os.path.realpath(path)", "str_map": {}}
{"src": ["check", "if", "dictionary", "L[0].f.items(", "[", "L[0]", ".", "f", ".", "items(", "]", ")", "is", "in", "dictionary", "a3.f.items(", "[", "a3", ".", "f", ".", "items(", "]", ")"], "token": ["set", "(", "L", "[", "0", "]", ".", "f", ".", "items", "(", ")", ")", ".", "issubset", "(", "set", "(", "a3", ".", "f", ".", "items", "(", ")", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "set(L[0].f.items()).issubset(set(a3.f.items()))", "decano_code": "set(L[0].f.items()).issubset(set(a3.f.items()))", "raw_code": "set(L[0].f.items()).issubset(set(a3.f.items()))", "str_map": {}}
{"src": ["find", "all", "the", "indexes", "in", "a", "numpy", "2D", "array", "where", "the", "value", "is", "1"], "token": ["zip", "(", "*", "np", ".", "where", "(", "a", "==", "1", ")", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "zip(*np.where(a == 1))", "decano_code": "zip(*np.where(a == 1))", "raw_code": "zip(*np.where(a == 1))", "str_map": {}}
{"src": ["how", "to", "find", "the", "index", "of", "a", "value", "in", "2d", "array", "in", "python", "?"], "token": ["np", ".", "where", "(", "a", "==", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "np.where(a == 1)", "decano_code": "np.where(a == 1)", "raw_code": "np.where(a == 1)", "str_map": {}}
{"src": ["collapse", "hierarchical", "column", "index", "to", "level", "0", "in", "dataframe", "df"], "token": ["df", ".", "columns", "=", "df", ".", "columns", ".", "get_level_values", "(", "0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "df.columns = df.columns.get_level_values(0)", "decano_code": "df.columns = df.columns.get_level_values(0)", "raw_code": "df.columns = df.columns.get_level_values(0)", "str_map": {}}
{"src": ["create", "a", "matrix", "from", "a", "list", "[1, 2, 3", "]"], "token": ["x", "=", "scipy", ".", "matrix", "(", "[", "1", ",", "2", ",", "3", "]", ")", ".", "transpose", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "x = scipy.matrix([1, 2, 3]).transpose()", "decano_code": "x = scipy.matrix([1, 2, 3]).transpose()", "raw_code": "x = scipy.matrix([1, 2, 3]).transpose()", "str_map": {}}
{"src": ["add", "character", "_STR:0_", "after", "word", "_STR:1_", "in", "string", "text"], "token": ["text", "=", "re", ".", "sub", "(", "'(\\\\bget\\\\b)'", ",", "'\\\\1@'", ",", "text", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "text = re.sub('(\\\\bget\\\\b)', '\\\\1@', text)", "decano_code": "text = re.sub('(\\\\bget\\\\b)', '\\\\1@', text)", "raw_code": "text = re.sub('(\\\\bget\\\\b)', '\\\\1@', text)", "str_map": {"@": "_STR:0_", "get": "_STR:1_"}}
{"src": ["get", "a", "numpy", "array", "that", "contains", "the", "element", "wise", "minimum", "of", "three", "3x1", "arrays"], "token": ["np", ".", "array", "(", "[", "np", ".", "arange", "(", "3", ")", ",", "np", ".", "arange", "(", "2", ",", "-", "1", ",", "-", "1", ")", ",", "np", ".", "ones", "(", "(", "3", ",", ")", ")", "]", ")", ".", "min", "(", "axis", "=", "0", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "OP", "OP", "OP", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "np.array([np.arange(3), np.arange(2, -1, -1), np.ones((3,))]).min(axis=0)", "decano_code": "np.array([np.arange(3), np.arange(2, -1, -1), np.ones((3,))]).min(axis=0)", "raw_code": "np.array([np.arange(3), np.arange(2, -1, -1), np.ones((3,))]).min(axis=0)", "str_map": {}}
{"src": ["add", "a", "column", "_STR:0_", "to", "dataframe", "df", "for", "index", "in", "range"], "token": ["df", "[", "\" _STR:0_ \"", "]", "=", "list", "(", "range", "(", "1", ",", "len", "(", "df", ")", "+", "1", ")", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NUMBER", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "df[\" _STR:0_ \"] = list(range(1, len(df) + 1))", "decano_code": "df[\" _STR:0_ \"] = list(range(1, len(df) + 1))", "raw_code": "df['new_col'] = list(range(1, len(df) + 1))", "str_map": {"new_col": "_STR:0_"}}
{"src": ["set", "environment", "variable", "_STR:0_", "equal", "to", "1"], "token": ["os", ".", "environ", "[", "\" _STR:0_ \"", "]", "=", "'1'"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "STRING"], "cano_code": "os.environ[\" _STR:0_ \"] = '1'", "decano_code": "os.environ[\" _STR:0_ \"] = '1'", "raw_code": "os.environ['DEBUSSY'] = '1'", "str_map": {"DEBUSSY": "_STR:0_"}}
{"src": ["get", "a", "environment", "variable", "DEBUSSY"], "token": ["print", "(", "os", ".", "environ", "[", "'DEBUSSY'", "]", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "print(os.environ['DEBUSSY'])", "decano_code": "print(os.environ['DEBUSSY'])", "raw_code": "print(os.environ['DEBUSSY'])", "str_map": {}}
{"src": ["set", "environment", "variable", "_STR:0_", "to", "_STR:1_"], "token": ["os", ".", "environ", "[", "\" _STR:0_ \"", "]", "=", "\" _STR:1_ \""], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "STRING"], "cano_code": "os.environ[\" _STR:0_ \"] = \" _STR:1_ \"", "decano_code": "os.environ[\" _STR:0_ \"] = \" _STR:1_ \"", "raw_code": "os.environ['DEBUSSY'] = '1'", "str_map": {"DEBUSSY": "_STR:0_", "1": "_STR:1_"}}
{"src": ["update", "dictionary", "b", ",", "overwriting", "values", "where", "keys", "are", "identical", ",", "with", "contents", "of", "dictionary", "d"], "token": ["b", ".", "update", "(", "d", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "b.update(d)", "decano_code": "b.update(d)", "raw_code": "b.update(d)", "str_map": {}}
{"src": ["get", "all", "the", "values", "in", "column", "b", "from", "pandas", "data", "frame", "df"], "token": ["df", "[", "'b'", "]"], "type": ["NAME", "OP", "STRING", "OP"], "cano_code": "df['b']", "decano_code": "df['b']", "raw_code": "df['b']", "str_map": {}}
{"src": ["make", "a", "line", "plot", "with", "errorbars", ",", "ebar", ",", "from", "data", "x, y, err", "and", "set", "color", "of", "the", "errorbars", "to", "y", "(yellow", ")"], "token": ["ebar", "=", "plt", ".", "errorbar", "(", "x", ",", "y", ",", "yerr", "=", "err", ",", "ecolor", "=", "'y'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "ebar = plt.errorbar(x, y, yerr=err, ecolor='y')", "decano_code": "ebar = plt.errorbar(x, y, yerr=err, ecolor='y')", "raw_code": "ebar = plt.errorbar(x, y, yerr=err, ecolor='y')", "str_map": {}}
{"src": ["find", "all", "files", "with", "extension", "_STR:0_", "in", "directory", "folder"], "token": ["results", "+=", "[", "each", "for", "each", "in", "os", ".", "listdir", "(", "folder", ")", "if", "each", ".", "endswith", "(", "\" _STR:0_ \"", ")", "]"], "type": ["NAME", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "results += [each for each in os.listdir(folder) if each.endswith(\" _STR:0_ \")]", "decano_code": "results += [each for each in os.listdir(folder) if each.endswith(\" _STR:0_ \")]", "raw_code": "results += [each for each in os.listdir(folder) if each.endswith('.c')]", "str_map": {".c": "_STR:0_"}}
{"src": ["add", "unicode", "string", "_STR:0_", "to", "UTF-8", "decoded", "string", "_STR:1_"], "token": ["print", "(", "\" _STR:1_ \"", ".", "decode", "(", "'utf8'", ")", "+", "\" _STR:0_ \"", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "OP", "STRING", "OP"], "cano_code": "print(\" _STR:1_ \".decode('utf8') + \" _STR:0_ \")", "decano_code": "print(\" _STR:1_ \".decode('utf8') + \" _STR:0_ \")", "raw_code": "print('\\xc2\\xa3'.decode('utf8') + '1')", "str_map": {"1": "_STR:0_", "\u00c2\u00a3": "_STR:1_"}}
{"src": ["lower-case", "the", "string", "obtained", "by", "replacing", "the", "occurrences", "of", "regex", "pattern", "_STR:0_", "in", "string", "s", "with", "eplacement", "_STR:1_"], "token": ["re", ".", "sub", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ",", "s", ")", ".", "lower", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "re.sub(\" _STR:0_ \", \" _STR:1_ \", s).lower()", "decano_code": "re.sub(\" _STR:0_ \", \" _STR:1_ \", s).lower()", "raw_code": "re.sub('(?<=[a-z])([A-Z])', '-\\\\1', s).lower()", "str_map": {"(?<=[a-z])([A-Z])": "_STR:0_", "-\\1": "_STR:1_"}}
{"src": ["setting", "stacksize", "in", "a", "python", "script"], "token": ["os", ".", "system", "(", "'ulimit -s unlimited; some_executable'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "os.system('ulimit -s unlimited; some_executable')", "decano_code": "os.system('ulimit -s unlimited; some_executable')", "raw_code": "os.system('ulimit -s unlimited; some_executable')", "str_map": {}}
{"src": ["format", "a", "string", "num", "using", "string", "formatting"], "token": ["\"\"\"{0:.3g}\"\"\"", ".", "format", "(", "num", ")"], "type": ["STRING", "OP", "KEYWORD", "OP", "NAME", "OP"], "cano_code": "\"\"\"{0:.3g}\"\"\".format(num)", "decano_code": "\"\"\"{0:.3g}\"\"\".format(num)", "raw_code": "\"\"\"{0:.3g}\"\"\".format(num)", "str_map": {}}
{"src": ["append", "the", "first", "element", "of", "array", "a", "to", "array", "a"], "token": ["numpy", ".", "append", "(", "a", ",", "a", "[", "0", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "numpy.append(a, a[0])", "decano_code": "numpy.append(a, a[0])", "raw_code": "numpy.append(a, a[0])", "str_map": {}}
{"src": ["return", "the", "column", "for", "value", "38.15", "[", "38", ".", "15", "]", "in", "dataframe", "df"], "token": ["df", ".", "ix", "[", ":", ",", "(", "df", ".", "loc", "[", "0", "]", "==", "38.15", ")", "]", ".", "columns"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP", "OP", "NAME"], "cano_code": "df.ix[:, (df.loc[0] == 38.15)].columns", "decano_code": "df.ix[:, (df.loc[0] == 38.15)].columns", "raw_code": "df.ix[:, (df.loc[0] == 38.15)].columns", "str_map": {}}
{"src": ["merge", "2", "dataframes", "df1", "and", "df2", "with", "same", "values", "in", "a", "column", "_STR:0_", "with", "and", "index", "_STR:1_"], "token": ["df2", "[", "\" _STR:0_ \"", "]", "=", "df2", ".", "CET", ".", "map", "(", "df1", ".", "set_index", "(", "\" _STR:1_ \"", ")", "[", "\" _STR:0_ \"", "]", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "STRING", "OP", "OP"], "cano_code": "df2[\" _STR:0_ \"] = df2.CET.map(df1.set_index(\" _STR:1_ \")[\" _STR:0_ \"])", "decano_code": "df2[\" _STR:0_ \"] = df2.CET.map(df1.set_index(\" _STR:1_ \")[\" _STR:0_ \"])", "raw_code": "df2['revenue'] = df2.CET.map(df1.set_index('date')['revenue'])", "str_map": {"revenue": "_STR:0_", "date": "_STR:1_"}}
{"src": ["load", "a", "json", "data", "json_string", "into", "variable", "json_data"], "token": ["json_data", "=", "json", ".", "loads", "(", "json_string", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "json_data = json.loads(json_string)", "decano_code": "json_data = json.loads(json_string)", "raw_code": "json_data = json.loads(json_string)", "str_map": {}}
{"src": ["convert", "radians", "1", "to", "degrees"], "token": ["math", ".", "cos", "(", "math", ".", "radians", "(", "1", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "math.cos(math.radians(1))", "decano_code": "math.cos(math.radians(1))", "raw_code": "math.cos(math.radians(1))", "str_map": {}}
{"src": ["count", "the", "number", "of", "integers", "in", "list", "a"], "token": ["sum", "(", "isinstance", "(", "x", ",", "int", ")", "for", "x", "in", "a", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "sum(isinstance(x, int) for x in a)", "decano_code": "sum(isinstance(x, int) for x in a)", "raw_code": "sum(isinstance(x, int) for x in a)", "str_map": {}}
{"src": ["replacing", "_STR:0_", "with", "_STR:1_", "in", "a", "string", "using", "regular", "expressions"], "token": ["'used\\u200b'", ".", "replace", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "'used\\u200b'.replace(\" _STR:0_ \", \" _STR:1_ \")", "decano_code": "'used\\u200b'.replace(\" _STR:0_ \", \" _STR:1_ \")", "raw_code": "'used\\u200b'.replace('\\u200b', '*')", "str_map": {"\u200b": "_STR:0_", "*": "_STR:1_"}}
{"src": ["run", "function", "_STR:0_", "simultaneously"], "token": ["threading", ".", "Thread", "(", "target", "=", "SudsMove", ")", ".", "start", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "threading.Thread(target=SudsMove).start()", "decano_code": "threading.Thread(target=SudsMove).start()", "raw_code": "threading.Thread(target=SudsMove).start()", "str_map": {"SudsMove": "_STR:0_"}}
{"src": ["sum", "of", "squares", "values", "in", "a", "list", "l"], "token": ["sum", "(", "i", "*", "i", "for", "i", "in", "l", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "sum(i * i for i in l)", "decano_code": "sum(i * i for i in l)", "raw_code": "sum(i * i for i in l)", "str_map": {}}
{"src": ["calculate", "the", "sum", "of", "the", "squares", "of", "each", "value", "in", "list", "l"], "token": ["sum", "(", "map", "(", "lambda", "x", ":", "x", "*", "x", ",", "l", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "sum(map(lambda x: x * x, l))", "decano_code": "sum(map(lambda x: x * x, l))", "raw_code": "sum(map(lambda x: x * x, l))", "str_map": {}}
{"src": ["create", "a", "dictionary", "d", "from", "list", "iterable"], "token": ["d", "=", "dict", "(", "(", "(", "key", ",", "value", ")", "for", "(", "key", ",", "value", ")", "in", "iterable", ")", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "d = dict(((key, value) for (key, value) in iterable))", "decano_code": "d = dict(((key, value) for (key, value) in iterable))", "raw_code": "d = dict(((key, value) for (key, value) in iterable))", "str_map": {}}
{"src": ["create", "a", "dictionary", "d", "from", "list", "iterable"], "token": ["d", "=", "{", "key", ":", "value", "for", "(", "key", ",", "value", ")", "in", "iterable", "}"], "type": ["NAME", "OP", "OP", "NAME", "OP", "NAME", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP"], "cano_code": "d = {key: value for (key, value) in iterable}", "decano_code": "d = {key: value for (key, value) in iterable}", "raw_code": "d = {key: value for (key, value) in iterable}", "str_map": {}}
{"src": ["create", "a", "dictionary", "d", "from", "list", "of", "key", "value", "pairs", "iterable"], "token": ["d", "=", "{", "k", ":", "v", "for", "(", "k", ",", "v", ")", "in", "iterable", "}"], "type": ["NAME", "OP", "OP", "NAME", "OP", "NAME", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP"], "cano_code": "d = {k: v for (k, v) in iterable}", "decano_code": "d = {k: v for (k, v) in iterable}", "raw_code": "d = {k: v for (k, v) in iterable}", "str_map": {}}
{"src": ["round", "off", "entries", "in", "dataframe", "df", "column", "Alabama_exp", "to", "two", "decimal", "places", ",", "and", "entries", "in", "column", "Credit_exp", "to", "three", "decimal", "places"], "token": ["df", ".", "round", "(", "{", "'Alabama_exp'", ":", "2", ",", "'Credit_exp'", ":", "3", "}", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "STRING", "OP", "NUMBER", "OP", "OP"], "cano_code": "df.round({'Alabama_exp': 2, 'Credit_exp': 3})", "decano_code": "df.round({'Alabama_exp': 2, 'Credit_exp': 3})", "raw_code": "df.round({'Alabama_exp': 2, 'Credit_exp': 3})", "str_map": {}}
{"src": ["make", "function", "WRITEFUNCTION", "output", "nothing", "in", "curl", "p"], "token": ["p", ".", "setopt", "(", "pycurl", ".", "WRITEFUNCTION", ",", "lambda", "x", ":", "None", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "p.setopt(pycurl.WRITEFUNCTION, lambda x: None)", "decano_code": "p.setopt(pycurl.WRITEFUNCTION, lambda x: None)", "raw_code": "p.setopt(pycurl.WRITEFUNCTION, lambda x: None)", "str_map": {}}
{"src": ["return", "a", "random", "word", "from", "a", "word", "list", "_STR:0_"], "token": ["print", "(", "random", ".", "choice", "(", "words", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "print(random.choice(words))", "decano_code": "print(random.choice(words))", "raw_code": "print(random.choice(words))", "str_map": {"words": "_STR:0_"}}
{"src": ["find", "a", "max", "value", "of", "the", "key", "count", "in", "a", "nested", "dictionary", "d"], "token": ["max", "(", "d", ",", "key", "=", "lambda", "x", ":", "d", "[", "x", "]", "[", "'count'", "]", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "OP"], "cano_code": "max(d, key=lambda x: d[x]['count'])", "decano_code": "max(d, key=lambda x: d[x]['count'])", "raw_code": "max(d, key=lambda x: d[x]['count'])", "str_map": {}}
{"src": ["get", "list", "of", "string", "elements", "in", "string", "data", "delimited", "by", "commas", ",", "putting", "0", "in", "place", "of", "empty", "strings"], "token": ["[", "(", "int", "(", "x", ")", "if", "x", "else", "0", ")", "for", "x", "in", "data", ".", "split", "(", "','", ")", "]"], "type": ["OP", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "[(int(x) if x else 0) for x in data.split(',')]", "decano_code": "[(int(x) if x else 0) for x in data.split(',')]", "raw_code": "[(int(x) if x else 0) for x in data.split(',')]", "str_map": {}}
{"src": ["split", "string", "s", "into", "a", "list", "of", "strings", "based", "on", "_STR:0_", "then", "replace", "empty", "strings", "with", "zero"], "token": ["\" _STR:0_ \"", ".", "join", "(", "x", "or", "'0'", "for", "x", "in", "s", ".", "split", "(", "\" _STR:0_ \"", ")", ")"], "type": ["STRING", "OP", "NAME", "OP", "NAME", "KEYWORD", "STRING", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "\" _STR:0_ \".join(x or '0' for x in s.split(\" _STR:0_ \"))", "decano_code": "\" _STR:0_ \".join(x or '0' for x in s.split(\" _STR:0_ \"))", "raw_code": "\"\"\",\"\"\".join(x or '0' for x in s.split(','))", "str_map": {",": "_STR:0_"}}
{"src": ["regular", "expression", "match", "nothing"], "token": ["re", ".", "compile", "(", "'$^'", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "STRING", "OP"], "cano_code": "re.compile('$^')", "decano_code": "re.compile('$^')", "raw_code": "re.compile('$^')", "str_map": {}}
{"src": ["regular", "expression", "syntax", "for", "not", "to", "match", "anything"], "token": ["re", ".", "compile", "(", "'.\\\\A|.\\\\A*|.\\\\A+'", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "STRING", "OP"], "cano_code": "re.compile('.\\\\A|.\\\\A*|.\\\\A+')", "decano_code": "re.compile('.\\\\A|.\\\\A*|.\\\\A+')", "raw_code": "re.compile('.\\\\A|.\\\\A*|.\\\\A+')", "str_map": {}}
{"src": ["create", "a", "regular", "expression", "object", "with", "a", "pattern", "that", "will", "match", "nothing"], "token": ["re", ".", "compile", "(", "'a^'", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "STRING", "OP"], "cano_code": "re.compile('a^')", "decano_code": "re.compile('a^')", "raw_code": "re.compile('a^')", "str_map": {}}
{"src": ["drop", "all", "columns", "in", "dataframe", "df", "that", "holds", "a", "maximum", "value", "bigger", "than", "0"], "token": ["df", ".", "columns", "[", "df", ".", "max", "(", ")", ">", "0", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "df.columns[df.max() > 0]", "decano_code": "df.columns[df.max() > 0]", "raw_code": "df.columns[df.max() > 0]", "str_map": {}}
{"src": ["check", "if", "date", "yourdatetime", "is", "equal", "to", "today", "'", "s", "date"], "token": ["yourdatetime", ".", "date", "(", ")", "==", "datetime", ".", "today", "(", ")", ".", "date", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "yourdatetime.date() == datetime.today().date()", "decano_code": "yourdatetime.date() == datetime.today().date()", "raw_code": "yourdatetime.date() == datetime.today().date()", "str_map": {}}
{"src": ["print", "bold", "text", "_STR:0_"], "token": ["print", "(", "'\\x1b[1m'", "+", "\" _STR:0_ \"", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "print('\\x1b[1m' + \" _STR:0_ \")", "decano_code": "print('\\x1b[1m' + \" _STR:0_ \")", "raw_code": "print('\\x1b[1m' + 'Hello')", "str_map": {"Hello": "_STR:0_"}}
{"src": ["remove", "20", "symbols", "in", "front", "of", "_STR:0_", "in", "string", "_STR:1_"], "token": ["re", ".", "sub", "(", "'.{20}(.mkv)'", ",", "'\\\\1'", ",", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.sub('.{20}(.mkv)', '\\\\1', \" _STR:1_ \")", "decano_code": "re.sub('.{20}(.mkv)', '\\\\1', \" _STR:1_ \")", "raw_code": "re.sub('.{20}(.mkv)', '\\\\1', 'unique12345678901234567890.mkv')", "str_map": {".": "_STR:0_", "unique12345678901234567890.mkv": "_STR:1_"}}
{"src": ["define", "a", "list", "with", "string", "values", "['a', 'c', 'b', 'obj'", "]"], "token": ["[", "'a'", ",", "'c'", ",", "'b'", ",", "'obj'", "]"], "type": ["OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "['a', 'c', 'b', 'obj']", "decano_code": "['a', 'c', 'b', 'obj']", "raw_code": "['a', 'c', 'b', 'obj']", "str_map": {}}
{"src": ["substitute", "multiple", "whitespace", "with", "single", "whitespace", "in", "string", "mystring"], "token": ["\"\"\" \"\"\"", ".", "join", "(", "mystring", ".", "split", "(", ")", ")"], "type": ["STRING", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "\"\"\" \"\"\".join(mystring.split())", "decano_code": "\"\"\" \"\"\".join(mystring.split())", "raw_code": "\"\"\" \"\"\".join(mystring.split())", "str_map": {}}
{"src": ["print", "a", "floating", "point", "number", "2.345e-67", "[", "2", ".", "345e-67", "]", "without", "any", "truncation"], "token": ["print", "(", "'{:.100f}'", ".", "format", "(", "2.345e-67", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "KEYWORD", "OP", "NUMBER", "OP", "OP"], "cano_code": "print('{:.100f}'.format(2.345e-67))", "decano_code": "print('{:.100f}'.format(2.345e-67))", "raw_code": "print('{:.100f}'.format(2.345e-67))", "str_map": {}}
{"src": ["check", "if", "key", "_STR:0_", "in", "dict"], "token": ["(", "\" _STR:0_ \"", "in", "dict", ")"], "type": ["OP", "STRING", "KEYWORD", "KEYWORD", "OP"], "cano_code": "(\" _STR:0_ \" in dict)", "decano_code": "(\" _STR:0_ \" in dict)", "raw_code": "('key1' in dict)", "str_map": {"key1": "_STR:0_"}}
{"src": ["check", "if", "key", "_STR:0_", "in", "d"], "token": ["(", "\" _STR:0_ \"", "in", "d", ")"], "type": ["OP", "STRING", "KEYWORD", "NAME", "OP"], "cano_code": "(\" _STR:0_ \" in d)", "decano_code": "(\" _STR:0_ \" in d)", "raw_code": "('a' in d)", "str_map": {"a": "_STR:0_"}}
{"src": ["check", "if", "key", "_STR:0_", "in", "d"], "token": ["(", "\" _STR:0_ \"", "in", "d", ")"], "type": ["OP", "STRING", "KEYWORD", "NAME", "OP"], "cano_code": "(\" _STR:0_ \" in d)", "decano_code": "(\" _STR:0_ \" in d)", "raw_code": "('c' in d)", "str_map": {"c": "_STR:0_"}}
{"src": ["check", "if", "a", "given", "key", "_STR:0_", "exists", "in", "dictionary", "dict"], "token": ["if", "(", "\" _STR:0_ \"", "in", "dict", ")", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "OP", "STRING", "KEYWORD", "KEYWORD", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "if (\" _STR:0_ \" in dict):\n    pass", "decano_code": "if (\" _STR:0_ \" in dict):\n    pass", "raw_code": "if ('key1' in dict):\n    pass", "str_map": {"key1": "_STR:0_"}}
{"src": ["check", "if", "a", "given", "key", "key", "exists", "in", "dictionary", "d"], "token": ["if", "(", "key", "in", "d", ")", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "OP", "NAME", "KEYWORD", "NAME", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "if (key in d):\n    pass", "decano_code": "if (key in d):\n    pass", "raw_code": "if (key in d):\n    pass", "str_map": {}}
{"src": ["create", "a", "django", "query", "for", "a", "list", "of", "values", "1, 4, 7"], "token": ["Blog", ".", "objects", ".", "filter", "(", "pk__in", "=", "[", "1", ",", "4", ",", "7", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "Blog.objects.filter(pk__in=[1, 4, 7])", "decano_code": "Blog.objects.filter(pk__in=[1, 4, 7])", "raw_code": "Blog.objects.filter(pk__in=[1, 4, 7])", "str_map": {}}
{"src": ["read", "a", "binary", "file", "_STR:0_"], "token": ["f", "=", "open", "(", "\" _STR:0_ \"", ",", "'rb'", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "f = open(\" _STR:0_ \", 'rb')", "decano_code": "f = open(\" _STR:0_ \", 'rb')", "raw_code": "f = open('test/test.pdf', 'rb')", "str_map": {"test/test.pdf": "_STR:0_"}}
{"src": ["insert", "_STR:0_", "between", "every", "three", "digit", "before", "_STR:1_", "and", "replace", "_STR:2_", "with", "_STR:1_", "in", "12345678.46", "[", "12345678", ".", "46", "]"], "token": ["format", "(", "12345678.46", ",", "\" _STR:2_ \"", ")", ".", "replace", "(", "\" _STR:2_ \"", ",", "\" _STR:0_ \"", ")", ".", "replace", "(", "\" _STR:1_ \"", ",", "\" _STR:2_ \"", ")"], "type": ["KEYWORD", "OP", "NUMBER", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "format(12345678.46, \" _STR:2_ \").replace(\" _STR:2_ \", \" _STR:0_ \").replace(\" _STR:1_ \", \" _STR:2_ \")", "decano_code": "format(12345678.46, \" _STR:2_ \").replace(\" _STR:2_ \", \" _STR:0_ \").replace(\" _STR:1_ \", \" _STR:2_ \")", "raw_code": "format(12345678.46, ',').replace(',', ' ').replace('.', ',')", "str_map": {" ": "_STR:0_", ".": "_STR:1_", ",": "_STR:2_"}}
{"src": ["join", "pandas", "data", "frame", "frame_1", "and", "frame_2", "with", "left", "join", "by", "county_ID", "and", "right", "join", "by", "countyid"], "token": ["pd", ".", "merge", "(", "frame_1", ",", "frame_2", ",", "left_on", "=", "'county_ID'", ",", "right_on", "=", "'countyid'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "pd.merge(frame_1, frame_2, left_on='county_ID', right_on='countyid')", "decano_code": "pd.merge(frame_1, frame_2, left_on='county_ID', right_on='countyid')", "raw_code": "pd.merge(frame_1, frame_2, left_on='county_ID', right_on='countyid')", "str_map": {}}
{"src": ["calculate", "ratio", "of", "sparsity", "in", "a", "numpy", "array", "a"], "token": ["np", ".", "isnan", "(", "a", ")", ".", "sum", "(", ")", "/", "np", ".", "prod", "(", "a", ".", "shape", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "np.isnan(a).sum() / np.prod(a.shape)", "decano_code": "np.isnan(a).sum() / np.prod(a.shape)", "raw_code": "np.isnan(a).sum() / np.prod(a.shape)", "str_map": {}}
{"src": ["reverse", "sort", "items", "in", "default", "dictionary", "cityPopulation", "by", "the", "third", "item", "in", "each", "key", "'", "s", "list", "of", "values"], "token": ["sorted", "(", "iter", "(", "cityPopulation", ".", "items", "(", ")", ")", ",", "key", "=", "lambda", "k_v", ":", "k_v", "[", "1", "]", "[", "2", "]", ",", "reverse", "=", "True", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][2], reverse=True)", "decano_code": "sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][2], reverse=True)", "raw_code": "sorted(iter(cityPopulation.items()), key=lambda k_v: k_v[1][2], reverse=True)", "str_map": {}}
{"src": ["sort", "dictionary", "u", "in", "ascending", "order", "based", "on", "second", "elements", "of", "its", "values"], "token": ["sorted", "(", "list", "(", "u", ".", "items", "(", ")", ")", ",", "key", "=", "lambda", "v", ":", "v", "[", "1", "]", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "sorted(list(u.items()), key=lambda v: v[1])", "decano_code": "sorted(list(u.items()), key=lambda v: v[1])", "raw_code": "sorted(list(u.items()), key=lambda v: v[1])", "str_map": {}}
{"src": ["reverse", "sort", "dictionary", "d", "based", "on", "its", "values"], "token": ["sorted", "(", "list", "(", "d", ".", "items", "(", ")", ")", ",", "key", "=", "lambda", "k_v", ":", "k_v", "[", "1", "]", ",", "reverse", "=", "True", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "sorted(list(d.items()), key=lambda k_v: k_v[1], reverse=True)", "decano_code": "sorted(list(d.items()), key=lambda k_v: k_v[1], reverse=True)", "raw_code": "sorted(list(d.items()), key=lambda k_v: k_v[1], reverse=True)", "str_map": {}}
{"src": ["sorting", "a", "defaultdict", "d", "by", "value"], "token": ["sorted", "(", "list", "(", "d", ".", "items", "(", ")", ")", ",", "key", "=", "lambda", "k_v", ":", "k_v", "[", "1", "]", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "sorted(list(d.items()), key=lambda k_v: k_v[1])", "decano_code": "sorted(list(d.items()), key=lambda k_v: k_v[1])", "raw_code": "sorted(list(d.items()), key=lambda k_v: k_v[1])", "str_map": {}}
{"src": ["open", "a", "file", "_STR:0_", "in", "the", "same", "directory", "as", "a", "python", "script"], "token": ["f", "=", "open", "(", "os", ".", "path", ".", "join", "(", "__location__", ",", "\" _STR:0_ \"", ")", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "f = open(os.path.join(__location__, \" _STR:0_ \"))", "decano_code": "f = open(os.path.join(__location__, \" _STR:0_ \"))", "raw_code": "f = open(os.path.join(__location__, 'bundled-resource.jpg'))", "str_map": {"bundled-resource.jpg": "_STR:0_"}}
{"src": ["open", "the", "file", "_STR:0_", "in", "_STR:1_", "mode"], "token": ["f", "=", "open", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "f = open(\" _STR:0_ \", \" _STR:1_ \")", "decano_code": "f = open(\" _STR:0_ \", \" _STR:1_ \")", "raw_code": "f = open('words.txt', 'rU')", "str_map": {"words.txt": "_STR:0_", "rU": "_STR:1_"}}
{"src": ["divide", "the", "values", "with", "same", "keys", "of", "two", "dictionary", "d1", "and", "d2"], "token": ["{", "k", ":", "(", "float", "(", "d2", "[", "k", "]", ")", "/", "d1", "[", "k", "]", ")", "for", "k", "in", "d2", "}"], "type": ["OP", "NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "{k: (float(d2[k]) / d1[k]) for k in d2}", "decano_code": "{k: (float(d2[k]) / d1[k]) for k in d2}", "raw_code": "{k: (float(d2[k]) / d1[k]) for k in d2}", "str_map": {}}
{"src": ["divide", "the", "value", "for", "each", "key", "k", "in", "dict", "d2", "by", "the", "value", "for", "the", "same", "key", "k", "in", "dict", "d1"], "token": ["{", "k", ":", "(", "d2", "[", "k", "]", "/", "d1", "[", "k", "]", ")", "for", "k", "in", "list", "(", "d1", ".", "keys", "(", ")", ")", "&", "d2", "}"], "type": ["OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP"], "cano_code": "{k: (d2[k] / d1[k]) for k in list(d1.keys()) & d2}", "decano_code": "{k: (d2[k] / d1[k]) for k in list(d1.keys()) & d2}", "raw_code": "{k: (d2[k] / d1[k]) for k in list(d1.keys()) & d2}", "str_map": {}}
{"src": ["divide", "values", "associated", "with", "each", "key", "in", "dictionary", "d1", "from", "values", "associated", "with", "the", "same", "key", "in", "dictionary", "d2"], "token": ["dict", "(", "(", "k", ",", "float", "(", "d2", "[", "k", "]", ")", "/", "d1", "[", "k", "]", ")", "for", "k", "in", "d2", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "dict((k, float(d2[k]) / d1[k]) for k in d2)", "decano_code": "dict((k, float(d2[k]) / d1[k]) for k in d2)", "raw_code": "dict((k, float(d2[k]) / d1[k]) for k in d2)", "str_map": {}}
{"src": ["write", "dataframe", "df", "to", "csv", "file", "filename", "with", "dates", "formatted", "as", "yearmonthday", "%Y%m%d"], "token": ["df", ".", "to_csv", "(", "filename", ",", "date_format", "=", "'%Y%m%d'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df.to_csv(filename, date_format='%Y%m%d')", "decano_code": "df.to_csv(filename, date_format='%Y%m%d')", "raw_code": "df.to_csv(filename, date_format='%Y%m%d')", "str_map": {}}
{"src": ["remove", "a", "key", "_STR:0_", "from", "a", "dictionary", "my_dict"], "token": ["my_dict", ".", "pop", "(", "\" _STR:0_ \"", ",", "None", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "OP"], "cano_code": "my_dict.pop(\" _STR:0_ \", None)", "decano_code": "my_dict.pop(\" _STR:0_ \", None)", "raw_code": "my_dict.pop('key', None)", "str_map": {"key": "_STR:0_"}}
{"src": ["replace", "NaN", "values", "in", "array", "a", "with", "zeros"], "token": ["b", "=", "np", ".", "where", "(", "np", ".", "isnan", "(", "a", ")", ",", "0", ",", "a", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NAME", "OP"], "cano_code": "b = np.where(np.isnan(a), 0, a)", "decano_code": "b = np.where(np.isnan(a), 0, a)", "raw_code": "b = np.where(np.isnan(a), 0, a)", "str_map": {}}
{"src": ["subprocess", "run", "command", "_STR:0_", "through", "the", "shell"], "token": ["subprocess", ".", "call", "(", "\" _STR:0_ \"", ",", "shell", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "subprocess.call(\" _STR:0_ \", shell=True)", "decano_code": "subprocess.call(\" _STR:0_ \", shell=True)", "raw_code": "subprocess.call('start command -flags arguments', shell=True)", "str_map": {"start command -flags arguments": "_STR:0_"}}
{"src": ["run", "command", "_STR:0_", "on", "command", "line", "tools", "as", "separate", "processes"], "token": ["subprocess", ".", "call", "(", "\" _STR:0_ \"", ",", "shell", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "subprocess.call(\" _STR:0_ \", shell=True)", "decano_code": "subprocess.call(\" _STR:0_ \", shell=True)", "raw_code": "subprocess.call('command -flags arguments &', shell=True)", "str_map": {"command -flags arguments &": "_STR:0_"}}
{"src": ["replace", "percent-encoded", "code", "in", "request", "f", "to", "their", "single-character", "equivalent"], "token": ["f", "=", "urllib", ".", "request", ".", "urlopen", "(", "url", ",", "urllib", ".", "parse", ".", "unquote", "(", "urllib", ".", "parse", ".", "urlencode", "(", "params", ")", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "f = urllib.request.urlopen(url, urllib.parse.unquote(urllib.parse.urlencode(params)))", "decano_code": "f = urllib.request.urlopen(url, urllib.parse.unquote(urllib.parse.urlencode(params)))", "raw_code": "f = urllib.request.urlopen(url, urllib.parse.unquote(urllib.parse.urlencode(params)))", "str_map": {}}
{"src": ["remove", "white", "spaces", "from", "the", "end", "of", "string", "_STR:0_"], "token": ["\" _STR:0_ \"", ".", "rstrip", "(", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP"], "cano_code": "\" _STR:0_ \".rstrip()", "decano_code": "\" _STR:0_ \".rstrip()", "raw_code": "\"\"\"    xyz     \"\"\".rstrip()", "str_map": {"    xyz     ": "_STR:0_"}}
{"src": ["replace", "special", "characters", "in", "utf-8", "encoded", "string", "s", "using", "the", "%xx", "escape"], "token": ["urllib", ".", "parse", ".", "quote", "(", "s", ".", "encode", "(", "'utf-8'", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "urllib.parse.quote(s.encode('utf-8'))", "decano_code": "urllib.parse.quote(s.encode('utf-8'))", "raw_code": "urllib.parse.quote(s.encode('utf-8'))", "str_map": {}}
{"src": ["URL", "encoding", "in", "python"], "token": ["urllib", ".", "parse", ".", "quote_plus", "(", "'a b'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "urllib.parse.quote_plus('a b')", "decano_code": "urllib.parse.quote_plus('a b')", "raw_code": "urllib.parse.quote_plus('a b')", "str_map": {}}
{"src": ["create", "an", "array", "containing", "the", "conversion", "of", "string", "_STR:0_", "into", "separate", "elements"], "token": ["np", ".", "array", "(", "map", "(", "int", ",", "\" _STR:0_ \"", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "STRING", "OP", "OP"], "cano_code": "np.array(map(int, \" _STR:0_ \"))", "decano_code": "np.array(map(int, \" _STR:0_ \"))", "raw_code": "np.array(map(int, '100110'))", "str_map": {"100110": "_STR:0_"}}
{"src": ["convert", "a", "string", "_STR:0_", "to", "numpy", "array", "of", "integer", "values"], "token": ["print", "(", "np", ".", "array", "(", "list", "(", "mystr", ")", ",", "dtype", "=", "int", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NAME", "OP", "KEYWORD", "OP", "OP"], "cano_code": "print(np.array(list(mystr), dtype=int))", "decano_code": "print(np.array(list(mystr), dtype=int))", "raw_code": "print(np.array(list(mystr), dtype=int))", "str_map": {"mystr": "_STR:0_"}}
{"src": ["convert", "an", "rgb", "image", "_STR:0_", "into", "grayscale", "img"], "token": ["img", "=", "cv2", ".", "imread", "(", "\" _STR:0_ \"", ",", "0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NUMBER", "OP"], "cano_code": "img = cv2.imread(\" _STR:0_ \", 0)", "decano_code": "img = cv2.imread(\" _STR:0_ \", 0)", "raw_code": "img = cv2.imread('messi5.jpg', 0)", "str_map": {"messi5.jpg": "_STR:0_"}}
{"src": ["sort", "list", "lst", "in", "descending", "order", "based", "on", "the", "second", "item", "of", "each", "tuple", "in", "it"], "token": ["lst", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "2", "]", ",", "reverse", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "lst.sort(key=lambda x: x[2], reverse=True)", "decano_code": "lst.sort(key=lambda x: x[2], reverse=True)", "raw_code": "lst.sort(key=lambda x: x[2], reverse=True)", "str_map": {}}
{"src": ["how", "to", "find", "all", "occurrences", "of", "an", "element", "in", "a", "list", "?"], "token": ["indices", "=", "[", "i", "for", "i", ",", "x", "in", "enumerate", "(", "my_list", ")", "if", "x", "==", "'whatever'", "]"], "type": ["NAME", "OP", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "STRING", "OP"], "cano_code": "indices = [i for i, x in enumerate(my_list) if x == 'whatever']", "decano_code": "indices = [i for i, x in enumerate(my_list) if x == 'whatever']", "raw_code": "indices = [i for i, x in enumerate(my_list) if x == 'whatever']", "str_map": {}}
{"src": ["execute", "shell", "command", "_STR:0_", "with", "a", "|", "pipe", "in", "it"], "token": ["subprocess", ".", "call", "(", "\" _STR:0_ \"", ",", "shell", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "subprocess.call(\" _STR:0_ \", shell=True)", "decano_code": "subprocess.call(\" _STR:0_ \", shell=True)", "raw_code": "subprocess.call('grep -r PASSED *.log | sort -u | wc -l', shell=True)", "str_map": {"grep -r PASSED *.log | sort -u | wc -l": "_STR:0_"}}
{"src": ["count", "the", "number", "of", "trailing", "question", "marks", "in", "string", "my_text"], "token": ["len", "(", "my_text", ")", "-", "len", "(", "my_text", ".", "rstrip", "(", "'?'", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "len(my_text) - len(my_text.rstrip('?'))", "decano_code": "len(my_text) - len(my_text.rstrip('?'))", "raw_code": "len(my_text) - len(my_text.rstrip('?'))", "str_map": {}}
{"src": ["remove", "dollar", "sign", "_STR:0_", "from", "second", "to", "last", "column", "data", "in", "dataframe", "_STR:1_", "and", "convert", "the", "data", "into", "floats"], "token": ["df", "[", "df", ".", "columns", "[", "1", ":", "]", "]", ".", "replace", "(", "'[\\\\$,]'", ",", "''", ",", "regex", "=", "True", ")", ".", "astype", "(", "float", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df[df.columns[1:]].replace('[\\\\$,]', '', regex=True).astype(float)", "decano_code": "df[df.columns[1:]].replace('[\\\\$,]', '', regex=True).astype(float)", "raw_code": "df[df.columns[1:]].replace('[\\\\$,]', '', regex=True).astype(float)", "str_map": {"$": "_STR:0_", "df": "_STR:1_"}}
{"src": ["merge", "column", "_STR:0_", "in", "dataframe", "df2", "with", "column", "_STR:0_", "on", "dataframe", "df1"], "token": ["df1", ".", "merge", "(", "df2", ",", "how", "=", "'left'", ",", "on", "=", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df1.merge(df2, how='left', on=\" _STR:0_ \")", "decano_code": "df1.merge(df2, how='left', on=\" _STR:0_ \")", "raw_code": "df1.merge(df2, how='left', on='word')", "str_map": {"word": "_STR:0_"}}
{"src": ["switch", "positions", "of", "each", "two", "adjacent", "characters", "in", "string", "a"], "token": ["print", "(", "''", ".", "join", "(", "''", ".", "join", "(", "i", ")", "for", "i", "in", "zip", "(", "a2", ",", "a1", ")", ")", "+", "a", "[", "-", "1", "]", "if", "len", "(", "a", ")", "%", "2", "else", "''", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "OP", "NUMBER", "KEYWORD", "STRING", "OP"], "cano_code": "print(''.join(''.join(i) for i in zip(a2, a1)) + a[-1] if len(a) % 2 else '')", "decano_code": "print(''.join(''.join(i) for i in zip(a2, a1)) + a[-1] if len(a) % 2 else '')", "raw_code": "print(''.join(''.join(i) for i in zip(a2, a1)) + a[-1] if len(a) % 2 else '')", "str_map": {}}
{"src": ["make", "a", "window", "root", "jump", "to", "the", "front"], "token": ["root", ".", "attributes", "(", "'-topmost'", ",", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "OP"], "cano_code": "root.attributes('-topmost', True)", "decano_code": "root.attributes('-topmost', True)", "raw_code": "root.attributes('-topmost', True)", "str_map": {}}
{"src": ["make", "a", "window", "root", "jump", "to", "the", "front"], "token": ["root", ".", "lift", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "root.lift()", "decano_code": "root.lift()", "raw_code": "root.lift()", "str_map": {}}
{"src": ["convert", "list", "of", "booleans", "walls", "into", "a", "hex", "string"], "token": ["hex", "(", "int", "(", "''", ".", "join", "(", "[", "str", "(", "int", "(", "b", ")", ")", "for", "b", "in", "walls", "]", ")", ",", "2", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "hex(int(''.join([str(int(b)) for b in walls]), 2))", "decano_code": "hex(int(''.join([str(int(b)) for b in walls]), 2))", "raw_code": "hex(int(''.join([str(int(b)) for b in walls]), 2))", "str_map": {}}
{"src": ["convert", "the", "sum", "of", "list", "walls", "into", "a", "hex", "presentation"], "token": ["hex", "(", "sum", "(", "b", "<<", "i", "for", "i", ",", "b", "in", "enumerate", "(", "reversed", "(", "walls", ")", ")", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "hex(sum(b << i for i, b in enumerate(reversed(walls))))", "decano_code": "hex(sum(b << i for i, b in enumerate(reversed(walls))))", "raw_code": "hex(sum(b << i for i, b in enumerate(reversed(walls))))", "str_map": {}}
{"src": ["print", "the", "string", "Total score for", ",", "the", "value", "of", "the", "variable", "name", ",", "the", "string", "is", "and", "the", "value", "of", "the", "variable", "score", "in", "one", "print", "call", "."], "token": ["print", "(", "(", "'Total score for'", ",", "name", ",", "'is'", ",", "score", ")", ")"], "type": ["KEYWORD", "OP", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP"], "cano_code": "print(('Total score for', name, 'is', score))", "decano_code": "print(('Total score for', name, 'is', score))", "raw_code": "print(('Total score for', name, 'is', score))", "str_map": {}}
{"src": ["print", "multiple", "arguments", "_STR:0_", "and", "_STR:1_", "."], "token": ["print", "(", "'Total score for {} is {}'", ".", "format", "(", "name", ",", "score", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "print('Total score for {} is {}'.format(name, score))", "decano_code": "print('Total score for {} is {}'.format(name, score))", "raw_code": "print('Total score for {} is {}'.format(name, score))", "str_map": {"name": "_STR:0_", "score": "_STR:1_"}}
{"src": ["print", "a", "string", "using", "multiple", "strings", "name", "and", "score"], "token": ["print", "(", "'Total score for %s is %s  '", "%", "(", "name", ",", "score", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "print('Total score for %s is %s  ' % (name, score))", "decano_code": "print('Total score for %s is %s  ' % (name, score))", "raw_code": "print('Total score for %s is %s  ' % (name, score))", "str_map": {}}
{"src": ["print", "string", "including", "multiple", "variables", "name", "and", "score"], "token": ["print", "(", "(", "'Total score for'", ",", "name", ",", "'is'", ",", "score", ")", ")"], "type": ["KEYWORD", "OP", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP"], "cano_code": "print(('Total score for', name, 'is', score))", "decano_code": "print(('Total score for', name, 'is', score))", "raw_code": "print(('Total score for', name, 'is', score))", "str_map": {}}
{"src": ["serve", "a", "static", "html", "page", "_STR:0_", "at", "the", "root", "of", "a", "django", "project"], "token": ["url", "(", "'^$'", ",", "TemplateView", ".", "as_view", "(", "template_name", "=", "\" _STR:0_ \"", ")", ")"], "type": ["NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "url('^$', TemplateView.as_view(template_name=\" _STR:0_ \"))", "decano_code": "url('^$', TemplateView.as_view(template_name=\" _STR:0_ \"))", "raw_code": "url('^$', TemplateView.as_view(template_name='your_template.html'))", "str_map": {"your_template.html": "_STR:0_"}}
{"src": ["use", "a", "list", "of", "values", "[3,6", "]", "to", "select", "rows", "from", "a", "pandas", "dataframe", "df", "_STR:0_", "a", "'"], "token": ["df", "[", "df", "[", "'A'", "]", ".", "isin", "(", "[", "3", ",", "6", "]", ")", "]"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "df[df['A'].isin([3, 6])]", "decano_code": "df[df['A'].isin([3, 6])]", "raw_code": "df[df['A'].isin([3, 6])]", "str_map": {"s column ": "_STR:0_"}}
{"src": ["how", "to", "get", "the", "concrete", "class", "name", "as", "a", "string", "?"], "token": ["instance", ".", "__class__", ".", "__name__"], "type": ["NAME", "OP", "NAME", "OP", "NAME"], "cano_code": "instance.__class__.__name__", "decano_code": "instance.__class__.__name__", "raw_code": "instance.__class__.__name__", "str_map": {}}
{"src": ["execute", "python", "code", "myscript.py", "[", "myscript", ".", "py", "]", "in", "a", "virtualenv", "/path/to/my/venv", "from", "matlab"], "token": ["system", "(", "'/path/to/my/venv/bin/python myscript.py'", ")"], "type": ["NAME", "OP", "STRING", "OP"], "cano_code": "system('/path/to/my/venv/bin/python myscript.py')", "decano_code": "system('/path/to/my/venv/bin/python myscript.py')", "raw_code": "system('/path/to/my/venv/bin/python myscript.py')", "str_map": {}}
{"src": ["django", "return", "a", "QuerySet", "list", "containing", "the", "values", "of", "field", "_STR:0_", "in", "model", "employees"], "token": ["Employees", ".", "objects", ".", "values_list", "(", "\" _STR:0_ \"", ",", "flat", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "Employees.objects.values_list(\" _STR:0_ \", flat=True)", "decano_code": "Employees.objects.values_list(\" _STR:0_ \", flat=True)", "raw_code": "Employees.objects.values_list('eng_name', flat=True)", "str_map": {"eng_name": "_STR:0_"}}
{"src": ["find", "all", "digits", "in", "string", "_STR:0_", "and", "put", "them", "to", "a", "list"], "token": ["re", ".", "findall", "(", "'\\\\d|\\\\d,\\\\d\\\\)'", ",", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.findall('\\\\d|\\\\d,\\\\d\\\\)', \" _STR:0_ \")", "decano_code": "re.findall('\\\\d|\\\\d,\\\\d\\\\)', \" _STR:0_ \")", "raw_code": "re.findall('\\\\d|\\\\d,\\\\d\\\\)', '6,7)')", "str_map": {"6,7)": "_STR:0_"}}
{"src": ["prompt", "string", "_STR:0_", "to", "the", "console"], "token": ["input", "(", "\" _STR:0_ \"", ")"], "type": ["KEYWORD", "OP", "STRING", "OP"], "cano_code": "input(\" _STR:0_ \")", "decano_code": "input(\" _STR:0_ \")", "raw_code": "input('Press Enter to continue...')", "str_map": {"Press Enter to continue...": "_STR:0_"}}
{"src": ["print", "string", "_STR:0_", "as", "hex", "literal"], "token": ["\"\"\"\u0001ABC\"\"\"", ".", "encode", "(", "'hex'", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "\"\"\"\u0001ABC\"\"\".encode('hex')", "decano_code": "\"\"\"\u0001ABC\"\"\".encode('hex')", "raw_code": "\"\"\"\u0001ABC\"\"\".encode('hex')", "str_map": {"ABC": "_STR:0_"}}
{"src": ["insert", "a", "new", "field", "_STR:0_", "on", "an", "existing", "document", "_STR:1_", "using", "pymongo"], "token": ["db", ".", "Doc", ".", "update", "(", "{", "'_id'", ":", "b", "[", "'_id'", "]", "}", ",", "{", "'$set'", ":", "{", "\" _STR:0_ \"", ":", "myGeolocCountry", "}", "}", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "OP", "STRING", "OP", "OP", "STRING", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "db.Doc.update({'_id': b['_id']}, {'$set': {\" _STR:0_ \": myGeolocCountry}})", "decano_code": "db.Doc.update({'_id': b['_id']}, {'$set': {\" _STR:0_ \": myGeolocCountry}})", "raw_code": "db.Doc.update({'_id': b['_id']}, {'$set': {'geolocCountry': myGeolocCountry}})", "str_map": {"geolocCountry": "_STR:0_", "b": "_STR:1_"}}
{"src": ["write", "a", "regex", "statement", "to", "match", "_STR:0_", "to", "_STR:1_", "."], "token": ["re", ".", "sub", "(", "'l+'", ",", "'l'", ",", "'lollll'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.sub('l+', 'l', 'lollll')", "decano_code": "re.sub('l+', 'l', 'lollll')", "raw_code": "re.sub('l+', 'l', 'lollll')", "str_map": {"lol": "_STR:0_", "lolllll": "_STR:1_"}}
{"src": ["BeautifulSoup", "find", "all", "_STR:0_", "elements", "in", "HTML", "string", "soup", "at", "the", "five", "stride", "starting", "from", "the", "fourth", "element"], "token": ["rows", "=", "soup", ".", "findAll", "(", "\" _STR:0_ \"", ")", "[", "4", ":", ":", "5", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP"], "cano_code": "rows = soup.findAll(\" _STR:0_ \")[4::5]", "decano_code": "rows = soup.findAll(\" _STR:0_ \")[4::5]", "raw_code": "rows = soup.findAll('tr')[4::5]", "str_map": {"tr": "_STR:0_"}}
{"src": ["reverse", "all", "x-axis", "points", "in", "pyplot"], "token": ["plt", ".", "gca", "(", ")", ".", "invert_xaxis", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "plt.gca().invert_xaxis()", "decano_code": "plt.gca().invert_xaxis()", "raw_code": "plt.gca().invert_xaxis()", "str_map": {}}
{"src": ["reverse", "y-axis", "in", "pyplot"], "token": ["plt", ".", "gca", "(", ")", ".", "invert_yaxis", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "plt.gca().invert_yaxis()", "decano_code": "plt.gca().invert_yaxis()", "raw_code": "plt.gca().invert_yaxis()", "str_map": {}}
{"src": ["stack", "two", "dataframes", "next", "to", "each", "other", "in", "pandas"], "token": ["pd", ".", "concat", "(", "[", "GOOG", ",", "AAPL", "]", ",", "keys", "=", "[", "'GOOG'", ",", "'AAPL'", "]", ",", "axis", "=", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "pd.concat([GOOG, AAPL], keys=['GOOG', 'AAPL'], axis=1)", "decano_code": "pd.concat([GOOG, AAPL], keys=['GOOG', 'AAPL'], axis=1)", "raw_code": "pd.concat([GOOG, AAPL], keys=['GOOG', 'AAPL'], axis=1)", "str_map": {}}
{"src": ["create", "a", "json", "response", "response_data"], "token": ["return", "HttpResponse", "(", "json", ".", "dumps", "(", "response_data", ")", ",", "content_type", "=", "'application/json'", ")"], "type": ["KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "return HttpResponse(json.dumps(response_data), content_type='application/json')", "decano_code": "return HttpResponse(json.dumps(response_data), content_type='application/json')", "raw_code": "return HttpResponse(json.dumps(response_data), content_type='application/json')", "str_map": {}}
{"src": ["decode", "escape", "sequences", "in", "string", "myString"], "token": ["myString", ".", "decode", "(", "'string_escape'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "myString.decode('string_escape')", "decano_code": "myString.decode('string_escape')", "raw_code": "myString.decode('string_escape')", "str_map": {}}
{"src": ["calculate", "the", "md5", "checksum", "of", "a", "file", "named", "_STR:0_"], "token": ["hashlib", ".", "md5", "(", "open", "(", "\" _STR:0_ \"", ",", "'rb'", ")", ".", "read", "(", ")", ")", ".", "hexdigest", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "hashlib.md5(open(\" _STR:0_ \", 'rb').read()).hexdigest()", "decano_code": "hashlib.md5(open(\" _STR:0_ \", 'rb').read()).hexdigest()", "raw_code": "hashlib.md5(open('filename.exe', 'rb').read()).hexdigest()", "str_map": {"filename.exe": "_STR:0_"}}
{"src": ["find", "all", "keys", "from", "a", "dictionary", "d", "whose", "values", "are", "desired_value"], "token": ["[", "k", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", "if", "v", "==", "desired_value", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP"], "cano_code": "[k for k, v in d.items() if v == desired_value]", "decano_code": "[k for k, v in d.items() if v == desired_value]", "raw_code": "[k for k, v in d.items() if v == desired_value]", "str_map": {}}
{"src": ["create", "a", "set", "containing", "all", "keys", "'", "names", "from", "dictionary", "LoD"], "token": ["{", "k", "for", "d", "in", "LoD", "for", "k", "in", "list", "(", "d", ".", "keys", "(", ")", ")", "}"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "{k for d in LoD for k in list(d.keys())}", "decano_code": "{k for d in LoD for k in list(d.keys())}", "raw_code": "{k for d in LoD for k in list(d.keys())}", "str_map": {}}
{"src": ["create", "a", "set", "containing", "all", "keys", "names", "from", "list", "of", "dictionaries", "LoD"], "token": ["set", "(", "[", "i", "for", "s", "in", "[", "list", "(", "d", ".", "keys", "(", ")", ")", "for", "d", "in", "LoD", "]", "for", "i", "in", "s", "]", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "set([i for s in [list(d.keys()) for d in LoD] for i in s])", "decano_code": "set([i for s in [list(d.keys()) for d in LoD] for i in s])", "raw_code": "set([i for s in [list(d.keys()) for d in LoD] for i in s])", "str_map": {}}
{"src": ["extract", "all", "keys", "from", "a", "list", "of", "dictionaries", "LoD"], "token": ["[", "i", "for", "s", "in", "[", "list", "(", "d", ".", "keys", "(", ")", ")", "for", "d", "in", "LoD", "]", "for", "i", "in", "s", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[i for s in [list(d.keys()) for d in LoD] for i in s]", "decano_code": "[i for s in [list(d.keys()) for d in LoD] for i in s]", "raw_code": "[i for s in [list(d.keys()) for d in LoD] for i in s]", "str_map": {}}
{"src": ["unpack", "keys", "and", "values", "of", "a", "dictionary", "d", "into", "two", "lists"], "token": ["keys", ",", "values", "=", "zip", "(", "*", "list", "(", "d", ".", "items", "(", ")", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "keys, values = zip(*list(d.items()))", "decano_code": "keys, values = zip(*list(d.items()))", "raw_code": "keys, values = zip(*list(d.items()))", "str_map": {}}
{"src": ["convert", "a", "string", "s", "containing", "a", "decimal", "to", "an", "integer"], "token": ["int", "(", "Decimal", "(", "s", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "int(Decimal(s))", "decano_code": "int(Decimal(s))", "raw_code": "int(Decimal(s))", "str_map": {}}
{"src": ["convert", "a", "string", "to", "integer", "with", "decimal", "in", "python"], "token": ["int", "(", "s", ".", "split", "(", "'.'", ")", "[", "0", "]", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "int(s.split('.')[0])", "decano_code": "int(s.split('.')[0])", "raw_code": "int(s.split('.')[0])", "str_map": {}}
{"src": ["check", "if", "array", "b", "contains", "all", "elements", "of", "array", "a"], "token": ["numpy", ".", "in1d", "(", "b", ",", "a", ")", ".", "all", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "OP"], "cano_code": "numpy.in1d(b, a).all()", "decano_code": "numpy.in1d(b, a).all()", "raw_code": "numpy.in1d(b, a).all()", "str_map": {}}
{"src": ["numpy", ":", "check", "if", "array", "_STR:0_", "contains", "all", "the", "numbers", "in", "array", "_STR:1_", "."], "token": ["numpy", ".", "array", "(", "[", "(", "x", "in", "a", ")", "for", "x", "in", "b", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "KEYWORD", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "numpy.array([(x in a) for x in b])", "decano_code": "numpy.array([(x in a) for x in b])", "raw_code": "numpy.array([(x in a) for x in b])", "str_map": {"a": "_STR:0_", "b": "_STR:1_"}}
{"src": ["draw", "node", "labels", "labels", "on", "networkx", "graph", "G ", "at", "position", "pos"], "token": ["networkx", ".", "draw_networkx_labels", "(", "G", ",", "pos", ",", "labels", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "networkx.draw_networkx_labels(G, pos, labels)", "decano_code": "networkx.draw_networkx_labels(G, pos, labels)", "raw_code": "networkx.draw_networkx_labels(G, pos, labels)", "str_map": {}}
{"src": ["make", "a", "row-by-row", "copy", "y", "of", "array", "x"], "token": ["y", "=", "[", "row", "[", ":", "]", "for", "row", "in", "x", "]"], "type": ["NAME", "OP", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "y = [row[:] for row in x]", "decano_code": "y = [row[:] for row in x]", "raw_code": "y = [row[:] for row in x]", "str_map": {}}
{"src": ["create", "2D", "numpy", "array", "from", "the", "data", "provided", "in", "_STR:0_", "with", "each", "row", "in", "the", "file", "having", "same", "number", "of", "values"], "token": ["X", "=", "numpy", ".", "loadtxt", "(", "\" _STR:0_ \"", ",", "delimiter", "=", "','", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "X = numpy.loadtxt(\" _STR:0_ \", delimiter=',')", "decano_code": "X = numpy.loadtxt(\" _STR:0_ \", delimiter=',')", "raw_code": "X = numpy.loadtxt('somefile.csv', delimiter=',')", "str_map": {"somefile.csv": "_STR:0_"}}
{"src": ["get", "a", "list", "of", "items", "from", "the", "list", "some_list", "that", "contain", "string", "_STR:0_"], "token": ["matching", "=", "[", "s", "for", "s", "in", "some_list", "if", "\" _STR:0_ \"", "in", "s", "]"], "type": ["NAME", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "STRING", "KEYWORD", "NAME", "OP"], "cano_code": "matching = [s for s in some_list if \" _STR:0_ \" in s]", "decano_code": "matching = [s for s in some_list if \" _STR:0_ \" in s]", "raw_code": "matching = [s for s in some_list if 'abc' in s]", "str_map": {"abc": "_STR:0_"}}
{"src": ["export", "a", "pandas", "data", "frame", "df", "to", "a", "file", "mydf.tsv", "[", "mydf", ".", "tsv", "]", "and", "retain", "the", "indices"], "token": ["df", ".", "to_csv", "(", "'mydf.tsv'", ",", "sep", "=", "'\\t'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df.to_csv('mydf.tsv', sep='\\t')", "decano_code": "df.to_csv('mydf.tsv', sep='\\t')", "raw_code": "df.to_csv('mydf.tsv', sep='\\t')", "str_map": {}}
{"src": ["how", "do", "i", "create", "a", "LIST", "of", "unique", "random", "numbers", "?"], "token": ["random", ".", "sample", "(", "list", "(", "range", "(", "100", ")", ")", ",", "10", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "random.sample(list(range(100)), 10)", "decano_code": "random.sample(list(range(100)), 10)", "raw_code": "random.sample(list(range(100)), 10)", "str_map": {}}
{"src": ["split", "a", "string", "s", "on", "last", "delimiter"], "token": ["s", ".", "rsplit", "(", "','", ",", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NUMBER", "OP"], "cano_code": "s.rsplit(',', 1)", "decano_code": "s.rsplit(',', 1)", "raw_code": "s.rsplit(',', 1)", "str_map": {}}
{"src": ["check", "if", "all", "elements", "in", "list", "lst", "are", "tupples", "of", "long", "and", "int"], "token": ["all", "(", "isinstance", "(", "x", ",", "int", ")", "for", "x", "in", "lst", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "all(isinstance(x, int) for x in lst)", "decano_code": "all(isinstance(x, int) for x in lst)", "raw_code": "all(isinstance(x, int) for x in lst)", "str_map": {}}
{"src": ["check", "if", "all", "elements", "in", "a", "list", "_STR:0_", "are", "the", "same", "type", "_STR:1_"], "token": ["all", "(", "isinstance", "(", "x", ",", "int", ")", "for", "x", "in", "lst", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "all(isinstance(x, int) for x in lst)", "decano_code": "all(isinstance(x, int) for x in lst)", "raw_code": "all(isinstance(x, int) for x in lst)", "str_map": {"lst": "_STR:0_", "int": "_STR:1_"}}
{"src": ["strip", "a", "string", "line", "of", "all", "carriage", "returns", "and", "newlines"], "token": ["line", ".", "strip", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "line.strip()", "decano_code": "line.strip()", "raw_code": "line.strip()", "str_map": {}}
{"src": ["scroll", "to", "the", "bottom", "of", "a", "web", "page", "using", "selenium", "webdriver"], "token": ["driver", ".", "execute_script", "(", "'window.scrollTo(0, Y)'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "driver.execute_script('window.scrollTo(0, Y)')", "decano_code": "driver.execute_script('window.scrollTo(0, Y)')", "raw_code": "driver.execute_script('window.scrollTo(0, Y)')", "str_map": {}}
{"src": ["scroll", "a", "to", "the", "bottom", "of", "a", "web", "page", "using", "selenium", "webdriver"], "token": ["driver", ".", "execute_script", "(", "'window.scrollTo(0, document.body.scrollHeight);'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "driver.execute_script('window.scrollTo(0, document.body.scrollHeight);')", "decano_code": "driver.execute_script('window.scrollTo(0, document.body.scrollHeight);')", "raw_code": "driver.execute_script('window.scrollTo(0, document.body.scrollHeight);')", "str_map": {}}
{"src": ["convert", "date", "object", "dateobject", "into", "a", "DateTime", "object"], "token": ["datetime", ".", "datetime", ".", "combine", "(", "dateobject", ",", "datetime", ".", "time", "(", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "datetime.datetime.combine(dateobject, datetime.time())", "decano_code": "datetime.datetime.combine(dateobject, datetime.time())", "raw_code": "datetime.datetime.combine(dateobject, datetime.time())", "str_map": {}}
{"src": ["check", "if", "any", "item", "from", "list", "b", "is", "in", "list", "a"], "token": ["print", "(", "any", "(", "x", "in", "a", "for", "x", "in", "b", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "print(any(x in a for x in b))", "decano_code": "print(any(x in a for x in b))", "raw_code": "print(any(x in a for x in b))", "str_map": {}}
{"src": ["save", "a", "numpy", "array", "image_array", "as", "an", "image", "_STR:0_"], "token": ["scipy", ".", "misc", ".", "imsave", "(", "\" _STR:0_ \"", ",", "image_array", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "scipy.misc.imsave(\" _STR:0_ \", image_array)", "decano_code": "scipy.misc.imsave(\" _STR:0_ \", image_array)", "raw_code": "scipy.misc.imsave('outfile.jpg', image_array)", "str_map": {"outfile.jpg": "_STR:0_"}}
{"src": ["remove", "anything", "in", "parenthesis", "from", "string", "item", "with", "a", "regex"], "token": ["item", "=", "re", ".", "sub", "(", "' ?\\\\([^)]+\\\\)'", ",", "''", ",", "item", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "item = re.sub(' ?\\\\([^)]+\\\\)', '', item)", "decano_code": "item = re.sub(' ?\\\\([^)]+\\\\)', '', item)", "raw_code": "item = re.sub(' ?\\\\([^)]+\\\\)', '', item)", "str_map": {}}
{"src": ["remove", "word", "characters", "in", "parenthesis", "from", "string", "item", "with", "a", "regex"], "token": ["item", "=", "re", ".", "sub", "(", "' ?\\\\(\\\\w+\\\\)'", ",", "''", ",", "item", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "item = re.sub(' ?\\\\(\\\\w+\\\\)', '', item)", "decano_code": "item = re.sub(' ?\\\\(\\\\w+\\\\)', '', item)", "raw_code": "item = re.sub(' ?\\\\(\\\\w+\\\\)', '', item)", "str_map": {}}
{"src": ["remove", "all", "data", "inside", "parenthesis", "in", "string", "item"], "token": ["item", "=", "re", ".", "sub", "(", "' \\\\(\\\\w+\\\\)'", ",", "''", ",", "item", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "item = re.sub(' \\\\(\\\\w+\\\\)', '', item)", "decano_code": "item = re.sub(' \\\\(\\\\w+\\\\)', '', item)", "raw_code": "item = re.sub(' \\\\(\\\\w+\\\\)', '', item)", "str_map": {}}
{"src": ["check", "if", "any", "elements", "in", "one", "list", "list1", "are", "in", "another", "list", "list2"], "token": ["len", "(", "set", "(", "list1", ")", ".", "intersection", "(", "list2", ")", ")", ">", "0"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NUMBER"], "cano_code": "len(set(list1).intersection(list2)) > 0", "decano_code": "len(set(list1).intersection(list2)) > 0", "raw_code": "len(set(list1).intersection(list2)) > 0", "str_map": {}}
{"src": ["convert", "hex", "string", "s", "to", "decimal"], "token": ["i", "=", "int", "(", "s", ",", "16", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "i = int(s, 16)", "decano_code": "i = int(s, 16)", "raw_code": "i = int(s, 16)", "str_map": {}}
{"src": ["convert", "hex", "string", "_STR:0_", "to", "decimal"], "token": ["int", "(", "\" _STR:0_ \"", ",", "16", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NUMBER", "OP"], "cano_code": "int(\" _STR:0_ \", 16)", "decano_code": "int(\" _STR:0_ \", 16)", "raw_code": "int('0xff', 16)", "str_map": {"0xff": "_STR:0_"}}
{"src": ["convert", "hex", "string", "_STR:0_", "to", "decimal"], "token": ["int", "(", "\" _STR:0_ \"", ",", "16", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NUMBER", "OP"], "cano_code": "int(\" _STR:0_ \", 16)", "decano_code": "int(\" _STR:0_ \", 16)", "raw_code": "int('FFFF', 16)", "str_map": {"FFFF": "_STR:0_"}}
{"src": ["convert", "hex", "string", "_STR:0_", "to", "decimal"], "token": ["ast", ".", "literal_eval", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "ast.literal_eval(\" _STR:0_ \")", "decano_code": "ast.literal_eval(\" _STR:0_ \")", "raw_code": "ast.literal_eval('0xdeadbeef')", "str_map": {"0xdeadbeef": "_STR:0_"}}
{"src": ["convert", "hex", "string", "_STR:0_", "to", "decimal"], "token": ["int", "(", "\" _STR:0_ \"", ",", "16", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NUMBER", "OP"], "cano_code": "int(\" _STR:0_ \", 16)", "decano_code": "int(\" _STR:0_ \", 16)", "raw_code": "int('deadbeef', 16)", "str_map": {"deadbeef": "_STR:0_"}}
{"src": ["take", "screenshot", "_STR:0_", "on", "mac", "os", "x"], "token": ["os", ".", "system", "(", "'screencapture screen.png'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "os.system('screencapture screen.png')", "decano_code": "os.system('screencapture screen.png')", "raw_code": "os.system('screencapture screen.png')", "str_map": {"screen.png": "_STR:0_"}}
{"src": ["set", "a", "window", "size", "to", "1400, 1000", "using", "selenium", "webdriver"], "token": ["driver", ".", "set_window_size", "(", "1400", ",", "1000", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "driver.set_window_size(1400, 1000)", "decano_code": "driver.set_window_size(1400, 1000)", "raw_code": "driver.set_window_size(1400, 1000)", "str_map": {}}
{"src": ["replace", "non-ascii", "chars", "from", "a", "unicode", "string", "u'm\\xfasica", "'"], "token": ["unicodedata", ".", "normalize", "(", "'NFKD'", ",", "'m\\xfasica'", ")", ".", "encode", "(", "'ascii'", ",", "'ignore'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "unicodedata.normalize('NFKD', 'm\\xfasica').encode('ascii', 'ignore')", "decano_code": "unicodedata.normalize('NFKD', 'm\\xfasica').encode('ascii', 'ignore')", "raw_code": "unicodedata.normalize('NFKD', 'm\\xfasica').encode('ascii', 'ignore')", "str_map": {}}
{"src": ["concatenate", "dataframe", "df1", "with", "df2", "whilst", "removing", "duplicates"], "token": ["pandas", ".", "concat", "(", "[", "df1", ",", "df2", "]", ")", ".", "drop_duplicates", "(", ")", ".", "reset_index", "(", "drop", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "pandas.concat([df1, df2]).drop_duplicates().reset_index(drop=True)", "decano_code": "pandas.concat([df1, df2]).drop_duplicates().reset_index(drop=True)", "raw_code": "pandas.concat([df1, df2]).drop_duplicates().reset_index(drop=True)", "str_map": {}}
{"src": ["construct", "an", "array", "with", "data", "type", "float32", "a", "from", "data", "in", "binary", "file", "_STR:0_"], "token": ["a", "=", "numpy", ".", "fromfile", "(", "\" _STR:0_ \"", ",", "dtype", "=", "numpy", ".", "float32", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "a = numpy.fromfile(\" _STR:0_ \", dtype=numpy.float32)", "decano_code": "a = numpy.fromfile(\" _STR:0_ \", dtype=numpy.float32)", "raw_code": "a = numpy.fromfile('filename', dtype=numpy.float32)", "str_map": {"filename": "_STR:0_"}}
{"src": ["execute", "a", "mv", "command", "mv /home/somedir/subdir/* somedir", "/", "in", "subprocess"], "token": ["subprocess", ".", "call", "(", "'mv /home/somedir/subdir/* somedir/'", ",", "shell", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "subprocess.call('mv /home/somedir/subdir/* somedir/', shell=True)", "decano_code": "subprocess.call('mv /home/somedir/subdir/* somedir/', shell=True)", "raw_code": "subprocess.call('mv /home/somedir/subdir/* somedir/', shell=True)", "str_map": {}}
{"src": ["how", "to", "use", "the", "mv", "command", "in", "python", "with", "subprocess"], "token": ["subprocess", ".", "call", "(", "'mv /home/somedir/subdir/* somedir/'", ",", "shell", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "subprocess.call('mv /home/somedir/subdir/* somedir/', shell=True)", "decano_code": "subprocess.call('mv /home/somedir/subdir/* somedir/', shell=True)", "raw_code": "subprocess.call('mv /home/somedir/subdir/* somedir/', shell=True)", "str_map": {}}
{"src": ["print", "a", "character", "that", "has", "unicode", "value", "\\u25b2"], "token": ["print", "(", "'\\u25b2'", ".", "encode", "(", "'utf-8'", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "print('\\u25b2'.encode('utf-8'))", "decano_code": "print('\\u25b2'.encode('utf-8'))", "raw_code": "print('\\u25b2'.encode('utf-8'))", "str_map": {}}
{"src": ["compare", "contents", "at", "filehandles", "file1", "and", "file2", "using", "difflib"], "token": ["difflib", ".", "SequenceMatcher", "(", "None", ",", "file1", ".", "read", "(", ")", ",", "file2", ".", "read", "(", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "difflib.SequenceMatcher(None, file1.read(), file2.read())", "decano_code": "difflib.SequenceMatcher(None, file1.read(), file2.read())", "raw_code": "difflib.SequenceMatcher(None, file1.read(), file2.read())", "str_map": {}}
{"src": ["create", "a", "dictionary", "from", "string", "e", "separated", "by", "-", "and", ","], "token": ["dict", "(", "(", "k", ",", "int", "(", "v", ")", ")", "for", "k", ",", "v", "in", "(", "e", ".", "split", "(", "' - '", ")", "for", "e", "in", "s", ".", "split", "(", "','", ")", ")", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "dict((k, int(v)) for k, v in (e.split(' - ') for e in s.split(',')))", "decano_code": "dict((k, int(v)) for k, v in (e.split(' - ') for e in s.split(',')))", "raw_code": "dict((k, int(v)) for k, v in (e.split(' - ') for e in s.split(',')))", "str_map": {}}
{"src": ["check", "if", "all", "elements", "in", "a", "tuple", "(1, 6", ")", "are", "in", "another", "(1, 2, 3, 4, 5", ")"], "token": ["all", "(", "i", "in", "(", "1", ",", "2", ",", "3", ",", "4", ",", "5", ")", "for", "i", "in", "(", "1", ",", "6", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "all(i in (1, 2, 3, 4, 5) for i in (1, 6))", "decano_code": "all(i in (1, 2, 3, 4, 5) for i in (1, 6))", "raw_code": "all(i in (1, 2, 3, 4, 5) for i in (1, 6))", "str_map": {}}
{"src": ["extract", "unique", "dates", "from", "time", "series", "_STR:0_", "in", "dataframe", "df"], "token": ["df", "[", "\" _STR:0_ \"", "]", ".", "map", "(", "lambda", "t", ":", "t", ".", "date", "(", ")", ")", ".", "unique", "(", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "KEYWORD", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "df[\" _STR:0_ \"].map(lambda t: t.date()).unique()", "decano_code": "df[\" _STR:0_ \"].map(lambda t: t.date()).unique()", "raw_code": "df['Date'].map(lambda t: t.date()).unique()", "str_map": {"Date": "_STR:0_"}}
{"src": ["right", "align", "string", "mystring", "with", "a", "width", "of", "7"], "token": ["\"\"\"{:>7s}\"\"\"", ".", "format", "(", "mystring", ")"], "type": ["STRING", "OP", "KEYWORD", "OP", "NAME", "OP"], "cano_code": "\"\"\"{:>7s}\"\"\".format(mystring)", "decano_code": "\"\"\"{:>7s}\"\"\".format(mystring)", "raw_code": "\"\"\"{:>7s}\"\"\".format(mystring)", "str_map": {}}
{"src": ["read", "an", "excel", "file", "_STR:0_"], "token": ["open", "(", "\" _STR:0_ \"", ",", "'rb'", ")", ".", "read", "(", "200", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "open(\" _STR:0_ \", 'rb').read(200)", "decano_code": "open(\" _STR:0_ \", 'rb').read(200)", "raw_code": "open('ComponentReport-DJI.xls', 'rb').read(200)", "str_map": {"ComponentReport-DJI.xls": "_STR:0_"}}
{"src": ["sort", "dataframe", "df", "based", "on", "column", "_STR:0_", "in", "ascending", "and", "column", "_STR:1_", "in", "descending"], "token": ["df", ".", "sort_values", "(", "[", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", "]", ",", "ascending", "=", "[", "True", ",", "False", "]", ",", "inplace", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df.sort_values([\" _STR:0_ \", \" _STR:1_ \"], ascending=[True, False], inplace=True)", "decano_code": "df.sort_values([\" _STR:0_ \", \" _STR:1_ \"], ascending=[True, False], inplace=True)", "raw_code": "df.sort_values(['b', 'c'], ascending=[True, False], inplace=True)", "str_map": {"b": "_STR:0_", "c": "_STR:1_"}}
{"src": ["sort", "dataframe", "df", "based", "on", "column", "_STR:0_", "in", "ascending", "and", "column", "_STR:1_", "in", "descending"], "token": ["df", ".", "sort_values", "(", "[", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", "]", ",", "ascending", "=", "[", "True", ",", "False", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "OP"], "cano_code": "df.sort_values([\" _STR:0_ \", \" _STR:1_ \"], ascending=[True, False])", "decano_code": "df.sort_values([\" _STR:0_ \", \" _STR:1_ \"], ascending=[True, False])", "raw_code": "df.sort_values(['a', 'b'], ascending=[True, False])", "str_map": {"a": "_STR:0_", "b": "_STR:1_"}}
{"src": ["sort", "a", "pandas", "data", "frame", "with", "column", "a", "in", "ascending", "and", "b", "in", "descending", "order"], "token": ["df1", ".", "sort", "(", "[", "'a'", ",", "'b'", "]", ",", "ascending", "=", "[", "True", ",", "False", "]", ",", "inplace", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df1.sort(['a', 'b'], ascending=[True, False], inplace=True)", "decano_code": "df1.sort(['a', 'b'], ascending=[True, False], inplace=True)", "raw_code": "df1.sort(['a', 'b'], ascending=[True, False], inplace=True)", "str_map": {}}
{"src": ["sort", "a", "pandas", "data", "frame", "by", "column", "a", "in", "ascending", ",", "and", "by", "column", "b", "in", "descending", "order"], "token": ["df", ".", "sort", "(", "[", "'a'", ",", "'b'", "]", ",", "ascending", "=", "[", "True", ",", "False", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "OP"], "cano_code": "df.sort(['a', 'b'], ascending=[True, False])", "decano_code": "df.sort(['a', 'b'], ascending=[True, False])", "raw_code": "df.sort(['a', 'b'], ascending=[True, False])", "str_map": {}}
{"src": ["django", "redirect", "to", "view", "_STR:0_"], "token": ["redirect", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "STRING", "OP"], "cano_code": "redirect(\" _STR:0_ \")", "decano_code": "redirect(\" _STR:0_ \")", "raw_code": "redirect('Home.views.index')", "str_map": {"Home.views.index": "_STR:0_"}}
{"src": ["remove", "all", "values", "within", "one", "list", "[2, 3, 7", "]", "from", "another", "list", "a"], "token": ["[", "x", "for", "x", "in", "a", "if", "x", "not", "in", "[", "2", ",", "3", ",", "7", "]", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "[x for x in a if x not in [2, 3, 7]]", "decano_code": "[x for x in a if x not in [2, 3, 7]]", "raw_code": "[x for x in a if x not in [2, 3, 7]]", "str_map": {}}
{"src": ["remove", "the", "punctuation", "_STR:0_", ",", "_STR:1_", ",", "_STR:2_", "from", "a", "string", "asking"], "token": ["out", "=", "''", ".", "join", "(", "c", "for", "c", "in", "asking", "if", "c", "not", "in", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ",", "\" _STR:2_ \"", ")", ")"], "type": ["NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "out = ''.join(c for c in asking if c not in (\" _STR:0_ \", \" _STR:1_ \", \" _STR:2_ \"))", "decano_code": "out = ''.join(c for c in asking if c not in (\" _STR:0_ \", \" _STR:1_ \", \" _STR:2_ \"))", "raw_code": "out = ''.join(c for c in asking if c not in ('!', '.', ':'))", "str_map": {"!": "_STR:0_", ".": "_STR:1_", ":": "_STR:2_"}}
{"src": ["BeautifulSoup", "get", "value", "associated", "with", "attribute", "_STR:0_", "where", "attribute", "_STR:1_", "is", "equal", "to", "_STR:2_", "in", "tag", "_STR:3_", "in", "HTML", "parsed", "string", "soup"], "token": ["soup", ".", "find", "(", "\" _STR:3_ \"", ",", "{", "\" _STR:1_ \"", ":", "\" _STR:2_ \"", "}", ")", "[", "\" _STR:0_ \"", "]"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "STRING", "OP"], "cano_code": "soup.find(\" _STR:3_ \", {\" _STR:1_ \": \" _STR:2_ \"})[\" _STR:0_ \"]", "decano_code": "soup.find(\" _STR:3_ \", {\" _STR:1_ \": \" _STR:2_ \"})[\" _STR:0_ \"]", "raw_code": "soup.find('meta', {'name': 'City'})['content']", "str_map": {"content": "_STR:0_", "name": "_STR:1_", "City": "_STR:2_", "meta": "_STR:3_"}}
{"src": ["unquote", "a", "urlencoded", "unicode", "string", "_STR:0_"], "token": ["urllib", ".", "parse", ".", "unquote", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "urllib.parse.unquote(\" _STR:0_ \")", "decano_code": "urllib.parse.unquote(\" _STR:0_ \")", "raw_code": "urllib.parse.unquote('%0a')", "str_map": {"%0a": "_STR:0_"}}
{"src": ["decode", "url", "url", "from", "UTF-16", "code", "to", "UTF-8", "code"], "token": ["urllib", ".", "parse", ".", "unquote", "(", "url", ")", ".", "decode", "(", "'utf8'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "urllib.parse.unquote(url).decode('utf8')", "decano_code": "urllib.parse.unquote(url).decode('utf8')", "raw_code": "urllib.parse.unquote(url).decode('utf8')", "str_map": {}}
{"src": ["empty", "a", "list", "lst"], "token": ["del", "lst", "[", ":", "]"], "type": ["KEYWORD", "NAME", "OP", "OP", "OP"], "cano_code": "del lst[:]", "decano_code": "del lst[:]", "raw_code": "del lst[:]", "str_map": {}}
{"src": ["empty", "a", "list", "lst"], "token": ["del", "lst1", "[", ":", "]"], "type": ["KEYWORD", "NAME", "OP", "OP", "OP"], "cano_code": "del lst1[:]", "decano_code": "del lst1[:]", "raw_code": "del lst1[:]", "str_map": {}}
{"src": ["empty", "a", "list", "lst"], "token": ["lst", "[", ":", "]", "=", "[", "]"], "type": ["NAME", "OP", "OP", "OP", "OP", "OP", "OP"], "cano_code": "lst[:] = []", "decano_code": "lst[:] = []", "raw_code": "lst[:] = []", "str_map": {}}
{"src": ["empty", "a", "list", "alist"], "token": ["alist", "[", ":", "]", "=", "[", "]"], "type": ["NAME", "OP", "OP", "OP", "OP", "OP", "OP"], "cano_code": "alist[:] = []", "decano_code": "alist[:] = []", "raw_code": "alist[:] = []", "str_map": {}}
{"src": ["reset", "index", "of", "series", "s"], "token": ["s", ".", "reset_index", "(", "0", ")", ".", "reset_index", "(", "drop", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "s.reset_index(0).reset_index(drop=True)", "decano_code": "s.reset_index(0).reset_index(drop=True)", "raw_code": "s.reset_index(0).reset_index(drop=True)", "str_map": {}}
{"src": ["convert", "unicode", "text", "from", "list", "elems", "with", "index", "0", "to", "normal", "text", "_STR:0_"], "token": ["elems", "[", "0", "]", ".", "getText", "(", ")", ".", "encode", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "elems[0].getText().encode(\" _STR:0_ \")", "decano_code": "elems[0].getText().encode(\" _STR:0_ \")", "raw_code": "elems[0].getText().encode('utf-8')", "str_map": {"utf-8": "_STR:0_"}}
{"src": ["create", "a", "list", "containing", "the", "subtraction", "of", "each", "item", "in", "list", "l", "from", "the", "item", "prior", "to", "it"], "token": ["[", "(", "y", "-", "x", ")", "for", "x", ",", "y", "in", "zip", "(", "L", ",", "L", "[", "1", ":", "]", ")", "]"], "type": ["OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "OP"], "cano_code": "[(y - x) for x, y in zip(L, L[1:])]", "decano_code": "[(y - x) for x, y in zip(L, L[1:])]", "raw_code": "[(y - x) for x, y in zip(L, L[1:])]", "str_map": {}}
{"src": ["get", "value", "in", "string", "line", "matched", "by", "regex", "pattern", "_STR:0_"], "token": ["print", "(", "re", ".", "search", "(", "\" _STR:0_ \"", ",", "line", ")", ".", "group", "(", "1", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "print(re.search(\" _STR:0_ \", line).group(1))", "decano_code": "print(re.search(\" _STR:0_ \", line).group(1))", "raw_code": "print(re.search('\\\\bLOG_ADDR\\\\s+(\\\\S+)', line).group(1))", "str_map": {"\\bLOG_ADDR\\s+(\\S+)": "_STR:0_"}}
{"src": ["import", "all", "classes", "from", "module", "some.package", "[", "some", ".", "package", "]"], "token": ["globals", "(", ")", ".", "update", "(", "importlib", ".", "import_module", "(", "'some.package'", ")", ".", "__dict__", ")"], "type": ["KEYWORD", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP"], "cano_code": "globals().update(importlib.import_module('some.package').__dict__)", "decano_code": "globals().update(importlib.import_module('some.package').__dict__)", "raw_code": "globals().update(importlib.import_module('some.package').__dict__)", "str_map": {}}
{"src": ["convert", "a", "list", "of", "characters", "['a', 'b', 'c', 'd'", "]", "into", "a", "string"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "[", "'a'", ",", "'b'", ",", "'c'", ",", "'d'", "]", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "\"\"\"\"\"\".join(['a', 'b', 'c', 'd'])", "decano_code": "\"\"\"\"\"\".join(['a', 'b', 'c', 'd'])", "raw_code": "\"\"\"\"\"\".join(['a', 'b', 'c', 'd'])", "str_map": {}}
{"src": ["slice", "url", "with", "_STR:0_", "as", "delimiter", "to", "get", "_STR:1_", "from", "url", "_STR:2_"], "token": ["url", ".", "split", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "url.split(\" _STR:0_ \")", "decano_code": "url.split(\" _STR:0_ \")", "raw_code": "url.split('&')", "str_map": {"&": "_STR:0_", "http://www.domainname.com/page?CONTENT_ITEM_ID=1234": "_STR:1_", "http://www.domainname.com/page?CONTENT_ITEM_ID=1234&param2&param3\r\n": "_STR:2_"}}
{"src": ["sort", "dictionary", "d", "by", "key"], "token": ["od", "=", "collections", ".", "OrderedDict", "(", "sorted", "(", "d", ".", "items", "(", ")", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "od = collections.OrderedDict(sorted(d.items()))", "decano_code": "od = collections.OrderedDict(sorted(d.items()))", "raw_code": "od = collections.OrderedDict(sorted(d.items()))", "str_map": {}}
{"src": ["sort", "a", "dictionary", "d", "by", "key"], "token": ["OrderedDict", "(", "sorted", "(", "list", "(", "d", ".", "items", "(", ")", ")", ",", "key", "=", "(", "lambda", "t", ":", "t", "[", "0", "]", ")", ")", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "OP"], "cano_code": "OrderedDict(sorted(list(d.items()), key=(lambda t: t[0])))", "decano_code": "OrderedDict(sorted(list(d.items()), key=(lambda t: t[0])))", "raw_code": "OrderedDict(sorted(list(d.items()), key=(lambda t: t[0])))", "str_map": {}}
{"src": ["execute", "a", "put", "request", "to", "the", "url", "url"], "token": ["response", "=", "requests", ".", "put", "(", "url", ",", "data", "=", "json", ".", "dumps", "(", "data", ")", ",", "headers", "=", "headers", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "response = requests.put(url, data=json.dumps(data), headers=headers)", "decano_code": "response = requests.put(url, data=json.dumps(data), headers=headers)", "raw_code": "response = requests.put(url, data=json.dumps(data), headers=headers)", "str_map": {}}
{"src": ["replace", "everything", "that", "is", "not", "an", "alphabet", "or", "a", "digit", "with", "_STR:0_", "in", "_STR:1_", "."], "token": ["re", ".", "sub", "(", "'[\\\\W_]+'", ",", "\" _STR:0_ \"", ",", "s", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.sub('[\\\\W_]+', \" _STR:0_ \", s)", "decano_code": "re.sub('[\\\\W_]+', \" _STR:0_ \", s)", "raw_code": "re.sub('[\\\\W_]+', '', s)", "str_map": {"": "_STR:0_", "s": "_STR:1_"}}
{"src": ["create", "a", "list", "of", "aggregation", "of", "each", "element", "from", "list", "l2", "to", "all", "elements", "of", "list", "l1"], "token": ["[", "(", "x", "+", "y", ")", "for", "x", "in", "l2", "for", "y", "in", "l1", "]"], "type": ["OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[(x + y) for x in l2 for y in l1]", "decano_code": "[(x + y) for x in l2 for y in l1]", "raw_code": "[(x + y) for x in l2 for y in l1]", "str_map": {}}
{"src": ["convert", "string", "x'  to dictionary splitted by ", "=", "`", "using", "list", "comprehension"], "token": ["dict", "(", "[", "x", ".", "split", "(", "'='", ")", "for", "x", "in", "s", ".", "split", "(", ")", "]", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "dict([x.split('=') for x in s.split()])", "decano_code": "dict([x.split('=') for x in s.split()])", "raw_code": "dict([x.split('=') for x in s.split()])", "str_map": {}}
{"src": ["remove", "index", "2", "element", "from", "a", "list", "my_list"], "token": ["my_list", ".", "pop", "(", "2", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "my_list.pop(2)", "decano_code": "my_list.pop(2)", "raw_code": "my_list.pop(2)", "str_map": {}}
{"src": ["delete", "character", "_STR:0_", "from", "a", "string", "s", "using", "python"], "token": ["s", "=", "s", ".", "replace", "(", "\" _STR:0_ \"", ",", "''", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "s = s.replace(\" _STR:0_ \", '')", "decano_code": "s = s.replace(\" _STR:0_ \", '')", "raw_code": "s = s.replace('M', '')", "str_map": {"M": "_STR:0_"}}
{"src": ["how", "to", "delete", "a", "character", "from", "a", "string", "using", "python", "?"], "token": ["newstr", "=", "oldstr", ".", "replace", "(", "'M'", ",", "''", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "newstr = oldstr.replace('M', '')", "decano_code": "newstr = oldstr.replace('M', '')", "raw_code": "newstr = oldstr.replace('M', '')", "str_map": {}}
{"src": ["get", "the", "sum", "of", "the", "products", "of", "each", "pair", "of", "corresponding", "elements", "in", "lists", "a", "and", "b"], "token": ["sum", "(", "x", "*", "y", "for", "x", ",", "y", "in", "zip", "(", "a", ",", "b", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "sum(x * y for x, y in zip(a, b))", "decano_code": "sum(x * y for x, y in zip(a, b))", "raw_code": "sum(x * y for x, y in zip(a, b))", "str_map": {}}
{"src": ["sum", "the", "products", "of", "each", "two", "elements", "at", "the", "same", "index", "of", "list", "a", "and", "list", "b"], "token": ["list", "(", "x", "*", "y", "for", "x", ",", "y", "in", "list", "(", "zip", "(", "a", ",", "b", ")", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "list(x * y for x, y in list(zip(a, b)))", "decano_code": "list(x * y for x, y in list(zip(a, b)))", "raw_code": "list(x * y for x, y in list(zip(a, b)))", "str_map": {}}
{"src": ["sum", "the", "product", "of", "each", "two", "items", "at", "the", "same", "index", "of", "list", "a", "and", "list", "b"], "token": ["sum", "(", "i", "*", "j", "for", "i", ",", "j", "in", "zip", "(", "a", ",", "b", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "sum(i * j for i, j in zip(a, b))", "decano_code": "sum(i * j for i, j in zip(a, b))", "raw_code": "sum(i * j for i, j in zip(a, b))", "str_map": {}}
{"src": ["sum", "the", "product", "of", "elements", "of", "two", "lists", "named", "a", "and", "b"], "token": ["sum", "(", "x", "*", "y", "for", "x", ",", "y", "in", "list", "(", "zip", "(", "a", ",", "b", ")", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "sum(x * y for x, y in list(zip(a, b)))", "decano_code": "sum(x * y for x, y in list(zip(a, b)))", "raw_code": "sum(x * y for x, y in list(zip(a, b)))", "str_map": {}}
{"src": ["write", "the", "content", "of", "file", "xxx.mp4", "[", "xxx", ".", "mp4", "]", "to", "file", "f"], "token": ["f", ".", "write", "(", "open", "(", "'xxx.mp4'", ",", "'rb'", ")", ".", "read", "(", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "f.write(open('xxx.mp4', 'rb').read())", "decano_code": "f.write(open('xxx.mp4', 'rb').read())", "raw_code": "f.write(open('xxx.mp4', 'rb').read())", "str_map": {}}
{"src": ["add", "1", "to", "each", "integer", "value", "in", "list", "my_list"], "token": ["new_list", "=", "[", "(", "x", "+", "1", ")", "for", "x", "in", "my_list", "]"], "type": ["NAME", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "new_list = [(x + 1) for x in my_list]", "decano_code": "new_list = [(x + 1) for x in my_list]", "raw_code": "new_list = [(x + 1) for x in my_list]", "str_map": {}}
{"src": ["get", "a", "list", "of", "all", "items", "in", "list", "j", "with", "values", "greater", "than", "5"], "token": ["[", "x", "for", "x", "in", "j", "if", "x", ">=", "5", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NUMBER", "OP"], "cano_code": "[x for x in j if x >= 5]", "decano_code": "[x for x in j if x >= 5]", "raw_code": "[x for x in j if x >= 5]", "str_map": {}}
{"src": ["set", "color", "marker", "styles", "--bo", "in", "matplotlib"], "token": ["plt", ".", "plot", "(", "list", "(", "range", "(", "10", ")", ")", ",", "'--bo'", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NUMBER", "OP", "OP", "OP", "STRING", "OP"], "cano_code": "plt.plot(list(range(10)), '--bo')", "decano_code": "plt.plot(list(range(10)), '--bo')", "raw_code": "plt.plot(list(range(10)), '--bo')", "str_map": {}}
{"src": ["set", "circle", "markers", "on", "plot", "for", "individual", "points", "defined", "in", "list", "[1,2,3,4,5,6,7,8,9,10", "]", "created", "by", "range(10", ")"], "token": ["plt", ".", "plot", "(", "list", "(", "range", "(", "10", ")", ")", ",", "linestyle", "=", "'--'", ",", "marker", "=", "'o'", ",", "color", "=", "'b'", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "plt.plot(list(range(10)), linestyle='--', marker='o', color='b')", "decano_code": "plt.plot(list(range(10)), linestyle='--', marker='o', color='b')", "raw_code": "plt.plot(list(range(10)), linestyle='--', marker='o', color='b')", "str_map": {}}
{"src": ["split", "strings", "in", "list", "l", "on", "the", "first", "occurring", "tab", "\\t", "and", "enter", "only", "the", "first", "resulting", "substring", "in", "a", "new", "list"], "token": ["[", "i", ".", "split", "(", "'\\t'", ",", "1", ")", "[", "0", "]", "for", "i", "in", "l", "]"], "type": ["OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[i.split('\\t', 1)[0] for i in l]", "decano_code": "[i.split('\\t', 1)[0] for i in l]", "raw_code": "[i.split('\\t', 1)[0] for i in l]", "str_map": {}}
{"src": ["split", "each", "string", "in", "list", "myList", "on", "the", "tab", "character"], "token": ["myList", "=", "[", "i", ".", "split", "(", "'\\t'", ")", "[", "0", "]", "for", "i", "in", "myList", "]"], "type": ["NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "myList = [i.split('\\t')[0] for i in myList]", "decano_code": "myList = [i.split('\\t')[0] for i in myList]", "raw_code": "myList = [i.split('\\t')[0] for i in myList]", "str_map": {}}
{"src": ["sum", "numbers", "in", "a", "list", "_STR:0_"], "token": ["sum", "(", "your_list", ")"], "type": ["KEYWORD", "OP", "NAME", "OP"], "cano_code": "sum(your_list)", "decano_code": "sum(your_list)", "raw_code": "sum(your_list)", "str_map": {"your_list": "_STR:0_"}}
{"src": ["attach", "debugger", "pdb", "to", "class", "ForkedPdb"], "token": ["ForkedPdb", "(", ")", ".", "set_trace", "(", ")"], "type": ["NAME", "OP", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "ForkedPdb().set_trace()", "decano_code": "ForkedPdb().set_trace()", "raw_code": "ForkedPdb().set_trace()", "str_map": {}}
{"src": ["compose", "keys", "from", "dictionary", "d1", "with", "respective", "values", "in", "dictionary", "d2"], "token": ["result", "=", "{", "k", ":", "d2", ".", "get", "(", "v", ")", "for", "k", ",", "v", "in", "list", "(", "d1", ".", "items", "(", ")", ")", "}"], "type": ["NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "result = {k: d2.get(v) for k, v in list(d1.items())}", "decano_code": "result = {k: d2.get(v) for k, v in list(d1.items())}", "raw_code": "result = {k: d2.get(v) for k, v in list(d1.items())}", "str_map": {}}
{"src": ["add", "one", "day", "and", "three", "hours", "to", "the", "present", "time", "from", "datetime.now(", "[", "datetime", ".", "now(", "]", ")"], "token": ["datetime", ".", "datetime", ".", "now", "(", ")", "+", "datetime", ".", "timedelta", "(", "days", "=", "1", ",", "hours", "=", "3", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "datetime.datetime.now() + datetime.timedelta(days=1, hours=3)", "decano_code": "datetime.datetime.now() + datetime.timedelta(days=1, hours=3)", "raw_code": "datetime.datetime.now() + datetime.timedelta(days=1, hours=3)", "str_map": {}}
{"src": ["convert", "binary", "string", "to", "list", "of", "integers", "using", "python"], "token": ["[", "int", "(", "s", "[", "i", ":", "i", "+", "3", "]", ",", "2", ")", "for", "i", "in", "range", "(", "0", ",", "len", "(", "s", ")", ",", "3", ")", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "[int(s[i:i + 3], 2) for i in range(0, len(s), 3)]", "decano_code": "[int(s[i:i + 3], 2) for i in range(0, len(s), 3)]", "raw_code": "[int(s[i:i + 3], 2) for i in range(0, len(s), 3)]", "str_map": {}}
{"src": ["switch", "keys", "and", "values", "in", "a", "dictionary", "my_dict"], "token": ["dict", "(", "(", "v", ",", "k", ")", "for", "k", ",", "v", "in", "my_dict", ".", "items", "(", ")", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "dict((v, k) for k, v in my_dict.items())", "decano_code": "dict((v, k) for k, v in my_dict.items())", "raw_code": "dict((v, k) for k, v in my_dict.items())", "str_map": {}}
{"src": ["sort", "a", "list", "l", "by", "number", "after", "second", "_STR:0_"], "token": ["print", "(", "sorted", "(", "L", ",", "key", "=", "lambda", "x", ":", "int", "(", "x", ".", "split", "(", "\" _STR:0_ \"", ")", "[", "2", "]", ")", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NUMBER", "OP", "OP", "OP", "OP"], "cano_code": "print(sorted(L, key=lambda x: int(x.split(\" _STR:0_ \")[2])))", "decano_code": "print(sorted(L, key=lambda x: int(x.split(\" _STR:0_ \")[2])))", "raw_code": "print(sorted(L, key=lambda x: int(x.split('.')[2])))", "str_map": {".": "_STR:0_"}}
{"src": ["check", "if", "the", "value", "of", "the", "key", "_STR:0_", "is", "_STR:1_", "in", "a", "list", "of", "dictionaries", "label"], "token": ["any", "(", "d", "[", "\" _STR:0_ \"", "]", "==", "\" _STR:1_ \"", "for", "d", "in", "label", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "OP", "STRING", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "any(d[\" _STR:0_ \"] == \" _STR:1_ \" for d in label)", "decano_code": "any(d[\" _STR:0_ \"] == \" _STR:1_ \" for d in label)", "raw_code": "any(d['name'] == 'Test' for d in label)", "str_map": {"name": "_STR:0_", "Test": "_STR:1_"}}
{"src": ["remove", "all", "instances", "of", "[1", ",", "1", "]", "from", "list", "a"], "token": ["a", "[", ":", "]", "=", "[", "x", "for", "x", "in", "a", "if", "x", "!=", "[", "1", ",", "1", "]", "]"], "type": ["NAME", "OP", "OP", "OP", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "a[:] = [x for x in a if x != [1, 1]]", "decano_code": "a[:] = [x for x in a if x != [1, 1]]", "raw_code": "a[:] = [x for x in a if x != [1, 1]]", "str_map": {}}
{"src": ["remove", "all", "instances", "of", "[1, 1", "]", "from", "a", "list", "a"], "token": ["[", "x", "for", "x", "in", "a", "if", "x", "!=", "[", "1", ",", "1", "]", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "[x for x in a if x != [1, 1]]", "decano_code": "[x for x in a if x != [1, 1]]", "raw_code": "[x for x in a if x != [1, 1]]", "str_map": {}}
{"src": ["convert", "a", "list", "_STR:0_", "to", "a", "dictionary", "where", "each", "even", "element", "represents", "the", "key", "to", "the", "dictionary", ",", "and", "the", "following", "odd", "element", "is", "the", "value"], "token": ["b", "=", "{", "a", "[", "i", "]", ":", "a", "[", "i", "+", "1", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "a", ")", ",", "2", ")", "}"], "type": ["NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "b = {a[i]: a[i + 1] for i in range(0, len(a), 2)}", "decano_code": "b = {a[i]: a[i + 1] for i in range(0, len(a), 2)}", "raw_code": "b = {a[i]: a[i + 1] for i in range(0, len(a), 2)}", "str_map": {"a": "_STR:0_"}}
{"src": ["check", "whether", "elements", "in", "list", "a", "appear", "only", "once"], "token": ["len", "(", "set", "(", "a", ")", ")", "==", "len", "(", "a", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "OP", "NAME", "OP"], "cano_code": "len(set(a)) == len(a)", "decano_code": "len(set(a)) == len(a)", "raw_code": "len(set(a)) == len(a)", "str_map": {}}
{"src": ["generate", "MD5", "checksum", "of", "file", "in", "the", "path", "full_path", "in", "hashlib"], "token": ["print", "(", "hashlib", ".", "md5", "(", "open", "(", "full_path", ",", "'rb'", ")", ".", "read", "(", ")", ")", ".", "hexdigest", "(", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "print(hashlib.md5(open(full_path, 'rb').read()).hexdigest())", "decano_code": "print(hashlib.md5(open(full_path, 'rb').read()).hexdigest())", "raw_code": "print(hashlib.md5(open(full_path, 'rb').read()).hexdigest())", "str_map": {}}
{"src": ["how", "to", "sort", "a", "dictionary", "in", "python", "by", "value", "when", "the", "value", "is", "a", "list", "and", "i", "want", "to", "sort", "it", "by", "the", "first", "index", "of", "that", "list"], "token": ["sorted", "(", "list", "(", "data", ".", "items", "(", ")", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", "[", "0", "]", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "sorted(list(data.items()), key=lambda x: x[1][0])", "decano_code": "sorted(list(data.items()), key=lambda x: x[1][0])", "raw_code": "sorted(list(data.items()), key=lambda x: x[1][0])", "str_map": {}}
{"src": ["randomly", "switch", "letters", "'", "cases", "in", "string", "s"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "x", ".", "upper", "(", ")", "if", "random", ".", "randint", "(", "0", ",", "1", ")", "else", "x", "for", "x", "in", "s", ")"], "type": ["STRING", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "\"\"\"\"\"\".join(x.upper() if random.randint(0, 1) else x for x in s)", "decano_code": "\"\"\"\"\"\".join(x.upper() if random.randint(0, 1) else x for x in s)", "raw_code": "\"\"\"\"\"\".join(x.upper() if random.randint(0, 1) else x for x in s)", "str_map": {}}
{"src": ["force", "bash", "interpreter", "_STR:0_", "to", "be", "used", "instead", "of", "shell"], "token": ["os", ".", "system", "(", "'GREPDB=\"echo 123\"; /bin/bash -c \"$GREPDB\"'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "os.system('GREPDB=\"echo 123\"; /bin/bash -c \"$GREPDB\"')", "decano_code": "os.system('GREPDB=\"echo 123\"; /bin/bash -c \"$GREPDB\"')", "raw_code": "os.system('GREPDB=\"echo 123\"; /bin/bash -c \"$GREPDB\"')", "str_map": {"/bin/bash": "_STR:0_"}}
{"src": ["run", "a", "command", "echo hello world", "in", "bash", "instead", "of", "shell"], "token": ["os", ".", "system", "(", "'/bin/bash -c \"echo hello world\"'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "os.system('/bin/bash -c \"echo hello world\"')", "decano_code": "os.system('/bin/bash -c \"echo hello world\"')", "raw_code": "os.system('/bin/bash -c \"echo hello world\"')", "str_map": {}}
{"src": ["access", "the", "class", "variable", "a_string", "from", "a", "class", "object", "test"], "token": ["getattr", "(", "test", ",", "a_string", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "getattr(test, a_string)", "decano_code": "getattr(test, a_string)", "raw_code": "getattr(test, a_string)", "str_map": {}}
{"src": ["display", "a", "image", "file", "pathToFile"], "token": ["Image", ".", "open", "(", "'pathToFile'", ")", ".", "show", "(", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "Image.open('pathToFile').show()", "decano_code": "Image.open('pathToFile').show()", "raw_code": "Image.open('pathToFile').show()", "str_map": {}}
{"src": ["replace", "single", "quote", "character", "in", "string", "_STR:0_", "with", "empty", "string", "_STR:1_"], "token": ["\" _STR:0_ \"", ".", "replace", "(", "\"'\"", ",", "\" _STR:1_ \"", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "\" _STR:0_ \".replace(\"'\", \" _STR:1_ \")", "decano_code": "\" _STR:0_ \".replace(\"'\", \" _STR:1_ \")", "raw_code": "\"\"\"didn't\"\"\".replace(\"'\", '')", "str_map": {"didn't": "_STR:0_", "": "_STR:1_"}}
{"src": ["sort", "list", "files", "based", "on", "variable", "file_number"], "token": ["files", ".", "sort", "(", "key", "=", "file_number", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "files.sort(key=file_number)", "decano_code": "files.sort(key=file_number)", "raw_code": "files.sort(key=file_number)", "str_map": {}}
{"src": ["remove", "all", "whitespace", "in", "a", "string", "sentence"], "token": ["sentence", ".", "replace", "(", "' '", ",", "''", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "sentence.replace(' ', '')", "decano_code": "sentence.replace(' ', '')", "raw_code": "sentence.replace(' ', '')", "str_map": {}}
{"src": ["remove", "all", "whitespace", "in", "a", "string", "sentence"], "token": ["pattern", "=", "re", ".", "compile", "(", "'\\\\s+'", ")", "\n", "sentence", "=", "re", ".", "sub", "(", "pattern", ",", "''", ",", "sentence", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "NEWLINE", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "pattern = re.compile('\\\\s+')\nsentence = re.sub(pattern, '', sentence)", "decano_code": "pattern = re.compile('\\\\s+')\nsentence = re.sub(pattern, '', sentence)", "raw_code": "pattern = re.compile('\\\\s+')\nsentence = re.sub(pattern, '', sentence)", "str_map": {}}
{"src": ["remove", "whitespace", "in", "string", "sentence", "from", "beginning", "and", "end"], "token": ["sentence", ".", "strip", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "sentence.strip()", "decano_code": "sentence.strip()", "raw_code": "sentence.strip()", "str_map": {}}
{"src": ["remove", "all", "whitespaces", "in", "string", "sentence"], "token": ["sentence", "=", "re", ".", "sub", "(", "'\\\\s+'", ",", "''", ",", "sentence", ",", "flags", "=", "re", ".", "UNICODE", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "sentence = re.sub('\\\\s+', '', sentence, flags=re.UNICODE)", "decano_code": "sentence = re.sub('\\\\s+', '', sentence, flags=re.UNICODE)", "raw_code": "sentence = re.sub('\\\\s+', '', sentence, flags=re.UNICODE)", "str_map": {}}
{"src": ["remove", "all", "whitespaces", "in", "a", "string", "sentence"], "token": ["sentence", "=", "''", ".", "join", "(", "sentence", ".", "split", "(", ")", ")"], "type": ["NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "sentence = ''.join(sentence.split())", "decano_code": "sentence = ''.join(sentence.split())", "raw_code": "sentence = ''.join(sentence.split())", "str_map": {}}
{"src": ["sum", "all", "the", "values", "in", "a", "counter", "variable", "my_counter"], "token": ["sum", "(", "my_counter", ".", "values", "(", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "sum(my_counter.values())", "decano_code": "sum(my_counter.values())", "raw_code": "sum(my_counter.values())", "str_map": {}}
{"src": ["find", "the", "euclidean", "distance", "between", "two", "3-d", "arrays", "a", "and", "b"], "token": ["np", ".", "sqrt", "(", "(", "(", "A", "-", "B", ")", "**", "2", ")", ".", "sum", "(", "-", "1", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "OP", "KEYWORD", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "np.sqrt(((A - B) ** 2).sum(-1))", "decano_code": "np.sqrt(((A - B) ** 2).sum(-1))", "raw_code": "np.sqrt(((A - B) ** 2).sum(-1))", "str_map": {}}
{"src": ["create", "list", "levels", "containing", "3", "empty", "dictionaries"], "token": ["levels", "=", "[", "{", "}", ",", "{", "}", ",", "{", "}", "]"], "type": ["NAME", "OP", "OP", "OP", "OP", "OP", "OP", "OP", "OP", "OP", "OP", "OP"], "cano_code": "levels = [{}, {}, {}]", "decano_code": "levels = [{}, {}, {}]", "raw_code": "levels = [{}, {}, {}]", "str_map": {}}
{"src": ["find", "the", "sums", "of", "length", "7", "subsets", "of", "a", "list", "daily"], "token": ["weekly", "=", "[", "sum", "(", "visitors", "[", "x", ":", "x", "+", "7", "]", ")", "for", "x", "in", "range", "(", "0", ",", "len", "(", "daily", ")", ",", "7", ")", "]"], "type": ["NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "weekly = [sum(visitors[x:x + 7]) for x in range(0, len(daily), 7)]", "decano_code": "weekly = [sum(visitors[x:x + 7]) for x in range(0, len(daily), 7)]", "raw_code": "weekly = [sum(visitors[x:x + 7]) for x in range(0, len(daily), 7)]", "str_map": {}}
{"src": ["delete", "an", "element", "key", "from", "a", "dictionary", "d"], "token": ["del", "d", "[", "key", "]"], "type": ["KEYWORD", "NAME", "OP", "NAME", "OP"], "cano_code": "del d[key]", "decano_code": "del d[key]", "raw_code": "del d[key]", "str_map": {}}
{"src": ["delete", "an", "element", "0", "from", "a", "dictionary", "a"], "token": ["{", "i", ":", "a", "[", "i", "]", "for", "i", "in", "a", "if", "(", "i", "!=", "0", ")", "}"], "type": ["OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "{i: a[i] for i in a if (i != 0)}", "decano_code": "{i: a[i] for i in a if (i != 0)}", "raw_code": "{i: a[i] for i in a if (i != 0)}", "str_map": {}}
{"src": ["delete", "an", "element", "_STR:0_", "from", "a", "dictionary", "lol"], "token": ["lol", ".", "pop", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "lol.pop(\" _STR:0_ \")", "decano_code": "lol.pop(\" _STR:0_ \")", "raw_code": "lol.pop('hello')", "str_map": {"hello": "_STR:0_"}}
{"src": ["delete", "an", "element", "with", "key", "key", "dictionary", "r"], "token": ["del", "r", "[", "key", "]"], "type": ["KEYWORD", "NAME", "OP", "NAME", "OP"], "cano_code": "del r[key]", "decano_code": "del r[key]", "raw_code": "del r[key]", "str_map": {}}
{"src": ["solve", "for", "the", "least", "squares", "'", "solution", "of", "matrices", "a", "and", "b"], "token": ["np", ".", "linalg", ".", "solve", "(", "np", ".", "dot", "(", "a", ".", "T", ",", "a", ")", ",", "np", ".", "dot", "(", "a", ".", "T", ",", "b", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "np.linalg.solve(np.dot(a.T, a), np.dot(a.T, b))", "decano_code": "np.linalg.solve(np.dot(a.T, a), np.dot(a.T, b))", "raw_code": "np.linalg.solve(np.dot(a.T, a), np.dot(a.T, b))", "str_map": {}}
{"src": ["split", "dictionary/list", "inside", "a", "pandas", "column", "_STR:0_", "into", "separate", "columns", "in", "dataframe", "df"], "token": ["pd", ".", "concat", "(", "[", "df", ".", "drop", "(", "\" _STR:0_ \"", ",", "axis", "=", "1", ")", ",", "pd", ".", "DataFrame", "(", "df", "[", "\" _STR:0_ \"", "]", ".", "tolist", "(", ")", ")", "]", ",", "axis", "=", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "pd.concat([df.drop(\" _STR:0_ \", axis=1), pd.DataFrame(df[\" _STR:0_ \"].tolist())], axis=1)", "decano_code": "pd.concat([df.drop(\" _STR:0_ \", axis=1), pd.DataFrame(df[\" _STR:0_ \"].tolist())], axis=1)", "raw_code": "pd.concat([df.drop('b', axis=1), pd.DataFrame(df['b'].tolist())], axis=1)", "str_map": {"b": "_STR:0_"}}
{"src": ["loop", "through", "0", "to", "10", "with", "step", "2"], "token": ["for", "i", "in", "range", "(", "0", ",", "10", ",", "2", ")", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "for i in range(0, 10, 2):\n    pass", "decano_code": "for i in range(0, 10, 2):\n    pass", "raw_code": "for i in range(0, 10, 2):\n    pass", "str_map": {}}
{"src": ["loop", "through", "mylist", "with", "step", "2"], "token": ["for", "i", "in", "mylist", "[", ":", ":", "2", "]", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP", "OP", "NUMBER", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "for i in mylist[::2]:\n    pass", "decano_code": "for i in mylist[::2]:\n    pass", "raw_code": "for i in mylist[::2]:\n    pass", "str_map": {}}
{"src": ["lowercase", "string", "values", "with", "key", "_STR:0_", "in", "a", "list", "of", "dictionaries", "messages"], "token": ["[", "{", "\" _STR:0_ \"", ":", "x", "[", "\" _STR:0_ \"", "]", ".", "lower", "(", ")", "}", "for", "x", "in", "messages", "]"], "type": ["OP", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[{\" _STR:0_ \": x[\" _STR:0_ \"].lower()} for x in messages]", "decano_code": "[{\" _STR:0_ \": x[\" _STR:0_ \"].lower()} for x in messages]", "raw_code": "[{'content': x['content'].lower()} for x in messages]", "str_map": {"content": "_STR:0_"}}
{"src": ["convert", "a", "list", "my_list", "into", "string", "with", "values", "separated", "by", "spaces"], "token": ["\"\"\" \"\"\"", ".", "join", "(", "my_list", ")"], "type": ["STRING", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "\"\"\" \"\"\".join(my_list)", "decano_code": "\"\"\" \"\"\".join(my_list)", "raw_code": "\"\"\" \"\"\".join(my_list)", "str_map": {}}
{"src": ["replace", "each", "occurrence", "of", "the", "pattern", "_STR:0_", "within", "a", "with", "_STR:1_"], "token": ["re", ".", "sub", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ",", "a", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.sub(\" _STR:0_ \", \" _STR:1_ \", a)", "decano_code": "re.sub(\" _STR:0_ \", \" _STR:1_ \", a)", "raw_code": "re.sub('(http://\\\\S+|\\\\S*[^\\\\w\\\\s]\\\\S*)', '', a)", "str_map": {"(http://\\S+|\\S*[^\\w\\s]\\S*)": "_STR:0_", "": "_STR:1_"}}
{"src": ["check", "if", "string", "str", "is", "palindrome"], "token": ["str", "(", "n", ")", "==", "str", "(", "n", ")", "[", ":", ":", "-", "1", "]"], "type": ["KEYWORD", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "str(n) == str(n)[::-1]", "decano_code": "str(n) == str(n)[::-1]", "raw_code": "str(n) == str(n)[::-1]", "str_map": {}}
{"src": ["upload", "binary", "file", "myfile.txt", "[", "myfile", ".", "txt", "]", "with", "ftplib"], "token": ["ftp", ".", "storbinary", "(", "'STOR myfile.txt'", ",", "open", "(", "'myfile.txt'", ",", "'rb'", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "ftp.storbinary('STOR myfile.txt', open('myfile.txt', 'rb'))", "decano_code": "ftp.storbinary('STOR myfile.txt', open('myfile.txt', 'rb'))", "raw_code": "ftp.storbinary('STOR myfile.txt', open('myfile.txt', 'rb'))", "str_map": {}}
{"src": ["remove", "all", "characters", "from", "string", "stri", "upto", "character", "_STR:0_"], "token": ["re", ".", "sub", "(", "'.*I'", ",", "\" _STR:0_ \"", ",", "stri", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.sub('.*I', \" _STR:0_ \", stri)", "decano_code": "re.sub('.*I', \" _STR:0_ \", stri)", "raw_code": "re.sub('.*I', 'I', stri)", "str_map": {"I": "_STR:0_"}}
{"src": ["parse", "a", "comma-separated", "string", "number", "_STR:0_", "into", "int"], "token": ["int", "(", "\" _STR:0_ \"", ".", "replace", "(", "','", ",", "''", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "int(\" _STR:0_ \".replace(',', ''))", "decano_code": "int(\" _STR:0_ \".replace(',', ''))", "raw_code": "int('1,000,000'.replace(',', ''))", "str_map": {"1,000,000": "_STR:0_"}}
{"src": ["combine", "dataframe", "df1", "and", "dataframe", "df2", "by", "index", "number"], "token": ["pd", ".", "merge", "(", "df1", ",", "df2", ",", "left_index", "=", "True", ",", "right_index", "=", "True", ",", "how", "=", "'outer'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "pd.merge(df1, df2, left_index=True, right_index=True, how='outer')", "decano_code": "pd.merge(df1, df2, left_index=True, right_index=True, how='outer')", "raw_code": "pd.merge(df1, df2, left_index=True, right_index=True, how='outer')", "str_map": {}}
{"src": ["combine", "two", "pandas", "dataframes", "with", "the", "same", "index"], "token": ["pandas", ".", "concat", "(", "[", "df1", ",", "df2", "]", ",", "axis", "=", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "pandas.concat([df1, df2], axis=1)", "decano_code": "pandas.concat([df1, df2], axis=1)", "raw_code": "pandas.concat([df1, df2], axis=1)", "str_map": {}}
{"src": ["check", "if", "all", "boolean", "values", "in", "a", "python", "dictionary", "dict", "are", "true"], "token": ["all", "(", "dict", ".", "values", "(", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "all(dict.values())", "decano_code": "all(dict.values())", "raw_code": "all(dict.values())", "str_map": {}}
{"src": ["use", "regex", "pattern", "_STR:0_", "to", "remove", "digit", "12", "if", "followed", "by", "4", "other", "digits", "in", "column", "c_contofficeID", "of", "dataframe", "df"], "token": ["df", ".", "c_contofficeID", ".", "str", ".", "replace", "(", "\" _STR:0_ \"", ",", "''", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "df.c_contofficeID.str.replace(\" _STR:0_ \", '')", "decano_code": "df.c_contofficeID.str.replace(\" _STR:0_ \", '')", "raw_code": "df.c_contofficeID.str.replace('^12(?=.{4}$)', '')", "str_map": {"^12(?=.{4}$)": "_STR:0_"}}
{"src": ["reverse", "a", "list", "l"], "token": ["L", "[", ":", ":", "(", "-", "1", ")", "]"], "type": ["NAME", "OP", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "L[::(-1)]", "decano_code": "L[::(-1)]", "raw_code": "L[::(-1)]", "str_map": {}}
{"src": ["reverse", "a", "list", "array"], "token": ["reversed", "(", "array", ")"], "type": ["KEYWORD", "OP", "NAME", "OP"], "cano_code": "reversed(array)", "decano_code": "reversed(array)", "raw_code": "reversed(array)", "str_map": {}}
{"src": ["reverse", "a", "list", "l"], "token": ["L", ".", "reverse", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "L.reverse()", "decano_code": "L.reverse()", "raw_code": "L.reverse()", "str_map": {}}
{"src": ["reverse", "a", "list", "array"], "token": ["list", "(", "reversed", "(", "array", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "list(reversed(array))", "decano_code": "list(reversed(array))", "raw_code": "list(reversed(array))", "str_map": {}}
{"src": ["get", "first", "element", "of", "each", "tuple", "in", "list", "a"], "token": ["[", "tup", "[", "0", "]", "for", "tup", "in", "A", "]"], "type": ["OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[tup[0] for tup in A]", "decano_code": "[tup[0] for tup in A]", "raw_code": "[tup[0] for tup in A]", "str_map": {}}
{"src": ["replace", "character", "_STR:0_", "with", "character", "_STR:1_", "and", "character", "_STR:2_", "with", "character", "_STR:3_", "in", "file", "contents"], "token": ["newcontents", "=", "contents", ".", "replace", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")", ".", "replace", "(", "\" _STR:2_ \"", ",", "\" _STR:3_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "newcontents = contents.replace(\" _STR:0_ \", \" _STR:1_ \").replace(\" _STR:2_ \", \" _STR:3_ \")", "decano_code": "newcontents = contents.replace(\" _STR:0_ \", \" _STR:1_ \").replace(\" _STR:2_ \", \" _STR:3_ \")", "raw_code": "newcontents = contents.replace('a', 'e').replace('s', '3')", "str_map": {"a": "_STR:0_", "e": "_STR:1_", "s": "_STR:2_", "3": "_STR:3_"}}
{"src": ["serialise", "SqlAlchemy", "RowProxy", "object", "row", "to", "a", "json", "object"], "token": ["json", ".", "dumps", "(", "[", "dict", "(", "list", "(", "row", ".", "items", "(", ")", ")", ")", "for", "row", "in", "rs", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "json.dumps([dict(list(row.items())) for row in rs])", "decano_code": "json.dumps([dict(list(row.items())) for row in rs])", "raw_code": "json.dumps([dict(list(row.items())) for row in rs])", "str_map": {}}
{"src": ["get", "file", "_STR:0_"], "token": ["config_file", "=", "os", ".", "path", ".", "expanduser", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "config_file = os.path.expanduser(\" _STR:0_ \")", "decano_code": "config_file = os.path.expanduser(\" _STR:0_ \")", "raw_code": "config_file = os.path.expanduser('~/foo.ini')", "str_map": {"~/foo.ini": "_STR:0_"}}
{"src": ["get", "multiple", "parameters", "with", "same", "name", "from", "a", "url", "in", "pylons"], "token": ["request", ".", "params", ".", "getall", "(", "'c'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "request.params.getall('c')", "decano_code": "request.params.getall('c')", "raw_code": "request.params.getall('c')", "str_map": {}}
{"src": ["convert", "array", "x", "into", "a", "correlation", "matrix"], "token": ["np", ".", "corrcoef", "(", "x", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "np.corrcoef(x)", "decano_code": "np.corrcoef(x)", "raw_code": "np.corrcoef(x)", "str_map": {}}
{"src": ["find", "the", "greatest", "number", "in", "set", "(1, 2, 3", ")"], "token": ["print", "(", "max", "(", "1", ",", "2", ",", "3", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "print(max(1, 2, 3))", "decano_code": "print(max(1, 2, 3))", "raw_code": "print(max(1, 2, 3))", "str_map": {}}
{"src": ["retrieve", "parameter", "_STR:0_", "from", "a", "GET", "request", "."], "token": ["self", ".", "request", ".", "get", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "self.request.get(\" _STR:0_ \")", "decano_code": "self.request.get(\" _STR:0_ \")", "raw_code": "self.request.get('var_name')", "str_map": {"var_name": "_STR:0_"}}
{"src": ["add", "100", "to", "each", "element", "of", "column", "_STR:0_", "in", "dataframe", "a"], "token": ["a", "[", "\" _STR:0_ \"", "]", ".", "apply", "(", "lambda", "x", ",", "y", ":", "x", "+", "y", ",", "args", "=", "(", "100", ",", ")", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "a[\" _STR:0_ \"].apply(lambda x, y: x + y, args=(100,))", "decano_code": "a[\" _STR:0_ \"].apply(lambda x, y: x + y, args=(100,))", "raw_code": "a['x'].apply(lambda x, y: x + y, args=(100,))", "str_map": {"x": "_STR:0_"}}
{"src": ["django", "get", "first", "10", "records", "of", "model", "user", "ordered", "by", "criteria", "_STR:0_", "of", "model", "_STR:1_"], "token": ["User", ".", "objects", ".", "order_by", "(", "'-pet__age'", ")", "[", ":", "10", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "User.objects.order_by('-pet__age')[:10]", "decano_code": "User.objects.order_by('-pet__age')[:10]", "raw_code": "User.objects.order_by('-pet__age')[:10]", "str_map": {"age": "_STR:0_", "pet": "_STR:1_"}}
{"src": ["delay", "for", "_STR:0_", "seconds"], "token": ["time", ".", "sleep", "(", "5", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "time.sleep(5)", "decano_code": "time.sleep(5)", "raw_code": "time.sleep(5)", "str_map": {"5": "_STR:0_"}}
{"src": ["make", "a", "60", "seconds", "time", "delay"], "token": ["time", ".", "sleep", "(", "60", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "time.sleep(60)", "decano_code": "time.sleep(60)", "raw_code": "time.sleep(60)", "str_map": {}}
{"src": ["make", "a", "0.1", "[", "0", ".", "1", "]", "seconds", "time", "delay"], "token": ["sleep", "(", "0.1", ")"], "type": ["NAME", "OP", "NUMBER", "OP"], "cano_code": "sleep(0.1)", "decano_code": "sleep(0.1)", "raw_code": "sleep(0.1)", "str_map": {}}
{"src": ["make", "a", "60", "seconds", "time", "delay"], "token": ["time", ".", "sleep", "(", "60", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "time.sleep(60)", "decano_code": "time.sleep(60)", "raw_code": "time.sleep(60)", "str_map": {}}
{"src": ["make", "a", "0.1", "[", "0", ".", "1", "]", "seconds", "time", "delay"], "token": ["time", ".", "sleep", "(", "0.1", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "time.sleep(0.1)", "decano_code": "time.sleep(0.1)", "raw_code": "time.sleep(0.1)", "str_map": {}}
{"src": ["from", "a", "list", "of", "strings", "my_list", ",", "remove", "the", "values", "that", "contains", "numbers", "."], "token": ["[", "x", "for", "x", "in", "my_list", "if", "not", "any", "(", "c", ".", "isdigit", "(", ")", "for", "c", "in", "x", ")", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "[x for x in my_list if not any(c.isdigit() for c in x)]", "decano_code": "[x for x in my_list if not any(c.isdigit() for c in x)]", "raw_code": "[x for x in my_list if not any(c.isdigit() for c in x)]", "str_map": {}}
{"src": ["get", "the", "middle", "two", "characters", "of", "a", "string", "_STR:0_", "in", "a", "pandas", "dataframe", "df"], "token": ["df", "[", "\" _STR:0_ \"", "]", ".", "apply", "(", "lambda", "x", ":", "x", "[", "len", "(", "x", ")", "/", "2", "-", "1", ":", "len", "(", "x", ")", "/", "2", "+", "1", "]", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "df[\" _STR:0_ \"].apply(lambda x: x[len(x) / 2 - 1:len(x) / 2 + 1])", "decano_code": "df[\" _STR:0_ \"].apply(lambda x: x[len(x) / 2 - 1:len(x) / 2 + 1])", "raw_code": "df['state'].apply(lambda x: x[len(x) / 2 - 1:len(x) / 2 + 1])", "str_map": {"state": "_STR:0_"}}
{"src": ["draw", "a", "grid", "line", "on", "every", "tick", "of", "plot", "plt"], "token": ["plt", ".", "grid", "(", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "plt.grid(True)", "decano_code": "plt.grid(True)", "raw_code": "plt.grid(True)", "str_map": {}}
{"src": ["sort", "list", "lst", "based", "on", "each", "element", "'", "s", "number", "of", "occurrences"], "token": ["sorted", "(", "lst", ",", "key", "=", "lambda", "x", ":", "(", "-", "1", "*", "c", "[", "x", "]", ",", "lst", ".", "index", "(", "x", ")", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP", "OP", "NUMBER", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "sorted(lst, key=lambda x: (-1 * c[x], lst.index(x)))", "decano_code": "sorted(lst, key=lambda x: (-1 * c[x], lst.index(x)))", "raw_code": "sorted(lst, key=lambda x: (-1 * c[x], lst.index(x)))", "str_map": {}}
{"src": ["get", "the", "value", "with", "the", "maximum", "length", "in", "each", "column", "in", "array", "foo"], "token": ["[", "max", "(", "len", "(", "str", "(", "x", ")", ")", "for", "x", "in", "line", ")", "for", "line", "in", "zip", "(", "*", "foo", ")", "]"], "type": ["OP", "KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "[max(len(str(x)) for x in line) for line in zip(*foo)]", "decano_code": "[max(len(str(x)) for x in line) for line in zip(*foo)]", "raw_code": "[max(len(str(x)) for x in line) for line in zip(*foo)]", "str_map": {}}
{"src": ["get", "the", "count", "of", "each", "unique", "value", "in", "column", "country", "of", "dataframe", "df", "and", "store", "in", "column", "Sum of Accidents"], "token": ["df", ".", "Country", ".", "value_counts", "(", ")", ".", "reset_index", "(", "name", "=", "'Sum of Accidents'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df.Country.value_counts().reset_index(name='Sum of Accidents')", "decano_code": "df.Country.value_counts().reset_index(name='Sum of Accidents')", "raw_code": "df.Country.value_counts().reset_index(name='Sum of Accidents')", "str_map": {}}
{"src": ["calculat", "the", "difference", "between", "each", "row", "and", "the", "row", "previous", "to", "it", "in", "dataframe", "data"], "token": ["data", ".", "set_index", "(", "'Date'", ")", ".", "diff", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "data.set_index('Date').diff()", "decano_code": "data.set_index('Date').diff()", "raw_code": "data.set_index('Date').diff()", "str_map": {}}
{"src": ["append", "values", "[3, 4", "]", "to", "a", "set", "a"], "token": ["a", ".", "update", "(", "[", "3", ",", "4", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "a.update([3, 4])", "decano_code": "a.update([3, 4])", "raw_code": "a.update([3, 4])", "str_map": {}}
{"src": ["set", "every", "two-stride", "far", "element", "to", "-1", "starting", "from", "second", "element", "in", "array", "a"], "token": ["a", "[", "1", ":", ":", "2", "]", "=", "-", "1"], "type": ["NAME", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER"], "cano_code": "a[1::2] = -1", "decano_code": "a[1::2] = -1", "raw_code": "a[1::2] = -1", "str_map": {}}
{"src": ["get", "rank", "of", "rows", "from", "highest", "to", "lowest", "of", "dataframe", "df", ",", "grouped", "by", "value", "in", "column", "group", ",", "according", "to", "value", "in", "column", "value"], "token": ["df", ".", "groupby", "(", "'group'", ")", "[", "'value'", "]", ".", "rank", "(", "ascending", "=", "False", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df.groupby('group')['value'].rank(ascending=False)", "decano_code": "df.groupby('group')['value'].rank(ascending=False)", "raw_code": "df.groupby('group')['value'].rank(ascending=False)", "str_map": {}}
{"src": ["convert", "js", "date", "object", "_STR:0_", "to", "python", "datetime"], "token": ["datetime", ".", "strptime", "(", "\" _STR:0_ \"", ",", "'%a, %d %b %Y %H:%M:%S %Z'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "datetime.strptime(\" _STR:0_ \", '%a, %d %b %Y %H:%M:%S %Z')", "decano_code": "datetime.strptime(\" _STR:0_ \", '%a, %d %b %Y %H:%M:%S %Z')", "raw_code": "datetime.strptime('Tue, 22 Nov 2011 06:00:00 GMT', '%a, %d %b %Y %H:%M:%S %Z')", "str_map": {"Tue, 22 Nov 2011 06:00:00 GMT": "_STR:0_"}}
{"src": ["convert", "a", "binary", "value", "_STR:0_", "to", "string"], "token": ["struct", ".", "pack", "(", "'<I'", ",", "1633837924", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NUMBER", "OP"], "cano_code": "struct.pack('<I', 1633837924)", "decano_code": "struct.pack('<I', 1633837924)", "raw_code": "struct.pack('<I', 1633837924)", "str_map": {"1633837924": "_STR:0_"}}
{"src": ["append", "string", "foo", "to", "list", "list"], "token": ["list", ".", "append", "(", "'foo'", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "list.append('foo')", "decano_code": "list.append('foo')", "raw_code": "list.append('foo')", "str_map": {}}
{"src": ["insert", "string", "foo", "at", "position", "0", "of", "list", "list"], "token": ["list", ".", "insert", "(", "0", ",", "'foo'", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "STRING", "OP"], "cano_code": "list.insert(0, 'foo')", "decano_code": "list.insert(0, 'foo')", "raw_code": "list.insert(0, 'foo')", "str_map": {}}
{"src": ["convert", "keys", "in", "dictionary", "thedict", "into", "case", "insensitive"], "token": ["theset", "=", "set", "(", "k", ".", "lower", "(", ")", "for", "k", "in", "thedict", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "theset = set(k.lower() for k in thedict)", "decano_code": "theset = set(k.lower() for k in thedict)", "raw_code": "theset = set(k.lower() for k in thedict)", "str_map": {}}
{"src": ["pad", "_STR:0_", "up", "to", "a", "length", "of", "5", "characters", "with", "_STR:1_"], "token": ["\"\"\"{s:{c}^{n}}\"\"\"", ".", "format", "(", "s", "=", "\" _STR:0_ \"", ",", "n", "=", "5", ",", "c", "=", "\" _STR:1_ \"", ")"], "type": ["STRING", "OP", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NUMBER", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "\"\"\"{s:{c}^{n}}\"\"\".format(s=\" _STR:0_ \", n=5, c=\" _STR:1_ \")", "decano_code": "\"\"\"{s:{c}^{n}}\"\"\".format(s=\" _STR:0_ \", n=5, c=\" _STR:1_ \")", "raw_code": "\"\"\"{s:{c}^{n}}\"\"\".format(s='dog', n=5, c='x')", "str_map": {"dog": "_STR:0_", "x": "_STR:1_"}}
{"src": ["check", "if", "type", "of", "variable", "s", "is", "a", "string"], "token": ["isinstance", "(", "s", ",", "str", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "isinstance(s, str)", "decano_code": "isinstance(s, str)", "raw_code": "isinstance(s, str)", "str_map": {}}
{"src": ["check", "if", "type", "of", "a", "variable", "s", "is", "string"], "token": ["isinstance", "(", "s", ",", "str", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "isinstance(s, str)", "decano_code": "isinstance(s, str)", "raw_code": "isinstance(s, str)", "str_map": {}}
{"src": ["convert", "list", "of", "dictionaries", "l", "into", "a", "flat", "dictionary"], "token": ["dict", "(", "pair", "for", "d", "in", "L", "for", "pair", "in", "list", "(", "d", ".", "items", "(", ")", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "dict(pair for d in L for pair in list(d.items()))", "decano_code": "dict(pair for d in L for pair in list(d.items()))", "raw_code": "dict(pair for d in L for pair in list(d.items()))", "str_map": {}}
{"src": ["merge", "a", "list", "of", "dictionaries", "in", "list", "l", "into", "a", "single", "dict"], "token": ["{", "k", ":", "v", "for", "d", "in", "L", "for", "k", ",", "v", "in", "list", "(", "d", ".", "items", "(", ")", ")", "}"], "type": ["OP", "NAME", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "{k: v for d in L for k, v in list(d.items())}", "decano_code": "{k: v for d in L for k, v in list(d.items())}", "raw_code": "{k: v for d in L for k, v in list(d.items())}", "str_map": {}}
{"src": ["sort", "a", "pandas", "data", "frame", "according", "to", "column", "peak", "in", "ascending", "and", "weeks", "in", "descending", "order"], "token": ["df", ".", "sort_values", "(", "[", "'Peak'", ",", "'Weeks'", "]", ",", "ascending", "=", "[", "True", ",", "False", "]", ",", "inplace", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df.sort_values(['Peak', 'Weeks'], ascending=[True, False], inplace=True)", "decano_code": "df.sort_values(['Peak', 'Weeks'], ascending=[True, False], inplace=True)", "raw_code": "df.sort_values(['Peak', 'Weeks'], ascending=[True, False], inplace=True)", "str_map": {}}
{"src": ["sort", "a", "pandas", "data", "frame", "by", "column", "peak", "in", "ascending", "and", "weeks", "in", "descending", "order"], "token": ["df", ".", "sort", "(", "[", "'Peak'", ",", "'Weeks'", "]", ",", "ascending", "=", "[", "True", ",", "False", "]", ",", "inplace", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df.sort(['Peak', 'Weeks'], ascending=[True, False], inplace=True)", "decano_code": "df.sort(['Peak', 'Weeks'], ascending=[True, False], inplace=True)", "raw_code": "df.sort(['Peak', 'Weeks'], ascending=[True, False], inplace=True)", "str_map": {}}
{"src": ["run", "the", "code", "contained", "in", "string", "_STR:0_"], "token": ["eval", "(", "\" _STR:0_ \"", ")"], "type": ["KEYWORD", "OP", "STRING", "OP"], "cano_code": "eval(\" _STR:0_ \")", "decano_code": "eval(\" _STR:0_ \")", "raw_code": "eval(\"print('Hello')\")", "str_map": {"print('Hello')": "_STR:0_"}}
{"src": ["creating", "a", "list", "of", "dictionaries", "[{'A'", ":", "1", ",", "_STR:0_", ":", "4", ",", "_STR:1_", ":", "2", ",", "_STR:2_", ":", "4}", ",", "{'A'", ":", "1", ",", "_STR:0_", ":", "4", ",", "_STR:1_", ":", "1", ",", "_STR:2_", ":", "5}", "]"], "token": ["[", "{", "'A'", ":", "1", ",", "\" _STR:0_ \"", ":", "4", ",", "\" _STR:1_ \"", ":", "2", ",", "\" _STR:2_ \"", ":", "4", "}", ",", "{", "'A'", ":", "1", ",", "\" _STR:0_ \"", ":", "4", ",", "\" _STR:1_ \"", ":", "1", ",", "\" _STR:2_ \"", ":", "5", "}", "]"], "type": ["OP", "OP", "STRING", "OP", "NUMBER", "OP", "STRING", "OP", "NUMBER", "OP", "STRING", "OP", "NUMBER", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "STRING", "OP", "NUMBER", "OP", "STRING", "OP", "NUMBER", "OP", "STRING", "OP", "NUMBER", "OP", "OP"], "cano_code": "[{'A': 1, \" _STR:0_ \": 4, \" _STR:1_ \": 2, \" _STR:2_ \": 4}, {'A': 1, \" _STR:0_ \": 4, \" _STR:1_ \": 1, \" _STR:2_ \": 5}]", "decano_code": "[{'A': 1, \" _STR:0_ \": 4, \" _STR:1_ \": 2, \" _STR:2_ \": 4}, {'A': 1, \" _STR:0_ \": 4, \" _STR:1_ \": 1, \" _STR:2_ \": 5}]", "raw_code": "[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]", "str_map": {"C": "_STR:0_", "B": "_STR:1_", "D": "_STR:2_"}}
{"src": ["creating", "a", "list", "of", "dictionaries", "in", "python"], "token": ["[", "{", "'A'", ":", "1", ",", "'C'", ":", "4", ",", "'B'", ":", "2", ",", "'D'", ":", "4", "}", ",", "{", "'A'", ":", "1", ",", "'C'", ":", "4", ",", "'B'", ":", "1", ",", "'D'", ":", "5", "}", "]"], "type": ["OP", "OP", "STRING", "OP", "NUMBER", "OP", "STRING", "OP", "NUMBER", "OP", "STRING", "OP", "NUMBER", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "STRING", "OP", "NUMBER", "OP", "STRING", "OP", "NUMBER", "OP", "STRING", "OP", "NUMBER", "OP", "OP"], "cano_code": "[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]", "decano_code": "[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]", "raw_code": "[{'A': 1, 'C': 4, 'B': 2, 'D': 4}, {'A': 1, 'C': 4, 'B': 1, 'D': 5}]", "str_map": {}}
{"src": ["get", "all", "possible", "combination", "of", "items", "from", "2-dimensional", "list", "a"], "token": ["list", "(", "itertools", ".", "product", "(", "*", "a", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "list(itertools.product(*a))", "decano_code": "list(itertools.product(*a))", "raw_code": "list(itertools.product(*a))", "str_map": {}}
{"src": ["get", "sum", "of", "values", "of", "columns", "_STR:0_", ",", "_STR:1_", ",", "_STR:2_", "after", "group", "by", "on", "columns", "_STR:3_", "and", "_STR:4_", "in", "dataframe", "df", "."], "token": ["df", ".", "groupby", "(", "[", "\" _STR:3_ \"", ",", "'Item_Code'", "]", ")", "[", "[", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ",", "\" _STR:2_ \"", "]", "]", ".", "sum", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "KEYWORD", "OP", "OP"], "cano_code": "df.groupby([\" _STR:3_ \", 'Item_Code'])[[\" _STR:0_ \", \" _STR:1_ \", \" _STR:2_ \"]].sum()", "decano_code": "df.groupby([\" _STR:3_ \", 'Item_Code'])[[\" _STR:0_ \", \" _STR:1_ \", \" _STR:2_ \"]].sum()", "raw_code": "df.groupby(['Country', 'Item_Code'])[['Y1961', 'Y1962', 'Y1963']].sum()", "str_map": {"Y1961": "_STR:0_", "Y1962": "_STR:1_", "Y1963": "_STR:2_", "Country": "_STR:3_", "Item_code": "_STR:4_"}}
{"src": ["create", "list", "done", "containing", "permutations", "of", "each", "element", "in", "list", "[a, b, c, d", "]", "with", "variable", "x", "as", "tuples"], "token": ["done", "=", "[", "(", "el", ",", "x", ")", "for", "el", "in", "[", "a", ",", "b", ",", "c", ",", "d", "]", "]"], "type": ["NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "done = [(el, x) for el in [a, b, c, d]]", "decano_code": "done = [(el, x) for el in [a, b, c, d]]", "raw_code": "done = [(el, x) for el in [a, b, c, d]]", "str_map": {}}
{"src": ["remove", "nan", "values", "from", "array", "x"], "token": ["x", "=", "x", "[", "numpy", ".", "logical_not", "(", "numpy", ".", "isnan", "(", "x", ")", ")", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "x = x[numpy.logical_not(numpy.isnan(x))]", "decano_code": "x = x[numpy.logical_not(numpy.isnan(x))]", "raw_code": "x = x[numpy.logical_not(numpy.isnan(x))]", "str_map": {}}
{"src": ["remove", "first", "directory", "from", "path", "_STR:0_"], "token": ["os", ".", "path", ".", "join", "(", "*", "x", ".", "split", "(", "os", ".", "path", ".", "sep", ")", "[", "2", ":", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "os.path.join(*x.split(os.path.sep)[2:])", "decano_code": "os.path.join(*x.split(os.path.sep)[2:])", "raw_code": "os.path.join(*x.split(os.path.sep)[2:])", "str_map": {"/First/Second/Third/Fourth/Fifth": "_STR:0_"}}
{"src": ["replace", ";", "with", ":", "in", "a", "string", "line"], "token": ["line", "=", "line", ".", "replace", "(", "';'", ",", "':'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "line = line.replace(';', ':')", "decano_code": "line = line.replace(';', ':')", "raw_code": "line = line.replace(';', ':')", "str_map": {}}
{"src": ["call", "bash", "command", "_STR:0_", "with", "pipe"], "token": ["subprocess", ".", "call", "(", "\" _STR:0_ \"", ",", "shell", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "subprocess.call(\" _STR:0_ \", shell=True)", "decano_code": "subprocess.call(\" _STR:0_ \", shell=True)", "raw_code": "subprocess.call('tar c my_dir | md5sum', shell=True)", "str_map": {"tar c my_dir | md5sum": "_STR:0_"}}
{"src": ["convert", "a", "hex", "string", "437c2123 ", "according", "to", "ascii", "value", "."], "token": ["\"\"\"437c2123\"\"\"", ".", "decode", "(", "'hex'", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "\"\"\"437c2123\"\"\".decode('hex')", "decano_code": "\"\"\"437c2123\"\"\".decode('hex')", "raw_code": "\"\"\"437c2123\"\"\".decode('hex')", "str_map": {}}
{"src": ["get", "a", "list", "of", "all", "fields", "in", "class", "user", "that", "are", "marked", "required"], "token": ["[", "k", "for", "k", ",", "v", "in", "User", ".", "_fields", ".", "items", "(", ")", "if", "v", ".", "required", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP"], "cano_code": "[k for k, v in User._fields.items() if v.required]", "decano_code": "[k for k, v in User._fields.items() if v.required]", "raw_code": "[k for k, v in User._fields.items() if v.required]", "str_map": {}}
{"src": ["remove", "column", "by", "index", "[:, 0:2", "]", "in", "dataframe", "df"], "token": ["df", "=", "df", ".", "ix", "[", ":", ",", "0", ":", "2", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "df = df.ix[:, 0:2]", "decano_code": "df = df.ix[:, 0:2]", "raw_code": "df = df.ix[:, 0:2]", "str_map": {}}
{"src": ["change", "a", "string", "of", "integers", "x", "separated", "by", "spaces", "to", "a", "list", "of", "int"], "token": ["x", "=", "map", "(", "int", ",", "x", ".", "split", "(", ")", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "x = map(int, x.split())", "decano_code": "x = map(int, x.split())", "raw_code": "x = map(int, x.split())", "str_map": {}}
{"src": ["convert", "a", "string", "of", "integers", "x", "separated", "by", "spaces", "to", "a", "list", "of", "integers"], "token": ["x", "=", "[", "int", "(", "i", ")", "for", "i", "in", "x", ".", "split", "(", ")", "]"], "type": ["NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "x = [int(i) for i in x.split()]", "decano_code": "x = [int(i) for i in x.split()]", "raw_code": "x = [int(i) for i in x.split()]", "str_map": {}}
{"src": ["find", "element", "by", "css", "selector", "_STR:0_"], "token": ["driver", ".", "find_element_by_css_selector", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "driver.find_element_by_css_selector(\" _STR:0_ \")", "decano_code": "driver.find_element_by_css_selector(\" _STR:0_ \")", "raw_code": "driver.find_element_by_css_selector(\"input[onclick*='1 Bedroom Deluxe']\")", "str_map": {"input[onclick*='1 Bedroom Deluxe']": "_STR:0_"}}
{"src": ["python", "/", "remove", "special", "character", "from", "string"], "token": ["re", ".", "sub", "(", "'[^a-zA-Z0-9-_*.]'", ",", "''", ",", "my_string", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.sub('[^a-zA-Z0-9-_*.]', '', my_string)", "decano_code": "re.sub('[^a-zA-Z0-9-_*.]', '', my_string)", "raw_code": "re.sub('[^a-zA-Z0-9-_*.]', '', my_string)", "str_map": {}}
{"src": ["display", "a", "pdf", "file", "that", "has", "been", "downloaded", "as", "my_pdf.pdf", "[", "my_pdf", ".", "pdf", "]"], "token": ["webbrowser", ".", "open", "(", "'file:///my_pdf.pdf'", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "STRING", "OP"], "cano_code": "webbrowser.open('file:///my_pdf.pdf')", "decano_code": "webbrowser.open('file:///my_pdf.pdf')", "raw_code": "webbrowser.open('file:///my_pdf.pdf')", "str_map": {}}
{"src": ["replace", "backslashes", "in", "string", "result", "with", "empty", "string", "_STR:0_"], "token": ["result", "=", "result", ".", "replace", "(", "'\\\\'", ",", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "result = result.replace('\\\\', \" _STR:0_ \")", "decano_code": "result = result.replace('\\\\', \" _STR:0_ \")", "raw_code": "result = result.replace('\\\\', '')", "str_map": {"": "_STR:0_"}}
{"src": ["remove", "backslashes", "from", "string", "result"], "token": ["result", ".", "replace", "(", "'\\\\'", ",", "''", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "result.replace('\\\\', '')", "decano_code": "result.replace('\\\\', '')", "raw_code": "result.replace('\\\\', '')", "str_map": {}}
{"src": ["replace", "value", "_STR:0_", "in", "any", "column", "of", "pandas", "dataframe", "to", "_STR:1_"], "token": ["df", ".", "replace", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "df.replace(\" _STR:0_ \", \" _STR:1_ \")", "decano_code": "df.replace(\" _STR:0_ \", \" _STR:1_ \")", "raw_code": "df.replace('-', 'NaN')", "str_map": {"-": "_STR:0_", "NaN": "_STR:1_"}}
{"src": ["convert", "datetime", "object", "to", "date", "object", "in", "python"], "token": ["datetime", ".", "datetime", ".", "now", "(", ")", ".", "date", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "datetime.datetime.now().date()", "decano_code": "datetime.datetime.now().date()", "raw_code": "datetime.datetime.now().date()", "str_map": {}}
{"src": ["how", "do", "i", "convert", "datetime", "to", "date", "(in", "Python)", "?"], "token": ["datetime", ".", "datetime", ".", "now", "(", ")", ".", "date", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "datetime.datetime.now().date()", "decano_code": "datetime.datetime.now().date()", "raw_code": "datetime.datetime.now().date()", "str_map": {}}
{"src": ["get", "all", "sub-elements", "of", "an", "element", "a", "in", "an", "elementtree"], "token": ["[", "elem", ".", "tag", "for", "elem", "in", "a", ".", "iter", "(", ")", "]"], "type": ["OP", "NAME", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "KEYWORD", "OP", "OP", "OP"], "cano_code": "[elem.tag for elem in a.iter()]", "decano_code": "[elem.tag for elem in a.iter()]", "raw_code": "[elem.tag for elem in a.iter()]", "str_map": {}}
{"src": ["get", "all", "sub-elements", "of", "an", "element", "tree", "a", "excluding", "the", "root", "element"], "token": ["[", "elem", ".", "tag", "for", "elem", "in", "a", ".", "iter", "(", ")", "if", "elem", "is", "not", "a", "]"], "type": ["OP", "NAME", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "KEYWORD", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "NAME", "OP"], "cano_code": "[elem.tag for elem in a.iter() if elem is not a]", "decano_code": "[elem.tag for elem in a.iter() if elem is not a]", "raw_code": "[elem.tag for elem in a.iter() if elem is not a]", "str_map": {}}
{"src": ["how", "can", "i", "split", "and", "parse", "a", "string", "in", "python", "?"], "token": ["\"\"\"2.7.0_bf4fda703454\"\"\"", ".", "split", "(", "'_'", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "\"\"\"2.7.0_bf4fda703454\"\"\".split('_')", "decano_code": "\"\"\"2.7.0_bf4fda703454\"\"\".split('_')", "raw_code": "\"\"\"2.7.0_bf4fda703454\"\"\".split('_')", "str_map": {}}
{"src": ["move", "dictionaries", "in", "list", "lst", "to", "the", "end", "of", "the", "list", "if", "value", "of", "key", "_STR:0_", "in", "each", "dictionary", "is", "not", "equal", "to", "_STR:1_"], "token": ["sorted", "(", "lst", ",", "key", "=", "lambda", "x", ":", "x", "[", "\" _STR:0_ \"", "]", "!=", "\" _STR:1_ \"", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "STRING", "OP"], "cano_code": "sorted(lst, key=lambda x: x[\" _STR:0_ \"] != \" _STR:1_ \")", "decano_code": "sorted(lst, key=lambda x: x[\" _STR:0_ \"] != \" _STR:1_ \")", "raw_code": "sorted(lst, key=lambda x: x['language'] != 'en')", "str_map": {"language": "_STR:0_", "en": "_STR:1_"}}
{"src": ["check", "if", "all", "values", "of", "a", "dictionary", "your_dict", "are", "zero", "0"], "token": ["all", "(", "value", "==", "0", "for", "value", "in", "list", "(", "your_dict", ".", "values", "(", ")", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NUMBER", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "all(value == 0 for value in list(your_dict.values()))", "decano_code": "all(value == 0 for value in list(your_dict.values()))", "raw_code": "all(value == 0 for value in list(your_dict.values()))", "str_map": {}}
{"src": ["produce", "a", "pivot", "table", "as", "dataframe", "using", "column", "_STR:0_", "in", "datafram", "df", "to", "form", "the", "axes", "of", "the", "resulting", "dataframe"], "token": ["df", ".", "pivot_table", "(", "\" _STR:0_ \"", ",", "rows", "=", "'X'", ",", "cols", "=", "'X2'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df.pivot_table(\" _STR:0_ \", rows='X', cols='X2')", "decano_code": "df.pivot_table(\" _STR:0_ \", rows='X', cols='X2')", "raw_code": "df.pivot_table('Y', rows='X', cols='X2')", "str_map": {"Y": "_STR:0_"}}
{"src": ["call", "doSomething(", ")", "in", "a", "try-except", "without", "handling", "the", "exception"], "token": ["try", ":", "\n", "    ", "doSomething", "(", ")", "\n", "", "except", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "OP", "NEWLINE", "INDENT", "NAME", "OP", "OP", "NEWLINE", "DEDENT", "KEYWORD", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "try:\n    doSomething()\nexcept:\n    pass", "decano_code": "try:\n    doSomething()\nexcept:\n    pass", "raw_code": "try:\n    doSomething()\nexcept:\n    pass", "str_map": {}}
{"src": ["call", "doSomething(", ")", "in", "a", "try-except", "without", "handling", "the", "exception"], "token": ["try", ":", "\n", "    ", "doSomething", "(", ")", "\n", "", "except", "Exception", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "OP", "NEWLINE", "INDENT", "NAME", "OP", "OP", "NEWLINE", "DEDENT", "KEYWORD", "NAME", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "try:\n    doSomething()\nexcept Exception:\n    pass", "decano_code": "try:\n    doSomething()\nexcept Exception:\n    pass", "raw_code": "try:\n    doSomething()\nexcept Exception:\n    pass", "str_map": {}}
{"src": ["get", "a", "sum", "of", "4d", "array", "m"], "token": ["M", ".", "sum", "(", "axis", "=", "0", ")", ".", "sum", "(", "axis", "=", "0", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "M.sum(axis=0).sum(axis=0)", "decano_code": "M.sum(axis=0).sum(axis=0)", "raw_code": "M.sum(axis=0).sum(axis=0)", "str_map": {}}
{"src": ["convert", "a", "datetime", "object", "dt", "to", "microtime"], "token": ["time", ".", "mktime", "(", "dt", ".", "timetuple", "(", ")", ")", "+", "dt", ".", "microsecond", "/", "1000000.0"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "NUMBER"], "cano_code": "time.mktime(dt.timetuple()) + dt.microsecond / 1000000.0", "decano_code": "time.mktime(dt.timetuple()) + dt.microsecond / 1000000.0", "raw_code": "time.mktime(dt.timetuple()) + dt.microsecond / 1000000.0", "str_map": {}}
{"src": ["select", "all", "rows", "in", "dataframe", "df", "where", "the", "values", "of", "column", "_STR:0_", "is", "bigger", "than", "or", "equal", "to", "x", "and", "smaller", "than", "or", "equal", "to", "y"], "token": ["df", "[", "(", "x", "<=", "df", "[", "\" _STR:0_ \"", "]", ")", "&", "(", "df", "[", "\" _STR:0_ \"", "]", "<=", "y", ")", "]"], "type": ["NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "df[(x <= df[\" _STR:0_ \"]) & (df[\" _STR:0_ \"] <= y)]", "decano_code": "df[(x <= df[\" _STR:0_ \"]) & (df[\" _STR:0_ \"] <= y)]", "raw_code": "df[(x <= df['columnX']) & (df['columnX'] <= y)]", "str_map": {"columnX": "_STR:0_"}}
{"src": ["sort", "a", "list", "of", "lists", "l", "by", "index", "2", "of", "the", "inner", "list"], "token": ["sorted", "(", "L", ",", "key", "=", "itemgetter", "(", "2", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "sorted(L, key=itemgetter(2))", "decano_code": "sorted(L, key=itemgetter(2))", "raw_code": "sorted(L, key=itemgetter(2))", "str_map": {}}
{"src": ["sort", "a", "list", "of", "lists", "l", "by", "index", "2", "of", "the", "inner", "list"], "token": ["l", ".", "sort", "(", "key", "=", "(", "lambda", "x", ":", "x", "[", "2", "]", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "l.sort(key=(lambda x: x[2]))", "decano_code": "l.sort(key=(lambda x: x[2]))", "raw_code": "l.sort(key=(lambda x: x[2]))", "str_map": {}}
{"src": ["sort", "list", "l", "by", "index", "2", "of", "the", "item"], "token": ["sorted", "(", "l", ",", "key", "=", "(", "lambda", "x", ":", "x", "[", "2", "]", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "sorted(l, key=(lambda x: x[2]))", "decano_code": "sorted(l, key=(lambda x: x[2]))", "raw_code": "sorted(l, key=(lambda x: x[2]))", "str_map": {}}
{"src": ["sort", "a", "list", "of", "lists", "list_to_sort", "by", "indices", "2,0,1", "of", "the", "inner", "list"], "token": ["sorted_list", "=", "sorted", "(", "list_to_sort", ",", "key", "=", "itemgetter", "(", "2", ",", "0", ",", "1", ")", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "sorted_list = sorted(list_to_sort, key=itemgetter(2, 0, 1))", "decano_code": "sorted_list = sorted(list_to_sort, key=itemgetter(2, 0, 1))", "raw_code": "sorted_list = sorted(list_to_sort, key=itemgetter(2, 0, 1))", "str_map": {}}
{"src": ["find", "rows", "of", "2d", "array", "in", "3d", "numpy", "array", "_STR:0_", "if", "the", "row", "has", "value", "_STR:1_"], "token": ["np", ".", "argwhere", "(", "np", ".", "all", "(", "arr", "==", "[", "[", "0", ",", "3", "]", ",", "[", "3", ",", "0", "]", "]", ",", "axis", "=", "(", "1", ",", "2", ")", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "np.argwhere(np.all(arr == [[0, 3], [3, 0]], axis=(1, 2)))", "decano_code": "np.argwhere(np.all(arr == [[0, 3], [3, 0]], axis=(1, 2)))", "raw_code": "np.argwhere(np.all(arr == [[0, 3], [3, 0]], axis=(1, 2)))", "str_map": {"arr": "_STR:0_", "[[0, 3], [3, 0]]": "_STR:1_"}}
{"src": ["from", "multiIndexed", "dataframe", "data", "select", "columns", "a", "and", "c", "within", "each", "higher", "order", "column", "one", "and", "two"], "token": ["data", ".", "loc", "[", ":", ",", "(", "list", "(", "itertools", ".", "product", "(", "[", "'one'", ",", "'two'", "]", ",", "[", "'a'", ",", "'c'", "]", ")", ")", ")", "]"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "OP", "OP"], "cano_code": "data.loc[:, (list(itertools.product(['one', 'two'], ['a', 'c'])))]", "decano_code": "data.loc[:, (list(itertools.product(['one', 'two'], ['a', 'c'])))]", "raw_code": "data.loc[:, (list(itertools.product(['one', 'two'], ['a', 'c'])))]", "str_map": {}}
{"src": ["select", "only", "specific", "columns", "_STR:0_", "and", "_STR:1_", "from", "a", "dataframe", "_STR:2_", "with", "multiindex", "columns"], "token": ["data", ".", "loc", "[", ":", ",", "(", "[", "(", "'one'", ",", "\" _STR:0_ \"", ")", ",", "(", "'one'", ",", "\" _STR:1_ \"", ")", ",", "(", "'two'", ",", "\" _STR:0_ \"", ")", ",", "(", "'two'", ",", "\" _STR:1_ \"", ")", "]", ")", "]"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "OP"], "cano_code": "data.loc[:, ([('one', \" _STR:0_ \"), ('one', \" _STR:1_ \"), ('two', \" _STR:0_ \"), ('two', \" _STR:1_ \")])]", "decano_code": "data.loc[:, ([('one', \" _STR:0_ \"), ('one', \" _STR:1_ \"), ('two', \" _STR:0_ \"), ('two', \" _STR:1_ \")])]", "raw_code": "data.loc[:, ([('one', 'a'), ('one', 'c'), ('two', 'a'), ('two', 'c')])]", "str_map": {"a": "_STR:0_", "c": "_STR:1_", "data": "_STR:2_"}}
{"src": ["match", "a", "sharp", ",", "followed", "by", "letters", "(including", "accent", "characters", ")", "in", "string", "str1", "using", "a", "regex"], "token": ["hashtags", "=", "re", ".", "findall", "(", "'#(\\\\w+)'", ",", "str1", ",", "re", ".", "UNICODE", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "hashtags = re.findall('#(\\\\w+)', str1, re.UNICODE)", "decano_code": "hashtags = re.findall('#(\\\\w+)', str1, re.UNICODE)", "raw_code": "hashtags = re.findall('#(\\\\w+)', str1, re.UNICODE)", "str_map": {}}
{"src": ["rename", "file", "from", "src", "to", "dst"], "token": ["os", ".", "rename", "(", "src", ",", "dst", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "os.rename(src, dst)", "decano_code": "os.rename(src, dst)", "raw_code": "os.rename(src, dst)", "str_map": {}}
{"src": ["get", "all", "texts", "and", "tags", "from", "a", "tag", "strong", "from", "etree", "tag", "some_tag", "using", "lxml"], "token": ["print", "(", "etree", ".", "tostring", "(", "some_tag", ".", "find", "(", "'strong'", ")", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "print(etree.tostring(some_tag.find('strong')))", "decano_code": "print(etree.tostring(some_tag.find('strong')))", "raw_code": "print(etree.tostring(some_tag.find('strong')))", "str_map": {}}
{"src": ["serialize", "dictionary", "data", "and", "its", "keys", "to", "a", "JSON", "formatted", "string"], "token": ["json", ".", "dumps", "(", "{", "str", "(", "k", ")", ":", "v", "for", "k", ",", "v", "in", "data", ".", "items", "(", ")", "}", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "json.dumps({str(k): v for k, v in data.items()})", "decano_code": "json.dumps({str(k): v for k, v in data.items()})", "raw_code": "json.dumps({str(k): v for k, v in data.items()})", "str_map": {}}
{"src": ["parse", "UTF-8", "encoded", "HTML", "response", "response", "to", "BeautifulSoup", "object"], "token": ["soup", "=", "BeautifulSoup", "(", "response", ".", "read", "(", ")", ".", "decode", "(", "'utf-8'", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "soup = BeautifulSoup(response.read().decode('utf-8'))", "decano_code": "soup = BeautifulSoup(response.read().decode('utf-8'))", "raw_code": "soup = BeautifulSoup(response.read().decode('utf-8'))", "str_map": {}}
{"src": ["delete", "file", "filename"], "token": ["os", ".", "remove", "(", "filename", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "os.remove(filename)", "decano_code": "os.remove(filename)", "raw_code": "os.remove(filename)", "str_map": {}}
{"src": ["get", "the", "next", "value", "greatest", "to", "2", "from", "a", "list", "of", "numbers", "num_list"], "token": ["min", "(", "[", "x", "for", "x", "in", "num_list", "if", "x", ">", "2", "]", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "min([x for x in num_list if x > 2])", "decano_code": "min([x for x in num_list if x > 2])", "raw_code": "min([x for x in num_list if x > 2])", "str_map": {}}
{"src": ["replace", "each", "value", "in", "column", "_STR:0_", "of", "dataframe", "df", "with", "string", "_STR:1_"], "token": ["df", "[", "\" _STR:0_ \"", "]", "=", "\" _STR:1_ \""], "type": ["NAME", "OP", "STRING", "OP", "OP", "STRING"], "cano_code": "df[\" _STR:0_ \"] = \" _STR:1_ \"", "decano_code": "df[\" _STR:0_ \"] = \" _STR:1_ \"", "raw_code": "df['prod_type'] = 'responsive'", "str_map": {"prod_type": "_STR:0_", "responsive": "_STR:1_"}}
{"src": ["sort", "list", "lst", "with", "positives", "coming", "before", "negatives", "with", "values", "sorted", "respectively"], "token": ["sorted", "(", "lst", ",", "key", "=", "lambda", "x", ":", "(", "x", "<", "0", ",", "x", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "NAME", "OP", "OP"], "cano_code": "sorted(lst, key=lambda x: (x < 0, x))", "decano_code": "sorted(lst, key=lambda x: (x < 0, x))", "raw_code": "sorted(lst, key=lambda x: (x < 0, x))", "str_map": {}}
{"src": ["get", "the", "date", "6", "months", "from", "today"], "token": ["six_months", "=", "(", "date", ".", "today", "(", ")", "+", "relativedelta", "(", "months", "=", "(", "+", "6", ")", ")", ")"], "type": ["NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "six_months = (date.today() + relativedelta(months=(+ 6)))", "decano_code": "six_months = (date.today() + relativedelta(months=(+ 6)))", "raw_code": "six_months = (date.today() + relativedelta(months=(+ 6)))", "str_map": {}}
{"src": ["get", "the", "date", "1", "month", "from", "today"], "token": ["(", "date", "(", "2010", ",", "12", ",", "31", ")", "+", "relativedelta", "(", "months", "=", "(", "+", "1", ")", ")", ")"], "type": ["OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "(date(2010, 12, 31) + relativedelta(months=(+ 1)))", "decano_code": "(date(2010, 12, 31) + relativedelta(months=(+ 1)))", "raw_code": "(date(2010, 12, 31) + relativedelta(months=(+ 1)))", "str_map": {}}
{"src": ["get", "the", "date", "2", "months", "from", "today"], "token": ["(", "date", "(", "2010", ",", "12", ",", "31", ")", "+", "relativedelta", "(", "months", "=", "(", "+", "2", ")", ")", ")"], "type": ["OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "(date(2010, 12, 31) + relativedelta(months=(+ 2)))", "decano_code": "(date(2010, 12, 31) + relativedelta(months=(+ 2)))", "raw_code": "(date(2010, 12, 31) + relativedelta(months=(+ 2)))", "str_map": {}}
{"src": ["calculate", "the", "date", "six", "months", "from", "the", "current", "date"], "token": ["print", "(", "(", "datetime", ".", "date", ".", "today", "(", ")", "+", "datetime", ".", "timedelta", "(", "(", "(", "6", "*", "365", ")", "/", "12", ")", ")", ")", ".", "isoformat", "(", ")", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP", "OP", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "print((datetime.date.today() + datetime.timedelta(((6 * 365) / 12))).isoformat())", "decano_code": "print((datetime.date.today() + datetime.timedelta(((6 * 365) / 12))).isoformat())", "raw_code": "print((datetime.date.today() + datetime.timedelta(((6 * 365) / 12))).isoformat())", "str_map": {}}
{"src": ["get", "a", "list", "of", "keys", "of", "dictionary", "things", "sorted", "by", "the", "value", "of", "nested", "dictionary", "key", "_STR:0_"], "token": ["sorted", "(", "list", "(", "things", ".", "keys", "(", ")", ")", ",", "key", "=", "lambda", "x", ":", "things", "[", "x", "]", "[", "\" _STR:0_ \"", "]", ",", "reverse", "=", "True", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "sorted(list(things.keys()), key=lambda x: things[x][\" _STR:0_ \"], reverse=True)", "decano_code": "sorted(list(things.keys()), key=lambda x: things[x][\" _STR:0_ \"], reverse=True)", "raw_code": "sorted(list(things.keys()), key=lambda x: things[x]['weight'], reverse=True)", "str_map": {"weight": "_STR:0_"}}
{"src": ["get", "all", "the", "values", "from", "a", "numpy", "array", "a", "excluding", "index", "3"], "token": ["a", "[", "np", ".", "arange", "(", "len", "(", "a", ")", ")", "!=", "3", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "a[np.arange(len(a)) != 3]", "decano_code": "a[np.arange(len(a)) != 3]", "raw_code": "a[np.arange(len(a)) != 3]", "str_map": {}}
{"src": ["delete", "all", "elements", "from", "a", "list", "x", "if", "a", "function", "fn", "taking", "value", "as", "parameter", "returns", "0"], "token": ["[", "x", "for", "x", "in", "lst", "if", "fn", "(", "x", ")", "!=", "0", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP"], "cano_code": "[x for x in lst if fn(x) != 0]", "decano_code": "[x for x in lst if fn(x) != 0]", "raw_code": "[x for x in lst if fn(x) != 0]", "str_map": {}}
{"src": ["set", "dataframe", "df", "index", "using", "column", "_STR:0_"], "token": ["df", ".", "set_index", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df.set_index(\" _STR:0_ \")", "decano_code": "df.set_index(\" _STR:0_ \")", "raw_code": "df.set_index('month')", "str_map": {"month": "_STR:0_"}}
{"src": ["read", "lines", "from", "a", "csv", "file", "./urls-eu.csv", "into", "a", "list", "of", "lists", "arr"], "token": ["arr", "=", "[", "line", ".", "split", "(", "','", ")", "for", "line", "in", "open", "(", "'./urls-eu.csv'", ")", "]"], "type": ["NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "STRING", "OP", "OP"], "cano_code": "arr = [line.split(',') for line in open('./urls-eu.csv')]", "decano_code": "arr = [line.split(',') for line in open('./urls-eu.csv')]", "raw_code": "arr = [line.split(',') for line in open('./urls-eu.csv')]", "str_map": {}}
{"src": ["list", "comprehension", "that", "produces", "integers", "between", "11", "and", "19"], "token": ["[", "i", "for", "i", "in", "range", "(", "100", ")", "if", "i", ">", "10", "if", "i", "<", "20", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "OP", "NUMBER", "KEYWORD", "NAME", "OP", "NUMBER", "OP"], "cano_code": "[i for i in range(100) if i > 10 if i < 20]", "decano_code": "[i for i in range(100) if i > 10 if i < 20]", "raw_code": "[i for i in range(100) if i > 10 if i < 20]", "str_map": {}}
{"src": ["get", "only", "digits", "from", "a", "string", "strs"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "[", "c", "for", "c", "in", "strs", "if", "c", ".", "isdigit", "(", ")", "]", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "\"\"\"\"\"\".join([c for c in strs if c.isdigit()])", "decano_code": "\"\"\"\"\"\".join([c for c in strs if c.isdigit()])", "raw_code": "\"\"\"\"\"\".join([c for c in strs if c.isdigit()])", "str_map": {}}
{"src": ["split", "a", "string", "yas", "based", "on", "tab", "_STR:0_"], "token": ["re", ".", "split", "(", "'\\\\t+'", ",", "yas", ".", "rstrip", "(", "\" _STR:0_ \"", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "re.split('\\\\t+', yas.rstrip(\" _STR:0_ \"))", "decano_code": "re.split('\\\\t+', yas.rstrip(\" _STR:0_ \"))", "raw_code": "re.split('\\\\t+', yas.rstrip('\\t'))", "str_map": {"\t": "_STR:0_"}}
{"src": ["scalar", "multiply", "matrix", "a", "by", "b"], "token": ["(", "a", ".", "T", "*", "b", ")", ".", "T"], "type": ["OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME"], "cano_code": "(a.T * b).T", "decano_code": "(a.T * b).T", "raw_code": "(a.T * b).T", "str_map": {}}
{"src": ["remove", "trailing", "newline", "in", "string", "_STR:0_"], "token": ["\" _STR:0_ \"", ".", "rstrip", "(", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP"], "cano_code": "\" _STR:0_ \".rstrip()", "decano_code": "\" _STR:0_ \".rstrip()", "raw_code": "'test string\\n'.rstrip()", "str_map": {"test string\n": "_STR:0_"}}
{"src": ["remove", "trailing", "newline", "in", "string", "_STR:0_"], "token": ["\" _STR:0_ \"", ".", "rstrip", "(", "'\\n'", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "\" _STR:0_ \".rstrip('\\n')", "decano_code": "\" _STR:0_ \".rstrip('\\n')", "raw_code": "'test string \\n\\n'.rstrip('\\n')", "str_map": {"test string \n\n": "_STR:0_"}}
{"src": ["remove", "newline", "in", "string", "s"], "token": ["s", ".", "strip", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "s.strip()", "decano_code": "s.strip()", "raw_code": "s.strip()", "str_map": {}}
{"src": ["remove", "newline", "in", "string", "s", "on", "the", "right", "side"], "token": ["s", ".", "rstrip", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "s.rstrip()", "decano_code": "s.rstrip()", "raw_code": "s.rstrip()", "str_map": {}}
{"src": ["remove", "newline", "in", "string", "s", "on", "the", "left", "side"], "token": ["s", ".", "lstrip", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "s.lstrip()", "decano_code": "s.lstrip()", "raw_code": "s.lstrip()", "str_map": {}}
{"src": ["remove", "newline", "in", "string", "_STR:0_"], "token": ["\" _STR:0_ \"", ".", "rstrip", "(", "'\\r\\n'", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "\" _STR:0_ \".rstrip('\\r\\n')", "decano_code": "\" _STR:0_ \".rstrip('\\r\\n')", "raw_code": "'Mac EOL\\r'.rstrip('\\r\\n')", "str_map": {"Mac EOL\r": "_STR:0_"}}
{"src": ["remove", "newline", "in", "string", "_STR:0_", "on", "the", "right", "side"], "token": ["\" _STR:0_ \"", ".", "rstrip", "(", "'\\r\\n'", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "\" _STR:0_ \".rstrip('\\r\\n')", "decano_code": "\" _STR:0_ \".rstrip('\\r\\n')", "raw_code": "'Windows EOL\\r\\n'.rstrip('\\r\\n')", "str_map": {"Windows EOL\r\n": "_STR:0_"}}
{"src": ["remove", "newline", "in", "string", "_STR:0_", "on", "the", "right", "side"], "token": ["\" _STR:0_ \"", ".", "rstrip", "(", "'\\r\\n'", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "\" _STR:0_ \".rstrip('\\r\\n')", "decano_code": "\" _STR:0_ \".rstrip('\\r\\n')", "raw_code": "'Unix EOL\\n'.rstrip('\\r\\n')", "str_map": {"Unix EOL\n": "_STR:0_"}}
{"src": ["remove", "newline", "in", "string", "_STR:0_", "on", "the", "right", "side"], "token": ["\" _STR:0_ \"", ".", "rstrip", "(", "'\\n'", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "\" _STR:0_ \".rstrip('\\n')", "decano_code": "\" _STR:0_ \".rstrip('\\n')", "raw_code": "'Hello\\n\\n\\n'.rstrip('\\n')", "str_map": {"Hello\n\n\n": "_STR:0_"}}
{"src": ["split", "string", "text", "into", "chunks", "of", "16", "characters", "each"], "token": ["re", ".", "findall", "(", "'.{,16}\\\\b'", ",", "text", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.findall('.{,16}\\\\b', text)", "decano_code": "re.findall('.{,16}\\\\b', text)", "raw_code": "re.findall('.{,16}\\\\b', text)", "str_map": {}}
{"src": ["get", "a", "list", "comprehension", "in", "list", "of", "lists", "x"], "token": ["[", "[", "X", "[", "i", "]", "[", "j", "]", "for", "j", "in", "range", "(", "len", "(", "X", "[", "i", "]", ")", ")", "]", "for", "i", "in", "range", "(", "len", "(", "X", ")", ")", "]"], "type": ["OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "[[X[i][j] for j in range(len(X[i]))] for i in range(len(X))]", "decano_code": "[[X[i][j] for j in range(len(X[i]))] for i in range(len(X))]", "raw_code": "[[X[i][j] for j in range(len(X[i]))] for i in range(len(X))]", "str_map": {}}
{"src": ["convert", "unicode", "string", "_STR:0_", "to", "byte", "string"], "token": ["\" _STR:0_ \"", ".", "encode", "(", "'latin-1'", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "\" _STR:0_ \".encode('latin-1')", "decano_code": "\" _STR:0_ \".encode('latin-1')", "raw_code": "'\\xd0\\xbc\\xd0\\xb0\\xd1\\x80\\xd0\\xba\\xd0\\xb0'.encode('latin-1')", "str_map": {"\u00d0\u00bc\u00d0\u00b0\u00d1\u0080\u00d0\u00ba\u00d0\u00b0": "_STR:0_"}}
{"src": ["split", "dataframe", "df", "where", "the", "value", "of", "column", "a", "is", "equal", "to", "_STR:0_"], "token": ["df", ".", "groupby", "(", "(", "df", ".", "a", "==", "\" _STR:0_ \"", ")", ".", "shift", "(", "1", ")", ".", "fillna", "(", "0", ")", ".", "cumsum", "(", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "df.groupby((df.a == \" _STR:0_ \").shift(1).fillna(0).cumsum())", "decano_code": "df.groupby((df.a == \" _STR:0_ \").shift(1).fillna(0).cumsum())", "raw_code": "df.groupby((df.a == 'B').shift(1).fillna(0).cumsum())", "str_map": {"B": "_STR:0_"}}
{"src": ["save", "json", "output", "from", "a", "url", "\u2018http://search.twitter.com/search.json?q=hi\u2019", "[", "\u2018http://search", ".", "twitter", ".", "com/search", ".", "json?q=hi\u2019", "]", "to", "file", "\u2018hi.json\u2019", "[", "\u2018hi", ".", "json\u2019", "]", "in", "python", "2"], "token": ["urllib", ".", "request", ".", "urlretrieve", "(", "'http://search.twitter.com/search.json?q=hi'", ",", "'hi.json'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "urllib.request.urlretrieve('http://search.twitter.com/search.json?q=hi', 'hi.json')", "decano_code": "urllib.request.urlretrieve('http://search.twitter.com/search.json?q=hi', 'hi.json')", "raw_code": "urllib.request.urlretrieve('http://search.twitter.com/search.json?q=hi', 'hi.json')", "str_map": {}}
{"src": ["find", "indices", "of", "elements", "equal", "to", "zero", "from", "numpy", "array", "x"], "token": ["numpy", ".", "where", "(", "(", "x", "==", "0", ")", ")", "[", "0", "]"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "numpy.where((x == 0))[0]", "decano_code": "numpy.where((x == 0))[0]", "raw_code": "numpy.where((x == 0))[0]", "str_map": {}}
{"src": ["flush", "output", "of", "python", "print"], "token": ["sys", ".", "stdout", ".", "flush", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "sys.stdout.flush()", "decano_code": "sys.stdout.flush()", "raw_code": "sys.stdout.flush()", "str_map": {}}
{"src": ["convert", "i", "to", "string"], "token": ["str", "(", "i", ")"], "type": ["KEYWORD", "OP", "NAME", "OP"], "cano_code": "str(i)", "decano_code": "str(i)", "raw_code": "str(i)", "str_map": {}}
{"src": ["convert", "a", "to", "string"], "token": ["a", ".", "__str__", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "a.__str__()", "decano_code": "a.__str__()", "raw_code": "a.__str__()", "str_map": {}}
{"src": ["convert", "a", "to", "string"], "token": ["str", "(", "a", ")"], "type": ["KEYWORD", "OP", "NAME", "OP"], "cano_code": "str(a)", "decano_code": "str(a)", "raw_code": "str(a)", "str_map": {}}
{"src": ["sort", "list", "of", "lists", "l", "by", "the", "second", "item", "in", "each", "list"], "token": ["L", ".", "sort", "(", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "L.sort(key=operator.itemgetter(1))", "decano_code": "L.sort(key=operator.itemgetter(1))", "raw_code": "L.sort(key=operator.itemgetter(1))", "str_map": {}}
{"src": ["print", "variable", "count", "and", "variable", "conv", "with", "space", "string", "_STR:0_", "in", "between"], "token": ["print", "(", "str", "(", "count", ")", "+", "\" _STR:0_ \"", "+", "str", "(", "conv", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "STRING", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "print(str(count) + \" _STR:0_ \" + str(conv))", "decano_code": "print(str(count) + \" _STR:0_ \" + str(conv))", "raw_code": "print(str(count) + '    ' + str(conv))", "str_map": {"    ": "_STR:0_"}}
{"src": ["change", "NaN", "values", "in", "dataframe", "df", "using", "preceding", "values", "in", "the", "frame"], "token": ["df", ".", "fillna", "(", "method", "=", "'ffill'", ",", "inplace", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df.fillna(method='ffill', inplace=True)", "decano_code": "df.fillna(method='ffill', inplace=True)", "raw_code": "df.fillna(method='ffill', inplace=True)", "str_map": {}}
{"src": ["change", "the", "state", "of", "the", "tkinter", "text", "widget", "to", "read", "only", "i.e", "[", "i", ".", "e", "]", ".", "disabled"], "token": ["text", ".", "config", "(", "state", "=", "DISABLED", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "text.config(state=DISABLED)", "decano_code": "text.config(state=DISABLED)", "raw_code": "text.config(state=DISABLED)", "str_map": {}}
{"src": ["python", "sum", "of", "ascii", "values", "of", "all", "characters", "in", "a", "string", "string"], "token": ["sum", "(", "map", "(", "ord", ",", "string", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "sum(map(ord, string))", "decano_code": "sum(map(ord, string))", "raw_code": "sum(map(ord, string))", "str_map": {}}
{"src": ["apply", "itertools.product", "[", "itertools", ".", "product", "]", "to", "elements", "of", "a", "list", "of", "lists", "arrays"], "token": ["list", "(", "itertools", ".", "product", "(", "*", "arrays", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "list(itertools.product(*arrays))", "decano_code": "list(itertools.product(*arrays))", "raw_code": "list(itertools.product(*arrays))", "str_map": {}}
{"src": ["print", "number", "value", "as", "thousands", "separators"], "token": ["'{:,}'", ".", "format", "(", "value", ")"], "type": ["STRING", "OP", "KEYWORD", "OP", "NAME", "OP"], "cano_code": "'{:,}'.format(value)", "decano_code": "'{:,}'.format(value)", "raw_code": "'{:,}'.format(value)", "str_map": {}}
{"src": ["print", "number", "1255000", "as", "thousands", "separators"], "token": ["locale", ".", "setlocale", "(", "locale", ".", "LC_ALL", ",", "'en_US'", ")", "\n", "locale", ".", "format", "(", "'%d'", ",", "1255000", ",", "grouping", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NEWLINE", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "NUMBER", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "locale.setlocale(locale.LC_ALL, 'en_US')\nlocale.format('%d', 1255000, grouping=True)", "decano_code": "locale.setlocale(locale.LC_ALL, 'en_US')\nlocale.format('%d', 1255000, grouping=True)", "raw_code": "locale.setlocale(locale.LC_ALL, 'en_US')\nlocale.format('%d', 1255000, grouping=True)", "str_map": {}}
{"src": ["get", "rows", "of", "dataframe", "df", "where", "column", "Col1", "has", "values", "['men', 'rocks', 'mountains'", "]"], "token": ["df", "[", "df", ".", "Col1", ".", "isin", "(", "[", "'men'", ",", "'rocks'", ",", "'mountains'", "]", ")", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "df[df.Col1.isin(['men', 'rocks', 'mountains'])]", "decano_code": "df[df.Col1.isin(['men', 'rocks', 'mountains'])]", "raw_code": "df[df.Col1.isin(['men', 'rocks', 'mountains'])]", "str_map": {}}
{"src": ["get", "the", "value", "at", "index", "1", "for", "each", "tuple", "in", "the", "list", "of", "tuples", "l"], "token": ["[", "x", "[", "1", "]", "for", "x", "in", "L", "]"], "type": ["OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[x[1] for x in L]", "decano_code": "[x[1] for x in L]", "raw_code": "[x[1] for x in L]", "str_map": {}}
{"src": ["split", "unicode", "string", "_STR:0_", "into", "words"], "token": ["\" _STR:0_ \"", ".", "split", "(", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP"], "cano_code": "\" _STR:0_ \".split()", "decano_code": "\" _STR:0_ \".split()", "raw_code": "'\\u0440\\u0430\\u0437 \\u0434\\u0432\\u0430 \\u0442\\u0440\\u0438'.split()", "str_map": {"\u0440\u0430\u0437 \u0434\u0432\u0430 \u0442\u0440\u0438": "_STR:0_"}}
{"src": ["sort", "query", "set", "by", "number", "of", "characters", "in", "a", "field", "length", "in", "django", "model", "MyModel"], "token": ["MyModel", ".", "objects", ".", "extra", "(", "select", "=", "{", "'length'", ":", "'Length(name)'", "}", ")", ".", "order_by", "(", "'length'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "MyModel.objects.extra(select={'length': 'Length(name)'}).order_by('length')", "decano_code": "MyModel.objects.extra(select={'length': 'Length(name)'}).order_by('length')", "raw_code": "MyModel.objects.extra(select={'length': 'Length(name)'}).order_by('length')", "str_map": {}}
{"src": ["get", "a", "dictionary", "in", "list", "dicts", "which", "key", "_STR:0_", "is", "closer", "to", "a", "global", "value", "1.77672955975", "[", "1", ".", "77672955975", "]"], "token": ["min", "(", "dicts", ",", "key", "=", "lambda", "x", ":", "(", "abs", "(", "1.77672955975", "-", "x", "[", "\" _STR:0_ \"", "]", ")", ",", "-", "x", "[", "'pixels'", "]", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP", "KEYWORD", "OP", "NUMBER", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "min(dicts, key=lambda x: (abs(1.77672955975 - x[\" _STR:0_ \"]), -x['pixels']))", "decano_code": "min(dicts, key=lambda x: (abs(1.77672955975 - x[\" _STR:0_ \"]), -x['pixels']))", "raw_code": "min(dicts, key=lambda x: (abs(1.77672955975 - x['ratio']), -x['pixels']))", "str_map": {"ratio": "_STR:0_"}}
{"src": ["get", "the", "non-masked", "values", "of", "array", "m"], "token": ["m", "[", "~", "m", ".", "mask", "]"], "type": ["NAME", "OP", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "m[~m.mask]", "decano_code": "m[~m.mask]", "raw_code": "m[~m.mask]", "str_map": {}}
{"src": ["find", "all", "words", "containing", "letters", "between", "a", "and", "z", "in", "string", "formula"], "token": ["re", ".", "findall", "(", "'\\\\b[A-Z]'", ",", "formula", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.findall('\\\\b[A-Z]', formula)", "decano_code": "re.findall('\\\\b[A-Z]', formula)", "raw_code": "re.findall('\\\\b[A-Z]', formula)", "str_map": {}}
{"src": ["create", "a", "list", "matrix", "containing", "5", "lists", ",", "each", "of", "5", "items", "all", "set", "to", "0"], "token": ["matrix", "=", "[", "(", "[", "0", "]", "*", "5", ")", "for", "i", "in", "range", "(", "5", ")", "]"], "type": ["NAME", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "OP"], "cano_code": "matrix = [([0] * 5) for i in range(5)]", "decano_code": "matrix = [([0] * 5) for i in range(5)]", "raw_code": "matrix = [([0] * 5) for i in range(5)]", "str_map": {}}
{"src": ["creating", "a", "numpy", "array", "of", "3d", "coordinates", "from", "three", "1d", "arrays", "x_p", ",", "y_p", "and", "z_p"], "token": ["np", ".", "vstack", "(", "np", ".", "meshgrid", "(", "x_p", ",", "y_p", ",", "z_p", ")", ")", ".", "reshape", "(", "3", ",", "-", "1", ")", ".", "T"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP", "NAME"], "cano_code": "np.vstack(np.meshgrid(x_p, y_p, z_p)).reshape(3, -1).T", "decano_code": "np.vstack(np.meshgrid(x_p, y_p, z_p)).reshape(3, -1).T", "raw_code": "np.vstack(np.meshgrid(x_p, y_p, z_p)).reshape(3, -1).T", "str_map": {}}
{"src": ["find", "the", "minimum", "value", "in", "a", "numpy", "array", "arr", "excluding", "0"], "token": ["arr", "[", "arr", "!=", "0", "]", ".", "min", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "KEYWORD", "OP", "OP"], "cano_code": "arr[arr != 0].min()", "decano_code": "arr[arr != 0].min()", "raw_code": "arr[arr != 0].min()", "str_map": {}}
{"src": ["get", "the", "text", "of", "multiple", "elements", "found", "by", "xpath", "_STR:0_"], "token": ["browser", ".", "find_elements_by_xpath", "(", "\" _STR:0_ \"", ")", ".", "text"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME"], "cano_code": "browser.find_elements_by_xpath(\" _STR:0_ \").text", "decano_code": "browser.find_elements_by_xpath(\" _STR:0_ \").text", "raw_code": "browser.find_elements_by_xpath(\"//*[@type='submit']/@value\").text", "str_map": {"//*[@type='submit']/@value": "_STR:0_"}}
{"src": ["find", "all", "the", "values", "in", "attribute", "value", "for", "the", "tags", "whose", "type", "attribute", "is", "submit", "in", "selenium"], "token": ["browser", ".", "find_elements_by_xpath", "(", "\"//*[@type='submit']\"", ")", ".", "get_attribute", "(", "'value'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "browser.find_elements_by_xpath(\"//*[@type='submit']\").get_attribute('value')", "decano_code": "browser.find_elements_by_xpath(\"//*[@type='submit']\").get_attribute('value')", "raw_code": "browser.find_elements_by_xpath(\"//*[@type='submit']\").get_attribute('value')", "str_map": {}}
{"src": ["parse", "a", "YAML", "file", "_STR:0_"], "token": ["with", "open", "(", "\" _STR:0_ \"", ",", "'r'", ")", "as", "stream", ":", "\n", "    ", "try", ":", "\n", "        ", "print", "(", "(", "yaml", ".", "load", "(", "stream", ")", ")", ")", "\n", "", "except", "yaml", ".", "YAMLError", "as", "exc", ":", "\n", "        ", "print", "(", "exc", ")", "", ""], "type": ["KEYWORD", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "KEYWORD", "NAME", "OP", "NEWLINE", "INDENT", "KEYWORD", "OP", "NEWLINE", "INDENT", "KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NEWLINE", "DEDENT", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NEWLINE", "INDENT", "KEYWORD", "OP", "NAME", "OP", "DEDENT", "DEDENT"], "cano_code": "with open(\" _STR:0_ \", 'r') as stream:\n    try:\n        print((yaml.load(stream)))\n    except yaml.YAMLError as exc:\n        print(exc)", "decano_code": "with open(\" _STR:0_ \", 'r') as stream:\n    try:\n        print((yaml.load(stream)))\n    except yaml.YAMLError as exc:\n        print(exc)", "raw_code": "with open('example.yaml', 'r') as stream:\n    try:\n        print((yaml.load(stream)))\n    except yaml.YAMLError as exc:\n        print(exc)", "str_map": {"example.yaml": "_STR:0_"}}
{"src": ["parse", "a", "YAML", "file", "_STR:0_"], "token": ["with", "open", "(", "\" _STR:0_ \"", ")", "as", "stream", ":", "\n", "    ", "try", ":", "\n", "        ", "print", "(", "(", "yaml", ".", "load", "(", "stream", ")", ")", ")", "\n", "", "except", "yaml", ".", "YAMLError", "as", "exc", ":", "\n", "        ", "print", "(", "exc", ")", "", ""], "type": ["KEYWORD", "KEYWORD", "OP", "STRING", "OP", "KEYWORD", "NAME", "OP", "NEWLINE", "INDENT", "KEYWORD", "OP", "NEWLINE", "INDENT", "KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NEWLINE", "DEDENT", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NEWLINE", "INDENT", "KEYWORD", "OP", "NAME", "OP", "DEDENT", "DEDENT"], "cano_code": "with open(\" _STR:0_ \") as stream:\n    try:\n        print((yaml.load(stream)))\n    except yaml.YAMLError as exc:\n        print(exc)", "decano_code": "with open(\" _STR:0_ \") as stream:\n    try:\n        print((yaml.load(stream)))\n    except yaml.YAMLError as exc:\n        print(exc)", "raw_code": "with open('example.yaml') as stream:\n    try:\n        print((yaml.load(stream)))\n    except yaml.YAMLError as exc:\n        print(exc)", "str_map": {"example.yaml": "_STR:0_"}}
{"src": ["sort", "the", "values", "of", "the", "dataframe", "df", "and", "align", "the", "columns", "accordingly", "based", "on", "the", "obtained", "indices", "after", "np.argsort", "[", "np", ".", "argsort", "]", "."], "token": ["pd", ".", "DataFrame", "(", "df", ".", "columns", "[", "np", ".", "argsort", "(", "df", ".", "values", ")", "]", ",", "df", ".", "index", ",", "np", ".", "unique", "(", "df", ".", "values", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "pd.DataFrame(df.columns[np.argsort(df.values)], df.index, np.unique(df.values))", "decano_code": "pd.DataFrame(df.columns[np.argsort(df.values)], df.index, np.unique(df.values))", "raw_code": "pd.DataFrame(df.columns[np.argsort(df.values)], df.index, np.unique(df.values))", "str_map": {}}
{"src": ["getting", "today", "'", "s", "date", "in", "YYYY-MM-DD"], "token": ["datetime", ".", "datetime", ".", "today", "(", ")", ".", "strftime", "(", "'%Y-%m-%d'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "datetime.datetime.today().strftime('%Y-%m-%d')", "decano_code": "datetime.datetime.today().strftime('%Y-%m-%d')", "raw_code": "datetime.datetime.today().strftime('%Y-%m-%d')", "str_map": {}}
{"src": ["urlencode", "a", "querystring", "_STR:0_", "in", "python", "2"], "token": ["urllib", ".", "parse", ".", "quote_plus", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "urllib.parse.quote_plus(\" _STR:0_ \")", "decano_code": "urllib.parse.quote_plus(\" _STR:0_ \")", "raw_code": "urllib.parse.quote_plus('string_of_characters_like_these:$#@=?%^Q^$')", "str_map": {"string_of_characters_like_these:$#@=?%^Q^$": "_STR:0_"}}
{"src": ["sort", "a", "dictionary", "d", "by", "length", "of", "its", "values", "and", "print", "as", "string"], "token": ["print", "(", "' '", ".", "join", "(", "sorted", "(", "d", ",", "key", "=", "lambda", "k", ":", "len", "(", "d", "[", "k", "]", ")", ",", "reverse", "=", "True", ")", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "OP", "OP", "OP"], "cano_code": "print(' '.join(sorted(d, key=lambda k: len(d[k]), reverse=True)))", "decano_code": "print(' '.join(sorted(d, key=lambda k: len(d[k]), reverse=True)))", "raw_code": "print(' '.join(sorted(d, key=lambda k: len(d[k]), reverse=True)))", "str_map": {}}
{"src": ["convert", "tuple", "elements", "in", "list", "[(1,2),(3,4),(5,6),", "]", "into", "lists"], "token": ["map", "(", "list", ",", "zip", "(", "*", "[", "(", "1", ",", "2", ")", ",", "(", "3", ",", "4", ")", ",", "(", "5", ",", "6", ")", "]", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "OP"], "cano_code": "map(list, zip(*[(1, 2), (3, 4), (5, 6)]))", "decano_code": "map(list, zip(*[(1, 2), (3, 4), (5, 6)]))", "raw_code": "map(list, zip(*[(1, 2), (3, 4), (5, 6)]))", "str_map": {}}
{"src": ["convert", "list", "of", "tuples", "to", "multiple", "lists", "in", "python"], "token": ["map", "(", "list", ",", "zip", "(", "*", "[", "(", "1", ",", "2", ")", ",", "(", "3", ",", "4", ")", ",", "(", "5", ",", "6", ")", "]", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "OP"], "cano_code": "map(list, zip(*[(1, 2), (3, 4), (5, 6)]))", "decano_code": "map(list, zip(*[(1, 2), (3, 4), (5, 6)]))", "raw_code": "map(list, zip(*[(1, 2), (3, 4), (5, 6)]))", "str_map": {}}
{"src": ["convert", "list", "of", "tuples", "to", "multiple", "lists", "in", "python"], "token": ["zip", "(", "*", "[", "(", "1", ",", "2", ")", ",", "(", "3", ",", "4", ")", ",", "(", "5", ",", "6", ")", "]", ")"], "type": ["KEYWORD", "OP", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "zip(*[(1, 2), (3, 4), (5, 6)])", "decano_code": "zip(*[(1, 2), (3, 4), (5, 6)])", "raw_code": "zip(*[(1, 2), (3, 4), (5, 6)])", "str_map": {}}
{"src": ["create", "a", "list", "of", "tuples", "which", "contains", "number", "9", "and", "the", "number", "before", "it", ",", "for", "each", "occurrence", "of", "9", "in", "the", "list", "_STR:0_"], "token": ["[", "(", "x", ",", "y", ")", "for", "x", ",", "y", "in", "zip", "(", "myList", ",", "myList", "[", "1", ":", "]", ")", "if", "y", "==", "9", "]"], "type": ["OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "KEYWORD", "NAME", "OP", "NUMBER", "OP"], "cano_code": "[(x, y) for x, y in zip(myList, myList[1:]) if y == 9]", "decano_code": "[(x, y) for x, y in zip(myList, myList[1:]) if y == 9]", "raw_code": "[(x, y) for x, y in zip(myList, myList[1:]) if y == 9]", "str_map": {"myList": "_STR:0_"}}
{"src": ["navigate", "to", "webpage", "given", "by", "url", "http://www.python.org", "[", "http://www", ".", "python", ".", "org", "]", "using", "selenium"], "token": ["driver", ".", "get", "(", "'http://www.google.com.br'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "driver.get('http://www.google.com.br')", "decano_code": "driver.get('http://www.google.com.br')", "raw_code": "driver.get('http://www.google.com.br')", "str_map": {}}
{"src": ["reverse", "a", "UTF-8", "string", "_STR:0_"], "token": ["b", "=", "a", ".", "decode", "(", "'utf8'", ")", "[", ":", ":", "-", "1", "]", ".", "encode", "(", "'utf8'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "b = a.decode('utf8')[::-1].encode('utf8')", "decano_code": "b = a.decode('utf8')[::-1].encode('utf8')", "raw_code": "b = a.decode('utf8')[::-1].encode('utf8')", "str_map": {"a": "_STR:0_"}}
{"src": ["extract", "date", "from", "a", "string", "_STR:0_"], "token": ["dparser", ".", "parse", "(", "\" _STR:0_ \"", ",", "fuzzy", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "dparser.parse(\" _STR:0_ \", fuzzy=True)", "decano_code": "dparser.parse(\" _STR:0_ \", fuzzy=True)", "raw_code": "dparser.parse('monkey 2010-07-32 love banana', fuzzy=True)", "str_map": {"monkey 2010-07-32 love banana": "_STR:0_"}}
{"src": ["extract", "date", "from", "a", "string", "_STR:0_"], "token": ["dparser", ".", "parse", "(", "\" _STR:0_ \"", ",", "fuzzy", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "dparser.parse(\" _STR:0_ \", fuzzy=True)", "decano_code": "dparser.parse(\" _STR:0_ \", fuzzy=True)", "raw_code": "dparser.parse('monkey 20/01/1980 love banana', fuzzy=True)", "str_map": {"monkey 20/01/1980 love banana": "_STR:0_"}}
{"src": ["extract", "date", "from", "a", "string", "monkey 10/01/1980 love banana"], "token": ["dparser", ".", "parse", "(", "'monkey 10/01/1980 love banana'", ",", "fuzzy", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "dparser.parse('monkey 10/01/1980 love banana', fuzzy=True)", "decano_code": "dparser.parse('monkey 10/01/1980 love banana', fuzzy=True)", "raw_code": "dparser.parse('monkey 10/01/1980 love banana', fuzzy=True)", "str_map": {}}
{"src": ["convert", "a", "list", "['A:1', 'B:2', 'C:3', 'D:4'", "]", "to", "dictionary"], "token": ["dict", "(", "map", "(", "lambda", "s", ":", "s", ".", "split", "(", "':'", ")", ",", "[", "'A:1'", ",", "'B:2'", ",", "'C:3'", ",", "'D:4'", "]", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "dict(map(lambda s: s.split(':'), ['A:1', 'B:2', 'C:3', 'D:4']))", "decano_code": "dict(map(lambda s: s.split(':'), ['A:1', 'B:2', 'C:3', 'D:4']))", "raw_code": "dict(map(lambda s: s.split(':'), ['A:1', 'B:2', 'C:3', 'D:4']))", "str_map": {}}
{"src": ["check", "if", "string", "the_string", "contains", "any", "upper", "or", "lower-case", "ASCII", "letters"], "token": ["re", ".", "search", "(", "'[a-zA-Z]'", ",", "the_string", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.search('[a-zA-Z]', the_string)", "decano_code": "re.search('[a-zA-Z]', the_string)", "raw_code": "re.search('[a-zA-Z]', the_string)", "str_map": {}}
{"src": ["convert", "a", "pandas", "df1", "groupby", "object", "to", "dataframe"], "token": ["DataFrame", "(", "{", "'count'", ":", "df1", ".", "groupby", "(", "[", "'Name'", ",", "'City'", "]", ")", ".", "size", "(", ")", "}", ")", ".", "reset_index", "(", ")"], "type": ["NAME", "OP", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "NAME", "OP", "OP", "OP", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "DataFrame({'count': df1.groupby(['Name', 'City']).size()}).reset_index()", "decano_code": "DataFrame({'count': df1.groupby(['Name', 'City']).size()}).reset_index()", "raw_code": "DataFrame({'count': df1.groupby(['Name', 'City']).size()}).reset_index()", "str_map": {}}
{"src": ["remove", "all", "non-numeric", "characters", "from", "string", "sdkjh987978asd098as0980a98sd "], "token": ["re", ".", "sub", "(", "'[^0-9]'", ",", "''", ",", "'sdkjh987978asd098as0980a98sd'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.sub('[^0-9]', '', 'sdkjh987978asd098as0980a98sd')", "decano_code": "re.sub('[^0-9]', '', 'sdkjh987978asd098as0980a98sd')", "raw_code": "re.sub('[^0-9]', '', 'sdkjh987978asd098as0980a98sd')", "str_map": {}}
{"src": ["get", "items", "from", "list", "a", "that", "don't", "appear", "in", "list", "b"], "token": ["[", "y", "for", "y", "in", "a", "if", "y", "not", "in", "b", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "NAME", "OP"], "cano_code": "[y for y in a if y not in b]", "decano_code": "[y for y in a if y not in b]", "raw_code": "[y for y in a if y not in b]", "str_map": {}}
{"src": ["extract", "the", "first", "four", "rows", "of", "the", "column", "ID", "from", "a", "pandas", "dataframe", "df"], "token": ["df", ".", "groupby", "(", "'ID'", ")", ".", "head", "(", "4", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "df.groupby('ID').head(4)", "decano_code": "df.groupby('ID').head(4)", "raw_code": "df.groupby('ID').head(4)", "str_map": {}}
{"src": ["unzip", "a", "list", "of", "tuples", "l", "into", "a", "list", "of", "lists"], "token": ["zip", "(", "*", "l", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP"], "cano_code": "zip(*l)", "decano_code": "zip(*l)", "raw_code": "zip(*l)", "str_map": {}}
{"src": ["combine", "two", "lists", "[1, 2, 3, 4", "]", "and", "['a', 'b', 'c', 'd'", "]", "into", "a", "dictionary"], "token": ["dict", "(", "zip", "(", "[", "1", ",", "2", ",", "3", ",", "4", "]", ",", "[", "'a'", ",", "'b'", ",", "'c'", ",", "'d'", "]", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "dict(zip([1, 2, 3, 4], ['a', 'b', 'c', 'd']))", "decano_code": "dict(zip([1, 2, 3, 4], ['a', 'b', 'c', 'd']))", "raw_code": "dict(zip([1, 2, 3, 4], ['a', 'b', 'c', 'd']))", "str_map": {}}
{"src": ["combine", "two", "lists", "[1, 2, 3, 4", "]", "and", "['a', 'b', 'c', 'd'", "]", "into", "a", "dictionary"], "token": ["dict", "(", "zip", "(", "[", "1", ",", "2", ",", "3", ",", "4", "]", ",", "[", "'a'", ",", "'b'", ",", "'c'", ",", "'d'", "]", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "dict(zip([1, 2, 3, 4], ['a', 'b', 'c', 'd']))", "decano_code": "dict(zip([1, 2, 3, 4], ['a', 'b', 'c', 'd']))", "raw_code": "dict(zip([1, 2, 3, 4], ['a', 'b', 'c', 'd']))", "str_map": {}}
{"src": ["retrieve", "the", "path", "from", "a", "flask", "request"], "token": ["request", ".", "url"], "type": ["NAME", "OP", "NAME"], "cano_code": "request.url", "decano_code": "request.url", "raw_code": "request.url", "str_map": {}}
{"src": ["replace", "carriage", "return", "in", "string", "somestring", "with", "empty", "string", "_STR:0_"], "token": ["somestring", ".", "replace", "(", "'\\\\r'", ",", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "somestring.replace('\\\\r', \" _STR:0_ \")", "decano_code": "somestring.replace('\\\\r', \" _STR:0_ \")", "raw_code": "somestring.replace('\\\\r', '')", "str_map": {"": "_STR:0_"}}
{"src": ["serialize", "dictionary", "d", "as", "a", "JSON", "formatted", "string", "with", "each", "key", "formatted", "to", "pattern", "_STR:0_"], "token": ["simplejson", ".", "dumps", "(", "dict", "(", "[", "(", "\" _STR:0_ \"", "%", "k", ",", "v", ")", "for", "k", ",", "v", "in", "list", "(", "d", ".", "items", "(", ")", ")", "]", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "OP", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "OP", "OP"], "cano_code": "simplejson.dumps(dict([(\" _STR:0_ \" % k, v) for k, v in list(d.items())]))", "decano_code": "simplejson.dumps(dict([(\" _STR:0_ \" % k, v) for k, v in list(d.items())]))", "raw_code": "simplejson.dumps(dict([('%d,%d' % k, v) for k, v in list(d.items())]))", "str_map": {"%d,%d": "_STR:0_"}}
{"src": ["parse", "string", "_STR:0_", "into", "datetime", "by", "format", "_STR:1_"], "token": ["datetime", ".", "strptime", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "datetime.strptime(\" _STR:0_ \", \" _STR:1_ \")", "decano_code": "datetime.strptime(\" _STR:0_ \", \" _STR:1_ \")", "raw_code": "datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')", "str_map": {"Jun 1 2005  1:33PM": "_STR:0_", "%b %d %Y %I:%M%p": "_STR:1_"}}
{"src": ["parse", "string", "_STR:0_", "into", "datetime"], "token": ["parser", ".", "parse", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "parser.parse(\" _STR:0_ \")", "decano_code": "parser.parse(\" _STR:0_ \")", "raw_code": "parser.parse('Aug 28 1999 12:00AM')", "str_map": {"Aug 28 1999 12:00AM": "_STR:0_"}}
{"src": ["get", "absolute", "folder", "path", "and", "filename", "for", "file", "existGDBPath "], "token": ["os", ".", "path", ".", "split", "(", "os", ".", "path", ".", "abspath", "(", "existGDBPath", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "os.path.split(os.path.abspath(existGDBPath))", "decano_code": "os.path.split(os.path.abspath(existGDBPath))", "raw_code": "os.path.split(os.path.abspath(existGDBPath))", "str_map": {}}
{"src": ["extract", "folder", "path", "from", "file", "path"], "token": ["os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "existGDBPath", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "os.path.dirname(os.path.abspath(existGDBPath))", "decano_code": "os.path.dirname(os.path.abspath(existGDBPath))", "raw_code": "os.path.dirname(os.path.abspath(existGDBPath))", "str_map": {}}
{"src": ["execute", "a", "post", "request", "to", "url", "http://httpbin.org/post", "[", "http://httpbin", ".", "org/post", "]", "with", "json", "data", "{'test': 'cheers'", "}"], "token": ["requests", ".", "post", "(", "'http://httpbin.org/post'", ",", "json", "=", "{", "'test'", ":", "'cheers'", "}", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "requests.post('http://httpbin.org/post', json={'test': 'cheers'})", "decano_code": "requests.post('http://httpbin.org/post', json={'test': 'cheers'})", "raw_code": "requests.post('http://httpbin.org/post', json={'test': 'cheers'})", "str_map": {}}
{"src": ["remove", "dictionary", "from", "list", "a", "if", "the", "value", "associated", "with", "its", "key", "_STR:0_", "is", "in", "list", "b"], "token": ["a", "=", "[", "x", "for", "x", "in", "a", "if", "x", "[", "\" _STR:0_ \"", "]", "not", "in", "b", "]"], "type": ["NAME", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "STRING", "OP", "KEYWORD", "KEYWORD", "NAME", "OP"], "cano_code": "a = [x for x in a if x[\" _STR:0_ \"] not in b]", "decano_code": "a = [x for x in a if x[\" _STR:0_ \"] not in b]", "raw_code": "a = [x for x in a if x['link'] not in b]", "str_map": {"link": "_STR:0_"}}
{"src": ["get", "a", "request", "parameter", "a", "in", "jinja2"], "token": ["{", "{", "request", ".", "args", ".", "get", "(", "'a'", ")", "}", "}"], "type": ["OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "{{request.args.get('a')}}", "decano_code": "{{request.args.get('a')}}", "raw_code": "{{request.args.get('a')}}", "str_map": {}}
{"src": ["create", "a", "list", "of", "integers", "between", "2", "values", "11", "and", "17"], "token": ["list", "(", "range", "(", "11", ",", "17", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "list(range(11, 17))", "decano_code": "list(range(11, 17))", "raw_code": "list(range(11, 17))", "str_map": {}}
{"src": ["change", "data", "type", "of", "data", "in", "column", "_STR:0_", "of", "dataframe", "data_df", "into", "float", "and", "then", "to", "int"], "token": ["data_df", "[", "\" _STR:0_ \"", "]", "=", "data_df", "[", "\" _STR:0_ \"", "]", ".", "astype", "(", "float", ")", ".", "astype", "(", "int", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "data_df[\" _STR:0_ \"] = data_df[\" _STR:0_ \"].astype(float).astype(int)", "decano_code": "data_df[\" _STR:0_ \"] = data_df[\" _STR:0_ \"].astype(float).astype(int)", "raw_code": "data_df['grade'] = data_df['grade'].astype(float).astype(int)", "str_map": {"grade": "_STR:0_"}}
{"src": ["find", "the", "list", "in", "a", "list", "of", "lists", "alkaline_earth_values", "with", "the", "max", "value", "of", "the", "second", "element", "."], "token": ["max", "(", "alkaline_earth_values", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "max(alkaline_earth_values, key=lambda x: x[1])", "decano_code": "max(alkaline_earth_values, key=lambda x: x[1])", "raw_code": "max(alkaline_earth_values, key=lambda x: x[1])", "str_map": {}}
{"src": ["remove", "leading", "and", "trailing", "zeros", "in", "the", "string", "_STR:0_"], "token": ["your_string", ".", "strip", "(", "'0'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "your_string.strip('0')", "decano_code": "your_string.strip('0')", "raw_code": "your_string.strip('0')", "str_map": {"your_Strip": "_STR:0_"}}
{"src": ["generate", "a", "list", "of", "all", "unique", "pairs", "of", "integers", "in", "range(9", ")"], "token": ["list", "(", "permutations", "(", "list", "(", "range", "(", "9", ")", ")", ",", "2", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "list(permutations(list(range(9)), 2))", "decano_code": "list(permutations(list(range(9)), 2))", "raw_code": "list(permutations(list(range(9)), 2))", "str_map": {}}
{"src": ["create", "a", "regular", "expression", "that", "matches", "the", "pattern", "_STR:0_", "over", "multiple", "lines", "of", "text"], "token": ["re", ".", "compile", "(", "\" _STR:0_ \"", ",", "re", ".", "MULTILINE", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "re.compile(\" _STR:0_ \", re.MULTILINE)", "decano_code": "re.compile(\" _STR:0_ \", re.MULTILINE)", "raw_code": "re.compile('^(.+)(?:\\\\n|\\\\r\\\\n?)((?:(?:\\\\n|\\\\r\\\\n?).+)+)', re.MULTILINE)", "str_map": {"^(.+)(?:\\n|\\r\\n?)((?:(?:\\n|\\r\\n?).+)+)": "_STR:0_"}}
{"src": ["regular", "expression", "_STR:0_", "matching", "a", "multiline", "block", "of", "text"], "token": ["re", ".", "compile", "(", "\" _STR:0_ \"", ",", "re", ".", "MULTILINE", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "re.compile(\" _STR:0_ \", re.MULTILINE)", "decano_code": "re.compile(\" _STR:0_ \", re.MULTILINE)", "raw_code": "re.compile('^(.+)\\\\n((?:\\\\n.+)+)', re.MULTILINE)", "str_map": {"^(.+)\\n((?:\\n.+)+)": "_STR:0_"}}
{"src": ["run", "_STR:0_", "file", "with", "python", "location", "_STR:1_", "and", "arguments", "_STR:2_", "as", "a", "subprocess"], "token": ["call", "(", "[", "\" _STR:1_ \"", ",", "\" _STR:0_ \"", ",", "\" _STR:2_ \"", "]", ")"], "type": ["NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "call([\" _STR:1_ \", \" _STR:0_ \", \" _STR:2_ \"])", "decano_code": "call([\" _STR:1_ \", \" _STR:0_ \", \" _STR:2_ \"])", "raw_code": "call(['path/to/python', 'test2.py', 'neededArgumetGoHere'])", "str_map": {"test2.py": "_STR:0_", "path/to/python": "_STR:1_", "neededArgumetGoHere": "_STR:2_"}}
{"src": ["sort", "a", "multidimensional", "list", "a", "by", "second", "and", "third", "column"], "token": ["a", ".", "sort", "(", "key", "=", "operator", ".", "itemgetter", "(", "2", ",", "3", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "a.sort(key=operator.itemgetter(2, 3))", "decano_code": "a.sort(key=operator.itemgetter(2, 3))", "raw_code": "a.sort(key=operator.itemgetter(2, 3))", "str_map": {}}
{"src": ["add", "a", "tuple", "with", "value", "another_choice", "to", "a", "tuple", "my_choices"], "token": ["final_choices", "=", "(", "(", "another_choice", ",", ")", "+", "my_choices", ")"], "type": ["NAME", "OP", "OP", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP"], "cano_code": "final_choices = ((another_choice,) + my_choices)", "decano_code": "final_choices = ((another_choice,) + my_choices)", "raw_code": "final_choices = ((another_choice,) + my_choices)", "str_map": {}}
{"src": ["add", "a", "tuple", "with", "value", "another_choice", "to", "a", "tuple", "my_choices"], "token": ["final_choices", "=", "(", "(", "another_choice", ",", ")", "+", "my_choices", ")"], "type": ["NAME", "OP", "OP", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP"], "cano_code": "final_choices = ((another_choice,) + my_choices)", "decano_code": "final_choices = ((another_choice,) + my_choices)", "raw_code": "final_choices = ((another_choice,) + my_choices)", "str_map": {}}
{"src": ["find", "the", "current", "directory"], "token": ["os", ".", "getcwd", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "os.getcwd()", "decano_code": "os.getcwd()", "raw_code": "os.getcwd()", "str_map": {}}
{"src": ["find", "the", "current", "directory"], "token": ["os", ".", "path", ".", "realpath", "(", "__file__", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "os.path.realpath(__file__)", "decano_code": "os.path.realpath(__file__)", "raw_code": "os.path.realpath(__file__)", "str_map": {}}
{"src": ["get", "the", "directory", "name", "of", "path"], "token": ["os", ".", "path", ".", "dirname", "(", "path", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "os.path.dirname(path)", "decano_code": "os.path.dirname(path)", "raw_code": "os.path.dirname(path)", "str_map": {}}
{"src": ["get", "the", "canonical", "path", "of", "file", "path"], "token": ["os", ".", "path", ".", "realpath", "(", "path", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "os.path.realpath(path)", "decano_code": "os.path.realpath(path)", "raw_code": "os.path.realpath(path)", "str_map": {}}
{"src": ["find", "name", "of", "current", "directory"], "token": ["dir_path", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "dir_path = os.path.dirname(os.path.realpath(__file__))", "decano_code": "dir_path = os.path.dirname(os.path.realpath(__file__))", "raw_code": "dir_path = os.path.dirname(os.path.realpath(__file__))", "str_map": {}}
{"src": ["find", "current", "directory"], "token": ["cwd", "=", "os", ".", "getcwd", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "cwd = os.getcwd()", "decano_code": "cwd = os.getcwd()", "raw_code": "cwd = os.getcwd()", "str_map": {}}
{"src": ["find", "the", "full", "path", "of", "current", "directory"], "token": ["full_path", "=", "os", ".", "path", ".", "realpath", "(", "__file__", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "full_path = os.path.realpath(__file__)", "decano_code": "full_path = os.path.realpath(__file__)", "raw_code": "full_path = os.path.realpath(__file__)", "str_map": {}}
{"src": ["sort", "array", "arr", "in", "ascending", "order", "by", "values", "of", "the", "3rd", "column"], "token": ["arr", "[", "arr", "[", ":", ",", "(", "2", ")", "]", ".", "argsort", "(", ")", "]"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "arr[arr[:, (2)].argsort()]", "decano_code": "arr[arr[:, (2)].argsort()]", "raw_code": "arr[arr[:, (2)].argsort()]", "str_map": {}}
{"src": ["sort", "rows", "of", "numpy", "matrix", "arr", "in", "ascending", "order", "according", "to", "all", "column", "values"], "token": ["numpy", ".", "sort", "(", "arr", ",", "axis", "=", "0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "numpy.sort(arr, axis=0)", "decano_code": "numpy.sort(arr, axis=0)", "raw_code": "numpy.sort(arr, axis=0)", "str_map": {}}
{"src": ["split", "string", "_STR:0_", "on", "space", "_STR:1_", "and", "dot", "character", "_STR:2_"], "token": ["re", ".", "split", "(", "'[ .]'", ",", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.split('[ .]', \" _STR:0_ \")", "decano_code": "re.split('[ .]', \" _STR:0_ \")", "raw_code": "re.split('[ .]', 'a b.c')", "str_map": {"a b.c": "_STR:0_", " ": "_STR:1_", ".": "_STR:2_"}}
{"src": ["copy", "the", "content", "of", "file", "_STR:0_", "to", "file", "_STR:1_"], "token": ["shutil", ".", "copy", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "shutil.copy(\" _STR:0_ \", \" _STR:1_ \")", "decano_code": "shutil.copy(\" _STR:0_ \", \" _STR:1_ \")", "raw_code": "shutil.copy('file.txt', 'file2.txt')", "str_map": {"file.txt": "_STR:0_", "file2.txt": "_STR:1_"}}
{"src": ["generate", "random", "upper-case", "ascii", "string", "of", "12", "characters", "length"], "token": ["print", "(", "''", ".", "join", "(", "choice", "(", "ascii_uppercase", ")", "for", "i", "in", "range", "(", "12", ")", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "print(''.join(choice(ascii_uppercase) for i in range(12)))", "decano_code": "print(''.join(choice(ascii_uppercase) for i in range(12)))", "raw_code": "print(''.join(choice(ascii_uppercase) for i in range(12)))", "str_map": {}}
{"src": ["merge", "the", "elements", "in", "a", "list", "lst", "sequentially"], "token": ["[", "''", ".", "join", "(", "seq", ")", "for", "seq", "in", "zip", "(", "lst", ",", "lst", "[", "1", ":", "]", ")", "]"], "type": ["OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "OP"], "cano_code": "[''.join(seq) for seq in zip(lst, lst[1:])]", "decano_code": "[''.join(seq) for seq in zip(lst, lst[1:])]", "raw_code": "[''.join(seq) for seq in zip(lst, lst[1:])]", "str_map": {}}
{"src": ["rename", "column", "_STR:0_", "in", "dataframe", "data", "to", "_STR:1_"], "token": ["data", ".", "rename", "(", "columns", "=", "{", "\" _STR:0_ \"", ":", "\" _STR:1_ \"", "}", ",", "inplace", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "data.rename(columns={\" _STR:0_ \": \" _STR:1_ \"}, inplace=True)", "decano_code": "data.rename(columns={\" _STR:0_ \": \" _STR:1_ \"}, inplace=True)", "raw_code": "data.rename(columns={'gdp': 'log(gdp)'}, inplace=True)", "str_map": {"gdp": "_STR:0_", "log(gdp)": "_STR:1_"}}
{"src": ["convert", "a", "beautiful", "soup", "html", "soup", "to", "text"], "token": ["print", "(", "soup", ".", "get_text", "(", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "print(soup.get_text())", "decano_code": "print(soup.get_text())", "raw_code": "print(soup.get_text())", "str_map": {}}
{"src": ["sort", "list", "li", "in", "descending", "order", "based", "on", "the", "second", "element", "of", "each", "list", "inside", "list`li", "`"], "token": ["sorted", "(", "li", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ",", "reverse", "=", "True", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "sorted(li, key=operator.itemgetter(1), reverse=True)", "decano_code": "sorted(li, key=operator.itemgetter(1), reverse=True)", "raw_code": "sorted(li, key=operator.itemgetter(1), reverse=True)", "str_map": {}}
{"src": ["replace", "value", "0", "with", "_STR:0_", "and", "value", "1", "with", "_STR:1_", "in", "column", "_STR:2_", "of", "dataframe", "data"], "token": ["data", "[", "\" _STR:2_ \"", "]", ".", "replace", "(", "[", "0", ",", "1", "]", ",", "[", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", "]", ",", "inplace", "=", "True", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "data[\" _STR:2_ \"].replace([0, 1], [\" _STR:0_ \", \" _STR:1_ \"], inplace=True)", "decano_code": "data[\" _STR:2_ \"].replace([0, 1], [\" _STR:0_ \", \" _STR:1_ \"], inplace=True)", "raw_code": "data['sex'].replace([0, 1], ['Female', 'Male'], inplace=True)", "str_map": {"Female": "_STR:0_", "Male": "_STR:1_", "sex": "_STR:2_"}}
{"src": ["split", "string", "_STR:0_", "on", "punctuation"], "token": ["re", ".", "split", "(", "'\\\\W+'", ",", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.split('\\\\W+', \" _STR:0_ \")", "decano_code": "re.split('\\\\W+', \" _STR:0_ \")", "raw_code": "re.split('\\\\W+', 'Words, words, words.')", "str_map": {"Words, words, words.": "_STR:0_"}}
{"src": ["extract", "first", "two", "substrings", "in", "string", "phrase", "that", "end", "in", ".", ",", "?", "or", "!"], "token": ["re", ".", "match", "(", "'(.*?[.?!](?:\\\\s+.*?[.?!]){0,1})'", ",", "phrase", ")", ".", "group", "(", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "re.match('(.*?[.?!](?:\\\\s+.*?[.?!]){0,1})', phrase).group(1)", "decano_code": "re.match('(.*?[.?!](?:\\\\s+.*?[.?!]){0,1})', phrase).group(1)", "raw_code": "re.match('(.*?[.?!](?:\\\\s+.*?[.?!]){0,1})', phrase).group(1)", "str_map": {}}
{"src": ["split", "string", "s", "into", "strings", "of", "repeating", "elements"], "token": ["print", "(", "[", "a", "for", "a", ",", "b", "in", "re", ".", "findall", "(", "'((\\\\w)\\\\2*)'", ",", "s", ")", "]", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "print([a for a, b in re.findall('((\\\\w)\\\\2*)', s)])", "decano_code": "print([a for a, b in re.findall('((\\\\w)\\\\2*)', s)])", "raw_code": "print([a for a, b in re.findall('((\\\\w)\\\\2*)', s)])", "str_map": {}}
{"src": ["create", "new", "string", "with", "unique", "characters", "from", "s", "seperated", "by", "_STR:0_"], "token": ["print", "(", "\" _STR:0_ \"", ".", "join", "(", "OrderedDict", ".", "fromkeys", "(", "s", ")", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "print(\" _STR:0_ \".join(OrderedDict.fromkeys(s)))", "decano_code": "print(\" _STR:0_ \".join(OrderedDict.fromkeys(s)))", "raw_code": "print(' '.join(OrderedDict.fromkeys(s)))", "str_map": {" ": "_STR:0_"}}
{"src": ["create", "a", "set", "from", "string", "s", "to", "remove", "duplicate", "characters"], "token": ["print", "(", "' '", ".", "join", "(", "set", "(", "s", ")", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "print(' '.join(set(s)))", "decano_code": "print(' '.join(set(s)))", "raw_code": "print(' '.join(set(s)))", "str_map": {}}
{"src": ["list", "folders", "in", "zip", "file", "_STR:0_", "that", "ends", "with", "_STR:1_"], "token": ["[", "x", "for", "x", "in", "file", ".", "namelist", "(", ")", "if", "x", ".", "endswith", "(", "\" _STR:1_ \"", ")", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "[x for x in file.namelist() if x.endswith(\" _STR:1_ \")]", "decano_code": "[x for x in file.namelist() if x.endswith(\" _STR:1_ \")]", "raw_code": "[x for x in file.namelist() if x.endswith('/')]", "str_map": {"file": "_STR:0_", "/": "_STR:1_"}}
{"src": ["find", "the", "count", "of", "a", "word", "_STR:0_", "in", "a", "string", "input_string"], "token": ["input_string", ".", "count", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "input_string.count(\" _STR:0_ \")", "decano_code": "input_string.count(\" _STR:0_ \")", "raw_code": "input_string.count('Hello')", "str_map": {"Hello": "_STR:0_"}}
{"src": ["reduce", "the", "first", "element", "of", "list", "of", "strings", "data", "to", "a", "string", ",", "separated", "by", "_STR:0_"], "token": ["print", "(", "\" _STR:0_ \"", ".", "join", "(", "[", "item", "[", "0", "]", "for", "item", "in", "data", "]", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP", "OP"], "cano_code": "print(\" _STR:0_ \".join([item[0] for item in data]))", "decano_code": "print(\" _STR:0_ \".join([item[0] for item in data]))", "raw_code": "print('.'.join([item[0] for item in data]))", "str_map": {".": "_STR:0_"}}
{"src": ["move", "the", "cursor", "of", "file", "pointer", "fh1", "at", "the", "end", "of", "the", "file", "."], "token": ["fh1", ".", "seek", "(", "2", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "fh1.seek(2)", "decano_code": "fh1.seek(2)", "raw_code": "fh1.seek(2)", "str_map": {}}
{"src": ["convert", "a", "flat", "list", "into", "a", "list", "of", "tuples", "of", "every", "two", "items", "in", "the", "list", ",", "in", "order"], "token": ["print", "(", "zip", "(", "my_list", "[", "0", ":", ":", "2", "]", ",", "my_list", "[", "1", ":", ":", "2", "]", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "print(zip(my_list[0::2], my_list[1::2]))", "decano_code": "print(zip(my_list[0::2], my_list[1::2]))", "raw_code": "print(zip(my_list[0::2], my_list[1::2]))", "str_map": {}}
{"src": ["group", "a", "list", "of", "ints", "into", "a", "list", "of", "tuples", "of", "each", "2", "elements"], "token": ["my_new_list", "=", "zip", "(", "my_list", "[", "0", ":", ":", "2", "]", ",", "my_list", "[", "1", ":", ":", "2", "]", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "my_new_list = zip(my_list[0::2], my_list[1::2])", "decano_code": "my_new_list = zip(my_list[0::2], my_list[1::2])", "raw_code": "my_new_list = zip(my_list[0::2], my_list[1::2])", "str_map": {}}
{"src": ["set", "the", "default", "encoding", "to", "_STR:0_"], "token": ["sys", ".", "setdefaultencoding", "(", "'utf8'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "sys.setdefaultencoding('utf8')", "decano_code": "sys.setdefaultencoding('utf8')", "raw_code": "sys.setdefaultencoding('utf8')", "str_map": {"utf-8": "_STR:0_"}}
{"src": ["formate", "current", "date", "and", "time", "to", "a", "string", "using", "pattern", "_STR:0_"], "token": ["datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "datetime.datetime.now().strftime(\" _STR:0_ \")", "decano_code": "datetime.datetime.now().strftime(\" _STR:0_ \")", "raw_code": "datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')", "str_map": {"%Y-%m-%d %H:%M:%S": "_STR:0_"}}
{"src": ["retrieve", "arabic", "texts", "from", "string", "my_string"], "token": ["print", "(", "re", ".", "findall", "(", "'[\\\\u0600-\\\\u06FF]+'", ",", "my_string", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP"], "cano_code": "print(re.findall('[\\\\u0600-\\\\u06FF]+', my_string))", "decano_code": "print(re.findall('[\\\\u0600-\\\\u06FF]+', my_string))", "raw_code": "print(re.findall('[\\\\u0600-\\\\u06FF]+', my_string))", "str_map": {}}
{"src": ["group", "dataframe", "df", "based", "on", "minute", "interval"], "token": ["df", ".", "groupby", "(", "df", ".", "index", ".", "map", "(", "lambda", "t", ":", "t", ".", "minute", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "df.groupby(df.index.map(lambda t: t.minute))", "decano_code": "df.groupby(df.index.map(lambda t: t.minute))", "raw_code": "df.groupby(df.index.map(lambda t: t.minute))", "str_map": {}}
{"src": ["access", "value", "associated", "with", "key", "_STR:0_", "of", "key", "_STR:1_", "from", "dictionary", "dict"], "token": ["dict", "[", "\" _STR:1_ \"", "]", "[", "\" _STR:0_ \"", "]"], "type": ["KEYWORD", "OP", "STRING", "OP", "OP", "STRING", "OP"], "cano_code": "dict[\" _STR:1_ \"][\" _STR:0_ \"]", "decano_code": "dict[\" _STR:1_ \"][\" _STR:0_ \"]", "raw_code": "dict['Apple']['American']", "str_map": {"American": "_STR:0_", "Apple": "_STR:1_"}}
{"src": ["remove", "all", "null", "values", "from", "columns", "_STR:0_", ",", "_STR:1_", "and", "_STR:2_", "of", "dataframe", "df2"], "token": ["df2", ".", "dropna", "(", "subset", "=", "[", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ",", "\" _STR:2_ \"", "]", ",", "how", "=", "'all'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df2.dropna(subset=[\" _STR:0_ \", \" _STR:1_ \", \" _STR:2_ \"], how='all')", "decano_code": "df2.dropna(subset=[\" _STR:0_ \", \" _STR:1_ \", \" _STR:2_ \"], how='all')", "raw_code": "df2.dropna(subset=['three', 'four', 'five'], how='all')", "str_map": {"three": "_STR:0_", "four": "_STR:1_", "five": "_STR:2_"}}
{"src": ["insert", "a", "list", "k", "at", "the", "front", "of", "list", "a"], "token": ["a", ".", "insert", "(", "0", ",", "k", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NAME", "OP"], "cano_code": "a.insert(0, k)", "decano_code": "a.insert(0, k)", "raw_code": "a.insert(0, k)", "str_map": {}}
{"src": ["insert", "elements", "of", "list", "k", "into", "list", "a", "at", "position", "n"], "token": ["a", "=", "a", "[", ":", "n", "]", "+", "k", "+", "a", "[", "n", ":", "]"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "a = a[:n] + k + a[n:]", "decano_code": "a = a[:n] + k + a[n:]", "raw_code": "a = a[:n] + k + a[n:]", "str_map": {}}
{"src": ["calculate", "the", "mean", "of", "the", "nonzero", "values", "'", "indices", "of", "dataframe", "df"], "token": ["np", ".", "flatnonzero", "(", "x", ")", ".", "mean", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "np.flatnonzero(x).mean()", "decano_code": "np.flatnonzero(x).mean()", "raw_code": "np.flatnonzero(x).mean()", "str_map": {}}
{"src": ["get", "date", "from", "dataframe", "df", "column", "_STR:0_", "to", "column", "_STR:1_"], "token": ["df", "[", "\" _STR:1_ \"", "]", "=", "df", "[", "\" _STR:0_ \"", "]", ".", "dt", ".", "date"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME"], "cano_code": "df[\" _STR:1_ \"] = df[\" _STR:0_ \"].dt.date", "decano_code": "df[\" _STR:1_ \"] = df[\" _STR:0_ \"].dt.date", "raw_code": "df['just_date'] = df['dates'].dt.date", "str_map": {"dates": "_STR:0_", "just_date": "_STR:1_"}}
{"src": ["remove", "elements", "in", "list", "b", "from", "list", "a"], "token": ["[", "x", "for", "x", "in", "a", "if", "x", "not", "in", "b", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "NAME", "OP"], "cano_code": "[x for x in a if x not in b]", "decano_code": "[x for x in a if x not in b]", "raw_code": "[x for x in a if x not in b]", "str_map": {}}
{"src": ["join", "elements", "of", "each", "tuple", "in", "list", "a", "into", "one", "string"], "token": ["[", "''", ".", "join", "(", "x", ")", "for", "x", "in", "a", "]"], "type": ["OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[''.join(x) for x in a]", "decano_code": "[''.join(x) for x in a]", "raw_code": "[''.join(x) for x in a]", "str_map": {}}
{"src": ["join", "items", "of", "each", "tuple", "in", "list", "of", "tuples", "a", "into", "a", "list", "of", "strings"], "token": ["list", "(", "map", "(", "''", ".", "join", ",", "a", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "list(map(''.join, a))", "decano_code": "list(map(''.join, a))", "raw_code": "list(map(''.join, a))", "str_map": {}}
{"src": ["match", "blank", "lines", "in", "s", "with", "regular", "expressions"], "token": ["re", ".", "split", "(", "'\\n\\\\s*\\n'", ",", "s", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.split('\\n\\\\s*\\n', s)", "decano_code": "re.split('\\n\\\\s*\\n', s)", "raw_code": "re.split('\\n\\\\s*\\n', s)", "str_map": {}}
{"src": ["merge", "a", "list", "of", "integers", "[1, 2, 3, 4, 5", "]", "into", "a", "single", "integer"], "token": ["from", "functools", "import", "reduce", "\n", "reduce", "(", "lambda", "x", ",", "y", ":", "10", "*", "x", "+", "y", ",", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ")"], "type": ["KEYWORD", "NAME", "KEYWORD", "NAME", "NEWLINE", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "from functools import reduce\nreduce(lambda x, y: 10 * x + y, [1, 2, 3, 4, 5])", "decano_code": "from functools import reduce\nreduce(lambda x, y: 10 * x + y, [1, 2, 3, 4, 5])", "raw_code": "from functools import reduce\nreduce(lambda x, y: 10 * x + y, [1, 2, 3, 4, 5])", "str_map": {}}
{"src": ["convert", "float", "24322.34", "[", "24322", ".", "34", "]", "to", "comma-separated", "string"], "token": ["\"\"\"{0:,.2f}\"\"\"", ".", "format", "(", "24322.34", ")"], "type": ["STRING", "OP", "KEYWORD", "OP", "NUMBER", "OP"], "cano_code": "\"\"\"{0:,.2f}\"\"\".format(24322.34)", "decano_code": "\"\"\"{0:,.2f}\"\"\".format(24322.34)", "raw_code": "\"\"\"{0:,.2f}\"\"\".format(24322.34)", "str_map": {}}
{"src": ["pass", "dictionary", "items", "data", "as", "keyword", "arguments", "in", "function", "my_function"], "token": ["my_function", "(", "**", "data", ")"], "type": ["NAME", "OP", "OP", "NAME", "OP"], "cano_code": "my_function(**data)", "decano_code": "my_function(**data)", "raw_code": "my_function(**data)", "str_map": {}}
{"src": ["get", "line", "count", "of", "file", "_STR:0_"], "token": ["sum", "(", "(", "1", "for", "line", "in", "open", "(", "\" _STR:0_ \"", ")", ")", ")"], "type": ["KEYWORD", "OP", "OP", "NUMBER", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "sum((1 for line in open(\" _STR:0_ \")))", "decano_code": "sum((1 for line in open(\" _STR:0_ \")))", "raw_code": "sum((1 for line in open('myfile.txt')))", "str_map": {"myfile.txt": "_STR:0_"}}
{"src": ["get", "line", "count", "of", "file", "filename"], "token": ["def", "bufcount", "(", "filename", ")", ":", "\n", "    ", "f", "=", "open", "(", "filename", ")", "\n", "lines", "=", "0", "\n", "buf_size", "=", "(", "1024", "*", "1024", ")", "\n", "read_f", "=", "f", ".", "read", "\n", "buf", "=", "read_f", "(", "buf_size", ")", "\n", "while", "buf", ":", "\n", "        ", "lines", "+=", "buf", ".", "count", "(", "'\\n'", ")", "\n", "buf", "=", "read_f", "(", "buf_size", ")", "\n", "", "return", "lines", ""], "type": ["KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "NEWLINE", "INDENT", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NEWLINE", "NAME", "OP", "NUMBER", "NEWLINE", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NEWLINE", "NAME", "OP", "NAME", "OP", "NAME", "NEWLINE", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NEWLINE", "KEYWORD", "NAME", "OP", "NEWLINE", "INDENT", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NEWLINE", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NEWLINE", "DEDENT", "KEYWORD", "NAME", "DEDENT"], "cano_code": "def bufcount(filename):\n    f = open(filename)\n    lines = 0\n    buf_size = (1024 * 1024)\n    read_f = f.read\n    buf = read_f(buf_size)\n    while buf:\n        lines += buf.count('\\n')\n        buf = read_f(buf_size)\n    return lines", "decano_code": "def bufcount(filename):\n    f = open(filename)\n    lines = 0\n    buf_size = (1024 * 1024)\n    read_f = f.read\n    buf = read_f(buf_size)\n    while buf:\n        lines += buf.count('\\n')\n        buf = read_f(buf_size)\n    return lines", "raw_code": "def bufcount(filename):\n    f = open(filename)\n    lines = 0\n    buf_size = (1024 * 1024)\n    read_f = f.read\n    buf = read_f(buf_size)\n    while buf:\n        lines += buf.count('\\n')\n        buf = read_f(buf_size)\n    return lines", "str_map": {}}
{"src": ["round", "1123.456789", "[", "1123", ".", "456789", "]", "to", "be", "an", "integer"], "token": ["print", "(", "round", "(", "1123.456789", ",", "-", "1", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "print(round(1123.456789, -1))", "decano_code": "print(round(1123.456789, -1))", "raw_code": "print(round(1123.456789, -1))", "str_map": {}}
{"src": ["sort", "list", "x", "based", "on", "values", "from", "another", "list", "y"], "token": ["[", "x", "for", "y", ",", "x", "in", "sorted", "(", "zip", "(", "Y", ",", "X", ")", ")", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "[x for y, x in sorted(zip(Y, X))]", "decano_code": "[x for y, x in sorted(zip(Y, X))]", "raw_code": "[x for y, x in sorted(zip(Y, X))]", "str_map": {}}
{"src": ["sorting", "list", "_STR:0_", "based", "on", "values", "from", "another", "list", "_STR:1_"], "token": ["[", "x", "for", "y", ",", "x", "in", "sorted", "(", "zip", "(", "Y", ",", "X", ")", ")", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "[x for y, x in sorted(zip(Y, X))]", "decano_code": "[x for y, x in sorted(zip(Y, X))]", "raw_code": "[x for y, x in sorted(zip(Y, X))]", "str_map": {"X": "_STR:0_", "Y": "_STR:1_"}}
{"src": ["get", "equivalent", "week", "number", "from", "a", "date", "2010/6/16", "using", "isocalendar"], "token": ["datetime", ".", "date", "(", "2010", ",", "6", ",", "16", ")", ".", "isocalendar", "(", ")", "[", "1", "]"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "datetime.date(2010, 6, 16).isocalendar()[1]", "decano_code": "datetime.date(2010, 6, 16).isocalendar()[1]", "raw_code": "datetime.date(2010, 6, 16).isocalendar()[1]", "str_map": {}}
{"src": ["select", "multiple", "ranges", "of", "columns", "1-10", ",", "15", ",", "17", ",", "and", "50-100", "in", "pandas", "dataframe", "df"], "token": ["df", ".", "iloc", "[", ":", ",", "(", "np", ".", "r_", "[", "1", ":", "10", ",", "(", "15", ")", ",", "(", "17", ")", ",", "50", ":", "100", "]", ")", "]"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "df.iloc[:, (np.r_[1:10, (15), (17), 50:100])]", "decano_code": "df.iloc[:, (np.r_[1:10, (15), (17), 50:100])]", "raw_code": "df.iloc[:, (np.r_[1:10, (15), (17), 50:100])]", "str_map": {}}
{"src": ["apply", "two", "different", "aggregating", "functions", "mean", "and", "sum", "to", "the", "same", "column", "dummy", "in", "pandas", "data", "frame", "df"], "token": ["df", ".", "groupby", "(", "'dummy'", ")", ".", "agg", "(", "{", "'returns'", ":", "[", "np", ".", "mean", ",", "np", ".", "sum", "]", "}", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "OP", "OP"], "cano_code": "df.groupby('dummy').agg({'returns': [np.mean, np.sum]})", "decano_code": "df.groupby('dummy').agg({'returns': [np.mean, np.sum]})", "raw_code": "df.groupby('dummy').agg({'returns': [np.mean, np.sum]})", "str_map": {}}
{"src": ["convert", "string", "s", "to", "lowercase"], "token": ["s", ".", "lower", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "s.lower()", "decano_code": "s.lower()", "raw_code": "s.lower()", "str_map": {}}
{"src": ["convert", "utf-8", "string", "s", "to", "lowercase"], "token": ["s", ".", "decode", "(", "'utf-8'", ")", ".", "lower", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "s.decode('utf-8').lower()", "decano_code": "s.decode('utf-8').lower()", "raw_code": "s.decode('utf-8').lower()", "str_map": {}}
{"src": ["how", "to", "download", "a", "file", "via", "FTP", "with", "python", "ftplib"], "token": ["ftp", ".", "retrbinary", "(", "'RETR %s'", "%", "filename", ",", "file", ".", "write", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "ftp.retrbinary('RETR %s' % filename, file.write)", "decano_code": "ftp.retrbinary('RETR %s' % filename, file.write)", "raw_code": "ftp.retrbinary('RETR %s' % filename, file.write)", "str_map": {}}
{"src": ["handle", "the", "urlfetch_errors ", "exception", "for", "imaplib", "request", "to", "url", "url"], "token": ["urlfetch", ".", "fetch", "(", "url", ",", "deadline", "=", "10", "*", "60", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "urlfetch.fetch(url, deadline=10 * 60)", "decano_code": "urlfetch.fetch(url, deadline=10 * 60)", "raw_code": "urlfetch.fetch(url, deadline=10 * 60)", "str_map": {}}
{"src": ["output", "first", "100", "characters", "in", "a", "string", "my_string"], "token": ["print", "(", "my_string", "[", "0", ":", "100", "]", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "print(my_string[0:100])", "decano_code": "print(my_string[0:100])", "raw_code": "print(my_string[0:100])", "str_map": {}}
{"src": ["make", "matplotlib", "plot", "legend", "put", "marker", "in", "legend", "only", "once"], "token": ["legend", "(", "numpoints", "=", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "legend(numpoints=1)", "decano_code": "legend(numpoints=1)", "raw_code": "legend(numpoints=1)", "str_map": {}}
{"src": ["get", "set", "intersection", "between", "dictionaries", "d1", "and", "d2"], "token": ["dict", "(", "(", "x", ",", "set", "(", "y", ")", "&", "set", "(", "d1", ".", "get", "(", "x", ",", "(", ")", ")", ")", ")", "for", "x", ",", "y", "in", "d2", ".", "items", "(", ")", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "OP", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "dict((x, set(y) & set(d1.get(x, ()))) for x, y in d2.items())", "decano_code": "dict((x, set(y) & set(d1.get(x, ()))) for x, y in d2.items())", "raw_code": "dict((x, set(y) & set(d1.get(x, ()))) for x, y in d2.items())", "str_map": {}}
{"src": ["convert", "csv", "file", "_STR:0_", "into", "two-dimensional", "matrix"], "token": ["numpy", ".", "loadtxt", "(", "open", "(", "\" _STR:0_ \"", ",", "'rb'", ")", ",", "delimiter", "=", "','", ",", "skiprows", "=", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "numpy.loadtxt(open(\" _STR:0_ \", 'rb'), delimiter=',', skiprows=1)", "decano_code": "numpy.loadtxt(open(\" _STR:0_ \", 'rb'), delimiter=',', skiprows=1)", "raw_code": "numpy.loadtxt(open('test.csv', 'rb'), delimiter=',', skiprows=1)", "str_map": {"test.csv": "_STR:0_"}}
{"src": ["filter", "the", "objects", "in", "django", "model", "_STR:0_", "between", "date", "range", "2011-01-01", "and", "2011-01-31"], "token": ["Sample", ".", "objects", ".", "filter", "(", "date__range", "=", "[", "'2011-01-01'", ",", "'2011-01-31'", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "Sample.objects.filter(date__range=['2011-01-01', '2011-01-31'])", "decano_code": "Sample.objects.filter(date__range=['2011-01-01', '2011-01-31'])", "raw_code": "Sample.objects.filter(date__range=['2011-01-01', '2011-01-31'])", "str_map": {"Sample": "_STR:0_"}}
{"src": ["filter", "objects", "month", "wise", "in", "django", "model", "sample", "for", "year", "2011"], "token": ["Sample", ".", "objects", ".", "filter", "(", "date__year", "=", "'2011'", ",", "date__month", "=", "'01'", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "Sample.objects.filter(date__year='2011', date__month='01')", "decano_code": "Sample.objects.filter(date__year='2011', date__month='01')", "raw_code": "Sample.objects.filter(date__year='2011', date__month='01')", "str_map": {}}
{"src": ["create", "a", "dictionary", "{'spam': 5, 'ham': 6", "}", "into", "another", "dictionary", "d", "field", "_STR:0_"], "token": ["d", "[", "\" _STR:0_ \"", "]", "=", "{", "'spam'", ":", "5", ",", "'ham'", ":", "6", "}"], "type": ["NAME", "OP", "STRING", "OP", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "STRING", "OP", "NUMBER", "OP"], "cano_code": "d[\" _STR:0_ \"] = {'spam': 5, 'ham': 6}", "decano_code": "d[\" _STR:0_ \"] = {'spam': 5, 'ham': 6}", "raw_code": "d['dict3'] = {'spam': 5, 'ham': 6}", "str_map": {"dict3": "_STR:0_"}}
{"src": ["apply", "numpy.linalg.norm", "[", "numpy", ".", "linalg", ".", "norm", "]", "to", "each", "row", "of", "a", "matrix", "a"], "token": ["numpy", ".", "apply_along_axis", "(", "numpy", ".", "linalg", ".", "norm", ",", "1", ",", "a", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NAME", "OP"], "cano_code": "numpy.apply_along_axis(numpy.linalg.norm, 1, a)", "decano_code": "numpy.apply_along_axis(numpy.linalg.norm, 1, a)", "raw_code": "numpy.apply_along_axis(numpy.linalg.norm, 1, a)", "str_map": {}}
{"src": ["merge", "dictionaries", "form", "array", "dicts", "in", "a", "single", "expression"], "token": ["dict", "(", "(", "k", ",", "v", ")", "for", "d", "in", "dicts", "for", "k", ",", "v", "in", "list", "(", "d", ".", "items", "(", ")", ")", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "dict((k, v) for d in dicts for k, v in list(d.items()))", "decano_code": "dict((k, v) for d in dicts for k, v in list(d.items()))", "raw_code": "dict((k, v) for d in dicts for k, v in list(d.items()))", "str_map": {}}
{"src": ["convert", "escaped", "utf", "string", "to", "utf", "string", "in", "your string"], "token": ["print", "(", "'your string'", ".", "decode", "(", "'string_escape'", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "print('your string'.decode('string_escape'))", "decano_code": "print('your string'.decode('string_escape'))", "raw_code": "print('your string'.decode('string_escape'))", "str_map": {}}
{"src": ["counting", "the", "number", "of", "true", "booleans", "in", "a", "python", "list", "[True, True, False, False, False, True", "]"], "token": ["sum", "(", "[", "True", ",", "True", ",", "False", ",", "False", ",", "False", ",", "True", "]", ")"], "type": ["KEYWORD", "OP", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "OP"], "cano_code": "sum([True, True, False, False, False, True])", "decano_code": "sum([True, True, False, False, False, True])", "raw_code": "sum([True, True, False, False, False, True])", "str_map": {}}
{"src": ["set", "the", "size", "of", "figure", "fig", "in", "inches", "to", "width", "height", "of", "w", ",", "h"], "token": ["fig", ".", "set_size_inches", "(", "w", ",", "h", ",", "forward", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "fig.set_size_inches(w, h, forward=True)", "decano_code": "fig.set_size_inches(w, h, forward=True)", "raw_code": "fig.set_size_inches(w, h, forward=True)", "str_map": {}}
{"src": ["format", "string", "with", "dict", "{'5': 'you'", "}", "with", "integer", "keys"], "token": ["'hello there %(5)s'", "%", "{", "'5'", ":", "'you'", "}"], "type": ["STRING", "OP", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "'hello there %(5)s' % {'5': 'you'}", "decano_code": "'hello there %(5)s' % {'5': 'you'}", "raw_code": "'hello there %(5)s' % {'5': 'you'}", "str_map": {}}
{"src": ["convert", "a", "string", "of", "numbers", "example_string", "separated", "by", ",", "into", "a", "list", "of", "integers"], "token": ["map", "(", "int", ",", "example_string", ".", "split", "(", "','", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "map(int, example_string.split(','))", "decano_code": "map(int, example_string.split(','))", "raw_code": "map(int, example_string.split(','))", "str_map": {}}
{"src": ["convert", "a", "string", "of", "numbers", "_STR:0_", "separated", "by", "comma", "into", "a", "list", "of", "numbers"], "token": ["[", "int", "(", "s", ")", "for", "s", "in", "example_string", ".", "split", "(", "','", ")", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "[int(s) for s in example_string.split(',')]", "decano_code": "[int(s) for s in example_string.split(',')]", "raw_code": "[int(s) for s in example_string.split(',')]", "str_map": {"example_string": "_STR:0_"}}
{"src": ["flatten", "list", "x"], "token": ["x", "=", "[", "i", "[", "0", "]", "for", "i", "in", "x", "]"], "type": ["NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "x = [i[0] for i in x]", "decano_code": "x = [i[0] for i in x]", "raw_code": "x = [i[0] for i in x]", "str_map": {}}
{"src": ["convert", "list", "x", "into", "a", "flat", "list"], "token": ["y", "=", "map", "(", "operator", ".", "itemgetter", "(", "0", ")", ",", "x", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP"], "cano_code": "y = map(operator.itemgetter(0), x)", "decano_code": "y = map(operator.itemgetter(0), x)", "raw_code": "y = map(operator.itemgetter(0), x)", "str_map": {}}
{"src": ["get", "a", "list", "y", "of", "the", "first", "element", "of", "every", "tuple", "in", "list", "x"], "token": ["y", "=", "[", "i", "[", "0", "]", "for", "i", "in", "x", "]"], "type": ["NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "y = [i[0] for i in x]", "decano_code": "y = [i[0] for i in x]", "raw_code": "y = [i[0] for i in x]", "str_map": {}}
{"src": ["extract", "all", "the", "values", "of", "a", "specific", "key", "named", "_STR:0_", "from", "a", "list", "of", "dictionaries"], "token": ["results", "=", "[", "item", "[", "'value'", "]", "for", "item", "in", "test_data", "]"], "type": ["NAME", "OP", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "results = [item['value'] for item in test_data]", "decano_code": "results = [item['value'] for item in test_data]", "raw_code": "results = [item['value'] for item in test_data]", "str_map": {"values": "_STR:0_"}}
{"src": ["get", "current", "datetime", "in", "ISO", "format"], "token": ["datetime", ".", "datetime", ".", "now", "(", ")", ".", "isoformat", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "datetime.datetime.now().isoformat()", "decano_code": "datetime.datetime.now().isoformat()", "raw_code": "datetime.datetime.now().isoformat()", "str_map": {}}
{"src": ["get", "UTC", "datetime", "in", "ISO", "format"], "token": ["datetime", ".", "datetime", ".", "utcnow", "(", ")", ".", "isoformat", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "datetime.datetime.utcnow().isoformat()", "decano_code": "datetime.datetime.utcnow().isoformat()", "raw_code": "datetime.datetime.utcnow().isoformat()", "str_map": {}}
{"src": ["merge", "all", "columns", "in", "dataframe", "df", "into", "one", "column"], "token": ["df", ".", "apply", "(", "' '", ".", "join", ",", "axis", "=", "0", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "df.apply(' '.join, axis=0)", "decano_code": "df.apply(' '.join, axis=0)", "raw_code": "df.apply(' '.join, axis=0)", "str_map": {}}
{"src": ["pandas", "subtract", "a", "row", "from", "dataframe", "df2", "from", "dataframe", "df"], "token": ["pd", ".", "DataFrame", "(", "df", ".", "values", "-", "df2", ".", "values", ",", "columns", "=", "df", ".", "columns", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "pd.DataFrame(df.values - df2.values, columns=df.columns)", "decano_code": "pd.DataFrame(df.values - df2.values, columns=df.columns)", "raw_code": "pd.DataFrame(df.values - df2.values, columns=df.columns)", "str_map": {}}
{"src": ["read", "file", "_STR:0_", "using", "universal", "newline", "mode", "_STR:1_"], "token": ["print", "(", "open", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")", ".", "read", "(", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "print(open(\" _STR:0_ \", \" _STR:1_ \").read())", "decano_code": "print(open(\" _STR:0_ \", \" _STR:1_ \").read())", "raw_code": "print(open('myfile.txt', 'U').read())", "str_map": {"myfile.txt": "_STR:0_", "U": "_STR:1_"}}
{"src": ["print", "line", "line", "from", "text", "file", "with", "_STR:0_", "format"], "token": ["print", "(", "line", ".", "decode", "(", "\" _STR:0_ \"", ")", ".", "split", "(", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "print(line.decode(\" _STR:0_ \").split())", "decano_code": "print(line.decode(\" _STR:0_ \").split())", "raw_code": "print(line.decode('utf-16-le').split())", "str_map": {"utf-16-le": "_STR:0_"}}
{"src": ["open", "a", "text", "file", "data.txt", "[", "data", ".", "txt", "]", "in", "io", "module", "with", "encoding", "utf-16-le"], "token": ["file", "=", "io", ".", "open", "(", "'data.txt'", ",", "'r'", ",", "encoding", "=", "'utf-16-le'", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "file = io.open('data.txt', 'r', encoding='utf-16-le')", "decano_code": "file = io.open('data.txt', 'r', encoding='utf-16-le')", "raw_code": "file = io.open('data.txt', 'r', encoding='utf-16-le')", "str_map": {}}
{"src": ["join", "data", "of", "dataframe", "df1", "with", "data", "in", "dataframe", "df2", "based", "on", "similar", "values", "of", "column", "_STR:0_", "in", "both", "dataframes"], "token": ["s1", "=", "pd", ".", "merge", "(", "df1", ",", "df2", ",", "how", "=", "'inner'", ",", "on", "=", "[", "\" _STR:0_ \"", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP", "STRING", "OP", "OP"], "cano_code": "s1 = pd.merge(df1, df2, how='inner', on=[\" _STR:0_ \"])", "decano_code": "s1 = pd.merge(df1, df2, how='inner', on=[\" _STR:0_ \"])", "raw_code": "s1 = pd.merge(df1, df2, how='inner', on=['user_id'])", "str_map": {"user_id": "_STR:0_"}}
{"src": ["check", "if", "string", "foo", "is", "UTF-8", "encoded"], "token": ["foo", ".", "decode", "(", "'utf8'", ")", ".", "encode", "(", "'utf8'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "foo.decode('utf8').encode('utf8')", "decano_code": "foo.decode('utf8').encode('utf8')", "raw_code": "foo.decode('utf8').encode('utf8')", "str_map": {}}
{"src": ["get", "the", "dimensions", "of", "numpy", "array", "a"], "token": ["a", ".", "shape"], "type": ["NAME", "OP", "NAME"], "cano_code": "a.shape", "decano_code": "a.shape", "raw_code": "a.shape", "str_map": {}}
{"src": ["get", "the", "dimensions", "of", "numpy", "array", "a"], "token": ["N", ".", "shape", "(", "a", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "N.shape(a)", "decano_code": "N.shape(a)", "raw_code": "N.shape(a)", "str_map": {}}
{"src": ["get", "the", "dimensions", "of", "array", "a"], "token": ["N", ".", "shape", "(", "a", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "N.shape(a)", "decano_code": "N.shape(a)", "raw_code": "N.shape(a)", "str_map": {}}
{"src": ["get", "the", "dimensions", "of", "numpy", "array", "a"], "token": ["a", ".", "shape"], "type": ["NAME", "OP", "NAME"], "cano_code": "a.shape", "decano_code": "a.shape", "raw_code": "a.shape", "str_map": {}}
{"src": ["get", "the", "indices", "of", "tuples", "in", "list", "of", "tuples", "l", "where", "the", "first", "value", "is", "53"], "token": ["[", "i", "for", "i", ",", "v", "in", "enumerate", "(", "L", ")", "if", "v", "[", "0", "]", "==", "53", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP"], "cano_code": "[i for i, v in enumerate(L) if v[0] == 53]", "decano_code": "[i for i, v in enumerate(L) if v[0] == 53]", "raw_code": "[i for i, v in enumerate(L) if v[0] == 53]", "str_map": {}}
{"src": ["convert", "string", "of", "bytes", "y\\xcc\\xa6\\xbb", "into", "an", "int"], "token": ["struct", ".", "unpack", "(", "'<L'", ",", "'y\\xcc\\xa6\\xbb'", ")", "[", "0", "]"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP", "NUMBER", "OP"], "cano_code": "struct.unpack('<L', 'y\\xcc\\xa6\\xbb')[0]", "decano_code": "struct.unpack('<L', 'y\\xcc\\xa6\\xbb')[0]", "raw_code": "struct.unpack('<L', 'y\\xcc\\xa6\\xbb')[0]", "str_map": {}}
{"src": ["get", "the", "first", "row", ",", "second", "column", ";", "second", "row", ",", "first", "column", ",", "and", "first", "row", "third", "column", "values", "of", "numpy", "array", "arr"], "token": ["arr", "[", "[", "0", ",", "1", ",", "1", "]", ",", "[", "1", ",", "0", ",", "2", "]", "]"], "type": ["NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "arr[[0, 1, 1], [1, 0, 2]]", "decano_code": "arr[[0, 1, 1], [1, 0, 2]]", "raw_code": "arr[[0, 1, 1], [1, 0, 2]]", "str_map": {}}
{"src": ["create", "a", "list", "with", "permutations", "of", "string", "_STR:0_"], "token": ["list", "(", "powerset", "(", "\" _STR:0_ \"", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "list(powerset(\" _STR:0_ \"))", "decano_code": "list(powerset(\" _STR:0_ \"))", "raw_code": "list(powerset('abcd'))", "str_map": {"abcd": "_STR:0_"}}
{"src": ["convert", "string", "to", "boolean", "from", "defined", "set", "of", "strings"], "token": ["s", "in", "[", "'true'", ",", "'1'", ",", "'t'", ",", "'y'", ",", "'yes'", ",", "'yeah'", ",", "'yup'", ",", "'certainly'", ",", "'uh-huh'", "]"], "type": ["NAME", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "s in ['true', '1', 't', 'y', 'yes', 'yeah', 'yup', 'certainly', 'uh-huh']", "decano_code": "s in ['true', '1', 't', 'y', 'yes', 'yeah', 'yup', 'certainly', 'uh-huh']", "raw_code": "s in ['true', '1', 't', 'y', 'yes', 'yeah', 'yup', 'certainly', 'uh-huh']", "str_map": {}}
{"src": ["replace", "special", "characters", "in", "url", "_STR:0_", "using", "the", "_STR:1_", "escape"], "token": ["urllib", ".", "parse", ".", "quote", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "urllib.parse.quote(\" _STR:0_ \")", "decano_code": "urllib.parse.quote(\" _STR:0_ \")", "raw_code": "urllib.parse.quote('http://spam.com/go/')", "str_map": {"http://spam.com/go/": "_STR:0_", "%xx": "_STR:1_"}}
{"src": ["save", "plot", "plt", "as", "svg", "file", "_STR:0_"], "token": ["plt", ".", "savefig", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "plt.savefig(\" _STR:0_ \")", "decano_code": "plt.savefig(\" _STR:0_ \")", "raw_code": "plt.savefig('test.svg')", "str_map": {"test.svg": "_STR:0_"}}
{"src": ["count", "the", "number", "of", "elements", "in", "array", "myArray"], "token": ["len", "(", "myArray", ")"], "type": ["KEYWORD", "OP", "NAME", "OP"], "cano_code": "len(myArray)", "decano_code": "len(myArray)", "raw_code": "len(myArray)", "str_map": {}}
{"src": ["insert", "directory", "_STR:0_", "to", "current", "directory"], "token": ["sys", ".", "path", ".", "insert", "(", "0", ",", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "STRING", "OP"], "cano_code": "sys.path.insert(0, \" _STR:0_ \")", "decano_code": "sys.path.insert(0, \" _STR:0_ \")", "raw_code": "sys.path.insert(0, './path/to/your/modules/')", "str_map": {"./path/to/your/modules/": "_STR:0_"}}
{"src": ["how", "to", "plot", "with", "x-axis", "at", "the", "top", "of", "the", "figure", "?"], "token": ["ax", ".", "xaxis", ".", "set_ticks_position", "(", "'top'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "ax.xaxis.set_ticks_position('top')", "decano_code": "ax.xaxis.set_ticks_position('top')", "raw_code": "ax.xaxis.set_ticks_position('top')", "str_map": {}}
{"src": ["insert", "records", "in", "bulk", "from", "_STR:0_", "of", "_STR:1_", "DB", "to", "_STR:0_", "of", "sqlite3", "cursor", "object"], "token": ["cursor", ".", "execute", "(", "'INSERT OR REPLACE INTO master.table1 SELECT * FROM table1'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "cursor.execute('INSERT OR REPLACE INTO master.table1 SELECT * FROM table1')", "decano_code": "cursor.execute('INSERT OR REPLACE INTO master.table1 SELECT * FROM table1')", "raw_code": "cursor.execute('INSERT OR REPLACE INTO master.table1 SELECT * FROM table1')", "str_map": {"table1": "_STR:0_", "master": "_STR:1_"}}
{"src": ["match", "regex", "_STR:0_", "on", "string", "_STR:1_"], "token": ["re", ".", "match", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.match(\" _STR:0_ \", \" _STR:1_ \")", "decano_code": "re.match(\" _STR:0_ \", \" _STR:1_ \")", "raw_code": "re.match('[a-zA-Z][\\\\w-]*\\\\Z', 'A\\n')", "str_map": {"[a-zA-Z][\\w-]*\\Z": "_STR:0_", "A\n": "_STR:1_"}}
{"src": ["match", "regex", "_STR:0_", "on", "string", "_STR:1_"], "token": ["re", ".", "match", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.match(\" _STR:0_ \", \" _STR:1_ \")", "decano_code": "re.match(\" _STR:0_ \", \" _STR:1_ \")", "raw_code": "re.match('[a-zA-Z][\\\\w-]*$', '!A_B')", "str_map": {"[a-zA-Z][\\w-]*$": "_STR:0_", "!A_B": "_STR:1_"}}
{"src": ["convert", "hex", "string", "_STR:0_", "to", "integer"], "token": ["int", "(", "\" _STR:0_ \"", ",", "16", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NUMBER", "OP"], "cano_code": "int(\" _STR:0_ \", 16)", "decano_code": "int(\" _STR:0_ \", 16)", "raw_code": "int('deadbeef', 16)", "str_map": {"deadbeef": "_STR:0_"}}
{"src": ["convert", "hex", "string", "_STR:0_", "to", "integer"], "token": ["int", "(", "\" _STR:0_ \"", ",", "16", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NUMBER", "OP"], "cano_code": "int(\" _STR:0_ \", 16)", "decano_code": "int(\" _STR:0_ \", 16)", "raw_code": "int('a', 16)", "str_map": {"a": "_STR:0_"}}
{"src": ["convert", "hex", "string", "_STR:0_", "to", "integer"], "token": ["int", "(", "\" _STR:0_ \"", ",", "16", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NUMBER", "OP"], "cano_code": "int(\" _STR:0_ \", 16)", "decano_code": "int(\" _STR:0_ \", 16)", "raw_code": "int('0xa', 16)", "str_map": {"0xa": "_STR:0_"}}
{"src": ["convert", "hex", "string", "s", "to", "integer"], "token": ["int", "(", "s", ",", "16", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "int(s, 16)", "decano_code": "int(s, 16)", "raw_code": "int(s, 16)", "str_map": {}}
{"src": ["convert", "hex", "string", "hexString", "to", "int"], "token": ["int", "(", "hexString", ",", "16", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "int(hexString, 16)", "decano_code": "int(hexString, 16)", "raw_code": "int(hexString, 16)", "str_map": {}}
{"src": ["print", "variable", "value ", "without", "spaces"], "token": ["print", "(", "'Value is \"'", "+", "str", "(", "value", ")", "+", "'\"'", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "STRING", "OP"], "cano_code": "print('Value is \"' + str(value) + '\"')", "decano_code": "print('Value is \"' + str(value) + '\"')", "raw_code": "print('Value is \"' + str(value) + '\"')", "str_map": {}}
{"src": ["print", "a", "string", "value", "with", "string", "formatting"], "token": ["print", "(", "'Value is \"{}\"'", ".", "format", "(", "value", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "print('Value is \"{}\"'.format(value))", "decano_code": "print('Value is \"{}\"'.format(value))", "raw_code": "print('Value is \"{}\"'.format(value))", "str_map": {}}
{"src": ["jinja", "join", "elements", "of", "array", "tags", "with", "space", "string", "_STR:0_"], "token": ["{", "{", "tags", "|", "join", "(", "\" _STR:0_ \"", ")", "}", "}"], "type": ["OP", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "{{tags | join(\" _STR:0_ \")}}", "decano_code": "{{tags | join(\" _STR:0_ \")}}", "raw_code": "{{tags | join(' ')}}", "str_map": {" ": "_STR:0_"}}
{"src": ["get", "a", "list", "of", "locally", "installed", "python", "modules"], "token": ["help", "(", "'modules'", ")"], "type": ["KEYWORD", "OP", "STRING", "OP"], "cano_code": "help('modules')", "decano_code": "help('modules')", "raw_code": "help('modules')", "str_map": {}}
{"src": ["get", "only", "first", "element", "in", "each", "of", "the", "innermost", "of", "the", "multidimensional", "list", "listD"], "token": ["[", "[", "[", "x", "[", "0", "]", "]", "for", "x", "in", "listD", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "listD", ")", ")", "]"], "type": ["OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "[[[x[0]] for x in listD[i]] for i in range(len(listD))]", "decano_code": "[[[x[0]] for x in listD[i]] for i in range(len(listD))]", "raw_code": "[[[x[0]] for x in listD[i]] for i in range(len(listD))]", "str_map": {}}
{"src": ["sort", "a", "string", "s", "in", "lexicographic", "order"], "token": ["sorted", "(", "s", ",", "key", "=", "str", ".", "upper", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP"], "cano_code": "sorted(s, key=str.upper)", "decano_code": "sorted(s, key=str.upper)", "raw_code": "sorted(s, key=str.upper)", "str_map": {}}
{"src": ["sort", "string", "s", "in", "lexicographic", "order"], "token": ["sorted", "(", "sorted", "(", "s", ")", ",", "key", "=", "str", ".", "upper", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP"], "cano_code": "sorted(sorted(s), key=str.upper)", "decano_code": "sorted(sorted(s), key=str.upper)", "raw_code": "sorted(sorted(s), key=str.upper)", "str_map": {}}
{"src": ["get", "a", "sorted", "list", "of", "the", "characters", "of", "string", "s", "in", "lexicographic", "order", ",", "with", "lowercase", "letters", "first"], "token": ["sorted", "(", "s", ",", "key", "=", "str", ".", "lower", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP"], "cano_code": "sorted(s, key=str.lower)", "decano_code": "sorted(s, key=str.lower)", "raw_code": "sorted(s, key=str.lower)", "str_map": {}}
{"src": ["find", "all", "the", "rows", "in", "dataframe", "_STR:0_", "that", "are", "also", "present", "in", "dataframe", "_STR:1_", ",", "for", "the", "columns", "_STR:2_", ",", "_STR:3_", ",", "_STR:4_", "and", "_STR:5_", "."], "token": ["pd", ".", "merge", "(", "df1", ",", "df2", ",", "on", "=", "[", "\" _STR:2_ \"", ",", "\" _STR:3_ \"", ",", "\" _STR:4_ \"", ",", "\" _STR:5_ \"", "]", ",", "how", "=", "'inner'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "pd.merge(df1, df2, on=[\" _STR:2_ \", \" _STR:3_ \", \" _STR:4_ \", \" _STR:5_ \"], how='inner')", "decano_code": "pd.merge(df1, df2, on=[\" _STR:2_ \", \" _STR:3_ \", \" _STR:4_ \", \" _STR:5_ \"], how='inner')", "raw_code": "pd.merge(df1, df2, on=['A', 'B', 'C', 'D'], how='inner')", "str_map": {"df2": "_STR:0_", "df1": "_STR:1_", "A": "_STR:2_", "B": "_STR:3_", "C": "_STR:4_", "D": "_STR:5_"}}
{"src": ["reverse", "key-value", "pairs", "in", "a", "dictionary", "map"], "token": ["dict", "(", "(", "v", ",", "k", ")", "for", "k", ",", "v", "in", "map", ".", "items", "(", ")", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "dict((v, k) for k, v in map.items())", "decano_code": "dict((v, k) for k, v in map.items())", "raw_code": "dict((v, k) for k, v in map.items())", "str_map": {}}
{"src": ["decode", "unicode", "string", "s", "into", "a", "readable", "unicode", "literal"], "token": ["s", ".", "decode", "(", "'unicode_escape'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "s.decode('unicode_escape')", "decano_code": "s.decode('unicode_escape')", "raw_code": "s.decode('unicode_escape')", "str_map": {}}
{"src": ["convert", "list", "of", "strings", "str_list", "into", "list", "of", "integers"], "token": ["[", "int", "(", "i", ")", "for", "i", "in", "str_list", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[int(i) for i in str_list]", "decano_code": "[int(i) for i in str_list]", "raw_code": "[int(i) for i in str_list]", "str_map": {}}
{"src": ["convert", "a", "list", "with", "string", "['1', '2', '3'", "]", "into", "list", "with", "integers"], "token": ["map", "(", "int", ",", "[", "'1'", ",", "'2'", ",", "'3'", "]", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "map(int, ['1', '2', '3'])", "decano_code": "map(int, ['1', '2', '3'])", "raw_code": "map(int, ['1', '2', '3'])", "str_map": {}}
{"src": ["convert", "list", "with", "str", "into", "list", "with", "int"], "token": ["list", "(", "map", "(", "int", ",", "[", "'1'", ",", "'2'", ",", "'3'", "]", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "list(map(int, ['1', '2', '3']))", "decano_code": "list(map(int, ['1', '2', '3']))", "raw_code": "list(map(int, ['1', '2', '3']))", "str_map": {}}
{"src": ["find", "all", "anchor", "tags", "in", "html", "soup", "whose", "url", "begins", "with", "http://www.iwashere.com", "[", "http://www", ".", "iwashere", ".", "com", "]"], "token": ["soup", ".", "find_all", "(", "'a'", ",", "href", "=", "re", ".", "compile", "(", "'http://www\\\\.iwashere\\\\.com/'", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "OP"], "cano_code": "soup.find_all('a', href=re.compile('http://www\\\\.iwashere\\\\.com/'))", "decano_code": "soup.find_all('a', href=re.compile('http://www\\\\.iwashere\\\\.com/'))", "raw_code": "soup.find_all('a', href=re.compile('http://www\\\\.iwashere\\\\.com/'))", "str_map": {}}
{"src": ["find", "all", "anchors", "with", "a", "hyperlink", "that", "matches", "the", "pattern", "_STR:0_"], "token": ["soup", ".", "find_all", "(", "'a'", ",", "href", "=", "re", ".", "compile", "(", "\" _STR:0_ \"", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "OP"], "cano_code": "soup.find_all('a', href=re.compile(\" _STR:0_ \"))", "decano_code": "soup.find_all('a', href=re.compile(\" _STR:0_ \"))", "raw_code": "soup.find_all('a', href=re.compile('^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))'))", "str_map": {"^(?!(?:[a-zA-Z][a-zA-Z0-9+.-]*:|//))": "_STR:0_"}}
{"src": ["execute", "a", "jar", "file", "_STR:0_", "using", "subprocess"], "token": ["subprocess", ".", "call", "(", "[", "'java'", ",", "'-jar'", ",", "\" _STR:0_ \"", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "subprocess.call(['java', '-jar', \" _STR:0_ \"])", "decano_code": "subprocess.call(['java', '-jar', \" _STR:0_ \"])", "raw_code": "subprocess.call(['java', '-jar', 'Blender.jar'])", "str_map": {"Blender.jar": "_STR:0_"}}
{"src": ["insert", "row", "into", "mysql", "database", "with", "column", "_STR:0_", "set", "to", "the", "value", "value"], "token": ["cursor", ".", "execute", "(", "'INSERT INTO table (`column1`) VALUES (%s)'", ",", "(", "value", ",", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "cursor.execute('INSERT INTO table (`column1`) VALUES (%s)', (value,))", "decano_code": "cursor.execute('INSERT INTO table (`column1`) VALUES (%s)', (value,))", "raw_code": "cursor.execute('INSERT INTO table (`column1`) VALUES (%s)', (value,))", "str_map": {"column1": "_STR:0_"}}
{"src": ["remove", "a", "substring", "_STR:0_", "from", "the", "end", "of", "string", "url"], "token": ["if", "url", ".", "endswith", "(", "\" _STR:0_ \"", ")", ":", "\n", "    ", "url", "=", "url", "[", ":", "(", "-", "4", ")", "]", ""], "type": ["KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NEWLINE", "INDENT", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP", "DEDENT"], "cano_code": "if url.endswith(\" _STR:0_ \"):\n    url = url[:(-4)]", "decano_code": "if url.endswith(\" _STR:0_ \"):\n    url = url[:(-4)]", "raw_code": "if url.endswith('.com'):\n    url = url[:(-4)]", "str_map": {".com": "_STR:0_"}}
{"src": ["remove", "a", "substring", "_STR:0_", "from", "the", "end", "of", "string", "url"], "token": ["url", "=", "re", ".", "sub", "(", "'\\\\.com$'", ",", "''", ",", "url", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "url = re.sub('\\\\.com$', '', url)", "decano_code": "url = re.sub('\\\\.com$', '', url)", "raw_code": "url = re.sub('\\\\.com$', '', url)", "str_map": {".com": "_STR:0_"}}
{"src": ["remove", "a", "substring", "_STR:0_", "from", "the", "end", "of", "string", "url"], "token": ["print", "(", "url", ".", "replace", "(", "\" _STR:0_ \"", ",", "''", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "print(url.replace(\" _STR:0_ \", ''))", "decano_code": "print(url.replace(\" _STR:0_ \", ''))", "raw_code": "print(url.replace('.com', ''))", "str_map": {".com": "_STR:0_"}}
{"src": ["remove", "a", "substring", "suffix", "from", "the", "end", "of", "string", "text"], "token": ["if", "(", "not", "text", ".", "endswith", "(", "suffix", ")", ")", ":", "\n", "    ", "return", "text", "\n", "", "return", "text", "[", ":", "(", "len", "(", "text", ")", "-", "len", "(", "suffix", ")", ")", "]"], "type": ["KEYWORD", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "NAME", "NEWLINE", "DEDENT", "KEYWORD", "NAME", "OP", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "if (not text.endswith(suffix)):\n    return text\nreturn text[:(len(text) - len(suffix))]", "decano_code": "if (not text.endswith(suffix)):\n    return text\nreturn text[:(len(text) - len(suffix))]", "raw_code": "if (not text.endswith(suffix)):\n    return text\nreturn text[:(len(text) - len(suffix))]", "str_map": {}}
{"src": ["print", "each", "first", "value", "from", "a", "list", "of", "tuples", "mytuple", "with", "string", "formatting"], "token": ["print", "(", "', ,'", ".", "join", "(", "[", "str", "(", "i", "[", "0", "]", ")", "for", "i", "in", "mytuple", "]", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP", "OP"], "cano_code": "print(', ,'.join([str(i[0]) for i in mytuple]))", "decano_code": "print(', ,'.join([str(i[0]) for i in mytuple]))", "raw_code": "print(', ,'.join([str(i[0]) for i in mytuple]))", "str_map": {}}
{"src": ["clamping", "floating", "number", "my_value", "to", "be", "between", "min_value", "and", "max_value"], "token": ["max", "(", "min", "(", "my_value", ",", "max_value", ")", ",", "min_value", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP"], "cano_code": "max(min(my_value, max_value), min_value)", "decano_code": "max(min(my_value, max_value), min_value)", "raw_code": "max(min(my_value, max_value), min_value)", "str_map": {}}
{"src": ["split", "a", "unicode", "string", "text", "into", "a", "list", "of", "words", "and", "punctuation", "characters", "with", "a", "regex"], "token": ["re", ".", "findall", "(", "'\\\\w+|[^\\\\w\\\\s]'", ",", "text", ",", "re", ".", "UNICODE", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "re.findall('\\\\w+|[^\\\\w\\\\s]', text, re.UNICODE)", "decano_code": "re.findall('\\\\w+|[^\\\\w\\\\s]', text, re.UNICODE)", "raw_code": "re.findall('\\\\w+|[^\\\\w\\\\s]', text, re.UNICODE)", "str_map": {}}
{"src": ["execute", "raw", "sql", "queue", "_STR:0_", "in", "database", "db", "in", "sqlalchemy-flask", "app"], "token": ["result", "=", "db", ".", "engine", ".", "execute", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "result = db.engine.execute(\" _STR:0_ \")", "decano_code": "result = db.engine.execute(\" _STR:0_ \")", "raw_code": "result = db.engine.execute('<sql here>')", "str_map": {"<sql here>": "_STR:0_"}}
{"src": ["quit", "program"], "token": ["sys", ".", "exit", "(", "0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "sys.exit(0)", "decano_code": "sys.exit(0)", "raw_code": "sys.exit(0)", "str_map": {}}
{"src": ["get", "digits", "in", "string", "my_string"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "c", "for", "c", "in", "my_string", "if", "c", ".", "isdigit", "(", ")", ")"], "type": ["STRING", "OP", "NAME", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "\"\"\"\"\"\".join(c for c in my_string if c.isdigit())", "decano_code": "\"\"\"\"\"\".join(c for c in my_string if c.isdigit())", "raw_code": "\"\"\"\"\"\".join(c for c in my_string if c.isdigit())", "str_map": {}}
{"src": ["split", "string", "str1", "on", "one", "or", "more", "spaces", "with", "a", "regular", "expression"], "token": ["re", ".", "split", "(", "' +'", ",", "str1", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.split(' +', str1)", "decano_code": "re.split(' +', str1)", "raw_code": "re.split(' +', str1)", "str_map": {}}
{"src": ["python", "split", "string", "based", "on", "regular", "expression"], "token": ["re", ".", "findall", "(", "'\\\\S+'", ",", "str1", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.findall('\\\\S+', str1)", "decano_code": "re.findall('\\\\S+', str1)", "raw_code": "re.findall('\\\\S+', str1)", "str_map": {}}
{"src": ["evaluate", "a", "nested", "dictionary", "myobject.id.number", "[", "myobject", ".", "id", ".", "number", "]", "to", "get", "number", "if", "myobject", "is", "present", "with", "getattr"], "token": ["getattr", "(", "getattr", "(", "myobject", ",", "'id'", ",", "None", ")", ",", "'number'", ",", "None", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "OP", "OP", "STRING", "OP", "KEYWORD", "OP"], "cano_code": "getattr(getattr(myobject, 'id', None), 'number', None)", "decano_code": "getattr(getattr(myobject, 'id', None), 'number', None)", "raw_code": "getattr(getattr(myobject, 'id', None), 'number', None)", "str_map": {}}
{"src": ["convert", "generator", "object", "to", "a", "dictionary"], "token": ["{", "i", ":", "(", "i", "*", "2", ")", "for", "i", "in", "range", "(", "10", ")", "}"], "type": ["OP", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "OP"], "cano_code": "{i: (i * 2) for i in range(10)}", "decano_code": "{i: (i * 2) for i in range(10)}", "raw_code": "{i: (i * 2) for i in range(10)}", "str_map": {}}
{"src": ["convert", "generator", "object", "to", "a", "dictionary"], "token": ["dict", "(", "(", "i", ",", "i", "*", "2", ")", "for", "i", "in", "range", "(", "10", ")", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "OP"], "cano_code": "dict((i, i * 2) for i in range(10))", "decano_code": "dict((i, i * 2) for i in range(10))", "raw_code": "dict((i, i * 2) for i in range(10))", "str_map": {}}
{"src": ["matplotlib", "clear", "the", "current", "axes", "."], "token": ["plt", ".", "cla", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "plt.cla()", "decano_code": "plt.cla()", "raw_code": "plt.cla()", "str_map": {}}
{"src": ["split", "string", "s", "into", "float", "values", "and", "write", "sum", "to", "total"], "token": ["total", "=", "sum", "(", "float", "(", "item", ")", "for", "item", "in", "s", ".", "split", "(", "','", ")", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "total = sum(float(item) for item in s.split(','))", "decano_code": "total = sum(float(item) for item in s.split(','))", "raw_code": "total = sum(float(item) for item in s.split(','))", "str_map": {}}
{"src": ["convert", "ascii", "value", "_STR:0_", "to", "binary"], "token": ["bin", "(", "ord", "(", "\" _STR:0_ \"", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "STRING", "OP", "OP"], "cano_code": "bin(ord(\" _STR:0_ \"))", "decano_code": "bin(ord(\" _STR:0_ \"))", "raw_code": "bin(ord('P'))", "str_map": {"P": "_STR:0_"}}
{"src": ["print", "a", "string", "after", "a", "specific", "substring", "_STR:0_", "in", "string", "my_string "], "token": ["print", "(", "my_string", ".", "split", "(", "\" _STR:0_ \"", ",", "1", ")", "[", "1", "]", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "print(my_string.split(\" _STR:0_ \", 1)[1])", "decano_code": "print(my_string.split(\" _STR:0_ \", 1)[1])", "raw_code": "print(my_string.split(', ', 1)[1])", "str_map": {", ": "_STR:0_"}}
{"src": ["get", "value", "of", "key", "post code", "associated", "with", "first", "index", "of", "key", "places", "of", "dictionary", "data"], "token": ["print", "(", "data", "[", "'places'", "]", "[", "0", "]", "[", "'post code'", "]", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "OP", "NUMBER", "OP", "OP", "STRING", "OP", "OP"], "cano_code": "print(data['places'][0]['post code'])", "decano_code": "print(data['places'][0]['post code'])", "raw_code": "print(data['places'][0]['post code'])", "str_map": {}}
{"src": ["remove", "colon", "character", "surrounded", "by", "vowels", "letters", "in", "string", "word"], "token": ["word", "=", "re", ".", "sub", "(", "'([aeiou]):(([aeiou][^aeiou]*){3})$'", ",", "'\\\\1\\\\2'", ",", "word", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "word = re.sub('([aeiou]):(([aeiou][^aeiou]*){3})$', '\\\\1\\\\2', word)", "decano_code": "word = re.sub('([aeiou]):(([aeiou][^aeiou]*){3})$', '\\\\1\\\\2', word)", "raw_code": "word = re.sub('([aeiou]):(([aeiou][^aeiou]*){3})$', '\\\\1\\\\2', word)", "str_map": {}}
{"src": ["extract", "data", "field", "_STR:0_", "from", "json", "object"], "token": ["json", ".", "loads", "(", "'{\"foo\": 42, \"bar\": \"baz\"}'", ")", "[", "\" _STR:0_ \"", "]"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "STRING", "OP"], "cano_code": "json.loads('{\"foo\": 42, \"bar\": \"baz\"}')[\" _STR:0_ \"]", "decano_code": "json.loads('{\"foo\": 42, \"bar\": \"baz\"}')[\" _STR:0_ \"]", "raw_code": "json.loads('{\"foo\": 42, \"bar\": \"baz\"}')['bar']", "str_map": {"bar": "_STR:0_"}}
{"src": ["convert", "JSON", "array", "array", "to", "python", "object"], "token": ["data", "=", "json", ".", "loads", "(", "array", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "data = json.loads(array)", "decano_code": "data = json.loads(array)", "raw_code": "data = json.loads(array)", "str_map": {}}
{"src": ["convert", "JSON", "array", "array", "to", "python", "object"], "token": ["data", "=", "json", ".", "loads", "(", "array", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "data = json.loads(array)", "decano_code": "data = json.loads(array)", "raw_code": "data = json.loads(array)", "str_map": {}}
{"src": ["pars", "a", "string", "_STR:0_", "to", "extract", "hashtags", "into", "an", "array"], "token": ["re", ".", "findall", "(", "'#(\\\\w+)'", ",", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.findall('#(\\\\w+)', \" _STR:0_ \")", "decano_code": "re.findall('#(\\\\w+)', \" _STR:0_ \")", "raw_code": "re.findall('#(\\\\w+)', 'http://example.org/#comments')", "str_map": {"http://example.org/#comments": "_STR:0_"}}
{"src": ["do", "a", "boolean", "check", "if", "a", "string", "lestring", "contains", "any", "of", "the", "items", "in", "list", "lelist"], "token": ["any", "(", "e", "in", "lestring", "for", "e", "in", "lelist", ")"], "type": ["KEYWORD", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "any(e in lestring for e in lelist)", "decano_code": "any(e in lestring for e in lelist)", "raw_code": "any(e in lestring for e in lelist)", "str_map": {}}
{"src": ["how", "to", "plot", "two", "columns", "of", "a", "pandas", "data", "frame", "using", "points", "?"], "token": ["df", ".", "plot", "(", "x", "=", "'col_name_1'", ",", "y", "=", "'col_name_2'", ",", "style", "=", "'o'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df.plot(x='col_name_1', y='col_name_2', style='o')", "decano_code": "df.plot(x='col_name_1', y='col_name_2', style='o')", "raw_code": "df.plot(x='col_name_1', y='col_name_2', style='o')", "str_map": {}}
{"src": ["parsing", "HTML", "string", "html", "using", "BeautifulSoup"], "token": ["parsed_html", "=", "BeautifulSoup", "(", "html", ")", "\n", "print", "(", "parsed_html", ".", "body", ".", "find", "(", "'div'", ",", "attrs", "=", "{", "'class'", ":", "'container'", ",", "}", ")", ".", "text", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NEWLINE", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "OP", "NAME", "OP"], "cano_code": "parsed_html = BeautifulSoup(html)\nprint(parsed_html.body.find('div', attrs={'class': 'container', }).text)", "decano_code": "parsed_html = BeautifulSoup(html)\nprint(parsed_html.body.find('div', attrs={'class': 'container', }).text)", "raw_code": "parsed_html = BeautifulSoup(html)\nprint(parsed_html.body.find('div', attrs={'class': 'container', }).text)", "str_map": {}}
{"src": ["parsing", "webpage", "_STR:0_", "using", "BeautifulSoup"], "token": ["page", "=", "urllib", ".", "request", ".", "urlopen", "(", "\" _STR:0_ \"", ")", "\n", "soup", "=", "BeautifulSoup", "(", "page", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NEWLINE", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "page = urllib.request.urlopen(\" _STR:0_ \")\nsoup = BeautifulSoup(page)", "decano_code": "page = urllib.request.urlopen(\" _STR:0_ \")\nsoup = BeautifulSoup(page)", "raw_code": "page = urllib.request.urlopen('http://www.google.com/')\nsoup = BeautifulSoup(page)", "str_map": {"http://www.google.com/": "_STR:0_"}}
{"src": ["change", "figure", "size", "to", "3", "by", "4", "in", "matplotlib"], "token": ["plt", ".", "figure", "(", "figsize", "=", "(", "3", ",", "4", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "plt.figure(figsize=(3, 4))", "decano_code": "plt.figure(figsize=(3, 4))", "raw_code": "plt.figure(figsize=(3, 4))", "str_map": {}}
{"src": ["strip", "punctuation", "from", "string", "s"], "token": ["s", ".", "translate", "(", "None", ",", "string", ".", "punctuation", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "s.translate(None, string.punctuation)", "decano_code": "s.translate(None, string.punctuation)", "raw_code": "s.translate(None, string.punctuation)", "str_map": {}}
{"src": ["django", "urlsafe", "base64", "decode", "string", "uenc", "with", "decryption"], "token": ["base64", ".", "urlsafe_b64decode", "(", "uenc", ".", "encode", "(", "'ascii'", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "base64.urlsafe_b64decode(uenc.encode('ascii'))", "decano_code": "base64.urlsafe_b64decode(uenc.encode('ascii'))", "raw_code": "base64.urlsafe_b64decode(uenc.encode('ascii'))", "str_map": {}}
{"src": ["get", "the", "number", "of", "all", "keys", "in", "the", "nested", "dictionary", "dict_list"], "token": ["len", "(", "dict_test", ")", "+", "sum", "(", "len", "(", "v", ")", "for", "v", "in", "dict_test", ".", "values", "(", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "len(dict_test) + sum(len(v) for v in dict_test.values())", "decano_code": "len(dict_test) + sum(len(v) for v in dict_test.values())", "raw_code": "len(dict_test) + sum(len(v) for v in dict_test.values())", "str_map": {}}
{"src": ["return", "the", "conversion", "of", "decimal", "d", "to", "hex", "without", "the", "_STR:0_", "prefix"], "token": ["hex", "(", "d", ")", ".", "split", "(", "'x'", ")", "[", "1", "]"], "type": ["KEYWORD", "OP", "NAME", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NUMBER", "OP"], "cano_code": "hex(d).split('x')[1]", "decano_code": "hex(d).split('x')[1]", "raw_code": "hex(d).split('x')[1]", "str_map": {"0x": "_STR:0_"}}
{"src": ["create", "a", "list", "containing", "digits", "of", "number", "123", "as", "its", "elements"], "token": ["list", "(", "str", "(", "123", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NUMBER", "OP", "OP"], "cano_code": "list(str(123))", "decano_code": "list(str(123))", "raw_code": "list(str(123))", "str_map": {}}
{"src": ["converting", "integer", "num", "to", "list"], "token": ["[", "int", "(", "x", ")", "for", "x", "in", "str", "(", "num", ")", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "[int(x) for x in str(num)]", "decano_code": "[int(x) for x in str(num)]", "raw_code": "[int(x) for x in str(num)]", "str_map": {}}
{"src": ["select", "a", "first", "form", "with", "no", "name", "in", "mechanize"], "token": ["br", ".", "select_form", "(", "nr", "=", "0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "br.select_form(nr=0)", "decano_code": "br.select_form(nr=0)", "raw_code": "br.select_form(nr=0)", "str_map": {}}
{"src": ["open", "file", "_STR:0_", "in", "read", "mode", "with", "encoding", "of", "_STR:1_"], "token": ["json", ".", "load", "(", "codecs", ".", "open", "(", "\" _STR:0_ \"", ",", "'r'", ",", "\" _STR:1_ \"", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "json.load(codecs.open(\" _STR:0_ \", 'r', \" _STR:1_ \"))", "decano_code": "json.load(codecs.open(\" _STR:0_ \", 'r', \" _STR:1_ \"))", "raw_code": "json.load(codecs.open('sample.json', 'r', 'utf-8-sig'))", "str_map": {"sample.json": "_STR:0_", "utf-8-sig": "_STR:1_"}}
{"src": ["load", "json", "file", "_STR:0_", "with", "utf-8", "bom", "header"], "token": ["json", ".", "loads", "(", "open", "(", "\" _STR:0_ \"", ")", ".", "read", "(", ")", ".", "decode", "(", "'utf-8-sig'", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "json.loads(open(\" _STR:0_ \").read().decode('utf-8-sig'))", "decano_code": "json.loads(open(\" _STR:0_ \").read().decode('utf-8-sig'))", "raw_code": "json.loads(open('sample.json').read().decode('utf-8-sig'))", "str_map": {"sample.json": "_STR:0_"}}
{"src": ["setup", "a", "smtp", "mail", "server", "to", "smtp.gmail.com", "[", "smtp", ".", "gmail", ".", "com", "]", "with", "port", "587"], "token": ["server", "=", "smtplib", ".", "SMTP", "(", "'smtp.gmail.com'", ",", "587", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NUMBER", "OP"], "cano_code": "server = smtplib.SMTP('smtp.gmail.com', 587)", "decano_code": "server = smtplib.SMTP('smtp.gmail.com', 587)", "raw_code": "server = smtplib.SMTP('smtp.gmail.com', 587)", "str_map": {}}
{"src": ["revers", "correlating", "bits", "of", "integer", "n"], "token": ["int", "(", "'{:08b}'", ".", "format", "(", "n", ")", "[", ":", ":", "-", "1", "]", ",", "2", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP"], "cano_code": "int('{:08b}'.format(n)[::-1], 2)", "decano_code": "int('{:08b}'.format(n)[::-1], 2)", "raw_code": "int('{:08b}'.format(n)[::-1], 2)", "str_map": {}}
{"src": ["add", "column", "d", "to", "index", "of", "dataframe", "df"], "token": ["df", ".", "set_index", "(", "[", "'d'", "]", ",", "append", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df.set_index(['d'], append=True)", "decano_code": "df.set_index(['d'], append=True)", "raw_code": "df.set_index(['d'], append=True)", "str_map": {}}
{"src": ["iterating", "over", "a", "dictionary", "d", "using", "for", "loops"], "token": ["for", "(", "key", ",", "value", ")", "in", "d", ".", "items", "(", ")", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "for (key, value) in d.items():\n    pass", "decano_code": "for (key, value) in d.items():\n    pass", "raw_code": "for (key, value) in d.items():\n    pass", "str_map": {}}
{"src": ["iterating", "over", "a", "dictionary", "d", "using", "for", "loops"], "token": ["for", "(", "key", ",", "value", ")", "in", "list", "(", "d", ".", "items", "(", ")", ")", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "for (key, value) in list(d.items()):\n    pass", "decano_code": "for (key, value) in list(d.items()):\n    pass", "raw_code": "for (key, value) in list(d.items()):\n    pass", "str_map": {}}
{"src": ["iterating", "key", "and", "items", "over", "dictionary", "d"], "token": ["for", "(", "letter", ",", "number", ")", "in", "list", "(", "d", ".", "items", "(", ")", ")", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "for (letter, number) in list(d.items()):\n    pass", "decano_code": "for (letter, number) in list(d.items()):\n    pass", "raw_code": "for (letter, number) in list(d.items()):\n    pass", "str_map": {}}
{"src": ["iterating", "key", "and", "items", "over", "dictionary", "d"], "token": ["for", "(", "k", ",", "v", ")", "in", "list", "(", "d", ".", "items", "(", ")", ")", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "for (k, v) in list(d.items()):\n    pass", "decano_code": "for (k, v) in list(d.items()):\n    pass", "raw_code": "for (k, v) in list(d.items()):\n    pass", "str_map": {}}
{"src": ["get", "keys", "and", "items", "of", "dictionary", "d"], "token": ["list", "(", "d", ".", "items", "(", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "list(d.items())", "decano_code": "list(d.items())", "raw_code": "list(d.items())", "str_map": {}}
{"src": ["get", "keys", "and", "items", "of", "dictionary", "d", "as", "a", "list"], "token": ["list", "(", "d", ".", "items", "(", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "list(d.items())", "decano_code": "list(d.items())", "raw_code": "list(d.items())", "str_map": {}}
{"src": ["iterating", "key", "and", "items", "over", "dictionary", "d"], "token": ["for", "(", "k", ",", "v", ")", "in", "list", "(", "d", ".", "items", "(", ")", ")", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "for (k, v) in list(d.items()):\n    pass", "decano_code": "for (k, v) in list(d.items()):\n    pass", "raw_code": "for (k, v) in list(d.items()):\n    pass", "str_map": {}}
{"src": ["iterating", "key", "and", "items", "over", "dictionary", "d"], "token": ["for", "(", "letter", ",", "number", ")", "in", "list", "(", "d", ".", "items", "(", ")", ")", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "for (letter, number) in list(d.items()):\n    pass", "decano_code": "for (letter, number) in list(d.items()):\n    pass", "raw_code": "for (letter, number) in list(d.items()):\n    pass", "str_map": {}}
{"src": ["iterating", "key", "and", "items", "over", "dictionary", "d"], "token": ["for", "(", "letter", ",", "number", ")", "in", "list", "(", "d", ".", "items", "(", ")", ")", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "for (letter, number) in list(d.items()):\n    pass", "decano_code": "for (letter, number) in list(d.items()):\n    pass", "raw_code": "for (letter, number) in list(d.items()):\n    pass", "str_map": {}}
{"src": ["query", "all", "data", "from", "table", "task", "where", "the", "value", "of", "column", "time_spent", "is", "bigger", "than", "3", "hours"], "token": ["session", ".", "query", "(", "Task", ")", ".", "filter", "(", "Task", ".", "time_spent", ">", "timedelta", "(", "hours", "=", "3", ")", ")", ".", "all", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "KEYWORD", "OP", "OP"], "cano_code": "session.query(Task).filter(Task.time_spent > timedelta(hours=3)).all()", "decano_code": "session.query(Task).filter(Task.time_spent > timedelta(hours=3)).all()", "raw_code": "session.query(Task).filter(Task.time_spent > timedelta(hours=3)).all()", "str_map": {}}
{"src": ["compile", "visual", "studio", "project", "project.sln", "[", "project", ".", "sln", "]", "from", "the", "command", "line", "through", "python"], "token": ["os", ".", "system", "(", "'msbuild project.sln /p:Configuration=Debug'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "os.system('msbuild project.sln /p:Configuration=Debug')", "decano_code": "os.system('msbuild project.sln /p:Configuration=Debug')", "raw_code": "os.system('msbuild project.sln /p:Configuration=Debug')", "str_map": {}}
{"src": ["get", "max", "key", "in", "dictionary", "MyCount"], "token": ["max", "(", "list", "(", "MyCount", ".", "keys", "(", ")", ")", ",", "key", "=", "int", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "max(list(MyCount.keys()), key=int)", "decano_code": "max(list(MyCount.keys()), key=int)", "raw_code": "max(list(MyCount.keys()), key=int)", "str_map": {}}
{"src": ["execute", "command", "_STR:0_", "from", "python", "script"], "token": ["os", ".", "system", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "os.system(\" _STR:0_ \")", "decano_code": "os.system(\" _STR:0_ \")", "raw_code": "os.system('source .bashrc; shopt -s expand_aliases; nuke -x scriptPath')", "str_map": {"source .bashrc; shopt -s expand_aliases; nuke -x scriptPath": "_STR:0_"}}
{"src": ["get", "a", "name", "of", "function", "my_function", "as", "a", "string"], "token": ["my_function", ".", "__name__"], "type": ["NAME", "OP", "NAME"], "cano_code": "my_function.__name__", "decano_code": "my_function.__name__", "raw_code": "my_function.__name__", "str_map": {}}
{"src": ["how", "to", "get", "a", "function", "name", "as", "a", "string", "in", "python", "?"], "token": ["my_function", ".", "__name__"], "type": ["NAME", "OP", "NAME"], "cano_code": "my_function.__name__", "decano_code": "my_function.__name__", "raw_code": "my_function.__name__", "str_map": {}}
{"src": ["check", "if", "all", "values", "in", "the", "columns", "of", "a", "numpy", "matrix", "a", "are", "same"], "token": ["np", ".", "all", "(", "a", "==", "a", "[", "(", "0", ")", ",", ":", "]", ",", "axis", "=", "0", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "OP", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "np.all(a == a[(0), :], axis=0)", "decano_code": "np.all(a == a[(0), :], axis=0)", "raw_code": "np.all(a == a[(0), :], axis=0)", "str_map": {}}
{"src": ["sort", "list", "a", "in", "ascending", "order", "based", "on", "the", "addition", "of", "the", "second", "and", "third", "elements", "of", "each", "tuple", "in", "it"], "token": ["sorted", "(", "a", ",", "key", "=", "lambda", "x", ":", "(", "sum", "(", "x", "[", "1", ":", "3", "]", ")", ",", "x", "[", "0", "]", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "sorted(a, key=lambda x: (sum(x[1:3]), x[0]))", "decano_code": "sorted(a, key=lambda x: (sum(x[1:3]), x[0]))", "raw_code": "sorted(a, key=lambda x: (sum(x[1:3]), x[0]))", "str_map": {}}
{"src": ["sort", "a", "list", "of", "tuples", "a", "by", "the", "sum", "of", "second", "and", "third", "element", "of", "each", "tuple"], "token": ["sorted", "(", "a", ",", "key", "=", "lambda", "x", ":", "(", "sum", "(", "x", "[", "1", ":", "3", "]", ")", ",", "x", "[", "0", "]", ")", ",", "reverse", "=", "True", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "sorted(a, key=lambda x: (sum(x[1:3]), x[0]), reverse=True)", "decano_code": "sorted(a, key=lambda x: (sum(x[1:3]), x[0]), reverse=True)", "raw_code": "sorted(a, key=lambda x: (sum(x[1:3]), x[0]), reverse=True)", "str_map": {}}
{"src": ["sorting", "a", "list", "of", "tuples", "lst", "by", "the", "sum", "of", "the", "second", "elements", "onwards", ",", "and", "third", "element", "of", "the", "tuple"], "token": ["sorted", "(", "lst", ",", "key", "=", "lambda", "x", ":", "(", "sum", "(", "x", "[", "1", ":", "]", ")", ",", "x", "[", "0", "]", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "sorted(lst, key=lambda x: (sum(x[1:]), x[0]))", "decano_code": "sorted(lst, key=lambda x: (sum(x[1:]), x[0]))", "raw_code": "sorted(lst, key=lambda x: (sum(x[1:]), x[0]))", "str_map": {}}
{"src": ["sort", "the", "list", "of", "tuples", "lst", "by", "the", "sum", "of", "every", "value", "except", "the", "first", "and", "by", "the", "first", "value", "in", "reverse", "order"], "token": ["sorted", "(", "lst", ",", "key", "=", "lambda", "x", ":", "(", "sum", "(", "x", "[", "1", ":", "]", ")", ",", "x", "[", "0", "]", ")", ",", "reverse", "=", "True", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "sorted(lst, key=lambda x: (sum(x[1:]), x[0]), reverse=True)", "decano_code": "sorted(lst, key=lambda x: (sum(x[1:]), x[0]), reverse=True)", "raw_code": "sorted(lst, key=lambda x: (sum(x[1:]), x[0]), reverse=True)", "str_map": {}}
{"src": ["add", "header", "_STR:0_", "in", "a", "flask", "app", "with", "value", "_STR:1_"], "token": ["response", ".", "headers", "[", "'WWW-Authenticate'", "]", "=", "\" _STR:1_ \""], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "STRING"], "cano_code": "response.headers['WWW-Authenticate'] = \" _STR:1_ \"", "decano_code": "response.headers['WWW-Authenticate'] = \" _STR:1_ \"", "raw_code": "response.headers['WWW-Authenticate'] = 'Basic realm=\"test\"'", "str_map": {"WWWAuthenticate": "_STR:0_", "Basic realm=\"test\"": "_STR:1_"}}
{"src": ["clear", "session", "key", "_STR:0_"], "token": ["del", "request", ".", "session", "[", "\" _STR:0_ \"", "]"], "type": ["KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "del request.session[\" _STR:0_ \"]", "decano_code": "del request.session[\" _STR:0_ \"]", "raw_code": "del request.session['mykey']", "str_map": {"mykey": "_STR:0_"}}
{"src": ["convert", "date", "string", "_STR:0_", "to", "date", "object", "in", "format", "_STR:1_"], "token": ["datetime", ".", "datetime", ".", "strptime", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")", ".", "date", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "datetime.datetime.strptime(\" _STR:0_ \", \" _STR:1_ \").date()", "decano_code": "datetime.datetime.strptime(\" _STR:0_ \", \" _STR:1_ \").date()", "raw_code": "datetime.datetime.strptime('24052010', '%d%m%Y').date()", "str_map": {"24052010": "_STR:0_", "%d%m%Y": "_STR:1_"}}
{"src": ["replace", "non-ASCII", "characters", "in", "string", "text", "with", "a", "single", "space"], "token": ["re", ".", "sub", "(", "'[^\\\\x00-\\\\x7F]+'", ",", "' '", ",", "text", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.sub('[^\\\\x00-\\\\x7F]+', ' ', text)", "decano_code": "re.sub('[^\\\\x00-\\\\x7F]+', ' ', text)", "raw_code": "re.sub('[^\\\\x00-\\\\x7F]+', ' ', text)", "str_map": {}}
{"src": ["list", "of", "lists", "into", "numpy", "array"], "token": ["numpy", ".", "array", "(", "[", "[", "1", ",", "2", "]", ",", "[", "3", ",", "4", "]", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "numpy.array([[1, 2], [3, 4]])", "decano_code": "numpy.array([[1, 2], [3, 4]])", "raw_code": "numpy.array([[1, 2], [3, 4]])", "str_map": {}}
{"src": ["get", "a", "list", "myList", "from", "1", "to", "10"], "token": ["myList", "=", "[", "i", "for", "i", "in", "range", "(", "10", ")", "]"], "type": ["NAME", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "OP"], "cano_code": "myList = [i for i in range(10)]", "decano_code": "myList = [i for i in range(10)]", "raw_code": "myList = [i for i in range(10)]", "str_map": {}}
{"src": ["use", "regex", "pattern", "_STR:0_", "to", "split", "string", "_STR:1_"], "token": ["[", "m", "[", "0", "]", "for", "m", "in", "re", ".", "compile", "(", "\" _STR:0_ \"", ")", ".", "findall", "(", "\" _STR:1_ \"", ")", "]"], "type": ["OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "[m[0] for m in re.compile(\" _STR:0_ \").findall(\" _STR:1_ \")]", "decano_code": "[m[0] for m in re.compile(\" _STR:0_ \").findall(\" _STR:1_ \")]", "raw_code": "[m[0] for m in re.compile('((.+?)\\\\2+)').findall('44442(2)2(2)44')]", "str_map": {"((.+?)\\2+)": "_STR:0_", "44442(2)2(2)44": "_STR:1_"}}
{"src": ["use", "regular", "expression", "_STR:0_", "to", "split", "string", "s"], "token": ["[", "i", "[", "0", "]", "for", "i", "in", "re", ".", "findall", "(", "\" _STR:0_ \"", ",", "s", ")", "]"], "type": ["OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP"], "cano_code": "[i[0] for i in re.findall(\" _STR:0_ \", s)]", "decano_code": "[i[0] for i in re.findall(\" _STR:0_ \", s)]", "raw_code": "[i[0] for i in re.findall('((\\\\d)(?:[()]*\\\\2*[()]*)*)', s)]", "str_map": {"((\\d)(?:[()]*\\2*[()]*)*)": "_STR:0_"}}
{"src": ["remove", "the", "space", "between", "subplots", "in", "matplotlib.pyplot", "[", "matplotlib", ".", "pyplot", "]"], "token": ["fig", ".", "subplots_adjust", "(", "wspace", "=", "0", ",", "hspace", "=", "0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "fig.subplots_adjust(wspace=0, hspace=0)", "decano_code": "fig.subplots_adjust(wspace=0, hspace=0)", "raw_code": "fig.subplots_adjust(wspace=0, hspace=0)", "str_map": {}}
{"src": ["reverse", "list", "x"], "token": ["x", "[", ":", ":", "-", "1", "]"], "type": ["NAME", "OP", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "x[::-1]", "decano_code": "x[::-1]", "raw_code": "x[::-1]", "str_map": {}}
{"src": ["python", "JSON", "encoding"], "token": ["json", ".", "dumps", "(", "{", "'apple'", ":", "'cat'", ",", "'banana'", ":", "'dog'", ",", "'pear'", ":", "'fish'", "}", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "json.dumps({'apple': 'cat', 'banana': 'dog', 'pear': 'fish'})", "decano_code": "json.dumps({'apple': 'cat', 'banana': 'dog', 'pear': 'fish'})", "raw_code": "json.dumps({'apple': 'cat', 'banana': 'dog', 'pear': 'fish'})", "str_map": {}}
{"src": ["write", "a", "list", "of", "strings", "row", "to", "csv", "object", "csvwriter"], "token": ["csvwriter", ".", "writerow", "(", "row", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "csvwriter.writerow(row)", "decano_code": "csvwriter.writerow(row)", "raw_code": "csvwriter.writerow(row)", "str_map": {}}
{"src": ["Jinja2", "formate", "date", "item.date", "[", "item", ".", "date", "]", "accorto", "pattern", "_STR:0_"], "token": ["{", "{", "(", "item", ".", "date", "|", "date", ")", ":", "\" _STR:0_ \"", "}", "}"], "type": ["OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "OP"], "cano_code": "{{(item.date | date): \" _STR:0_ \"}}", "decano_code": "{{(item.date | date): \" _STR:0_ \"}}", "raw_code": "{{(item.date | date): 'Y M d'}}", "str_map": {"Y M d": "_STR:0_"}}
{"src": ["split", "a", "string", "text", "with", "comma", ",", "question", "mark", "or", "exclamation", "by", "non-consuming", "regex", "using", "look-behind"], "token": ["re", ".", "split", "(", "'(?<=[\\\\.\\\\?!]) '", ",", "text", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.split('(?<=[\\\\.\\\\?!]) ', text)", "decano_code": "re.split('(?<=[\\\\.\\\\?!]) ', text)", "raw_code": "re.split('(?<=[\\\\.\\\\?!]) ', text)", "str_map": {}}
{"src": ["create", "a", "regular", "expression", "object", "with", "the", "pattern", "_STR:0_"], "token": ["re", ".", "compile", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "STRING", "OP"], "cano_code": "re.compile(\" _STR:0_ \")", "decano_code": "re.compile(\" _STR:0_ \")", "raw_code": "re.compile('\\xe2\\x80\\x93')", "str_map": {"\u00e2\u0080\u0093": "_STR:0_"}}
{"src": ["declare", "an", "array", "variable"], "token": ["variable", "=", "[", "]"], "type": ["NAME", "OP", "OP", "OP"], "cano_code": "variable = []", "decano_code": "variable = []", "raw_code": "variable = []", "str_map": {}}
{"src": ["declare", "an", "array", "with", "element", "_STR:0_"], "token": ["intarray", "=", "array", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "intarray = array(\" _STR:0_ \")", "decano_code": "intarray = array(\" _STR:0_ \")", "raw_code": "intarray = array('i')", "str_map": {"i": "_STR:0_"}}
{"src": ["given", "list", "to_reverse", ",", "reverse", "the", "all", "sublists", "and", "the", "list", "itself"], "token": ["[", "sublist", "[", ":", ":", "-", "1", "]", "for", "sublist", "in", "to_reverse", "[", ":", ":", "-", "1", "]", "]"], "type": ["OP", "NAME", "OP", "OP", "OP", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "[sublist[::-1] for sublist in to_reverse[::-1]]", "decano_code": "[sublist[::-1] for sublist in to_reverse[::-1]]", "raw_code": "[sublist[::-1] for sublist in to_reverse[::-1]]", "str_map": {}}
{"src": ["replace", "all", "non-alphanumeric", "characters", "in", "a", "string"], "token": ["re", ".", "sub", "(", "'[^0-9a-zA-Z]+'", ",", "'*'", ",", "'h^&ell`.,|o w]{+orld'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.sub('[^0-9a-zA-Z]+', '*', 'h^&ell`.,|o w]{+orld')", "decano_code": "re.sub('[^0-9a-zA-Z]+', '*', 'h^&ell`.,|o w]{+orld')", "raw_code": "re.sub('[^0-9a-zA-Z]+', '*', 'h^&ell`.,|o w]{+orld')", "str_map": {}}
{"src": ["unescape", "special", "characters", "without", "splitting", "data", "in", "array", "of", "strings", "['I ', u'<', '3s U ', u'&', ' you luvz me'", "]"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "[", "'I '", ",", "'<'", ",", "'3s U '", ",", "'&'", ",", "' you luvz me'", "]", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "\"\"\"\"\"\".join(['I ', '<', '3s U ', '&', ' you luvz me'])", "decano_code": "\"\"\"\"\"\".join(['I ', '<', '3s U ', '&', ' you luvz me'])", "raw_code": "\"\"\"\"\"\".join(['I ', '<', '3s U ', '&', ' you luvz me'])", "str_map": {}}
{"src": ["disable", "logging", "while", "running", "unit", "tests", "in", "python", "django"], "token": ["logging", ".", "disable", "(", "logging", ".", "CRITICAL", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "logging.disable(logging.CRITICAL)", "decano_code": "logging.disable(logging.CRITICAL)", "raw_code": "logging.disable(logging.CRITICAL)", "str_map": {}}
{"src": ["adding", "url", "url", "to", "mysql", "row"], "token": ["cursor", ".", "execute", "(", "'INSERT INTO index(url) VALUES(%s)'", ",", "(", "url", ",", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "cursor.execute('INSERT INTO index(url) VALUES(%s)', (url,))", "decano_code": "cursor.execute('INSERT INTO index(url) VALUES(%s)', (url,))", "raw_code": "cursor.execute('INSERT INTO index(url) VALUES(%s)', (url,))", "str_map": {}}
{"src": ["convert", "column", "of", "date", "objects", "_STR:0_", "in", "pandas", "dataframe", "df", "to", "strings", "in", "new", "column", "_STR:1_"], "token": ["df", "[", "\" _STR:1_ \"", "]", "=", "df", "[", "\" _STR:0_ \"", "]", ".", "dt", ".", "strftime", "(", "'%d%m%Y'", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df[\" _STR:1_ \"] = df[\" _STR:0_ \"].dt.strftime('%d%m%Y')", "decano_code": "df[\" _STR:1_ \"] = df[\" _STR:0_ \"].dt.strftime('%d%m%Y')", "raw_code": "df['DateStr'] = df['DateObj'].dt.strftime('%d%m%Y')", "str_map": {"DateObj": "_STR:0_", "DateStr": "_STR:1_"}}
{"src": ["split", "string", "s", "by", "_STR:0_", "and", "get", "the", "first", "element"], "token": ["s", ".", "split", "(", "\" _STR:0_ \"", ")", "[", "0", "]"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NUMBER", "OP"], "cano_code": "s.split(\" _STR:0_ \")[0]", "decano_code": "s.split(\" _STR:0_ \")[0]", "raw_code": "s.split('@')[0]", "str_map": {"@": "_STR:0_"}}
{"src": ["drop", "rows", "of", "dataframe", "df", "whose", "index", "is", "smaller", "than", "the", "value", "of", "start_remove", "or", "bigger", "than", "the", "value", "of`end_remove", "`"], "token": ["df", ".", "query", "(", "'index < @start_remove or index > @end_remove'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df.query('index < @start_remove or index > @end_remove')", "decano_code": "df.query('index < @start_remove or index > @end_remove')", "raw_code": "df.query('index < @start_remove or index > @end_remove')", "str_map": {}}
{"src": ["drop", "the", "rows", "in", "pandas", "timeseries", "df", "from", "the", "row", "containing", "index", "start_remove", "to", "the", "row", "containing", "index", "end_remove"], "token": ["df", ".", "loc", "[", "(", "df", ".", "index", "<", "start_remove", ")", "|", "(", "df", ".", "index", ">", "end_remove", ")", "]"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "df.loc[(df.index < start_remove) | (df.index > end_remove)]", "decano_code": "df.loc[(df.index < start_remove) | (df.index > end_remove)]", "raw_code": "df.loc[(df.index < start_remove) | (df.index > end_remove)]", "str_map": {}}
{"src": ["get", "the", "number", "of", "NaN", "values", "in", "each", "column", "of", "dataframe", "df"], "token": ["df", ".", "isnull", "(", ")", ".", "sum", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "OP", "OP"], "cano_code": "df.isnull().sum()", "decano_code": "df.isnull().sum()", "raw_code": "df.isnull().sum()", "str_map": {}}
{"src": ["reset", "index", "of", "dataframe", "df", "so", "that", "existing", "index", "values", "are", "transferred", "into", "df", "as", "columns"], "token": ["df", ".", "reset_index", "(", "inplace", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df.reset_index(inplace=True)", "decano_code": "df.reset_index(inplace=True)", "raw_code": "df.reset_index(inplace=True)", "str_map": {}}
{"src": ["generate", "a", "list", "containing", "values", "associated", "with", "the", "key", "_STR:0_", "of", "each", "dictionary", "inside", "list", "list_of_dicts"], "token": ["[", "x", "[", "\" _STR:0_ \"", "]", "for", "x", "in", "list_of_dicts", "]"], "type": ["OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[x[\" _STR:0_ \"] for x in list_of_dicts]", "decano_code": "[x[\" _STR:0_ \"] for x in list_of_dicts]", "raw_code": "[x['value'] for x in list_of_dicts]", "str_map": {"value": "_STR:0_"}}
{"src": ["python", "getting", "a", "list", "of", "value", "from", "list", "of", "dict"], "token": ["[", "d", "[", "'value'", "]", "for", "d", "in", "l", "]"], "type": ["OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[d['value'] for d in l]", "decano_code": "[d['value'] for d in l]", "raw_code": "[d['value'] for d in l]", "str_map": {}}
{"src": ["python", "getting", "a", "list", "of", "value", "from", "list", "of", "dict"], "token": ["[", "d", "[", "'value'", "]", "for", "d", "in", "l", "if", "'value'", "in", "d", "]"], "type": ["OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "STRING", "KEYWORD", "NAME", "OP"], "cano_code": "[d['value'] for d in l if 'value' in d]", "decano_code": "[d['value'] for d in l if 'value' in d]", "raw_code": "[d['value'] for d in l if 'value' in d]", "str_map": {}}
{"src": ["convert", "numpy", "array", "into", "python", "list", "structure"], "token": ["np", ".", "array", "(", "[", "[", "1", ",", "2", ",", "3", "]", ",", "[", "4", ",", "5", ",", "6", "]", "]", ")", ".", "tolist", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "np.array([[1, 2, 3], [4, 5, 6]]).tolist()", "decano_code": "np.array([[1, 2, 3], [4, 5, 6]]).tolist()", "raw_code": "np.array([[1, 2, 3], [4, 5, 6]]).tolist()", "str_map": {}}
{"src": ["converting", "string", "_STR:0_", "to", "a", "tuple"], "token": ["ast", ".", "literal_eval", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "ast.literal_eval(\" _STR:0_ \")", "decano_code": "ast.literal_eval(\" _STR:0_ \")", "raw_code": "ast.literal_eval('(1,2,3,4)')", "str_map": {"(1,2,3,4)": "_STR:0_"}}
{"src": ["keep", "a", "list", "dataList", "of", "lists", "sorted", "as", "it", "is", "created", "by", "second", "element"], "token": ["dataList", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "dataList.sort(key=lambda x: x[1])", "decano_code": "dataList.sort(key=lambda x: x[1])", "raw_code": "dataList.sort(key=lambda x: x[1])", "str_map": {}}
{"src": ["remove", "duplicated", "items", "from", "list", "of", "lists", "testdata"], "token": ["list", "(", "map", "(", "list", ",", "set", "(", "map", "(", "lambda", "i", ":", "tuple", "(", "i", ")", ",", "testdata", ")", ")", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "list(map(list, set(map(lambda i: tuple(i), testdata))))", "decano_code": "list(map(list, set(map(lambda i: tuple(i), testdata))))", "raw_code": "list(map(list, set(map(lambda i: tuple(i), testdata))))", "str_map": {}}
{"src": ["uniqueness", "for", "list", "of", "lists", "testdata"], "token": ["[", "list", "(", "i", ")", "for", "i", "in", "set", "(", "tuple", "(", "i", ")", "for", "i", "in", "testdata", ")", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "[list(i) for i in set(tuple(i) for i in testdata)]", "decano_code": "[list(i) for i in set(tuple(i) for i in testdata)]", "raw_code": "[list(i) for i in set(tuple(i) for i in testdata)]", "str_map": {}}
{"src": ["in", "django", ",", "check", "if", "a", "user", "is", "in", "a", "group", "_STR:0_"], "token": ["return", "user", ".", "groups", ".", "filter", "(", "name", "=", "\" _STR:0_ \"", ")", ".", "exists", "(", ")"], "type": ["KEYWORD", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "return user.groups.filter(name=\" _STR:0_ \").exists()", "decano_code": "return user.groups.filter(name=\" _STR:0_ \").exists()", "raw_code": "return user.groups.filter(name='Member').exists()", "str_map": {"Member": "_STR:0_"}}
{"src": ["check", "if", "a", "user", "user", "is", "in", "a", "group", "from", "list", "of", "groups", "['group1', 'group2'", "]"], "token": ["return", "user", ".", "groups", ".", "filter", "(", "name__in", "=", "[", "'group1'", ",", "'group2'", "]", ")", ".", "exists", "(", ")"], "type": ["KEYWORD", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "return user.groups.filter(name__in=['group1', 'group2']).exists()", "decano_code": "return user.groups.filter(name__in=['group1', 'group2']).exists()", "raw_code": "return user.groups.filter(name__in=['group1', 'group2']).exists()", "str_map": {}}
{"src": ["change", "log", "level", "dynamically", "to", "_STR:0_", "without", "restarting", "the", "application"], "token": ["logging", ".", "getLogger", "(", ")", ".", "setLevel", "(", "logging", ".", "DEBUG", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "logging.getLogger().setLevel(logging.DEBUG)", "decano_code": "logging.getLogger().setLevel(logging.DEBUG)", "raw_code": "logging.getLogger().setLevel(logging.DEBUG)", "str_map": {"DEBUG": "_STR:0_"}}
{"src": ["concat", "each", "values", "in", "a", "tuple", "(34.2424, -64.2344, 76.3534, 45.2344", "[", "(34", ".", "2424,", "-64", ".", "2344,", "76", ".", "3534,", "45", ".", "2344", "]", ")", "to", "get", "a", "string"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "str", "(", "i", ")", "for", "i", "in", "(", "34.2424", ",", "-", "64.2344", ",", "76.3534", ",", "45.2344", ")", ")"], "type": ["STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "\"\"\"\"\"\".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))", "decano_code": "\"\"\"\"\"\".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))", "raw_code": "\"\"\"\"\"\".join(str(i) for i in (34.2424, -64.2344, 76.3534, 45.2344))", "str_map": {}}
{"src": ["swap", "each", "pair", "of", "characters", "in", "string", "s"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "[", "s", "[", "x", ":", "x", "+", "2", "]", "[", ":", ":", "-", "1", "]", "for", "x", "in", "range", "(", "0", ",", "len", "(", "s", ")", ",", "2", ")", "]", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "OP", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "\"\"\"\"\"\".join([s[x:x + 2][::-1] for x in range(0, len(s), 2)])", "decano_code": "\"\"\"\"\"\".join([s[x:x + 2][::-1] for x in range(0, len(s), 2)])", "raw_code": "\"\"\"\"\"\".join([s[x:x + 2][::-1] for x in range(0, len(s), 2)])", "str_map": {}}
{"src": ["save", "current", "figure", "to", "file", "_STR:0_", "with", "resolution", "of", "1000", "dpi"], "token": ["plt", ".", "savefig", "(", "\" _STR:0_ \"", ",", "dpi", "=", "1000", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "plt.savefig(\" _STR:0_ \", dpi=1000)", "decano_code": "plt.savefig(\" _STR:0_ \", dpi=1000)", "raw_code": "plt.savefig('graph.png', dpi=1000)", "str_map": {"graph.png": "_STR:0_"}}
{"src": ["delete", "items", "from", "list", "my_list", "if", "the", "item", "exist", "in", "list", "to_dell"], "token": ["my_list", "=", "[", "[", "x", "for", "x", "in", "sublist", "if", "x", "not", "in", "to_del", "]", "for", "sublist", "in", "my_list", "]"], "type": ["NAME", "OP", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "my_list = [[x for x in sublist if x not in to_del] for sublist in my_list]", "decano_code": "my_list = [[x for x in sublist if x not in to_del] for sublist in my_list]", "raw_code": "my_list = [[x for x in sublist if x not in to_del] for sublist in my_list]", "str_map": {}}
{"src": ["find", "all", "the", "elements", "that", "consists", "value", "_STR:0_", "in", "a", "list", "of", "tuples", "_STR:1_"], "token": ["[", "item", "for", "item", "in", "a", "if", "1", "in", "item", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NUMBER", "KEYWORD", "NAME", "OP"], "cano_code": "[item for item in a if 1 in item]", "decano_code": "[item for item in a if 1 in item]", "raw_code": "[item for item in a if 1 in item]", "str_map": {"1": "_STR:0_", "a": "_STR:1_"}}
{"src": ["find", "all", "elements", "in", "a", "list", "of", "tuples", "a", "where", "the", "first", "element", "of", "each", "tuple", "equals", "1"], "token": ["[", "item", "for", "item", "in", "a", "if", "item", "[", "0", "]", "==", "1", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP"], "cano_code": "[item for item in a if item[0] == 1]", "decano_code": "[item for item in a if item[0] == 1]", "raw_code": "[item for item in a if item[0] == 1]", "str_map": {}}
{"src": ["get", "the", "index", "value", "in", "list", "p_list", "using", "enumerate", "in", "list", "comprehension"], "token": ["{", "p", ".", "id", ":", "{", "'id'", ":", "p", ".", "id", ",", "'position'", ":", "ind", "}", "for", "ind", ",", "p", "in", "enumerate", "(", "p_list", ")", "}"], "type": ["OP", "NAME", "OP", "KEYWORD", "OP", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "{p.id: {'id': p.id, 'position': ind} for ind, p in enumerate(p_list)}", "decano_code": "{p.id: {'id': p.id, 'position': ind} for ind, p in enumerate(p_list)}", "raw_code": "{p.id: {'id': p.id, 'position': ind} for ind, p in enumerate(p_list)}", "str_map": {}}
{"src": ["how", "to", "uniqify", "a", "list", "of", "dict", "in", "python"], "token": ["[", "dict", "(", "y", ")", "for", "y", "in", "set", "(", "tuple", "(", "x", ".", "items", "(", ")", ")", "for", "x", "in", "d", ")", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "[dict(y) for y in set(tuple(x.items()) for x in d)]", "decano_code": "[dict(y) for y in set(tuple(x.items()) for x in d)]", "raw_code": "[dict(y) for y in set(tuple(x.items()) for x in d)]", "str_map": {}}
{"src": ["load", "a", "file", "file.py", "[", "file", ".", "py", "]", "into", "the", "python", "console"], "token": ["exec", "(", "compile", "(", "open", "(", "'file.py'", ")", ".", "read", "(", ")", ",", "'file.py'", ",", "'exec'", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "exec(compile(open('file.py').read(), 'file.py', 'exec'))", "decano_code": "exec(compile(open('file.py').read(), 'file.py', 'exec'))", "raw_code": "exec(compile(open('file.py').read(), 'file.py', 'exec'))", "str_map": {}}
{"src": ["SQLAlchemy", "count", "the", "number", "of", "rows", "in", "table", "congress"], "token": ["rows", "=", "session", ".", "query", "(", "Congress", ")", ".", "count", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "rows = session.query(Congress).count()", "decano_code": "rows = session.query(Congress).count()", "raw_code": "rows = session.query(Congress).count()", "str_map": {}}
{"src": ["execute", "shell", "script", "from", "python", "with", "variable"], "token": ["subprocess", ".", "call", "(", "[", "'test.sh'", ",", "str", "(", "domid", ")", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "subprocess.call(['test.sh', str(domid)])", "decano_code": "subprocess.call(['test.sh', str(domid)])", "raw_code": "subprocess.call(['test.sh', str(domid)])", "str_map": {}}
{"src": ["read", "excel", "file", "file_name", "using", "pandas"], "token": ["dfs", "=", "pd", ".", "read_excel", "(", "file_name", ",", "sheetname", "=", "None", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "dfs = pd.read_excel(file_name, sheetname=None)", "decano_code": "dfs = pd.read_excel(file_name, sheetname=None)", "raw_code": "dfs = pd.read_excel(file_name, sheetname=None)", "str_map": {}}
{"src": ["unpack", "the", "binary", "data", "represented", "by", "the", "hexadecimal", "string", "_STR:0_", "to", "a", "float"], "token": ["struct", ".", "unpack", "(", "'d'", ",", "binascii", ".", "unhexlify", "(", "\" _STR:0_ \"", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "struct.unpack('d', binascii.unhexlify(\" _STR:0_ \"))", "decano_code": "struct.unpack('d', binascii.unhexlify(\" _STR:0_ \"))", "raw_code": "struct.unpack('d', binascii.unhexlify('4081637ef7d0424a'))", "str_map": {"4081637ef7d0424a": "_STR:0_"}}
{"src": ["get", "index", "of", "numpy", "array", "a", "with", "another", "numpy", "array", "b"], "token": ["a", "[", "tuple", "(", "b", ")", "]"], "type": ["NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "a[tuple(b)]", "decano_code": "a[tuple(b)]", "raw_code": "a[tuple(b)]", "str_map": {}}
{"src": ["find", "all", "possible", "sequences", "of", "elements", "in", "a", "list", "[2, 3, 4", "]"], "token": ["map", "(", "list", ",", "permutations", "(", "[", "2", ",", "3", ",", "4", "]", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "map(list, permutations([2, 3, 4]))", "decano_code": "map(list, permutations([2, 3, 4]))", "raw_code": "map(list, permutations([2, 3, 4]))", "str_map": {}}
{"src": ["sort", "a", "list", "unsorted_list", "based", "on", "another", "sorted", "list", "presorted_list"], "token": ["sorted", "(", "unsorted_list", ",", "key", "=", "presorted_list", ".", "index", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "sorted(unsorted_list, key=presorted_list.index)", "decano_code": "sorted(unsorted_list, key=presorted_list.index)", "raw_code": "sorted(unsorted_list, key=presorted_list.index)", "str_map": {}}
{"src": ["how", "to", "get", "yesterday", "in", "python"], "token": ["datetime", ".", "datetime", ".", "now", "(", ")", "-", "datetime", ".", "timedelta", "(", "days", "=", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "datetime.datetime.now() - datetime.timedelta(days=1)", "decano_code": "datetime.datetime.now() - datetime.timedelta(days=1)", "raw_code": "datetime.datetime.now() - datetime.timedelta(days=1)", "str_map": {}}
{"src": ["create", "a", "dataframe", "d", "filled", "with", "zeros", "with", "indices", "from", "0", "to", "length", "of", "data", "and", "column", "names", "from", "feature_list"], "token": ["d", "=", "pd", ".", "DataFrame", "(", "0", ",", "index", "=", "np", ".", "arange", "(", "len", "(", "data", ")", ")", ",", "columns", "=", "feature_list", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "d = pd.DataFrame(0, index=np.arange(len(data)), columns=feature_list)", "decano_code": "d = pd.DataFrame(0, index=np.arange(len(data)), columns=feature_list)", "raw_code": "d = pd.DataFrame(0, index=np.arange(len(data)), columns=feature_list)", "str_map": {}}
{"src": ["find", "the", "index", "of", "sub", "string", "_STR:0_", "in", "x"], "token": ["x", ".", "find", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "x.find(\" _STR:0_ \")", "decano_code": "x.find(\" _STR:0_ \")", "raw_code": "x.find('World')", "str_map": {"World": "_STR:0_"}}
{"src": ["find", "the", "index", "of", "sub", "string", "_STR:0_", "in", "x"], "token": ["x", ".", "find", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "x.find(\" _STR:0_ \")", "decano_code": "x.find(\" _STR:0_ \")", "raw_code": "x.find('Aloha')", "str_map": {"Aloha": "_STR:0_"}}
{"src": ["find", "the", "index", "of", "sub", "string", "_STR:0_", "in", "string", "_STR:1_"], "token": ["\" _STR:1_ \"", ".", "index", "(", "\" _STR:0_ \"", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "\" _STR:1_ \".index(\" _STR:0_ \")", "decano_code": "\" _STR:1_ \".index(\" _STR:0_ \")", "raw_code": "'sdfasdf'.index('cc')", "str_map": {"cc": "_STR:0_", "sdfasdf": "_STR:1_"}}
{"src": ["find", "the", "index", "of", "sub", "string", "_STR:0_", "in", "string", "_STR:1_"], "token": ["\" _STR:1_ \"", ".", "index", "(", "\" _STR:0_ \"", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "\" _STR:1_ \".index(\" _STR:0_ \")", "decano_code": "\" _STR:1_ \".index(\" _STR:0_ \")", "raw_code": "'sdfasdf'.index('df')", "str_map": {"df": "_STR:0_", "sdfasdf": "_STR:1_"}}
{"src": ["find", "the", "index", "of", "sub", "string", "_STR:0_", "in", "string", "str"], "token": ["str", ".", "find", "(", "\" _STR:0_ \"", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "str.find(\" _STR:0_ \")", "decano_code": "str.find(\" _STR:0_ \")", "raw_code": "str.find('a')", "str_map": {"a": "_STR:0_"}}
{"src": ["find", "the", "index", "of", "sub", "string", "_STR:0_", "in", "string", "str"], "token": ["str", ".", "find", "(", "\" _STR:0_ \"", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "str.find(\" _STR:0_ \")", "decano_code": "str.find(\" _STR:0_ \")", "raw_code": "str.find('g')", "str_map": {"g": "_STR:0_"}}
{"src": ["find", "the", "index", "of", "sub", "string", "_STR:0_", "in", "string", "str", "starting", "from", "index", "11"], "token": ["str", ".", "find", "(", "\" _STR:0_ \"", ",", "11", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "NUMBER", "OP"], "cano_code": "str.find(\" _STR:0_ \", 11)", "decano_code": "str.find(\" _STR:0_ \", 11)", "raw_code": "str.find('s', 11)", "str_map": {"s": "_STR:0_"}}
{"src": ["find", "the", "index", "of", "sub", "string", "_STR:0_", "in", "string", "str", "starting", "from", "index", "15"], "token": ["str", ".", "find", "(", "\" _STR:0_ \"", ",", "15", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "NUMBER", "OP"], "cano_code": "str.find(\" _STR:0_ \", 15)", "decano_code": "str.find(\" _STR:0_ \", 15)", "raw_code": "str.find('s', 15)", "str_map": {"s": "_STR:0_"}}
{"src": ["find", "the", "index", "of", "sub", "string", "_STR:0_", "in", "string", "str", "starting", "from", "index", "16"], "token": ["str", ".", "find", "(", "\" _STR:0_ \"", ",", "16", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "NUMBER", "OP"], "cano_code": "str.find(\" _STR:0_ \", 16)", "decano_code": "str.find(\" _STR:0_ \", 16)", "raw_code": "str.find('s', 16)", "str_map": {"s": "_STR:0_"}}
{"src": ["find", "the", "index", "of", "sub", "string", "_STR:0_", "in", "string", "str", "starting", "from", "index", "11", "and", "ending", "at", "index", "14"], "token": ["str", ".", "find", "(", "\" _STR:0_ \"", ",", "11", ",", "14", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "str.find(\" _STR:0_ \", 11, 14)", "decano_code": "str.find(\" _STR:0_ \", 11, 14)", "raw_code": "str.find('s', 11, 14)", "str_map": {"s": "_STR:0_"}}
{"src": ["sort", "list", "of", "date", "strings", "_STR:0_"], "token": ["sorted", "(", "d", ",", "key", "=", "lambda", "x", ":", "datetime", ".", "datetime", ".", "strptime", "(", "x", ",", "'%m-%Y'", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "sorted(d, key=lambda x: datetime.datetime.strptime(x, '%m-%Y'))", "decano_code": "sorted(d, key=lambda x: datetime.datetime.strptime(x, '%m-%Y'))", "raw_code": "sorted(d, key=lambda x: datetime.datetime.strptime(x, '%m-%Y'))", "str_map": {"d": "_STR:0_"}}
{"src": ["get", "all", "the", "sentences", "from", "a", "string", "text", "using", "regex"], "token": ["re", ".", "split", "(", "'\\\\.\\\\s'", ",", "text", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.split('\\\\.\\\\s', text)", "decano_code": "re.split('\\\\.\\\\s', text)", "raw_code": "re.split('\\\\.\\\\s', text)", "str_map": {}}
{"src": ["regular", "expression", "in", "python", "sentence", "extractor"], "token": ["re", ".", "split", "(", "'\\\\.\\\\s'", ",", "re", ".", "sub", "(", "'\\\\.\\\\s*$'", ",", "''", ",", "text", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP", "OP"], "cano_code": "re.split('\\\\.\\\\s', re.sub('\\\\.\\\\s*$', '', text))", "decano_code": "re.split('\\\\.\\\\s', re.sub('\\\\.\\\\s*$', '', text))", "raw_code": "re.split('\\\\.\\\\s', re.sub('\\\\.\\\\s*$', '', text))", "str_map": {}}
{"src": ["get", "all", "characters", "in", "string", "_STR:0_", "up", "to", "the", "fourth", "index"], "token": ["\" _STR:0_ \"", "[", ":", "4", "]"], "type": ["STRING", "OP", "OP", "NUMBER", "OP"], "cano_code": "\" _STR:0_ \"[:4]", "decano_code": "\" _STR:0_ \"[:4]", "raw_code": "\"\"\"foobar\"\"\"[:4]", "str_map": {"foobar": "_STR:0_"}}
{"src": ["cut", "a", "string", "by", "delimiter", "_STR:0_"], "token": ["s", ".", "rfind", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "s.rfind(\" _STR:0_ \")", "decano_code": "s.rfind(\" _STR:0_ \")", "raw_code": "s.rfind('&')", "str_map": {"&": "_STR:0_"}}
{"src": ["cut", "a", "string", "using", "delimiter", "_STR:0_"], "token": ["s", "[", ":", "s", ".", "rfind", "(", "\" _STR:0_ \"", ")", "]"], "type": ["NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "s[:s.rfind(\" _STR:0_ \")]", "decano_code": "s[:s.rfind(\" _STR:0_ \")]", "raw_code": "s[:s.rfind('&')]", "str_map": {"&": "_STR:0_"}}
{"src": ["find", "a", "tag", "option", "whose", "value", "attribute", "is", "state", "in", "selenium"], "token": ["driver", ".", "find_element_by_xpath", "(", "\"//option[@value='\"", "+", "state", "+", "\"']\"", ")", ".", "click", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "driver.find_element_by_xpath(\"//option[@value='\" + state + \"']\").click()", "decano_code": "driver.find_element_by_xpath(\"//option[@value='\" + state + \"']\").click()", "raw_code": "driver.find_element_by_xpath(\"//option[@value='\" + state + \"']\").click()", "str_map": {}}
{"src": ["append", "line", "_STR:0_", "to", "file", "_STR:1_"], "token": ["with", "open", "(", "\" _STR:1_ \"", ",", "'a'", ")", "as", "myfile", ":", "\n", "    ", "myfile", ".", "write", "(", "\" _STR:0_ \"", ")", ""], "type": ["KEYWORD", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "KEYWORD", "NAME", "OP", "NEWLINE", "INDENT", "NAME", "OP", "NAME", "OP", "STRING", "OP", "DEDENT"], "cano_code": "with open(\" _STR:1_ \", 'a') as myfile:\n    myfile.write(\" _STR:0_ \")", "decano_code": "with open(\" _STR:1_ \", 'a') as myfile:\n    myfile.write(\" _STR:0_ \")", "raw_code": "with open('test.txt', 'a') as myfile:\n    myfile.write('appended text')", "str_map": {"appended text": "_STR:0_", "test.txt": "_STR:1_"}}
{"src": ["append", "line", "_STR:0_", "to", "file", "_STR:1_"], "token": ["with", "open", "(", "\" _STR:1_ \"", ",", "'a'", ")", "as", "f", ":", "\n", "    ", "f", ".", "write", "(", "\" _STR:0_ \"", ")", ""], "type": ["KEYWORD", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "KEYWORD", "NAME", "OP", "NEWLINE", "INDENT", "NAME", "OP", "NAME", "OP", "STRING", "OP", "DEDENT"], "cano_code": "with open(\" _STR:1_ \", 'a') as f:\n    f.write(\" _STR:0_ \")", "decano_code": "with open(\" _STR:1_ \", 'a') as f:\n    f.write(\" _STR:0_ \")", "raw_code": "with open('foo', 'a') as f:\n    f.write('cool beans...')", "str_map": {"cool beans...": "_STR:0_", "foo": "_STR:1_"}}
{"src": ["append", "to", "file", "_STR:0_", "content", "_STR:1_"], "token": ["with", "open", "(", "\" _STR:0_ \"", ",", "'ab'", ")", "as", "f", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "KEYWORD", "NAME", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "with open(\" _STR:0_ \", 'ab') as f:\n    pass", "decano_code": "with open(\" _STR:0_ \", 'ab') as f:\n    pass", "raw_code": "with open('test1', 'ab') as f:\n    pass", "str_map": {"test1": "_STR:0_", "koko": "_STR:1_"}}
{"src": ["append", "to", "file", "_STR:0_", "content", "_STR:1_"], "token": ["open", "(", "\" _STR:0_ \"", ",", "'a+b'", ")", ".", "write", "(", "\" _STR:1_ \"", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "open(\" _STR:0_ \", 'a+b').write(\" _STR:1_ \")", "decano_code": "open(\" _STR:0_ \", 'a+b').write(\" _STR:1_ \")", "raw_code": "open('test', 'a+b').write('koko')", "str_map": {"test": "_STR:0_", "koko": "_STR:1_"}}
{"src": ["split", "string", "_STR:0_", "into", "tokens"], "token": ["print", "(", "[", "i", "for", "i", "in", "re", ".", "split", "(", "'([\\\\d.]+|\\\\W+)'", ",", "\" _STR:0_ \"", ")", "if", "i", "]", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "print([i for i in re.split('([\\\\d.]+|\\\\W+)', \" _STR:0_ \") if i])", "decano_code": "print([i for i in re.split('([\\\\d.]+|\\\\W+)', \" _STR:0_ \") if i])", "raw_code": "print([i for i in re.split('([\\\\d.]+|\\\\W+)', 'x+13.5*10x-4e1') if i])", "str_map": {"x+13.5*10x-4e1": "_STR:0_"}}
{"src": ["find", "all", "chinese", "characters", "in", "string", "ipath"], "token": ["re", ".", "findall", "(", "'[\\u4e00-\\u9fff]+'", ",", "ipath", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.findall('[\\u4e00-\\u9fff]+', ipath)", "decano_code": "re.findall('[\\u4e00-\\u9fff]+', ipath)", "raw_code": "re.findall('[\\u4e00-\\u9fff]+', ipath)", "str_map": {}}
{"src": ["split", "string", "s", "by", "letter", "_STR:0_"], "token": ["s", ".", "split", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "s.split(\" _STR:0_ \")", "decano_code": "s.split(\" _STR:0_ \")", "raw_code": "s.split('s')", "str_map": {"s": "_STR:0_"}}
{"src": ["run", "shell", "command", "_STR:0_", "in", "the", "background"], "token": ["subprocess", ".", "Popen", "(", "[", "'rm'", ",", "'-r'", ",", "'some.file'", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "subprocess.Popen(['rm', '-r', 'some.file'])", "decano_code": "subprocess.Popen(['rm', '-r', 'some.file'])", "raw_code": "subprocess.Popen(['rm', '-r', 'some.file'])", "str_map": {"rm -r some.file": "_STR:0_"}}
{"src": ["convert", "a", "list", "of", "dictionaries", "`listofdict", "into", "a", "dictionary", "of", "dictionaries"], "token": ["dict", "(", "(", "d", "[", "'name'", "]", ",", "d", ")", "for", "d", "in", "listofdict", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "dict((d['name'], d) for d in listofdict)", "decano_code": "dict((d['name'], d) for d in listofdict)", "raw_code": "dict((d['name'], d) for d in listofdict)", "str_map": {}}
{"src": ["print", "current", "date", "and", "time", "in", "a", "regular", "format"], "token": ["datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d %H:%M'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "datetime.datetime.now().strftime('%Y-%m-%d %H:%M')", "decano_code": "datetime.datetime.now().strftime('%Y-%m-%d %H:%M')", "raw_code": "datetime.datetime.now().strftime('%Y-%m-%d %H:%M')", "str_map": {}}
{"src": ["print", "current", "date", "and", "time", "in", "a", "regular", "format"], "token": ["time", ".", "strftime", "(", "'%Y-%m-%d %H:%M'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "time.strftime('%Y-%m-%d %H:%M')", "decano_code": "time.strftime('%Y-%m-%d %H:%M')", "raw_code": "time.strftime('%Y-%m-%d %H:%M')", "str_map": {}}
{"src": ["find", "consecutive", "consonants", "in", "a", "word", "CONCENTRATION", "using", "regex"], "token": ["re", ".", "findall", "(", "'[bcdfghjklmnpqrstvwxyz]+'", ",", "'CONCERTATION'", ",", "re", ".", "IGNORECASE", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "re.findall('[bcdfghjklmnpqrstvwxyz]+', 'CONCERTATION', re.IGNORECASE)", "decano_code": "re.findall('[bcdfghjklmnpqrstvwxyz]+', 'CONCERTATION', re.IGNORECASE)", "raw_code": "re.findall('[bcdfghjklmnpqrstvwxyz]+', 'CONCERTATION', re.IGNORECASE)", "str_map": {}}
{"src": ["get", "a", "list", "of", "indices", "of", "non", "zero", "elements", "in", "a", "list", "a"], "token": ["[", "i", "for", "i", ",", "e", "in", "enumerate", "(", "a", ")", "if", "e", "!=", "0", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NUMBER", "OP"], "cano_code": "[i for i, e in enumerate(a) if e != 0]", "decano_code": "[i for i, e in enumerate(a) if e != 0]", "raw_code": "[i for i, e in enumerate(a) if e != 0]", "str_map": {}}
{"src": ["get", "multiple", "integer", "values", "from", "a", "string", "_STR:0_"], "token": ["map", "(", "int", ",", "re", ".", "findall", "(", "'\\\\d+'", ",", "string1", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP"], "cano_code": "map(int, re.findall('\\\\d+', string1))", "decano_code": "map(int, re.findall('\\\\d+', string1))", "raw_code": "map(int, re.findall('\\\\d+', string1))", "str_map": {"string1": "_STR:0_"}}
{"src": ["get", "the", "path", "of", "python", "executable", "under", "windows"], "token": ["os", ".", "path", ".", "dirname", "(", "sys", ".", "executable", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "os.path.dirname(sys.executable)", "decano_code": "os.path.dirname(sys.executable)", "raw_code": "os.path.dirname(sys.executable)", "str_map": {}}
{"src": ["move", "an", "x-axis", "label", "to", "the", "top", "of", "a", "plot", "ax", "in", "matplotlib"], "token": ["ax", ".", "xaxis", ".", "set_label_position", "(", "'top'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "ax.xaxis.set_label_position('top')", "decano_code": "ax.xaxis.set_label_position('top')", "raw_code": "ax.xaxis.set_label_position('top')", "str_map": {}}
{"src": ["move", "x-axis", "to", "the", "top", "of", "a", "plot", "ax"], "token": ["ax", ".", "xaxis", ".", "tick_top", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "ax.xaxis.tick_top()", "decano_code": "ax.xaxis.tick_top()", "raw_code": "ax.xaxis.tick_top()", "str_map": {}}
{"src": ["move", "x-axis", "of", "the", "pyplot", "object", "ax", "to", "the", "top", "of", "a", "plot", "in", "matplotlib"], "token": ["ax", ".", "xaxis", ".", "set_ticks_position", "(", "'top'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "ax.xaxis.set_ticks_position('top')", "decano_code": "ax.xaxis.set_ticks_position('top')", "raw_code": "ax.xaxis.set_ticks_position('top')", "str_map": {}}
{"src": ["parse", "string", "_STR:0_", "to", "DateTime", "object", "using", "format", "_STR:1_"], "token": ["datetime", ".", "strptime", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "datetime.strptime(\" _STR:0_ \", \" _STR:1_ \")", "decano_code": "datetime.strptime(\" _STR:0_ \", \" _STR:1_ \")", "raw_code": "datetime.strptime('2015/01/01 12:12am', '%Y/%m/%d %I:%M%p')", "str_map": {"2015/01/01 12:12am": "_STR:0_", "%Y/%m/%d %I:%M%p": "_STR:1_"}}
{"src": ["open", "image", "_STR:0_"], "token": ["img", "=", "Image", ".", "open", "(", "\" _STR:0_ \"", ")", "\n", "img", ".", "show", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "NEWLINE", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "img = Image.open(\" _STR:0_ \")\nimg.show()", "decano_code": "img = Image.open(\" _STR:0_ \")\nimg.show()", "raw_code": "img = Image.open('picture.jpg')\nimg.show()", "str_map": {"picture.jpg": "_STR:0_"}}
{"src": ["open", "image", "_STR:0_"], "token": ["img", "=", "Image", ".", "open", "(", "\" _STR:0_ \"", ")", "\n", "Img", ".", "show"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "NEWLINE", "NAME", "OP", "NAME"], "cano_code": "img = Image.open(\" _STR:0_ \")\nImg.show", "decano_code": "img = Image.open(\" _STR:0_ \")\nImg.show", "raw_code": "img = Image.open('picture.jpg')\nImg.show", "str_map": {"picture.jpg": "_STR:0_"}}
{"src": ["terminate", "the", "script", "using", "status", "value", "0"], "token": ["sys", ".", "exit", "(", "0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "sys.exit(0)", "decano_code": "sys.exit(0)", "raw_code": "sys.exit(0)", "str_map": {}}
{"src": ["abort", "the", "execution", "of", "the", "script", "using", "message", "_STR:0_"], "token": ["sys", ".", "exit", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "sys.exit(\" _STR:0_ \")", "decano_code": "sys.exit(\" _STR:0_ \")", "raw_code": "sys.exit('aa! errors!')", "str_map": {"aa! errors!": "_STR:0_"}}
{"src": ["abort", "the", "execution", "of", "a", "python", "script"], "token": ["sys", ".", "exit", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "sys.exit()", "decano_code": "sys.exit()", "raw_code": "sys.exit()", "str_map": {}}
{"src": ["find", "maximum", "with", "lookahead", "=", "4", "in", "a", "list", "arr"], "token": ["[", "max", "(", "abs", "(", "x", ")", "for", "x", "in", "arr", "[", "i", ":", "i", "+", "4", "]", ")", "for", "i", "in", "range", "(", "0", ",", "len", "(", "arr", ")", ",", "4", ")", "]"], "type": ["OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "[max(abs(x) for x in arr[i:i + 4]) for i in range(0, len(arr), 4)]", "decano_code": "[max(abs(x) for x in arr[i:i + 4]) for i in range(0, len(arr), 4)]", "raw_code": "[max(abs(x) for x in arr[i:i + 4]) for i in range(0, len(arr), 4)]", "str_map": {}}
{"src": ["set", "the", "current", "working", "directory", "to", "_STR:0_"], "token": ["os", ".", "chdir", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "os.chdir(\" _STR:0_ \")", "decano_code": "os.chdir(\" _STR:0_ \")", "raw_code": "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')", "str_map": {"c:\\Users\\uname\\desktop\\python": "_STR:0_"}}
{"src": ["set", "the", "current", "working", "directory", "to", "path", "path"], "token": ["os", ".", "chdir", "(", "path", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "os.chdir(path)", "decano_code": "os.chdir(path)", "raw_code": "os.chdir(path)", "str_map": {}}
{"src": ["get", "a", "list", "no_integers", "of", "all", "the", "items", "in", "list", "mylist", "that", "are", "not", "of", "type", "int"], "token": ["no_integers", "=", "[", "x", "for", "x", "in", "mylist", "if", "not", "isinstance", "(", "x", ",", "int", ")", "]"], "type": ["NAME", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "OP", "OP"], "cano_code": "no_integers = [x for x in mylist if not isinstance(x, int)]", "decano_code": "no_integers = [x for x in mylist if not isinstance(x, int)]", "raw_code": "no_integers = [x for x in mylist if not isinstance(x, int)]", "str_map": {}}
{"src": ["match", "contents", "of", "an", "element", "to", "_STR:0_", "in", "xpath", "(lxml", ")"], "token": ["tree", ".", "xpath", "(", "\".//a[text()='Example']\"", ")", "[", "0", "]", ".", "tag"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NUMBER", "OP", "OP", "NAME"], "cano_code": "tree.xpath(\".//a[text()='Example']\")[0].tag", "decano_code": "tree.xpath(\".//a[text()='Example']\")[0].tag", "raw_code": "tree.xpath(\".//a[text()='Example']\")[0].tag", "str_map": {"Example": "_STR:0_"}}
{"src": ["concatenate", "key/value", "pairs", "in", "dictionary", "a", "with", "string", "_STR:0_", "into", "a", "single", "string"], "token": ["\" _STR:0_ \"", ".", "join", "(", "[", "(", "str", "(", "k", ")", "+", "' '", "+", "str", "(", "v", ")", ")", "for", "k", ",", "v", "in", "list", "(", "a", ".", "items", "(", ")", ")", "]", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "STRING", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "OP"], "cano_code": "\" _STR:0_ \".join([(str(k) + ' ' + str(v)) for k, v in list(a.items())])", "decano_code": "\" _STR:0_ \".join([(str(k) + ' ' + str(v)) for k, v in list(a.items())])", "raw_code": "\"\"\", \"\"\".join([(str(k) + ' ' + str(v)) for k, v in list(a.items())])", "str_map": {", ": "_STR:0_"}}
{"src": ["strip", "all", "non-ASCII", "characters", "from", "a", "unicode", "string", ",", "\\xa3\\u20ac\\xa3\\u20ac"], "token": ["print", "(", "set", "(", "re", ".", "sub", "(", "'[\\x00-\\x7f]'", ",", "''", ",", "'\\xa3\\u20ac\\xa3\\u20ac'", ")", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "print(set(re.sub('[\\x00-\\x7f]', '', '\\xa3\\u20ac\\xa3\\u20ac')))", "decano_code": "print(set(re.sub('[\\x00-\\x7f]', '', '\\xa3\\u20ac\\xa3\\u20ac')))", "raw_code": "print(set(re.sub('[\\x00-\\x7f]', '', '\\xa3\\u20ac\\xa3\\u20ac')))", "str_map": {}}
{"src": ["get", "all", "non-ascii", "characters", "in", "a", "unicode", "string", "\\xa3100 is worth more than \\u20ac100"], "token": ["print", "(", "re", ".", "sub", "(", "'[\\x00-\\x7f]'", ",", "''", ",", "'\\xa3100 is worth more than \\u20ac100'", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "print(re.sub('[\\x00-\\x7f]', '', '\\xa3100 is worth more than \\u20ac100'))", "decano_code": "print(re.sub('[\\x00-\\x7f]', '', '\\xa3100 is worth more than \\u20ac100'))", "raw_code": "print(re.sub('[\\x00-\\x7f]', '', '\\xa3100 is worth more than \\u20ac100'))", "str_map": {}}
{"src": ["build", "a", "dict", "of", "key:value", "pairs", "from", "a", "string", "representation", "of", "a", "dict", ",", "{'muffin' : 'lolz', 'foo' : 'kitty'", "}"], "token": ["ast", ".", "literal_eval", "(", "\"{'muffin' : 'lolz', 'foo' : 'kitty'}\"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "ast.literal_eval(\"{'muffin' : 'lolz', 'foo' : 'kitty'}\")", "decano_code": "ast.literal_eval(\"{'muffin' : 'lolz', 'foo' : 'kitty'}\")", "raw_code": "ast.literal_eval(\"{'muffin' : 'lolz', 'foo' : 'kitty'}\")", "str_map": {}}
{"src": ["print", "string", "t", "with", "proper", "unicode", "representations"], "token": ["print", "(", "t", ".", "decode", "(", "'unicode_escape'", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "print(t.decode('unicode_escape'))", "decano_code": "print(t.decode('unicode_escape'))", "raw_code": "print(t.decode('unicode_escape'))", "str_map": {}}
{"src": ["normalize", "string", "str", "from", "_STR:0_", "code", "to", "_STR:1_", "code"], "token": ["print", "(", "str", ".", "encode", "(", "\" _STR:0_ \"", ")", ".", "decode", "(", "\" _STR:1_ \"", ")", ".", "encode", "(", "\" _STR:0_ \"", ")", ".", "decode", "(", "\" _STR:1_ \"", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "print(str.encode(\" _STR:0_ \").decode(\" _STR:1_ \").encode(\" _STR:0_ \").decode(\" _STR:1_ \"))", "decano_code": "print(str.encode(\" _STR:0_ \").decode(\" _STR:1_ \").encode(\" _STR:0_ \").decode(\" _STR:1_ \"))", "raw_code": "print(str.encode('cp1252').decode('utf-8').encode('cp1252').decode('utf-8'))", "str_map": {"cp1252": "_STR:0_", "utf-8": "_STR:1_"}}
{"src": ["merge", "lists", "list_a", "and", "list_b", "into", "a", "list", "of", "tuples"], "token": ["zip", "(", "list_a", ",", "list_b", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "zip(list_a, list_b)", "decano_code": "zip(list_a, list_b)", "raw_code": "zip(list_a, list_b)", "str_map": {}}
{"src": ["merge", "lists", "a", "and", "a", "into", "a", "list", "of", "tuples"], "token": ["list", "(", "zip", "(", "a", ",", "b", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "list(zip(a, b))", "decano_code": "list(zip(a, b))", "raw_code": "list(zip(a, b))", "str_map": {}}
{"src": ["convert", "pandas", "DataFrame", "df", "to", "a", "dictionary", "using", "id", "field", "as", "the", "key"], "token": ["df", ".", "set_index", "(", "'id'", ")", ".", "to_dict", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "df.set_index('id').to_dict()", "decano_code": "df.set_index('id').to_dict()", "raw_code": "df.set_index('id').to_dict()", "str_map": {}}
{"src": ["convert", "pandas", "dataframe", "df", "with", "fields", "_STR:0_", ",", "_STR:1_", "to", "dictionary"], "token": ["df", ".", "set_index", "(", "\" _STR:0_ \"", ")", "[", "\" _STR:1_ \"", "]", ".", "to_dict", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "df.set_index(\" _STR:0_ \")[\" _STR:1_ \"].to_dict()", "decano_code": "df.set_index(\" _STR:0_ \")[\" _STR:1_ \"].to_dict()", "raw_code": "df.set_index('id')['value'].to_dict()", "str_map": {"id": "_STR:0_", "value": "_STR:1_"}}
{"src": ["can", "i", "sort", "text", "by", "its", "numeric", "value", "in", "python", "?"], "token": ["sorted", "(", "list", "(", "mydict", ".", "items", "(", ")", ")", ",", "key", "=", "lambda", "a", ":", "map", "(", "int", ",", "a", "[", "0", "]", ".", "split", "(", "'.'", ")", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "sorted(list(mydict.items()), key=lambda a: map(int, a[0].split('.')))", "decano_code": "sorted(list(mydict.items()), key=lambda a: map(int, a[0].split('.')))", "raw_code": "sorted(list(mydict.items()), key=lambda a: map(int, a[0].split('.')))", "str_map": {}}
{"src": ["remove", "parentheses", "and", "text", "within", "it", "in", "string", "filename"], "token": ["re", ".", "sub", "(", "'\\\\([^)]*\\\\)'", ",", "''", ",", "filename", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.sub('\\\\([^)]*\\\\)', '', filename)", "decano_code": "re.sub('\\\\([^)]*\\\\)', '', filename)", "raw_code": "re.sub('\\\\([^)]*\\\\)', '', filename)", "str_map": {}}
{"src": ["check", "if", "string", "_STR:0_", "only", "contains", "letters", "and", "spaces"], "token": ["\" _STR:0_ \"", ".", "replace", "(", "' '", ",", "''", ")", ".", "isalpha", "(", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "\" _STR:0_ \".replace(' ', '').isalpha()", "decano_code": "\" _STR:0_ \".replace(' ', '').isalpha()", "raw_code": "\"\"\"a b\"\"\".replace(' ', '').isalpha()", "str_map": {"a b": "_STR:0_"}}
{"src": ["sum", "each", "element", "x", "in", "list", "first", "with", "element", "y", "at", "the", "same", "index", "in", "list", "second", "."], "token": ["[", "(", "x", "+", "y", ")", "for", "x", ",", "y", "in", "zip", "(", "first", ",", "second", ")", "]"], "type": ["OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "[(x + y) for x, y in zip(first, second)]", "decano_code": "[(x + y) for x, y in zip(first, second)]", "raw_code": "[(x + y) for x, y in zip(first, second)]", "str_map": {}}
{"src": ["sort", "a", "python", "dictionary", "a_dict", "by", "element", "1", "of", "the", "value"], "token": ["sorted", "(", "list", "(", "a_dict", ".", "items", "(", ")", ")", ",", "key", "=", "lambda", "item", ":", "item", "[", "1", "]", "[", "1", "]", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "sorted(list(a_dict.items()), key=lambda item: item[1][1])", "decano_code": "sorted(list(a_dict.items()), key=lambda item: item[1][1])", "raw_code": "sorted(list(a_dict.items()), key=lambda item: item[1][1])", "str_map": {}}
{"src": ["how", "to", "exclude", "a", "character", "from", "a", "regex", "group", "?"], "token": ["re", ".", "compile", "(", "'[^a-zA-Z0-9-]+'", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "STRING", "OP"], "cano_code": "re.compile('[^a-zA-Z0-9-]+')", "decano_code": "re.compile('[^a-zA-Z0-9-]+')", "raw_code": "re.compile('[^a-zA-Z0-9-]+')", "str_map": {}}
{"src": ["get", "index", "of", "the", "biggest", "2", "values", "of", "a", "list", "a"], "token": ["sorted", "(", "list", "(", "range", "(", "len", "(", "a", ")", ")", ")", ",", "key", "=", "lambda", "i", ":", "a", "[", "i", "]", ")", "[", "-", "2", ":", "]"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "sorted(list(range(len(a))), key=lambda i: a[i])[-2:]", "decano_code": "sorted(list(range(len(a))), key=lambda i: a[i])[-2:]", "raw_code": "sorted(list(range(len(a))), key=lambda i: a[i])[-2:]", "str_map": {}}
{"src": ["get", "indexes", "of", "the", "largest", "2", "values", "from", "a", "list", "a", "using", "itemgetter"], "token": ["zip", "(", "*", "sorted", "(", "enumerate", "(", "a", ")", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ")", ")", "[", "0", "]", "[", "-", "2", ":", "]"], "type": ["KEYWORD", "OP", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "zip(*sorted(enumerate(a), key=operator.itemgetter(1)))[0][-2:]", "decano_code": "zip(*sorted(enumerate(a), key=operator.itemgetter(1)))[0][-2:]", "raw_code": "zip(*sorted(enumerate(a), key=operator.itemgetter(1)))[0][-2:]", "str_map": {}}
{"src": ["get", "the", "indexes", "of", "the", "largest", "2", "values", "from", "a", "list", "of", "integers", "a"], "token": ["sorted", "(", "list", "(", "range", "(", "len", "(", "a", ")", ")", ")", ",", "key", "=", "lambda", "i", ":", "a", "[", "i", "]", ",", "reverse", "=", "True", ")", "[", ":", "2", "]"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "KEYWORD", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "sorted(list(range(len(a))), key=lambda i: a[i], reverse=True)[:2]", "decano_code": "sorted(list(range(len(a))), key=lambda i: a[i], reverse=True)[:2]", "raw_code": "sorted(list(range(len(a))), key=lambda i: a[i], reverse=True)[:2]", "str_map": {}}
{"src": ["get", "index", "of", "key", "_STR:0_", "in", "dictionary", "x"], "token": ["list", "(", "x", ".", "keys", "(", ")", ")", ".", "index", "(", "\" _STR:0_ \"", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "list(x.keys()).index(\" _STR:0_ \")", "decano_code": "list(x.keys()).index(\" _STR:0_ \")", "raw_code": "list(x.keys()).index('c')", "str_map": {"c": "_STR:0_"}}
{"src": ["print", "+1", "using", "format", "_STR:0_"], "token": ["print", "(", "\" _STR:0_ \"", ".", "format", "(", "score", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "print(\" _STR:0_ \".format(score))", "decano_code": "print(\" _STR:0_ \".format(score))", "raw_code": "print('{0:+d}'.format(score))", "str_map": {"{0:+d}": "_STR:0_"}}
{"src": ["remove", "adjacent", "duplicate", "elements", "from", "a", "list", "[1, 2, 2, 3, 2, 2, 4", "]"], "token": ["[", "k", "for", "k", ",", "g", "in", "itertools", ".", "groupby", "(", "[", "1", ",", "2", ",", "2", ",", "3", ",", "2", ",", "2", ",", "4", "]", ")", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "[k for k, g in itertools.groupby([1, 2, 2, 3, 2, 2, 4])]", "decano_code": "[k for k, g in itertools.groupby([1, 2, 2, 3, 2, 2, 4])]", "raw_code": "[k for k, g in itertools.groupby([1, 2, 2, 3, 2, 2, 4])]", "str_map": {}}
{"src": ["split", "string", "_STR:0_", "based", "on", "delimiter", "_STR:1_"], "token": ["\" _STR:0_ \"", ".", "split", "(", "\" _STR:1_ \"", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "\" _STR:0_ \".split(\" _STR:1_ \")", "decano_code": "\" _STR:0_ \".split(\" _STR:1_ \")", "raw_code": "\"\"\"0,1,2\"\"\".split(',')", "str_map": {"0,1,2": "_STR:0_", ",": "_STR:1_"}}
{"src": ["convert", "the", "string", "_STR:0_", "to", "a", "list", "of", "integers"], "token": ["[", "int", "(", "x", ")", "for", "x", "in", "\" _STR:0_ \"", ".", "split", "(", "','", ")", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "STRING", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "[int(x) for x in \" _STR:0_ \".split(',')]", "decano_code": "[int(x) for x in \" _STR:0_ \".split(',')]", "raw_code": "[int(x) for x in '0,1,2'.split(',')]", "str_map": {"0,1,2": "_STR:0_"}}
{"src": ["convert", "list", "of", "key-value", "tuples", "[('A', 1), ('B', 2), ('C', 3)", "]", "into", "dictionary"], "token": ["dict", "(", "[", "(", "'A'", ",", "1", ")", ",", "(", "'B'", ",", "2", ")", ",", "(", "'C'", ",", "3", ")", "]", ")"], "type": ["KEYWORD", "OP", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "dict([('A', 1), ('B', 2), ('C', 3)])", "decano_code": "dict([('A', 1), ('B', 2), ('C', 3)])", "raw_code": "dict([('A', 1), ('B', 2), ('C', 3)])", "str_map": {}}
{"src": ["save", "numpy", "array", "x", "into", "text", "file", "_STR:0_"], "token": ["np", ".", "savetxt", "(", "\" _STR:0_ \"", ",", "x", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "np.savetxt(\" _STR:0_ \", x)", "decano_code": "np.savetxt(\" _STR:0_ \", x)", "raw_code": "np.savetxt('test.txt', x)", "str_map": {"test.txt": "_STR:0_"}}
{"src": ["store", "the", "output", "of", "command", "_STR:0_", "in", "variable", "direct_output"], "token": ["direct_output", "=", "subprocess", ".", "check_output", "(", "\" _STR:0_ \"", ",", "shell", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "direct_output = subprocess.check_output(\" _STR:0_ \", shell=True)", "decano_code": "direct_output = subprocess.check_output(\" _STR:0_ \", shell=True)", "raw_code": "direct_output = subprocess.check_output('ls', shell=True)", "str_map": {"ls": "_STR:0_"}}
{"src": ["get", "all", "column", "name", "of", "dataframe", "df", "except", "for", "column", "_STR:0_"], "token": ["df", "[", "df", ".", "columns", "-", "[", "\" _STR:0_ \"", "]", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "OP"], "cano_code": "df[df.columns - [\" _STR:0_ \"]]", "decano_code": "df[df.columns - [\" _STR:0_ \"]]", "raw_code": "df[df.columns - ['T1_V6']]", "str_map": {"T1_V6": "_STR:0_"}}
{"src": ["get", "count", "of", "values", "in", "numpy", "array", "a", "that", "are", "between", "values", "25", "and", "100"], "token": ["(", "(", "25", "<", "a", ")", "&", "(", "a", "<", "100", ")", ")", ".", "sum", "(", ")"], "type": ["OP", "OP", "NUMBER", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "KEYWORD", "OP", "OP"], "cano_code": "((25 < a) & (a < 100)).sum()", "decano_code": "((25 < a) & (a < 100)).sum()", "raw_code": "((25 < a) & (a < 100)).sum()", "str_map": {}}
{"src": ["get", "day", "name", "from", "a", "datetime", "object"], "token": ["date", ".", "today", "(", ")", ".", "strftime", "(", "'%A'", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "date.today().strftime('%A')", "decano_code": "date.today().strftime('%A')", "raw_code": "date.today().strftime('%A')", "str_map": {}}
{"src": ["python", "regular", "expression", "match", "whole", "word"], "token": ["re", ".", "search", "(", "'\\\\bis\\\\b'", ",", "your_string", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.search('\\\\bis\\\\b', your_string)", "decano_code": "re.search('\\\\bis\\\\b', your_string)", "raw_code": "re.search('\\\\bis\\\\b', your_string)", "str_map": {}}
{"src": ["jinja", "parse", "datetime", "object", "car.date_of_manufacture", "[", "car", ".", "date_of_manufacture", "]", "to", "use", "format", "pattern", "datetime"], "token": ["{", "{", "car", ".", "date_of_manufacture", "|", "datetime", "}", "}"], "type": ["OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "{{car.date_of_manufacture | datetime}}", "decano_code": "{{car.date_of_manufacture | datetime}}", "raw_code": "{{car.date_of_manufacture | datetime}}", "str_map": {}}
{"src": ["get", "the", "date", "object", "date_of_manufacture", "of", "object", "car", "in", "string", "format", "_STR:0_"], "token": ["{", "{", "car", ".", "date_of_manufacture", ".", "strftime", "(", "\" _STR:0_ \"", ")", "}", "}"], "type": ["OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "{{car.date_of_manufacture.strftime(\" _STR:0_ \")}}", "decano_code": "{{car.date_of_manufacture.strftime(\" _STR:0_ \")}}", "raw_code": "{{car.date_of_manufacture.strftime('%Y-%m-%d')}}", "str_map": {"%Y-%m-%d": "_STR:0_"}}
{"src": ["make", "a", "flat", "list", "from", "list", "of", "lists", "sublist"], "token": ["[", "item", "for", "sublist", "in", "l", "for", "item", "in", "sublist", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[item for sublist in l for item in sublist]", "decano_code": "[item for sublist in l for item in sublist]", "raw_code": "[item for sublist in l for item in sublist]", "str_map": {}}
{"src": ["make", "a", "flat", "list", "from", "list", "of", "lists", "list2d"], "token": ["list", "(", "itertools", ".", "chain", "(", "*", "list2d", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "list(itertools.chain(*list2d))", "decano_code": "list(itertools.chain(*list2d))", "raw_code": "list(itertools.chain(*list2d))", "str_map": {}}
{"src": ["make", "a", "flat", "list", "from", "list", "of", "lists", "list2d"], "token": ["list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "list2d", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "list(itertools.chain.from_iterable(list2d))", "decano_code": "list(itertools.chain.from_iterable(list2d))", "raw_code": "list(itertools.chain.from_iterable(list2d))", "str_map": {}}
{"src": ["convert", "ascii", "value", "_STR:0_", "to", "int"], "token": ["ord", "(", "\" _STR:0_ \"", ")"], "type": ["KEYWORD", "OP", "STRING", "OP"], "cano_code": "ord(\" _STR:0_ \")", "decano_code": "ord(\" _STR:0_ \")", "raw_code": "ord('a')", "str_map": {"a": "_STR:0_"}}
{"src": ["replace", "white", "spaces", "in", "string", "_STR:0_", "with", "empty", "string", "_STR:1_"], "token": ["re", ".", "sub", "(", "'(?m)^[^\\\\S\\\\n]+'", ",", "\" _STR:1_ \"", ",", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.sub('(?m)^[^\\\\S\\\\n]+', \" _STR:1_ \", \" _STR:0_ \")", "decano_code": "re.sub('(?m)^[^\\\\S\\\\n]+', \" _STR:1_ \", \" _STR:0_ \")", "raw_code": "re.sub('(?m)^[^\\\\S\\\\n]+', '', '  a\\n b\\n c\\nd  e')", "str_map": {"  a\n b\n c\nd  e": "_STR:0_", "": "_STR:1_"}}
{"src": ["remove", "white", "spaces", "from", "all", "the", "lines", "using", "a", "regular", "expression", "in", "string", "_STR:0_"], "token": ["re", ".", "sub", "(", "'(?m)^\\\\s+'", ",", "''", ",", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.sub('(?m)^\\\\s+', '', \" _STR:0_ \")", "decano_code": "re.sub('(?m)^\\\\s+', '', \" _STR:0_ \")", "raw_code": "re.sub('(?m)^\\\\s+', '', 'a\\n b\\n c')", "str_map": {"a\n b\n c": "_STR:0_"}}
{"src": ["destruct", "elements", "of", "list", "[1, 2, 3", "]", "to", "variables", "a", ",", "b", "and", "c"], "token": ["a", ",", "b", ",", "c", "=", "[", "1", ",", "2", ",", "3", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "a, b, c = [1, 2, 3]", "decano_code": "a, b, c = [1, 2, 3]", "raw_code": "a, b, c = [1, 2, 3]", "str_map": {}}
{"src": ["split", "list", "mylist", "into", "a", "list", "of", "lists", "whose", "elements", "have", "the", "same", "first", "five", "characters"], "token": ["[", "list", "(", "v", ")", "for", "k", ",", "v", "in", "itertools", ".", "groupby", "(", "mylist", ",", "key", "=", "lambda", "x", ":", "x", "[", ":", "5", "]", ")", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "[list(v) for k, v in itertools.groupby(mylist, key=lambda x: x[:5])]", "decano_code": "[list(v) for k, v in itertools.groupby(mylist, key=lambda x: x[:5])]", "raw_code": "[list(v) for k, v in itertools.groupby(mylist, key=lambda x: x[:5])]", "str_map": {}}
{"src": ["remove", "all", "instances", "of", "parenthesesis", "containing", "text", "beginning", "with", "as ", "from", "string", "line"], "token": ["line", "=", "re", ".", "sub", "(", "'\\\\(+as .*?\\\\) '", ",", "''", ",", "line", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "line = re.sub('\\\\(+as .*?\\\\) ', '', line)", "decano_code": "line = re.sub('\\\\(+as .*?\\\\) ', '', line)", "raw_code": "line = re.sub('\\\\(+as .*?\\\\) ', '', line)", "str_map": {}}
{"src": ["skip", "the", "newline", "while", "printing", "line"], "token": ["print", "(", "line", ".", "rstrip", "(", "'\\n'", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "print(line.rstrip('\\n'))", "decano_code": "print(line.rstrip('\\n'))", "raw_code": "print(line.rstrip('\\n'))", "str_map": {}}
{"src": ["get", "index", "values", "of", "pandas", "dataframe", "df", "as", "list"], "token": ["df", ".", "index", ".", "values", ".", "tolist", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "df.index.values.tolist()", "decano_code": "df.index.values.tolist()", "raw_code": "df.index.values.tolist()", "str_map": {}}
{"src": ["check", "if", "list", "a", "is", "empty"], "token": ["if", "(", "not", "a", ")", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "OP", "KEYWORD", "NAME", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "if (not a):\n    pass", "decano_code": "if (not a):\n    pass", "raw_code": "if (not a):\n    pass", "str_map": {}}
{"src": ["check", "if", "list", "seq", "is", "empty"], "token": ["if", "(", "not", "seq", ")", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "OP", "KEYWORD", "NAME", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "if (not seq):\n    pass", "decano_code": "if (not seq):\n    pass", "raw_code": "if (not seq):\n    pass", "str_map": {}}
{"src": ["check", "if", "list", "li", "is", "empty"], "token": ["if", "(", "len", "(", "li", ")", "==", "0", ")", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "if (len(li) == 0):\n    pass", "decano_code": "if (len(li) == 0):\n    pass", "raw_code": "if (len(li) == 0):\n    pass", "str_map": {}}
{"src": ["create", "a", "list", "containing", "the", "indices", "of", "elements", "greater", "than", "4", "in", "list", "a"], "token": ["[", "i", "for", "i", ",", "v", "in", "enumerate", "(", "a", ")", "if", "v", ">", "4", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NUMBER", "OP"], "cano_code": "[i for i, v in enumerate(a) if v > 4]", "decano_code": "[i for i, v in enumerate(a) if v > 4]", "raw_code": "[i for i, v in enumerate(a) if v > 4]", "str_map": {}}
{"src": ["reverse", "list", "yourdata"], "token": ["sorted", "(", "yourdata", ",", "reverse", "=", "True", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "sorted(yourdata, reverse=True)", "decano_code": "sorted(yourdata, reverse=True)", "raw_code": "sorted(yourdata, reverse=True)", "str_map": {}}
{"src": ["sort", "list", "of", "nested", "dictionaries", "yourdata", "in", "reverse", "based", "on", "values", "associated", "with", "each", "dictionary", "'", "s", "key", "_STR:0_"], "token": ["sorted", "(", "yourdata", ",", "key", "=", "lambda", "d", ":", "d", ".", "get", "(", "'key'", ",", "{", "}", ")", ".", "get", "(", "\" _STR:0_ \"", ")", ",", "reverse", "=", "True", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "sorted(yourdata, key=lambda d: d.get('key', {}).get(\" _STR:0_ \"), reverse=True)", "decano_code": "sorted(yourdata, key=lambda d: d.get('key', {}).get(\" _STR:0_ \"), reverse=True)", "raw_code": "sorted(yourdata, key=lambda d: d.get('key', {}).get('subkey'), reverse=True)", "str_map": {"subkey": "_STR:0_"}}
{"src": ["sort", "list", "of", "nested", "dictionaries", "yourdata", "in", "reverse", "order", "of", "_STR:0_", "and", "_STR:1_"], "token": ["yourdata", ".", "sort", "(", "key", "=", "lambda", "e", ":", "e", "[", "\" _STR:0_ \"", "]", "[", "\" _STR:1_ \"", "]", ",", "reverse", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "yourdata.sort(key=lambda e: e[\" _STR:0_ \"][\" _STR:1_ \"], reverse=True)", "decano_code": "yourdata.sort(key=lambda e: e[\" _STR:0_ \"][\" _STR:1_ \"], reverse=True)", "raw_code": "yourdata.sort(key=lambda e: e['key']['subkey'], reverse=True)", "str_map": {"key": "_STR:0_", "subkey": "_STR:1_"}}
{"src": ["remove", "decimal", "points", "in", "pandas", "data", "frame", "using", "round"], "token": ["df", ".", "round", "(", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "OP"], "cano_code": "df.round()", "decano_code": "df.round()", "raw_code": "df.round()", "str_map": {}}
{"src": ["get", "data", "from", "matplotlib", "plot"], "token": ["gca", "(", ")", ".", "get_lines", "(", ")", "[", "n", "]", ".", "get_xydata", "(", ")"], "type": ["NAME", "OP", "OP", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "gca().get_lines()[n].get_xydata()", "decano_code": "gca().get_lines()[n].get_xydata()", "raw_code": "gca().get_lines()[n].get_xydata()", "str_map": {}}
{"src": ["get", "the", "maximum", "2", "values", "per", "row", "in", "array", "a"], "token": ["A", "[", ":", ",", "-", "2", ":", "]"], "type": ["NAME", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "A[:, -2:]", "decano_code": "A[:, -2:]", "raw_code": "A[:, -2:]", "str_map": {}}
{"src": ["get", "value", "for", "_STR:0_", "parameter", "in", "GET", "request", "in", "django"], "token": ["request", ".", "GET", ".", "get", "(", "\" _STR:0_ \"", ",", "''", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "request.GET.get(\" _STR:0_ \", '')", "decano_code": "request.GET.get(\" _STR:0_ \", '')", "raw_code": "request.GET.get('username', '')", "str_map": {"username": "_STR:0_"}}
{"src": ["pretty-print", "ordered", "dictionary", "o"], "token": ["pprint", "(", "dict", "(", "list", "(", "o", ".", "items", "(", ")", ")", ")", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "OP"], "cano_code": "pprint(dict(list(o.items())))", "decano_code": "pprint(dict(list(o.items())))", "raw_code": "pprint(dict(list(o.items())))", "str_map": {}}
{"src": ["confirm", "urls", "in", "django", "properly"], "token": ["url", "(", "'^$'", ",", "include", "(", "'sms.urls'", ")", ")", ","], "type": ["NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "url('^$', include('sms.urls')),", "decano_code": "url('^$', include('sms.urls')),", "raw_code": "url('^$', include('sms.urls')),", "str_map": {}}
{"src": ["configure", "url", "in", "django", "properly"], "token": ["url", "(", "'^'", ",", "include", "(", "'sms.urls'", ")", ")", ","], "type": ["NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "url('^', include('sms.urls')),", "decano_code": "url('^', include('sms.urls')),", "raw_code": "url('^', include('sms.urls')),", "str_map": {}}
{"src": ["get", "the", "tuple", "in", "list", "a_list", "that", "has", "the", "largest", "item", "in", "the", "second", "index"], "token": ["max_item", "=", "max", "(", "a_list", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "max_item = max(a_list, key=operator.itemgetter(1))", "decano_code": "max_item = max(a_list, key=operator.itemgetter(1))", "raw_code": "max_item = max(a_list, key=operator.itemgetter(1))", "str_map": {}}
{"src": ["find", "tuple", "in", "list", "of", "tuples", "a_list", "with", "the", "largest", "second", "element"], "token": ["max", "(", "a_list", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "max(a_list, key=operator.itemgetter(1))", "decano_code": "max(a_list, key=operator.itemgetter(1))", "raw_code": "max(a_list, key=operator.itemgetter(1))", "str_map": {}}
{"src": ["resample", "series", "s", "into", "3", "months", "bins", "and", "sum", "each", "bin"], "token": ["s", ".", "resample", "(", "'3M'", ",", "how", "=", "'sum'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "s.resample('3M', how='sum')", "decano_code": "s.resample('3M', how='sum')", "raw_code": "s.resample('3M', how='sum')", "str_map": {}}
{"src": ["extract", "elements", "at", "indices", "(1", ",", "2", ",", "5", ")", "from", "a", "list", "a"], "token": ["[", "a", "[", "i", "]", "for", "i", "in", "(", "1", ",", "2", ",", "5", ")", "]"], "type": ["OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "[a[i] for i in (1, 2, 5)]", "decano_code": "[a[i] for i in (1, 2, 5)]", "raw_code": "[a[i] for i in (1, 2, 5)]", "str_map": {}}
{"src": ["filter", "lines", "from", "a", "text", "file", "_STR:0_", "which", "contain", "a", "word", "_STR:1_"], "token": ["[", "line", "for", "line", "in", "open", "(", "\" _STR:0_ \"", ")", "if", "\" _STR:1_ \"", "in", "line", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "STRING", "OP", "KEYWORD", "STRING", "KEYWORD", "NAME", "OP"], "cano_code": "[line for line in open(\" _STR:0_ \") if \" _STR:1_ \" in line]", "decano_code": "[line for line in open(\" _STR:0_ \") if \" _STR:1_ \" in line]", "raw_code": "[line for line in open('textfile') if 'apple' in line]", "str_map": {"textfile": "_STR:0_", "apple": "_STR:1_"}}
{"src": ["convert", "a", "date", "string", "s", "to", "a", "datetime", "object"], "token": ["datetime", ".", "datetime", ".", "strptime", "(", "s", ",", "'%Y-%m-%dT%H:%M:%SZ'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "datetime.datetime.strptime(s, '%Y-%m-%dT%H:%M:%SZ')", "decano_code": "datetime.datetime.strptime(s, '%Y-%m-%dT%H:%M:%SZ')", "raw_code": "datetime.datetime.strptime(s, '%Y-%m-%dT%H:%M:%SZ')", "str_map": {}}
{"src": ["reading", "tab-delimited", "csv", "file", "filename", "with", "pandas", "on", "mac"], "token": ["pandas", ".", "read_csv", "(", "filename", ",", "sep", "=", "'\\t'", ",", "lineterminator", "=", "'\\r'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "pandas.read_csv(filename, sep='\\t', lineterminator='\\r')", "decano_code": "pandas.read_csv(filename, sep='\\t', lineterminator='\\r')", "raw_code": "pandas.read_csv(filename, sep='\\t', lineterminator='\\r')", "str_map": {}}
{"src": ["replace", "only", "first", "occurence", "of", "string", "TEST", "from", "a", "string", "longlongTESTstringTEST"], "token": ["'longlongTESTstringTEST'", ".", "replace", "(", "'TEST'", ",", "'?'", ",", "1", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NUMBER", "OP"], "cano_code": "'longlongTESTstringTEST'.replace('TEST', '?', 1)", "decano_code": "'longlongTESTstringTEST'.replace('TEST', '?', 1)", "raw_code": "'longlongTESTstringTEST'.replace('TEST', '?', 1)", "str_map": {}}
{"src": ["zip", "file", "pdffile", "using", "its", "basename", "as", "directory", "name"], "token": ["archive", ".", "write", "(", "pdffile", ",", "os", ".", "path", ".", "basename", "(", "pdffile", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "archive.write(pdffile, os.path.basename(pdffile))", "decano_code": "archive.write(pdffile, os.path.basename(pdffile))", "raw_code": "archive.write(pdffile, os.path.basename(pdffile))", "str_map": {}}
{"src": ["create", "a", "dictionary", "of", "pairs", "from", "a", "list", "of", "tuples", "myListOfTuples"], "token": ["dict", "(", "x", "[", "1", ":", "]", "for", "x", "in", "reversed", "(", "myListOfTuples", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "dict(x[1:] for x in reversed(myListOfTuples))", "decano_code": "dict(x[1:] for x in reversed(myListOfTuples))", "raw_code": "dict(x[1:] for x in reversed(myListOfTuples))", "str_map": {}}
{"src": ["subtract", "elements", "of", "list", "List1", "from", "elements", "of", "list", "List2"], "token": ["[", "(", "x1", "-", "x2", ")", "for", "x1", ",", "x2", "in", "zip", "(", "List1", ",", "List2", ")", "]"], "type": ["OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "[(x1 - x2) for x1, x2 in zip(List1, List2)]", "decano_code": "[(x1 - x2) for x1, x2 in zip(List1, List2)]", "raw_code": "[(x1 - x2) for x1, x2 in zip(List1, List2)]", "str_map": {}}
{"src": ["check", "if", "string", "string", "starts", "with", "a", "number"], "token": ["string", "[", "0", "]", ".", "isdigit", "(", ")"], "type": ["NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "string[0].isdigit()", "decano_code": "string[0].isdigit()", "raw_code": "string[0].isdigit()", "str_map": {}}
{"src": ["check", "if", "string", "strg", "starts", "with", "any", "of", "the", "elements", "in", "list", "('0'", ",", "_STR:0_", ",", "_STR:1_", ",", "_STR:2_", ",", "_STR:3_", ",", "_STR:4_", ",", "_STR:5_", ",", "_STR:6_", ",", "_STR:7_", ",", "_STR:8_", ")"], "token": ["strg", ".", "startswith", "(", "(", "'0'", ",", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ",", "\" _STR:2_ \"", ",", "\" _STR:3_ \"", ",", "\" _STR:4_ \"", ",", "\" _STR:5_ \"", ",", "\" _STR:6_ \"", ",", "\" _STR:7_ \"", ",", "\" _STR:8_ \"", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "strg.startswith(('0', \" _STR:0_ \", \" _STR:1_ \", \" _STR:2_ \", \" _STR:3_ \", \" _STR:4_ \", \" _STR:5_ \", \" _STR:6_ \", \" _STR:7_ \", \" _STR:8_ \"))", "decano_code": "strg.startswith(('0', \" _STR:0_ \", \" _STR:1_ \", \" _STR:2_ \", \" _STR:3_ \", \" _STR:4_ \", \" _STR:5_ \", \" _STR:6_ \", \" _STR:7_ \", \" _STR:8_ \"))", "raw_code": "strg.startswith(('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'))", "str_map": {"1": "_STR:0_", "2": "_STR:1_", "3": "_STR:2_", "4": "_STR:3_", "5": "_STR:4_", "6": "_STR:5_", "7": "_STR:6_", "8": "_STR:7_", "9": "_STR:8_"}}
{"src": ["print", "script", "'", "s", "directory"], "token": ["print", "(", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "realpath", "(", "__file__", ")", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "print(os.path.dirname(os.path.realpath(__file__)))", "decano_code": "print(os.path.dirname(os.path.realpath(__file__)))", "raw_code": "print(os.path.dirname(os.path.realpath(__file__)))", "str_map": {}}
{"src": ["split", "string", "text", "by", "the", "occurrences", "of", "regex", "pattern", "_STR:0_"], "token": ["re", ".", "split", "(", "\" _STR:0_ \"", ",", "text", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.split(\" _STR:0_ \", text)", "decano_code": "re.split(\" _STR:0_ \", text)", "raw_code": "re.split('(?<=\\\\?|!|\\\\.)\\\\s{0,2}(?=[A-Z]|$)', text)", "str_map": {"(?<=\\?|!|\\.)\\s{0,2}(?=[A-Z]|$)": "_STR:0_"}}
{"src": ["make", "a", "scatter", "plot", "using", "unpacked", "values", "of", "list", "li"], "token": ["plt", ".", "scatter", "(", "*", "zip", "(", "*", "li", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "plt.scatter(*zip(*li))", "decano_code": "plt.scatter(*zip(*li))", "raw_code": "plt.scatter(*zip(*li))", "str_map": {}}
{"src": ["rearrange", "tuple", "of", "tuples", "t"], "token": ["tuple", "(", "zip", "(", "*", "t", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "tuple(zip(*t))", "decano_code": "tuple(zip(*t))", "raw_code": "tuple(zip(*t))", "str_map": {}}
{"src": ["get", "average", "for", "every", "three", "columns", "in", "df", "dataframe"], "token": ["df", ".", "groupby", "(", "np", ".", "arange", "(", "len", "(", "df", ".", "columns", ")", ")", "//", "3", ",", "axis", "=", "1", ")", ".", "mean", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "df.groupby(np.arange(len(df.columns)) // 3, axis=1).mean()", "decano_code": "df.groupby(np.arange(len(df.columns)) // 3, axis=1).mean()", "raw_code": "df.groupby(np.arange(len(df.columns)) // 3, axis=1).mean()", "str_map": {}}
{"src": ["convert", "a", "list", "l", "of", "ascii", "values", "to", "a", "string"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "chr", "(", "i", ")", "for", "i", "in", "L", ")"], "type": ["STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "\"\"\"\"\"\".join(chr(i) for i in L)", "decano_code": "\"\"\"\"\"\".join(chr(i) for i in L)", "raw_code": "\"\"\"\"\"\".join(chr(i) for i in L)", "str_map": {}}
{"src": ["count", "the", "number", "of", "pairs", "in", "dictionary", "d", "whose", "value", "equal", "to", "chosen_value"], "token": ["sum", "(", "x", "==", "chosen_value", "for", "x", "in", "list", "(", "d", ".", "values", "(", ")", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "sum(x == chosen_value for x in list(d.values()))", "decano_code": "sum(x == chosen_value for x in list(d.values()))", "raw_code": "sum(x == chosen_value for x in list(d.values()))", "str_map": {}}
{"src": ["count", "the", "number", "of", "values", "in", "d", "dictionary", "that", "are", "predicate", "to", "function", "some_condition"], "token": ["sum", "(", "1", "for", "x", "in", "list", "(", "d", ".", "values", "(", ")", ")", "if", "some_condition", "(", "x", ")", ")"], "type": ["KEYWORD", "OP", "NUMBER", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "sum(1 for x in list(d.values()) if some_condition(x))", "decano_code": "sum(1 for x in list(d.values()) if some_condition(x))", "raw_code": "sum(1 for x in list(d.values()) if some_condition(x))", "str_map": {}}
{"src": ["convert", "double", "0.00582811585976", "[", "0", ".", "00582811585976", "]", "to", "float"], "token": ["struct", ".", "unpack", "(", "'f'", ",", "struct", ".", "pack", "(", "'f'", ",", "0.00582811585976", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NUMBER", "OP", "OP"], "cano_code": "struct.unpack('f', struct.pack('f', 0.00582811585976))", "decano_code": "struct.unpack('f', struct.pack('f', 0.00582811585976))", "raw_code": "struct.unpack('f', struct.pack('f', 0.00582811585976))", "str_map": {}}
{"src": ["convert", "datetime.date", "[", "datetime", ".", "date", "]", "dt", "to", "utc", "timestamp"], "token": ["timestamp", "=", "(", "dt", "-", "datetime", "(", "1970", ",", "1", ",", "1", ")", ")", ".", "total_seconds", "(", ")"], "type": ["NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "timestamp = (dt - datetime(1970, 1, 1)).total_seconds()", "decano_code": "timestamp = (dt - datetime(1970, 1, 1)).total_seconds()", "raw_code": "timestamp = (dt - datetime(1970, 1, 1)).total_seconds()", "str_map": {}}
{"src": ["sort", "column", "m", "in", "panda", "dataframe", "df"], "token": ["df", ".", "sort", "(", "'m'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df.sort('m')", "decano_code": "df.sort('m')", "raw_code": "df.sort('m')", "str_map": {}}
{"src": ["sort", "a", "data", "a", "in", "descending", "order", "based", "on", "the", "modified", "attribute", "of", "elements", "using", "lambda", "function"], "token": ["a", "=", "sorted", "(", "a", ",", "key", "=", "lambda", "x", ":", "x", ".", "modified", ",", "reverse", "=", "True", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "a = sorted(a, key=lambda x: x.modified, reverse=True)", "decano_code": "a = sorted(a, key=lambda x: x.modified, reverse=True)", "raw_code": "a = sorted(a, key=lambda x: x.modified, reverse=True)", "str_map": {}}
{"src": ["print", "the", "truth", "value", "of", "a"], "token": ["print", "(", "bool", "(", "a", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "print(bool(a))", "decano_code": "print(bool(a))", "raw_code": "print(bool(a))", "str_map": {}}
{"src": ["rename", "last", "row", "index", "label", "in", "dataframe", "df", "to", "a"], "token": ["df", "=", "df", ".", "rename", "(", "index", "=", "{", "last", ":", "'a'", "}", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "df = df.rename(index={last: 'a'})", "decano_code": "df = df.rename(index={last: 'a'})", "raw_code": "df = df.rename(index={last: 'a'})", "str_map": {}}
{"src": ["fit", "kmeans", "function", "to", "a", "one-dimensional", "array", "x", "by", "reshaping", "it", "to", "be", "a", "multidimensional", "array", "of", "single", "values"], "token": ["km", ".", "fit", "(", "x", ".", "reshape", "(", "-", "1", ",", "1", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "km.fit(x.reshape(-1, 1))", "decano_code": "km.fit(x.reshape(-1, 1))", "raw_code": "km.fit(x.reshape(-1, 1))", "str_map": {}}
{"src": ["sort", "a", "list", "of", "strings", "_STR:0_", "such", "that", "items", "starting", "with", "_STR:1_", "come", "first", "."], "token": ["sorted", "(", "words", ",", "key", "=", "lambda", "x", ":", "'a'", "+", "x", "if", "x", ".", "startswith", "(", "\" _STR:1_ \"", ")", "else", "'b'", "+", "x", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "STRING", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "STRING", "OP", "NAME", "OP"], "cano_code": "sorted(words, key=lambda x: 'a' + x if x.startswith(\" _STR:1_ \") else 'b' + x)", "decano_code": "sorted(words, key=lambda x: 'a' + x if x.startswith(\" _STR:1_ \") else 'b' + x)", "raw_code": "sorted(words, key=lambda x: 'a' + x if x.startswith('s') else 'b' + x)", "str_map": {"words": "_STR:0_", "s": "_STR:1_"}}
{"src": ["open", "the", "login", "site", "_STR:0_", "in", "the", "browser"], "token": ["webbrowser", ".", "open", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "STRING", "OP"], "cano_code": "webbrowser.open(\" _STR:0_ \")", "decano_code": "webbrowser.open(\" _STR:0_ \")", "raw_code": "webbrowser.open('http://somesite.com/adminpanel/index.php')", "str_map": {"http://somesite.com/adminpanel/index.php": "_STR:0_"}}
{"src": ["fetch", "all", "elements", "in", "a", "dictionary", "parent_dict", ",", "falling", "between", "two", "keys", "2", "and", "4"], "token": ["dict", "(", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "parent_dict", ".", "items", "(", ")", "if", "2", "<", "k", "<", "4", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NUMBER", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "dict((k, v) for k, v in parent_dict.items() if 2 < k < 4)", "decano_code": "dict((k, v) for k, v in parent_dict.items() if 2 < k < 4)", "raw_code": "dict((k, v) for k, v in parent_dict.items() if 2 < k < 4)", "str_map": {}}
{"src": ["fetch", "all", "elements", "in", "a", "dictionary", "_STR:0_", "where", "the", "key", "is", "between", "the", "range", "of", "2", "to", "4"], "token": ["dict", "(", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "parent_dict", ".", "items", "(", ")", "if", "k", ">", "2", "and", "k", "<", "4", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "OP", "NUMBER", "KEYWORD", "NAME", "OP", "NUMBER", "OP"], "cano_code": "dict((k, v) for k, v in parent_dict.items() if k > 2 and k < 4)", "decano_code": "dict((k, v) for k, v in parent_dict.items() if k > 2 and k < 4)", "raw_code": "dict((k, v) for k, v in parent_dict.items() if k > 2 and k < 4)", "str_map": {"parent_dict": "_STR:0_"}}
{"src": ["sort", "two", "lists", "list1", "and", "list2", "together", "using", "lambda", "function"], "token": ["[", "list", "(", "x", ")", "for", "x", "in", "zip", "(", "*", "sorted", "(", "zip", "(", "list1", ",", "list2", ")", ",", "key", "=", "lambda", "pair", ":", "pair", "[", "0", "]", ")", ")", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "OP"], "cano_code": "[list(x) for x in zip(*sorted(zip(list1, list2), key=lambda pair: pair[0]))]", "decano_code": "[list(x) for x in zip(*sorted(zip(list1, list2), key=lambda pair: pair[0]))]", "raw_code": "[list(x) for x in zip(*sorted(zip(list1, list2), key=lambda pair: pair[0]))]", "str_map": {}}
{"src": ["get", "the", "number", "of", "values", "in", "list", "j", "that", "is", "greater", "than", "5"], "token": ["sum", "(", "(", "(", "i", ">", "5", ")", "for", "i", "in", "j", ")", ")"], "type": ["KEYWORD", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "sum(((i > 5) for i in j))", "decano_code": "sum(((i > 5) for i in j))", "raw_code": "sum(((i > 5) for i in j))", "str_map": {}}
{"src": ["get", "the", "number", "of", "values", "in", "list", "j", "that", "is", "greater", "than", "5"], "token": ["len", "(", "[", "1", "for", "i", "in", "j", "if", "(", "i", ">", "5", ")", "]", ")"], "type": ["KEYWORD", "OP", "OP", "NUMBER", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "len([1 for i in j if (i > 5)])", "decano_code": "len([1 for i in j if (i > 5)])", "raw_code": "len([1 for i in j if (i > 5)])", "str_map": {}}
{"src": ["get", "the", "number", "of", "values", "in", "list", "j", "that", "is", "greater", "than", "i"], "token": ["j", "=", "np", ".", "array", "(", "j", ")", "\n", "sum", "(", "(", "j", ">", "i", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NEWLINE", "KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "j = np.array(j)\nsum((j > i))", "decano_code": "j = np.array(j)\nsum((j > i))", "raw_code": "j = np.array(j)\nsum((j > i))", "str_map": {}}
{"src": ["zip", "list", "a", ",", "b", ",", "c", "into", "a", "list", "of", "tuples"], "token": ["[", "(", "x", "+", "tuple", "(", "y", ")", ")", "for", "x", ",", "y", "in", "zip", "(", "zip", "(", "a", ",", "b", ")", ",", "c", ")", "]"], "type": ["OP", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "[(x + tuple(y)) for x, y in zip(zip(a, b), c)]", "decano_code": "[(x + tuple(y)) for x, y in zip(zip(a, b), c)]", "raw_code": "[(x + tuple(y)) for x, y in zip(zip(a, b), c)]", "str_map": {}}
{"src": ["changing", "permission", "of", "file", "path", "to", "stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH", "[", "stat", ".", "S_IRUSR", "|", "stat", ".", "S_IRGRP", "|", "stat", ".", "S_IROTH", "]"], "token": ["os", ".", "chmod", "(", "path", ",", "stat", ".", "S_IRUSR", "|", "stat", ".", "S_IRGRP", "|", "stat", ".", "S_IROTH", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)", "decano_code": "os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)", "raw_code": "os.chmod(path, stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH)", "str_map": {}}
{"src": ["argparse", "associate", "zero", "or", "more", "arguments", "with", "flag", "_STR:0_"], "token": ["parser", ".", "add_argument", "(", "\" _STR:0_ \"", ",", "nargs", "=", "'*'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "parser.add_argument(\" _STR:0_ \", nargs='*')", "decano_code": "parser.add_argument(\" _STR:0_ \", nargs='*')", "raw_code": "parser.add_argument('file', nargs='*')", "str_map": {"file": "_STR:0_"}}
{"src": ["get", "a", "list", "of", "booleans", "z", "that", "shows", "wether", "the", "corresponding", "items", "in", "list", "x", "and", "y", "are", "equal"], "token": ["z", "=", "[", "(", "i", "==", "j", ")", "for", "i", ",", "j", "in", "zip", "(", "x", ",", "y", ")", "]"], "type": ["NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "z = [(i == j) for i, j in zip(x, y)]", "decano_code": "z = [(i == j) for i, j in zip(x, y)]", "raw_code": "z = [(i == j) for i, j in zip(x, y)]", "str_map": {}}
{"src": ["create", "a", "list", "which", "indicates", "whether", "each", "element", "in", "x", "and", "y", "is", "identical"], "token": ["[", "(", "x", "[", "i", "]", "==", "y", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "x", ")", ")", "]"], "type": ["OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "[(x[i] == y[i]) for i in range(len(x))]", "decano_code": "[(x[i] == y[i]) for i in range(len(x))]", "raw_code": "[(x[i] == y[i]) for i in range(len(x))]", "str_map": {}}
{"src": ["python", ":", "extract", "numbers", "from", "a", "string"], "token": ["[", "int", "(", "s", ")", "for", "s", "in", "re", ".", "findall", "(", "'\\\\b\\\\d+\\\\b'", ",", "\"he33llo 42 I'm a 32 string 30\"", ")", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "[int(s) for s in re.findall('\\\\b\\\\d+\\\\b', \"he33llo 42 I'm a 32 string 30\")]", "decano_code": "[int(s) for s in re.findall('\\\\b\\\\d+\\\\b', \"he33llo 42 I'm a 32 string 30\")]", "raw_code": "[int(s) for s in re.findall('\\\\b\\\\d+\\\\b', \"he33llo 42 I'm a 32 string 30\")]", "str_map": {}}
{"src": ["create", "an", "empty", "data", "frame", "df2", "with", "index", "from", "another", "data", "frame", "df1"], "token": ["df2", "=", "pd", ".", "DataFrame", "(", "index", "=", "df1", ".", "index", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "df2 = pd.DataFrame(index=df1.index)", "decano_code": "df2 = pd.DataFrame(index=df1.index)", "raw_code": "df2 = pd.DataFrame(index=df1.index)", "str_map": {}}
{"src": ["unpack", "first", "and", "second", "bytes", "of", "byte", "string", "pS", "into", "integer"], "token": ["struct", ".", "unpack", "(", "'h'", ",", "pS", "[", "0", ":", "2", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "struct.unpack('h', pS[0:2])", "decano_code": "struct.unpack('h', pS[0:2])", "raw_code": "struct.unpack('h', pS[0:2])", "str_map": {}}
{"src": ["print", "list", "t", "into", "a", "table-like", "shape"], "token": ["print", "(", "'\\n'", ".", "join", "(", "'  '", ".", "join", "(", "map", "(", "str", ",", "row", ")", ")", "for", "row", "in", "t", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "print('\\n'.join('  '.join(map(str, row)) for row in t))", "decano_code": "print('\\n'.join('  '.join(map(str, row)) for row in t))", "raw_code": "print('\\n'.join('  '.join(map(str, row)) for row in t))", "str_map": {}}
{"src": ["sort", "pandas", "dataframe", "by", "date"], "token": ["df", ".", "sort_values", "(", "by", "=", "'Date'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df.sort_values(by='Date')", "decano_code": "df.sort_values(by='Date')", "raw_code": "df.sort_values(by='Date')", "str_map": {}}
{"src": ["check", "if", "a", "checkbox", "is", "checked", "in", "selenium", "python", "webdriver"], "token": ["driver", ".", "find_element_by_name", "(", "'<check_box_name>'", ")", ".", "is_selected", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "driver.find_element_by_name('<check_box_name>').is_selected()", "decano_code": "driver.find_element_by_name('<check_box_name>').is_selected()", "raw_code": "driver.find_element_by_name('<check_box_name>').is_selected()", "str_map": {}}
{"src": ["determine", "if", "checkbox", "with", "id", "_STR:0_", "is", "checked", "in", "selenium", "python", "webdriver"], "token": ["driver", ".", "find_element_by_id", "(", "\" _STR:0_ \"", ")", ".", "is_selected", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "driver.find_element_by_id(\" _STR:0_ \").is_selected()", "decano_code": "driver.find_element_by_id(\" _STR:0_ \").is_selected()", "raw_code": "driver.find_element_by_id('<check_box_id>').is_selected()", "str_map": {"<check_box_id>": "_STR:0_"}}
{"src": ["replace", "0", "with", "2", "in", "the", "list", "[0, 1, 0, 3", "]"], "token": ["[", "(", "a", "if", "a", "else", "2", ")", "for", "a", "in", "[", "0", ",", "1", ",", "0", ",", "3", "]", "]"], "type": ["OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "[(a if a else 2) for a in [0, 1, 0, 3]]", "decano_code": "[(a if a else 2) for a in [0, 1, 0, 3]]", "raw_code": "[(a if a else 2) for a in [0, 1, 0, 3]]", "str_map": {}}
{"src": ["produce", "a", "string", "that", "is", "suitable", "as", "unicode", "literal", "from", "string", "_STR:0_"], "token": ["\" _STR:0_ \"", ".", "encode", "(", ")", ".", "decode", "(", "'unicode-escape'", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "\" _STR:0_ \".encode().decode('unicode-escape')", "decano_code": "\" _STR:0_ \".encode().decode('unicode-escape')", "raw_code": "'M\\\\N{AMPERSAND}M\\\\N{APOSTROPHE}s'.encode().decode('unicode-escape')", "str_map": {"M\\N{AMPERSAND}M\\N{APOSTROPHE}s": "_STR:0_"}}
{"src": ["parse", "a", "unicode", "string", "M\\\\N{AMPERSAND}M\\\\N{APOSTROPHE}s"], "token": ["'M\\\\N{AMPERSAND}M\\\\N{APOSTROPHE}s'", ".", "decode", "(", "'unicode-escape'", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "'M\\\\N{AMPERSAND}M\\\\N{APOSTROPHE}s'.decode('unicode-escape')", "decano_code": "'M\\\\N{AMPERSAND}M\\\\N{APOSTROPHE}s'.decode('unicode-escape')", "raw_code": "'M\\\\N{AMPERSAND}M\\\\N{APOSTROPHE}s'.decode('unicode-escape')", "str_map": {}}
{"src": ["convert", "unicode", "codepoint", "to", "utf8", "hex"], "token": ["chr", "(", "int", "(", "'fd9b'", ",", "16", ")", ")", ".", "encode", "(", "'utf-8'", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "chr(int('fd9b', 16)).encode('utf-8')", "decano_code": "chr(int('fd9b', 16)).encode('utf-8')", "raw_code": "chr(int('fd9b', 16)).encode('utf-8')", "str_map": {}}
{"src": ["use", "upper", "case", "letters", "to", "print", "hex", "value", "value"], "token": ["print", "(", "'0x%X'", "%", "value", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "print('0x%X' % value)", "decano_code": "print('0x%X' % value)", "raw_code": "print('0x%X' % value)", "str_map": {}}
{"src": ["get", "a", "list", "cleaned", "that", "contains", "all", "non-empty", "elements", "in", "list", "your_list"], "token": ["cleaned", "=", "[", "x", "for", "x", "in", "your_list", "if", "x", "]"], "type": ["NAME", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "cleaned = [x for x in your_list if x]", "decano_code": "cleaned = [x for x in your_list if x]", "raw_code": "cleaned = [x for x in your_list if x]", "str_map": {}}
{"src": ["create", "a", "slice", "object", "using", "string", "string_slice"], "token": ["slice", "(", "*", "[", "(", "int", "(", "i", ".", "strip", "(", ")", ")", "if", "i", "else", "None", ")", "for", "i", "in", "string_slice", ".", "split", "(", "':'", ")", "]", ")"], "type": ["KEYWORD", "OP", "OP", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "slice(*[(int(i.strip()) if i else None) for i in string_slice.split(':')])", "decano_code": "slice(*[(int(i.strip()) if i else None) for i in string_slice.split(':')])", "raw_code": "slice(*[(int(i.strip()) if i else None) for i in string_slice.split(':')])", "str_map": {}}
{"src": ["find", "all", "the", "tags", "a", "and", "div", "from", "beautiful", "soup", "object", "soup"], "token": ["soup", ".", "find_all", "(", "[", "'a'", ",", "'div'", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "soup.find_all(['a', 'div'])", "decano_code": "soup.find_all(['a', 'div'])", "raw_code": "soup.find_all(['a', 'div'])", "str_map": {}}
{"src": ["get", "the", "name", "of", "function", "func", "as", "a", "string"], "token": ["print", "(", "func", ".", "__name__", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "print(func.__name__)", "decano_code": "print(func.__name__)", "raw_code": "print(func.__name__)", "str_map": {}}
{"src": ["convert", "dictionary", "adict", "into", "string"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "'{}{}'", ".", "format", "(", "key", ",", "val", ")", "for", "key", ",", "val", "in", "sorted", "(", "adict", ".", "items", "(", ")", ")", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in sorted(adict.items()))", "decano_code": "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in sorted(adict.items()))", "raw_code": "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in sorted(adict.items()))", "str_map": {}}
{"src": ["convert", "dictionary", "adict", "into", "string"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "'{}{}'", ".", "format", "(", "key", ",", "val", ")", "for", "key", ",", "val", "in", "list", "(", "adict", ".", "items", "(", ")", ")", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in list(adict.items()))", "decano_code": "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in list(adict.items()))", "raw_code": "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in list(adict.items()))", "str_map": {}}
{"src": ["copy", "list", "old_list", "as", "new_list"], "token": ["new_list", "=", "old_list", "[", ":", "]"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "new_list = old_list[:]", "decano_code": "new_list = old_list[:]", "raw_code": "new_list = old_list[:]", "str_map": {}}
{"src": ["copy", "list", "old_list", "as", "new_list"], "token": ["new_list", "=", "list", "(", "old_list", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "NAME", "OP"], "cano_code": "new_list = list(old_list)", "decano_code": "new_list = list(old_list)", "raw_code": "new_list = list(old_list)", "str_map": {}}
{"src": ["copy", "list", "old_list", "as", "new_list"], "token": ["new_list", "=", "copy", ".", "copy", "(", "old_list", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "new_list = copy.copy(old_list)", "decano_code": "new_list = copy.copy(old_list)", "raw_code": "new_list = copy.copy(old_list)", "str_map": {}}
{"src": ["deep", "copy", "list", "old_list", "as", "new_list"], "token": ["new_list", "=", "copy", ".", "deepcopy", "(", "old_list", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "new_list = copy.deepcopy(old_list)", "decano_code": "new_list = copy.deepcopy(old_list)", "raw_code": "new_list = copy.deepcopy(old_list)", "str_map": {}}
{"src": ["make", "a", "copy", "of", "list", "old_list"], "token": ["[", "i", "for", "i", "in", "old_list", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[i for i in old_list]", "decano_code": "[i for i in old_list]", "raw_code": "[i for i in old_list]", "str_map": {}}
{"src": ["remove", "frame", "of", "legend", "in", "plot", "plt"], "token": ["plt", ".", "legend", "(", "frameon", "=", "False", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "plt.legend(frameon=False)", "decano_code": "plt.legend(frameon=False)", "raw_code": "plt.legend(frameon=False)", "str_map": {}}
{"src": ["print", "a", "emoji", "from", "a", "string", "\\\\ud83d\\\\ude4f", "having", "surrogate", "pairs"], "token": ["\"\"\"\\\\ud83d\\\\ude4f\"\"\"", ".", "encode", "(", "'utf-16'", ",", "'surrogatepass'", ")", ".", "decode", "(", "'utf-16'", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "\"\"\"\\\\ud83d\\\\ude4f\"\"\".encode('utf-16', 'surrogatepass').decode('utf-16')", "decano_code": "\"\"\"\\\\ud83d\\\\ude4f\"\"\".encode('utf-16', 'surrogatepass').decode('utf-16')", "raw_code": "\"\"\"\\\\ud83d\\\\ude4f\"\"\".encode('utf-16', 'surrogatepass').decode('utf-16')", "str_map": {}}
{"src": ["calling", "a", "function", "named", "_STR:0_", "in", "the", "module"], "token": ["globals", "(", ")", "[", "\" _STR:0_ \"", "]", "(", ")"], "type": ["KEYWORD", "OP", "OP", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "globals()[\" _STR:0_ \"]()", "decano_code": "globals()[\" _STR:0_ \"]()", "raw_code": "globals()['myfunction']()", "str_map": {"myfunction": "_STR:0_"}}
{"src": ["check", "the", "status", "code", "of", "url", "_STR:0_"], "token": ["urllib", ".", "request", ".", "urlopen", "(", "\" _STR:0_ \"", ")", ".", "getcode", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "urllib.request.urlopen(\" _STR:0_ \").getcode()", "decano_code": "urllib.request.urlopen(\" _STR:0_ \").getcode()", "raw_code": "urllib.request.urlopen('http://www.stackoverflow.com').getcode()", "str_map": {"http://www.stackoverflow.com": "_STR:0_"}}
{"src": ["check", "the", "status", "code", "of", "url", "_STR:0_"], "token": ["conn", "=", "httplib", ".", "HTTPConnection", "(", "\" _STR:0_ \"", ")", "\n", "conn", ".", "request", "(", "'HEAD'", ",", "'/'", ")", "\n", "r1", "=", "conn", ".", "getresponse", "(", ")", "\n", "print", "(", "r1", ".", "status", ",", "r1", ".", "reason", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NEWLINE", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NEWLINE", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NEWLINE", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "conn = httplib.HTTPConnection(\" _STR:0_ \")\nconn.request('HEAD', '/')\nr1 = conn.getresponse()\nprint(r1.status, r1.reason)", "decano_code": "conn = httplib.HTTPConnection(\" _STR:0_ \")\nconn.request('HEAD', '/')\nr1 = conn.getresponse()\nprint(r1.status, r1.reason)", "raw_code": "conn = httplib.HTTPConnection('www.python.org')\nconn.request('HEAD', '/')\nr1 = conn.getresponse()\nprint(r1.status, r1.reason)", "str_map": {"www.python.org": "_STR:0_"}}
{"src": ["check", "the", "status", "code", "of", "url", "url"], "token": ["r", "=", "requests", ".", "head", "(", "url", ")", "\n", "return", "(", "r", ".", "status_code", "==", "200", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NEWLINE", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "r = requests.head(url)\nreturn (r.status_code == 200)", "decano_code": "r = requests.head(url)\nreturn (r.status_code == 200)", "raw_code": "r = requests.head(url)\nreturn (r.status_code == 200)", "str_map": {}}
{"src": ["checking", "if", "website", "_STR:0_", "is", "up"], "token": ["print", "(", "urllib", ".", "request", ".", "urlopen", "(", "\" _STR:0_ \"", ")", ".", "getcode", "(", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "print(urllib.request.urlopen(\" _STR:0_ \").getcode())", "decano_code": "print(urllib.request.urlopen(\" _STR:0_ \").getcode())", "raw_code": "print(urllib.request.urlopen('http://www.stackoverflow.com').getcode())", "str_map": {"http://www.stackoverflow.com": "_STR:0_"}}
{"src": ["selenium", "driver", "click", "a", "hyperlink", "with", "the", "pattern", "_STR:0_"], "token": ["driver", ".", "find_element_by_css_selector", "(", "\" _STR:0_ \"", ")", ".", "click", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "driver.find_element_by_css_selector(\" _STR:0_ \").click()", "decano_code": "driver.find_element_by_css_selector(\" _STR:0_ \").click()", "raw_code": "driver.find_element_by_css_selector(\"a[href^='javascript']\").click()", "str_map": {"a[href^='javascript']": "_STR:0_"}}
{"src": ["store", "data", "frame", "df", "to", "file", "file_name", "using", "pandas", ",", "python"], "token": ["df", ".", "to_pickle", "(", "file_name", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "df.to_pickle(file_name)", "decano_code": "df.to_pickle(file_name)", "raw_code": "df.to_pickle(file_name)", "str_map": {}}
{"src": ["calculate", "the", "mean", "of", "columns", "with", "same", "name", "in", "dataframe", "df"], "token": ["df", ".", "groupby", "(", "by", "=", "df", ".", "columns", ",", "axis", "=", "1", ")", ".", "mean", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "df.groupby(by=df.columns, axis=1).mean()", "decano_code": "df.groupby(by=df.columns, axis=1).mean()", "raw_code": "df.groupby(by=df.columns, axis=1).mean()", "str_map": {}}
{"src": ["sort", "list", "bar", "by", "each", "element", "'", "s", "attribute", "attrb1", "and", "attribute", "attrb2", "in", "reverse", "order"], "token": ["bar", ".", "sort", "(", "key", "=", "lambda", "x", ":", "(", "x", ".", "attrb1", ",", "x", ".", "attrb2", ")", ",", "reverse", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "bar.sort(key=lambda x: (x.attrb1, x.attrb2), reverse=True)", "decano_code": "bar.sort(key=lambda x: (x.attrb1, x.attrb2), reverse=True)", "raw_code": "bar.sort(key=lambda x: (x.attrb1, x.attrb2), reverse=True)", "str_map": {}}
{"src": ["get", "alpha", "value", "alpha", "of", "a", "png", "image", "img"], "token": ["alpha", "=", "img", ".", "split", "(", ")", "[", "-", "1", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "alpha = img.split()[-1]", "decano_code": "alpha = img.split()[-1]", "raw_code": "alpha = img.split()[-1]", "str_map": {}}
{"src": ["how", "to", "get", "the", "length", "of", "words", "in", "a", "sentence", "?"], "token": ["[", "len", "(", "x", ")", "for", "x", "in", "s", ".", "split", "(", ")", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "[len(x) for x in s.split()]", "decano_code": "[len(x) for x in s.split()]", "raw_code": "[len(x) for x in s.split()]", "str_map": {}}
{"src": ["BeautifulSoup", "find", "tag", "_STR:0_", "with", "styling", "_STR:1_", "in", "HTML", "string", "soup"], "token": ["soup", ".", "findAll", "(", "\" _STR:0_ \"", ",", "style", "=", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "soup.findAll(\" _STR:0_ \", style=\" _STR:1_ \")", "decano_code": "soup.findAll(\" _STR:0_ \", style=\" _STR:1_ \")", "raw_code": "soup.findAll('div', style='width=300px;')", "str_map": {"div": "_STR:0_", "width=300px;": "_STR:1_"}}
{"src": ["execute", "SQL", "statement", "sql", "with", "values", "of", "dictionary", "myDict", "as", "parameters"], "token": ["cursor", ".", "execute", "(", "sql", ",", "list", "(", "myDict", ".", "values", "(", ")", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "cursor.execute(sql, list(myDict.values()))", "decano_code": "cursor.execute(sql, list(myDict.values()))", "raw_code": "cursor.execute(sql, list(myDict.values()))", "str_map": {}}
{"src": ["convert", "CSV", "file", "Result.csv", "[", "Result", ".", "csv", "]", "to", "pandas", "dataframe", "using", "separator", "_STR:0_"], "token": ["df", ".", "to_csv", "(", "'Result.csv'", ",", "index", "=", "False", ",", "sep", "=", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df.to_csv('Result.csv', index=False, sep=\" _STR:0_ \")", "decano_code": "df.to_csv('Result.csv', index=False, sep=\" _STR:0_ \")", "raw_code": "df.to_csv('Result.csv', index=False, sep=' ')", "str_map": {" ": "_STR:0_"}}
{"src": ["update", "the", "globals(", ")", "dictionary", "with", "the", "contents", "of", "the", "vars(args", ")", "dictionary"], "token": ["globals", "(", ")", ".", "update", "(", "vars", "(", "args", ")", ")"], "type": ["KEYWORD", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "globals().update(vars(args))", "decano_code": "globals().update(vars(args))", "raw_code": "globals().update(vars(args))", "str_map": {}}
{"src": ["find", "all", "substrings", "in", "mystring", "beginning", "and", "ending", "with", "square", "brackets"], "token": ["re", ".", "findall", "(", "'\\\\[(.*?)\\\\]'", ",", "mystring", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.findall('\\\\[(.*?)\\\\]', mystring)", "decano_code": "re.findall('\\\\[(.*?)\\\\]', mystring)", "raw_code": "re.findall('\\\\[(.*?)\\\\]', mystring)", "str_map": {}}
{"src": ["format", "all", "floating", "variables", "var1", ",", "var2", ",", "var3", ",", "var1", "to", "print", "to", "two", "decimal", "places", "."], "token": ["print", "(", "'%.2f kg = %.2f lb = %.2f gal = %.2f l'", "%", "(", "var1", ",", "var2", ",", "var3", ",", "var4", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "print('%.2f kg = %.2f lb = %.2f gal = %.2f l' % (var1, var2, var3, var4))", "decano_code": "print('%.2f kg = %.2f lb = %.2f gal = %.2f l' % (var1, var2, var3, var4))", "raw_code": "print('%.2f kg = %.2f lb = %.2f gal = %.2f l' % (var1, var2, var3, var4))", "str_map": {}}
{"src": ["remove", "all", "items", "from", "a", "dictionary", "d", "where", "the", "values", "are", "less", "than", "1"], "token": ["d", "=", "dict", "(", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", "if", "v", ">", "0", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "OP", "NUMBER", "OP"], "cano_code": "d = dict((k, v) for k, v in d.items() if v > 0)", "decano_code": "d = dict((k, v) for k, v in d.items() if v > 0)", "raw_code": "d = dict((k, v) for k, v in d.items() if v > 0)", "str_map": {}}
{"src": ["filter", "dictionary", "d", "to", "have", "items", "with", "value", "greater", "than", "0"], "token": ["d", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "list", "(", "d", ".", "items", "(", ")", ")", "if", "v", ">", "0", "}"], "type": ["NAME", "OP", "OP", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "NAME", "OP", "NUMBER", "OP"], "cano_code": "d = {k: v for k, v in list(d.items()) if v > 0}", "decano_code": "d = {k: v for k, v in list(d.items()) if v > 0}", "raw_code": "d = {k: v for k, v in list(d.items()) if v > 0}", "str_map": {}}
{"src": ["convert", "a", "string", "of", "date", "strings", "date_stngs ", "to", "datetime", "objects", "and", "put", "them", "in", "a", "dataframe"], "token": ["pd", ".", "to_datetime", "(", "pd", ".", "Series", "(", "date_stngs", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "pd.to_datetime(pd.Series(date_stngs))", "decano_code": "pd.to_datetime(pd.Series(date_stngs))", "raw_code": "pd.to_datetime(pd.Series(date_stngs))", "str_map": {}}
{"src": ["get", "value", "at", "index", "[2, 0", "]", "in", "dataframe", "df"], "token": ["df", ".", "iloc", "[", "2", ",", "0", "]"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "df.iloc[2, 0]", "decano_code": "df.iloc[2, 0]", "raw_code": "df.iloc[2, 0]", "str_map": {}}
{"src": ["change", "the", "font", "size", "on", "plot", "matplotlib", "to", "22"], "token": ["matplotlib", ".", "rcParams", ".", "update", "(", "{", "'font.size'", ":", "22", "}", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "OP"], "cano_code": "matplotlib.rcParams.update({'font.size': 22})", "decano_code": "matplotlib.rcParams.update({'font.size': 22})", "raw_code": "matplotlib.rcParams.update({'font.size': 22})", "str_map": {}}
{"src": ["converting", "dictionary", "d", "into", "a", "dataframe", "pd", "with", "keys", "as", "data", "for", "column", "_STR:0_", "and", "the", "corresponding", "values", "as", "data", "for", "column", "_STR:1_"], "token": ["pd", ".", "DataFrame", "(", "list", "(", "d", ".", "items", "(", ")", ")", ",", "columns", "=", "[", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "pd.DataFrame(list(d.items()), columns=[\" _STR:0_ \", \" _STR:1_ \"])", "decano_code": "pd.DataFrame(list(d.items()), columns=[\" _STR:0_ \", \" _STR:1_ \"])", "raw_code": "pd.DataFrame(list(d.items()), columns=['Date', 'DateValue'])", "str_map": {"Date": "_STR:0_", "DateValue": "_STR:1_"}}
{"src": ["create", "a", "dataframe", "containing", "the", "multiplication", "of", "element-wise", "in", "dataframe", "df", "and", "dataframe", "df2", "using", "index", "name", "and", "column", "labels", "of", "dataframe", "df"], "token": ["pd", ".", "DataFrame", "(", "df", ".", "values", "*", "df2", ".", "values", ",", "columns", "=", "df", ".", "columns", ",", "index", "=", "df", ".", "index", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "pd.DataFrame(df.values * df2.values, columns=df.columns, index=df.index)", "decano_code": "pd.DataFrame(df.values * df2.values, columns=df.columns, index=df.index)", "raw_code": "pd.DataFrame(df.values * df2.values, columns=df.columns, index=df.index)", "str_map": {}}
{"src": ["extract", "floating", "number", "from", "string", "_STR:0_"], "token": ["re", ".", "findall", "(", "'\\\\d+\\\\.\\\\d+'", ",", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.findall('\\\\d+\\\\.\\\\d+', \" _STR:0_ \")", "decano_code": "re.findall('\\\\d+\\\\.\\\\d+', \" _STR:0_ \")", "raw_code": "re.findall('\\\\d+\\\\.\\\\d+', 'Current Level: 13.4 db.')", "str_map": {"Current Level: 13.4 db.": "_STR:0_"}}
{"src": ["extract", "floating", "point", "numbers", "from", "a", "string", "_STR:0_"], "token": ["re", ".", "findall", "(", "'[-+]?\\\\d*\\\\.\\\\d+|\\\\d+'", ",", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.findall('[-+]?\\\\d*\\\\.\\\\d+|\\\\d+', \" _STR:0_ \")", "decano_code": "re.findall('[-+]?\\\\d*\\\\.\\\\d+|\\\\d+', \" _STR:0_ \")", "raw_code": "re.findall('[-+]?\\\\d*\\\\.\\\\d+|\\\\d+', 'Current Level: -13.2 db or 14.2 or 3')", "str_map": {"Current Level: -13.2 db or 14.2 or 3": "_STR:0_"}}
{"src": ["pair", "each", "element", "in", "list", "it", "3", "times", "into", "a", "tuple"], "token": ["zip", "(", "it", ",", "it", ",", "it", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "zip(it, it, it)", "decano_code": "zip(it, it, it)", "raw_code": "zip(it, it, it)", "str_map": {}}
{"src": ["lowercase", "a", "python", "dataframe", "string", "in", "column", "_STR:0_", "if", "it", "has", "missing", "values", "in", "dataframe", "df"], "token": ["df", "[", "\" _STR:0_ \"", "]", ".", "str", ".", "lower", "(", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "df[\" _STR:0_ \"].str.lower()", "decano_code": "df[\" _STR:0_ \"].str.lower()", "raw_code": "df['x'].str.lower()", "str_map": {"x": "_STR:0_"}}
{"src": ["append", "dict", "{'f': var6, 'g': var7, 'h': var8", "}", "to", "value", "of", "key", "e", "in", "dict", "jsobj['a']['b'", "]"], "token": ["jsobj", "[", "'a'", "]", "[", "'b'", "]", "[", "'e'", "]", ".", "append", "(", "{", "'f'", ":", "var6", ",", "'g'", ":", "var7", ",", "'h'", ":", "var8", "}", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "STRING", "OP", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP"], "cano_code": "jsobj['a']['b']['e'].append({'f': var6, 'g': var7, 'h': var8})", "decano_code": "jsobj['a']['b']['e'].append({'f': var6, 'g': var7, 'h': var8})", "raw_code": "jsobj['a']['b']['e'].append({'f': var6, 'g': var7, 'h': var8})", "str_map": {}}
{"src": ["concat", "a", "list", "of", "strings", "lst", "using", "string", "formatting"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "lst", ")"], "type": ["STRING", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "\"\"\"\"\"\".join(lst)", "decano_code": "\"\"\"\"\"\".join(lst)", "raw_code": "\"\"\"\"\"\".join(lst)", "str_map": {}}
{"src": ["sum", "values", "greater", "than", "0", "in", "dictionary", "d"], "token": ["sum", "(", "v", "for", "v", "in", "list", "(", "d", ".", "values", "(", ")", ")", "if", "v", ">", "0", ")"], "type": ["KEYWORD", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "NAME", "OP", "NUMBER", "OP"], "cano_code": "sum(v for v in list(d.values()) if v > 0)", "decano_code": "sum(v for v in list(d.values()) if v > 0)", "raw_code": "sum(v for v in list(d.values()) if v > 0)", "str_map": {}}
{"src": ["run", "flask", "application", "app", "in", "debug", "mode", "."], "token": ["app", ".", "run", "(", "debug", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "app.run(debug=True)", "decano_code": "app.run(debug=True)", "raw_code": "app.run(debug=True)", "str_map": {}}
{"src": ["drop", "rows", "whose", "index", "value", "in", "list", "[1, 3", "]", "in", "dataframe", "df"], "token": ["df", ".", "drop", "(", "df", ".", "index", "[", "[", "1", ",", "3", "]", "]", ",", "inplace", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df.drop(df.index[[1, 3]], inplace=True)", "decano_code": "df.drop(df.index[[1, 3]], inplace=True)", "raw_code": "df.drop(df.index[[1, 3]], inplace=True)", "str_map": {}}
{"src": ["replace", "nan", "values", "in", "a", "pandas", "data", "frame", "with", "the", "average", "of", "columns"], "token": ["df", ".", "apply", "(", "lambda", "x", ":", "x", ".", "fillna", "(", "x", ".", "mean", "(", ")", ")", ",", "axis", "=", "0", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "df.apply(lambda x: x.fillna(x.mean()), axis=0)", "decano_code": "df.apply(lambda x: x.fillna(x.mean()), axis=0)", "raw_code": "df.apply(lambda x: x.fillna(x.mean()), axis=0)", "str_map": {}}
{"src": ["extract", "attribute", "my_attr", "from", "each", "object", "in", "list", "my_list"], "token": ["[", "o", ".", "my_attr", "for", "o", "in", "my_list", "]"], "type": ["OP", "NAME", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[o.my_attr for o in my_list]", "decano_code": "[o.my_attr for o in my_list]", "raw_code": "[o.my_attr for o in my_list]", "str_map": {}}
{"src": ["python", "get", "time", "stamp", "on", "file", "file", "in", "_STR:0_", "format"], "token": ["time", ".", "strftime", "(", "\" _STR:0_ \"", ",", "time", ".", "gmtime", "(", "os", ".", "path", ".", "getmtime", "(", "file", ")", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "time.strftime(\" _STR:0_ \", time.gmtime(os.path.getmtime(file)))", "decano_code": "time.strftime(\" _STR:0_ \", time.gmtime(os.path.getmtime(file)))", "raw_code": "time.strftime('%m/%d/%Y', time.gmtime(os.path.getmtime(file)))", "str_map": {"%m/%d/%Y": "_STR:0_"}}
{"src": ["check", "if", "dictionary", "subset", "is", "a", "subset", "of", "dictionary", "superset"], "token": ["all", "(", "item", "in", "list", "(", "superset", ".", "items", "(", ")", ")", "for", "item", "in", "list", "(", "subset", ".", "items", "(", ")", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "all(item in list(superset.items()) for item in list(subset.items()))", "decano_code": "all(item in list(superset.items()) for item in list(subset.items()))", "raw_code": "all(item in list(superset.items()) for item in list(subset.items()))", "str_map": {}}
{"src": ["convert", "integer", "elements", "in", "list", "wordids", "to", "strings"], "token": ["[", "str", "(", "wi", ")", "for", "wi", "in", "wordids", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[str(wi) for wi in wordids]", "decano_code": "[str(wi) for wi in wordids]", "raw_code": "[str(wi) for wi in wordids]", "str_map": {}}
{"src": ["reset", "the", "indexes", "of", "a", "pandas", "data", "frame"], "token": ["df2", "=", "df", ".", "reset_index", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "df2 = df.reset_index()", "decano_code": "df2 = df.reset_index()", "raw_code": "df2 = df.reset_index()", "str_map": {}}
{"src": ["format", "datetime", "in", "dt", "as", "string", "in", "format", "'%m/%d/%Y"], "token": ["dt", ".", "strftime", "(", "'%m/%d/%Y'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "dt.strftime('%m/%d/%Y')", "decano_code": "dt.strftime('%m/%d/%Y')", "raw_code": "dt.strftime('%m/%d/%Y')", "str_map": {}}
{"src": ["format", "floating", "point", "number", "TotalAmount", "to", "be", "rounded", "off", "to", "two", "decimal", "places", "and", "have", "a", "comma", "thousands", "'", "seperator"], "token": ["print", "(", "'Total cost is: ${:,.2f}'", ".", "format", "(", "TotalAmount", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "print('Total cost is: ${:,.2f}'.format(TotalAmount))", "decano_code": "print('Total cost is: ${:,.2f}'.format(TotalAmount))", "raw_code": "print('Total cost is: ${:,.2f}'.format(TotalAmount))", "str_map": {}}
{"src": ["sum", "the", "values", "in", "each", "row", "of", "every", "two", "adjacent", "columns", "in", "dataframe", "df"], "token": ["df", ".", "groupby", "(", "np", ".", "arange", "(", "len", "(", "df", ".", "columns", ")", ")", "//", "2", "+", "1", ",", "axis", "=", "1", ")", ".", "sum", "(", ")", ".", "add_prefix", "(", "'s'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "KEYWORD", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df.groupby(np.arange(len(df.columns)) // 2 + 1, axis=1).sum().add_prefix('s')", "decano_code": "df.groupby(np.arange(len(df.columns)) // 2 + 1, axis=1).sum().add_prefix('s')", "raw_code": "df.groupby(np.arange(len(df.columns)) // 2 + 1, axis=1).sum().add_prefix('s')", "str_map": {}}
{"src": ["create", "list", "randomList", "with", "10", "random", "floating", "point", "numbers", "between", "0.0", "[", "0", ".", "0", "]", "and", "1.0", "[", "1", ".", "0", "]"], "token": ["randomList", "=", "[", "random", ".", "random", "(", ")", "for", "_", "in", "range", "(", "10", ")", "]"], "type": ["NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "OP"], "cano_code": "randomList = [random.random() for _ in range(10)]", "decano_code": "randomList = [random.random() for _ in range(10)]", "raw_code": "randomList = [random.random() for _ in range(10)]", "str_map": {}}
{"src": ["find", "href", "value", "that", "has", "string", "_STR:0_", "inside", "it"], "token": ["print", "(", "soup", ".", "find", "(", "'a'", ",", "href", "=", "re", ".", "compile", "(", "'.*follow\\\\?page.*'", ")", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "print(soup.find('a', href=re.compile('.*follow\\\\?page.*')))", "decano_code": "print(soup.find('a', href=re.compile('.*follow\\\\?page.*')))", "raw_code": "print(soup.find('a', href=re.compile('.*follow\\\\?page.*')))", "str_map": {"follow?page": "_STR:0_"}}
{"src": ["immediately", "see", "output", "of", "print", "statement", "that", "doesn't", "end", "in", "a", "newline"], "token": ["sys", ".", "stdout", ".", "flush", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "sys.stdout.flush()", "decano_code": "sys.stdout.flush()", "raw_code": "sys.stdout.flush()", "str_map": {}}
{"src": ["get", "a", "random", "key", "country", "and", "value", "capital", "form", "a", "dictionary", "d"], "token": ["country", ",", "capital", "=", "random", ".", "choice", "(", "list", "(", "d", ".", "items", "(", ")", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "country, capital = random.choice(list(d.items()))", "decano_code": "country, capital = random.choice(list(d.items()))", "raw_code": "country, capital = random.choice(list(d.items()))", "str_map": {}}
{"src": ["split", "string", "Word to Split", "into", "a", "list", "of", "characters"], "token": ["list", "(", "'Word to Split'", ")"], "type": ["KEYWORD", "OP", "STRING", "OP"], "cano_code": "list('Word to Split')", "decano_code": "list('Word to Split')", "raw_code": "list('Word to Split')", "str_map": {}}
{"src": ["create", "a", "list", "containing", "words", "that", "contain", "vowel", "letter", "followed", "by", "the", "same", "vowel", "in", "file", "_STR:0_"], "token": ["[", "w", "for", "w", "in", "open", "(", "'file.txt'", ")", "if", "not", "re", ".", "search", "(", "'[aeiou]{2}'", ",", "w", ")", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "STRING", "OP", "KEYWORD", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP"], "cano_code": "[w for w in open('file.txt') if not re.search('[aeiou]{2}', w)]", "decano_code": "[w for w in open('file.txt') if not re.search('[aeiou]{2}', w)]", "raw_code": "[w for w in open('file.txt') if not re.search('[aeiou]{2}', w)]", "str_map": {"file.text": "_STR:0_"}}
{"src": ["validate", "IP", "address", "using", "regex"], "token": ["pat", "=", "re", ".", "compile", "(", "'^\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}$'", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP"], "cano_code": "pat = re.compile('^\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}$')", "decano_code": "pat = re.compile('^\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}$')", "raw_code": "pat = re.compile('^\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}$')", "str_map": {}}
{"src": ["execute", "file", "_STR:0_"], "token": ["exec", "(", "compile", "(", "open", "(", "\" _STR:0_ \"", ")", ".", "read", "(", ")", ",", "\" _STR:0_ \"", ",", "'exec'", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "exec(compile(open(\" _STR:0_ \").read(), \" _STR:0_ \", 'exec'))", "decano_code": "exec(compile(open(\" _STR:0_ \").read(), \" _STR:0_ \", 'exec'))", "raw_code": "exec(compile(open('filename.py').read(), 'filename.py', 'exec'))", "str_map": {"filename.py": "_STR:0_"}}
{"src": ["SQLAlchemy", "count", "the", "number", "of", "rows", "with", "distinct", "values", "in", "column", "name", "of", "table", "tag"], "token": ["session", ".", "query", "(", "Tag", ")", ".", "distinct", "(", "Tag", ".", "name", ")", ".", "group_by", "(", "Tag", ".", "name", ")", ".", "count", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "session.query(Tag).distinct(Tag.name).group_by(Tag.name).count()", "decano_code": "session.query(Tag).distinct(Tag.name).group_by(Tag.name).count()", "raw_code": "session.query(Tag).distinct(Tag.name).group_by(Tag.name).count()", "str_map": {}}
{"src": ["remove", "null", "columns", "in", "a", "dataframe", "df"], "token": ["df", "=", "df", ".", "dropna", "(", "axis", "=", "1", ",", "how", "=", "'all'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df = df.dropna(axis=1, how='all')", "decano_code": "df = df.dropna(axis=1, how='all')", "raw_code": "df = df.dropna(axis=1, how='all')", "str_map": {}}
{"src": ["check", "if", "all", "lists", "in", "list", "l", "have", "three", "elements", "of", "integer", "1"], "token": ["all", "(", "x", ".", "count", "(", "1", ")", "==", "3", "for", "x", "in", "L", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NUMBER", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "all(x.count(1) == 3 for x in L)", "decano_code": "all(x.count(1) == 3 for x in L)", "raw_code": "all(x.count(1) == 3 for x in L)", "str_map": {}}
{"src": ["get", "a", "list", "comparing", "two", "lists", "of", "tuples", "l1", "and", "l2", "if", "any", "first", "value", "in", "l1", "matches", "with", "first", "value", "in", "l2"], "token": ["[", "x", "[", "0", "]", "for", "x", "in", "l1", "if", "any", "(", "x", "[", "0", "]", "==", "y", "[", "0", "]", "for", "y", "in", "l2", ")", "]"], "type": ["OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "[x[0] for x in l1 if any(x[0] == y[0] for y in l2)]", "decano_code": "[x[0] for x in l1 if any(x[0] == y[0] for y in l2)]", "raw_code": "[x[0] for x in l1 if any(x[0] == y[0] for y in l2)]", "str_map": {}}
{"src": ["clear", "the", "textbox", "text", "in", "tkinter"], "token": ["tex", ".", "delete", "(", "'1.0'", ",", "END", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "tex.delete('1.0', END)", "decano_code": "tex.delete('1.0', END)", "raw_code": "tex.delete('1.0', END)", "str_map": {}}
{"src": ["convert", "long", "int", "myNumber", "into", "date", "and", "time", "represented", "in", "the", "the", "string", "format", "_STR:0_"], "token": ["datetime", ".", "datetime", ".", "fromtimestamp", "(", "myNumber", ")", ".", "strftime", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "datetime.datetime.fromtimestamp(myNumber).strftime(\" _STR:0_ \")", "decano_code": "datetime.datetime.fromtimestamp(myNumber).strftime(\" _STR:0_ \")", "raw_code": "datetime.datetime.fromtimestamp(myNumber).strftime('%Y-%m-%d %H:%M:%S')", "str_map": {"%Y-%m-%d %H:%M:%S": "_STR:0_"}}
{"src": ["spawn", "a", "process", "to", "run", "python", "script", "myscript.py", "[", "myscript", ".", "py", "]", "in", "C+", "+"], "token": ["system", "(", "'python myscript.py'", ")"], "type": ["NAME", "OP", "STRING", "OP"], "cano_code": "system('python myscript.py')", "decano_code": "system('python myscript.py')", "raw_code": "system('python myscript.py')", "str_map": {}}
{"src": ["sort", "a", "list", "your_list", "of", "class", "objects", "by", "their", "values", "for", "the", "attribute", "anniversary_score"], "token": ["your_list", ".", "sort", "(", "key", "=", "operator", ".", "attrgetter", "(", "'anniversary_score'", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "your_list.sort(key=operator.attrgetter('anniversary_score'))", "decano_code": "your_list.sort(key=operator.attrgetter('anniversary_score'))", "raw_code": "your_list.sort(key=operator.attrgetter('anniversary_score'))", "str_map": {}}
{"src": ["sort", "list", "your_list", "by", "the", "anniversary_score", "attribute", "of", "each", "object"], "token": ["your_list", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", ".", "anniversary_score", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "your_list.sort(key=lambda x: x.anniversary_score)", "decano_code": "your_list.sort(key=lambda x: x.anniversary_score)", "raw_code": "your_list.sort(key=lambda x: x.anniversary_score)", "str_map": {}}
{"src": ["convert", "a", "tensor", "with", "list", "of", "constants", "[1, 2, 3", "]", "into", "a", "numpy", "array", "in", "tensorflow"], "token": ["print", "(", "type", "(", "tf", ".", "Session", "(", ")", ".", "run", "(", "tf", ".", "constant", "(", "[", "1", ",", "2", ",", "3", "]", ")", ")", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "OP", "OP"], "cano_code": "print(type(tf.Session().run(tf.constant([1, 2, 3]))))", "decano_code": "print(type(tf.Session().run(tf.constant([1, 2, 3]))))", "raw_code": "print(type(tf.Session().run(tf.constant([1, 2, 3]))))", "str_map": {}}
{"src": ["convert", "list", "a", "from", "being", "consecutive", "sequences", "of", "tuples", "into", "a", "single", "sequence", "of", "elements"], "token": ["list", "(", "itertools", ".", "chain", "(", "*", "a", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "list(itertools.chain(*a))", "decano_code": "list(itertools.chain(*a))", "raw_code": "list(itertools.chain(*a))", "str_map": {}}
{"src": ["set", "value", "for", "key", "a", "in", "dict", "count", "to", "0", "if", "key", "a", "does", "not", "exist", "or", "if", "value", "is", "none"], "token": ["count", ".", "setdefault", "(", "'a'", ",", "0", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NUMBER", "OP"], "cano_code": "count.setdefault('a', 0)", "decano_code": "count.setdefault('a', 0)", "raw_code": "count.setdefault('a', 0)", "str_map": {}}
{"src": ["do", "group", "by", "on", "cluster", "column", "in", "df", "and", "get", "its", "mean"], "token": ["df", ".", "groupby", "(", "[", "'cluster'", "]", ")", ".", "mean", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "df.groupby(['cluster']).mean()", "decano_code": "df.groupby(['cluster']).mean()", "raw_code": "df.groupby(['cluster']).mean()", "str_map": {}}
{"src": ["get", "number", "in", "list", "myList", "closest", "in", "value", "to", "number", "myNumber"], "token": ["min", "(", "myList", ",", "key", "=", "lambda", "x", ":", "abs", "(", "x", "-", "myNumber", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "min(myList, key=lambda x: abs(x - myNumber))", "decano_code": "min(myList, key=lambda x: abs(x - myNumber))", "raw_code": "min(myList, key=lambda x: abs(x - myNumber))", "str_map": {}}
{"src": ["check", "if", "any", "of", "the", "items", "in", "search", "appear", "in", "string"], "token": ["any", "(", "x", "in", "string", "for", "x", "in", "search", ")"], "type": ["KEYWORD", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "any(x in string for x in search)", "decano_code": "any(x in string for x in search)", "raw_code": "any(x in string for x in search)", "str_map": {}}
{"src": ["search", "for", "occurrences", "of", "regex", "pattern", "pattern", "in", "string", "url"], "token": ["print", "(", "pattern", ".", "search", "(", "url", ")", ".", "group", "(", "1", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "print(pattern.search(url).group(1))", "decano_code": "print(pattern.search(url).group(1))", "raw_code": "print(pattern.search(url).group(1))", "str_map": {}}
{"src": ["factorize", "all", "string", "values", "in", "dataframe", "s", "into", "floats"], "token": ["(", "s", ".", "factorize", "(", ")", "[", "0", "]", "+", "1", ")", ".", "astype", "(", "'float'", ")"], "type": ["OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "(s.factorize()[0] + 1).astype('float')", "decano_code": "(s.factorize()[0] + 1).astype('float')", "raw_code": "(s.factorize()[0] + 1).astype('float')", "str_map": {}}
{"src": ["get", "a", "list", "c", "by", "subtracting", "values", "in", "one", "list", "b", "from", "corresponding", "values", "in", "another", "list", "a"], "token": ["C", "=", "[", "(", "a", "-", "b", ")", "for", "a", ",", "b", "in", "zip", "(", "A", ",", "B", ")", "]"], "type": ["NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "C = [(a - b) for a, b in zip(A, B)]", "decano_code": "C = [(a - b) for a, b in zip(A, B)]", "raw_code": "C = [(a - b) for a, b in zip(A, B)]", "str_map": {}}
{"src": ["derive", "the", "week", "start", "for", "the", "given", "week", "number", "and", "year", "\u20182011", ",", "4", ",", "0\u2019"], "token": ["datetime", ".", "datetime", ".", "strptime", "(", "'2011, 4, 0'", ",", "'%Y, %U, %w'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "datetime.datetime.strptime('2011, 4, 0', '%Y, %U, %w')", "decano_code": "datetime.datetime.strptime('2011, 4, 0', '%Y, %U, %w')", "raw_code": "datetime.datetime.strptime('2011, 4, 0', '%Y, %U, %w')", "str_map": {}}
{"src": ["convert", "a", "list", "of", "strings", "['1', '-1', '1'", "]", "to", "a", "list", "of", "numbers"], "token": ["map", "(", "int", ",", "[", "'1'", ",", "'-1'", ",", "'1'", "]", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "map(int, ['1', '-1', '1'])", "decano_code": "map(int, ['1', '-1', '1'])", "raw_code": "map(int, ['1', '-1', '1'])", "str_map": {}}
{"src": ["create", "datetime", "object", "from", "_STR:0_"], "token": ["datetime", ".", "datetime", ".", "strptime", "(", "'16Sep2012'", ",", "'%d%b%Y'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "datetime.datetime.strptime('16Sep2012', '%d%b%Y')", "decano_code": "datetime.datetime.strptime('16Sep2012', '%d%b%Y')", "raw_code": "datetime.datetime.strptime('16Sep2012', '%d%b%Y')", "str_map": {"16sep2012": "_STR:0_"}}
{"src": ["update", "fields", "in", "django", "model", "book", "with", "arguments", "in", "dictionary", "d", "where", "primary", "key", "is", "equal", "to", "pk"], "token": ["Book", ".", "objects", ".", "filter", "(", "pk", "=", "pk", ")", ".", "update", "(", "**", "d", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP", "NAME", "OP"], "cano_code": "Book.objects.filter(pk=pk).update(**d)", "decano_code": "Book.objects.filter(pk=pk).update(**d)", "raw_code": "Book.objects.filter(pk=pk).update(**d)", "str_map": {}}
{"src": ["update", "the", "fields", "in", "django", "model", "book", "using", "dictionary", "d"], "token": ["Book", ".", "objects", ".", "create", "(", "**", "d", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP"], "cano_code": "Book.objects.create(**d)", "decano_code": "Book.objects.create(**d)", "raw_code": "Book.objects.create(**d)", "str_map": {}}
{"src": ["print", "a", "digit", "your_number", "with", "exactly", "2", "digits", "after", "decimal"], "token": ["print", "(", "'{0:.2f}'", ".", "format", "(", "your_number", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "print('{0:.2f}'.format(your_number))", "decano_code": "print('{0:.2f}'.format(your_number))", "raw_code": "print('{0:.2f}'.format(your_number))", "str_map": {}}
{"src": ["generate", "a", "12-digit", "random", "number"], "token": ["random", ".", "randint", "(", "100000000000", ",", "999999999999", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "random.randint(100000000000, 999999999999)", "decano_code": "random.randint(100000000000, 999999999999)", "raw_code": "random.randint(100000000000, 999999999999)", "str_map": {}}
{"src": ["generate", "a", "random", "12-digit", "number"], "token": ["int", "(", "''", ".", "join", "(", "str", "(", "random", ".", "randint", "(", "0", ",", "9", ")", ")", "for", "_", "in", "range", "(", "12", ")", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "int(''.join(str(random.randint(0, 9)) for _ in range(12)))", "decano_code": "int(''.join(str(random.randint(0, 9)) for _ in range(12)))", "raw_code": "int(''.join(str(random.randint(0, 9)) for _ in range(12)))", "str_map": {}}
{"src": ["generate", "a", "random", "12-digit", "number"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "str", "(", "random", ".", "randint", "(", "0", ",", "9", ")", ")", "for", "_", "in", "range", "(", "12", ")", ")"], "type": ["STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "OP"], "cano_code": "\"\"\"\"\"\".join(str(random.randint(0, 9)) for _ in range(12))", "decano_code": "\"\"\"\"\"\".join(str(random.randint(0, 9)) for _ in range(12))", "raw_code": "\"\"\"\"\"\".join(str(random.randint(0, 9)) for _ in range(12))", "str_map": {}}
{"src": ["generate", "a", "12-digit", "random", "number"], "token": ["'%0.12d'", "%", "random", ".", "randint", "(", "0", ",", "999999999999", ")"], "type": ["STRING", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "'%0.12d' % random.randint(0, 999999999999)", "decano_code": "'%0.12d' % random.randint(0, 999999999999)", "raw_code": "'%0.12d' % random.randint(0, 999999999999)", "str_map": {}}
{"src": ["remove", "specific", "elements", "in", "a", "numpy", "array", "a"], "token": ["numpy", ".", "delete", "(", "a", ",", "index", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "numpy.delete(a, index)", "decano_code": "numpy.delete(a, index)", "raw_code": "numpy.delete(a, index)", "str_map": {}}
{"src": ["sort", "list", "trial_list", "based", "on", "values", "of", "dictionary", "trail_dict"], "token": ["sorted", "(", "trial_list", ",", "key", "=", "lambda", "x", ":", "trial_dict", "[", "x", "]", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "sorted(trial_list, key=lambda x: trial_dict[x])", "decano_code": "sorted(trial_list, key=lambda x: trial_dict[x])", "raw_code": "sorted(trial_list, key=lambda x: trial_dict[x])", "str_map": {}}
{"src": ["read", "a", "single", "character", "from", "stdin"], "token": ["sys", ".", "stdin", ".", "read", "(", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "sys.stdin.read(1)", "decano_code": "sys.stdin.read(1)", "raw_code": "sys.stdin.read(1)", "str_map": {}}
{"src": ["get", "a", "list", "of", "characters", "in", "string", "x", "matching", "regex", "pattern", "pattern"], "token": ["print", "(", "re", ".", "findall", "(", "pattern", ",", "x", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "print(re.findall(pattern, x))", "decano_code": "print(re.findall(pattern, x))", "raw_code": "print(re.findall(pattern, x))", "str_map": {}}
{"src": ["get", "the", "context", "of", "a", "search", "by", "keyword", "_STR:0_", "in", "beautifulsoup", "soup"], "token": ["k", "=", "soup", ".", "find", "(", "text", "=", "re", ".", "compile", "(", "\" _STR:0_ \"", ")", ")", ".", "parent", ".", "text"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "OP", "OP", "NAME", "OP", "NAME"], "cano_code": "k = soup.find(text=re.compile(\" _STR:0_ \")).parent.text", "decano_code": "k = soup.find(text=re.compile(\" _STR:0_ \")).parent.text", "raw_code": "k = soup.find(text=re.compile('My keywords')).parent.text", "str_map": {"My keywords": "_STR:0_"}}
{"src": ["convert", "rows", "in", "pandas", "data", "frame", "df", "into", "list"], "token": ["df", ".", "apply", "(", "lambda", "x", ":", "x", ".", "tolist", "(", ")", ",", "axis", "=", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "df.apply(lambda x: x.tolist(), axis=1)", "decano_code": "df.apply(lambda x: x.tolist(), axis=1)", "raw_code": "df.apply(lambda x: x.tolist(), axis=1)", "str_map": {}}
{"src": ["convert", "a", "1d", "a", "array", "to", "a", "2d", "array", "b"], "token": ["B", "=", "np", ".", "reshape", "(", "A", ",", "(", "-", "1", ",", "2", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "B = np.reshape(A, (-1, 2))", "decano_code": "B = np.reshape(A, (-1, 2))", "raw_code": "B = np.reshape(A, (-1, 2))", "str_map": {}}
{"src": ["run", "app", "app", "on", "host", "_STR:0_", "and", "port", "9000", "in", "flask"], "token": ["app", ".", "run", "(", "host", "=", "\" _STR:0_ \"", ",", "port", "=", "9000", ",", "debug", "=", "False", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NUMBER", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "app.run(host=\" _STR:0_ \", port=9000, debug=False)", "decano_code": "app.run(host=\" _STR:0_ \", port=9000, debug=False)", "raw_code": "app.run(host='192.168.0.58', port=9000, debug=False)", "str_map": {"192.168.0.58": "_STR:0_"}}
{"src": ["encode", "unicode", "string", "_STR:0_", "to", "utf-8", "code"], "token": ["print", "(", "\" _STR:0_ \"", ".", "encode", "(", "'UTF8'", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "print(\" _STR:0_ \".encode('UTF8'))", "decano_code": "print(\" _STR:0_ \".encode('UTF8'))", "raw_code": "print('\\xc5\\xc4\\xd6'.encode('UTF8'))", "str_map": {"\u00c5\u00c4\u00d6": "_STR:0_"}}
{"src": ["get", "the", "first", "element", "of", "each", "tuple", "from", "a", "list", "of", "tuples", "g"], "token": ["[", "x", "[", "0", "]", "for", "x", "in", "G", "]"], "type": ["OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[x[0] for x in G]", "decano_code": "[x[0] for x in G]", "raw_code": "[x[0] for x in G]", "str_map": {}}
{"src": ["regular", "expression", "matching", "all", "but", "_STR:0_", "and", "_STR:1_", "for", "string", "string"], "token": ["re", ".", "findall", "(", "'-(?!aa-|bb-)([^-]+)'", ",", "string", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.findall('-(?!aa-|bb-)([^-]+)', string)", "decano_code": "re.findall('-(?!aa-|bb-)([^-]+)', string)", "raw_code": "re.findall('-(?!aa-|bb-)([^-]+)', string)", "str_map": {"aa": "_STR:0_", "bb": "_STR:1_"}}
{"src": ["regular", "expression", "matching", "all", "but", "_STR:0_", "and", "_STR:1_"], "token": ["re", ".", "findall", "(", "'-(?!aa|bb)([^-]+)'", ",", "string", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.findall('-(?!aa|bb)([^-]+)', string)", "decano_code": "re.findall('-(?!aa|bb)([^-]+)', string)", "raw_code": "re.findall('-(?!aa|bb)([^-]+)', string)", "str_map": {"aa": "_STR:0_", "bb": "_STR:1_"}}
{"src": ["remove", "false", "entries", "from", "a", "dictionary", "hand"], "token": ["{", "k", ":", "v", "for", "k", ",", "v", "in", "list", "(", "hand", ".", "items", "(", ")", ")", "if", "v", "}"], "type": ["OP", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "NAME", "OP"], "cano_code": "{k: v for k, v in list(hand.items()) if v}", "decano_code": "{k: v for k, v in list(hand.items()) if v}", "raw_code": "{k: v for k, v in list(hand.items()) if v}", "str_map": {}}
{"src": ["get", "a", "dictionary", "from", "a", "dictionary", "hand", "where", "the", "values", "are", "present"], "token": ["dict", "(", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "hand", ".", "items", "(", ")", "if", "v", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "OP"], "cano_code": "dict((k, v) for k, v in hand.items() if v)", "decano_code": "dict((k, v) for k, v in hand.items() if v)", "raw_code": "dict((k, v) for k, v in hand.items() if v)", "str_map": {}}
{"src": ["sort", "list", "l", "based", "on", "the", "value", "of", "variable", "_STR:0_", "for", "each", "object", "in", "list", "l"], "token": ["sorted", "(", "L", ",", "key", "=", "operator", ".", "itemgetter", "(", "\" _STR:0_ \"", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "sorted(L, key=operator.itemgetter(\" _STR:0_ \"))", "decano_code": "sorted(L, key=operator.itemgetter(\" _STR:0_ \"))", "raw_code": "sorted(L, key=operator.itemgetter('resultType'))", "str_map": {"resultType": "_STR:0_"}}
{"src": ["sort", "a", "list", "of", "objects", "s", "by", "a", "member", "variable", "_STR:0_"], "token": ["s", ".", "sort", "(", "key", "=", "operator", ".", "attrgetter", "(", "\" _STR:0_ \"", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "s.sort(key=operator.attrgetter(\" _STR:0_ \"))", "decano_code": "s.sort(key=operator.attrgetter(\" _STR:0_ \"))", "raw_code": "s.sort(key=operator.attrgetter('resultType'))", "str_map": {"resultType": "_STR:0_"}}
{"src": ["sort", "a", "list", "of", "objects", "_STR:0_", "where", "the", "object", "has", "member", "number", "variable", "resultType"], "token": ["somelist", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", ".", "resultType", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "somelist.sort(key=lambda x: x.resultType)", "decano_code": "somelist.sort(key=lambda x: x.resultType)", "raw_code": "somelist.sort(key=lambda x: x.resultType)", "str_map": {"somelist": "_STR:0_"}}
{"src": ["join", "multiple", "dataframes", "d1", ",", "d2", ",", "and", "d3", "on", "column", "_STR:0_"], "token": ["df1", ".", "merge", "(", "df2", ",", "on", "=", "\" _STR:0_ \"", ")", ".", "merge", "(", "df3", ",", "on", "=", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df1.merge(df2, on=\" _STR:0_ \").merge(df3, on=\" _STR:0_ \")", "decano_code": "df1.merge(df2, on=\" _STR:0_ \").merge(df3, on=\" _STR:0_ \")", "raw_code": "df1.merge(df2, on='name').merge(df3, on='name')", "str_map": {"name": "_STR:0_"}}
{"src": ["generate", "random", "decimal"], "token": ["decimal", ".", "Decimal", "(", "random", ".", "randrange", "(", "10000", ")", ")", "/", "100"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER"], "cano_code": "decimal.Decimal(random.randrange(10000)) / 100", "decano_code": "decimal.Decimal(random.randrange(10000)) / 100", "raw_code": "decimal.Decimal(random.randrange(10000)) / 100", "str_map": {}}
{"src": ["list", "all", "files", "of", "a", "directory", "mypath"], "token": ["onlyfiles", "=", "[", "f", "for", "f", "in", "listdir", "(", "mypath", ")", "if", "isfile", "(", "join", "(", "mypath", ",", "f", ")", ")", "]"], "type": ["NAME", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]", "decano_code": "onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]", "raw_code": "onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]", "str_map": {}}
{"src": ["list", "all", "files", "of", "a", "directory", "mypath"], "token": ["f", "=", "[", "]", "\n", "for", "(", "dirpath", ",", "dirnames", ",", "filenames", ")", "in", "walk", "(", "mypath", ")", ":", "\n", "    ", "f", ".", "extend", "(", "filenames", ")", "\n", "break", ""], "type": ["NAME", "OP", "OP", "OP", "NEWLINE", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "NEWLINE", "INDENT", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NEWLINE", "KEYWORD", "DEDENT"], "cano_code": "f = []\nfor (dirpath, dirnames, filenames) in walk(mypath):\n    f.extend(filenames)\n    break", "decano_code": "f = []\nfor (dirpath, dirnames, filenames) in walk(mypath):\n    f.extend(filenames)\n    break", "raw_code": "f = []\nfor (dirpath, dirnames, filenames) in walk(mypath):\n    f.extend(filenames)\n    break", "str_map": {}}
{"src": ["list", "all", "_STR:0_", "files", "of", "a", "directory", "_STR:1_"], "token": ["print", "(", "glob", ".", "glob", "(", "'/home/adam/*.txt'", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "print(glob.glob('/home/adam/*.txt'))", "decano_code": "print(glob.glob('/home/adam/*.txt'))", "raw_code": "print(glob.glob('/home/adam/*.txt'))", "str_map": {".txt": "_STR:0_", "/home/adam/": "_STR:1_"}}
{"src": ["list", "all", "files", "of", "a", "directory", "_STR:0_"], "token": ["os", ".", "listdir", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "os.listdir(\" _STR:0_ \")", "decano_code": "os.listdir(\" _STR:0_ \")", "raw_code": "os.listdir('somedirectory')", "str_map": {"somedirectory": "_STR:0_"}}
{"src": ["execute", "sql", "query", "_STR:0_", "with", "all", "parameters", "in", "list", "tup"], "token": ["cur", ".", "executemany", "(", "\" _STR:0_ \"", ",", "tup", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "cur.executemany(\" _STR:0_ \", tup)", "decano_code": "cur.executemany(\" _STR:0_ \", tup)", "raw_code": "cur.executemany('INSERT INTO table VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)', tup)", "str_map": {"INSERT INTO table VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)": "_STR:0_"}}
{"src": ["get", "keys", "with", "same", "value", "in", "dictionary", "d"], "token": ["print", "(", "[", "key", "for", "key", "in", "d", "if", "d", "[", "key", "]", "==", "1", "]", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "print([key for key in d if d[key] == 1])", "decano_code": "print([key for key in d if d[key] == 1])", "raw_code": "print([key for key in d if d[key] == 1])", "str_map": {}}
{"src": ["get", "keys", "with", "same", "value", "in", "dictionary", "d"], "token": ["print", "(", "[", "key", "for", "key", ",", "value", "in", "d", ".", "items", "(", ")", "if", "value", "==", "1", "]", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "print([key for key, value in d.items() if value == 1])", "decano_code": "print([key for key, value in d.items() if value == 1])", "raw_code": "print([key for key, value in d.items() if value == 1])", "str_map": {}}
{"src": ["get", "keys", "from", "a", "dictionary", "_STR:0_", "where", "the", "value", "is", "_STR:1_", "."], "token": ["print", "(", "[", "key", "for", "key", ",", "value", "in", "list", "(", "d", ".", "items", "(", ")", ")", "if", "value", "==", "1", "]", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "print([key for key, value in list(d.items()) if value == 1])", "decano_code": "print([key for key, value in list(d.items()) if value == 1])", "raw_code": "print([key for key, value in list(d.items()) if value == 1])", "str_map": {"d": "_STR:0_", "1": "_STR:1_"}}
{"src": ["create", "list", "of", "_STR:0_", "empty", "strings"], "token": ["strs", "=", "[", "''", "for", "x", "in", "range", "(", "size", ")", "]"], "type": ["NAME", "OP", "OP", "STRING", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "strs = ['' for x in range(size)]", "decano_code": "strs = ['' for x in range(size)]", "raw_code": "strs = ['' for x in range(size)]", "str_map": {"size": "_STR:0_"}}
{"src": ["generate", "pdf", "file", "output_filename", "from", "markdown", "file", "input_filename"], "token": ["with", "open", "(", "input_filename", ",", "'r'", ")", "as", "f", ":", "\n", "    ", "html_text", "=", "markdown", "(", "f", ".", "read", "(", ")", ",", "output_format", "=", "'html4'", ")", "\n", "", "pdfkit", ".", "from_string", "(", "html_text", ",", "output_filename", ")"], "type": ["KEYWORD", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "NAME", "OP", "NEWLINE", "INDENT", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP", "NEWLINE", "DEDENT", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "with open(input_filename, 'r') as f:\n    html_text = markdown(f.read(), output_format='html4')\npdfkit.from_string(html_text, output_filename)", "decano_code": "with open(input_filename, 'r') as f:\n    html_text = markdown(f.read(), output_format='html4')\npdfkit.from_string(html_text, output_filename)", "raw_code": "with open(input_filename, 'r') as f:\n    html_text = markdown(f.read(), output_format='html4')\npdfkit.from_string(html_text, output_filename)", "str_map": {}}
{"src": ["remove", "duplicate", "dict", "in", "list", "l"], "token": ["[", "dict", "(", "t", ")", "for", "t", "in", "set", "(", "[", "tuple", "(", "d", ".", "items", "(", ")", ")", "for", "d", "in", "l", "]", ")", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP", "OP"], "cano_code": "[dict(t) for t in set([tuple(d.items()) for d in l])]", "decano_code": "[dict(t) for t in set([tuple(d.items()) for d in l])]", "raw_code": "[dict(t) for t in set([tuple(d.items()) for d in l])]", "str_map": {}}
{"src": ["set", "time", "zone", "Europe/Istanbul", "in", "django"], "token": ["TIME_ZONE", "=", "'Europe/Istanbul'"], "type": ["NAME", "OP", "STRING"], "cano_code": "TIME_ZONE = 'Europe/Istanbul'", "decano_code": "TIME_ZONE = 'Europe/Istanbul'", "raw_code": "TIME_ZONE = 'Europe/Istanbul'", "str_map": {}}
{"src": ["append", "date", "to", "list", "value", "of", "key", "in", "dictionary", "dates_dict", ",", "or", "create", "key", "key", "with", "value", "date", "in", "a", "list", "if", "it", "does", "not", "exist"], "token": ["dates_dict", ".", "setdefault", "(", "key", ",", "[", "]", ")", ".", "append", "(", "date", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "dates_dict.setdefault(key, []).append(date)", "decano_code": "dates_dict.setdefault(key, []).append(date)", "raw_code": "dates_dict.setdefault(key, []).append(date)", "str_map": {}}
{"src": ["group", "the", "values", "from", "django", "model", "article", "with", "group", "by", "value", "pub_date", "and", "annotate", "by", "title"], "token": ["Article", ".", "objects", ".", "values", "(", "'pub_date'", ")", ".", "annotate", "(", "article_count", "=", "Count", "(", "'title'", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "Article.objects.values('pub_date').annotate(article_count=Count('title'))", "decano_code": "Article.objects.values('pub_date').annotate(article_count=Count('title'))", "raw_code": "Article.objects.values('pub_date').annotate(article_count=Count('title'))", "str_map": {}}
{"src": ["clear", "tkinter", "canvas", "canvas"], "token": ["canvas", ".", "delete", "(", "'all'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "canvas.delete('all')", "decano_code": "canvas.delete('all')", "raw_code": "canvas.delete('all')", "str_map": {}}
{"src": ["initialize", "a", "pandas", "series", "object", "s", "with", "columns", "['A', 'B', 'A1R', 'B2', 'AABB4'", "]"], "token": ["s", "=", "pd", ".", "Series", "(", "[", "'A'", ",", "'B'", ",", "'A1R'", ",", "'B2'", ",", "'AABB4'", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "s = pd.Series(['A', 'B', 'A1R', 'B2', 'AABB4'])", "decano_code": "s = pd.Series(['A', 'B', 'A1R', 'B2', 'AABB4'])", "raw_code": "s = pd.Series(['A', 'B', 'A1R', 'B2', 'AABB4'])", "str_map": {}}
{"src": ["none"], "token": ["datetime", ".", "datetime", ".", "strptime", "(", "'2007-03-04T21:08:12'", ",", "'%Y-%m-%dT%H:%M:%S'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "datetime.datetime.strptime('2007-03-04T21:08:12', '%Y-%m-%dT%H:%M:%S')", "decano_code": "datetime.datetime.strptime('2007-03-04T21:08:12', '%Y-%m-%dT%H:%M:%S')", "raw_code": "datetime.datetime.strptime('2007-03-04T21:08:12', '%Y-%m-%dT%H:%M:%S')", "str_map": {}}
{"src": ["sort", "list", "a", "using", "the", "first", "dimension", "of", "the", "element", "as", "the", "key", "to", "list", "b"], "token": ["a", ".", "sort", "(", "key", "=", "lambda", "x", ":", "b", ".", "index", "(", "x", "[", "0", "]", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "a.sort(key=lambda x: b.index(x[0]))", "decano_code": "a.sort(key=lambda x: b.index(x[0]))", "raw_code": "a.sort(key=lambda x: b.index(x[0]))", "str_map": {}}
{"src": ["how", "to", "sort", "a", "list", "according", "to", "another", "list", "?"], "token": ["a", ".", "sort", "(", "key", "=", "lambda", "x_y", ":", "b", ".", "index", "(", "x_y", "[", "0", "]", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "a.sort(key=lambda x_y: b.index(x_y[0]))", "decano_code": "a.sort(key=lambda x_y: b.index(x_y[0]))", "raw_code": "a.sort(key=lambda x_y: b.index(x_y[0]))", "str_map": {}}
{"src": ["save", "plot", "plt", "as", "png", "file", "_STR:0_"], "token": ["plt", ".", "savefig", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "plt.savefig(\" _STR:0_ \")", "decano_code": "plt.savefig(\" _STR:0_ \")", "raw_code": "plt.savefig('filename.png')", "str_map": {"filename.png": "_STR:0_"}}
{"src": ["save", "matplotlib", "graph", "to", "image", "file", "filename.png", "[", "filename", ".", "png", "]", "at", "a", "resolution", "of", "300 dpi"], "token": ["plt", ".", "savefig", "(", "'filename.png'", ",", "dpi", "=", "300", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "plt.savefig('filename.png', dpi=300)", "decano_code": "plt.savefig('filename.png', dpi=300)", "raw_code": "plt.savefig('filename.png', dpi=300)", "str_map": {}}
{"src": ["get", "output", "from", "process", "p1"], "token": ["p1", ".", "communicate", "(", ")", "[", "0", "]"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "p1.communicate()[0]", "decano_code": "p1.communicate()[0]", "raw_code": "p1.communicate()[0]", "str_map": {}}
{"src": ["how", "to", "get", "output", "of", "exe", "in", "python", "script", "?"], "token": ["output", "=", "subprocess", ".", "Popen", "(", "[", "'mycmd'", ",", "'myarg'", "]", ",", "stdout", "=", "PIPE", ")", ".", "communicate", "(", ")", "[", "0", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "output = subprocess.Popen(['mycmd', 'myarg'], stdout=PIPE).communicate()[0]", "decano_code": "output = subprocess.Popen(['mycmd', 'myarg'], stdout=PIPE).communicate()[0]", "raw_code": "output = subprocess.Popen(['mycmd', 'myarg'], stdout=PIPE).communicate()[0]", "str_map": {}}
{"src": ["searche", "in", "HTML", "string", "for", "elements", "that", "have", "text", "_STR:0_"], "token": ["soup", ".", "body", ".", "findAll", "(", "text", "=", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "soup.body.findAll(text=\" _STR:0_ \")", "decano_code": "soup.body.findAll(text=\" _STR:0_ \")", "raw_code": "soup.body.findAll(text='Python')", "str_map": {"Python": "_STR:0_"}}
{"src": ["BeautifulSoup", "find", "string", "_STR:0_", "in", "HTML", "body", "body"], "token": ["soup", ".", "body", ".", "findAll", "(", "text", "=", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "soup.body.findAll(text=\" _STR:0_ \")", "decano_code": "soup.body.findAll(text=\" _STR:0_ \")", "raw_code": "soup.body.findAll(text='Python Jobs')", "str_map": {"Python Jobs": "_STR:0_"}}
{"src": ["sort", "items", "in", "dictionary", "d", "using", "the", "first", "part", "of", "the", "key", "after", "splitting", "the", "key"], "token": ["sorted", "(", "list", "(", "d", ".", "items", "(", ")", ")", ",", "key", "=", "lambda", "name_num", ":", "(", "name_num", "[", "0", "]", ".", "rsplit", "(", "None", ",", "1", ")", "[", "0", "]", ",", "name_num", "[", "1", "]", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "KEYWORD", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "sorted(list(d.items()), key=lambda name_num: (name_num[0].rsplit(None, 1)[0], name_num[1]))", "decano_code": "sorted(list(d.items()), key=lambda name_num: (name_num[0].rsplit(None, 1)[0], name_num[1]))", "raw_code": "sorted(list(d.items()), key=lambda name_num: (name_num[0].rsplit(None, 1)[0], name_num[1]))", "str_map": {}}
{"src": ["create", "a", "set", "that", "is", "the", "exclusive", "or", "of", "[1", ",", "2", ",", "3", "]", "and", "[3", ",", "4", ",", "5", "]"], "token": ["set", "(", "[", "1", ",", "2", ",", "3", "]", ")", "^", "set", "(", "[", "3", ",", "4", ",", "5", "]", ")"], "type": ["KEYWORD", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "KEYWORD", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "set([1, 2, 3]) ^ set([3, 4, 5])", "decano_code": "set([1, 2, 3]) ^ set([3, 4, 5])", "raw_code": "set([1, 2, 3]) ^ set([3, 4, 5])", "str_map": {}}
{"src": ["get", "a", "list", "values", "of", "a", "dictionary", "item", "pass_id", "from", "post", "requests", "in", "django"], "token": ["request", ".", "POST", ".", "getlist", "(", "'pass_id'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "request.POST.getlist('pass_id')", "decano_code": "request.POST.getlist('pass_id')", "raw_code": "request.POST.getlist('pass_id')", "str_map": {}}
{"src": ["filter", "duplicate", "entries", "w.r.t", "[", "w", ".", "r", ".", "t", "]", ".", "value", "in", "_STR:0_", "from", "a", "list", "of", "dictionaries", "_STR:1_"], "token": ["list", "(", "dict", "(", "(", "x", "[", "\" _STR:0_ \"", "]", ",", "x", ")", "for", "x", "in", "L", ")", ".", "values", "(", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "list(dict((x[\" _STR:0_ \"], x) for x in L).values())", "decano_code": "list(dict((x[\" _STR:0_ \"], x) for x in L).values())", "raw_code": "list(dict((x['id'], x) for x in L).values())", "str_map": {"id": "_STR:0_", "L": "_STR:1_"}}
{"src": ["get", "pandas", "GroupBy", "object", "with", "sum", "over", "the", "rows", "with", "same", "column", "names", "within", "dataframe", "df"], "token": ["df", ".", "groupby", "(", "df", ".", "columns", ",", "axis", "=", "1", ")", ".", "sum", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "KEYWORD", "OP", "OP"], "cano_code": "df.groupby(df.columns, axis=1).sum()", "decano_code": "df.groupby(df.columns, axis=1).sum()", "raw_code": "df.groupby(df.columns, axis=1).sum()", "str_map": {}}
{"src": ["convert", "the", "zip", "of", "range", "(1, 5", ")", "and", "range", "(7, 11", ")", "into", "a", "dictionary"], "token": ["dict", "(", "zip", "(", "list", "(", "range", "(", "1", ",", "5", ")", ")", ",", "list", "(", "range", "(", "7", ",", "11", ")", ")", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "OP"], "cano_code": "dict(zip(list(range(1, 5)), list(range(7, 11))))", "decano_code": "dict(zip(list(range(1, 5)), list(range(7, 11))))", "raw_code": "dict(zip(list(range(1, 5)), list(range(7, 11))))", "str_map": {}}
{"src": ["get", "all", "indexes", "of", "boolean", "numpy", "array", "where", "boolean", "value", "mask", "is", "true"], "token": ["numpy", ".", "where", "(", "mask", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "numpy.where(mask)", "decano_code": "numpy.where(mask)", "raw_code": "numpy.where(mask)", "str_map": {}}
{"src": ["case", "insensitive", "comparison", "of", "strings", "string1", "and", "string2"], "token": ["if", "(", "string1", ".", "lower", "(", ")", "==", "string2", ".", "lower", "(", ")", ")", ":", "\n", "    ", "print", "(", "'The strings are the same (case insensitive)'", ")", "\n", "", "else", ":", "\n", "    ", "print", "(", "'The strings are not the same (case insensitive)'", ")", ""], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "OP", "STRING", "OP", "NEWLINE", "DEDENT", "KEYWORD", "OP", "NEWLINE", "INDENT", "KEYWORD", "OP", "STRING", "OP", "DEDENT"], "cano_code": "if (string1.lower() == string2.lower()):\n    print('The strings are the same (case insensitive)')\nelse:\n    print('The strings are not the same (case insensitive)')", "decano_code": "if (string1.lower() == string2.lower()):\n    print('The strings are the same (case insensitive)')\nelse:\n    print('The strings are not the same (case insensitive)')", "raw_code": "if (string1.lower() == string2.lower()):\n    print('The strings are the same (case insensitive)')\nelse:\n    print('The strings are not the same (case insensitive)')", "str_map": {}}
{"src": ["case", "insensitive", "string", "comparison", "between", "string1", "and", "string2"], "token": ["if", "(", "string1", ".", "lower", "(", ")", "==", "string2", ".", "lower", "(", ")", ")", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "if (string1.lower() == string2.lower()):\n    pass", "decano_code": "if (string1.lower() == string2.lower()):\n    pass", "raw_code": "if (string1.lower() == string2.lower()):\n    pass", "str_map": {}}
{"src": ["case", "insensitive", "string", "comparison", "between", "string1", "and", "string2"], "token": ["(", "string1", ".", "lower", "(", ")", "==", "string2", ".", "lower", "(", ")", ")"], "type": ["OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "(string1.lower() == string2.lower())", "decano_code": "(string1.lower() == string2.lower())", "raw_code": "(string1.lower() == string2.lower())", "str_map": {}}
{"src": ["case", "insensitive", "string", "comparison", "between", "first", "and", "second"], "token": ["(", "first", ".", "lower", "(", ")", "==", "second", ".", "lower", "(", ")", ")"], "type": ["OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "(first.lower() == second.lower())", "decano_code": "(first.lower() == second.lower())", "raw_code": "(first.lower() == second.lower())", "str_map": {}}
{"src": ["case", "insensitive", "comparison", "between", "strings", "first", "and", "second"], "token": ["(", "first", ".", "upper", "(", ")", "==", "second", ".", "upper", "(", ")", ")"], "type": ["OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "(first.upper() == second.upper())", "decano_code": "(first.upper() == second.upper())", "raw_code": "(first.upper() == second.upper())", "str_map": {}}
{"src": ["taking", "the", "results", "of", "a", "bash", "command", "_STR:0_"], "token": ["os", ".", "system", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "os.system(\" _STR:0_ \")", "decano_code": "os.system(\" _STR:0_ \")", "raw_code": "os.system(\"awk '{print $10, $11}' test.txt > test2.txt\")", "str_map": {"awk '{print $10, $11}' test.txt > test2.txt": "_STR:0_"}}
{"src": ["remove", "multiple", "values", "from", "a", "list", "my_list", "at", "the", "same", "time", "with", "index", "starting", "at", "2", "and", "ending", "just", "before", "6", "."], "token": ["del", "my_list", "[", "2", ":", "6", "]"], "type": ["KEYWORD", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "del my_list[2:6]", "decano_code": "del my_list[2:6]", "raw_code": "del my_list[2:6]", "str_map": {}}
{"src": ["convert", "a", "string", "s", "to", "its", "base-10", "representation"], "token": ["int", "(", "s", ".", "encode", "(", "'hex'", ")", ",", "16", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NUMBER", "OP"], "cano_code": "int(s.encode('hex'), 16)", "decano_code": "int(s.encode('hex'), 16)", "raw_code": "int(s.encode('hex'), 16)", "str_map": {}}
{"src": ["match", "regex", "pattern", "_STR:0_", "on", "string", "seq"], "token": ["re", ".", "findall", "(", "\" _STR:0_ \"", ",", "seq", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.findall(\" _STR:0_ \", seq)", "decano_code": "re.findall(\" _STR:0_ \", seq)", "raw_code": "re.findall('TAA(?:[ATGC]{3})+?TAA', seq)", "str_map": {"TAA(?:[ATGC]{3})+?TAA": "_STR:0_"}}
{"src": ["sort", "a", "set", "s", "by", "numerical", "value"], "token": ["sorted", "(", "s", ",", "key", "=", "float", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "sorted(s, key=float)", "decano_code": "sorted(s, key=float)", "raw_code": "sorted(s, key=float)", "str_map": {}}
{"src": ["convert", "an", "int", "65", "to", "hex", "string"], "token": ["hex", "(", "65", ")"], "type": ["KEYWORD", "OP", "NUMBER", "OP"], "cano_code": "hex(65)", "decano_code": "hex(65)", "raw_code": "hex(65)", "str_map": {}}
{"src": ["append", "a", "pandas", "series", "b", "to", "the", "series", "a", "and", "get", "a", "continuous", "index"], "token": ["a", ".", "append", "(", "b", ")", ".", "reset_index", "(", "drop", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "a.append(b).reset_index(drop=True)", "decano_code": "a.append(b).reset_index(drop=True)", "raw_code": "a.append(b).reset_index(drop=True)", "str_map": {}}
{"src": ["simple", "way", "to", "append", "a", "pandas", "series", "a", "and", "b", "with", "same", "index"], "token": ["pd", ".", "concat", "(", "[", "a", ",", "b", "]", ",", "ignore_index", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "pd.concat([a, b], ignore_index=True)", "decano_code": "pd.concat([a, b], ignore_index=True)", "raw_code": "pd.concat([a, b], ignore_index=True)", "str_map": {}}
{"src": ["get", "a", "list", "of", "tuples", "with", "multiple", "iterators", "using", "list", "comprehension"], "token": ["[", "(", "i", ",", "j", ")", "for", "i", "in", "range", "(", "1", ",", "3", ")", "for", "j", "in", "range", "(", "1", ",", "5", ")", "]"], "type": ["OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "[(i, j) for i in range(1, 3) for j in range(1, 5)]", "decano_code": "[(i, j) for i in range(1, 3) for j in range(1, 5)]", "raw_code": "[(i, j) for i in range(1, 3) for j in range(1, 5)]", "str_map": {}}
{"src": ["reverse", "sort", "items", "in", "dictionary", "mydict", "by", "value"], "token": ["sorted", "(", "iter", "(", "mydict", ".", "items", "(", ")", ")", ",", "key", "=", "itemgetter", "(", "1", ")", ",", "reverse", "=", "True", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "sorted(iter(mydict.items()), key=itemgetter(1), reverse=True)", "decano_code": "sorted(iter(mydict.items()), key=itemgetter(1), reverse=True)", "raw_code": "sorted(iter(mydict.items()), key=itemgetter(1), reverse=True)", "str_map": {}}
{"src": ["select", "the", "last", "business", "day", "of", "the", "month", "for", "each", "month", "in", "2014", "in", "pandas"], "token": ["pd", ".", "date_range", "(", "'1/1/2014'", ",", "periods", "=", "12", ",", "freq", "=", "'BM'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NUMBER", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "pd.date_range('1/1/2014', periods=12, freq='BM')", "decano_code": "pd.date_range('1/1/2014', periods=12, freq='BM')", "raw_code": "pd.date_range('1/1/2014', periods=12, freq='BM')", "str_map": {}}
{"src": ["disable", "the", "certificate", "check", "in", "https", "requests", "for", "url", "https://kennethreitz.com", "[", "https://kennethreitz", ".", "com", "]"], "token": ["requests", ".", "get", "(", "'https://kennethreitz.com'", ",", "verify", "=", "False", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "requests.get('https://kennethreitz.com', verify=False)", "decano_code": "requests.get('https://kennethreitz.com', verify=False)", "raw_code": "requests.get('https://kennethreitz.com', verify=False)", "str_map": {}}
{"src": ["return", "dataframe", "df", "with", "last", "row", "dropped"], "token": ["df", ".", "ix", "[", ":", "-", "1", "]"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "df.ix[:-1]", "decano_code": "df.ix[:-1]", "raw_code": "df.ix[:-1]", "str_map": {}}
{"src": ["check", "if", "_STR:0_", "is", "in", "string", "somestring"], "token": ["if", "(", "\" _STR:0_ \"", "not", "in", "somestring", ")", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "OP", "STRING", "KEYWORD", "KEYWORD", "NAME", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "if (\" _STR:0_ \" not in somestring):\n    pass", "decano_code": "if (\" _STR:0_ \" not in somestring):\n    pass", "raw_code": "if ('blah' not in somestring):\n    pass", "str_map": {"blah": "_STR:0_"}}
{"src": ["check", "if", "string", "needle", "is", "in", "haystack"], "token": ["if", "(", "needle", "in", "haystack", ")", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "OP", "NAME", "KEYWORD", "NAME", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "if (needle in haystack):\n    pass", "decano_code": "if (needle in haystack):\n    pass", "raw_code": "if (needle in haystack):\n    pass", "str_map": {}}
{"src": ["check", "if", "string", "_STR:0_", "is", "in", "string"], "token": ["string", ".", "find", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "string.find(\" _STR:0_ \")", "decano_code": "string.find(\" _STR:0_ \")", "raw_code": "string.find('substring')", "str_map": {"substring": "_STR:0_"}}
{"src": ["check", "if", "string", "s", "contains", "_STR:0_"], "token": ["if", "(", "s", ".", "find", "(", "\" _STR:0_ \"", ")", "==", "(", "-", "1", ")", ")", ":", "\n", "    ", "print", "(", "\"No 'is' here!\"", ")", "\n", "", "else", ":", "\n", "    ", "print", "(", "\"Found 'is' in the string.\"", ")", ""], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "OP", "STRING", "OP", "NEWLINE", "DEDENT", "KEYWORD", "OP", "NEWLINE", "INDENT", "KEYWORD", "OP", "STRING", "OP", "DEDENT"], "cano_code": "if (s.find(\" _STR:0_ \") == (-1)):\n    print(\"No 'is' here!\")\nelse:\n    print(\"Found 'is' in the string.\")", "decano_code": "if (s.find(\" _STR:0_ \") == (-1)):\n    print(\"No 'is' here!\")\nelse:\n    print(\"Found 'is' in the string.\")", "raw_code": "if (s.find('is') == (-1)):\n    print(\"No 'is' here!\")\nelse:\n    print(\"Found 'is' in the string.\")", "str_map": {"is": "_STR:0_"}}
{"src": ["extract", "first", "and", "last", "row", "of", "a", "dataframe", "df"], "token": ["pd", ".", "concat", "(", "[", "df", ".", "head", "(", "1", ")", ",", "df", ".", "tail", "(", "1", ")", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "pd.concat([df.head(1), df.tail(1)])", "decano_code": "pd.concat([df.head(1), df.tail(1)])", "raw_code": "pd.concat([df.head(1), df.tail(1)])", "str_map": {}}
{"src": ["filter", "a", "django", "model", "MyModel", "to", "have", "charfield", "length", "of", "max", "255"], "token": ["MyModel", ".", "objects", ".", "extra", "(", "where", "=", "[", "'CHAR_LENGTH(text) > 254'", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "OP"], "cano_code": "MyModel.objects.extra(where=['CHAR_LENGTH(text) > 254'])", "decano_code": "MyModel.objects.extra(where=['CHAR_LENGTH(text) > 254'])", "raw_code": "MyModel.objects.extra(where=['CHAR_LENGTH(text) > 254'])", "str_map": {}}
{"src": ["filter", "queryset", "for", "all", "objects", "in", "django", "model", "MyModel", "where", "texts", "length", "are", "greater", "than", "254"], "token": ["MyModel", ".", "objects", ".", "filter", "(", "text__regex", "=", "'^.{254}.*'", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "MyModel.objects.filter(text__regex='^.{254}.*')", "decano_code": "MyModel.objects.filter(text__regex='^.{254}.*')", "raw_code": "MyModel.objects.filter(text__regex='^.{254}.*')", "str_map": {}}
{"src": ["count", "the", "number", "of", "rows", "with", "missing", "values", "in", "a", "pandas", "dataframe", "df"], "token": ["sum", "(", "df", ".", "apply", "(", "lambda", "x", ":", "sum", "(", "x", ".", "isnull", "(", ")", ".", "values", ")", ",", "axis", "=", "1", ")", ">", "0", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP"], "cano_code": "sum(df.apply(lambda x: sum(x.isnull().values), axis=1) > 0)", "decano_code": "sum(df.apply(lambda x: sum(x.isnull().values), axis=1) > 0)", "raw_code": "sum(df.apply(lambda x: sum(x.isnull().values), axis=1) > 0)", "str_map": {}}
{"src": ["sorting", "while", "preserving", "order", "in", "python"], "token": ["sorted", "(", "enumerate", "(", "a", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "sorted(enumerate(a), key=lambda x: x[1])", "decano_code": "sorted(enumerate(a), key=lambda x: x[1])", "raw_code": "sorted(enumerate(a), key=lambda x: x[1])", "str_map": {}}
{"src": ["set", "the", "font", "_STR:0_", "of", "size", "12", "for", "a", "canvas", "'", "text", "item", "k"], "token": ["canvas", ".", "create_text", "(", "x", ",", "y", ",", "font", "=", "(", "\" _STR:0_ \"", ",", "12", ")", ",", "text", "=", "k", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "canvas.create_text(x, y, font=(\" _STR:0_ \", 12), text=k)", "decano_code": "canvas.create_text(x, y, font=(\" _STR:0_ \", 12), text=k)", "raw_code": "canvas.create_text(x, y, font=('Purisa', 12), text=k)", "str_map": {"Purisa": "_STR:0_"}}
{"src": ["create", "a", "list", "containing", "all", "values", "associated", "with", "key", "_STR:0_", "in", "dictionaries", "of", "list", "foos", "using", "list", "comprehension"], "token": ["[", "y", "[", "\" _STR:0_ \"", "]", "for", "x", "in", "foos", "for", "y", "in", "x", "[", "'bar'", "]", "]"], "type": ["OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "[y[\" _STR:0_ \"] for x in foos for y in x['bar']]", "decano_code": "[y[\" _STR:0_ \"] for x in foos for y in x['bar']]", "raw_code": "[y['baz'] for x in foos for y in x['bar']]", "str_map": {"baz": "_STR:0_"}}
{"src": ["read", "pandas", "data", "frame", "csv", "comma.csv", "[", "comma", ".", "csv", "]", "with", "extra", "commas", "in", "column", "specifying", "string", "delimiter", "'"], "token": ["df", "=", "pd", ".", "read_csv", "(", "'comma.csv'", ",", "quotechar", "=", "\"'\"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df = pd.read_csv('comma.csv', quotechar=\"'\")", "decano_code": "df = pd.read_csv('comma.csv', quotechar=\"'\")", "raw_code": "df = pd.read_csv('comma.csv', quotechar=\"'\")", "str_map": {}}
{"src": ["replace", "string", "_STR:0_", "with", "_STR:1_", "in", "dataframe", "df", "column", "_STR:2_"], "token": ["df", "[", "\" _STR:2_ \"", "]", "=", "df", "[", "\" _STR:2_ \"", "]", ".", "str", ".", "replace", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "df[\" _STR:2_ \"] = df[\" _STR:2_ \"].str.replace(\" _STR:0_ \", \" _STR:1_ \")", "decano_code": "df[\" _STR:2_ \"] = df[\" _STR:2_ \"].str.replace(\" _STR:0_ \", \" _STR:1_ \")", "raw_code": "df['a'] = df['a'].str.replace('in.', ' in. ')", "str_map": {"in.": "_STR:0_", " in. ": "_STR:1_", "a": "_STR:2_"}}
{"src": ["get", "all", "indexes", "of", "a", "list", "a", "where", "each", "value", "is", "greater", "than", "2"], "token": ["[", "i", "for", "i", "in", "range", "(", "len", "(", "a", ")", ")", "if", "a", "[", "i", "]", ">", "2", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP"], "cano_code": "[i for i in range(len(a)) if a[i] > 2]", "decano_code": "[i for i in range(len(a)) if a[i] > 2]", "raw_code": "[i for i in range(len(a)) if a[i] > 2]", "str_map": {}}
{"src": ["check", "if", "a", "local", "variable", "myVar", "exists"], "token": ["(", "'myVar'", "in", "locals", "(", ")", ")"], "type": ["OP", "STRING", "KEYWORD", "KEYWORD", "OP", "OP", "OP"], "cano_code": "('myVar' in locals())", "decano_code": "('myVar' in locals())", "raw_code": "('myVar' in locals())", "str_map": {}}
{"src": ["check", "if", "a", "global", "variable", "myVar", "exists"], "token": ["(", "'myVar'", "in", "globals", "(", ")", ")"], "type": ["OP", "STRING", "KEYWORD", "KEYWORD", "OP", "OP", "OP"], "cano_code": "('myVar' in globals())", "decano_code": "('myVar' in globals())", "raw_code": "('myVar' in globals())", "str_map": {}}
{"src": ["check", "if", "object", "obj", "has", "attribute", "_STR:0_"], "token": ["hasattr", "(", "obj", ",", "\" _STR:0_ \"", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "hasattr(obj, \" _STR:0_ \")", "decano_code": "hasattr(obj, \" _STR:0_ \")", "raw_code": "hasattr(obj, 'attr_name')", "str_map": {"attr_name": "_STR:0_"}}
{"src": ["check", "if", "a", "local", "variable", "_STR:0_", "exists"], "token": ["if", "(", "\" _STR:0_ \"", "in", "locals", "(", ")", ")", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "OP", "STRING", "KEYWORD", "KEYWORD", "OP", "OP", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "if (\" _STR:0_ \" in locals()):\n    pass", "decano_code": "if (\" _STR:0_ \" in locals()):\n    pass", "raw_code": "if ('myVar' in locals()):\n    pass", "str_map": {"myVar": "_STR:0_"}}
{"src": ["check", "if", "a", "global", "variable", "_STR:0_", "exists"], "token": ["if", "(", "\" _STR:0_ \"", "in", "globals", "(", ")", ")", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "OP", "STRING", "KEYWORD", "KEYWORD", "OP", "OP", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "if (\" _STR:0_ \" in globals()):\n    pass", "decano_code": "if (\" _STR:0_ \" in globals()):\n    pass", "raw_code": "if ('myVar' in globals()):\n    pass", "str_map": {"myVar": "_STR:0_"}}
{"src": ["lambda", "function", "that", "adds", "two", "operands"], "token": ["lambda", "x", ",", "y", ":", "x", "+", "y"], "type": ["KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME"], "cano_code": "lambda x, y: x + y", "decano_code": "lambda x, y: x + y", "raw_code": "lambda x, y: x + y", "str_map": {}}
{"src": ["count", "the", "number", "of", "items", "in", "a", "generator/iterator", "it"], "token": ["sum", "(", "1", "for", "i", "in", "it", ")"], "type": ["KEYWORD", "OP", "NUMBER", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "sum(1 for i in it)", "decano_code": "sum(1 for i in it)", "raw_code": "sum(1 for i in it)", "str_map": {}}
{"src": ["get", "tuples", "of", "the", "corresponding", "elements", "from", "lists", "lst", "and", "lst2"], "token": ["[", "(", "x", ",", "lst2", "[", "i", "]", ")", "for", "i", ",", "x", "in", "enumerate", "(", "lst", ")", "]"], "type": ["OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "[(x, lst2[i]) for i, x in enumerate(lst)]", "decano_code": "[(x, lst2[i]) for i, x in enumerate(lst)]", "raw_code": "[(x, lst2[i]) for i, x in enumerate(lst)]", "str_map": {}}
{"src": ["create", "tuples", "containing", "elements", "that", "are", "at", "the", "same", "index", "of", "list", "lst", "and", "list", "lst2"], "token": ["[", "(", "i", ",", "j", ")", "for", "i", ",", "j", "in", "zip", "(", "lst", ",", "lst2", ")", "]"], "type": ["OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "[(i, j) for i, j in zip(lst, lst2)]", "decano_code": "[(i, j) for i, j in zip(lst, lst2)]", "raw_code": "[(i, j) for i, j in zip(lst, lst2)]", "str_map": {}}
{"src": ["get", "tuples", "from", "lists", "lst", "and", "lst2", "using", "list", "comprehension", "in", "python", "2"], "token": ["[", "(", "lst", "[", "i", "]", ",", "lst2", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "lst", ")", ")", "]"], "type": ["OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "[(lst[i], lst2[i]) for i in range(len(lst))]", "decano_code": "[(lst[i], lst2[i]) for i in range(len(lst))]", "raw_code": "[(lst[i], lst2[i]) for i in range(len(lst))]", "str_map": {}}
{"src": ["convert", "hex", "triplet", "string", "rgbstr", "to", "rgb", "tuple"], "token": ["struct", ".", "unpack", "(", "'BBB'", ",", "rgbstr", ".", "decode", "(", "'hex'", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "struct.unpack('BBB', rgbstr.decode('hex'))", "decano_code": "struct.unpack('BBB', rgbstr.decode('hex'))", "raw_code": "struct.unpack('BBB', rgbstr.decode('hex'))", "str_map": {}}
{"src": ["check", "if", "3", "is", "not", "in", "a", "list", "[2", ",", "3", ",", "4", "]"], "token": ["(", "3", "not", "in", "[", "2", ",", "3", ",", "4", "]", ")"], "type": ["OP", "NUMBER", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "(3 not in [2, 3, 4])", "decano_code": "(3 not in [2, 3, 4])", "raw_code": "(3 not in [2, 3, 4])", "str_map": {}}
{"src": ["check", "if", "tuple", "(2", ",", "3", ")", "is", "not", "in", "a", "list", "[(2", ",", "3)", ",", "(5", ",", "6)", ",", "(9", ",", "1)", "]"], "token": ["(", "(", "2", ",", "3", ")", "not", "in", "[", "(", "2", ",", "3", ")", ",", "(", "5", ",", "6", ")", ",", "(", "9", ",", "1", ")", "]", ")"], "type": ["OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "KEYWORD", "KEYWORD", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "((2, 3) not in [(2, 3), (5, 6), (9, 1)])", "decano_code": "((2, 3) not in [(2, 3), (5, 6), (9, 1)])", "raw_code": "((2, 3) not in [(2, 3), (5, 6), (9, 1)])", "str_map": {}}
{"src": ["check", "if", "tuple", "(2", ",", "3", ")", "is", "not", "in", "a", "list", "[(2", ",", "7)", ",", "(7", ",", "3)", ",", "_STR:0_", "]"], "token": ["(", "(", "2", ",", "3", ")", "not", "in", "[", "(", "2", ",", "7", ")", ",", "(", "7", ",", "3", ")", ",", "\" _STR:0_ \"", "]", ")"], "type": ["OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "KEYWORD", "KEYWORD", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "STRING", "OP", "OP"], "cano_code": "((2, 3) not in [(2, 7), (7, 3), \" _STR:0_ \"])", "decano_code": "((2, 3) not in [(2, 7), (7, 3), \" _STR:0_ \"])", "raw_code": "((2, 3) not in [(2, 7), (7, 3), 'hi'])", "str_map": {"hi": "_STR:0_"}}
{"src": ["check", "if", "3", "is", "not", "in", "the", "list", "[4,5,6", "]"], "token": ["(", "3", "not", "in", "[", "4", ",", "5", ",", "6", "]", ")"], "type": ["OP", "NUMBER", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "(3 not in [4, 5, 6])", "decano_code": "(3 not in [4, 5, 6])", "raw_code": "(3 not in [4, 5, 6])", "str_map": {}}
{"src": ["create", "a", "list", "by", "appending", "components", "from", "list", "a", "and", "reversed", "list", "b", "interchangeably"], "token": ["[", "value", "for", "pair", "in", "zip", "(", "a", ",", "b", "[", ":", ":", "-", "1", "]", ")", "for", "value", "in", "pair", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[value for pair in zip(a, b[::-1]) for value in pair]", "decano_code": "[value for pair in zip(a, b[::-1]) for value in pair]", "raw_code": "[value for pair in zip(a, b[::-1]) for value in pair]", "str_map": {}}
{"src": ["delete", "the", "last", "column", "of", "numpy", "array", "a", "and", "assign", "resulting", "array", "to", "b"], "token": ["b", "=", "np", ".", "delete", "(", "a", ",", "-", "1", ",", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "b = np.delete(a, -1, 1)", "decano_code": "b = np.delete(a, -1, 1)", "raw_code": "b = np.delete(a, -1, 1)", "str_map": {}}
{"src": ["commit", "all", "the", "changes", "after", "executing", "a", "query", "."], "token": ["dbb", ".", "commit", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "dbb.commit()", "decano_code": "dbb.commit()", "raw_code": "dbb.commit()", "str_map": {}}
{"src": ["join", "two", "dataframes", "based", "on", "values", "in", "selected", "columns"], "token": ["pd", ".", "merge", "(", "a", ",", "b", ",", "on", "=", "[", "'A'", ",", "'B'", "]", ",", "how", "=", "'outer'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "pd.merge(a, b, on=['A', 'B'], how='outer')", "decano_code": "pd.merge(a, b, on=['A', 'B'], how='outer')", "raw_code": "pd.merge(a, b, on=['A', 'B'], how='outer')", "str_map": {}}
{"src": ["set", "text", "color", "as", "red", "and", "background", "color", "as", "#A3C1DA", "in", "qpushbutton"], "token": ["setStyleSheet", "(", "'QPushButton {background-color: #A3C1DA; color: red;}'", ")"], "type": ["NAME", "OP", "STRING", "OP"], "cano_code": "setStyleSheet('QPushButton {background-color: #A3C1DA; color: red;}')", "decano_code": "setStyleSheet('QPushButton {background-color: #A3C1DA; color: red;}')", "raw_code": "setStyleSheet('QPushButton {background-color: #A3C1DA; color: red;}')", "str_map": {}}
{"src": ["find", "the", "mean", "of", "elements", "in", "list", "l"], "token": ["sum", "(", "l", ")", "/", "float", "(", "len", "(", "l", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "sum(l) / float(len(l))", "decano_code": "sum(l) / float(len(l))", "raw_code": "sum(l) / float(len(l))", "str_map": {}}
{"src": ["find", "all", "the", "items", "from", "a", "dictionary", "d", "if", "the", "key", "contains", "the", "string", "light"], "token": ["[", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "D", ".", "items", "(", ")", "if", "'Light'", "in", "k", "]"], "type": ["OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "STRING", "KEYWORD", "NAME", "OP"], "cano_code": "[(k, v) for k, v in D.items() if 'Light' in k]", "decano_code": "[(k, v) for k, v in D.items() if 'Light' in k]", "raw_code": "[(k, v) for k, v in D.items() if 'Light' in k]", "str_map": {}}
{"src": ["get", "a", "md5", "hash", "from", "string", "thecakeisalie"], "token": ["k", "=", "hashlib", ".", "md5", "(", "'thecakeisalie'", ")", ".", "hexdigest", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "k = hashlib.md5('thecakeisalie').hexdigest()", "decano_code": "k = hashlib.md5('thecakeisalie').hexdigest()", "raw_code": "k = hashlib.md5('thecakeisalie').hexdigest()", "str_map": {}}
{"src": ["how", "to", "get", "only", "the", "last", "part", "of", "a", "path", "in", "python", "?"], "token": ["os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "normpath", "(", "'/folderA/folderB/folderC/folderD/'", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))", "decano_code": "os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))", "raw_code": "os.path.basename(os.path.normpath('/folderA/folderB/folderC/folderD/'))", "str_map": {}}
{"src": ["sort", "datetime", "objects", "birthdays", "by", "month", "and", "day"], "token": ["birthdays", ".", "sort", "(", "key", "=", "lambda", "d", ":", "(", "d", ".", "month", ",", "d", ".", "day", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "birthdays.sort(key=lambda d: (d.month, d.day))", "decano_code": "birthdays.sort(key=lambda d: (d.month, d.day))", "raw_code": "birthdays.sort(key=lambda d: (d.month, d.day))", "str_map": {}}
{"src": ["extract", "table", "data", "from", "table", "rows", "using", "beautifulsoup"], "token": ["[", "[", "td", ".", "findNext", "(", "text", "=", "True", ")", "for", "td", "in", "tr", ".", "findAll", "(", "'td'", ")", "]", "for", "tr", "in", "rows", "]"], "type": ["OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[[td.findNext(text=True) for td in tr.findAll('td')] for tr in rows]", "decano_code": "[[td.findNext(text=True) for td in tr.findAll('td')] for tr in rows]", "raw_code": "[[td.findNext(text=True) for td in tr.findAll('td')] for tr in rows]", "str_map": {}}
{"src": ["strip", "the", "string", ".txt", "from", "anywhere", "in", "the", "string", "Boat.txt.txt", "[", "Boat", ".", "txt", ".", "txt", "]"], "token": ["\"\"\"Boat.txt.txt\"\"\"", ".", "replace", "(", "'.txt'", ",", "''", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "\"\"\"Boat.txt.txt\"\"\".replace('.txt', '')", "decano_code": "\"\"\"Boat.txt.txt\"\"\".replace('.txt', '')", "raw_code": "\"\"\"Boat.txt.txt\"\"\".replace('.txt', '')", "str_map": {}}
{"src": ["get", "a", "list", "of", "the", "row", "names", "from", "index", "of", "a", "pandas", "data", "frame"], "token": ["list", "(", "df", ".", "index", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "list(df.index)", "decano_code": "list(df.index)", "raw_code": "list(df.index)", "str_map": {}}
{"src": ["get", "the", "row", "names", "from", "index", "in", "a", "pandas", "data", "frame"], "token": ["df", ".", "index"], "type": ["NAME", "OP", "NAME"], "cano_code": "df.index", "decano_code": "df.index", "raw_code": "df.index", "str_map": {}}
{"src": ["create", "a", "list", "of", "all", "unique", "characters", "in", "string", "_STR:0_"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "list", "(", "OrderedDict", ".", "fromkeys", "(", "\" _STR:0_ \"", ")", ".", "keys", "(", ")", ")", ")"], "type": ["STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "\"\"\"\"\"\".join(list(OrderedDict.fromkeys(\" _STR:0_ \").keys()))", "decano_code": "\"\"\"\"\"\".join(list(OrderedDict.fromkeys(\" _STR:0_ \").keys()))", "raw_code": "\"\"\"\"\"\".join(list(OrderedDict.fromkeys('aaabcabccd').keys()))", "str_map": {"aaabcabccd": "_STR:0_"}}
{"src": ["get", "list", "of", "all", "unique", "characters", "in", "a", "string", "_STR:0_"], "token": ["list", "(", "set", "(", "\" _STR:0_ \"", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "STRING", "OP", "OP"], "cano_code": "list(set(\" _STR:0_ \"))", "decano_code": "list(set(\" _STR:0_ \"))", "raw_code": "list(set('aaabcabccd'))", "str_map": {"aaabcabccd": "_STR:0_"}}
{"src": ["list", "of", "all", "unique", "characters", "in", "a", "string", "?"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "set", "(", "'aaabcabccd'", ")", ")"], "type": ["STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "OP"], "cano_code": "\"\"\"\"\"\".join(set('aaabcabccd'))", "decano_code": "\"\"\"\"\"\".join(set('aaabcabccd'))", "raw_code": "\"\"\"\"\"\".join(set('aaabcabccd'))", "str_map": {}}
{"src": ["find", "rows", "with", "non", "zero", "values", "in", "a", "subset", "of", "columns", "where", "df.dtypes", "[", "df", ".", "dtypes", "]", "is", "not", "equal", "to", "object", "in", "pandas", "dataframe"], "token": ["df", ".", "loc", "[", "(", "df", ".", "loc", "[", ":", ",", "(", "df", ".", "dtypes", "!=", "object", ")", "]", "!=", "0", ")", ".", "any", "(", "1", ")", "]"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "OP", "OP", "NUMBER", "OP", "OP", "KEYWORD", "OP", "NUMBER", "OP", "OP"], "cano_code": "df.loc[(df.loc[:, (df.dtypes != object)] != 0).any(1)]", "decano_code": "df.loc[(df.loc[:, (df.dtypes != object)] != 0).any(1)]", "raw_code": "df.loc[(df.loc[:, (df.dtypes != object)] != 0).any(1)]", "str_map": {}}
{"src": ["upload", "file", "with", "python", "mechanize"], "token": ["br", ".", "form", ".", "add_file", "(", "open", "(", "filename", ")", ",", "'text/plain'", ",", "filename", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "br.form.add_file(open(filename), 'text/plain', filename)", "decano_code": "br.form.add_file(open(filename), 'text/plain', filename)", "raw_code": "br.form.add_file(open(filename), 'text/plain', filename)", "str_map": {}}
{"src": ["check", "if", "dictionary", "d", "contains", "all", "keys", "in", "list", "['somekey', 'someotherkey', 'somekeyggg'", "]"], "token": ["all", "(", "word", "in", "d", "for", "word", "in", "[", "'somekey'", ",", "'someotherkey'", ",", "'somekeyggg'", "]", ")"], "type": ["KEYWORD", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "all(word in d for word in ['somekey', 'someotherkey', 'somekeyggg'])", "decano_code": "all(word in d for word in ['somekey', 'someotherkey', 'somekeyggg'])", "raw_code": "all(word in d for word in ['somekey', 'someotherkey', 'somekeyggg'])", "str_map": {}}
{"src": ["hide", "output", "of", "subprocess", "['espeak', text", "]"], "token": ["subprocess", ".", "check_output", "(", "[", "'espeak'", ",", "text", "]", ",", "stderr", "=", "subprocess", ".", "STDOUT", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "subprocess.check_output(['espeak', text], stderr=subprocess.STDOUT)", "decano_code": "subprocess.check_output(['espeak', text], stderr=subprocess.STDOUT)", "raw_code": "subprocess.check_output(['espeak', text], stderr=subprocess.STDOUT)", "str_map": {}}
{"src": ["replace", "nans", "by", "preceding", "values", "in", "pandas", "dataframe", "df"], "token": ["df", ".", "fillna", "(", "method", "=", "'ffill'", ",", "inplace", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df.fillna(method='ffill', inplace=True)", "decano_code": "df.fillna(method='ffill', inplace=True)", "raw_code": "df.fillna(method='ffill', inplace=True)", "str_map": {}}
{"src": ["create", "4", "numbers", "in", "range", "between", "1", "and", "3"], "token": ["print", "(", "np", ".", "linspace", "(", "1", ",", "3", ",", "num", "=", "4", ",", "endpoint", "=", "False", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP", "NAME", "OP", "NUMBER", "OP", "NAME", "OP", "KEYWORD", "OP", "OP"], "cano_code": "print(np.linspace(1, 3, num=4, endpoint=False))", "decano_code": "print(np.linspace(1, 3, num=4, endpoint=False))", "raw_code": "print(np.linspace(1, 3, num=4, endpoint=False))", "str_map": {}}
{"src": ["create", "numpy", "array", "of", "5", "numbers", "starting", "from", "1", "with", "interval", "of", "3"], "token": ["print", "(", "np", ".", "linspace", "(", "1", ",", "3", ",", "num", "=", "5", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "print(np.linspace(1, 3, num=5))", "decano_code": "print(np.linspace(1, 3, num=5))", "raw_code": "print(np.linspace(1, 3, num=5))", "str_map": {}}
{"src": ["create", "a", "symlink", "directory", "D:\\\\testdirLink", "for", "directory", "D:\\\\testdir", "with", "unicode", "support", "using", "ctypes", "library"], "token": ["kdll", ".", "CreateSymbolicLinkW", "(", "'D:\\\\testdirLink'", ",", "'D:\\\\testdir'", ",", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NUMBER", "OP"], "cano_code": "kdll.CreateSymbolicLinkW('D:\\\\testdirLink', 'D:\\\\testdir', 1)", "decano_code": "kdll.CreateSymbolicLinkW('D:\\\\testdirLink', 'D:\\\\testdir', 1)", "raw_code": "kdll.CreateSymbolicLinkW('D:\\\\testdirLink', 'D:\\\\testdir', 1)", "str_map": {}}
{"src": ["get", "a", "list", "slice", "of", "array", "slices", "of", "the", "first", "two", "rows", "and", "columns", "from", "array", "arr"], "token": ["slice", "=", "[", "arr", "[", "i", "]", "[", "0", ":", "2", "]", "for", "i", "in", "range", "(", "0", ",", "2", ")", "]"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "slice = [arr[i][0:2] for i in range(0, 2)]", "decano_code": "slice = [arr[i][0:2] for i in range(0, 2)]", "raw_code": "slice = [arr[i][0:2] for i in range(0, 2)]", "str_map": {}}
{"src": ["upload", "uploaded", "file", "from", "path", "_STR:0_", "to", "google", "cloud", "storage", "_STR:1_", "bucket"], "token": ["upload_url", "=", "blobstore", ".", "create_upload_url", "(", "\" _STR:0_ \"", ",", "gs_bucket_name", "=", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "upload_url = blobstore.create_upload_url(\" _STR:0_ \", gs_bucket_name=\" _STR:1_ \")", "decano_code": "upload_url = blobstore.create_upload_url(\" _STR:0_ \", gs_bucket_name=\" _STR:1_ \")", "raw_code": "upload_url = blobstore.create_upload_url('/upload', gs_bucket_name='my_bucket')", "str_map": {"/upload": "_STR:0_", "my_bucket": "_STR:1_"}}
{"src": ["change", "directory", "to", "the", "directory", "of", "a", "python", "script"], "token": ["os", ".", "chdir", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "os.chdir(os.path.dirname(__file__))", "decano_code": "os.chdir(os.path.dirname(__file__))", "raw_code": "os.chdir(os.path.dirname(__file__))", "str_map": {}}
{"src": ["call", "a", "function", "with", "argument", "list", "args"], "token": ["func", "(", "*", "args", ")"], "type": ["NAME", "OP", "OP", "NAME", "OP"], "cano_code": "func(*args)", "decano_code": "func(*args)", "raw_code": "func(*args)", "str_map": {}}
{"src": ["split", "column", "_STR:0_", "in", "dataframe", "df", "into", "two", "columns", "by", "first", "whitespace", "_STR:1_"], "token": ["df", "[", "\" _STR:0_ \"", "]", ".", "str", ".", "split", "(", "\" _STR:1_ \"", ",", "1", ",", "expand", "=", "True", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "NUMBER", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df[\" _STR:0_ \"].str.split(\" _STR:1_ \", 1, expand=True)", "decano_code": "df[\" _STR:0_ \"].str.split(\" _STR:1_ \", 1, expand=True)", "raw_code": "df['AB'].str.split(' ', 1, expand=True)", "str_map": {"AB": "_STR:0_", " ": "_STR:1_"}}
{"src": ["pandas", "dataframe", ",", "how", "do", "i", "split", "a", "column", "_STR:0_", "into", "two", "_STR:1_", "and", "_STR:2_", "on", "delimiter", "_STR:3_"], "token": ["df", "[", "\" _STR:1_ \"", "]", ",", "df", "[", "\" _STR:2_ \"", "]", "=", "df", "[", "\" _STR:0_ \"", "]", ".", "str", ".", "split", "(", "\" _STR:3_ \"", ",", "1", ")", ".", "str"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "KEYWORD"], "cano_code": "df[\" _STR:1_ \"], df[\" _STR:2_ \"] = df[\" _STR:0_ \"].str.split(\" _STR:3_ \", 1).str", "decano_code": "df[\" _STR:1_ \"], df[\" _STR:2_ \"] = df[\" _STR:0_ \"].str.split(\" _STR:3_ \", 1).str", "raw_code": "df['A'], df['B'] = df['AB'].str.split(' ', 1).str", "str_map": {"AB": "_STR:0_", "A": "_STR:1_", "B": "_STR:2_", " ": "_STR:3_"}}
{"src": ["sort", "list", "xs", "based", "on", "the", "length", "of", "its", "elements"], "token": ["print", "(", "sorted", "(", "xs", ",", "key", "=", "len", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "OP"], "cano_code": "print(sorted(xs, key=len))", "decano_code": "print(sorted(xs, key=len))", "raw_code": "print(sorted(xs, key=len))", "str_map": {}}
{"src": ["sort", "list", "xs", "in", "ascending", "order", "of", "length", "of", "elements"], "token": ["xs", ".", "sort", "(", "lambda", "x", ",", "y", ":", "cmp", "(", "len", "(", "x", ")", ",", "len", "(", "y", ")", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "xs.sort(lambda x, y: cmp(len(x), len(y)))", "decano_code": "xs.sort(lambda x, y: cmp(len(x), len(y)))", "raw_code": "xs.sort(lambda x, y: cmp(len(x), len(y)))", "str_map": {}}
{"src": ["sort", "list", "of", "strings", "xs", "by", "the", "length", "of", "string"], "token": ["xs", ".", "sort", "(", "key", "=", "lambda", "s", ":", "len", "(", "s", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "xs.sort(key=lambda s: len(s))", "decano_code": "xs.sort(key=lambda s: len(s))", "raw_code": "xs.sort(key=lambda s: len(s))", "str_map": {}}
{"src": ["plot", "point", "marker", "_STR:0_", "on", "series", "ts"], "token": ["ts", ".", "plot", "(", "marker", "=", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "ts.plot(marker=\" _STR:0_ \")", "decano_code": "ts.plot(marker=\" _STR:0_ \")", "raw_code": "ts.plot(marker='.')", "str_map": {".": "_STR:0_"}}
{"src": ["get", "all", "combination", "of", "n", "binary", "values"], "token": ["lst", "=", "list", "(", "itertools", ".", "product", "(", "[", "0", ",", "1", "]", ",", "repeat", "=", "n", ")", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "lst = list(itertools.product([0, 1], repeat=n))", "decano_code": "lst = list(itertools.product([0, 1], repeat=n))", "raw_code": "lst = list(itertools.product([0, 1], repeat=n))", "str_map": {}}
{"src": ["get", "all", "combination", "of", "n", "binary", "values"], "token": ["lst", "=", "map", "(", "list", ",", "itertools", ".", "product", "(", "[", "0", ",", "1", "]", ",", "repeat", "=", "n", ")", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "lst = map(list, itertools.product([0, 1], repeat=n))", "decano_code": "lst = map(list, itertools.product([0, 1], repeat=n))", "raw_code": "lst = map(list, itertools.product([0, 1], repeat=n))", "str_map": {}}
{"src": ["get", "all", "combination", "of", "3", "binary", "values"], "token": ["bin", "=", "[", "0", ",", "1", "]", "\n", "[", "(", "x", ",", "y", ",", "z", ")", "for", "x", "in", "bin", "for", "y", "in", "bin", "for", "z", "in", "bin", "]"], "type": ["KEYWORD", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NEWLINE", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP"], "cano_code": "bin = [0, 1]\n[(x, y, z) for x in bin for y in bin for z in bin]", "decano_code": "bin = [0, 1]\n[(x, y, z) for x in bin for y in bin for z in bin]", "raw_code": "bin = [0, 1]\n[(x, y, z) for x in bin for y in bin for z in bin]", "str_map": {}}
{"src": ["get", "all", "combination", "of", "3", "binary", "values"], "token": ["lst", "=", "list", "(", "itertools", ".", "product", "(", "[", "0", ",", "1", "]", ",", "repeat", "=", "3", ")", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "lst = list(itertools.product([0, 1], repeat=3))", "decano_code": "lst = list(itertools.product([0, 1], repeat=3))", "raw_code": "lst = list(itertools.product([0, 1], repeat=3))", "str_map": {}}
{"src": ["append", "string", "_STR:0_", "at", "the", "beginning", "of", "each", "value", "in", "column", "_STR:1_", "of", "dataframe", "df"], "token": ["df", "[", "\" _STR:1_ \"", "]", "=", "\" _STR:0_ \"", "+", "df", "[", "\" _STR:1_ \"", "]", ".", "astype", "(", "str", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df[\" _STR:1_ \"] = \" _STR:0_ \" + df[\" _STR:1_ \"].astype(str)", "decano_code": "df[\" _STR:1_ \"] = \" _STR:0_ \" + df[\" _STR:1_ \"].astype(str)", "raw_code": "df['col'] = 'str' + df['col'].astype(str)", "str_map": {"str": "_STR:0_", "col": "_STR:1_"}}
{"src": ["get", "a", "dict", "of", "variable", "names", "['some', 'list', 'of', 'vars'", "]", "as", "a", "string", "and", "their", "values"], "token": ["dict", "(", "(", "name", ",", "eval", "(", "name", ")", ")", "for", "name", "in", "[", "'some'", ",", "'list'", ",", "'of'", ",", "'vars'", "]", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "dict((name, eval(name)) for name in ['some', 'list', 'of', 'vars'])", "decano_code": "dict((name, eval(name)) for name in ['some', 'list', 'of', 'vars'])", "raw_code": "dict((name, eval(name)) for name in ['some', 'list', 'of', 'vars'])", "str_map": {}}
{"src": ["add", "a", "colorbar", "to", "plot", "plt", "using", "image", "im", "on", "axes", "ax"], "token": ["plt", ".", "colorbar", "(", "im", ",", "ax", "=", "ax", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "plt.colorbar(im, ax=ax)", "decano_code": "plt.colorbar(im, ax=ax)", "raw_code": "plt.colorbar(im, ax=ax)", "str_map": {}}
{"src": ["convert", "nested", "list", "_STR:0_", "into", "a", "flat", "list"], "token": ["[", "a", "for", "c", "in", "Cards", "for", "b", "in", "c", "for", "a", "in", "b", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[a for c in Cards for b in c for a in b]", "decano_code": "[a for c in Cards for b in c for a in b]", "raw_code": "[a for c in Cards for b in c for a in b]", "str_map": {"Cards": "_STR:0_"}}
{"src": ["create", "a", "list", "containing", "keys", "of", "dictionary", "d", "and", "sort", "it", "alphabetically"], "token": ["sorted", "(", "d", ",", "key", "=", "d", ".", "get", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "sorted(d, key=d.get)", "decano_code": "sorted(d, key=d.get)", "raw_code": "sorted(d, key=d.get)", "str_map": {}}
{"src": ["print", "the", "number", "of", "occurences", "of", "not", "none", "in", "a", "list", "lst", "in", "python", "2"], "token": ["print", "(", "len", "(", "[", "x", "for", "x", "in", "lst", "if", "x", "is", "not", "None", "]", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "KEYWORD", "OP", "OP", "OP"], "cano_code": "print(len([x for x in lst if x is not None]))", "decano_code": "print(len([x for x in lst if x is not None]))", "raw_code": "print(len([x for x in lst if x is not None]))", "str_map": {}}
{"src": ["lookup", "dictionary", "key", "key1", "in", "django", "template", "json"], "token": ["{", "{", "json", ".", "key1", "}", "}"], "type": ["OP", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "{{json.key1}}", "decano_code": "{{json.key1}}", "raw_code": "{{json.key1}}", "str_map": {}}
{"src": ["remove", "duplicates", "from", "list", "myset"], "token": ["mynewlist", "=", "list", "(", "myset", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "NAME", "OP"], "cano_code": "mynewlist = list(myset)", "decano_code": "mynewlist = list(myset)", "raw_code": "mynewlist = list(myset)", "str_map": {}}
{"src": ["get", "unique", "values", "from", "the", "list", "['a', 'b', 'c', 'd'", "]"], "token": ["set", "(", "[", "'a'", ",", "'b'", ",", "'c'", ",", "'d'", "]", ")"], "type": ["KEYWORD", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "set(['a', 'b', 'c', 'd'])", "decano_code": "set(['a', 'b', 'c', 'd'])", "raw_code": "set(['a', 'b', 'c', 'd'])", "str_map": {}}
{"src": ["set", "size", "of", "figure", "to", "landscape", "A4", "i.e", "[", "i", ".", "e", "]", ".", "11.69, 8.27", "[", "11", ".", "69,", "8", ".", "27", "]", "inches"], "token": ["figure", "(", "figsize", "=", "(", "11.69", ",", "8.27", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "figure(figsize=(11.69, 8.27))", "decano_code": "figure(figsize=(11.69, 8.27))", "raw_code": "figure(figsize=(11.69, 8.27))", "str_map": {}}
{"src": ["get", "every", "thing", "after", "last", "/"], "token": ["url", ".", "rsplit", "(", "'/'", ",", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NUMBER", "OP"], "cano_code": "url.rsplit('/', 1)", "decano_code": "url.rsplit('/', 1)", "raw_code": "url.rsplit('/', 1)", "str_map": {}}
{"src": ["get", "everything", "after", "last", "slash", "in", "a", "url", "stored", "in", "variable", "_STR:0_"], "token": ["url", ".", "rsplit", "(", "'/'", ",", "1", ")", "[", "-", "1", "]"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "url.rsplit('/', 1)[-1]", "decano_code": "url.rsplit('/', 1)[-1]", "raw_code": "url.rsplit('/', 1)[-1]", "str_map": {"url": "_STR:0_"}}
{"src": ["open", "file", "_STR:0_", "in", "directory", "direct"], "token": ["x_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "direct", ",", "\" _STR:0_ \"", ")", ",", "'r'", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "STRING", "OP"], "cano_code": "x_file = open(os.path.join(direct, \" _STR:0_ \"), 'r')", "decano_code": "x_file = open(os.path.join(direct, \" _STR:0_ \"), 'r')", "raw_code": "x_file = open(os.path.join(direct, '5_1.txt'), 'r')", "str_map": {"5_1.txt": "_STR:0_"}}
{"src": ["create", "a", "list", "with", "the", "characters", "of", "a", "string", "5+6"], "token": ["list", "(", "'5+6'", ")"], "type": ["KEYWORD", "OP", "STRING", "OP"], "cano_code": "list('5+6')", "decano_code": "list('5+6')", "raw_code": "list('5+6')", "str_map": {}}
{"src": ["concatenate", "a", "list", "of", "numpy", "arrays", "input_list", "together", "into", "a", "flattened", "list", "of", "values"], "token": ["np", ".", "concatenate", "(", "input_list", ")", ".", "ravel", "(", ")", ".", "tolist", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "np.concatenate(input_list).ravel().tolist()", "decano_code": "np.concatenate(input_list).ravel().tolist()", "raw_code": "np.concatenate(input_list).ravel().tolist()", "str_map": {}}
{"src": ["convert", "dictionary", "dict", "into", "a", "flat", "list"], "token": ["print", "(", "[", "y", "for", "x", "in", "list", "(", "dict", ".", "items", "(", ")", ")", "for", "y", "in", "x", "]", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "print([y for x in list(dict.items()) for y in x])", "decano_code": "print([y for x in list(dict.items()) for y in x])", "raw_code": "print([y for x in list(dict.items()) for y in x])", "str_map": {}}
{"src": ["convert", "a", "dictionary", "dict", "into", "a", "list", "with", "key", "and", "values", "as", "list", "items", "."], "token": ["[", "y", "for", "x", "in", "list", "(", "dict", ".", "items", "(", ")", ")", "for", "y", "in", "x", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[y for x in list(dict.items()) for y in x]", "decano_code": "[y for x in list(dict.items()) for y in x]", "raw_code": "[y for x in list(dict.items()) for y in x]", "str_map": {}}
{"src": ["get", "a", "random", "record", "from", "model", "_STR:0_", "using", "django", "'", "s", "orm"], "token": ["MyModel", ".", "objects", ".", "order_by", "(", "'?'", ")", ".", "first", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "MyModel.objects.order_by('?').first()", "decano_code": "MyModel.objects.order_by('?').first()", "raw_code": "MyModel.objects.order_by('?').first()", "str_map": {"MyModel": "_STR:0_"}}
{"src": ["change", "current", "working", "directory", "to", "directory", "_STR:0_"], "token": ["os", ".", "chdir", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "os.chdir(\" _STR:0_ \")", "decano_code": "os.chdir(\" _STR:0_ \")", "raw_code": "os.chdir('chapter3')", "str_map": {"chapter3": "_STR:0_"}}
{"src": ["change", "current", "working", "directory"], "token": ["os", ".", "chdir", "(", "'C:\\\\Users\\\\username\\\\Desktop\\\\headfirstpython\\\\chapter3'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "os.chdir('C:\\\\Users\\\\username\\\\Desktop\\\\headfirstpython\\\\chapter3')", "decano_code": "os.chdir('C:\\\\Users\\\\username\\\\Desktop\\\\headfirstpython\\\\chapter3')", "raw_code": "os.chdir('C:\\\\Users\\\\username\\\\Desktop\\\\headfirstpython\\\\chapter3')", "str_map": {}}
{"src": ["change", "current", "working", "directory"], "token": ["os", ".", "chdir", "(", "'.\\\\chapter3'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "os.chdir('.\\\\chapter3')", "decano_code": "os.chdir('.\\\\chapter3')", "raw_code": "os.chdir('.\\\\chapter3')", "str_map": {}}
{"src": ["create", "a", "flat", "dictionary", "by", "summing", "values", "associated", "with", "similar", "keys", "in", "each", "dictionary", "of", "list", "dictlist"], "token": ["dict", "(", "(", "key", ",", "sum", "(", "d", "[", "key", "]", "for", "d", "in", "dictList", ")", ")", "for", "key", "in", "dictList", "[", "0", "]", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "dict((key, sum(d[key] for d in dictList)) for key in dictList[0])", "decano_code": "dict((key, sum(d[key] for d in dictList)) for key in dictList[0])", "raw_code": "dict((key, sum(d[key] for d in dictList)) for key in dictList[0])", "str_map": {}}
{"src": ["sort", "pandas", "data", "frame", "df", "using", "values", "from", "columns", "c1", "and", "c2", "in", "ascending", "order"], "token": ["df", ".", "sort", "(", "[", "'c1'", ",", "'c2'", "]", ",", "ascending", "=", "[", "True", ",", "True", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "OP"], "cano_code": "df.sort(['c1', 'c2'], ascending=[True, True])", "decano_code": "df.sort(['c1', 'c2'], ascending=[True, True])", "raw_code": "df.sort(['c1', 'c2'], ascending=[True, True])", "str_map": {}}
{"src": ["converting", "string", "lists", "s", "to", "float", "list"], "token": ["floats", "=", "[", "float", "(", "x", ")", "for", "x", "in", "s", ".", "split", "(", ")", "]"], "type": ["NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "floats = [float(x) for x in s.split()]", "decano_code": "floats = [float(x) for x in s.split()]", "raw_code": "floats = [float(x) for x in s.split()]", "str_map": {}}
{"src": ["converting", "string", "lists", "s", "to", "float", "list"], "token": ["floats", "=", "map", "(", "float", ",", "s", ".", "split", "(", ")", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "floats = map(float, s.split())", "decano_code": "floats = map(float, s.split())", "raw_code": "floats = map(float, s.split())", "str_map": {}}
{"src": ["set", "labels", "[1, 2, 3, 4, 5", "]", "on", "axis", "x", "in", "plot", "plt"], "token": ["plt", ".", "xticks", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "plt.xticks([1, 2, 3, 4, 5])", "decano_code": "plt.xticks([1, 2, 3, 4, 5])", "raw_code": "plt.xticks([1, 2, 3, 4, 5])", "str_map": {}}
{"src": ["read", "line", "by", "line", "from", "stdin"], "token": ["for", "line", "in", "fileinput", ".", "input", "(", ")", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "KEYWORD", "OP", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "for line in fileinput.input():\n    pass", "decano_code": "for line in fileinput.input():\n    pass", "raw_code": "for line in fileinput.input():\n    pass", "str_map": {}}
{"src": ["read", "line", "by", "line", "from", "stdin"], "token": ["for", "line", "in", "sys", ".", "stdin", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "for line in sys.stdin:\n    pass", "decano_code": "for line in sys.stdin:\n    pass", "raw_code": "for line in sys.stdin:\n    pass", "str_map": {}}
{"src": ["check", "if", "string", "one", "exists", "in", "the", "values", "of", "dictionary", "d"], "token": ["'one'", "in", "list", "(", "d", ".", "values", "(", ")", ")"], "type": ["STRING", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "'one' in list(d.values())", "decano_code": "'one' in list(d.values())", "raw_code": "'one' in list(d.values())", "str_map": {}}
{"src": ["check", "if", "value", "_STR:0_", "is", "among", "the", "values", "of", "dictionary", "d"], "token": ["\" _STR:0_ \"", "in", "iter", "(", "d", ".", "values", "(", ")", ")"], "type": ["STRING", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "\" _STR:0_ \" in iter(d.values())", "decano_code": "\" _STR:0_ \" in iter(d.values())", "raw_code": "'one' in iter(d.values())", "str_map": {"one": "_STR:0_"}}
{"src": ["call", "parent", "class", "instructor", "of", "child", "class", "constructor"], "token": ["super", "(", "Instructor", ",", "self", ")", ".", "__init__", "(", "name", ",", "year", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "super(Instructor, self).__init__(name, year)", "decano_code": "super(Instructor, self).__init__(name, year)", "raw_code": "super(Instructor, self).__init__(name, year)", "str_map": {}}
{"src": ["create", "a", "dictionary", "using", "two", "lists`x", "`", "and", "y"], "token": ["dict", "(", "zip", "(", "x", ",", "y", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "dict(zip(x, y))", "decano_code": "dict(zip(x, y))", "raw_code": "dict(zip(x, y))", "str_map": {}}
{"src": ["sort", "a", "list", "of", "dictionaries", "a", "by", "dictionary", "values", "in", "descending", "order"], "token": ["sorted", "(", "a", ",", "key", "=", "lambda", "i", ":", "list", "(", "i", ".", "values", "(", ")", ")", "[", "0", "]", ",", "reverse", "=", "True", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "sorted(a, key=lambda i: list(i.values())[0], reverse=True)", "decano_code": "sorted(a, key=lambda i: list(i.values())[0], reverse=True)", "raw_code": "sorted(a, key=lambda i: list(i.values())[0], reverse=True)", "str_map": {}}
{"src": ["sorting", "a", "list", "of", "dictionary", "a", "by", "values", "in", "descending", "order"], "token": ["sorted", "(", "a", ",", "key", "=", "dict", ".", "values", ",", "reverse", "=", "True", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "sorted(a, key=dict.values, reverse=True)", "decano_code": "sorted(a, key=dict.values, reverse=True)", "raw_code": "sorted(a, key=dict.values, reverse=True)", "str_map": {}}
{"src": ["use", "multiple", "groupby", "and", "agg", "operations", "sum", ",", "count", ",", "std", "for", "pandas", "data", "frame", "df"], "token": ["df", ".", "groupby", "(", "level", "=", "0", ")", ".", "agg", "(", "[", "'sum'", ",", "'count'", ",", "'std'", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "df.groupby(level=0).agg(['sum', 'count', 'std'])", "decano_code": "df.groupby(level=0).agg(['sum', 'count', 'std'])", "raw_code": "df.groupby(level=0).agg(['sum', 'count', 'std'])", "str_map": {}}
{"src": ["for", "a", "dictionary", "a", ",", "set", "default", "value", "for", "key", "somekey", "as", "list", "and", "append", "value", "bob", "in", "that", "key"], "token": ["a", ".", "setdefault", "(", "'somekey'", ",", "[", "]", ")", ".", "append", "(", "'bob'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "a.setdefault('somekey', []).append('bob')", "decano_code": "a.setdefault('somekey', []).append('bob')", "raw_code": "a.setdefault('somekey', []).append('bob')", "str_map": {}}
{"src": ["sum", "values", "in", "list", "of", "dictionaries", "example_list", "with", "key", "_STR:0_"], "token": ["sum", "(", "item", "[", "\" _STR:0_ \"", "]", "for", "item", "in", "example_list", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "sum(item[\" _STR:0_ \"] for item in example_list)", "decano_code": "sum(item[\" _STR:0_ \"] for item in example_list)", "raw_code": "sum(item['gold'] for item in example_list)", "str_map": {"gold": "_STR:0_"}}
{"src": ["get", "a", "sum", "of", "all", "values", "from", "key", "gold", "in", "a", "list", "of", "dictionary", "example_list"], "token": ["sum", "(", "[", "item", "[", "'gold'", "]", "for", "item", "in", "example_list", "]", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "sum([item['gold'] for item in example_list])", "decano_code": "sum([item['gold'] for item in example_list])", "raw_code": "sum([item['gold'] for item in example_list])", "str_map": {}}
{"src": ["get", "all", "the", "values", "in", "key", "gold", "summed", "from", "a", "list", "of", "dictionary", "myLIst"], "token": ["sum", "(", "item", "[", "'gold'", "]", "for", "item", "in", "myLIst", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "sum(item['gold'] for item in myLIst)", "decano_code": "sum(item['gold'] for item in myLIst)", "raw_code": "sum(item['gold'] for item in myLIst)", "str_map": {}}
{"src": ["writing", "string", "_STR:0_", "to", "file", "f"], "token": ["f", ".", "write", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "f.write(\" _STR:0_ \")", "decano_code": "f.write(\" _STR:0_ \")", "raw_code": "f.write('text to write\\n')", "str_map": {"text to write\n": "_STR:0_"}}
{"src": ["write", "a", "string", "My String", "to", "a", "file", "file", "including", "new", "line", "character"], "token": ["file", ".", "write", "(", "'My String\\n'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "file.write('My String\\n')", "decano_code": "file.write('My String\\n')", "raw_code": "file.write('My String\\n')", "str_map": {}}
{"src": ["find", "consecutive", "segments", "from", "a", "column", "_STR:0_", "in", "a", "pandas", "data", "frame", "_STR:1_"], "token": ["df", ".", "reset_index", "(", ")", ".", "groupby", "(", "\" _STR:0_ \"", ")", "[", "'index'", "]", ".", "apply", "(", "np", ".", "array", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "df.reset_index().groupby(\" _STR:0_ \")['index'].apply(np.array)", "decano_code": "df.reset_index().groupby(\" _STR:0_ \")['index'].apply(np.array)", "raw_code": "df.reset_index().groupby('A')['index'].apply(np.array)", "str_map": {"A": "_STR:0_", "df": "_STR:1_"}}
{"src": ["get", "a", "relative", "path", "of", "file", "_STR:0_", "into", "variable", "fn"], "token": ["fn", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP"], "cano_code": "fn = os.path.join(os.path.dirname(__file__), \" _STR:0_ \")", "decano_code": "fn = os.path.join(os.path.dirname(__file__), \" _STR:0_ \")", "raw_code": "fn = os.path.join(os.path.dirname(__file__), 'my_file')", "str_map": {"my_file": "_STR:0_"}}
{"src": ["retrieve", "an", "element", "from", "a", "set", "s", "without", "removing", "it"], "token": ["e", "=", "next", "(", "iter", "(", "s", ")", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "e = next(iter(s))", "decano_code": "e = next(iter(s))", "raw_code": "e = next(iter(s))", "str_map": {}}
{"src": ["execute", "a", "command", "in", "the", "command", "prompt", "to", "list", "directory", "contents", "of", "the", "c", "drive", "`c:\\\\", "'"], "token": ["os", ".", "system", "(", "'dir c:\\\\'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "os.system('dir c:\\\\')", "decano_code": "os.system('dir c:\\\\')", "raw_code": "os.system('dir c:\\\\')", "str_map": {}}
{"src": ["make", "a", "auto", "scrolled", "window", "to", "the", "end", "of", "the", "list", "in", "gtk"], "token": ["self", ".", "treeview", ".", "connect", "(", "'size-allocate'", ",", "self", ".", "treeview_changed", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "self.treeview.connect('size-allocate', self.treeview_changed)", "decano_code": "self.treeview.connect('size-allocate', self.treeview_changed)", "raw_code": "self.treeview.connect('size-allocate', self.treeview_changed)", "str_map": {}}
{"src": ["check", "if", "3", "is", "inside", "list", "[1, 2, 3", "]"], "token": ["3", "in", "[", "1", ",", "2", ",", "3", "]"], "type": ["NUMBER", "KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "3 in [1, 2, 3]", "decano_code": "3 in [1, 2, 3]", "raw_code": "3 in [1, 2, 3]", "str_map": {}}
{"src": ["represent", "DateTime", "object", "_STR:0_", "with", "format", "_STR:1_", "into", "format", "_STR:2_"], "token": ["datetime", ".", "datetime", ".", "strptime", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")", ".", "strftime", "(", "\" _STR:2_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "datetime.datetime.strptime(\" _STR:0_ \", \" _STR:1_ \").strftime(\" _STR:2_ \")", "decano_code": "datetime.datetime.strptime(\" _STR:0_ \", \" _STR:1_ \").strftime(\" _STR:2_ \")", "raw_code": "datetime.datetime.strptime('10/05/2012', '%d/%m/%Y').strftime('%Y-%m-%d')", "str_map": {"10/05/2012": "_STR:0_", "%d/%m/%Y": "_STR:1_", "%Y-%m-%d": "_STR:2_"}}
{"src": ["convert", "a", "string", "literal", "s", "with", "values", "\\", "\\", "to", "raw", "string", "literal"], "token": ["s", "=", "s", ".", "replace", "(", "'\\\\'", ",", "'\\\\\\\\'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "s = s.replace('\\\\', '\\\\\\\\')", "decano_code": "s = s.replace('\\\\', '\\\\\\\\')", "raw_code": "s = s.replace('\\\\', '\\\\\\\\')", "str_map": {}}
{"src": ["get", "output", "of", "script", "proc"], "token": ["print", "(", "proc", ".", "communicate", "(", ")", "[", "0", "]", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "print(proc.communicate()[0])", "decano_code": "print(proc.communicate()[0])", "raw_code": "print(proc.communicate()[0])", "str_map": {}}
{"src": ["create", "a", "pandas", "data", "frame", "from", "list", "of", "nested", "dictionaries", "my_list"], "token": ["pd", ".", "concat", "(", "[", "pd", ".", "DataFrame", "(", "l", ")", "for", "l", "in", "my_list", "]", ",", "axis", "=", "1", ")", ".", "T"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME"], "cano_code": "pd.concat([pd.DataFrame(l) for l in my_list], axis=1).T", "decano_code": "pd.concat([pd.DataFrame(l) for l in my_list], axis=1).T", "raw_code": "pd.concat([pd.DataFrame(l) for l in my_list], axis=1).T", "str_map": {}}
{"src": ["delete", "all", "columns", "in", "DataFrame", "df", "that", "do", "not", "hold", "a", "non-zero", "value", "in", "its", "records"], "token": ["df", ".", "loc", "[", ":", ",", "(", "(", "df", "!=", "0", ")", ".", "any", "(", "axis", "=", "0", ")", ")", "]"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "df.loc[:, ((df != 0).any(axis=0))]", "decano_code": "df.loc[:, ((df != 0).any(axis=0))]", "raw_code": "df.loc[:, ((df != 0).any(axis=0))]", "str_map": {}}
{"src": ["sort", "a", "multidimensional", "array", "a", "by", "column", "with", "index", "1"], "token": ["sorted", "(", "a", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "sorted(a, key=lambda x: x[1])", "decano_code": "sorted(a, key=lambda x: x[1])", "raw_code": "sorted(a, key=lambda x: x[1])", "str_map": {}}
{"src": ["split", "string", "s", "to", "list", "conversion", "by", "_STR:0_"], "token": ["[", "x", ".", "strip", "(", ")", "for", "x", "in", "s", ".", "split", "(", "\" _STR:0_ \"", ")", "]"], "type": ["OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "[x.strip() for x in s.split(\" _STR:0_ \")]", "decano_code": "[x.strip() for x in s.split(\" _STR:0_ \")]", "raw_code": "[x.strip() for x in s.split(',')]", "str_map": {",": "_STR:0_"}}
{"src": ["get", "a", "list", "of", "items", "in", "the", "list", "container", "with", "attribute", "equal", "to", "value"], "token": ["items", "=", "[", "item", "for", "item", "in", "container", "if", "item", ".", "attribute", "==", "value", "]"], "type": ["NAME", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "items = [item for item in container if item.attribute == value]", "decano_code": "items = [item for item in container if item.attribute == value]", "raw_code": "items = [item for item in container if item.attribute == value]", "str_map": {}}
{"src": ["create", "a", "file", "_STR:0_", "with", "each", "tuple", "in", "the", "list", "mylist", "written", "to", "a", "line"], "token": ["open", "(", "\" _STR:0_ \"", ",", "'w'", ")", ".", "write", "(", "'\\n'", ".", "join", "(", "'%s %s'", "%", "x", "for", "x", "in", "mylist", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "open(\" _STR:0_ \", 'w').write('\\n'.join('%s %s' % x for x in mylist))", "decano_code": "open(\" _STR:0_ \", 'w').write('\\n'.join('%s %s' % x for x in mylist))", "raw_code": "open('filename', 'w').write('\\n'.join('%s %s' % x for x in mylist))", "str_map": {"filename": "_STR:0_"}}
{"src": ["get", "multiple", "matched", "strings", "using", "regex", "pattern", "(?:review: )?(http://url.com/(\\\\d+))\\\\s", "[", "(?:review:", ")?(http://url", ".", "com/(\\\\d+))\\\\s", "]", "?"], "token": ["pattern", "=", "re", ".", "compile", "(", "'(?:review: )?(http://url.com/(\\\\d+))\\\\s?'", ",", "re", ".", "IGNORECASE", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "pattern = re.compile('(?:review: )?(http://url.com/(\\\\d+))\\\\s?', re.IGNORECASE)", "decano_code": "pattern = re.compile('(?:review: )?(http://url.com/(\\\\d+))\\\\s?', re.IGNORECASE)", "raw_code": "pattern = re.compile('(?:review: )?(http://url.com/(\\\\d+))\\\\s?', re.IGNORECASE)", "str_map": {}}
{"src": ["read", "a", "text", "file", "_STR:0_", "into", "a", "string", "variable", "str"], "token": ["str", "=", "open", "(", "\" _STR:0_ \"", ",", "'r'", ")", ".", "read", "(", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "str = open(\" _STR:0_ \", 'r').read()", "decano_code": "str = open(\" _STR:0_ \", 'r').read()", "raw_code": "str = open('very_Important.txt', 'r').read()", "str_map": {"very_Important.txt": "_STR:0_"}}
{"src": ["return", "values", "for", "column", "c", "after", "group", "by", "on", "column", "a", "and", "b", "in", "dataframe", "df"], "token": ["df", ".", "groupby", "(", "[", "'A'", ",", "'B'", "]", ")", "[", "'C'", "]", ".", "unique", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "df.groupby(['A', 'B'])['C'].unique()", "decano_code": "df.groupby(['A', 'B'])['C'].unique()", "raw_code": "df.groupby(['A', 'B'])['C'].unique()", "str_map": {}}
{"src": ["read", "file", "fname", "line", "by", "line", "into", "a", "list", "content"], "token": ["with", "open", "(", "fname", ")", "as", "f", ":", "\n", "    ", "content", "=", "f", ".", "readlines", "(", ")", ""], "type": ["KEYWORD", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NEWLINE", "INDENT", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "DEDENT"], "cano_code": "with open(fname) as f:\n    content = f.readlines()", "decano_code": "with open(fname) as f:\n    content = f.readlines()", "raw_code": "with open(fname) as f:\n    content = f.readlines()", "str_map": {}}
{"src": ["read", "file", "_STR:0_", "line", "by", "line", "into", "a", "list", "lines"], "token": ["with", "open", "(", "\" _STR:0_ \"", ")", "as", "f", ":", "\n", "    ", "lines", "=", "f", ".", "readlines", "(", ")", ""], "type": ["KEYWORD", "KEYWORD", "OP", "STRING", "OP", "KEYWORD", "NAME", "OP", "NEWLINE", "INDENT", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "DEDENT"], "cano_code": "with open(\" _STR:0_ \") as f:\n    lines = f.readlines()", "decano_code": "with open(\" _STR:0_ \") as f:\n    lines = f.readlines()", "raw_code": "with open('filename') as f:\n    lines = f.readlines()", "str_map": {"filename": "_STR:0_"}}
{"src": ["read", "file", "_STR:0_", "line", "by", "line", "into", "a", "list", "lines"], "token": ["lines", "=", "[", "line", ".", "rstrip", "(", "'\\n'", ")", "for", "line", "in", "open", "(", "\" _STR:0_ \"", ")", "]"], "type": ["NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "STRING", "OP", "OP"], "cano_code": "lines = [line.rstrip('\\n') for line in open(\" _STR:0_ \")]", "decano_code": "lines = [line.rstrip('\\n') for line in open(\" _STR:0_ \")]", "raw_code": "lines = [line.rstrip('\\n') for line in open('filename')]", "str_map": {"filename": "_STR:0_"}}
{"src": ["read", "file", "_STR:0_", "line", "by", "line", "into", "a", "list", "array"], "token": ["with", "open", "(", "\" _STR:0_ \"", ",", "'r'", ")", "as", "ins", ":", "\n", "    ", "array", "=", "[", "]", "\n", "for", "line", "in", "ins", ":", "\n", "        ", "array", ".", "append", "(", "line", ")", "", ""], "type": ["KEYWORD", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "KEYWORD", "NAME", "OP", "NEWLINE", "INDENT", "NAME", "OP", "OP", "OP", "NEWLINE", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NEWLINE", "INDENT", "NAME", "OP", "NAME", "OP", "NAME", "OP", "DEDENT", "DEDENT"], "cano_code": "with open(\" _STR:0_ \", 'r') as ins:\n    array = []\n    for line in ins:\n        array.append(line)", "decano_code": "with open(\" _STR:0_ \", 'r') as ins:\n    array = []\n    for line in ins:\n        array.append(line)", "raw_code": "with open('file.txt', 'r') as ins:\n    array = []\n    for line in ins:\n        array.append(line)", "str_map": {"file.txt": "_STR:0_"}}
{"src": ["convert", "the", "dataframe", "column", "_STR:0_", "from", "string", "types", "to", "datetime", "types"], "token": ["df", "[", "\" _STR:0_ \"", "]", "=", "pd", ".", "to_datetime", "(", "df", "[", "\" _STR:0_ \"", "]", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "df[\" _STR:0_ \"] = pd.to_datetime(df[\" _STR:0_ \"])", "decano_code": "df[\" _STR:0_ \"] = pd.to_datetime(df[\" _STR:0_ \"])", "raw_code": "df['col'] = pd.to_datetime(df['col'])", "str_map": {"col": "_STR:0_"}}
{"src": ["get", "a", "list", "of", "the", "keys", "in", "each", "dictionary", "in", "a", "dictionary", "of", "dictionaries", "foo"], "token": ["[", "k", "for", "d", "in", "list", "(", "foo", ".", "values", "(", ")", ")", "for", "k", "in", "d", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[k for d in list(foo.values()) for k in d]", "decano_code": "[k for d in list(foo.values()) for k in d]", "raw_code": "[k for d in list(foo.values()) for k in d]", "str_map": {}}
{"src": ["get", "user", "input", "using", "message", "_STR:0_", "and", "insert", "it", "to", "the", "first", "placeholder", "in", "string", "_STR:1_"], "token": ["print", "(", "\" _STR:1_ \"", ".", "format", "(", "input", "(", "\" _STR:0_ \"", ")", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "print(\" _STR:1_ \".format(input(\" _STR:0_ \")))", "decano_code": "print(\" _STR:1_ \".format(input(\" _STR:0_ \")))", "raw_code": "print('Hello, {0}, how do you do?'.format(input('Enter name here: ')))", "str_map": {"Enter name here: ": "_STR:0_", "Hello, {0}, how do you do?": "_STR:1_"}}
{"src": ["create", "pandas", "data", "frame", "df", "from", "txt", "file", "filename.txt", "[", "filename", ".", "txt", "]", "with", "column", "Region Name", "and", "separator", ";"], "token": ["df", "=", "pd", ".", "read_csv", "(", "'filename.txt'", ",", "sep", "=", "';'", ",", "names", "=", "[", "'Region Name'", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP", "STRING", "OP", "OP"], "cano_code": "df = pd.read_csv('filename.txt', sep=';', names=['Region Name'])", "decano_code": "df = pd.read_csv('filename.txt', sep=';', names=['Region Name'])", "raw_code": "df = pd.read_csv('filename.txt', sep=';', names=['Region Name'])", "str_map": {}}
{"src": ["pandas", ":", "how", "can", "i", "use", "the", "apply(", ")", "function", "for", "a", "single", "column", "?"], "token": ["df", "[", "'a'", "]", "=", "df", "[", "'a'", "]", ".", "apply", "(", "lambda", "x", ":", "x", "+", "1", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "df['a'] = df['a'].apply(lambda x: x + 1)", "decano_code": "df['a'] = df['a'].apply(lambda x: x + 1)", "raw_code": "df['a'] = df['a'].apply(lambda x: x + 1)", "str_map": {}}
{"src": ["get", "the", "platform", "OS", "name"], "token": ["platform", ".", "system", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "platform.system()", "decano_code": "platform.system()", "raw_code": "platform.system()", "str_map": {}}
{"src": ["sort", "list", "a", "in", "ascending", "order", "based", "on", "its", "elements", "'", "float", "values"], "token": ["a", "=", "sorted", "(", "a", ",", "key", "=", "lambda", "x", ":", "float", "(", "x", ")", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "a = sorted(a, key=lambda x: float(x))", "decano_code": "a = sorted(a, key=lambda x: float(x))", "raw_code": "a = sorted(a, key=lambda x: float(x))", "str_map": {}}
{"src": ["finding", "words", "in", "string", "s", "after", "keyword", "_STR:0_"], "token": ["re", ".", "search", "(", "'name (.*)'", ",", "s", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.search('name (.*)', s)", "decano_code": "re.search('name (.*)', s)", "raw_code": "re.search('name (.*)', s)", "str_map": {"name": "_STR:0_"}}
{"src": ["find", "all", "records", "from", "collection", "collection", "without", "extracting", "mongo", "id", "_id"], "token": ["db", ".", "collection", ".", "find", "(", "{", "}", ",", "{", "'_id'", ":", "False", "}", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "OP", "STRING", "OP", "KEYWORD", "OP", "OP"], "cano_code": "db.collection.find({}, {'_id': False})", "decano_code": "db.collection.find({}, {'_id': False})", "raw_code": "db.collection.find({}, {'_id': False})", "str_map": {}}
{"src": ["get", "all", "the", "second", "values", "from", "a", "list", "of", "lists", "a"], "token": ["[", "row", "[", "1", "]", "for", "row", "in", "A", "]"], "type": ["OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[row[1] for row in A]", "decano_code": "[row[1] for row in A]", "raw_code": "[row[1] for row in A]", "str_map": {}}
{"src": ["extract", "first", "column", "from", "a", "multi-dimensional", "array", "a"], "token": ["[", "row", "[", "0", "]", "for", "row", "in", "a", "]"], "type": ["OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[row[0] for row in a]", "decano_code": "[row[0] for row in a]", "raw_code": "[row[0] for row in a]", "str_map": {}}
{"src": ["sort", "list", "['10', '3', '2'", "]", "in", "ascending", "order", "based", "on", "the", "integer", "value", "of", "its", "elements"], "token": ["sorted", "(", "[", "'10'", ",", "'3'", ",", "'2'", "]", ",", "key", "=", "int", ")"], "type": ["KEYWORD", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "sorted(['10', '3', '2'], key=int)", "decano_code": "sorted(['10', '3', '2'], key=int)", "raw_code": "sorted(['10', '3', '2'], key=int)", "str_map": {}}
{"src": ["check", "if", "file", "filename", "is", "descendant", "of", "directory", "_STR:0_"], "token": ["os", ".", "path", ".", "commonprefix", "(", "[", "\" _STR:0_ \"", ",", "os", ".", "path", ".", "realpath", "(", "filename", ")", "]", ")", "==", "\" _STR:0_ \""], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "STRING"], "cano_code": "os.path.commonprefix([\" _STR:0_ \", os.path.realpath(filename)]) == \" _STR:0_ \"", "decano_code": "os.path.commonprefix([\" _STR:0_ \", os.path.realpath(filename)]) == \" _STR:0_ \"", "raw_code": "os.path.commonprefix(['/the/dir/', os.path.realpath(filename)]) == '/the/dir/'", "str_map": {"/the/dir/": "_STR:0_"}}
{"src": ["check", "if", "any", "element", "of", "list", "substring_list", "are", "in", "string", "string"], "token": ["any", "(", "substring", "in", "string", "for", "substring", "in", "substring_list", ")"], "type": ["KEYWORD", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "any(substring in string for substring in substring_list)", "decano_code": "any(substring in string for substring in substring_list)", "raw_code": "any(substring in string for substring in substring_list)", "str_map": {}}
{"src": ["construct", "pandas", "dataframe", "from", "a", "list", "of", "tuples"], "token": ["df", "=", "pandas", ".", "DataFrame", "(", "data", ",", "columns", "=", "[", "'R_Number'", ",", "'C_Number'", ",", "'Avg'", ",", "'Std'", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "df = pandas.DataFrame(data, columns=['R_Number', 'C_Number', 'Avg', 'Std'])", "decano_code": "df = pandas.DataFrame(data, columns=['R_Number', 'C_Number', 'Avg', 'Std'])", "raw_code": "df = pandas.DataFrame(data, columns=['R_Number', 'C_Number', 'Avg', 'Std'])", "str_map": {}}
{"src": ["find", "and", "replace", "2nd", "occurrence", "of", "word", "_STR:0_", "by", "_STR:1_", "in", "a", "sentence", "_STR:2_"], "token": ["re", ".", "sub", "(", "'^((?:(?!cat).)*cat(?:(?!cat).)*)cat'", ",", "'\\\\1Bull'", ",", "s", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.sub('^((?:(?!cat).)*cat(?:(?!cat).)*)cat', '\\\\1Bull', s)", "decano_code": "re.sub('^((?:(?!cat).)*cat(?:(?!cat).)*)cat', '\\\\1Bull', s)", "raw_code": "re.sub('^((?:(?!cat).)*cat(?:(?!cat).)*)cat', '\\\\1Bull', s)", "str_map": {"cat": "_STR:0_", "Bull": "_STR:1_", "s": "_STR:2_"}}
{"src": ["find", "and", "replace", "2nd", "occurrence", "of", "word", "_STR:0_", "by", "_STR:1_", "in", "a", "sentence", "_STR:2_"], "token": ["re", ".", "sub", "(", "'^((.*?cat.*?){1})cat'", ",", "'\\\\1Bull'", ",", "s", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.sub('^((.*?cat.*?){1})cat', '\\\\1Bull', s)", "decano_code": "re.sub('^((.*?cat.*?){1})cat', '\\\\1Bull', s)", "raw_code": "re.sub('^((.*?cat.*?){1})cat', '\\\\1Bull', s)", "str_map": {"cat": "_STR:0_", "Bull": "_STR:1_", "s": "_STR:2_"}}
{"src": ["sort", "list", "of", "strings", "in", "list", "the_list", "by", "integer", "suffix"], "token": ["sorted", "(", "the_list", ",", "key", "=", "lambda", "k", ":", "int", "(", "k", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "sorted(the_list, key=lambda k: int(k.split('_')[1]))", "decano_code": "sorted(the_list, key=lambda k: int(k.split('_')[1]))", "raw_code": "sorted(the_list, key=lambda k: int(k.split('_')[1]))", "str_map": {}}
{"src": ["sort", "list", "of", "strings", "the_list", "by", "integer", "suffix", "before", "_STR:0_"], "token": ["sorted", "(", "the_list", ",", "key", "=", "lambda", "x", ":", "int", "(", "x", ".", "split", "(", "\" _STR:0_ \"", ")", "[", "1", "]", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "sorted(the_list, key=lambda x: int(x.split(\" _STR:0_ \")[1]))", "decano_code": "sorted(the_list, key=lambda x: int(x.split(\" _STR:0_ \")[1]))", "raw_code": "sorted(the_list, key=lambda x: int(x.split('_')[1]))", "str_map": {"_": "_STR:0_"}}
{"src": ["make", "a", "list", "of", "lists", "in", "which", "each", "list", "g", "are", "the", "elements", "from", "list", "test", "which", "have", "the", "same", "characters", "up", "to", "the", "first", "_", "character"], "token": ["[", "list", "(", "g", ")", "for", "_", ",", "g", "in", "itertools", ".", "groupby", "(", "test", ",", "lambda", "x", ":", "x", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "[list(g) for _, g in itertools.groupby(test, lambda x: x.split('_')[0])]", "decano_code": "[list(g) for _, g in itertools.groupby(test, lambda x: x.split('_')[0])]", "raw_code": "[list(g) for _, g in itertools.groupby(test, lambda x: x.split('_')[0])]", "str_map": {}}
{"src": ["how", "to", "group", "similar", "items", "in", "a", "list", "?"], "token": ["[", "list", "(", "g", ")", "for", "_", ",", "g", "in", "itertools", ".", "groupby", "(", "test", ",", "lambda", "x", ":", "x", ".", "partition", "(", "'_'", ")", "[", "0", "]", ")", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "[list(g) for _, g in itertools.groupby(test, lambda x: x.partition('_')[0])]", "decano_code": "[list(g) for _, g in itertools.groupby(test, lambda x: x.partition('_')[0])]", "raw_code": "[list(g) for _, g in itertools.groupby(test, lambda x: x.partition('_')[0])]", "str_map": {}}
{"src": ["load", "the", "url", "http://www.google.com", "[", "http://www", ".", "google", ".", "com", "]", "in", "selenium", "webdriver", "driver"], "token": ["driver", ".", "get", "(", "'http://www.google.com'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "driver.get('http://www.google.com')", "decano_code": "driver.get('http://www.google.com')", "raw_code": "driver.get('http://www.google.com')", "str_map": {}}
{"src": ["using", "python", "'", "s", "datetime", "module", ",", "get", "the", "year", "that", "utc-11", "is", "currently", "in"], "token": ["(", "datetime", ".", "datetime", ".", "utcnow", "(", ")", "-", "datetime", ".", "timedelta", "(", "hours", "=", "11", ")", ")", ".", "year"], "type": ["OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "NAME"], "cano_code": "(datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year", "decano_code": "(datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year", "raw_code": "(datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year", "str_map": {}}
{"src": ["get", "the", "difference", "between", "two", "lists", "[1, 2, 2, 2, 3", "]", "and", "[1, 2", "]", "that", "may", "have", "duplicate", "values"], "token": ["Counter", "(", "[", "1", ",", "2", ",", "2", ",", "2", ",", "3", "]", ")", "-", "Counter", "(", "[", "1", ",", "2", "]", ")"], "type": ["NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "Counter([1, 2, 2, 2, 3]) - Counter([1, 2])", "decano_code": "Counter([1, 2, 2, 2, 3]) - Counter([1, 2])", "raw_code": "Counter([1, 2, 2, 2, 3]) - Counter([1, 2])", "str_map": {}}
{"src": ["remove", "tags", "from", "a", "string", "mystring"], "token": ["re", ".", "sub", "(", "'<[^>]*>'", ",", "''", ",", "mystring", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.sub('<[^>]*>', '', mystring)", "decano_code": "re.sub('<[^>]*>', '', mystring)", "raw_code": "re.sub('<[^>]*>', '', mystring)", "str_map": {}}
{"src": ["encode", "string", "data", "as", "hex"], "token": ["data", ".", "encode", "(", "'hex'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "data.encode('hex')", "decano_code": "data.encode('hex')", "raw_code": "data.encode('hex')", "str_map": {}}
{"src": ["filter", "users", "by", "field", "userprofile", "with", "level", "greater", "than", "or", "equal", "to", "0"], "token": ["User", ".", "objects", ".", "filter", "(", "userprofile__level__gte", "=", "0", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "User.objects.filter(userprofile__level__gte=0)", "decano_code": "User.objects.filter(userprofile__level__gte=0)", "raw_code": "User.objects.filter(userprofile__level__gte=0)", "str_map": {}}
{"src": ["BeautifulSoup", "find", "a", "tag", "whose", "id", "ends", "with", "string", "_STR:0_"], "token": ["soup", ".", "findAll", "(", "id", "=", "re", ".", "compile", "(", "'para$'", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "OP"], "cano_code": "soup.findAll(id=re.compile('para$'))", "decano_code": "soup.findAll(id=re.compile('para$'))", "raw_code": "soup.findAll(id=re.compile('para$'))", "str_map": {"para": "_STR:0_"}}
{"src": ["select", "div", "tags", "whose", "id", "s", "begin", "with", "value_xxx_c_1_f_8_a", "_"], "token": ["soup", ".", "select", "(", "'div[id^=\"value_xxx_c_1_f_8_a_\"]'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "soup.select('div[id^=\"value_xxx_c_1_f_8_a_\"]')", "decano_code": "soup.select('div[id^=\"value_xxx_c_1_f_8_a_\"]')", "raw_code": "soup.select('div[id^=\"value_xxx_c_1_f_8_a_\"]')", "str_map": {}}
{"src": ["delete", "an", "item", "thing", "in", "a", "list", "some_list", "if", "it", "exists"], "token": ["cleaned_list", "=", "[", "x", "for", "x", "in", "some_list", "if", "x", "is", "not", "thing", "]"], "type": ["NAME", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "NAME", "OP"], "cano_code": "cleaned_list = [x for x in some_list if x is not thing]", "decano_code": "cleaned_list = [x for x in some_list if x is not thing]", "raw_code": "cleaned_list = [x for x in some_list if x is not thing]", "str_map": {}}
{"src": ["print", "_STR:0_", "to", "console", ",", "and", "read", "user", "input", "to", "var"], "token": ["var", "=", "input", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "STRING", "OP"], "cano_code": "var = input(\" _STR:0_ \")", "decano_code": "var = input(\" _STR:0_ \")", "raw_code": "var = input('Please enter something: ')", "str_map": {"Please enter something: ": "_STR:0_"}}
{"src": ["append", "4", "to", "list", "foo"], "token": ["foo", ".", "append", "(", "4", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "foo.append(4)", "decano_code": "foo.append(4)", "raw_code": "foo.append(4)", "str_map": {}}
{"src": ["append", "a", "list", "[8", ",", "7", "]", "to", "list", "foo"], "token": ["foo", ".", "append", "(", "[", "8", ",", "7", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "foo.append([8, 7])", "decano_code": "foo.append([8, 7])", "raw_code": "foo.append([8, 7])", "str_map": {}}
{"src": ["insert", "77", "to", "index", "2", "of", "list", "x"], "token": ["x", ".", "insert", "(", "2", ",", "77", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "x.insert(2, 77)", "decano_code": "x.insert(2, 77)", "raw_code": "x.insert(2, 77)", "str_map": {}}
{"src": ["remove", "white", "space", "padding", "around", "a", "saved", "image", "test.png", "[", "test", ".", "png", "]", "in", "matplotlib"], "token": ["plt", ".", "savefig", "(", "'test.png'", ",", "bbox_inches", "=", "'tight'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "plt.savefig('test.png', bbox_inches='tight')", "decano_code": "plt.savefig('test.png', bbox_inches='tight')", "raw_code": "plt.savefig('test.png', bbox_inches='tight')", "str_map": {}}
{"src": ["concatenate", "lists", "listone", "and", "listtwo"], "token": ["(", "listone", "+", "listtwo", ")"], "type": ["OP", "NAME", "OP", "NAME", "OP"], "cano_code": "(listone + listtwo)", "decano_code": "(listone + listtwo)", "raw_code": "(listone + listtwo)", "str_map": {}}
{"src": ["iterate", "items", "in", "lists", "listone", "and", "listtwo"], "token": ["for", "item", "in", "itertools", ".", "chain", "(", "listone", ",", "listtwo", ")", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "for item in itertools.chain(listone, listtwo):\n    pass", "decano_code": "for item in itertools.chain(listone, listtwo):\n    pass", "raw_code": "for item in itertools.chain(listone, listtwo):\n    pass", "str_map": {}}
{"src": ["create", "dataframe", "males", "containing", "data", "of", "dataframe", "df", "where", "column", "gender", "is", "equal", "to", "_STR:0_", "and", "column", "year", "is", "equal", "to", "2014"], "token": ["males", "=", "df", "[", "(", "df", "[", "Gender", "]", "==", "\" _STR:0_ \"", ")", "&", "(", "df", "[", "Year", "]", "==", "2014", ")", "]"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "males = df[(df[Gender] == \" _STR:0_ \") & (df[Year] == 2014)]", "decano_code": "males = df[(df[Gender] == \" _STR:0_ \") & (df[Year] == 2014)]", "raw_code": "males = df[(df[Gender] == 'Male') & (df[Year] == 2014)]", "str_map": {"Male": "_STR:0_"}}
{"src": ["print", "backslash"], "token": ["print", "(", "'\\\\'", ")"], "type": ["KEYWORD", "OP", "STRING", "OP"], "cano_code": "print('\\\\')", "decano_code": "print('\\\\')", "raw_code": "print('\\\\')", "str_map": {}}
{"src": ["replace", "_STR:0_", "in", "pandas", "dataframe", "df", "with", "np.nan", "[", "np", ".", "nan", "]"], "token": ["df", ".", "replace", "(", "\" _STR:0_ \"", ",", "np", ".", "nan", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "df.replace(\" _STR:0_ \", np.nan)", "decano_code": "df.replace(\" _STR:0_ \", np.nan)", "raw_code": "df.replace('-', np.nan)", "str_map": {"-": "_STR:0_"}}
{"src": ["delete", "column", "_STR:0_", "from", "dataframe", "df"], "token": ["df", "=", "df", ".", "drop", "(", "\" _STR:0_ \"", ",", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NUMBER", "OP"], "cano_code": "df = df.drop(\" _STR:0_ \", 1)", "decano_code": "df = df.drop(\" _STR:0_ \", 1)", "raw_code": "df = df.drop('column_name', 1)", "str_map": {"column_name": "_STR:0_"}}
{"src": ["delete", "1st", ",", "2nd", "and", "4th", "columns", "from", "dataframe", "df"], "token": ["df", ".", "drop", "(", "df", ".", "columns", "[", "[", "0", ",", "1", ",", "3", "]", "]", ",", "axis", "=", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "df.drop(df.columns[[0, 1, 3]], axis=1)", "decano_code": "df.drop(df.columns[[0, 1, 3]], axis=1)", "raw_code": "df.drop(df.columns[[0, 1, 3]], axis=1)", "str_map": {}}
{"src": ["delete", "a", "column", "column_name", "without", "having", "to", "reassign", "from", "pandas", "data", "frame", "df"], "token": ["df", ".", "drop", "(", "'column_name'", ",", "axis", "=", "1", ",", "inplace", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NUMBER", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df.drop('column_name', axis=1, inplace=True)", "decano_code": "df.drop('column_name', axis=1, inplace=True)", "raw_code": "df.drop('column_name', axis=1, inplace=True)", "str_map": {}}
{"src": ["disable", "abbreviation", "in", "argparse"], "token": ["parser", "=", "argparse", ".", "ArgumentParser", "(", "allow_abbrev", "=", "False", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "parser = argparse.ArgumentParser(allow_abbrev=False)", "decano_code": "parser = argparse.ArgumentParser(allow_abbrev=False)", "raw_code": "parser = argparse.ArgumentParser(allow_abbrev=False)", "str_map": {}}
{"src": ["extract", "dictionary", "values", "by", "key", "_STR:0_", "from", "data", "frame", "df"], "token": ["feature3", "=", "[", "d", ".", "get", "(", "\" _STR:0_ \"", ")", "for", "d", "in", "df", ".", "dic", "]"], "type": ["NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP"], "cano_code": "feature3 = [d.get(\" _STR:0_ \") for d in df.dic]", "decano_code": "feature3 = [d.get(\" _STR:0_ \") for d in df.dic]", "raw_code": "feature3 = [d.get('Feature3') for d in df.dic]", "str_map": {"Feature3": "_STR:0_"}}
{"src": ["get", "data", "of", "column", "_STR:0_", "and", "column", "_STR:1_", "in", "dataframe", "df", "where", "column", "_STR:0_", "is", "equal", "to", "_STR:2_"], "token": ["df", ".", "loc", "[", "gb", ".", "groups", "[", "\" _STR:2_ \"", "]", ",", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "df.loc[gb.groups[\" _STR:2_ \"], (\" _STR:0_ \", \" _STR:1_ \")]", "decano_code": "df.loc[gb.groups[\" _STR:2_ \"], (\" _STR:0_ \", \" _STR:1_ \")]", "raw_code": "df.loc[gb.groups['foo'], ('A', 'B')]", "str_map": {"A": "_STR:0_", "B": "_STR:1_", "foo": "_STR:2_"}}
{"src": ["print", "_STR:0_"], "token": ["print", "(", "'[%s, %s, %s]'", "%", "(", "1", ",", "2", ",", "3", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "print('[%s, %s, %s]' % (1, 2, 3))", "decano_code": "print('[%s, %s, %s]' % (1, 2, 3))", "raw_code": "print('[%s, %s, %s]' % (1, 2, 3))", "str_map": {"[1, 2, 3]": "_STR:0_"}}
{"src": ["display", "1 2 3", "as", "a", "list", "of", "string"], "token": ["print", "(", "'[{0}, {1}, {2}]'", ".", "format", "(", "1", ",", "2", ",", "3", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "print('[{0}, {1}, {2}]'.format(1, 2, 3))", "decano_code": "print('[{0}, {1}, {2}]'.format(1, 2, 3))", "raw_code": "print('[{0}, {1}, {2}]'.format(1, 2, 3))", "str_map": {}}
{"src": ["get", "values", "from", "a", "dictionary", "my_dict", "whose", "key", "contains", "the", "string", "date"], "token": ["[", "v", "for", "k", ",", "v", "in", "list", "(", "my_dict", ".", "items", "(", ")", ")", "if", "'Date'", "in", "k", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "STRING", "KEYWORD", "NAME", "OP"], "cano_code": "[v for k, v in list(my_dict.items()) if 'Date' in k]", "decano_code": "[v for k, v in list(my_dict.items()) if 'Date' in k]", "raw_code": "[v for k, v in list(my_dict.items()) if 'Date' in k]", "str_map": {}}
{"src": ["python", "date", "string", "formatting"], "token": ["\"\"\"{0.month}/{0.day}/{0.year}\"\"\"", ".", "format", "(", "my_date", ")"], "type": ["STRING", "OP", "KEYWORD", "OP", "NAME", "OP"], "cano_code": "\"\"\"{0.month}/{0.day}/{0.year}\"\"\".format(my_date)", "decano_code": "\"\"\"{0.month}/{0.day}/{0.year}\"\"\".format(my_date)", "raw_code": "\"\"\"{0.month}/{0.day}/{0.year}\"\"\".format(my_date)", "str_map": {}}
{"src": ["drop", "a", "single", "subcolumn", "_STR:0_", "in", "column", "_STR:1_", "from", "a", "dataframe", "df"], "token": ["df", ".", "drop", "(", "(", "\" _STR:1_ \"", ",", "\" _STR:0_ \"", ")", ",", "axis", "=", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "df.drop((\" _STR:1_ \", \" _STR:0_ \"), axis=1)", "decano_code": "df.drop((\" _STR:1_ \", \" _STR:0_ \"), axis=1)", "raw_code": "df.drop(('col1', 'a'), axis=1)", "str_map": {"a": "_STR:0_", "col1": "_STR:1_"}}
{"src": ["dropping", "all", "columns", "named", "_STR:0_", "from", "a", "multiindex", "_STR:1_", ",", "across", "all", "level", "."], "token": ["df", ".", "drop", "(", "\" _STR:0_ \"", ",", "level", "=", "1", ",", "axis", "=", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NUMBER", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "df.drop(\" _STR:0_ \", level=1, axis=1)", "decano_code": "df.drop(\" _STR:0_ \", level=1, axis=1)", "raw_code": "df.drop('a', level=1, axis=1)", "str_map": {"a": "_STR:0_", "df": "_STR:1_"}}
{"src": ["build", "dictionary", "with", "keys", "of", "dictionary", "_container", "as", "keys", "and", "values", "of", "returned", "value", "of", "function", "_value", "with", "correlating", "key", "as", "parameter"], "token": ["{", "_key", ":", "_value", "(", "_key", ")", "for", "_key", "in", "_container", "}"], "type": ["OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "{_key: _value(_key) for _key in _container}", "decano_code": "{_key: _value(_key) for _key in _container}", "raw_code": "{_key: _value(_key) for _key in _container}", "str_map": {}}
{"src": ["click", "on", "the", "text", "button", "_STR:0_", "using", "selenium", "python"], "token": ["browser", ".", "find_element_by_class_name", "(", "\" _STR:0_ \"", ")", ".", "click", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "browser.find_element_by_class_name(\" _STR:0_ \").click()", "decano_code": "browser.find_element_by_class_name(\" _STR:0_ \").click()", "raw_code": "browser.find_element_by_class_name('section-select-all').click()", "str_map": {"section-select-all": "_STR:0_"}}
{"src": ["combine", "two", "dictionaries", "d ", "and", "d1", ",", "concatenate", "string", "values", "with", "identical", "keys"], "token": ["dict", "(", "(", "k", ",", "d", ".", "get", "(", "k", ",", "''", ")", "+", "d1", ".", "get", "(", "k", ",", "''", ")", ")", "for", "k", "in", "keys", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "dict((k, d.get(k, '') + d1.get(k, '')) for k in keys)", "decano_code": "dict((k, d.get(k, '') + d1.get(k, '')) for k in keys)", "raw_code": "dict((k, d.get(k, '') + d1.get(k, '')) for k in keys)", "str_map": {}}
{"src": ["generate", "unique", "equal", "hash", "for", "equal", "dictionaries", "a", "and", "b"], "token": ["hash", "(", "pformat", "(", "a", ")", ")", "==", "hash", "(", "pformat", "(", "b", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "hash(pformat(a)) == hash(pformat(b))", "decano_code": "hash(pformat(a)) == hash(pformat(b))", "raw_code": "hash(pformat(a)) == hash(pformat(b))", "str_map": {}}
{"src": ["convert", "nested", "list", "of", "lists", "[['tom', 'cat'], ['jerry', 'mouse'], ['spark', 'dog']", "]", "into", "a", "list", "of", "tuples"], "token": ["list", "(", "map", "(", "tuple", ",", "[", "[", "'tom'", ",", "'cat'", "]", ",", "[", "'jerry'", ",", "'mouse'", "]", ",", "[", "'spark'", ",", "'dog'", "]", "]", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "OP"], "cano_code": "list(map(tuple, [['tom', 'cat'], ['jerry', 'mouse'], ['spark', 'dog']]))", "decano_code": "list(map(tuple, [['tom', 'cat'], ['jerry', 'mouse'], ['spark', 'dog']]))", "raw_code": "list(map(tuple, [['tom', 'cat'], ['jerry', 'mouse'], ['spark', 'dog']]))", "str_map": {}}
{"src": ["sum", "the", "column", "positions", "along", "the", "other", "columns", "stock", ",", "same1", ",", "same2", "in", "a", "pandas", "data", "frame", "df"], "token": ["df", ".", "groupby", "(", "[", "'stock'", ",", "'same1'", ",", "'same2'", "]", ",", "as_index", "=", "False", ")", "[", "'positions'", "]", ".", "sum", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "OP", "OP", "STRING", "OP", "OP", "KEYWORD", "OP", "OP"], "cano_code": "df.groupby(['stock', 'same1', 'same2'], as_index=False)['positions'].sum()", "decano_code": "df.groupby(['stock', 'same1', 'same2'], as_index=False)['positions'].sum()", "raw_code": "df.groupby(['stock', 'same1', 'same2'], as_index=False)['positions'].sum()", "str_map": {}}
{"src": ["summing", "across", "rows", "of", "pandas", "dataframe"], "token": ["df", ".", "groupby", "(", "[", "'stock'", ",", "'same1'", ",", "'same2'", "]", ")", "[", "'positions'", "]", ".", "sum", "(", ")", ".", "reset_index", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "STRING", "OP", "OP", "KEYWORD", "OP", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "df.groupby(['stock', 'same1', 'same2'])['positions'].sum().reset_index()", "decano_code": "df.groupby(['stock', 'same1', 'same2'])['positions'].sum().reset_index()", "raw_code": "df.groupby(['stock', 'same1', 'same2'])['positions'].sum().reset_index()", "str_map": {}}
{"src": ["change", "string", "s", "to", "upper", "case"], "token": ["s", ".", "upper", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "s.upper()", "decano_code": "s.upper()", "raw_code": "s.upper()", "str_map": {}}
{"src": ["split", "a", "string", "s", "by", "_STR:0_", "and", "convert", "to", "a", "dictionary"], "token": ["dict", "(", "item", ".", "split", "(", "'='", ")", "for", "item", "in", "s", ".", "split", "(", "\" _STR:0_ \"", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "dict(item.split('=') for item in s.split(\" _STR:0_ \"))", "decano_code": "dict(item.split('=') for item in s.split(\" _STR:0_ \"))", "raw_code": "dict(item.split('=') for item in s.split(';'))", "str_map": {";": "_STR:0_"}}
{"src": ["add", "header", "('Cookie', 'cookiename=cookie value'", ")", "to", "mechanize", "browser", "br"], "token": ["br", ".", "addheaders", "=", "[", "(", "'Cookie'", ",", "'cookiename=cookie value'", ")", "]"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "br.addheaders = [('Cookie', 'cookiename=cookie value')]", "decano_code": "br.addheaders = [('Cookie', 'cookiename=cookie value')]", "raw_code": "br.addheaders = [('Cookie', 'cookiename=cookie value')]", "str_map": {}}
{"src": ["set", "data", "in", "column", "_STR:0_", "of", "dataframe", "df", "equal", "to", "first", "element", "of", "each", "list"], "token": ["df", "[", "\" _STR:0_ \"", "]", "=", "df", "[", "\" _STR:0_ \"", "]", ".", "str", "[", "0", "]"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "KEYWORD", "OP", "NUMBER", "OP"], "cano_code": "df[\" _STR:0_ \"] = df[\" _STR:0_ \"].str[0]", "decano_code": "df[\" _STR:0_ \"] = df[\" _STR:0_ \"].str[0]", "raw_code": "df['value'] = df['value'].str[0]", "str_map": {"value": "_STR:0_"}}
{"src": ["get", "element", "at", "index", "0", "of", "each", "list", "in", "column", "_STR:0_", "of", "dataframe", "df"], "token": ["df", "[", "\" _STR:0_ \"", "]", "=", "df", "[", "\" _STR:0_ \"", "]", ".", "str", ".", "get", "(", "0", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "df[\" _STR:0_ \"] = df[\" _STR:0_ \"].str.get(0)", "decano_code": "df[\" _STR:0_ \"] = df[\" _STR:0_ \"].str.get(0)", "raw_code": "df['value'] = df['value'].str.get(0)", "str_map": {"value": "_STR:0_"}}
{"src": ["remove", "square", "bracket", "_STR:0_", "from", "pandas", "dataframe", "df", "column", "_STR:1_"], "token": ["df", "[", "\" _STR:1_ \"", "]", "=", "df", "[", "\" _STR:1_ \"", "]", ".", "str", ".", "strip", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df[\" _STR:1_ \"] = df[\" _STR:1_ \"].str.strip(\" _STR:0_ \")", "decano_code": "df[\" _STR:1_ \"] = df[\" _STR:1_ \"].str.strip(\" _STR:0_ \")", "raw_code": "df['value'] = df['value'].str.strip('[]')", "str_map": {"[]": "_STR:0_", "value": "_STR:1_"}}
{"src": ["get", "a", "string", "with", "string", "formatting", "from", "dictionary", "d"], "token": ["\"\"\", \"\"\"", ".", "join", "(", "[", "'{}_{}'", ".", "format", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", "]", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP", "STRING", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "\"\"\", \"\"\".join(['{}_{}'.format(k, v) for k, v in d.items()])", "decano_code": "\"\"\", \"\"\".join(['{}_{}'.format(k, v) for k, v in d.items()])", "raw_code": "\"\"\", \"\"\".join(['{}_{}'.format(k, v) for k, v in d.items()])", "str_map": {}}
{"src": ["sum", "of", "sums", "of", "each", "list", ",", "in", "a", "list", "of", "lists", "named", "_STR:0_", "."], "token": ["sum", "(", "sum", "(", "x", ")", "for", "x", "in", "lists", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "sum(sum(x) for x in lists)", "decano_code": "sum(sum(x) for x in lists)", "raw_code": "sum(sum(x) for x in lists)", "str_map": {"lists": "_STR:0_"}}
{"src": ["check", "whether", "a", "numpy", "array", "a", "contains", "a", "given", "row", "[1, 2", "]"], "token": ["any", "(", "np", ".", "equal", "(", "a", ",", "[", "1", ",", "2", "]", ")", ".", "all", "(", "1", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "KEYWORD", "OP", "NUMBER", "OP", "OP"], "cano_code": "any(np.equal(a, [1, 2]).all(1))", "decano_code": "any(np.equal(a, [1, 2]).all(1))", "raw_code": "any(np.equal(a, [1, 2]).all(1))", "str_map": {}}
{"src": ["check", "if", "all", "elements", "in", "list", "mylist", "are", "the", "same"], "token": ["len", "(", "set", "(", "mylist", ")", ")", "==", "1"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP", "NUMBER"], "cano_code": "len(set(mylist)) == 1", "decano_code": "len(set(mylist)) == 1", "raw_code": "len(set(mylist)) == 1", "str_map": {}}
{"src": ["split", "a", "string", "s", "at", "line", "breaks", "\\r\\n"], "token": ["[", "map", "(", "int", ",", "x", ".", "split", "(", "'\\t'", ")", ")", "for", "x", "in", "s", ".", "rstrip", "(", ")", ".", "split", "(", "'\\r\\n'", ")", "]"], "type": ["OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "[map(int, x.split('\\t')) for x in s.rstrip().split('\\r\\n')]", "decano_code": "[map(int, x.split('\\t')) for x in s.rstrip().split('\\r\\n')]", "raw_code": "[map(int, x.split('\\t')) for x in s.rstrip().split('\\r\\n')]", "str_map": {}}
{"src": ["sort", "a", "dictionary", "a", "by", "values", "that", "are", "list", "type"], "token": ["t", "=", "sorted", "(", "list", "(", "a", ".", "items", "(", ")", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "t = sorted(list(a.items()), key=lambda x: x[1])", "decano_code": "t = sorted(list(a.items()), key=lambda x: x[1])", "raw_code": "t = sorted(list(a.items()), key=lambda x: x[1])", "str_map": {}}
{"src": ["search", "for", "string", "_STR:0_", "in", "txt", "file", "_STR:1_"], "token": ["if", "(", "\" _STR:0_ \"", "in", "open", "(", "\" _STR:1_ \"", ")", ".", "read", "(", ")", ")", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "OP", "STRING", "KEYWORD", "KEYWORD", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "if (\" _STR:0_ \" in open(\" _STR:1_ \").read()):\n    pass", "decano_code": "if (\" _STR:0_ \" in open(\" _STR:1_ \").read()):\n    pass", "raw_code": "if ('blabla' in open('example.txt').read()):\n    pass", "str_map": {"blabla": "_STR:0_", "example.txt": "_STR:1_"}}
{"src": ["search", "for", "string", "_STR:0_", "in", "txt", "file", "_STR:1_"], "token": ["f", "=", "open", "(", "\" _STR:1_ \"", ")", "\n", "s", "=", "mmap", ".", "mmap", "(", "f", ".", "fileno", "(", ")", ",", "0", ",", "access", "=", "mmap", ".", "ACCESS_READ", ")", "\n", "if", "(", "s", ".", "find", "(", "\" _STR:0_ \"", ")", "!=", "(", "-", "1", ")", ")", ":", "\n", "    ", "pass", ""], "type": ["NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "NEWLINE", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NEWLINE", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "f = open(\" _STR:1_ \")\ns = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\nif (s.find(\" _STR:0_ \") != (-1)):\n    pass", "decano_code": "f = open(\" _STR:1_ \")\ns = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\nif (s.find(\" _STR:0_ \") != (-1)):\n    pass", "raw_code": "f = open('example.txt')\ns = mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ)\nif (s.find('blabla') != (-1)):\n    pass", "str_map": {"blabla": "_STR:0_", "example.txt": "_STR:1_"}}
{"src": ["search", "for", "string", "blabla", "in", "txt", "file", "_STR:0_"], "token": ["datafile", "=", "file", "(", "\" _STR:0_ \"", ")", "\n", "found", "=", "False", "\n", "for", "line", "in", "datafile", ":", "\n", "    ", "if", "(", "blabla", "in", "line", ")", ":", "\n", "        ", "return", "True", "\n", "", "", "return", "False"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NEWLINE", "NAME", "OP", "KEYWORD", "NEWLINE", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NEWLINE", "INDENT", "KEYWORD", "OP", "NAME", "KEYWORD", "NAME", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "KEYWORD", "NEWLINE", "DEDENT", "DEDENT", "KEYWORD", "KEYWORD"], "cano_code": "datafile = file(\" _STR:0_ \")\nfound = False\nfor line in datafile:\n    if (blabla in line):\n        return True\nreturn False", "decano_code": "datafile = file(\" _STR:0_ \")\nfound = False\nfor line in datafile:\n    if (blabla in line):\n        return True\nreturn False", "raw_code": "datafile = file('example.txt')\nfound = False\nfor line in datafile:\n    if (blabla in line):\n        return True\nreturn False", "str_map": {"example.txt": "_STR:0_"}}
{"src": ["insert", "string", "string1", "after", "each", "character", "of", "string2"], "token": ["string2", ".", "replace", "(", "''", ",", "string1", ")", "[", "len", "(", "string1", ")", ":", "-", "len", "(", "string1", ")", "]"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "string2.replace('', string1)[len(string1):-len(string1)]", "decano_code": "string2.replace('', string1)[len(string1):-len(string1)]", "raw_code": "string2.replace('', string1)[len(string1):-len(string1)]", "str_map": {}}
{"src": ["getting", "every", "possible", "combination", "of", "two", "elements", "in", "a", "list"], "token": ["list", "(", "itertools", ".", "combinations", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", ",", "2", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "list(itertools.combinations([1, 2, 3, 4, 5, 6], 2))", "decano_code": "list(itertools.combinations([1, 2, 3, 4, 5, 6], 2))", "raw_code": "list(itertools.combinations([1, 2, 3, 4, 5, 6], 2))", "str_map": {}}
{"src": ["get", "a", "utf-8", "string", "literal", "representation", "of", "byte", "string", "x"], "token": ["\"\"\"x = {}\"\"\"", ".", "format", "(", "x", ".", "decode", "(", "'utf8'", ")", ")", ".", "encode", "(", "'utf8'", ")"], "type": ["STRING", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "\"\"\"x = {}\"\"\".format(x.decode('utf8')).encode('utf8')", "decano_code": "\"\"\"x = {}\"\"\".format(x.decode('utf8')).encode('utf8')", "raw_code": "\"\"\"x = {}\"\"\".format(x.decode('utf8')).encode('utf8')", "str_map": {}}
{"src": ["check", "if", "x", "is", "an", "integer"], "token": ["isinstance", "(", "x", ",", "int", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "isinstance(x, int)", "decano_code": "isinstance(x, int)", "raw_code": "isinstance(x, int)", "str_map": {}}
{"src": ["check", "if", "x", "is", "an", "integer"], "token": ["(", "type", "(", "x", ")", "==", "int", ")"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "OP", "KEYWORD", "OP"], "cano_code": "(type(x) == int)", "decano_code": "(type(x) == int)", "raw_code": "(type(x) == int)", "str_map": {}}
{"src": ["play", "the", "wav", "file", "_STR:0_"], "token": ["winsound", ".", "PlaySound", "(", "\" _STR:0_ \"", ",", "winsound", ".", "SND_FILENAME", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "winsound.PlaySound(\" _STR:0_ \", winsound.SND_FILENAME)", "decano_code": "winsound.PlaySound(\" _STR:0_ \", winsound.SND_FILENAME)", "raw_code": "winsound.PlaySound('sound.wav', winsound.SND_FILENAME)", "str_map": {"sound.wav": "_STR:0_"}}
{"src": ["create", "a", "list", "containing", "the", "n", "next", "values", "of", "generator", "it"], "token": ["[", "next", "(", "it", ")", "for", "_", "in", "range", "(", "n", ")", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "[next(it) for _ in range(n)]", "decano_code": "[next(it) for _ in range(n)]", "raw_code": "[next(it) for _ in range(n)]", "str_map": {}}
{"src": ["get", "list", "of", "n", "next", "values", "of", "a", "generator", "it"], "token": ["list", "(", "itertools", ".", "islice", "(", "it", ",", "0", ",", "n", ",", "1", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "list(itertools.islice(it, 0, n, 1))", "decano_code": "list(itertools.islice(it, 0, n, 1))", "raw_code": "list(itertools.islice(it, 0, n, 1))", "str_map": {}}
{"src": ["compare", "two", "lists", "in", "python", "a", "and", "b", "and", "return", "matches"], "token": ["set", "(", "a", ")", ".", "intersection", "(", "b", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "set(a).intersection(b)", "decano_code": "set(a).intersection(b)", "raw_code": "set(a).intersection(b)", "str_map": {}}
{"src": ["how", "can", "i", "compare", "two", "lists", "in", "python", "and", "return", "matches"], "token": ["[", "i", "for", "i", ",", "j", "in", "zip", "(", "a", ",", "b", ")", "if", "i", "==", "j", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP"], "cano_code": "[i for i, j in zip(a, b) if i == j]", "decano_code": "[i for i, j in zip(a, b) if i == j]", "raw_code": "[i for i, j in zip(a, b) if i == j]", "str_map": {}}
{"src": ["convert", "list", "data", "into", "a", "string", "of", "its", "elements"], "token": ["print", "(", "''", ".", "join", "(", "map", "(", "str", ",", "data", ")", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "print(''.join(map(str, data)))", "decano_code": "print(''.join(map(str, data)))", "raw_code": "print(''.join(map(str, data)))", "str_map": {}}
{"src": ["match", "regex", "pattern", "_STR:0_", "on", "string", "_STR:1_"], "token": ["re", ".", "match", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.match(\" _STR:0_ \", \" _STR:1_ \")", "decano_code": "re.match(\" _STR:0_ \", \" _STR:1_ \")", "raw_code": "re.match('\\\\$[0-9]+[^\\\\$]*$', '$1 off delicious $5 ham.')", "str_map": {"\\$[0-9]+[^\\$]*$": "_STR:0_", "$1 off delicious $5 ham.": "_STR:1_"}}
{"src": ["import", "a", "nested", "module", "c.py", "[", "c", ".", "py", "]", "within", "b", "within", "a", "with", "importlib"], "token": ["importlib", ".", "import_module", "(", "'.c'", ",", "'a.b'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "importlib.import_module('.c', 'a.b')", "decano_code": "importlib.import_module('.c', 'a.b')", "raw_code": "importlib.import_module('.c', 'a.b')", "str_map": {}}
{"src": ["import", "a", "module", "_STR:0_", "with", "importlib.import_module", "[", "importlib", ".", "import_module", "]", "in", "python", "2"], "token": ["importlib", ".", "import_module", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "importlib.import_module(\" _STR:0_ \")", "decano_code": "importlib.import_module(\" _STR:0_ \")", "raw_code": "importlib.import_module('a.b.c')", "str_map": {"a.b.c": "_STR:0_"}}
{"src": ["convert", "array", "a", "to", "numpy", "array"], "token": ["a", "=", "np", ".", "array", "(", "a", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "a = np.array(a)", "decano_code": "a = np.array(a)", "raw_code": "a = np.array(a)", "str_map": {}}
{"src": ["find", "all", "div", "tags", "whose", "classes", "has", "the", "value", "comment", "-", "in", "a", "beautiful", "soup", "object", "soup"], "token": ["soup", ".", "find_all", "(", "'div'", ",", "class_", "=", "re", ".", "compile", "(", "'comment-'", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "OP"], "cano_code": "soup.find_all('div', class_=re.compile('comment-'))", "decano_code": "soup.find_all('div', class_=re.compile('comment-'))", "raw_code": "soup.find_all('div', class_=re.compile('comment-'))", "str_map": {}}
{"src": ["a", "sequence", "of", "empty", "lists", "of", "length", "n"], "token": ["[", "[", "]", "for", "_", "in", "range", "(", "n", ")", "]"], "type": ["OP", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "[[] for _ in range(n)]", "decano_code": "[[] for _ in range(n)]", "raw_code": "[[] for _ in range(n)]", "str_map": {}}
{"src": ["create", "dictionary", "from", "list", "of", "variables", "_STR:0_", "and", "_STR:1_", "already", "defined"], "token": ["dict", "(", "(", "k", ",", "globals", "(", ")", "[", "k", "]", ")", "for", "k", "in", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "KEYWORD", "OP", "OP", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "dict((k, globals()[k]) for k in (\" _STR:0_ \", \" _STR:1_ \"))", "decano_code": "dict((k, globals()[k]) for k in (\" _STR:0_ \", \" _STR:1_ \"))", "raw_code": "dict((k, globals()[k]) for k in ('foo', 'bar'))", "str_map": {"foo": "_STR:0_", "bar": "_STR:1_"}}
{"src": ["get", "two", "random", "records", "from", "model", "_STR:0_", "in", "django"], "token": ["MyModel", ".", "objects", ".", "order_by", "(", "'?'", ")", "[", ":", "2", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "MyModel.objects.order_by('?')[:2]", "decano_code": "MyModel.objects.order_by('?')[:2]", "raw_code": "MyModel.objects.order_by('?')[:2]", "str_map": {"MyModel": "_STR:0_"}}
{"src": ["print", "a", "dictionary", "{'user': {'name': 'Markus'}", "}", "with", "string", "formatting"], "token": ["\"\"\"Hello {user[name]}\"\"\"", ".", "format", "(", "**", "{", "'user'", ":", "{", "'name'", ":", "'Markus'", "}", "}", ")"], "type": ["STRING", "OP", "KEYWORD", "OP", "OP", "OP", "STRING", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "\"\"\"Hello {user[name]}\"\"\".format(**{'user': {'name': 'Markus'}})", "decano_code": "\"\"\"Hello {user[name]}\"\"\".format(**{'user': {'name': 'Markus'}})", "raw_code": "\"\"\"Hello {user[name]}\"\"\".format(**{'user': {'name': 'Markus'}})", "str_map": {}}
{"src": ["create", "a", "dictionary", "list_dict", "containing", "each", "tuple", "in", "list", "tuple_list", "as", "values", "and", "the", "tuple", "'", "s", "first", "element", "as", "the", "corresponding", "key"], "token": ["list_dict", "=", "{", "t", "[", "0", "]", ":", "t", "for", "t", "in", "tuple_list", "}"], "type": ["NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "list_dict = {t[0]: t for t in tuple_list}", "decano_code": "list_dict = {t[0]: t for t in tuple_list}", "raw_code": "list_dict = {t[0]: t for t in tuple_list}", "str_map": {}}
{"src": ["generate", "a", "random", "integer", "between", "0", "and", "9"], "token": ["randint", "(", "0", ",", "9", ")"], "type": ["NAME", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "randint(0, 9)", "decano_code": "randint(0, 9)", "raw_code": "randint(0, 9)", "str_map": {}}
{"src": ["generate", "a", "random", "integer", "between", "a", "and", "b"], "token": ["random", ".", "randint", "(", "a", ",", "b", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "random.randint(a, b)", "decano_code": "random.randint(a, b)", "raw_code": "random.randint(a, b)", "str_map": {}}
{"src": ["generate", "random", "integers", "between", "0", "and", "9"], "token": ["print", "(", "(", "random", ".", "randint", "(", "0", ",", "9", ")", ")", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "print((random.randint(0, 9)))", "decano_code": "print((random.randint(0, 9)))", "raw_code": "print((random.randint(0, 9)))", "str_map": {}}
{"src": ["reverse", "a", "string", "a", "by", "2", "characters", "at", "a", "time"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "reversed", "(", "[", "a", "[", "i", ":", "i", "+", "2", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "a", ")", ",", "2", ")", "]", ")", ")"], "type": ["STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "OP", "OP", "OP"], "cano_code": "\"\"\"\"\"\".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))", "decano_code": "\"\"\"\"\"\".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))", "raw_code": "\"\"\"\"\"\".join(reversed([a[i:i + 2] for i in range(0, len(a), 2)]))", "str_map": {}}
{"src": ["transform", "time", "series", "df", "into", "a", "pivot", "table", "aggregated", "by", "column", "_STR:0_", "using", "column", "df.index.date", "[", "df", ".", "index", ".", "date", "]", "as", "index", "and", "values", "of", "column", "df.index.time", "[", "df", ".", "index", ".", "time", "]", "as", "columns"], "token": ["pd", ".", "pivot_table", "(", "df", ",", "index", "=", "df", ".", "index", ".", "date", ",", "columns", "=", "df", ".", "index", ".", "time", ",", "values", "=", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "pd.pivot_table(df, index=df.index.date, columns=df.index.time, values=\" _STR:0_ \")", "decano_code": "pd.pivot_table(df, index=df.index.date, columns=df.index.time, values=\" _STR:0_ \")", "raw_code": "pd.pivot_table(df, index=df.index.date, columns=df.index.time, values='Close')", "str_map": {"Close": "_STR:0_"}}
{"src": ["check", "if", "the", "third", "element", "of", "all", "the", "lists", "in", "a", "list", "_STR:0_", "is", "equal", "to", "zero", "."], "token": ["any", "(", "item", "[", "2", "]", "==", "0", "for", "item", "in", "items", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NUMBER", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "any(item[2] == 0 for item in items)", "decano_code": "any(item[2] == 0 for item in items)", "raw_code": "any(item[2] == 0 for item in items)", "str_map": {"items": "_STR:0_"}}
{"src": ["find", "all", "the", "lists", "from", "a", "lists", "of", "list", "_STR:0_", "if", "third", "element", "in", "all", "sub-lists", "is", "_STR:1_"], "token": ["[", "x", "for", "x", "in", "items", "if", "x", "[", "2", "]", "==", "0", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP"], "cano_code": "[x for x in items if x[2] == 0]", "decano_code": "[x for x in items if x[2] == 0]", "raw_code": "[x for x in items if x[2] == 0]", "str_map": {"items": "_STR:0_", "0": "_STR:1_"}}
{"src": ["sort", "dictionary", "of", "dictionaries", "dic", "according", "to", "the", "key", "_STR:0_"], "token": ["sorted", "(", "list", "(", "dic", ".", "items", "(", ")", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", "[", "\" _STR:0_ \"", "]", ",", "reverse", "=", "True", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "sorted(list(dic.items()), key=lambda x: x[1][\" _STR:0_ \"], reverse=True)", "decano_code": "sorted(list(dic.items()), key=lambda x: x[1][\" _STR:0_ \"], reverse=True)", "raw_code": "sorted(list(dic.items()), key=lambda x: x[1]['Fisher'], reverse=True)", "str_map": {"Fisher": "_STR:0_"}}
{"src": ["plot", "a", "data", "logarithmically", "in", "y", "axis"], "token": ["plt", ".", "yscale", "(", "'log'", ",", "nonposy", "=", "'clip'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "plt.yscale('log', nonposy='clip')", "decano_code": "plt.yscale('log', nonposy='clip')", "raw_code": "plt.yscale('log', nonposy='clip')", "str_map": {}}
{"src": ["extract", "digits", "in", "a", "simple", "way", "from", "a", "python", "string"], "token": ["map", "(", "int", ",", "re", ".", "findall", "(", "'\\\\d+'", ",", "s", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP"], "cano_code": "map(int, re.findall('\\\\d+', s))", "decano_code": "map(int, re.findall('\\\\d+', s))", "raw_code": "map(int, re.findall('\\\\d+', s))", "str_map": {}}
{"src": ["list", "the", "contents", "of", "a", "directory", "_STR:0_"], "token": ["os", ".", "listdir", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "os.listdir(\" _STR:0_ \")", "decano_code": "os.listdir(\" _STR:0_ \")", "raw_code": "os.listdir('/home/username/www/')", "str_map": {"/home/username/www/": "_STR:0_"}}
{"src": ["list", "all", "the", "contents", "of", "the", "directory", "_STR:0_", "."], "token": ["os", ".", "listdir", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "os.listdir(\" _STR:0_ \")", "decano_code": "os.listdir(\" _STR:0_ \")", "raw_code": "os.listdir('path')", "str_map": {"path": "_STR:0_"}}
{"src": ["merge", "a", "pandas", "data", "frame", "distancesDF", "and", "column", "dates", "in", "pandas", "data", "frame", "datesDF", "into", "single"], "token": ["pd", ".", "concat", "(", "[", "distancesDF", ",", "datesDF", ".", "dates", "]", ",", "axis", "=", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "pd.concat([distancesDF, datesDF.dates], axis=1)", "decano_code": "pd.concat([distancesDF, datesDF.dates], axis=1)", "raw_code": "pd.concat([distancesDF, datesDF.dates], axis=1)", "str_map": {}}
{"src": ["get", "value", "of", "first", "index", "of", "each", "element", "in", "list", "a"], "token": ["[", "x", "[", "0", "]", "for", "x", "in", "a", "]"], "type": ["OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[x[0] for x in a]", "decano_code": "[x[0] for x in a]", "raw_code": "[x[0] for x in a]", "str_map": {}}
{"src": ["python", "how", "to", "get", "every", "first", "element", "in", "2", "dimensional", "list", "a"], "token": ["[", "i", "[", "0", "]", "for", "i", "in", "a", "]"], "type": ["OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[i[0] for i in a]", "decano_code": "[i[0] for i in a]", "raw_code": "[i[0] for i in a]", "str_map": {}}
{"src": ["remove", "line", "breaks", "from", "string", "textblock", "using", "regex"], "token": ["re", ".", "sub", "(", "'(?<=[a-z])\\\\r?\\\\n'", ",", "' '", ",", "textblock", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.sub('(?<=[a-z])\\\\r?\\\\n', ' ', textblock)", "decano_code": "re.sub('(?<=[a-z])\\\\r?\\\\n', ' ', textblock)", "raw_code": "re.sub('(?<=[a-z])\\\\r?\\\\n', ' ', textblock)", "str_map": {}}
{"src": ["open", "gzip-compressed", "file", "encoded", "as", "utf-8", "_STR:0_", "in", "text", "mode"], "token": ["gzip", ".", "open", "(", "\" _STR:0_ \"", ",", "'rt'", ",", "encoding", "=", "'utf-8'", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "gzip.open(\" _STR:0_ \", 'rt', encoding='utf-8')", "decano_code": "gzip.open(\" _STR:0_ \", 'rt', encoding='utf-8')", "raw_code": "gzip.open('file.gz', 'rt', encoding='utf-8')", "str_map": {"file.gz": "_STR:0_"}}
{"src": ["test", "if", "either", "of", "strings", "a", "or", "b", "are", "members", "of", "the", "set", "of", "strings", ",", "['b', 'a', 'foo', 'bar'", "]"], "token": ["set", "(", "[", "'a'", ",", "'b'", "]", ")", ".", "issubset", "(", "[", "'b'", ",", "'a'", ",", "'foo'", ",", "'bar'", "]", ")"], "type": ["KEYWORD", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "set(['a', 'b']).issubset(['b', 'a', 'foo', 'bar'])", "decano_code": "set(['a', 'b']).issubset(['b', 'a', 'foo', 'bar'])", "raw_code": "set(['a', 'b']).issubset(['b', 'a', 'foo', 'bar'])", "str_map": {}}
{"src": ["check", "if", "all", "the", "values", "in", "a", "list", "['a', 'b'", "]", "are", "present", "in", "another", "list", "['b', 'a', 'foo', 'bar'", "]"], "token": ["all", "(", "x", "in", "[", "'b'", ",", "'a'", ",", "'foo'", ",", "'bar'", "]", "for", "x", "in", "[", "'a'", ",", "'b'", "]", ")"], "type": ["KEYWORD", "OP", "NAME", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "KEYWORD", "NAME", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "all(x in ['b', 'a', 'foo', 'bar'] for x in ['a', 'b'])", "decano_code": "all(x in ['b', 'a', 'foo', 'bar'] for x in ['a', 'b'])", "raw_code": "all(x in ['b', 'a', 'foo', 'bar'] for x in ['a', 'b'])", "str_map": {}}
{"src": ["remove", "characters", "_STR:0_", "from", "a", "string", "line"], "token": ["line", ".", "translate", "(", "None", ",", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP"], "cano_code": "line.translate(None, \" _STR:0_ \")", "decano_code": "line.translate(None, \" _STR:0_ \")", "raw_code": "line.translate(None, '!@#$')", "str_map": {"!@#$": "_STR:0_"}}
{"src": ["remove", "characters", "_STR:0_", "from", "a", "string", "line"], "token": ["line", "=", "re", ".", "sub", "(", "'[!@#$]'", ",", "''", ",", "line", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "line = re.sub('[!@#$]', '', line)", "decano_code": "line = re.sub('[!@#$]', '', line)", "raw_code": "line = re.sub('[!@#$]', '', line)", "str_map": {"!@#$": "_STR:0_"}}
{"src": ["remove", "string", "_STR:0_", "from", "string", "string"], "token": ["string", ".", "replace", "(", "\" _STR:0_ \"", ",", "''", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "string.replace(\" _STR:0_ \", '')", "decano_code": "string.replace(\" _STR:0_ \", '')", "raw_code": "string.replace('1', '')", "str_map": {"1": "_STR:0_"}}
{"src": ["remove", "character", "char", "from", "a", "string", "a"], "token": ["a", "=", "a", ".", "replace", "(", "char", ",", "''", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "a = a.replace(char, '')", "decano_code": "a = a.replace(char, '')", "raw_code": "a = a.replace(char, '')", "str_map": {}}
{"src": ["remove", "characters", "in", "b", "from", "a", "string", "a"], "token": ["a", "=", "a", ".", "replace", "(", "char", ",", "''", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "a = a.replace(char, '')", "decano_code": "a = a.replace(char, '')", "raw_code": "a = a.replace(char, '')", "str_map": {}}
{"src": ["remove", "characters", "in", "_STR:0_", "from", "a", "string", "line"], "token": ["line", "=", "line", ".", "translate", "(", "string", ".", "maketrans", "(", "''", ",", "''", ")", ",", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP", "STRING", "OP"], "cano_code": "line = line.translate(string.maketrans('', ''), \" _STR:0_ \")", "decano_code": "line = line.translate(string.maketrans('', ''), \" _STR:0_ \")", "raw_code": "line = line.translate(string.maketrans('', ''), '!@#$')", "str_map": {"!@#$": "_STR:0_"}}
{"src": ["binarize", "the", "values", "in", "columns", "of", "list", "order", "in", "a", "pandas", "data", "frame"], "token": ["pd", ".", "concat", "(", "[", "df", ",", "pd", ".", "get_dummies", "(", "df", ",", "''", ",", "''", ")", ".", "astype", "(", "int", ")", "]", ",", "axis", "=", "1", ")", "[", "order", "]"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP"], "cano_code": "pd.concat([df, pd.get_dummies(df, '', '').astype(int)], axis=1)[order]", "decano_code": "pd.concat([df, pd.get_dummies(df, '', '').astype(int)], axis=1)[order]", "raw_code": "pd.concat([df, pd.get_dummies(df, '', '').astype(int)], axis=1)[order]", "str_map": {}}
{"src": ["store", "integer", "3", ",", "4", ",", "1", "and", "2", "in", "a", "list"], "token": ["[", "3", ",", "4", ",", "1", ",", "2", "]"], "type": ["OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "[3, 4, 1, 2]", "decano_code": "[3, 4, 1, 2]", "raw_code": "[3, 4, 1, 2]", "str_map": {}}
{"src": ["define", "global", "variable", "something", "with", "value", "bob"], "token": ["globals", "(", ")", "[", "'something'", "]", "=", "'bob'"], "type": ["KEYWORD", "OP", "OP", "OP", "STRING", "OP", "OP", "STRING"], "cano_code": "globals()['something'] = 'bob'", "decano_code": "globals()['something'] = 'bob'", "raw_code": "globals()['something'] = 'bob'", "str_map": {}}
{"src": ["insert", "spaces", "before", "capital", "letters", "in", "string", "text"], "token": ["re", ".", "sub", "(", "'([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))'", ",", "'\\\\1 '", ",", "text", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.sub('([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))', '\\\\1 ', text)", "decano_code": "re.sub('([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))', '\\\\1 ', text)", "raw_code": "re.sub('([a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))', '\\\\1 ', text)", "str_map": {}}
{"src": ["print", "unicode", "string", "ex\\xe1mple", "in", "uppercase"], "token": ["print", "(", "'ex\\xe1mple'", ".", "upper", "(", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "print('ex\\xe1mple'.upper())", "decano_code": "print('ex\\xe1mple'.upper())", "raw_code": "print('ex\\xe1mple'.upper())", "str_map": {}}
{"src": ["get", "last", "element", "of", "string", "splitted", "by", "_STR:0_", "from", "list", "of", "strings", "list_dirs"], "token": ["[", "l", ".", "split", "(", "\" _STR:0_ \"", ")", "[", "-", "1", "]", "for", "l", "in", "list_dirs", "]"], "type": ["OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[l.split(\" _STR:0_ \")[-1] for l in list_dirs]", "decano_code": "[l.split(\" _STR:0_ \")[-1] for l in list_dirs]", "raw_code": "[l.split('\\\\')[-1] for l in list_dirs]", "str_map": {"\\": "_STR:0_"}}
{"src": ["combine", "two", "sequences", "into", "a", "dictionary"], "token": ["dict", "(", "zip", "(", "keys", ",", "values", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "dict(zip(keys, values))", "decano_code": "dict(zip(keys, values))", "raw_code": "dict(zip(keys, values))", "str_map": {}}
{"src": ["customize", "the", "time", "format", "in", "python", "logging"], "token": ["formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s;%(levelname)s;%(message)s'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "formatter = logging.Formatter('%(asctime)s;%(levelname)s;%(message)s')", "decano_code": "formatter = logging.Formatter('%(asctime)s;%(levelname)s;%(message)s')", "raw_code": "formatter = logging.Formatter('%(asctime)s;%(levelname)s;%(message)s')", "str_map": {}}
{"src": ["replace", "comma", "with", "dot", "in", "a", "string", "original_string", "using", "regex"], "token": ["new_string", "=", "re", ".", "sub", "(", "'\"(\\\\d+),(\\\\d+)\"'", ",", "'\\\\1.\\\\2'", ",", "original_string", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "new_string = re.sub('\"(\\\\d+),(\\\\d+)\"', '\\\\1.\\\\2', original_string)", "decano_code": "new_string = re.sub('\"(\\\\d+),(\\\\d+)\"', '\\\\1.\\\\2', original_string)", "raw_code": "new_string = re.sub('\"(\\\\d+),(\\\\d+)\"', '\\\\1.\\\\2', original_string)", "str_map": {}}
{"src": ["call", "a", "function", "otherfunc", "inside", "a", "bash", "script", "test.sh", "[", "test", ".", "sh", "]", "using", "subprocess"], "token": ["subprocess", ".", "call", "(", "'test.sh otherfunc'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "subprocess.call('test.sh otherfunc')", "decano_code": "subprocess.call('test.sh otherfunc')", "raw_code": "subprocess.call('test.sh otherfunc')", "str_map": {}}
{"src": ["can", "a", "python", "script", "execute", "a", "function", "inside", "a", "bash", "script", "?"], "token": ["subprocess", ".", "Popen", "(", "[", "'bash'", ",", "'-c'", ",", "'. foo.sh; go'", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "subprocess.Popen(['bash', '-c', '. foo.sh; go'])", "decano_code": "subprocess.Popen(['bash', '-c', '. foo.sh; go'])", "raw_code": "subprocess.Popen(['bash', '-c', '. foo.sh; go'])", "str_map": {}}
{"src": ["remove", "multiple", "spaces", "in", "a", "string", "foo"], "token": ["\"\"\" \"\"\"", ".", "join", "(", "foo", ".", "split", "(", ")", ")"], "type": ["STRING", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "\"\"\" \"\"\".join(foo.split())", "decano_code": "\"\"\" \"\"\".join(foo.split())", "raw_code": "\"\"\" \"\"\".join(foo.split())", "str_map": {}}
{"src": ["convert", "decimal", "8", "to", "a", "list", "of", "its", "binary", "values"], "token": ["list", "(", "'{0:0b}'", ".", "format", "(", "8", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "KEYWORD", "OP", "NUMBER", "OP", "OP"], "cano_code": "list('{0:0b}'.format(8))", "decano_code": "list('{0:0b}'.format(8))", "raw_code": "list('{0:0b}'.format(8))", "str_map": {}}
{"src": ["convert", "decimal", "integer", "8", "to", "a", "list", "of", "its", "binary", "values", "as", "elements"], "token": ["[", "int", "(", "x", ")", "for", "x", "in", "list", "(", "'{0:0b}'", ".", "format", "(", "8", ")", ")", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "STRING", "OP", "KEYWORD", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "[int(x) for x in list('{0:0b}'.format(8))]", "decano_code": "[int(x) for x in list('{0:0b}'.format(8))]", "raw_code": "[int(x) for x in list('{0:0b}'.format(8))]", "str_map": {}}
{"src": ["convert", "decimal", "8", "to", "binary", "list"], "token": ["[", "int", "(", "x", ")", "for", "x", "in", "bin", "(", "8", ")", "[", "2", ":", "]", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "[int(x) for x in bin(8)[2:]]", "decano_code": "[int(x) for x in bin(8)[2:]]", "raw_code": "[int(x) for x in bin(8)[2:]]", "str_map": {}}
{"src": ["get", "key-value", "pairs", "in", "dictionary", "my_dictionary", "for", "all", "keys", "in", "list", "my_list", "in", "the", "order", "they", "appear", "in", "my_list"], "token": ["dict", "(", "zip", "(", "my_list", ",", "map", "(", "my_dictionary", ".", "get", ",", "my_list", ")", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "dict(zip(my_list, map(my_dictionary.get, my_list)))", "decano_code": "dict(zip(my_list, map(my_dictionary.get, my_list)))", "raw_code": "dict(zip(my_list, map(my_dictionary.get, my_list)))", "str_map": {}}
{"src": ["cartesian", "product", "of", "x", "and", "y", "array", "points", "into", "single", "array", "of", "2d", "points"], "token": ["numpy", ".", "dstack", "(", "numpy", ".", "meshgrid", "(", "x", ",", "y", ")", ")", ".", "reshape", "(", "-", "1", ",", "2", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "numpy.dstack(numpy.meshgrid(x, y)).reshape(-1, 2)", "decano_code": "numpy.dstack(numpy.meshgrid(x, y)).reshape(-1, 2)", "raw_code": "numpy.dstack(numpy.meshgrid(x, y)).reshape(-1, 2)", "str_map": {}}
{"src": ["selenium", "wait", "for", "driver", "driver", "60", "seconds", "before", "throwing", "a", "NoSuchElementExceptions", "exception"], "token": ["driver", ".", "implicitly_wait", "(", "60", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "driver.implicitly_wait(60)", "decano_code": "driver.implicitly_wait(60)", "raw_code": "driver.implicitly_wait(60)", "str_map": {}}
{"src": ["selenium", "webdriver", "switch", "to", "frame", "_STR:0_"], "token": ["driver", ".", "switch_to_frame", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "driver.switch_to_frame(\" _STR:0_ \")", "decano_code": "driver.switch_to_frame(\" _STR:0_ \")", "raw_code": "driver.switch_to_frame('frameName')", "str_map": {"frameName": "_STR:0_"}}
{"src": ["format", "current", "date", "to", "pattern", "_STR:0_"], "token": ["time", ".", "strftime", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "time.strftime(\" _STR:0_ \")", "decano_code": "time.strftime(\" _STR:0_ \")", "raw_code": "time.strftime('{%Y-%m-%d %H:%M:%S}')", "str_map": {"{%Y-%m-%d %H:%M:%S}": "_STR:0_"}}
{"src": ["sort", "list", "['14:10:01', '03:12:08'", "]"], "token": ["sorted", "(", "[", "'14:10:01'", ",", "'03:12:08'", "]", ")"], "type": ["KEYWORD", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "sorted(['14:10:01', '03:12:08'])", "decano_code": "sorted(['14:10:01', '03:12:08'])", "raw_code": "sorted(['14:10:01', '03:12:08'])", "str_map": {}}
{"src": ["find", "all", "occurrences", "of", "regex", "pattern", "_STR:0_", "in", "string", "x"], "token": ["re", ".", "findall", "(", "\" _STR:0_ \"", ",", "x", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.findall(\" _STR:0_ \", x)", "decano_code": "re.findall(\" _STR:0_ \", x)", "raw_code": "re.findall('(?:\\\\w+(?:\\\\s+\\\\w+)*,\\\\s)+(?:\\\\w+(?:\\\\s\\\\w+)*)', x)", "str_map": {"(?:\\w+(?:\\s+\\w+)*,\\s)+(?:\\w+(?:\\s\\w+)*)": "_STR:0_"}}
{"src": ["remove", "duplicate", "rows", "from", "dataframe", "df1", "and", "calculate", "their", "frequency"], "token": ["df1", ".", "groupby", "(", "[", "'key'", ",", "'year'", "]", ")", ".", "size", "(", ")", ".", "reset_index", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "df1.groupby(['key', 'year']).size().reset_index()", "decano_code": "df1.groupby(['key', 'year']).size().reset_index()", "raw_code": "df1.groupby(['key', 'year']).size().reset_index()", "str_map": {}}
{"src": ["sort", "dictionary", "dictionary", "in", "ascending", "order", "by", "its", "values"], "token": ["sorted", "(", "list", "(", "dictionary", ".", "items", "(", ")", ")", ",", "key", "=", "operator", ".", "itemgetter", "(", "1", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "sorted(list(dictionary.items()), key=operator.itemgetter(1))", "decano_code": "sorted(list(dictionary.items()), key=operator.itemgetter(1))", "raw_code": "sorted(list(dictionary.items()), key=operator.itemgetter(1))", "str_map": {}}
{"src": ["iterate", "over", "dictionary", "d", "in", "ascending", "order", "of", "values"], "token": ["sorted", "(", "iter", "(", "d", ".", "items", "(", ")", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "sorted(iter(d.items()), key=lambda x: x[1])", "decano_code": "sorted(iter(d.items()), key=lambda x: x[1])", "raw_code": "sorted(iter(d.items()), key=lambda x: x[1])", "str_map": {}}
{"src": ["iterate", "over", "a", "python", "dictionary", ",", "ordered", "by", "values"], "token": ["sorted", "(", "list", "(", "dictionary", ".", "items", "(", ")", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "sorted(list(dictionary.items()), key=lambda x: x[1])", "decano_code": "sorted(list(dictionary.items()), key=lambda x: x[1])", "raw_code": "sorted(list(dictionary.items()), key=lambda x: x[1])", "str_map": {}}
{"src": ["split", "1d", "array", "a", "into", "2d", "array", "at", "the", "last", "element"], "token": ["np", ".", "split", "(", "a", ",", "[", "-", "1", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "np.split(a, [-1])", "decano_code": "np.split(a, [-1])", "raw_code": "np.split(a, [-1])", "str_map": {}}
{"src": ["convert", "dataframe", "df", "into", "a", "pivot", "table", "using", "column", "_STR:0_", "as", "index", "and", "values", "of", "column", "_STR:1_", "as", "columns"], "token": ["df", ".", "pivot", "(", "index", "=", "\" _STR:0_ \"", ",", "columns", "=", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df.pivot(index=\" _STR:0_ \", columns=\" _STR:1_ \")", "decano_code": "df.pivot(index=\" _STR:0_ \", columns=\" _STR:1_ \")", "raw_code": "df.pivot(index='order', columns='sample')", "str_map": {"order": "_STR:0_", "sample": "_STR:1_"}}
{"src": ["select", "all", "rows", "from", "pandas", "DataFrame", "_STR:0_", "where", "the", "value", "in", "column", "_STR:1_", "is", "greater", "than", "1", "or", "less", "than", "-1", "in", "column", "_STR:2_", "."], "token": ["df", "[", "(", "df", "[", "\" _STR:1_ \"", "]", ">", "1", ")", "|", "(", "df", "[", "\" _STR:2_ \"", "]", "<", "-", "1", ")", "]"], "type": ["NAME", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "df[(df[\" _STR:1_ \"] > 1) | (df[\" _STR:2_ \"] < -1)]", "decano_code": "df[(df[\" _STR:1_ \"] > 1) | (df[\" _STR:2_ \"] < -1)]", "raw_code": "df[(df['A'] > 1) | (df['B'] < -1)]", "str_map": {"df": "_STR:0_", "A": "_STR:1_", "B": "_STR:2_"}}
{"src": ["get", "the", "zip", "output", "as", "list", "from", "the", "lists", "[1, 2, 3", "]", ",", "[4, 5, 6", "]", ",", "[7, 8, 9", "]"], "token": ["[", "list", "(", "a", ")", "for", "a", "in", "zip", "(", "[", "1", ",", "2", ",", "3", "]", ",", "[", "4", ",", "5", ",", "6", "]", ",", "[", "7", ",", "8", ",", "9", "]", ")", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "[list(a) for a in zip([1, 2, 3], [4, 5, 6], [7, 8, 9])]", "decano_code": "[list(a) for a in zip([1, 2, 3], [4, 5, 6], [7, 8, 9])]", "raw_code": "[list(a) for a in zip([1, 2, 3], [4, 5, 6], [7, 8, 9])]", "str_map": {}}
{"src": ["select", "rows", "of", "dataframe", "df", "whose", "value", "for", "column", "a", "is", "foo"], "token": ["print", "(", "df", ".", "loc", "[", "df", "[", "'A'", "]", "==", "'foo'", "]", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "STRING", "OP", "OP"], "cano_code": "print(df.loc[df['A'] == 'foo'])", "decano_code": "print(df.loc[df['A'] == 'foo'])", "raw_code": "print(df.loc[df['A'] == 'foo'])", "str_map": {}}
{"src": ["select", "rows", "whose", "column", "value", "in", "column", "column_name", "does", "not", "equal", "some_value", "in", "pandas", "data", "frame"], "token": ["df", ".", "loc", "[", "df", "[", "'column_name'", "]", "!=", "some_value", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP"], "cano_code": "df.loc[df['column_name'] != some_value]", "decano_code": "df.loc[df['column_name'] != some_value]", "raw_code": "df.loc[df['column_name'] != some_value]", "str_map": {}}
{"src": ["select", "rows", "from", "a", "dataframe", "df", "whose", "value", "for", "column", "column_name", "is", "not", "in", "some_values"], "token": ["df", ".", "loc", "[", "~", "df", "[", "'column_name'", "]", ".", "isin", "(", "some_values", ")", "]"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "df.loc[~df['column_name'].isin(some_values)]", "decano_code": "df.loc[~df['column_name'].isin(some_values)]", "raw_code": "df.loc[~df['column_name'].isin(some_values)]", "str_map": {}}
{"src": ["select", "all", "rows", "whose", "values", "in", "a", "column", "column_name", "equals", "a", "scalar", "some_value", "in", "pandas", "data", "frame", "object", "df"], "token": ["df", ".", "loc", "[", "df", "[", "'column_name'", "]", "==", "some_value", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP"], "cano_code": "df.loc[df['column_name'] == some_value]", "decano_code": "df.loc[df['column_name'] == some_value]", "raw_code": "df.loc[df['column_name'] == some_value]", "str_map": {}}
{"src": ["select", "rows", "whose", "value", "of", "the", "_STR:0_", "column", "is", "_STR:1_", "or", "_STR:2_", "in", "the", "DataFrame", "df"], "token": ["print", "(", "df", ".", "loc", "[", "df", "[", "\" _STR:0_ \"", "]", ".", "isin", "(", "[", "\" _STR:1_ \"", ",", "\" _STR:2_ \"", "]", ")", "]", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "OP"], "cano_code": "print(df.loc[df[\" _STR:0_ \"].isin([\" _STR:1_ \", \" _STR:2_ \"])])", "decano_code": "print(df.loc[df[\" _STR:0_ \"].isin([\" _STR:1_ \", \" _STR:2_ \"])])", "raw_code": "print(df.loc[df['B'].isin(['one', 'three'])])", "str_map": {"B": "_STR:0_", "one": "_STR:1_", "three": "_STR:2_"}}
{"src": ["repeat", "every", "character", "for", "7", "times", "in", "string", "_STR:0_"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "map", "(", "lambda", "x", ":", "x", "*", "7", ",", "\" _STR:0_ \"", ")", ")"], "type": ["STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "STRING", "OP", "OP"], "cano_code": "\"\"\"\"\"\".join(map(lambda x: x * 7, \" _STR:0_ \"))", "decano_code": "\"\"\"\"\"\".join(map(lambda x: x * 7, \" _STR:0_ \"))", "raw_code": "\"\"\"\"\"\".join(map(lambda x: x * 7, 'map'))", "str_map": {"map": "_STR:0_"}}
{"src": ["delete", "an", "empty", "directory"], "token": ["os", ".", "rmdir", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "os.rmdir()", "decano_code": "os.rmdir()", "raw_code": "os.rmdir()", "str_map": {}}
{"src": ["recursively", "delete", "all", "contents", "in", "directory", "path"], "token": ["shutil", ".", "rmtree", "(", "path", ",", "ignore_errors", "=", "False", ",", "onerror", "=", "None", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "shutil.rmtree(path, ignore_errors=False, onerror=None)", "decano_code": "shutil.rmtree(path, ignore_errors=False, onerror=None)", "raw_code": "shutil.rmtree(path, ignore_errors=False, onerror=None)", "str_map": {}}
{"src": ["recursively", "remove", "folder", "name"], "token": ["os", ".", "removedirs", "(", "name", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "os.removedirs(name)", "decano_code": "os.removedirs(name)", "raw_code": "os.removedirs(name)", "str_map": {}}
{"src": ["add", "row", "['8/19/2014', 'Jun', 'Fly', '98765'", "]", "to", "dataframe", "df"], "token": ["df", ".", "loc", "[", "len", "(", "df", ")", "]", "=", "[", "'8/19/2014'", ",", "'Jun'", ",", "'Fly'", ",", "'98765'", "]"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "df.loc[len(df)] = ['8/19/2014', 'Jun', 'Fly', '98765']", "decano_code": "df.loc[len(df)] = ['8/19/2014', 'Jun', 'Fly', '98765']", "raw_code": "df.loc[len(df)] = ['8/19/2014', 'Jun', 'Fly', '98765']", "str_map": {}}
{"src": ["list", "all", "files", "in", "a", "current", "directory"], "token": ["glob", ".", "glob", "(", "'*'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "glob.glob('*')", "decano_code": "glob.glob('*')", "raw_code": "glob.glob('*')", "str_map": {}}
{"src": ["list", "all", "the", "files", "that", "doesn't", "contain", "the", "name", "hello"], "token": ["glob", ".", "glob", "(", "'[!hello]*.txt'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "glob.glob('[!hello]*.txt')", "decano_code": "glob.glob('[!hello]*.txt')", "raw_code": "glob.glob('[!hello]*.txt')", "str_map": {}}
{"src": ["list", "all", "the", "files", "that", "matches", "the", "pattern", "hello*.txt", "[", "hello*", ".", "txt", "]"], "token": ["glob", ".", "glob", "(", "'hello*.txt'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "glob.glob('hello*.txt')", "decano_code": "glob.glob('hello*.txt')", "raw_code": "glob.glob('hello*.txt')", "str_map": {}}
{"src": ["evaluate", "the", "expression", "_STR:0_"], "token": ["eval", "(", "\" _STR:0_ \"", ")"], "type": ["KEYWORD", "OP", "STRING", "OP"], "cano_code": "eval(\" _STR:0_ \")", "decano_code": "eval(\" _STR:0_ \")", "raw_code": "eval('20<30')", "str_map": {"20<30": "_STR:0_"}}
{"src": ["copy", "list", "old_list", "and", "name", "it", "new_list"], "token": ["new_list", "=", "[", "x", "[", ":", "]", "for", "x", "in", "old_list", "]"], "type": ["NAME", "OP", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "new_list = [x[:] for x in old_list]", "decano_code": "new_list = [x[:] for x in old_list]", "raw_code": "new_list = [x[:] for x in old_list]", "str_map": {}}
{"src": ["convert", "scientific", "notation", "of", "variable", "a", "to", "decimal"], "token": ["\"\"\"{:.50f}\"\"\"", ".", "format", "(", "float", "(", "a", "[", "0", "]", "/", "a", "[", "1", "]", ")", ")"], "type": ["STRING", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "\"\"\"{:.50f}\"\"\".format(float(a[0] / a[1]))", "decano_code": "\"\"\"{:.50f}\"\"\".format(float(a[0] / a[1]))", "raw_code": "\"\"\"{:.50f}\"\"\".format(float(a[0] / a[1]))", "str_map": {}}
{"src": ["convert", "dataframe", "df", "to", "integer-type", "sparse", "object"], "token": ["df", ".", "to_sparse", "(", "0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "df.to_sparse(0)", "decano_code": "df.to_sparse(0)", "raw_code": "df.to_sparse(0)", "str_map": {}}
{"src": ["display", "attribute", "attr", "for", "each", "object", "obj", "in", "list", "my_list_of_objs"], "token": ["print", "(", "[", "obj", ".", "attr", "for", "obj", "in", "my_list_of_objs", "]", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "print([obj.attr for obj in my_list_of_objs])", "decano_code": "print([obj.attr for obj in my_list_of_objs])", "raw_code": "print([obj.attr for obj in my_list_of_objs])", "str_map": {}}
{"src": ["count", "the", "number", "of", "true", "values", "associated", "with", "key", "_STR:0_", "in", "dictionary", "d"], "token": ["sum", "(", "1", "if", "d", "[", "\" _STR:0_ \"", "]", "else", "0", "for", "d", "in", "s", ")"], "type": ["KEYWORD", "OP", "NUMBER", "KEYWORD", "NAME", "OP", "STRING", "OP", "KEYWORD", "NUMBER", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "sum(1 if d[\" _STR:0_ \"] else 0 for d in s)", "decano_code": "sum(1 if d[\" _STR:0_ \"] else 0 for d in s)", "raw_code": "sum(1 if d['success'] else 0 for d in s)", "str_map": {"success": "_STR:0_"}}
{"src": ["get", "the", "sum", "of", "values", "associated", "with", "the", "key", "\u2018success\u2019", "for", "a", "list", "of", "dictionaries", "s"], "token": ["sum", "(", "d", "[", "'success'", "]", "for", "d", "in", "s", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "sum(d['success'] for d in s)", "decano_code": "sum(d['success'] for d in s)", "raw_code": "sum(d['success'] for d in s)", "str_map": {}}
{"src": ["get", "complete", "path", "of", "a", "module", "named", "os"], "token": ["imp", ".", "find_module", "(", "'os'", ")", "[", "1", "]"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NUMBER", "OP"], "cano_code": "imp.find_module('os')[1]", "decano_code": "imp.find_module('os')[1]", "raw_code": "imp.find_module('os')[1]", "str_map": {}}
{"src": ["get", "logical", "xor", "of", "a", "and", "b"], "token": ["(", "bool", "(", "a", ")", "!=", "bool", "(", "b", ")", ")"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "(bool(a) != bool(b))", "decano_code": "(bool(a) != bool(b))", "raw_code": "(bool(a) != bool(b))", "str_map": {}}
{"src": ["get", "logical", "xor", "of", "a", "and", "b"], "token": ["(", "(", "a", "and", "(", "not", "b", ")", ")", "or", "(", "(", "not", "a", ")", "and", "b", ")", ")"], "type": ["OP", "OP", "NAME", "KEYWORD", "OP", "KEYWORD", "NAME", "OP", "OP", "KEYWORD", "OP", "OP", "KEYWORD", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "((a and (not b)) or ((not a) and b))", "decano_code": "((a and (not b)) or ((not a) and b))", "raw_code": "((a and (not b)) or ((not a) and b))", "str_map": {}}
{"src": ["get", "logical", "xor", "of", "a", "and", "b"], "token": ["(", "bool", "(", "a", ")", "^", "bool", "(", "b", ")", ")"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "(bool(a) ^ bool(b))", "decano_code": "(bool(a) ^ bool(b))", "raw_code": "(bool(a) ^ bool(b))", "str_map": {}}
{"src": ["get", "logical", "xor", "of", "a", "and", "b"], "token": ["xor", "(", "bool", "(", "a", ")", ",", "bool", "(", "b", ")", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "xor(bool(a), bool(b))", "decano_code": "xor(bool(a), bool(b))", "raw_code": "xor(bool(a), bool(b))", "str_map": {}}
{"src": ["get", "the", "logical", "xor", "of", "two", "variables", "str1", "and", "str2"], "token": ["return", "(", "bool", "(", "str1", ")", "^", "bool", "(", "str2", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "return (bool(str1) ^ bool(str2))", "decano_code": "return (bool(str1) ^ bool(str2))", "raw_code": "return (bool(str1) ^ bool(str2))", "str_map": {}}
{"src": ["sort", "list", "my_list", "in", "alphabetical", "order", "based", "on", "the", "values", "associated", "with", "key", "_STR:0_", "of", "each", "dictionary", "in", "the", "list"], "token": ["my_list", ".", "sort", "(", "key", "=", "operator", ".", "itemgetter", "(", "\" _STR:0_ \"", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "my_list.sort(key=operator.itemgetter(\" _STR:0_ \"))", "decano_code": "my_list.sort(key=operator.itemgetter(\" _STR:0_ \"))", "raw_code": "my_list.sort(key=operator.itemgetter('name'))", "str_map": {"name": "_STR:0_"}}
{"src": ["split", "a", "string", "a , b; cdf", "using", "both", "commas", "and", "semicolons", "as", "delimeters"], "token": ["re", ".", "split", "(", "'\\\\s*,\\\\s*|\\\\s*;\\\\s*'", ",", "'a , b; cdf'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.split('\\\\s*,\\\\s*|\\\\s*;\\\\s*', 'a , b; cdf')", "decano_code": "re.split('\\\\s*,\\\\s*|\\\\s*;\\\\s*', 'a , b; cdf')", "raw_code": "re.split('\\\\s*,\\\\s*|\\\\s*;\\\\s*', 'a , b; cdf')", "str_map": {}}
{"src": ["split", "a", "string", "string", "by", "multiple", "separators", ",", "and", ";"], "token": ["[", "t", ".", "strip", "(", ")", "for", "s", "in", "string", ".", "split", "(", "','", ")", "for", "t", "in", "s", ".", "split", "(", "';'", ")", "]"], "type": ["OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "[t.strip() for s in string.split(',') for t in s.split(';')]", "decano_code": "[t.strip() for s in string.split(',') for t in s.split(';')]", "raw_code": "[t.strip() for s in string.split(',') for t in s.split(';')]", "str_map": {}}
{"src": ["make", "a", "function", "f", "that", "calculates", "the", "sum", "of", "two", "integer", "variables", "x", "and", "y"], "token": ["f", "=", "lambda", "x", ",", "y", ":", "x", "+", "y"], "type": ["NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME"], "cano_code": "f = lambda x, y: x + y", "decano_code": "f = lambda x, y: x + y", "raw_code": "f = lambda x, y: x + y", "str_map": {}}
{"src": ["create", "list", "instancelist", "containing", "29", "objects", "of", "type", "MyClass"], "token": ["instancelist", "=", "[", "MyClass", "(", ")", "for", "i", "in", "range", "(", "29", ")", "]"], "type": ["NAME", "OP", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "OP"], "cano_code": "instancelist = [MyClass() for i in range(29)]", "decano_code": "instancelist = [MyClass() for i in range(29)]", "raw_code": "instancelist = [MyClass() for i in range(29)]", "str_map": {}}
{"src": ["make", "a", "dictionary", "from", "list", "f", "which", "is", "in", "the", "format", "of", "four", "sets", "of", "_STR:0_"], "token": ["{", "f", "[", "i", "+", "1", "]", ":", "[", "f", "[", "i", "]", ",", "f", "[", "i", "+", "2", "]", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "f", ")", ",", "3", ")", "}"], "type": ["OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "{f[i + 1]: [f[i], f[i + 2]] for i in range(0, len(f), 3)}", "decano_code": "{f[i + 1]: [f[i], f[i + 2]] for i in range(0, len(f), 3)}", "raw_code": "{f[i + 1]: [f[i], f[i + 2]] for i in range(0, len(f), 3)}", "str_map": {"val, key, val": "_STR:0_"}}
{"src": ["convert", "bytes", "string", "s", "to", "an", "unsigned", "integer"], "token": ["struct", ".", "unpack", "(", "'>q'", ",", "s", ")", "[", "0", "]"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP", "NUMBER", "OP"], "cano_code": "struct.unpack('>q', s)[0]", "decano_code": "struct.unpack('>q', s)[0]", "raw_code": "struct.unpack('>q', s)[0]", "str_map": {}}
{"src": ["concatenate", "a", "series", "students", "onto", "a", "dataframe", "marks", "with", "pandas"], "token": ["pd", ".", "concat", "(", "[", "students", ",", "pd", ".", "DataFrame", "(", "marks", ")", "]", ",", "axis", "=", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "pd.concat([students, pd.DataFrame(marks)], axis=1)", "decano_code": "pd.concat([students, pd.DataFrame(marks)], axis=1)", "raw_code": "pd.concat([students, pd.DataFrame(marks)], axis=1)", "str_map": {}}
{"src": ["sort", "list", "alist", "in", "ascending", "order", "based", "on", "each", "of", "its", "elements", "'", "attribute", "foo"], "token": ["alist", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", ".", "foo", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "alist.sort(key=lambda x: x.foo)", "decano_code": "alist.sort(key=lambda x: x.foo)", "raw_code": "alist.sort(key=lambda x: x.foo)", "str_map": {}}
{"src": ["BeautifulSoup", "select", "_STR:0_", "elements", "with", "an", "id", "attribute", "value", "ending", "with", "sub-string", "_STR:1_", "in", "HTML", "parsed", "string", "soup"], "token": ["soup", ".", "select", "(", "'div[id$=_answer]'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "soup.select('div[id$=_answer]')", "decano_code": "soup.select('div[id$=_answer]')", "raw_code": "soup.select('div[id$=_answer]')", "str_map": {"div": "_STR:0_", "_answer": "_STR:1_"}}
{"src": ["sympy", "solve", "matrix", "of", "linear", "equations", "(([1, 1, 1, 1], [1, 1, 2, 3])", ")", "with", "variables", "(x, y, z", ")"], "token": ["linsolve", "(", "Matrix", "(", "(", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "[", "1", ",", "1", ",", "2", ",", "3", "]", ")", ")", ",", "(", "x", ",", "y", ",", "z", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "linsolve(Matrix(([1, 1, 1, 1], [1, 1, 2, 3])), (x, y, z))", "decano_code": "linsolve(Matrix(([1, 1, 1, 1], [1, 1, 2, 3])), (x, y, z))", "raw_code": "linsolve(Matrix(([1, 1, 1, 1], [1, 1, 2, 3])), (x, y, z))", "str_map": {}}
{"src": ["best", "way", "to", "extract", "subset", "of", "key-value", "pairs", "with", "keys", "matching", "_STR:0_", ",", "_STR:1_", ",", "or", "_STR:2_", "from", "python", "dictionary", "object"], "token": ["{", "k", ":", "bigdict", "[", "k", "]", "for", "k", "in", "list", "(", "bigdict", ".", "keys", "(", ")", ")", "&", "{", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ",", "\" _STR:2_ \"", "}", "}"], "type": ["OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "{k: bigdict[k] for k in list(bigdict.keys()) & {\" _STR:0_ \", \" _STR:1_ \", \" _STR:2_ \"}}", "decano_code": "{k: bigdict[k] for k in list(bigdict.keys()) & {\" _STR:0_ \", \" _STR:1_ \", \" _STR:2_ \"}}", "raw_code": "{k: bigdict[k] for k in list(bigdict.keys()) & {'l', 'm', 'n'}}", "str_map": {"l": "_STR:0_", "m": "_STR:1_", "n": "_STR:2_"}}
{"src": ["extract", "subset", "of", "key-value", "pairs", "with", "keys", "as", "('l', 'm', 'n'", ")", "from", "dictionary", "object", "bigdict"], "token": ["dict", "(", "(", "k", ",", "bigdict", "[", "k", "]", ")", "for", "k", "in", "(", "'l'", ",", "'m'", ",", "'n'", ")", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "dict((k, bigdict[k]) for k in ('l', 'm', 'n'))", "decano_code": "dict((k, bigdict[k]) for k in ('l', 'm', 'n'))", "raw_code": "dict((k, bigdict[k]) for k in ('l', 'm', 'n'))", "str_map": {}}
{"src": ["get", "items", "from", "a", "dictionary", "bigdict", "where", "the", "keys", "are", "present", "in", "('l', 'm', 'n'", ")"], "token": ["{", "k", ":", "bigdict", ".", "get", "(", "k", ",", "None", ")", "for", "k", "in", "(", "'l'", ",", "'m'", ",", "'n'", ")", "}"], "type": ["OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "NAME", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}", "decano_code": "{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}", "raw_code": "{k: bigdict.get(k, None) for k in ('l', 'm', 'n')}", "str_map": {}}
{"src": ["extract", "subset", "of", "key", "value", "pair", "for", "keys", "_STR:0_", ",", "_STR:1_", ",", "_STR:2_", "from", "bigdict", "in", "python", "3"], "token": ["{", "k", ":", "bigdict", "[", "k", "]", "for", "k", "in", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ",", "\" _STR:2_ \"", ")", "}"], "type": ["OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "{k: bigdict[k] for k in (\" _STR:0_ \", \" _STR:1_ \", \" _STR:2_ \")}", "decano_code": "{k: bigdict[k] for k in (\" _STR:0_ \", \" _STR:1_ \", \" _STR:2_ \")}", "raw_code": "{k: bigdict[k] for k in ('l', 'm', 'n')}", "str_map": {"l": "_STR:0_", "m": "_STR:1_", "n": "_STR:2_"}}
{"src": ["selenium", "get", "the", "entire", "driver", "page", "text"], "token": ["driver", ".", "page_source"], "type": ["NAME", "OP", "NAME"], "cano_code": "driver.page_source", "decano_code": "driver.page_source", "raw_code": "driver.page_source", "str_map": {}}
{"src": ["extracting", "column", "1", "and", "9", "from", "array", "data"], "token": ["data", "[", ":", ",", "(", "[", "1", ",", "9", "]", ")", "]"], "type": ["NAME", "OP", "OP", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "data[:, ([1, 9])]", "decano_code": "data[:, ([1, 9])]", "raw_code": "data[:, ([1, 9])]", "str_map": {}}
{"src": ["remove", "all", "square", "brackets", "from", "string", "_STR:0_"], "token": ["re", ".", "sub", "(", "'\\\\[.*?\\\\]'", ",", "''", ",", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.sub('\\\\[.*?\\\\]', '', \" _STR:0_ \")", "decano_code": "re.sub('\\\\[.*?\\\\]', '', \" _STR:0_ \")", "raw_code": "re.sub('\\\\[.*?\\\\]', '', 'abcd[e]yth[ac]ytwec')", "str_map": {"abcd[e]yth[ac]ytwec": "_STR:0_"}}
{"src": ["how", "can", "i", "resize", "the", "root", "window", "in", "tkinter", "?"], "token": ["root", ".", "geometry", "(", "'500x500'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "root.geometry('500x500')", "decano_code": "root.geometry('500x500')", "raw_code": "root.geometry('500x500')", "str_map": {}}
{"src": ["find", "all", "substrings", "in", "string", "mystring", "composed", "only", "of", "letters", "a", "and", "b", "where", "each", "a", "is", "directly", "preceded", "and", "succeeded", "by", "b"], "token": ["re", ".", "findall", "(", "'\\\\b(?:b+a)+b+\\\\b'", ",", "mystring", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.findall('\\\\b(?:b+a)+b+\\\\b', mystring)", "decano_code": "re.findall('\\\\b(?:b+a)+b+\\\\b', mystring)", "raw_code": "re.findall('\\\\b(?:b+a)+b+\\\\b', mystring)", "str_map": {}}
{"src": ["convert", "list", "lst", "of", "tuples", "of", "floats", "to", "list", "str_list", "of", "tuples", "of", "strings", "of", "floats", "in", "scientific", "notation", "with", "eight", "decimal", "point", "precision"], "token": ["str_list", "=", "[", "tuple", "(", "'{0:.8e}'", ".", "format", "(", "flt", ")", "for", "flt", "in", "sublist", ")", "for", "sublist", "in", "lst", "]"], "type": ["NAME", "OP", "OP", "KEYWORD", "OP", "STRING", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "str_list = [tuple('{0:.8e}'.format(flt) for flt in sublist) for sublist in lst]", "decano_code": "str_list = [tuple('{0:.8e}'.format(flt) for flt in sublist) for sublist in lst]", "raw_code": "str_list = [tuple('{0:.8e}'.format(flt) for flt in sublist) for sublist in lst]", "str_map": {}}
{"src": ["convert", "list", "of", "sublists", "lst", "of", "floats", "to", "a", "list", "of", "sublists", "str_list", "of", "strings", "of", "integers", "in", "scientific", "notation", "with", "8", "decimal", "points"], "token": ["str_list", "=", "[", "[", "'{0:.8e}'", ".", "format", "(", "flt", ")", "for", "flt", "in", "sublist", "]", "for", "sublist", "in", "lst", "]"], "type": ["NAME", "OP", "OP", "OP", "STRING", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "str_list = [['{0:.8e}'.format(flt) for flt in sublist] for sublist in lst]", "decano_code": "str_list = [['{0:.8e}'.format(flt) for flt in sublist] for sublist in lst]", "raw_code": "str_list = [['{0:.8e}'.format(flt) for flt in sublist] for sublist in lst]", "str_map": {}}
{"src": ["create", "a", "tuple", "t", "containing", "first", "element", "of", "each", "tuple", "in", "tuple", "s"], "token": ["t", "=", "tuple", "(", "x", "[", "0", "]", "for", "x", "in", "s", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "t = tuple(x[0] for x in s)", "decano_code": "t = tuple(x[0] for x in s)", "raw_code": "t = tuple(x[0] for x in s)", "str_map": {}}
{"src": ["obtain", "the", "current", "day", "of", "the", "week", "in", "a", "3", "letter", "format", "from", "a", "datetime", "object"], "token": ["datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%a'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "datetime.datetime.now().strftime('%a')", "decano_code": "datetime.datetime.now().strftime('%a')", "raw_code": "datetime.datetime.now().strftime('%a')", "str_map": {}}
{"src": ["get", "the", "ASCII", "value", "of", "a", "character", "_STR:0_", "as", "an", "int"], "token": ["ord", "(", "\" _STR:0_ \"", ")"], "type": ["KEYWORD", "OP", "STRING", "OP"], "cano_code": "ord(\" _STR:0_ \")", "decano_code": "ord(\" _STR:0_ \")", "raw_code": "ord('a')", "str_map": {"a": "_STR:0_"}}
{"src": ["get", "the", "ASCII", "value", "of", "a", "character", "u'\u3042", "'", "as", "an", "int"], "token": ["ord", "(", "'\\u3042'", ")"], "type": ["KEYWORD", "OP", "STRING", "OP"], "cano_code": "ord('\\u3042')", "decano_code": "ord('\\u3042')", "raw_code": "ord('\\u3042')", "str_map": {}}
{"src": ["get", "the", "ASCII", "value", "of", "a", "character", "as", "an", "int"], "token": ["ord", "(", ")"], "type": ["KEYWORD", "OP", "OP"], "cano_code": "ord()", "decano_code": "ord()", "raw_code": "ord()", "str_map": {}}
{"src": ["decode", "JSON", "string", "u", "to", "a", "dictionary"], "token": ["json", ".", "load", "(", "u", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "json.load(u)", "decano_code": "json.load(u)", "raw_code": "json.load(u)", "str_map": {}}
{"src": ["delete", "mulitple", "columns", "columnheading1", ",", "columnheading2", "in", "pandas", "data", "frame", "yourdf"], "token": ["yourdf", ".", "drop", "(", "[", "'columnheading1'", ",", "'columnheading2'", "]", ",", "axis", "=", "1", ",", "inplace", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "yourdf.drop(['columnheading1', 'columnheading2'], axis=1, inplace=True)", "decano_code": "yourdf.drop(['columnheading1', 'columnheading2'], axis=1, inplace=True)", "raw_code": "yourdf.drop(['columnheading1', 'columnheading2'], axis=1, inplace=True)", "str_map": {}}
{"src": ["get", "a", "list", "of", "of", "elements", "resulting", "from", "splitting", "user", "input", "by", "commas", "and", "stripping", "white", "space", "from", "each", "resulting", "string", "s"], "token": ["[", "s", ".", "strip", "(", ")", "for", "s", "in", "input", "(", ")", ".", "split", "(", "','", ")", "]"], "type": ["OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "[s.strip() for s in input().split(',')]", "decano_code": "[s.strip() for s in input().split(',')]", "raw_code": "[s.strip() for s in input().split(',')]", "str_map": {}}
{"src": ["create", "a", "list", "containing", "the", "digits", "values", "from", "binary", "string", "x", "as", "elements"], "token": ["[", "int", "(", "d", ")", "for", "d", "in", "str", "(", "bin", "(", "x", ")", ")", "[", "2", ":", "]", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "[int(d) for d in str(bin(x))[2:]]", "decano_code": "[int(d) for d in str(bin(x))[2:]]", "raw_code": "[int(d) for d in str(bin(x))[2:]]", "str_map": {}}
{"src": ["get", "the", "max", "string", "length", "in", "list", "i"], "token": ["max", "(", "len", "(", "word", ")", "for", "word", "in", "i", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "max(len(word) for word in i)", "decano_code": "max(len(word) for word in i)", "raw_code": "max(len(word) for word in i)", "str_map": {}}
{"src": ["get", "the", "maximum", "string", "length", "in", "nested", "list", "i"], "token": ["len", "(", "max", "(", "i", ",", "key", "=", "len", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "OP"], "cano_code": "len(max(i, key=len))", "decano_code": "len(max(i, key=len))", "raw_code": "len(max(i, key=len))", "str_map": {}}
{"src": ["execute", "os", "command", "my_cmd"], "token": ["os", ".", "system", "(", "my_cmd", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "os.system(my_cmd)", "decano_code": "os.system(my_cmd)", "raw_code": "os.system(my_cmd)", "str_map": {}}
{"src": ["sort", "list", "mylist", "alphabetically"], "token": ["mylist", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", ".", "lower", "(", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "mylist.sort(key=lambda x: x.lower())", "decano_code": "mylist.sort(key=lambda x: x.lower())", "raw_code": "mylist.sort(key=lambda x: x.lower())", "str_map": {}}
{"src": ["sort", "list", "mylist", "in", "alphabetical", "order"], "token": ["mylist", ".", "sort", "(", "key", "=", "str", ".", "lower", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP"], "cano_code": "mylist.sort(key=str.lower)", "decano_code": "mylist.sort(key=str.lower)", "raw_code": "mylist.sort(key=str.lower)", "str_map": {}}
{"src": ["sort", "a", "list", "of", "strings", "_STR:0_", "."], "token": ["mylist", ".", "sort", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "mylist.sort()", "decano_code": "mylist.sort()", "raw_code": "mylist.sort()", "str_map": {"mylist": "_STR:0_"}}
{"src": ["sort", "a", "list", "of", "strings", "list"], "token": ["list", ".", "sort", "(", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "list.sort()", "decano_code": "list.sort()", "raw_code": "list.sort()", "str_map": {}}
{"src": ["set", "multi", "index", "on", "columns", "_STR:0_", "and", "_STR:1_", "of", "data", "frame", "df", "in", "pandas", "."], "token": ["df", ".", "set_index", "(", "[", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", "]", ",", "inplace", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df.set_index([\" _STR:0_ \", \" _STR:1_ \"], inplace=True)", "decano_code": "df.set_index([\" _STR:0_ \", \" _STR:1_ \"], inplace=True)", "raw_code": "df.set_index(['Company', 'date'], inplace=True)", "str_map": {"Company": "_STR:0_", "date": "_STR:1_"}}
{"src": ["get", "the", "attribute", "x", "from", "object", "your_obj"], "token": ["getattr", "(", "your_obj", ",", "x", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "getattr(your_obj, x)", "decano_code": "getattr(your_obj, x)", "raw_code": "getattr(your_obj, x)", "str_map": {}}
{"src": ["remove", "first", "word", "in", "string", "s"], "token": ["s", ".", "split", "(", "' '", ",", "1", ")", "[", "1", "]"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP"], "cano_code": "s.split(' ', 1)[1]", "decano_code": "s.split(' ', 1)[1]", "raw_code": "s.split(' ', 1)[1]", "str_map": {}}
{"src": ["save", "xlsxwriter", "file", "in", "_STR:0_", "path", "and", "assign", "to", "variable", "workbook"], "token": ["workbook", "=", "xlsxwriter", ".", "Workbook", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "workbook = xlsxwriter.Workbook(\" _STR:0_ \")", "decano_code": "workbook = xlsxwriter.Workbook(\" _STR:0_ \")", "raw_code": "workbook = xlsxwriter.Workbook('app/smth1/smth2/Expenses01.xlsx')", "str_map": {"app/smth1/smth2/Expenses01.xlsx": "_STR:0_"}}
{"src": ["save", "xlsxwriter", "file", "to", "_STR:0_", "path"], "token": ["workbook", "=", "xlsxwriter", ".", "Workbook", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "workbook = xlsxwriter.Workbook(\" _STR:0_ \")", "decano_code": "workbook = xlsxwriter.Workbook(\" _STR:0_ \")", "raw_code": "workbook = xlsxwriter.Workbook('C:/Users/Steven/Documents/demo.xlsx')", "str_map": {"C:/Users/Steven/Documents/demo.xlsx": "_STR:0_"}}
{"src": ["change", "legend", "size", "to", "_STR:0_", "in", "upper-left", "location"], "token": ["pyplot", ".", "legend", "(", "loc", "=", "2", ",", "fontsize", "=", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "pyplot.legend(loc=2, fontsize=\" _STR:0_ \")", "decano_code": "pyplot.legend(loc=2, fontsize=\" _STR:0_ \")", "raw_code": "pyplot.legend(loc=2, fontsize='x-small')", "str_map": {"x-small": "_STR:0_"}}
{"src": ["change", "legend", "font", "size", "with", "matplotlib.pyplot", "[", "matplotlib", ".", "pyplot", "]", "to", "6"], "token": ["plot", ".", "legend", "(", "loc", "=", "2", ",", "prop", "=", "{", "'size'", ":", "6", "}", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NAME", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "OP"], "cano_code": "plot.legend(loc=2, prop={'size': 6})", "decano_code": "plot.legend(loc=2, prop={'size': 6})", "raw_code": "plot.legend(loc=2, prop={'size': 6})", "str_map": {}}
{"src": ["split", "list", "l", "into", "n", "sized", "lists"], "token": ["[", "l", "[", "i", ":", "i", "+", "n", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "l", ")", ",", "n", ")", "]"], "type": ["OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "[l[i:i + n] for i in range(0, len(l), n)]", "decano_code": "[l[i:i + n] for i in range(0, len(l), n)]", "raw_code": "[l[i:i + n] for i in range(0, len(l), n)]", "str_map": {}}
{"src": ["split", "a", "list", "l", "into", "evenly", "sized", "chunks", "n"], "token": ["[", "l", "[", "i", ":", "i", "+", "n", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "l", ")", ",", "n", ")", "]"], "type": ["OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "[l[i:i + n] for i in range(0, len(l), n)]", "decano_code": "[l[i:i + n] for i in range(0, len(l), n)]", "raw_code": "[l[i:i + n] for i in range(0, len(l), n)]", "str_map": {}}
{"src": ["check", "if", "character", "_STR:0_", "exists", "in", "a", "dataframe", "df", "cell", "_STR:1_"], "token": ["df", "[", "\" _STR:1_ \"", "]", ".", "str", ".", "contains", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df[\" _STR:1_ \"].str.contains(\" _STR:0_ \")", "decano_code": "df[\" _STR:1_ \"].str.contains(\" _STR:0_ \")", "raw_code": "df['a'].str.contains('-')", "str_map": {"-": "_STR:0_", "a": "_STR:1_"}}
{"src": ["remove", "all", "non", "-word", ",", "-whitespace", ",", "or", "-apostrophe", "characters", "from", "string", "doesn't this mean it -technically- works", "?"], "token": ["re", ".", "sub", "(", "\"[^\\\\w' ]\"", ",", "''", ",", "\"doesn't this mean it -technically- works?\"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.sub(\"[^\\\\w' ]\", '', \"doesn't this mean it -technically- works?\")", "decano_code": "re.sub(\"[^\\\\w' ]\", '', \"doesn't this mean it -technically- works?\")", "raw_code": "re.sub(\"[^\\\\w' ]\", '', \"doesn't this mean it -technically- works?\")", "str_map": {}}
{"src": ["find", "all", "digits", "between", "two", "characters", "\\xab", "and", "\\xbb", "in", "a", "string", "text"], "token": ["print", "(", "re", ".", "findall", "(", "'\\\\d+'", ",", "'\\n'", ".", "join", "(", "re", ".", "findall", "(", "'\\xab([\\\\s\\\\S]*?)\\xbb'", ",", "text", ")", ")", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "print(re.findall('\\\\d+', '\\n'.join(re.findall('\\xab([\\\\s\\\\S]*?)\\xbb', text))))", "decano_code": "print(re.findall('\\\\d+', '\\n'.join(re.findall('\\xab([\\\\s\\\\S]*?)\\xbb', text))))", "raw_code": "print(re.findall('\\\\d+', '\\n'.join(re.findall('\\xab([\\\\s\\\\S]*?)\\xbb', text))))", "str_map": {}}
{"src": ["plot", "data", "of", "column", "_STR:0_", "versus", "column", "_STR:1_", "of", "dataframe", "monthly_mean", "after", "resetting", "its", "index"], "token": ["monthly_mean", ".", "reset_index", "(", ")", ".", "plot", "(", "x", "=", "\" _STR:0_ \"", ",", "y", "=", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "monthly_mean.reset_index().plot(x=\" _STR:0_ \", y=\" _STR:1_ \")", "decano_code": "monthly_mean.reset_index().plot(x=\" _STR:0_ \", y=\" _STR:1_ \")", "raw_code": "monthly_mean.reset_index().plot(x='index', y='A')", "str_map": {"index": "_STR:0_", "A": "_STR:1_"}}
{"src": ["get", "the", "output", "of", "a", "subprocess", "command", "echo \"foo", "\"", "in", "command", "line"], "token": ["subprocess", ".", "check_output", "(", "'echo \"foo\"'", ",", "shell", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "subprocess.check_output('echo \"foo\"', shell=True)", "decano_code": "subprocess.check_output('echo \"foo\"', shell=True)", "raw_code": "subprocess.check_output('echo \"foo\"', shell=True)", "str_map": {}}
{"src": ["encode", "each", "value", "to", "_STR:0_", "in", "the", "list", "EmployeeList"], "token": ["[", "x", ".", "encode", "(", "\" _STR:0_ \"", ")", "for", "x", "in", "EmployeeList", "]"], "type": ["OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[x.encode(\" _STR:0_ \") for x in EmployeeList]", "decano_code": "[x.encode(\" _STR:0_ \") for x in EmployeeList]", "raw_code": "[x.encode('UTF8') for x in EmployeeList]", "str_map": {"UTF8": "_STR:0_"}}
{"src": ["combine", "two", "columns", "foo", "and", "bar", "in", "a", "pandas", "data", "frame"], "token": ["pandas", ".", "concat", "(", "[", "df", "[", "'foo'", "]", ".", "dropna", "(", ")", ",", "df", "[", "'bar'", "]", ".", "dropna", "(", ")", "]", ")", ".", "reindex_like", "(", "df", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "pandas.concat([df['foo'].dropna(), df['bar'].dropna()]).reindex_like(df)", "decano_code": "pandas.concat([df['foo'].dropna(), df['bar'].dropna()]).reindex_like(df)", "raw_code": "pandas.concat([df['foo'].dropna(), df['bar'].dropna()]).reindex_like(df)", "str_map": {}}
{"src": ["generate", "a", "list", "of", "consecutive", "integers", "from", "0", "to", "8"], "token": ["list", "(", "range", "(", "9", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NUMBER", "OP", "OP"], "cano_code": "list(range(9))", "decano_code": "list(range(9))", "raw_code": "list(range(9))", "str_map": {}}
{"src": ["convert", "list", "myintegers", "into", "a", "unicode", "string"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "chr", "(", "i", ")", "for", "i", "in", "myintegers", ")"], "type": ["STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "\"\"\"\"\"\".join(chr(i) for i in myintegers)", "decano_code": "\"\"\"\"\"\".join(chr(i) for i in myintegers)", "raw_code": "\"\"\"\"\"\".join(chr(i) for i in myintegers)", "str_map": {}}
{"src": ["inherit", "from", "class", "executive"], "token": ["super", "(", "Executive", ",", "self", ")", ".", "__init__", "(", "*", "args", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP", "NAME", "OP"], "cano_code": "super(Executive, self).__init__(*args)", "decano_code": "super(Executive, self).__init__(*args)", "raw_code": "super(Executive, self).__init__(*args)", "str_map": {}}
{"src": ["remove", "the", "string", "value", "item", "from", "a", "list", "of", "strings", "my_sequence"], "token": ["[", "item", "for", "item", "in", "my_sequence", "if", "item", "!=", "'item'", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "STRING", "OP"], "cano_code": "[item for item in my_sequence if item != 'item']", "decano_code": "[item for item in my_sequence if item != 'item']", "raw_code": "[item for item in my_sequence if item != 'item']", "str_map": {}}
{"src": ["randomly", "select", "an", "item", "from", "list", "foo"], "token": ["random", ".", "choice", "(", "foo", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "random.choice(foo)", "decano_code": "random.choice(foo)", "raw_code": "random.choice(foo)", "str_map": {}}
{"src": ["check", "if", "all", "of", "the", "following", "items", "in", "list", "['a', 'b'", "]", "are", "in", "a", "list", "['a', 'b', 'c'", "]"], "token": ["set", "(", "[", "'a'", ",", "'b'", "]", ")", ".", "issubset", "(", "[", "'a'", ",", "'b'", ",", "'c'", "]", ")"], "type": ["KEYWORD", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "set(['a', 'b']).issubset(['a', 'b', 'c'])", "decano_code": "set(['a', 'b']).issubset(['a', 'b', 'c'])", "raw_code": "set(['a', 'b']).issubset(['a', 'b', 'c'])", "str_map": {}}
{"src": ["check", "if", "all", "the", "items", "in", "a", "list", "['a', 'b'", "]", "exists", "in", "another", "list", "l"], "token": ["set", "(", "[", "'a'", ",", "'b'", "]", ")", ".", "issubset", "(", "set", "(", "l", ")", ")"], "type": ["KEYWORD", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "set(['a', 'b']).issubset(set(l))", "decano_code": "set(['a', 'b']).issubset(set(l))", "raw_code": "set(['a', 'b']).issubset(set(l))", "str_map": {}}
{"src": ["set", "the", "stdin", "of", "the", "process", "_STR:0_", "to", "be", "b'one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n", "'"], "token": ["p", "=", "Popen", "(", "[", "'grep'", ",", "'f'", "]", ",", "stdout", "=", "PIPE", ",", "stdin", "=", "PIPE", ",", "stderr", "=", "STDOUT", ")", "\n", "grep_stdout", "=", "p", ".", "communicate", "(", "input", "=", "'one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n'", ")", "[", "0", "]"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NEWLINE", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "OP", "NUMBER", "OP"], "cano_code": "p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)\ngrep_stdout = p.communicate(input='one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]", "decano_code": "p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)\ngrep_stdout = p.communicate(input='one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]", "raw_code": "p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)\ngrep_stdout = p.communicate(input='one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')[0]", "str_map": {"grep f": "_STR:0_"}}
{"src": ["set", "the", "stdin", "of", "the", "process", "_STR:0_", "to", "be", "_STR:1_"], "token": ["p", "=", "subprocess", ".", "Popen", "(", "[", "'grep'", ",", "'f'", "]", ",", "stdout", "=", "subprocess", ".", "PIPE", ",", "stdin", "=", "subprocess", ".", "PIPE", ")", "\n", "p", ".", "stdin", ".", "write", "(", "\" _STR:1_ \"", ")", "\n", "p", ".", "communicate", "(", ")", "[", "0", "]", "\n", "p", ".", "stdin", ".", "close", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NEWLINE", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NEWLINE", "NAME", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP", "NEWLINE", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "p = subprocess.Popen(['grep', 'f'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)\np.stdin.write(\" _STR:1_ \")\np.communicate()[0]\np.stdin.close()", "decano_code": "p = subprocess.Popen(['grep', 'f'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)\np.stdin.write(\" _STR:1_ \")\np.communicate()[0]\np.stdin.close()", "raw_code": "p = subprocess.Popen(['grep', 'f'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)\np.stdin.write('one\\ntwo\\nthree\\nfour\\nfive\\nsix\\n')\np.communicate()[0]\np.stdin.close()", "str_map": {"grep f": "_STR:0_", "one\ntwo\nthree\nfour\nfive\nsix\n": "_STR:1_"}}
{"src": ["to", "convert", "a", "list", "of", "tuples", "list_of_tuples", "into", "list", "of", "lists"], "token": ["[", "list", "(", "t", ")", "for", "t", "in", "zip", "(", "*", "list_of_tuples", ")", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "[list(t) for t in zip(*list_of_tuples)]", "decano_code": "[list(t) for t in zip(*list_of_tuples)]", "raw_code": "[list(t) for t in zip(*list_of_tuples)]", "str_map": {}}
{"src": ["group", "a", "list", "list_of_tuples", "of", "tuples", "by", "values"], "token": ["zip", "(", "*", "list_of_tuples", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP"], "cano_code": "zip(*list_of_tuples)", "decano_code": "zip(*list_of_tuples)", "raw_code": "zip(*list_of_tuples)", "str_map": {}}
{"src": ["merge", "pandas", "dataframe", "x", "with", "columns", "_STR:0_", "and", "_STR:1_", "and", "dataframe", "y", "with", "column", "_STR:2_"], "token": ["pd", ".", "merge", "(", "y", ",", "x", ",", "on", "=", "'k'", ")", "[", "[", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ",", "\" _STR:2_ \"", "]", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "pd.merge(y, x, on='k')[[\" _STR:0_ \", \" _STR:1_ \", \" _STR:2_ \"]]", "decano_code": "pd.merge(y, x, on='k')[[\" _STR:0_ \", \" _STR:1_ \", \" _STR:2_ \"]]", "raw_code": "pd.merge(y, x, on='k')[['a', 'b', 'y']]", "str_map": {"a": "_STR:0_", "b": "_STR:1_", "y": "_STR:2_"}}
{"src": ["split", "string", "with", "comma", "(,", ")", "and", "remove", "whitespace", "from", "a", "string", "_STR:0_"], "token": ["[", "item", ".", "strip", "(", ")", "for", "item", "in", "my_string", ".", "split", "(", "','", ")", "]"], "type": ["OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "[item.strip() for item in my_string.split(',')]", "decano_code": "[item.strip() for item in my_string.split(',')]", "raw_code": "[item.strip() for item in my_string.split(',')]", "str_map": {"my_string": "_STR:0_"}}
{"src": ["get", "all", "object", "attributes", "of", "object", "obj"], "token": ["print", "(", "(", "obj", ".", "__dict__", ")", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "print((obj.__dict__))", "decano_code": "print((obj.__dict__))", "raw_code": "print((obj.__dict__))", "str_map": {}}
{"src": ["get", "all", "object", "attributes", "of", "an", "object"], "token": ["dir", "(", ")"], "type": ["KEYWORD", "OP", "OP"], "cano_code": "dir()", "decano_code": "dir()", "raw_code": "dir()", "str_map": {}}
{"src": ["get", "all", "object", "attributes", "of", "an", "object"], "token": ["dir", "(", ")"], "type": ["KEYWORD", "OP", "OP"], "cano_code": "dir()", "decano_code": "dir()", "raw_code": "dir()", "str_map": {}}
{"src": ["pygobject", "center", "window", "window"], "token": ["window", ".", "set_position", "(", "Gtk", ".", "WindowPosition", ".", "CENTER", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "window.set_position(Gtk.WindowPosition.CENTER)", "decano_code": "window.set_position(Gtk.WindowPosition.CENTER)", "raw_code": "window.set_position(Gtk.WindowPosition.CENTER)", "str_map": {}}
{"src": ["change", "the", "size", "of", "the", "sci", "notation", "to", "_STR:0_", "above", "the", "y", "axis", "in", "matplotlib", "plt"], "token": ["plt", ".", "rc", "(", "'font'", ",", "**", "{", "'size'", ":", "\" _STR:0_ \"", "}", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "plt.rc('font', **{'size': \" _STR:0_ \"})", "decano_code": "plt.rc('font', **{'size': \" _STR:0_ \"})", "raw_code": "plt.rc('font', **{'size': '30'})", "str_map": {"30": "_STR:0_"}}
{"src": ["check", "if", "datafram", "df", "has", "any", "NaN", "vlaues"], "token": ["df", ".", "isnull", "(", ")", ".", "values", ".", "any", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "OP", "OP"], "cano_code": "df.isnull().values.any()", "decano_code": "df.isnull().values.any()", "raw_code": "df.isnull().values.any()", "str_map": {}}
{"src": ["unpack", "the", "arguments", "out", "of", "list", "params", "to", "function", "some_func"], "token": ["some_func", "(", "*", "params", ")"], "type": ["NAME", "OP", "OP", "NAME", "OP"], "cano_code": "some_func(*params)", "decano_code": "some_func(*params)", "raw_code": "some_func(*params)", "str_map": {}}
{"src": ["decode", "encodeuricomponent", "in", "GAE"], "token": ["urllib", ".", "parse", ".", "unquote", "(", "h", ".", "path", ".", "encode", "(", "'utf-8'", ")", ")", ".", "decode", "(", "'utf-8'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "urllib.parse.unquote(h.path.encode('utf-8')).decode('utf-8')", "decano_code": "urllib.parse.unquote(h.path.encode('utf-8')).decode('utf-8')", "raw_code": "urllib.parse.unquote(h.path.encode('utf-8')).decode('utf-8')", "str_map": {}}
{"src": ["get", "proportion", "of", "rows", "in", "dataframe", "trace_df", "whose", "values", "for", "column", "ratio", "are", "greater", "than", "0"], "token": ["(", "trace_df", "[", "'ratio'", "]", ">", "0", ")", ".", "mean", "(", ")"], "type": ["OP", "NAME", "OP", "STRING", "OP", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "(trace_df['ratio'] > 0).mean()", "decano_code": "(trace_df['ratio'] > 0).mean()", "raw_code": "(trace_df['ratio'] > 0).mean()", "str_map": {}}
{"src": ["convert", "a", "set", "of", "tuples", "queryresult", "to", "a", "string", "emaillist"], "token": ["emaillist", "=", "'\\n'", ".", "join", "(", "item", "[", "0", "]", "for", "item", "in", "queryresult", ")"], "type": ["NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "emaillist = '\\n'.join(item[0] for item in queryresult)", "decano_code": "emaillist = '\\n'.join(item[0] for item in queryresult)", "raw_code": "emaillist = '\\n'.join(item[0] for item in queryresult)", "str_map": {}}
{"src": ["convert", "a", "set", "of", "tuples", "queryresult", "to", "a", "list", "of", "strings"], "token": ["[", "item", "[", "0", "]", "for", "item", "in", "queryresult", "]"], "type": ["OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[item[0] for item in queryresult]", "decano_code": "[item[0] for item in queryresult]", "raw_code": "[item[0] for item in queryresult]", "str_map": {}}
{"src": ["convert", "a", "list", "of", "tuples", "queryresult", "to", "a", "string", "from", "the", "first", "indexes", "."], "token": ["emaillist", "=", "'\\n'", ".", "join", "(", "[", "item", "[", "0", "]", "for", "item", "in", "queryresult", "]", ")"], "type": ["NAME", "OP", "STRING", "OP", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "emaillist = '\\n'.join([item[0] for item in queryresult])", "decano_code": "emaillist = '\\n'.join([item[0] for item in queryresult])", "raw_code": "emaillist = '\\n'.join([item[0] for item in queryresult])", "str_map": {}}
{"src": ["get", "the", "widget", "which", "has", "currently", "the", "focus", "in", "tkinter", "instance", "window2"], "token": ["print", "(", "(", "'focus object class:'", ",", "window2", ".", "focus_get", "(", ")", ".", "__class__", ")", ")"], "type": ["KEYWORD", "OP", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "print(('focus object class:', window2.focus_get().__class__))", "decano_code": "print(('focus object class:', window2.focus_get().__class__))", "raw_code": "print(('focus object class:', window2.focus_get().__class__))", "str_map": {}}
{"src": ["initialize", "a", "list", "a", "with", "10000", "items", "and", "each", "item", "'", "s", "value", "0"], "token": ["a", "=", "[", "0", "]", "*", "10000"], "type": ["NAME", "OP", "OP", "NUMBER", "OP", "OP", "NUMBER"], "cano_code": "a = [0] * 10000", "decano_code": "a = [0] * 10000", "raw_code": "a = [0] * 10000", "str_map": {}}
{"src": ["keep", "only", "unique", "words", "in", "list", "of", "words", "words", "and", "join", "into", "string"], "token": ["print", "(", "' '", ".", "join", "(", "sorted", "(", "set", "(", "words", ")", ",", "key", "=", "words", ".", "index", ")", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "print(' '.join(sorted(set(words), key=words.index)))", "decano_code": "print(' '.join(sorted(set(words), key=words.index)))", "raw_code": "print(' '.join(sorted(set(words), key=words.index)))", "str_map": {}}
{"src": ["generate", "6", "random", "numbers", "between", "1", "and", "50"], "token": ["random", ".", "sample", "(", "range", "(", "1", ",", "50", ")", ",", "6", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP"], "cano_code": "random.sample(range(1, 50), 6)", "decano_code": "random.sample(range(1, 50), 6)", "raw_code": "random.sample(range(1, 50), 6)", "str_map": {}}
{"src": ["generate", "six", "unique", "random", "numbers", "in", "the", "range", "of", "1", "to", "49", "."], "token": ["random", ".", "sample", "(", "range", "(", "1", ",", "50", ")", ",", "6", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP"], "cano_code": "random.sample(range(1, 50), 6)", "decano_code": "random.sample(range(1, 50), 6)", "raw_code": "random.sample(range(1, 50), 6)", "str_map": {}}
{"src": ["lowercase", "keys", "and", "values", "in", "dictionary", "{'My Key': 'My Value'", "}"], "token": ["{", "k", ".", "lower", "(", ")", ":", "v", ".", "lower", "(", ")", "for", "k", ",", "v", "in", "list", "(", "{", "'My Key'", ":", "'My Value'", "}", ".", "items", "(", ")", ")", "}"], "type": ["OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "{k.lower(): v.lower() for k, v in list({'My Key': 'My Value'}.items())}", "decano_code": "{k.lower(): v.lower() for k, v in list({'My Key': 'My Value'}.items())}", "raw_code": "{k.lower(): v.lower() for k, v in list({'My Key': 'My Value'}.items())}", "str_map": {}}
{"src": ["lowercase", "all", "keys", "and", "values", "in", "dictionary", "{'My Key': 'My Value'", "}"], "token": ["dict", "(", "(", "k", ".", "lower", "(", ")", ",", "v", ")", "for", "k", ",", "v", "in", "{", "'My Key'", ":", "'My Value'", "}", ".", "items", "(", ")", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "dict((k.lower(), v) for k, v in {'My Key': 'My Value'}.items())", "decano_code": "dict((k.lower(), v) for k, v in {'My Key': 'My Value'}.items())", "raw_code": "dict((k.lower(), v) for k, v in {'My Key': 'My Value'}.items())", "str_map": {}}
{"src": ["convert", "each", "key,value", "pair", "in", "a", "dictionary", "{'My Key': 'My Value'", "}", "to", "lowercase"], "token": ["dict", "(", "(", "k", ".", "lower", "(", ")", ",", "v", ".", "lower", "(", ")", ")", "for", "k", ",", "v", "in", "{", "'My Key'", ":", "'My Value'", "}", ".", "items", "(", ")", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "dict((k.lower(), v.lower()) for k, v in {'My Key': 'My Value'}.items())", "decano_code": "dict((k.lower(), v.lower()) for k, v in {'My Key': 'My Value'}.items())", "raw_code": "dict((k.lower(), v.lower()) for k, v in {'My Key': 'My Value'}.items())", "str_map": {}}
{"src": ["sorting", "the", "lists", "in", "list", "of", "lists", "data"], "token": ["[", "sorted", "(", "item", ")", "for", "item", "in", "data", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[sorted(item) for item in data]", "decano_code": "[sorted(item) for item in data]", "raw_code": "[sorted(item) for item in data]", "str_map": {}}
{"src": ["SQLite", "get", "a", "list", "of", "column", "names", "from", "cursor", "object", "cursor"], "token": ["names", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", "[", "0", "]", ",", "cursor", ".", "description", ")", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "names = list(map(lambda x: x[0], cursor.description))", "decano_code": "names = list(map(lambda x: x[0], cursor.description))", "raw_code": "names = list(map(lambda x: x[0], cursor.description))", "str_map": {}}
{"src": ["get", "the", "absolute", "path", "of", "a", "running", "python", "script"], "token": ["os", ".", "path", ".", "abspath", "(", "__file__", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "os.path.abspath(__file__)", "decano_code": "os.path.abspath(__file__)", "raw_code": "os.path.abspath(__file__)", "str_map": {}}
{"src": ["sort", "2d", "array", "matrix", "by", "row", "with", "index", "1"], "token": ["sorted", "(", "matrix", ",", "key", "=", "itemgetter", "(", "1", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "sorted(matrix, key=itemgetter(1))", "decano_code": "sorted(matrix, key=itemgetter(1))", "raw_code": "sorted(matrix, key=itemgetter(1))", "str_map": {}}
{"src": ["get", "all", "indexes", "of", "a", "letter", "e", "from", "a", "string", "word"], "token": ["[", "index", "for", "index", ",", "letter", "in", "enumerate", "(", "word", ")", "if", "letter", "==", "'e'", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "STRING", "OP"], "cano_code": "[index for index, letter in enumerate(word) if letter == 'e']", "decano_code": "[index for index, letter in enumerate(word) if letter == 'e']", "raw_code": "[index for index, letter in enumerate(word) if letter == 'e']", "str_map": {}}
{"src": ["decode", "utf-8", "code", "x", "into", "a", "raw", "unicode", "literal"], "token": ["print", "(", "str", "(", "x", ")", ".", "decode", "(", "'raw_unicode_escape'", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "print(str(x).decode('raw_unicode_escape'))", "decano_code": "print(str(x).decode('raw_unicode_escape'))", "raw_code": "print(str(x).decode('raw_unicode_escape'))", "str_map": {}}
{"src": ["split", "string", "_STR:0_", "into", "a", "list", "of", "characters"], "token": ["re", ".", "findall", "(", "'\\\\w'", ",", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.findall('\\\\w', \" _STR:0_ \")", "decano_code": "re.findall('\\\\w', \" _STR:0_ \")", "raw_code": "re.findall('\\\\w', 'abcdefg')", "str_map": {"abcdefg": "_STR:0_"}}
{"src": ["check", "whether", "a", "file", "fname", "exists"], "token": ["os", ".", "path", ".", "isfile", "(", "fname", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "os.path.isfile(fname)", "decano_code": "os.path.isfile(fname)", "raw_code": "os.path.isfile(fname)", "str_map": {}}
{"src": ["check", "whether", "file", "_STR:0_", "exists"], "token": ["my_file", "=", "Path", "(", "\" _STR:0_ \"", ")", "\n", "if", "my_file", ".", "is_file", "(", ")", ":", "\n", "    ", "pass", ""], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NEWLINE", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "my_file = Path(\" _STR:0_ \")\nif my_file.is_file():\n    pass", "decano_code": "my_file = Path(\" _STR:0_ \")\nif my_file.is_file():\n    pass", "raw_code": "my_file = Path('/path/to/file')\nif my_file.is_file():\n    pass", "str_map": {"/path/to/file": "_STR:0_"}}
{"src": ["check", "whether", "file", "file_path", "exists"], "token": ["os", ".", "path", ".", "exists", "(", "file_path", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "os.path.exists(file_path)", "decano_code": "os.path.exists(file_path)", "raw_code": "os.path.exists(file_path)", "str_map": {}}
{"src": ["check", "whether", "a", "file", "_STR:0_", "exists"], "token": ["print", "(", "os", ".", "path", ".", "isfile", "(", "\" _STR:0_ \"", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "print(os.path.isfile(\" _STR:0_ \"))", "decano_code": "print(os.path.isfile(\" _STR:0_ \"))", "raw_code": "print(os.path.isfile('/etc/password.txt'))", "str_map": {"/etc/password.txt": "_STR:0_"}}
{"src": ["check", "whether", "a", "file", "_STR:0_", "exists"], "token": ["print", "(", "os", ".", "path", ".", "isfile", "(", "\" _STR:0_ \"", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "print(os.path.isfile(\" _STR:0_ \"))", "decano_code": "print(os.path.isfile(\" _STR:0_ \"))", "raw_code": "print(os.path.isfile('/etc'))", "str_map": {"/etc": "_STR:0_"}}
{"src": ["check", "whether", "a", "path", "_STR:0_", "exists"], "token": ["print", "(", "os", ".", "path", ".", "exists", "(", "\" _STR:0_ \"", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "print(os.path.exists(\" _STR:0_ \"))", "decano_code": "print(os.path.exists(\" _STR:0_ \"))", "raw_code": "print(os.path.exists('/does/not/exist'))", "str_map": {"/does/not/exist": "_STR:0_"}}
{"src": ["check", "whether", "a", "file", "_STR:0_", "exists"], "token": ["print", "(", "os", ".", "path", ".", "isfile", "(", "\" _STR:0_ \"", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "print(os.path.isfile(\" _STR:0_ \"))", "decano_code": "print(os.path.isfile(\" _STR:0_ \"))", "raw_code": "print(os.path.isfile('/does/not/exist'))", "str_map": {"/does/not/exist": "_STR:0_"}}
{"src": ["check", "whether", "a", "path", "_STR:0_", "exists"], "token": ["print", "(", "os", ".", "path", ".", "exists", "(", "\" _STR:0_ \"", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "print(os.path.exists(\" _STR:0_ \"))", "decano_code": "print(os.path.exists(\" _STR:0_ \"))", "raw_code": "print(os.path.exists('/etc'))", "str_map": {"/etc": "_STR:0_"}}
{"src": ["check", "whether", "a", "path", "_STR:0_", "exists"], "token": ["print", "(", "os", ".", "path", ".", "exists", "(", "\" _STR:0_ \"", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "print(os.path.exists(\" _STR:0_ \"))", "decano_code": "print(os.path.exists(\" _STR:0_ \"))", "raw_code": "print(os.path.exists('/etc/password.txt'))", "str_map": {"/etc/password.txt": "_STR:0_"}}
{"src": ["split", "string", "_STR:0_", "on", "delimiters", "_STR:1_", "and", "_STR:2_"], "token": ["\" _STR:0_ \"", ".", "replace", "(", "\" _STR:1_ \"", ",", "' '", ")", ".", "replace", "(", "\" _STR:2_ \"", ",", "' '", ")", ".", "split", "(", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "\" _STR:0_ \".replace(\" _STR:1_ \", ' ').replace(\" _STR:2_ \", ' ').split()", "decano_code": "\" _STR:0_ \".replace(\" _STR:1_ \", ' ').replace(\" _STR:2_ \", ' ').split()", "raw_code": "\"\"\"a;bcd,ef g\"\"\".replace(';', ' ').replace(',', ' ').split()", "str_map": {"a;bcd,ef g": "_STR:0_", ";": "_STR:1_", ",": "_STR:2_"}}
{"src": ["get", "a", "list", "each", "value", "i", "in", "the", "implicit", "tuple", "range(3", ")"], "token": ["list", "(", "i", "for", "i", "in", "range", "(", "3", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "OP"], "cano_code": "list(i for i in range(3))", "decano_code": "list(i for i in range(3))", "raw_code": "list(i for i in range(3))", "str_map": {}}
{"src": ["add", "field", "names", "as", "headers", "in", "csv", "constructor", "writer"], "token": ["writer", ".", "writeheader", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "writer.writeheader()", "decano_code": "writer.writeheader()", "raw_code": "writer.writeheader()", "str_map": {}}
{"src": ["flatten", "a", "tuple", "l"], "token": ["[", "(", "a", ",", "b", ",", "c", ")", "for", "a", ",", "(", "b", ",", "c", ")", "in", "l", "]"], "type": ["OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP"], "cano_code": "[(a, b, c) for a, (b, c) in l]", "decano_code": "[(a, b, c) for a, (b, c) in l]", "raw_code": "[(a, b, c) for a, (b, c) in l]", "str_map": {}}
{"src": ["convert", "3652458", "to", "string", "represent", "a", "32bit", "hex", "number"], "token": ["\"\"\"0x{0:08X}\"\"\"", ".", "format", "(", "3652458", ")"], "type": ["STRING", "OP", "KEYWORD", "OP", "NUMBER", "OP"], "cano_code": "\"\"\"0x{0:08X}\"\"\".format(3652458)", "decano_code": "\"\"\"0x{0:08X}\"\"\".format(3652458)", "raw_code": "\"\"\"0x{0:08X}\"\"\".format(3652458)", "str_map": {}}
{"src": ["convert", "a", "python", "dictionary", "d", "to", "a", "list", "of", "tuples"], "token": ["[", "(", "v", ",", "k", ")", "for", "k", ",", "v", "in", "list", "(", "d", ".", "items", "(", ")", ")", "]"], "type": ["OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "[(v, k) for k, v in list(d.items())]", "decano_code": "[(v, k) for k, v in list(d.items())]", "raw_code": "[(v, k) for k, v in list(d.items())]", "str_map": {}}
{"src": ["convert", "dictionary", "of", "pairs", "d", "to", "a", "list", "of", "tuples"], "token": ["[", "(", "v", ",", "k", ")", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", "]"], "type": ["OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "[(v, k) for k, v in d.items()]", "decano_code": "[(v, k) for k, v in d.items()]", "raw_code": "[(v, k) for k, v in d.items()]", "str_map": {}}
{"src": ["convert", "python", "2", "dictionary", "a", "to", "a", "list", "of", "tuples", "where", "the", "value", "is", "the", "first", "tuple", "element", "and", "the", "key", "is", "the", "second", "tuple", "element"], "token": ["[", "(", "v", ",", "k", ")", "for", "k", ",", "v", "in", "a", ".", "items", "(", ")", "]"], "type": ["OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "[(v, k) for k, v in a.items()]", "decano_code": "[(v, k) for k, v in a.items()]", "raw_code": "[(v, k) for k, v in a.items()]", "str_map": {}}
{"src": ["convert", "a", "python", "dictionary", "_STR:0_", "to", "a", "list", "of", "tuples"], "token": ["[", "(", "k", ",", "v", ")", "for", "k", ",", "v", "in", "a", ".", "items", "(", ")", "]"], "type": ["OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "[(k, v) for k, v in a.items()]", "decano_code": "[(k, v) for k, v in a.items()]", "raw_code": "[(k, v) for k, v in a.items()]", "str_map": {"a": "_STR:0_"}}
{"src": ["convert", "a", "list", "of", "hex", "byte", "strings", "['BB', 'A7', 'F6', '9E'", "]", "to", "a", "list", "of", "hex", "integers"], "token": ["[", "int", "(", "x", ",", "16", ")", "for", "x", "in", "[", "'BB'", ",", "'A7'", ",", "'F6'", ",", "'9E'", "]", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "[int(x, 16) for x in ['BB', 'A7', 'F6', '9E']]", "decano_code": "[int(x, 16) for x in ['BB', 'A7', 'F6', '9E']]", "raw_code": "[int(x, 16) for x in ['BB', 'A7', 'F6', '9E']]", "str_map": {}}
{"src": ["convert", "the", "elements", "of", "list", "l", "from", "hex", "byte", "strings", "to", "hex", "integers"], "token": ["[", "int", "(", "x", ",", "16", ")", "for", "x", "in", "L", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[int(x, 16) for x in L]", "decano_code": "[int(x, 16) for x in L]", "raw_code": "[int(x, 16) for x in L]", "str_map": {}}
{"src": ["assign", "values", "to", "two", "variables", ",", "var1", "and", "var2", "from", "user", "input", "response", "to", "'Enter two numbers here: ", "split", "on", "whitespace"], "token": ["var1", ",", "var2", "=", "input", "(", "'Enter two numbers here: '", ")", ".", "split", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "var1, var2 = input('Enter two numbers here: ').split()", "decano_code": "var1, var2 = input('Enter two numbers here: ').split()", "raw_code": "var1, var2 = input('Enter two numbers here: ').split()", "str_map": {}}
{"src": ["filter", "a", "json", "from", "a", "key-value", "pair", "as", "{'fixed_key_1': 'foo2'", "}", "in", "django"], "token": ["Test", ".", "objects", ".", "filter", "(", "actions__contains", "=", "[", "{", "'fixed_key_1'", ":", "'foo2'", "}", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "Test.objects.filter(actions__contains=[{'fixed_key_1': 'foo2'}])", "decano_code": "Test.objects.filter(actions__contains=[{'fixed_key_1': 'foo2'}])", "raw_code": "Test.objects.filter(actions__contains=[{'fixed_key_1': 'foo2'}])", "str_map": {}}
{"src": ["create", "a", "list", "containing", "a", "four", "elements", "long", "tuples", "of", "permutations", "of", "binary", "values"], "token": ["itertools", ".", "product", "(", "list", "(", "range", "(", "2", ")", ")", ",", "repeat", "=", "4", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "itertools.product(list(range(2)), repeat=4)", "decano_code": "itertools.product(list(range(2)), repeat=4)", "raw_code": "itertools.product(list(range(2)), repeat=4)", "str_map": {}}
{"src": ["get", "yesterday", "'", "s", "date", "as", "a", "string", "in", "YYYY-MM-DD", "format", "using", "timedelta"], "token": ["(", "datetime", ".", "now", "(", ")", "-", "timedelta", "(", "1", ")", ")", ".", "strftime", "(", "'%Y-%m-%d'", ")"], "type": ["OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "(datetime.now() - timedelta(1)).strftime('%Y-%m-%d')", "decano_code": "(datetime.now() - timedelta(1)).strftime('%Y-%m-%d')", "raw_code": "(datetime.now() - timedelta(1)).strftime('%Y-%m-%d')", "str_map": {}}
{"src": ["get", "the", "dot", "product", "of", "matrix", "[1,0,0,1,0,0", "]", "and", "matrix", "[[0,1],[1,1],[1,0],[1,0],[1,1],[0,1]", "]"], "token": ["np", ".", "dot", "(", "[", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", "]", ",", "[", "[", "0", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "1", ",", "0", "]", ",", "[", "1", ",", "0", "]", ",", "[", "1", ",", "1", "]", ",", "[", "0", ",", "1", "]", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])", "decano_code": "np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])", "raw_code": "np.dot([1, 0, 0, 1, 0, 0], [[0, 1], [1, 1], [1, 0], [1, 0], [1, 1], [0, 1]])", "str_map": {}}
{"src": ["convert", "date", "strings", "in", "pandas", "dataframe", "column`df['date']", "`", "to", "pandas", "timestamps", "using", "the", "format", "_STR:0_"], "token": ["df", "[", "'date'", "]", "=", "pd", ".", "to_datetime", "(", "df", "[", "'date'", "]", ",", "format", "=", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "KEYWORD", "OP", "STRING", "OP"], "cano_code": "df['date'] = pd.to_datetime(df['date'], format=\" _STR:0_ \")", "decano_code": "df['date'] = pd.to_datetime(df['date'], format=\" _STR:0_ \")", "raw_code": "df['date'] = pd.to_datetime(df['date'], format='%d%b%Y')", "str_map": {"%d%b%Y": "_STR:0_"}}
{"src": ["importing", "file", "file", "from", "folder", "_STR:0_"], "token": ["sys", ".", "path", ".", "insert", "(", "0", ",", "\" _STR:0_ \"", ")", "\n", "import", "file"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "STRING", "OP", "NEWLINE", "KEYWORD", "NAME"], "cano_code": "sys.path.insert(0, \" _STR:0_ \")\nimport file", "decano_code": "sys.path.insert(0, \" _STR:0_ \")\nimport file", "raw_code": "sys.path.insert(0, '/path/to/application/app/folder')\nimport file", "str_map": {"/path/to/application/app/folder": "_STR:0_"}}
{"src": ["do", "a", "left", "merge", "of", "dataframes", "x", "and", "y", "on", "the", "column", "state", "and", "sort", "by", "index"], "token": ["x", ".", "reset_index", "(", ")", ".", "merge", "(", "y", ",", "how", "=", "'left'", ",", "on", "=", "'state'", ",", "sort", "=", "False", ")", ".", "sort", "(", "'index'", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "x.reset_index().merge(y, how='left', on='state', sort=False).sort('index')", "decano_code": "x.reset_index().merge(y, how='left', on='state', sort=False).sort('index')", "raw_code": "x.reset_index().merge(y, how='left', on='state', sort=False).sort('index')", "str_map": {}}
{"src": ["create", "a", "default", "empty", "json", "object", "if", "no", "json", "is", "available", "in", "request", "parameter", "mydata"], "token": ["json", ".", "loads", "(", "request", ".", "POST", ".", "get", "(", "'mydata'", ",", "'{}'", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "json.loads(request.POST.get('mydata', '{}'))", "decano_code": "json.loads(request.POST.get('mydata', '{}'))", "raw_code": "json.loads(request.POST.get('mydata', '{}'))", "str_map": {}}
{"src": ["get", "a", "list", "of", "tuples", "of", "every", "three", "consecutive", "items", "in", "list", "[1, 2, 3, 4, 5, 6, 7, 8, 9", "]"], "token": ["list", "(", "zip", "(", "*", "(", "(", "iter", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", "]", ")", ",", ")", "*", "3", ")", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "OP", "OP", "OP", "KEYWORD", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "list(zip(*((iter([1, 2, 3, 4, 5, 6, 7, 8, 9]),) * 3)))", "decano_code": "list(zip(*((iter([1, 2, 3, 4, 5, 6, 7, 8, 9]),) * 3)))", "raw_code": "list(zip(*((iter([1, 2, 3, 4, 5, 6, 7, 8, 9]),) * 3)))", "str_map": {}}
{"src": ["slice", "list", "[1, 2, 3, 4, 5, 6, 7", "]", "into", "lists", "of", "two", "elements", "each"], "token": ["list", "(", "grouper", "(", "2", ",", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", "]", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "list(grouper(2, [1, 2, 3, 4, 5, 6, 7]))", "decano_code": "list(grouper(2, [1, 2, 3, 4, 5, 6, 7]))", "raw_code": "list(grouper(2, [1, 2, 3, 4, 5, 6, 7]))", "str_map": {}}
{"src": ["slicing", "a", "list", "into", "a", "list", "of", "sub-lists"], "token": ["[", "input", "[", "i", ":", "i", "+", "n", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "input", ")", ",", "n", ")", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "[input[i:i + n] for i in range(0, len(input), n)]", "decano_code": "[input[i:i + n] for i in range(0, len(input), n)]", "raw_code": "[input[i:i + n] for i in range(0, len(input), n)]", "str_map": {}}
{"src": ["sort", "list", "keys", "based", "on", "its", "elements", "'", "dot-seperated", "numbers"], "token": ["keys", ".", "sort", "(", "key", "=", "lambda", "x", ":", "map", "(", "int", ",", "x", ".", "split", "(", "'.'", ")", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "keys.sort(key=lambda x: map(int, x.split('.')))", "decano_code": "keys.sort(key=lambda x: map(int, x.split('.')))", "raw_code": "keys.sort(key=lambda x: map(int, x.split('.')))", "str_map": {}}
{"src": ["sort", "a", "list", "of", "integers", "keys", "where", "each", "value", "is", "in", "string", "format"], "token": ["keys", ".", "sort", "(", "key", "=", "lambda", "x", ":", "[", "int", "(", "y", ")", "for", "y", "in", "x", ".", "split", "(", "'.'", ")", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "keys.sort(key=lambda x: [int(y) for y in x.split('.')])", "decano_code": "keys.sort(key=lambda x: [int(y) for y in x.split('.')])", "raw_code": "keys.sort(key=lambda x: [int(y) for y in x.split('.')])", "str_map": {}}
{"src": ["convert", "a", "3d", "array", "img", "of", "dimensions", "4x2x3", "to", "a", "2d", "array", "of", "dimensions", "3x8"], "token": ["img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ".", "reshape", "(", "3", ",", "-", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP"], "cano_code": "img.transpose(2, 0, 1).reshape(3, -1)", "decano_code": "img.transpose(2, 0, 1).reshape(3, -1)", "raw_code": "img.transpose(2, 0, 1).reshape(3, -1)", "str_map": {}}
{"src": ["replacing", "_STR:0_", "and", "_STR:1_", "values", "in", "column", "_STR:2_", "of", "dataframe", "df", "with", "_STR:3_"], "token": ["df", "[", "\" _STR:2_ \"", "]", ".", "replace", "(", "[", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", "]", ",", "\" _STR:3_ \"", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "STRING", "OP"], "cano_code": "df[\" _STR:2_ \"].replace([\" _STR:0_ \", \" _STR:1_ \"], \" _STR:3_ \")", "decano_code": "df[\" _STR:2_ \"].replace([\" _STR:0_ \", \" _STR:1_ \"], \" _STR:3_ \")", "raw_code": "df['BrandName'].replace(['ABC', 'AB'], 'A')", "str_map": {"ABC": "_STR:0_", "AB": "_STR:1_", "BrandName": "_STR:2_", "A": "_STR:3_"}}
{"src": ["replace", "values", "['ABC', 'AB'", "]", "in", "a", "column", "_STR:0_", "of", "pandas", "dataframe", "df", "with", "another", "value", "_STR:1_"], "token": ["df", "[", "\" _STR:0_ \"", "]", "=", "df", "[", "\" _STR:0_ \"", "]", ".", "replace", "(", "[", "'ABC'", ",", "'AB'", "]", ",", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "STRING", "OP"], "cano_code": "df[\" _STR:0_ \"] = df[\" _STR:0_ \"].replace(['ABC', 'AB'], \" _STR:1_ \")", "decano_code": "df[\" _STR:0_ \"] = df[\" _STR:0_ \"].replace(['ABC', 'AB'], \" _STR:1_ \")", "raw_code": "df['BrandName'] = df['BrandName'].replace(['ABC', 'AB'], 'A')", "str_map": {"BrandName": "_STR:0_", "A": "_STR:1_"}}
{"src": ["subtract", "the", "mean", "of", "each", "row", "in", "dataframe", "df", "from", "the", "corresponding", "row", "'", "s", "elements"], "token": ["df", ".", "sub", "(", "df", ".", "mean", "(", "axis", "=", "1", ")", ",", "axis", "=", "0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "df.sub(df.mean(axis=1), axis=0)", "decano_code": "df.sub(df.mean(axis=1), axis=0)", "raw_code": "df.sub(df.mean(axis=1), axis=0)", "str_map": {}}
{"src": ["remove", "all", "non-alphabet", "chars", "from", "string", "s"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "[", "i", "for", "i", "in", "s", "if", "i", ".", "isalpha", "(", ")", "]", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "\"\"\"\"\"\".join([i for i in s if i.isalpha()])", "decano_code": "\"\"\"\"\"\".join([i for i in s if i.isalpha()])", "raw_code": "\"\"\"\"\"\".join([i for i in s if i.isalpha()])", "str_map": {}}
{"src": ["split", "a", "string", "s", "into", "integers"], "token": ["l", "=", "(", "int", "(", "x", ")", "for", "x", "in", "s", ".", "split", "(", ")", ")"], "type": ["NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "l = (int(x) for x in s.split())", "decano_code": "l = (int(x) for x in s.split())", "raw_code": "l = (int(x) for x in s.split())", "str_map": {}}
{"src": ["split", "a", "string", "42 0", "by", "white", "spaces", "."], "token": ["\"\"\"42 0\"\"\"", ".", "split", "(", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP"], "cano_code": "\"\"\"42 0\"\"\".split()", "decano_code": "\"\"\"42 0\"\"\".split()", "raw_code": "\"\"\"42 0\"\"\".split()", "str_map": {}}
{"src": ["how", "to", "split", "a", "string", "into", "integers", "in", "python", "?"], "token": ["map", "(", "int", ",", "'42 0'", ".", "split", "(", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "map(int, '42 0'.split())", "decano_code": "map(int, '42 0'.split())", "raw_code": "map(int, '42 0'.split())", "str_map": {}}
{"src": ["get", "indexes", "of", "all", "true", "boolean", "values", "from", "a", "list", "bool_list"], "token": ["[", "i", "for", "i", ",", "elem", "in", "enumerate", "(", "bool_list", ",", "1", ")", "if", "elem", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "OP"], "cano_code": "[i for i, elem in enumerate(bool_list, 1) if elem]", "decano_code": "[i for i, elem in enumerate(bool_list, 1) if elem]", "raw_code": "[i for i, elem in enumerate(bool_list, 1) if elem]", "str_map": {}}
{"src": ["group", "dataframe", "data", "entries", "by", "year", "value", "of", "the", "date", "in", "column", "_STR:0_"], "token": ["data", ".", "groupby", "(", "data", "[", "\" _STR:0_ \"", "]", ".", "map", "(", "lambda", "x", ":", "x", ".", "year", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "KEYWORD", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "data.groupby(data[\" _STR:0_ \"].map(lambda x: x.year))", "decano_code": "data.groupby(data[\" _STR:0_ \"].map(lambda x: x.year))", "raw_code": "data.groupby(data['date'].map(lambda x: x.year))", "str_map": {"date": "_STR:0_"}}
{"src": ["get", "the", "indices", "in", "array", "b", "of", "each", "element", "appearing", "in", "array", "a"], "token": ["np", ".", "in1d", "(", "b", ",", "a", ")", ".", "nonzero", "(", ")", "[", "0", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "np.in1d(b, a).nonzero()[0]", "decano_code": "np.in1d(b, a).nonzero()[0]", "raw_code": "np.in1d(b, a).nonzero()[0]", "str_map": {}}
{"src": ["display", "current", "time", "in", "readable", "format"], "token": ["time", ".", "strftime", "(", "'%l:%M%p %z on %b %d, %Y'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "time.strftime('%l:%M%p %z on %b %d, %Y')", "decano_code": "time.strftime('%l:%M%p %z on %b %d, %Y')", "raw_code": "time.strftime('%l:%M%p %z on %b %d, %Y')", "str_map": {}}
{"src": ["rotate", "x-axis", "text", "labels", "of", "plot", "ax", "45", "degrees"], "token": ["ax", ".", "set_xticklabels", "(", "ax", ".", "xaxis", ".", "get_majorticklabels", "(", ")", ",", "rotation", "=", "45", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)", "decano_code": "ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)", "raw_code": "ax.set_xticklabels(ax.xaxis.get_majorticklabels(), rotation=45)", "str_map": {}}
{"src": ["append", "array", "of", "strings", "['x', 'x', 'x'", "]", "into", "one", "string"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "[", "'x'", ",", "'x'", ",", "'x'", "]", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "\"\"\"\"\"\".join(['x', 'x', 'x'])", "decano_code": "\"\"\"\"\"\".join(['x', 'x', 'x'])", "raw_code": "\"\"\"\"\"\".join(['x', 'x', 'x'])", "str_map": {}}
{"src": ["retrieve", "all", "items", "in", "an", "numpy", "array", "_STR:0_", "except", "the", "item", "of", "the", "index", "1"], "token": ["x", "[", "(", "np", ".", "arange", "(", "x", ".", "shape", "[", "0", "]", ")", "!=", "1", ")", ",", ":", ",", ":", "]"], "type": ["NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "OP", "OP", "OP", "OP", "OP"], "cano_code": "x[(np.arange(x.shape[0]) != 1), :, :]", "decano_code": "x[(np.arange(x.shape[0]) != 1), :, :]", "raw_code": "x[(np.arange(x.shape[0]) != 1), :, :]", "str_map": {"x": "_STR:0_"}}
{"src": ["pull", "a", "value", "with", "key", "_STR:0_", "from", "a", "json", "object", "item"], "token": ["print", "(", "item", "[", "\" _STR:0_ \"", "]", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "print(item[\" _STR:0_ \"])", "decano_code": "print(item[\" _STR:0_ \"])", "raw_code": "print(item['name'])", "str_map": {"name": "_STR:0_"}}
{"src": ["read", "a", "file", "from", "redirected", "stdin", "and", "save", "to", "variable", "result"], "token": ["result", "=", "sys", ".", "stdin", ".", "read", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "result = sys.stdin.read()", "decano_code": "result = sys.stdin.read()", "raw_code": "result = sys.stdin.read()", "str_map": {}}
{"src": ["get", "all", "the", "texts", "without", "tags", "from", "beautiful", "soup", "object", "soup"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "soup", ".", "findAll", "(", "text", "=", "True", ")", ")"], "type": ["STRING", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "OP"], "cano_code": "\"\"\"\"\"\".join(soup.findAll(text=True))", "decano_code": "\"\"\"\"\"\".join(soup.findAll(text=True))", "raw_code": "\"\"\"\"\"\".join(soup.findAll(text=True))", "str_map": {}}
{"src": ["extract", "all", "rows", "from", "dataframe", "data", "where", "the", "value", "of", "column", "_STR:0_", "is", "true"], "token": ["data", "[", "data", "[", "\" _STR:0_ \"", "]", "==", "True", "]"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "KEYWORD", "OP"], "cano_code": "data[data[\" _STR:0_ \"] == True]", "decano_code": "data[data[\" _STR:0_ \"] == True]", "raw_code": "data[data['Value'] == True]", "str_map": {"Value": "_STR:0_"}}
{"src": ["removing", "duplicate", "characters", "from", "a", "string", "variable", "_STR:0_"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "set", "(", "foo", ")", ")"], "type": ["STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "\"\"\"\"\"\".join(set(foo))", "decano_code": "\"\"\"\"\"\".join(set(foo))", "raw_code": "\"\"\"\"\"\".join(set(foo))", "str_map": {"foo": "_STR:0_"}}
{"src": ["sort", "objects", "in", "model", "profile", "based", "on", "theirs", "reputation", "attribute"], "token": ["sorted", "(", "Profile", ".", "objects", ".", "all", "(", ")", ",", "key", "=", "lambda", "p", ":", "p", ".", "reputation", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "sorted(Profile.objects.all(), key=lambda p: p.reputation)", "decano_code": "sorted(Profile.objects.all(), key=lambda p: p.reputation)", "raw_code": "sorted(Profile.objects.all(), key=lambda p: p.reputation)", "str_map": {}}
{"src": ["flatten", "a", "dataframe", "df", "to", "a", "list"], "token": ["df", ".", "values", ".", "flatten", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "df.values.flatten()", "decano_code": "df.values.flatten()", "raw_code": "df.values.flatten()", "str_map": {}}
{"src": ["sort", "list", "users", "using", "values", "associated", "with", "key", "_STR:0_", "according", "to", "elements", "in", "list", "order"], "token": ["users", ".", "sort", "(", "key", "=", "lambda", "x", ":", "order", ".", "index", "(", "x", "[", "\" _STR:0_ \"", "]", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "users.sort(key=lambda x: order.index(x[\" _STR:0_ \"]))", "decano_code": "users.sort(key=lambda x: order.index(x[\" _STR:0_ \"]))", "raw_code": "users.sort(key=lambda x: order.index(x['id']))", "str_map": {"id": "_STR:0_"}}
{"src": ["sort", "a", "python", "list", "of", "dictionaries", "users", "by", "a", "given", "list", "order", "of", "ids", "_STR:0_", "with", "the", "desired", "order"], "token": ["users", ".", "sort", "(", "key", "=", "lambda", "x", ":", "order", ".", "index", "(", "x", "[", "\" _STR:0_ \"", "]", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "users.sort(key=lambda x: order.index(x[\" _STR:0_ \"]))", "decano_code": "users.sort(key=lambda x: order.index(x[\" _STR:0_ \"]))", "raw_code": "users.sort(key=lambda x: order.index(x['id']))", "str_map": {"id": "_STR:0_"}}
{"src": ["request", "URI", "_STR:0_", "and", "pass", "authorization", "token", "_STR:1_", "to", "the", "header"], "token": ["r", "=", "requests", ".", "get", "(", "\" _STR:0_ \"", ",", "headers", "=", "{", "'Authorization'", ":", "\" _STR:1_ \"", "}", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "r = requests.get(\" _STR:0_ \", headers={'Authorization': \" _STR:1_ \"})", "decano_code": "r = requests.get(\" _STR:0_ \", headers={'Authorization': \" _STR:1_ \"})", "raw_code": "r = requests.get('<MY_URI>', headers={'Authorization': 'TOK:<MY_TOKEN>'})", "str_map": {"<MY_URI>": "_STR:0_", "TOK:<MY_TOKEN>": "_STR:1_"}}
{"src": ["un-escape", "a", "backslash-escaped", "string", "in", "Hello,\\\\nworld", "!"], "token": ["print", "(", "'\"Hello,\\\\nworld!\"'", ".", "decode", "(", "'string_escape'", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "print('\"Hello,\\\\nworld!\"'.decode('string_escape'))", "decano_code": "print('\"Hello,\\\\nworld!\"'.decode('string_escape'))", "raw_code": "print('\"Hello,\\\\nworld!\"'.decode('string_escape'))", "str_map": {}}
{"src": ["match", "regex", "pattern", "_STR:0_", "on", "string", "_STR:1_", "with", "DOTALL", "enabled"], "token": ["re", ".", "findall", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ",", "re", ".", "DOTALL", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "re.findall(\" _STR:0_ \", \" _STR:1_ \", re.DOTALL)", "decano_code": "re.findall(\" _STR:0_ \", \" _STR:1_ \", re.DOTALL)", "raw_code": "re.findall('a*?bc*?', 'aabcc', re.DOTALL)", "str_map": {"a*?bc*?": "_STR:0_", "aabcc": "_STR:1_"}}
{"src": ["get", "second", "array", "column", "length", "of", "array", "a"], "token": ["a", ".", "shape", "[", "1", "]"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "a.shape[1]", "decano_code": "a.shape[1]", "raw_code": "a.shape[1]", "str_map": {}}
{"src": ["use", "operations", "like", "max/min", "within", "a", "row", "to", "a", "dataframe", "_STR:0_", "in", "pandas"], "token": ["d", ".", "apply", "(", "lambda", "row", ":", "min", "(", "[", "row", "[", "'A'", "]", ",", "row", "[", "'B'", "]", "]", ")", "-", "row", "[", "'C'", "]", ",", "axis", "=", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "KEYWORD", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "d.apply(lambda row: min([row['A'], row['B']]) - row['C'], axis=1)", "decano_code": "d.apply(lambda row: min([row['A'], row['B']]) - row['C'], axis=1)", "raw_code": "d.apply(lambda row: min([row['A'], row['B']]) - row['C'], axis=1)", "str_map": {"d": "_STR:0_"}}
{"src": ["count", "number", "of", "occurrences", "of", "a", "substring", "_STR:0_", "in", "a", "string", "_STR:1_"], "token": ["\" _STR:1_ \"", ".", "count", "(", "\" _STR:0_ \"", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "\" _STR:1_ \".count(\" _STR:0_ \")", "decano_code": "\" _STR:1_ \".count(\" _STR:0_ \")", "raw_code": "\"\"\"abcdabcva\"\"\".count('ab')", "str_map": {"ab": "_STR:0_", "abcdabcva": "_STR:1_"}}
{"src": ["get", "a", "list", "of", "values", "with", "key", "_STR:0_", "from", "a", "list", "of", "dictionaries", "l"], "token": ["[", "d", "[", "\" _STR:0_ \"", "]", "for", "d", "in", "l", "if", "\" _STR:0_ \"", "in", "d", "]"], "type": ["OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "STRING", "KEYWORD", "NAME", "OP"], "cano_code": "[d[\" _STR:0_ \"] for d in l if \" _STR:0_ \" in d]", "decano_code": "[d[\" _STR:0_ \"] for d in l if \" _STR:0_ \" in d]", "raw_code": "[d['key'] for d in l if 'key' in d]", "str_map": {"key": "_STR:0_"}}
{"src": ["get", "a", "list", "of", "values", "for", "key", "_STR:0_", "from", "a", "list", "of", "dictionaries", "l"], "token": ["[", "d", "[", "\" _STR:0_ \"", "]", "for", "d", "in", "l", "]"], "type": ["OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[d[\" _STR:0_ \"] for d in l]", "decano_code": "[d[\" _STR:0_ \"] for d in l]", "raw_code": "[d['key'] for d in l]", "str_map": {"key": "_STR:0_"}}
{"src": ["get", "a", "list", "of", "values", "for", "key", "_STR:0_", "from", "a", "list", "of", "dictionaries", "in", "l"], "token": ["[", "d", "[", "\" _STR:0_ \"", "]", "for", "d", "in", "l", "]"], "type": ["OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[d[\" _STR:0_ \"] for d in l]", "decano_code": "[d[\" _STR:0_ \"] for d in l]", "raw_code": "[d['key'] for d in l]", "str_map": {"key": "_STR:0_"}}
{"src": ["order", "a", "list", "of", "lists", "l1", "by", "the", "first", "value"], "token": ["l1", ".", "sort", "(", "key", "=", "lambda", "x", ":", "int", "(", "x", "[", "0", "]", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "l1.sort(key=lambda x: int(x[0]))", "decano_code": "l1.sort(key=lambda x: int(x[0]))", "raw_code": "l1.sort(key=lambda x: int(x[0]))", "str_map": {}}
{"src": ["order", "a", "list", "of", "lists", "[[1, 'mike'], [1, 'bob']", "]", "by", "the", "first", "value", "of", "individual", "list"], "token": ["sorted", "(", "[", "[", "1", ",", "'mike'", "]", ",", "[", "1", ",", "'bob'", "]", "]", ")"], "type": ["KEYWORD", "OP", "OP", "OP", "NUMBER", "OP", "STRING", "OP", "OP", "OP", "NUMBER", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "sorted([[1, 'mike'], [1, 'bob']])", "decano_code": "sorted([[1, 'mike'], [1, 'bob']])", "raw_code": "sorted([[1, 'mike'], [1, 'bob']])", "str_map": {}}
{"src": ["replace", "a", "string", "abc", "in", "case", "sensitive", "way", "using", "maketrans"], "token": ["\"\"\"Abc\"\"\"", ".", "translate", "(", "maketrans", "(", "'abcABC'", ",", "'defDEF'", ")", ")"], "type": ["STRING", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "\"\"\"Abc\"\"\".translate(maketrans('abcABC', 'defDEF'))", "decano_code": "\"\"\"Abc\"\"\".translate(maketrans('abcABC', 'defDEF'))", "raw_code": "\"\"\"Abc\"\"\".translate(maketrans('abcABC', 'defDEF'))", "str_map": {}}
{"src": ["dictionary", "d", "to", "string", ",", "custom", "format"], "token": ["\"\"\"<br/>\"\"\"", ".", "join", "(", "[", "(", "'%s:: %s'", "%", "(", "key", ",", "value", ")", ")", "for", "key", ",", "value", "in", "list", "(", "d", ".", "items", "(", ")", ")", "]", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "OP"], "cano_code": "\"\"\"<br/>\"\"\".join([('%s:: %s' % (key, value)) for key, value in list(d.items())])", "decano_code": "\"\"\"<br/>\"\"\".join([('%s:: %s' % (key, value)) for key, value in list(d.items())])", "raw_code": "\"\"\"<br/>\"\"\".join([('%s:: %s' % (key, value)) for key, value in list(d.items())])", "str_map": {}}
{"src": ["how", "to", "write", "a", "unicode", "csv", "in", "python", "2.7", "[", "2", ".", "7", "]"], "token": ["self", ".", "writer", ".", "writerow", "(", "[", "str", "(", "s", ")", ".", "encode", "(", "'utf-8'", ")", "for", "s", "in", "row", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "self.writer.writerow([str(s).encode('utf-8') for s in row])", "decano_code": "self.writer.writerow([str(s).encode('utf-8') for s in row])", "raw_code": "self.writer.writerow([str(s).encode('utf-8') for s in row])", "str_map": {}}
{"src": ["clear", "terminal", "screen", "on", "windows"], "token": ["os", ".", "system", "(", "'cls'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "os.system('cls')", "decano_code": "os.system('cls')", "raw_code": "os.system('cls')", "str_map": {}}
{"src": ["clear", "the", "terminal", "screen", "in", "linux"], "token": ["os", ".", "system", "(", "'clear'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "os.system('clear')", "decano_code": "os.system('clear')", "raw_code": "os.system('clear')", "str_map": {}}
{"src": ["execute", "external", "commands/script", "your_own_script", "with", "csh", "instead", "of", "bash"], "token": ["os", ".", "system", "(", "'tcsh your_own_script'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "os.system('tcsh your_own_script')", "decano_code": "os.system('tcsh your_own_script')", "raw_code": "os.system('tcsh your_own_script')", "str_map": {}}
{"src": ["execute", "command", "_STR:0_", "in", "z", "shell"], "token": ["os", ".", "system", "(", "\"zsh -c 'echo $0'\"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "os.system(\"zsh -c 'echo $0'\")", "decano_code": "os.system(\"zsh -c 'echo $0'\")", "raw_code": "os.system(\"zsh -c 'echo $0'\")", "str_map": {"echo $0": "_STR:0_"}}
{"src": ["update", "a", "list", "l1", "dictionaries", "with", "a", "key", "count", "and", "value", "from", "list", "l2"], "token": ["[", "dict", "(", "d", ",", "count", "=", "n", ")", "for", "d", ",", "n", "in", "zip", "(", "l1", ",", "l2", ")", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "[dict(d, count=n) for d, n in zip(l1, l2)]", "decano_code": "[dict(d, count=n) for d, n in zip(l1, l2)]", "raw_code": "[dict(d, count=n) for d, n in zip(l1, l2)]", "str_map": {}}
{"src": ["create", "a", "list", "with", "the", "sum", "of", "respective", "elements", "of", "the", "tuples", "of", "list", "l"], "token": ["[", "sum", "(", "x", ")", "for", "x", "in", "zip", "(", "*", "l", ")", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "[sum(x) for x in zip(*l)]", "decano_code": "[sum(x) for x in zip(*l)]", "raw_code": "[sum(x) for x in zip(*l)]", "str_map": {}}
{"src": ["sum", "each", "value", "in", "a", "list", "l", "of", "tuples"], "token": ["map", "(", "sum", ",", "zip", "(", "*", "l", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "map(sum, zip(*l))", "decano_code": "map(sum, zip(*l))", "raw_code": "map(sum, zip(*l))", "str_map": {}}
{"src": ["count", "the", "number", "of", "non-nan", "elements", "in", "a", "numpy", "ndarray", "matrix", "data"], "token": ["np", ".", "count_nonzero", "(", "~", "np", ".", "isnan", "(", "data", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "np.count_nonzero(~np.isnan(data))", "decano_code": "np.count_nonzero(~np.isnan(data))", "raw_code": "np.count_nonzero(~np.isnan(data))", "str_map": {}}
{"src": ["convert", "each", "list", "in", "list", "main_list", "into", "a", "tuple"], "token": ["map", "(", "list", ",", "zip", "(", "*", "main_list", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "map(list, zip(*main_list))", "decano_code": "map(list, zip(*main_list))", "raw_code": "map(list, zip(*main_list))", "str_map": {}}
{"src": ["django", "get", "the", "value", "of", "key", "_STR:0_", "from", "POST", "request", "request", "if", "exists", ",", "else", "return", "empty", "string", "_STR:1_"], "token": ["request", ".", "POST", ".", "get", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "request.POST.get(\" _STR:0_ \", \" _STR:1_ \")", "decano_code": "request.POST.get(\" _STR:0_ \", \" _STR:1_ \")", "raw_code": "request.POST.get('title', '')", "str_map": {"title": "_STR:0_", "": "_STR:1_"}}
{"src": ["check", "if", "string", "test.mp3", "[", "test", ".", "mp3", "]", "ends", "with", "one", "of", "the", "strings", "from", "a", "tuple", "('.mp3', '.avi'", "[", "('", ".", "mp3',", "'", ".", "avi'", "]", ")"], "token": ["\"\"\"test.mp3\"\"\"", ".", "endswith", "(", "(", "'.mp3'", ",", "'.avi'", ")", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "\"\"\"test.mp3\"\"\".endswith(('.mp3', '.avi'))", "decano_code": "\"\"\"test.mp3\"\"\".endswith(('.mp3', '.avi'))", "raw_code": "\"\"\"test.mp3\"\"\".endswith(('.mp3', '.avi'))", "str_map": {}}
{"src": ["split", "a", "string", "_STR:0_", "by", "space", "while", "ignoring", "spaces", "within", "square", "braces", "and", "quotes", "."], "token": ["re", ".", "findall", "(", "'\\\\[[^\\\\]]*\\\\]|\"[^\"]*\"|\\\\S+'", ",", "s", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.findall('\\\\[[^\\\\]]*\\\\]|\"[^\"]*\"|\\\\S+', s)", "decano_code": "re.findall('\\\\[[^\\\\]]*\\\\]|\"[^\"]*\"|\\\\S+', s)", "raw_code": "re.findall('\\\\[[^\\\\]]*\\\\]|\"[^\"]*\"|\\\\S+', s)", "str_map": {"s": "_STR:0_"}}
{"src": ["get", "biggest", "3", "values", "from", "each", "column", "of", "the", "pandas", "dataframe", "data"], "token": ["data", ".", "apply", "(", "lambda", "x", ":", "sorted", "(", "x", ",", "3", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "data.apply(lambda x: sorted(x, 3))", "decano_code": "data.apply(lambda x: sorted(x, 3))", "raw_code": "data.apply(lambda x: sorted(x, 3))", "str_map": {}}
{"src": ["permanently", "set", "the", "current", "directory", "to", "the", "_STR:0_"], "token": ["os", ".", "chdir", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "os.chdir(\" _STR:0_ \")", "decano_code": "os.chdir(\" _STR:0_ \")", "raw_code": "os.chdir('C:/Users/Name/Desktop')", "str_map": {"C:/Users/Name/Desktop": "_STR:0_"}}
{"src": ["get", "all", "characters", "between", "two", "$", "characters", "in", "string", "string"], "token": ["re", ".", "findall", "(", "'\\\\$([^$]*)\\\\$'", ",", "string", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.findall('\\\\$([^$]*)\\\\$', string)", "decano_code": "re.findall('\\\\$([^$]*)\\\\$', string)", "raw_code": "re.findall('\\\\$([^$]*)\\\\$', string)", "str_map": {}}
{"src": ["getting", "the", "string", "between", "2", "_STR:0_", "characters", "in", "_STR:1_"], "token": ["re", ".", "findall", "(", "'\\\\$(.*?)\\\\$'", ",", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.findall('\\\\$(.*?)\\\\$', \" _STR:1_ \")", "decano_code": "re.findall('\\\\$(.*?)\\\\$', \" _STR:1_ \")", "raw_code": "re.findall('\\\\$(.*?)\\\\$', '$sin (x)$ is an function of x')", "str_map": {"$": "_STR:0_", "$sin (x)$ is an function of x": "_STR:1_"}}
{"src": ["format", "a", "date", "object", "str_data", "into", "iso", "fomrat"], "token": ["datetime", ".", "datetime", ".", "strptime", "(", "str_date", ",", "'%m/%d/%Y'", ")", ".", "date", "(", ")", ".", "isoformat", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "datetime.datetime.strptime(str_date, '%m/%d/%Y').date().isoformat()", "decano_code": "datetime.datetime.strptime(str_date, '%m/%d/%Y').date().isoformat()", "raw_code": "datetime.datetime.strptime(str_date, '%m/%d/%Y').date().isoformat()", "str_map": {}}
{"src": ["get", "element", "at", "index", "0", "of", "first", "row", "and", "element", "at", "index", "1", "of", "second", "row", "in", "array", "a"], "token": ["A", "[", "[", "0", ",", "1", "]", ",", "[", "0", ",", "1", "]", "]"], "type": ["NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "A[[0, 1], [0, 1]]", "decano_code": "A[[0, 1], [0, 1]]", "raw_code": "A[[0, 1], [0, 1]]", "str_map": {}}
{"src": ["subset", "numpy", "array", "a", "by", "column", "and", "row", ",", "returning", "the", "values", "from", "the", "first", "row", ",", "first", "column", "and", "the", "second", "row", ",", "second", "column", "and", "the", "third", "row", ",", "first", "column", "."], "token": ["a", "[", "np", ".", "arange", "(", "3", ")", ",", "(", "0", ",", "1", ",", "0", ")", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "a[np.arange(3), (0, 1, 0)]", "decano_code": "a[np.arange(3), (0, 1, 0)]", "raw_code": "a[np.arange(3), (0, 1, 0)]", "str_map": {}}
{"src": ["get", "a", "list", "of", "all", "keys", "from", "dictionary", "dictA", "where", "the", "number", "of", "occurrences", "of", "value", "duck", "in", "that", "key", "is", "more", "than", "1"], "token": ["[", "k", "for", "k", ",", "v", "in", "dictA", ".", "items", "(", ")", "if", "v", ".", "count", "(", "'duck'", ")", ">", "1", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NUMBER", "OP"], "cano_code": "[k for k, v in dictA.items() if v.count('duck') > 1]", "decano_code": "[k for k, v in dictA.items() if v.count('duck') > 1]", "raw_code": "[k for k, v in dictA.items() if v.count('duck') > 1]", "str_map": {}}
{"src": ["create", "sub", "matrix", "of", "a", "list", "of", "lists", "[[2, 3, 4], [2, 3, 4], [2, 3, 4]", "]", "(without", "numpy", ")"], "token": ["[", "[", "2", ",", "3", ",", "4", "]", ",", "[", "2", ",", "3", ",", "4", "]", ",", "[", "2", ",", "3", ",", "4", "]", "]"], "type": ["OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "[[2, 3, 4], [2, 3, 4], [2, 3, 4]]", "decano_code": "[[2, 3, 4], [2, 3, 4], [2, 3, 4]]", "raw_code": "[[2, 3, 4], [2, 3, 4], [2, 3, 4]]", "str_map": {}}
{"src": ["get", "an", "element", "at", "index", "[1,1", "]", "in", "a", "numpy", "array", "arr"], "token": ["print", "(", "arr", "[", "1", ",", "1", "]", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "print(arr[1, 1])", "decano_code": "print(arr[1, 1])", "raw_code": "print(arr[1, 1])", "str_map": {}}
{"src": ["set", "colorbar", "range", "from", "0", "to", "15", "for", "pyplot", "object", "quadmesh", "in", "matplotlib"], "token": ["quadmesh", ".", "set_clim", "(", "vmin", "=", "0", ",", "vmax", "=", "15", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "quadmesh.set_clim(vmin=0, vmax=15)", "decano_code": "quadmesh.set_clim(vmin=0, vmax=15)", "raw_code": "quadmesh.set_clim(vmin=0, vmax=15)", "str_map": {}}
{"src": ["read", "csv", "file", "_STR:0_", "into", "numpy", "array"], "token": ["my_data", "=", "genfromtxt", "(", "\" _STR:0_ \"", ",", "delimiter", "=", "','", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "my_data = genfromtxt(\" _STR:0_ \", delimiter=',')", "decano_code": "my_data = genfromtxt(\" _STR:0_ \", delimiter=',')", "raw_code": "my_data = genfromtxt('my_file.csv', delimiter=',')", "str_map": {"my_file.csv": "_STR:0_"}}
{"src": ["read", "csv", "file", "_STR:0_", "into", "array"], "token": ["df", "=", "pd", ".", "read_csv", "(", "\" _STR:0_ \"", ",", "sep", "=", "','", ",", "header", "=", "None", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df = pd.read_csv(\" _STR:0_ \", sep=',', header=None)", "decano_code": "df = pd.read_csv(\" _STR:0_ \", sep=',', header=None)", "raw_code": "df = pd.read_csv('myfile.csv', sep=',', header=None)", "str_map": {"myfile.csv": "_STR:0_"}}
{"src": ["read", "csv", "file", "_STR:0_", "into", "array"], "token": ["np", ".", "genfromtxt", "(", "\" _STR:0_ \"", ",", "delimiter", "=", "','", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "np.genfromtxt(\" _STR:0_ \", delimiter=',')", "decano_code": "np.genfromtxt(\" _STR:0_ \", delimiter=',')", "raw_code": "np.genfromtxt('myfile.csv', delimiter=',')", "str_map": {"myfile.csv": "_STR:0_"}}
{"src": ["read", "csv", "file", "_STR:0_", "into", "array"], "token": ["np", ".", "genfromtxt", "(", "\" _STR:0_ \"", ",", "delimiter", "=", "','", ",", "dtype", "=", "None", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "np.genfromtxt(\" _STR:0_ \", delimiter=',', dtype=None)", "decano_code": "np.genfromtxt(\" _STR:0_ \", delimiter=',', dtype=None)", "raw_code": "np.genfromtxt('myfile.csv', delimiter=',', dtype=None)", "str_map": {"myfile.csv": "_STR:0_"}}
{"src": ["read", "the", "first", "line", "of", "a", "string", "my_string"], "token": ["my_string", ".", "splitlines", "(", ")", "[", "0", "]"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "my_string.splitlines()[0]", "decano_code": "my_string.splitlines()[0]", "raw_code": "my_string.splitlines()[0]", "str_map": {}}
{"src": ["how", "do", "i", "read", "the", "first", "line", "of", "a", "string", "?"], "token": ["my_string", ".", "split", "(", "'\\n'", ",", "1", ")", "[", "0", "]"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP"], "cano_code": "my_string.split('\\n', 1)[0]", "decano_code": "my_string.split('\\n', 1)[0]", "raw_code": "my_string.split('\\n', 1)[0]", "str_map": {}}
{"src": ["generate", "a", "list", "from", "a", "pandas", "dataframe", "df", "with", "the", "column", "name", "and", "column", "values"], "token": ["df", ".", "values", ".", "tolist", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "df.values.tolist()", "decano_code": "df.values.tolist()", "raw_code": "df.values.tolist()", "str_map": {}}
{"src": ["replace", "repeated", "instances", "of", "a", "character", "_STR:0_", "with", "a", "single", "instance", "in", "a", "string", "_STR:1_"], "token": ["re", ".", "sub", "(", "'\\\\*\\\\*+'", ",", "\" _STR:0_ \"", ",", "text", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.sub('\\\\*\\\\*+', \" _STR:0_ \", text)", "decano_code": "re.sub('\\\\*\\\\*+', \" _STR:0_ \", text)", "raw_code": "re.sub('\\\\*\\\\*+', '*', text)", "str_map": {"*": "_STR:0_", "text": "_STR:1_"}}
{"src": ["replace", "repeated", "instances", "of", "_STR:0_", "with", "a", "single", "instance", "of", "_STR:0_"], "token": ["re", ".", "sub", "(", "'\\\\*+'", ",", "\" _STR:0_ \"", ",", "text", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.sub('\\\\*+', \" _STR:0_ \", text)", "decano_code": "re.sub('\\\\*+', \" _STR:0_ \", text)", "raw_code": "re.sub('\\\\*+', '*', text)", "str_map": {"*": "_STR:0_"}}
{"src": ["multiply", "values", "of", "dictionary", "dict", "with", "their", "respective", "values", "in", "dictionary", "dict2"], "token": ["dict", "(", "(", "k", ",", "v", "*", "dict2", "[", "k", "]", ")", "for", "k", ",", "v", "in", "list", "(", "dict1", ".", "items", "(", ")", ")", "if", "k", "in", "dict2", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "dict((k, v * dict2[k]) for k, v in list(dict1.items()) if k in dict2)", "decano_code": "dict((k, v * dict2[k]) for k, v in list(dict1.items()) if k in dict2)", "raw_code": "dict((k, v * dict2[k]) for k, v in list(dict1.items()) if k in dict2)", "str_map": {}}
{"src": ["get", "a", "random", "string", "of", "length", "length"], "token": ["return", "''", ".", "join", "(", "random", ".", "choice", "(", "string", ".", "lowercase", ")", "for", "i", "in", "range", "(", "length", ")", ")"], "type": ["KEYWORD", "STRING", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "return ''.join(random.choice(string.lowercase) for i in range(length))", "decano_code": "return ''.join(random.choice(string.lowercase) for i in range(length))", "raw_code": "return ''.join(random.choice(string.lowercase) for i in range(length))", "str_map": {}}
{"src": ["get", "total", "number", "of", "values", "in", "a", "nested", "dictionary", "food_colors"], "token": ["sum", "(", "len", "(", "x", ")", "for", "x", "in", "list", "(", "food_colors", ".", "values", "(", ")", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "sum(len(x) for x in list(food_colors.values()))", "decano_code": "sum(len(x) for x in list(food_colors.values()))", "raw_code": "sum(len(x) for x in list(food_colors.values()))", "str_map": {}}
{"src": ["count", "all", "elements", "in", "a", "nested", "dictionary", "food_colors"], "token": ["sum", "(", "len", "(", "v", ")", "for", "v", "in", "food_colors", ".", "values", "(", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "sum(len(v) for v in food_colors.values())", "decano_code": "sum(len(v) for v in food_colors.values())", "raw_code": "sum(len(v) for v in food_colors.values())", "str_map": {}}
{"src": ["apply", "logical", "operator", "_STR:0_", "to", "all", "elements", "in", "list", "a_list"], "token": ["all", "(", "a_list", ")"], "type": ["KEYWORD", "OP", "NAME", "OP"], "cano_code": "all(a_list)", "decano_code": "all(a_list)", "raw_code": "all(a_list)", "str_map": {"AND": "_STR:0_"}}
{"src": ["removing", "vowel", "characters", "_STR:0_", "from", "string", "text"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "c", "for", "c", "in", "text", "if", "c", "not", "in", "\" _STR:0_ \"", ")"], "type": ["STRING", "OP", "NAME", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "STRING", "OP"], "cano_code": "\"\"\"\"\"\".join(c for c in text if c not in \" _STR:0_ \")", "decano_code": "\"\"\"\"\"\".join(c for c in text if c not in \" _STR:0_ \")", "raw_code": "\"\"\"\"\"\".join(c for c in text if c not in 'aeiouAEIOU')", "str_map": {"aeiouAEIOU": "_STR:0_"}}
{"src": ["divide", "elements", "in", "list", "a", "from", "elements", "at", "the", "same", "index", "in", "list", "b"], "token": ["[", "(", "x", "/", "y", ")", "for", "x", ",", "y", "in", "zip", "(", "a", ",", "b", ")", "]"], "type": ["OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "[(x / y) for x, y in zip(a, b)]", "decano_code": "[(x / y) for x, y in zip(a, b)]", "raw_code": "[(x / y) for x, y in zip(a, b)]", "str_map": {}}
{"src": ["match", "regex", "_STR:0_", "on", "string", "_STR:1_"], "token": ["re", ".", "findall", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.findall(\" _STR:0_ \", \" _STR:1_ \")", "decano_code": "re.findall(\" _STR:0_ \", \" _STR:1_ \")", "raw_code": "re.findall('abc(de)fg(123)', 'abcdefg123 and again abcdefg123')", "str_map": {"abc(de)fg(123)": "_STR:0_", "abcdefg123 and again abcdefg123": "_STR:1_"}}
{"src": ["apply", "function", "log2", "to", "the", "grouped", "values", "by", "_STR:0_", "in", "dataframe", "df"], "token": ["df", ".", "groupby", "(", "\" _STR:0_ \"", ")", ".", "apply", "(", "lambda", "x", ":", "np", ".", "mean", "(", "np", ".", "log2", "(", "x", "[", "'v'", "]", ")", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "OP"], "cano_code": "df.groupby(\" _STR:0_ \").apply(lambda x: np.mean(np.log2(x['v'])))", "decano_code": "df.groupby(\" _STR:0_ \").apply(lambda x: np.mean(np.log2(x['v'])))", "raw_code": "df.groupby('type').apply(lambda x: np.mean(np.log2(x['v'])))", "str_map": {"type": "_STR:0_"}}
{"src": ["get", "geys", "of", "dictionary", "my_dict", "that", "contain", "any", "values", "from", "list", "lst"], "token": ["[", "key", "for", "key", ",", "value", "in", "list", "(", "my_dict", ".", "items", "(", ")", ")", "if", "set", "(", "value", ")", ".", "intersection", "(", "lst", ")", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "[key for key, value in list(my_dict.items()) if set(value).intersection(lst)]", "decano_code": "[key for key, value in list(my_dict.items()) if set(value).intersection(lst)]", "raw_code": "[key for key, value in list(my_dict.items()) if set(value).intersection(lst)]", "str_map": {}}
{"src": ["get", "list", "of", "keys", "in", "dictionary", "my_dict", "whose", "values", "contain", "values", "from", "list", "lst"], "token": ["[", "key", "for", "item", "in", "lst", "for", "key", ",", "value", "in", "list", "(", "my_dict", ".", "items", "(", ")", ")", "if", "item", "in", "value", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[key for item in lst for key, value in list(my_dict.items()) if item in value]", "decano_code": "[key for item in lst for key, value in list(my_dict.items()) if item in value]", "raw_code": "[key for item in lst for key, value in list(my_dict.items()) if item in value]", "str_map": {}}
{"src": ["sum", "elements", "of", "tuple", "b", "to", "their", "respective", "elements", "of", "each", "tuple", "in", "list", "a"], "token": ["c", "=", "[", "[", "(", "i", "+", "j", ")", "for", "i", ",", "j", "in", "zip", "(", "e", ",", "b", ")", "]", "for", "e", "in", "a", "]"], "type": ["NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "c = [[(i + j) for i, j in zip(e, b)] for e in a]", "decano_code": "c = [[(i + j) for i, j in zip(e, b)] for e in a]", "raw_code": "c = [[(i + j) for i, j in zip(e, b)] for e in a]", "str_map": {}}
{"src": ["get", "the", "common", "prefix", "from", "comparing", "two", "absolute", "paths", "_STR:0_", "and", "_STR:1_"], "token": ["os", ".", "path", ".", "commonprefix", "(", "[", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "os.path.commonprefix([\" _STR:0_ \", \" _STR:1_ \"])", "decano_code": "os.path.commonprefix([\" _STR:0_ \", \" _STR:1_ \"])", "raw_code": "os.path.commonprefix(['/usr/var', '/usr/var2/log'])", "str_map": {"/usr/var": "_STR:0_", "/usr/var2/log": "_STR:1_"}}
{"src": ["get", "relative", "path", "of", "path", "_STR:0_", "regarding", "path", "_STR:1_"], "token": ["print", "(", "os", ".", "path", ".", "relpath", "(", "\" _STR:1_ \"", ",", "\" _STR:0_ \"", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "print(os.path.relpath(\" _STR:1_ \", \" _STR:0_ \"))", "decano_code": "print(os.path.relpath(\" _STR:1_ \", \" _STR:0_ \"))", "raw_code": "print(os.path.relpath('/usr/var/log/', '/usr/var'))", "str_map": {"/usr/var": "_STR:0_", "/usr/var/log/": "_STR:1_"}}
{"src": ["filter", "dataframe", "grouped", "where", "the", "length", "of", "each", "group", "x", "is", "bigger", "than", "1"], "token": ["grouped", ".", "filter", "(", "lambda", "x", ":", "len", "(", "x", ")", ">", "1", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "KEYWORD", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NUMBER", "OP"], "cano_code": "grouped.filter(lambda x: len(x) > 1)", "decano_code": "grouped.filter(lambda x: len(x) > 1)", "raw_code": "grouped.filter(lambda x: len(x) > 1)", "str_map": {}}
{"src": ["sort", "dictionary", "of", "lists", "myDict", "by", "the", "third", "item", "in", "each", "list"], "token": ["sorted", "(", "list", "(", "myDict", ".", "items", "(", ")", ")", ",", "key", "=", "lambda", "e", ":", "e", "[", "1", "]", "[", "2", "]", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "sorted(list(myDict.items()), key=lambda e: e[1][2])", "decano_code": "sorted(list(myDict.items()), key=lambda e: e[1][2])", "raw_code": "sorted(list(myDict.items()), key=lambda e: e[1][2])", "str_map": {}}
{"src": ["format", "string", "hello {name}, how are you {name}, welcome {name", "}", "to", "be", "interspersed", "by", "name", "three", "times", ",", "specifying", "the", "value", "as", "john", "only", "once"], "token": ["\"\"\"hello {name}, how are you {name}, welcome {name}\"\"\"", ".", "format", "(", "name", "=", "'john'", ")"], "type": ["STRING", "OP", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "\"\"\"hello {name}, how are you {name}, welcome {name}\"\"\".format(name='john')", "decano_code": "\"\"\"hello {name}, how are you {name}, welcome {name}\"\"\".format(name='john')", "raw_code": "\"\"\"hello {name}, how are you {name}, welcome {name}\"\"\".format(name='john')", "str_map": {}}
{"src": ["reorder", "indexed", "rows", "['Z', 'C', 'A'", "]", "based", "on", "a", "list", "in", "pandas", "data", "frame", "df"], "token": ["df", ".", "reindex", "(", "[", "'Z'", ",", "'C'", ",", "'A'", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "df.reindex(['Z', 'C', 'A'])", "decano_code": "df.reindex(['Z', 'C', 'A'])", "raw_code": "df.reindex(['Z', 'C', 'A'])", "str_map": {}}
{"src": ["check", "if", "any", "values", "in", "a", "list", "input_list", "is", "a", "list"], "token": ["any", "(", "isinstance", "(", "el", ",", "list", ")", "for", "el", "in", "input_list", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "any(isinstance(el, list) for el in input_list)", "decano_code": "any(isinstance(el, list) for el in input_list)", "raw_code": "any(isinstance(el, list) for el in input_list)", "str_map": {}}
{"src": ["get", "the", "size", "of", "list", "items"], "token": ["len", "(", "items", ")"], "type": ["KEYWORD", "OP", "NAME", "OP"], "cano_code": "len(items)", "decano_code": "len(items)", "raw_code": "len(items)", "str_map": {}}
{"src": ["get", "the", "size", "of", "a", "list", "[1,2,3", "]"], "token": ["len", "(", "[", "1", ",", "2", ",", "3", "]", ")"], "type": ["KEYWORD", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "len([1, 2, 3])", "decano_code": "len([1, 2, 3])", "raw_code": "len([1, 2, 3])", "str_map": {}}
{"src": ["get", "the", "size", "of", "object", "items"], "token": ["items", ".", "__len__", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "items.__len__()", "decano_code": "items.__len__()", "raw_code": "items.__len__()", "str_map": {}}
{"src": ["function", "to", "get", "the", "size", "of", "object"], "token": ["len", "(", ")"], "type": ["KEYWORD", "OP", "OP"], "cano_code": "len()", "decano_code": "len()", "raw_code": "len()", "str_map": {}}
{"src": ["get", "the", "size", "of", "list", "s"], "token": ["len", "(", "s", ")"], "type": ["KEYWORD", "OP", "NAME", "OP"], "cano_code": "len(s)", "decano_code": "len(s)", "raw_code": "len(s)", "str_map": {}}
{"src": ["sort", "each", "row", "in", "a", "pandas", "dataframe", "df", "in", "descending", "order"], "token": ["df", ".", "sort", "(", "axis", "=", "1", ",", "ascending", "=", "False", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df.sort(axis=1, ascending=False)", "decano_code": "df.sort(axis=1, ascending=False)", "raw_code": "df.sort(axis=1, ascending=False)", "str_map": {}}
{"src": ["fastest", "way", "to", "sort", "each", "row", "in", "a", "pandas", "dataframe"], "token": ["df", ".", "sort", "(", "df", ".", "columns", ",", "axis", "=", "1", ",", "ascending", "=", "False", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df.sort(df.columns, axis=1, ascending=False)", "decano_code": "df.sort(df.columns, axis=1, ascending=False)", "raw_code": "df.sort(df.columns, axis=1, ascending=False)", "str_map": {}}
{"src": ["get", "count", "of", "rows", "in", "each", "series", "grouped", "by", "column", "_STR:0_", "and", "column", "_STR:1_", "of", "dataframe", "df"], "token": ["df", ".", "groupby", "(", "[", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", "]", ")", ".", "size", "(", ")", ".", "groupby", "(", "level", "=", "1", ")", ".", "max", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "KEYWORD", "OP", "OP"], "cano_code": "df.groupby([\" _STR:0_ \", \" _STR:1_ \"]).size().groupby(level=1).max()", "decano_code": "df.groupby([\" _STR:0_ \", \" _STR:1_ \"]).size().groupby(level=1).max()", "raw_code": "df.groupby(['col5', 'col2']).size().groupby(level=1).max()", "str_map": {"col5": "_STR:0_", "col2": "_STR:1_"}}
{"src": ["check", "if", "string", "_STR:0_", "is", "in", "list", "['x', 'd', 'a', 's', 'd', 's'", "]"], "token": ["\" _STR:0_ \"", "in", "[", "\" _STR:0_ \"", ",", "'d'", ",", "'a'", ",", "'s'", ",", "'d'", ",", "'s'", "]"], "type": ["STRING", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "\" _STR:0_ \" in [\" _STR:0_ \", 'd', 'a', 's', 'd', 's']", "decano_code": "\" _STR:0_ \" in [\" _STR:0_ \", 'd', 'a', 's', 'd', 's']", "raw_code": "'x' in ['x', 'd', 'a', 's', 'd', 's']", "str_map": {"x": "_STR:0_"}}
{"src": ["delete", "an", "item", "with", "key", "_STR:0_", "from", "mydict"], "token": ["mydict", ".", "pop", "(", "\" _STR:0_ \"", ",", "None", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "OP"], "cano_code": "mydict.pop(\" _STR:0_ \", None)", "decano_code": "mydict.pop(\" _STR:0_ \", None)", "raw_code": "mydict.pop('key', None)", "str_map": {"key": "_STR:0_"}}
{"src": ["delete", "an", "item", "with", "key", "key", "from", "mydict"], "token": ["del", "mydict", "[", "key", "]"], "type": ["KEYWORD", "NAME", "OP", "NAME", "OP"], "cano_code": "del mydict[key]", "decano_code": "del mydict[key]", "raw_code": "del mydict[key]", "str_map": {}}
{"src": ["delete", "an", "item", "with", "key", "key", "from", "mydict"], "token": ["try", ":", "\n", "    ", "del", "mydict", "[", "key", "]", "\n", "", "except", "KeyError", ":", "\n", "    ", "pass", "\n", "", "try", ":", "\n", "    ", "del", "mydict", "[", "key", "]", "\n", "", "except", "KeyError", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "OP", "NEWLINE", "INDENT", "KEYWORD", "NAME", "OP", "NAME", "OP", "NEWLINE", "DEDENT", "KEYWORD", "NAME", "OP", "NEWLINE", "INDENT", "KEYWORD", "NEWLINE", "DEDENT", "KEYWORD", "OP", "NEWLINE", "INDENT", "KEYWORD", "NAME", "OP", "NAME", "OP", "NEWLINE", "DEDENT", "KEYWORD", "NAME", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "try:\n    del mydict[key]\nexcept KeyError:\n    pass\ntry:\n    del mydict[key]\nexcept KeyError:\n    pass", "decano_code": "try:\n    del mydict[key]\nexcept KeyError:\n    pass\ntry:\n    del mydict[key]\nexcept KeyError:\n    pass", "raw_code": "try:\n    del mydict[key]\nexcept KeyError:\n    pass\ntry:\n    del mydict[key]\nexcept KeyError:\n    pass", "str_map": {}}
{"src": ["specify", "multiple", "positional", "arguments", "with", "argparse"], "token": ["parser", ".", "add_argument", "(", "'input'", ",", "nargs", "=", "'+'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "parser.add_argument('input', nargs='+')", "decano_code": "parser.add_argument('input', nargs='+')", "raw_code": "parser.add_argument('input', nargs='+')", "str_map": {}}
{"src": ["plot", "using", "the", "color", "code", "#112233", "in", "matplotlib", "pyplot"], "token": ["pyplot", ".", "plot", "(", "x", ",", "y", ",", "color", "=", "'#112233'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "pyplot.plot(x, y, color='#112233')", "decano_code": "pyplot.plot(x, y, color='#112233')", "raw_code": "pyplot.plot(x, y, color='#112233')", "str_map": {}}
{"src": ["strip", "html", "from", "strings"], "token": ["re", ".", "sub", "(", "'<[^<]+?>'", ",", "''", ",", "text", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.sub('<[^<]+?>', '', text)", "decano_code": "re.sub('<[^<]+?>', '', text)", "raw_code": "re.sub('<[^<]+?>', '', text)", "str_map": {}}
{"src": ["align", "values", "in", "array", "b", "to", "the", "order", "of", "corresponding", "values", "in", "array", "a"], "token": ["a", "[", "np", ".", "in1d", "(", "a", ",", "b", ")", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "a[np.in1d(a, b)]", "decano_code": "a[np.in1d(a, b)]", "raw_code": "a[np.in1d(a, b)]", "str_map": {}}
{"src": ["split", "string", "_STR:0_", "on", "the", "first", "occurrence", "of", "delimiter", "_STR:1_"], "token": ["\" _STR:0_ \"", ".", "split", "(", "\" _STR:1_ \"", ",", "1", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP", "NUMBER", "OP"], "cano_code": "\" _STR:0_ \".split(\" _STR:1_ \", 1)", "decano_code": "\" _STR:0_ \".split(\" _STR:1_ \", 1)", "raw_code": "\"\"\"jvm.args= -Dappdynamics.com=true, -Dsomeotherparam=false,\"\"\".split('=', 1)", "str_map": {"jvm.args= -Dappdynamics.com=true, -Dsomeotherparam=false,": "_STR:0_", "=": "_STR:1_"}}
{"src": ["print", "numbers", "in", "list", "list", "with", "precision", "of", "3", "decimal", "places"], "token": ["print", "(", "'[%s]'", "%", "', '", ".", "join", "(", "'%.3f'", "%", "val", "for", "val", "in", "list", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "OP"], "cano_code": "print('[%s]' % ', '.join('%.3f' % val for val in list))", "decano_code": "print('[%s]' % ', '.join('%.3f' % val for val in list))", "raw_code": "print('[%s]' % ', '.join('%.3f' % val for val in list))", "str_map": {}}
{"src": ["format", "print", "output", "of", "list", "of", "floats", "l", "to", "print", "only", "up", "to", "3", "decimal", "points"], "token": ["print", "(", "'['", "+", "', '", ".", "join", "(", "'%5.3f'", "%", "v", "for", "v", "in", "l", ")", "+", "']'", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP", "STRING", "OP"], "cano_code": "print('[' + ', '.join('%5.3f' % v for v in l) + ']')", "decano_code": "print('[' + ', '.join('%5.3f' % v for v in l) + ']')", "raw_code": "print('[' + ', '.join('%5.3f' % v for v in l) + ']')", "str_map": {}}
{"src": ["print", "a", "list", "of", "floating", "numbers", "l", "using", "string", "formatting"], "token": ["print", "(", "[", "(", "'%5.3f'", "%", "val", ")", "for", "val", "in", "l", "]", ")"], "type": ["KEYWORD", "OP", "OP", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "print([('%5.3f' % val) for val in l])", "decano_code": "print([('%5.3f' % val) for val in l])", "raw_code": "print([('%5.3f' % val) for val in l])", "str_map": {}}
{"src": ["change", "the", "current", "directory", "one", "level", "up"], "token": ["os", ".", "chdir", "(", "'..'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "os.chdir('..')", "decano_code": "os.chdir('..')", "raw_code": "os.chdir('..')", "str_map": {}}
{"src": ["print", "a", "unicode", "string", "text"], "token": ["print", "(", "text", ".", "encode", "(", "'windows-1252'", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "print(text.encode('windows-1252'))", "decano_code": "print(text.encode('windows-1252'))", "raw_code": "print(text.encode('windows-1252'))", "str_map": {}}
{"src": ["convert", "string", "representation", "s2", "of", "binary", "string", "rep", "of", "integer", "to", "floating", "point", "number"], "token": ["struct", ".", "unpack", "(", "'d'", ",", "struct", ".", "pack", "(", "'Q'", ",", "int", "(", "s2", ",", "0", ")", ")", ")", "[", "0", "]"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "struct.unpack('d', struct.pack('Q', int(s2, 0)))[0]", "decano_code": "struct.unpack('d', struct.pack('Q', int(s2, 0)))[0]", "raw_code": "struct.unpack('d', struct.pack('Q', int(s2, 0)))[0]", "str_map": {}}
{"src": ["convert", "a", "binary", "_STR:0_", "to", "a", "float", "number"], "token": ["float", "(", "int", "(", "\" _STR:0_ \"", ",", "0", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "STRING", "OP", "NUMBER", "OP", "OP"], "cano_code": "float(int(\" _STR:0_ \", 0))", "decano_code": "float(int(\" _STR:0_ \", 0))", "raw_code": "float(int('-0b1110', 0))", "str_map": {"-0b1110": "_STR:0_"}}
{"src": ["convert", "a", "binary", "b8", "to", "a", "float", "number"], "token": ["struct", ".", "unpack", "(", "'d'", ",", "b8", ")", "[", "0", "]"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP", "NUMBER", "OP"], "cano_code": "struct.unpack('d', b8)[0]", "decano_code": "struct.unpack('d', b8)[0]", "raw_code": "struct.unpack('d', b8)[0]", "str_map": {}}
{"src": ["plot", "a", "bar", "graph", "from", "the", "column", "_STR:0_", "in", "the", "DataFrame", "_STR:1_"], "token": ["df", ".", "colour", ".", "value_counts", "(", ")", ".", "plot", "(", "kind", "=", "'bar'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df.colour.value_counts().plot(kind='bar')", "decano_code": "df.colour.value_counts().plot(kind='bar')", "raw_code": "df.colour.value_counts().plot(kind='bar')", "str_map": {"color": "_STR:0_", "df": "_STR:1_"}}
{"src": ["plot", "categorical", "data", "in", "series", "df", "with", "kind", "bar", "using", "pandas", "and", "matplotlib"], "token": ["df", ".", "groupby", "(", "'colour'", ")", ".", "size", "(", ")", ".", "plot", "(", "kind", "=", "'bar'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df.groupby('colour').size().plot(kind='bar')", "decano_code": "df.groupby('colour').size().plot(kind='bar')", "raw_code": "df.groupby('colour').size().plot(kind='bar')", "str_map": {}}
{"src": ["strip", "and", "split", "each", "line", "line", "on", "white", "spaces"], "token": ["line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "line.strip().split(' ')", "decano_code": "line.strip().split(' ')", "raw_code": "line.strip().split(' ')", "str_map": {}}
{"src": ["apply", "functions", "mean", "and", "std", "to", "each", "column", "in", "dataframe", "df"], "token": ["df", ".", "groupby", "(", "lambda", "idx", ":", "0", ")", ".", "agg", "(", "[", "'mean'", ",", "'std'", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "df.groupby(lambda idx: 0).agg(['mean', 'std'])", "decano_code": "df.groupby(lambda idx: 0).agg(['mean', 'std'])", "raw_code": "df.groupby(lambda idx: 0).agg(['mean', 'std'])", "str_map": {}}
{"src": ["sort", "dictionary", "tag_weight", "in", "reverse", "order", "by", "values", "cast", "to", "integers"], "token": ["sorted", "(", "list", "(", "tag_weight", ".", "items", "(", ")", ")", ",", "key", "=", "lambda", "x", ":", "int", "(", "x", "[", "1", "]", ")", ",", "reverse", "=", "True", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "sorted(list(tag_weight.items()), key=lambda x: int(x[1]), reverse=True)", "decano_code": "sorted(list(tag_weight.items()), key=lambda x: int(x[1]), reverse=True)", "raw_code": "sorted(list(tag_weight.items()), key=lambda x: int(x[1]), reverse=True)", "str_map": {}}
{"src": ["find", "the", "largest", "integer", "less", "than", "x"], "token": ["int", "(", "math", ".", "ceil", "(", "x", ")", ")", "-", "1"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NUMBER"], "cano_code": "int(math.ceil(x)) - 1", "decano_code": "int(math.ceil(x)) - 1", "raw_code": "int(math.ceil(x)) - 1", "str_map": {}}
{"src": ["check", "if", "the", "string", "myString", "is", "empty"], "token": ["if", "(", "not", "myString", ")", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "OP", "KEYWORD", "NAME", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "if (not myString):\n    pass", "decano_code": "if (not myString):\n    pass", "raw_code": "if (not myString):\n    pass", "str_map": {}}
{"src": ["check", "if", "string", "some_string", "is", "empty"], "token": ["if", "(", "not", "some_string", ")", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "OP", "KEYWORD", "NAME", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "if (not some_string):\n    pass", "decano_code": "if (not some_string):\n    pass", "raw_code": "if (not some_string):\n    pass", "str_map": {}}
{"src": ["check", "if", "string", "my_string", "is", "empty"], "token": ["if", "(", "not", "my_string", ")", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "OP", "KEYWORD", "NAME", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "if (not my_string):\n    pass", "decano_code": "if (not my_string):\n    pass", "raw_code": "if (not my_string):\n    pass", "str_map": {}}
{"src": ["check", "if", "string", "my_string", "is", "empty"], "token": ["if", "some_string", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "NAME", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "if some_string:\n    pass", "decano_code": "if some_string:\n    pass", "raw_code": "if some_string:\n    pass", "str_map": {}}
{"src": ["iterate", "over", "a", "dictionary", "d", "in", "sorted", "order"], "token": ["it", "=", "iter", "(", "sorted", "(", "d", ".", "items", "(", ")", ")", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "it = iter(sorted(d.items()))", "decano_code": "it = iter(sorted(d.items()))", "raw_code": "it = iter(sorted(d.items()))", "str_map": {}}
{"src": ["iterate", "over", "a", "dictionary", "d", "in", "sorted", "order"], "token": ["for", "(", "key", ",", "value", ")", "in", "sorted", "(", "d", ".", "items", "(", ")", ")", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "for (key, value) in sorted(d.items()):\n    pass", "decano_code": "for (key, value) in sorted(d.items()):\n    pass", "raw_code": "for (key, value) in sorted(d.items()):\n    pass", "str_map": {}}
{"src": ["iterate", "over", "a", "dictionary", "dict", "in", "sorted", "order"], "token": ["return", "sorted", "(", "dict", ".", "items", "(", ")", ")"], "type": ["KEYWORD", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "return sorted(dict.items())", "decano_code": "return sorted(dict.items())", "raw_code": "return sorted(dict.items())", "str_map": {}}
{"src": ["iterate", "over", "a", "dictionary", "dict", "in", "sorted", "order"], "token": ["return", "iter", "(", "sorted", "(", "dict", ".", "items", "(", ")", ")", ")"], "type": ["KEYWORD", "KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "return iter(sorted(dict.items()))", "decano_code": "return iter(sorted(dict.items()))", "raw_code": "return iter(sorted(dict.items()))", "str_map": {}}
{"src": ["iterate", "over", "a", "dictionary", "foo", "in", "sorted", "order"], "token": ["for", "(", "k", ",", "v", ")", "in", "sorted", "(", "foo", ".", "items", "(", ")", ")", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "for (k, v) in sorted(foo.items()):\n    pass", "decano_code": "for (k, v) in sorted(foo.items()):\n    pass", "raw_code": "for (k, v) in sorted(foo.items()):\n    pass", "str_map": {}}
{"src": ["iterate", "over", "a", "dictionary", "foo", "sorted", "by", "the", "key"], "token": ["for", "k", "in", "sorted", "(", "foo", ".", "keys", "(", ")", ")", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "for k in sorted(foo.keys()):\n    pass", "decano_code": "for k in sorted(foo.keys()):\n    pass", "raw_code": "for k in sorted(foo.keys()):\n    pass", "str_map": {}}
{"src": ["assign", "the", "index", "of", "the", "last", "occurence", "of", "x", "in", "list", "s", "to", "the", "variable", "last"], "token": ["last", "=", "len", "(", "s", ")", "-", "s", "[", ":", ":", "-", "1", "]", ".", "index", "(", "x", ")", "-", "1"], "type": ["NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER"], "cano_code": "last = len(s) - s[::-1].index(x) - 1", "decano_code": "last = len(s) - s[::-1].index(x) - 1", "raw_code": "last = len(s) - s[::-1].index(x) - 1", "str_map": {}}
{"src": ["concatenating", "values", "in", "list1", "to", "a", "string"], "token": ["str1", "=", "''", ".", "join", "(", "list1", ")"], "type": ["NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "str1 = ''.join(list1)", "decano_code": "str1 = ''.join(list1)", "raw_code": "str1 = ''.join(list1)", "str_map": {}}
{"src": ["concatenating", "values", "in", "list", "l", "to", "a", "string", ",", "separate", "by", "space"], "token": ["' '", ".", "join", "(", "(", "str", "(", "x", ")", "for", "x", "in", "L", ")", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "' '.join((str(x) for x in L))", "decano_code": "' '.join((str(x) for x in L))", "raw_code": "' '.join((str(x) for x in L))", "str_map": {}}
{"src": ["concatenating", "values", "in", "list1", "to", "a", "string"], "token": ["str1", "=", "''", ".", "join", "(", "(", "str", "(", "e", ")", "for", "e", "in", "list1", ")", ")"], "type": ["NAME", "OP", "STRING", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "str1 = ''.join((str(e) for e in list1))", "decano_code": "str1 = ''.join((str(e) for e in list1))", "raw_code": "str1 = ''.join((str(e) for e in list1))", "str_map": {}}
{"src": ["concatenating", "values", "in", "list", "l", "to", "a", "string"], "token": ["makeitastring", "=", "''", ".", "join", "(", "map", "(", "str", ",", "L", ")", ")"], "type": ["NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "makeitastring = ''.join(map(str, L))", "decano_code": "makeitastring = ''.join(map(str, L))", "raw_code": "makeitastring = ''.join(map(str, L))", "str_map": {}}
{"src": ["remove", "none", "value", "from", "list", "l"], "token": ["[", "x", "for", "x", "in", "L", "if", "x", "is", "not", "None", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "KEYWORD", "OP"], "cano_code": "[x for x in L if x is not None]", "decano_code": "[x for x in L if x is not None]", "raw_code": "[x for x in L if x is not None]", "str_map": {}}
{"src": ["select", "a", "random", "element", "from", "array", "[1, 2, 3", "]"], "token": ["random", ".", "choice", "(", "[", "1", ",", "2", ",", "3", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "random.choice([1, 2, 3])", "decano_code": "random.choice([1, 2, 3])", "raw_code": "random.choice([1, 2, 3])", "str_map": {}}
{"src": ["creating", "a", "5x6", "matrix", "filled", "with", "none", "and", "save", "it", "as", "x"], "token": ["x", "=", "[", "[", "None", "for", "_", "in", "range", "(", "5", ")", "]", "for", "_", "in", "range", "(", "6", ")", "]"], "type": ["NAME", "OP", "OP", "OP", "KEYWORD", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "OP"], "cano_code": "x = [[None for _ in range(5)] for _ in range(6)]", "decano_code": "x = [[None for _ in range(5)] for _ in range(6)]", "raw_code": "x = [[None for _ in range(5)] for _ in range(6)]", "str_map": {}}
{"src": ["create", "a", "new", "2D", "array", "with", "2", "random", "rows", "from", "array", "a"], "token": ["A", "[", "(", "np", ".", "random", ".", "choice", "(", "A", ".", "shape", "[", "0", "]", ",", "2", ",", "replace", "=", "False", ")", ")", ",", ":", "]"], "type": ["NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "NAME", "OP", "KEYWORD", "OP", "OP", "OP", "OP", "OP"], "cano_code": "A[(np.random.choice(A.shape[0], 2, replace=False)), :]", "decano_code": "A[(np.random.choice(A.shape[0], 2, replace=False)), :]", "raw_code": "A[(np.random.choice(A.shape[0], 2, replace=False)), :]", "str_map": {}}
{"src": ["create", "a", "new", "2", "dimensional", "array", "containing", "two", "random", "rows", "from", "array", "a"], "token": ["A", "[", "(", "np", ".", "random", ".", "randint", "(", "A", ".", "shape", "[", "0", "]", ",", "size", "=", "2", ")", ")", ",", ":", "]"], "type": ["NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "OP", "OP"], "cano_code": "A[(np.random.randint(A.shape[0], size=2)), :]", "decano_code": "A[(np.random.randint(A.shape[0], size=2)), :]", "raw_code": "A[(np.random.randint(A.shape[0], size=2)), :]", "str_map": {}}
{"src": ["combining", "rows", "in", "pandas", "by", "adding", "their", "values"], "token": ["df", ".", "groupby", "(", "df", ".", "index", ")", ".", "sum", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "OP"], "cano_code": "df.groupby(df.index).sum()", "decano_code": "df.groupby(df.index).sum()", "raw_code": "df.groupby(df.index).sum()", "str_map": {}}
{"src": ["find", "all", "owl:Class", "tags", "by", "parsing", "xml", "with", "namespace"], "token": ["root", ".", "findall", "(", "'{http://www.w3.org/2002/07/owl#}Class'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "root.findall('{http://www.w3.org/2002/07/owl#}Class')", "decano_code": "root.findall('{http://www.w3.org/2002/07/owl#}Class')", "raw_code": "root.findall('{http://www.w3.org/2002/07/owl#}Class')", "str_map": {}}
{"src": ["generate", "a", "random", "string", "of", "length", "x", "containing", "lower", "cased", "ASCII", "letters"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "random", ".", "choice", "(", "string", ".", "lowercase", ")", "for", "x", "in", "range", "(", "X", ")", ")"], "type": ["STRING", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "\"\"\"\"\"\".join(random.choice(string.lowercase) for x in range(X))", "decano_code": "\"\"\"\"\"\".join(random.choice(string.lowercase) for x in range(X))", "raw_code": "\"\"\"\"\"\".join(random.choice(string.lowercase) for x in range(X))", "str_map": {}}
{"src": ["add", "a", "path", "/path/to/2014_07_13_test", "to", "system", "path"], "token": ["sys", ".", "path", ".", "append", "(", "'/path/to/2014_07_13_test'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "sys.path.append('/path/to/2014_07_13_test')", "decano_code": "sys.path.append('/path/to/2014_07_13_test')", "raw_code": "sys.path.append('/path/to/2014_07_13_test')", "str_map": {}}
{"src": ["round", "number", "x", "to", "nearest", "integer"], "token": ["int", "(", "round", "(", "x", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "int(round(x))", "decano_code": "int(round(x))", "raw_code": "int(round(x))", "str_map": {}}
{"src": ["round", "number", "h", "to", "nearest", "integer"], "token": ["h", "=", "int", "(", "round", "(", "h", ")", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "h = int(round(h))", "decano_code": "h = int(round(h))", "raw_code": "h = int(round(h))", "str_map": {}}
{"src": ["round", "number", "32.268907563", "[", "32", ".", "268907563", "]", "up", "to", "3", "decimal", "points"], "token": ["round", "(", "32.268907563", ",", "3", ")"], "type": ["KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "round(32.268907563, 3)", "decano_code": "round(32.268907563, 3)", "raw_code": "round(32.268907563, 3)", "str_map": {}}
{"src": ["round", "number", "value", "up", "to", "significantDigit", "decimal", "places"], "token": ["round", "(", "value", ",", "significantDigit", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "round(value, significantDigit)", "decano_code": "round(value, significantDigit)", "raw_code": "round(value, significantDigit)", "str_map": {}}
{"src": ["round", "number", "1.0005", "[", "1", ".", "0005", "]", "up", "to", "3", "decimal", "places"], "token": ["round", "(", "1.0005", ",", "3", ")"], "type": ["KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "round(1.0005, 3)", "decano_code": "round(1.0005, 3)", "raw_code": "round(1.0005, 3)", "str_map": {}}
{"src": ["round", "number", "2.0005", "[", "2", ".", "0005", "]", "up", "to", "3", "decimal", "places"], "token": ["round", "(", "2.0005", ",", "3", ")"], "type": ["KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "round(2.0005, 3)", "decano_code": "round(2.0005, 3)", "raw_code": "round(2.0005, 3)", "str_map": {}}
{"src": ["round", "number", "3.0005", "[", "3", ".", "0005", "]", "up", "to", "3", "decimal", "places"], "token": ["round", "(", "3.0005", ",", "3", ")"], "type": ["KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "round(3.0005, 3)", "decano_code": "round(3.0005, 3)", "raw_code": "round(3.0005, 3)", "str_map": {}}
{"src": ["round", "number", "4.0005", "[", "4", ".", "0005", "]", "up", "to", "3", "decimal", "places"], "token": ["round", "(", "4.0005", ",", "3", ")"], "type": ["KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "round(4.0005, 3)", "decano_code": "round(4.0005, 3)", "raw_code": "round(4.0005, 3)", "str_map": {}}
{"src": ["round", "number", "8.005", "[", "8", ".", "005", "]", "up", "to", "2", "decimal", "places"], "token": ["round", "(", "8.005", ",", "2", ")"], "type": ["KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "round(8.005, 2)", "decano_code": "round(8.005, 2)", "raw_code": "round(8.005, 2)", "str_map": {}}
{"src": ["round", "number", "7.005", "[", "7", ".", "005", "]", "up", "to", "2", "decimal", "places"], "token": ["round", "(", "7.005", ",", "2", ")"], "type": ["KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "round(7.005, 2)", "decano_code": "round(7.005, 2)", "raw_code": "round(7.005, 2)", "str_map": {}}
{"src": ["round", "number", "6.005", "[", "6", ".", "005", "]", "up", "to", "2", "decimal", "places"], "token": ["round", "(", "6.005", ",", "2", ")"], "type": ["KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "round(6.005, 2)", "decano_code": "round(6.005, 2)", "raw_code": "round(6.005, 2)", "str_map": {}}
{"src": ["round", "number", "1.005", "[", "1", ".", "005", "]", "up", "to", "2", "decimal", "places"], "token": ["round", "(", "1.005", ",", "2", ")"], "type": ["KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "round(1.005, 2)", "decano_code": "round(1.005, 2)", "raw_code": "round(1.005, 2)", "str_map": {}}
{"src": ["fill", "missing", "value", "in", "one", "column", "_STR:0_", "with", "the", "value", "of", "another", "column", "_STR:1_"], "token": ["df", "[", "\" _STR:0_ \"", "]", ".", "fillna", "(", "df", "[", "\" _STR:1_ \"", "]", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "df[\" _STR:0_ \"].fillna(df[\" _STR:1_ \"])", "decano_code": "df[\" _STR:0_ \"].fillna(df[\" _STR:1_ \"])", "raw_code": "df['Cat1'].fillna(df['Cat2'])", "str_map": {"Cat1": "_STR:0_", "Cat2": "_STR:1_"}}
{"src": ["convert", "the", "argument", "date", "with", "string", "formatting", "in", "logging"], "token": ["logging", ".", "info", "(", "'date=%s'", ",", "date", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "logging.info('date=%s', date)", "decano_code": "logging.info('date=%s', date)", "raw_code": "logging.info('date=%s', date)", "str_map": {}}
{"src": ["log", "message", "of", "level", "_STR:0_", "with", "value", "of", "date", "in", "the", "message"], "token": ["logging", ".", "info", "(", "'date={}'", ".", "format", "(", "date", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "logging.info('date={}'.format(date))", "decano_code": "logging.info('date={}'.format(date))", "raw_code": "logging.info('date={}'.format(date))", "str_map": {"info": "_STR:0_"}}
{"src": ["convert", "values", "in", "dictionary", "d", "into", "integers"], "token": ["{", "k", ":", "int", "(", "v", ")", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", "}"], "type": ["OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "{k: int(v) for k, v in d.items()}", "decano_code": "{k: int(v) for k, v in d.items()}", "raw_code": "{k: int(v) for k, v in d.items()}", "str_map": {}}
{"src": ["sum", "elements", "at", "the", "same", "index", "of", "each", "list", "in", "list", "lists"], "token": ["map", "(", "sum", ",", "zip", "(", "*", "lists", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "map(sum, zip(*lists))", "decano_code": "map(sum, zip(*lists))", "raw_code": "map(sum, zip(*lists))", "str_map": {}}
{"src": ["convert", "a", "string", "s", "containing", "hex", "bytes", "to", "a", "hex", "string"], "token": ["s", ".", "decode", "(", "'hex'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "s.decode('hex')", "decano_code": "s.decode('hex')", "raw_code": "s.decode('hex')", "str_map": {}}
{"src": ["convert", "a", "string", "s", "containing", "hex", "bytes", "to", "a", "hex", "string"], "token": ["binascii", ".", "a2b_hex", "(", "s", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "binascii.a2b_hex(s)", "decano_code": "binascii.a2b_hex(s)", "raw_code": "binascii.a2b_hex(s)", "str_map": {}}
{"src": ["send", "data", "_STR:0_", "to", "socket", "connection"], "token": ["connection", ".", "send", "(", "'HTTP/1.0 200 established\\r\\n\\r\\n'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "connection.send('HTTP/1.0 200 established\\r\\n\\r\\n')", "decano_code": "connection.send('HTTP/1.0 200 established\\r\\n\\r\\n')", "raw_code": "connection.send('HTTP/1.0 200 established\\r\\n\\r\\n')", "str_map": {"HTTP/1.0 200 OK\r\n\r\n": "_STR:0_"}}
{"src": ["send", "data", "_STR:0_", "to", "socket", "connection"], "token": ["connection", ".", "send", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "connection.send(\" _STR:0_ \")", "decano_code": "connection.send(\" _STR:0_ \")", "raw_code": "connection.send('HTTP/1.0 200 OK\\r\\n\\r\\n')", "str_map": {"HTTP/1.0 200 OK\r\n\r\n": "_STR:0_"}}
{"src": ["set", "the", "value", "of", "cell", "['x']['C'", "]", "equal", "to", "10", "in", "dataframe", "df"], "token": ["df", "[", "'x'", "]", "[", "'C'", "]", "=", "10"], "type": ["NAME", "OP", "STRING", "OP", "OP", "STRING", "OP", "OP", "NUMBER"], "cano_code": "df['x']['C'] = 10", "decano_code": "df['x']['C'] = 10", "raw_code": "df['x']['C'] = 10", "str_map": {}}
{"src": ["normalize", "the", "dataframe", "df", "along", "the", "rows"], "token": ["np", ".", "sqrt", "(", "np", ".", "square", "(", "df", ")", ".", "sum", "(", "axis", "=", "1", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "np.sqrt(np.square(df).sum(axis=1))", "decano_code": "np.sqrt(np.square(df).sum(axis=1))", "raw_code": "np.sqrt(np.square(df).sum(axis=1))", "str_map": {}}
{"src": ["remove", "identical", "items", "from", "list", "my_list", "and", "sort", "it", "alphabetically"], "token": ["sorted", "(", "set", "(", "my_list", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "sorted(set(my_list))", "decano_code": "sorted(set(my_list))", "raw_code": "sorted(set(my_list))", "str_map": {}}
{"src": ["find", "the", "index", "of", "the", "element", "with", "the", "maximum", "value", "from", "a", "list", "_STR:0_", "."], "token": ["max", "(", "enumerate", "(", "a", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "[", "0", "]"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "max(enumerate(a), key=lambda x: x[1])[0]", "decano_code": "max(enumerate(a), key=lambda x: x[1])[0]", "raw_code": "max(enumerate(a), key=lambda x: x[1])[0]", "str_map": {"a": "_STR:0_"}}
{"src": ["create", "a", "list", "where", "each", "element", "is", "a", "value", "of", "the", "key", "_STR:0_", "for", "each", "dictionary", "d", "in", "the", "list", "thisismylist"], "token": ["[", "d", "[", "\" _STR:0_ \"", "]", "for", "d", "in", "thisismylist", "]"], "type": ["OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[d[\" _STR:0_ \"] for d in thisismylist]", "decano_code": "[d[\" _STR:0_ \"] for d in thisismylist]", "raw_code": "[d['Name'] for d in thisismylist]", "str_map": {"Name": "_STR:0_"}}
{"src": ["create", "a", "list", "of", "tuples", "with", "the", "values", "of", "keys", "_STR:0_", "and", "_STR:1_", "from", "each", "dictionary", "d", "in", "the", "list", "thisismylist"], "token": ["[", "(", "d", "[", "\" _STR:0_ \"", "]", ",", "d", "[", "\" _STR:1_ \"", "]", ")", "for", "d", "in", "thisismylist", "]"], "type": ["OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[(d[\" _STR:0_ \"], d[\" _STR:1_ \"]) for d in thisismylist]", "decano_code": "[(d[\" _STR:0_ \"], d[\" _STR:1_ \"]) for d in thisismylist]", "raw_code": "[(d['Name'], d['Age']) for d in thisismylist]", "str_map": {"Name": "_STR:0_", "Age": "_STR:1_"}}
{"src": ["grab", "one", "random", "item", "from", "a", "database", "model", "in", "django/postgresql"], "token": ["model", ".", "objects", ".", "all", "(", ")", ".", "order_by", "(", "'?'", ")", "[", "0", "]"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NUMBER", "OP"], "cano_code": "model.objects.all().order_by('?')[0]", "decano_code": "model.objects.all().order_by('?')[0]", "raw_code": "model.objects.all().order_by('?')[0]", "str_map": {}}
{"src": ["run", "python", "script", "_STR:0_", "from", "another", "python", "script", ",", "passing", "in", "1", "as", "an", "argument"], "token": ["os", ".", "system", "(", "'script2.py 1'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "os.system('script2.py 1')", "decano_code": "os.system('script2.py 1')", "raw_code": "os.system('script2.py 1')", "str_map": {"script2.py": "_STR:0_"}}
{"src": ["python", "regex", "for", "hyphenated", "words", "in", "text"], "token": ["re", ".", "findall", "(", "'\\\\w+(?:-\\\\w+)+'", ",", "text", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.findall('\\\\w+(?:-\\\\w+)+', text)", "decano_code": "re.findall('\\\\w+(?:-\\\\w+)+', text)", "raw_code": "re.findall('\\\\w+(?:-\\\\w+)+', text)", "str_map": {}}
{"src": ["create", "variable", "key/value", "pairs", "with", "argparse"], "token": ["parser", ".", "add_argument", "(", "'--conf'", ",", "nargs", "=", "2", ",", "action", "=", "'append'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NUMBER", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "parser.add_argument('--conf', nargs=2, action='append')", "decano_code": "parser.add_argument('--conf', nargs=2, action='append')", "raw_code": "parser.add_argument('--conf', nargs=2, action='append')", "str_map": {}}
{"src": ["get", "3", "unique", "items", "from", "a", "list"], "token": ["random", ".", "sample", "(", "list", "(", "range", "(", "1", ",", "16", ")", ")", ",", "3", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "random.sample(list(range(1, 16)), 3)", "decano_code": "random.sample(list(range(1, 16)), 3)", "raw_code": "random.sample(list(range(1, 16)), 3)", "str_map": {}}
{"src": ["sort", "list", "strings", "in", "alphabetical", "order", "based", "on", "the", "letter", "after", "percent", "character", "%", "in", "each", "element"], "token": ["strings", ".", "sort", "(", "key", "=", "lambda", "str", ":", "re", ".", "sub", "(", "'.*%(.).*'", ",", "'\\\\1'", ",", "str", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "KEYWORD", "OP", "OP"], "cano_code": "strings.sort(key=lambda str: re.sub('.*%(.).*', '\\\\1', str))", "decano_code": "strings.sort(key=lambda str: re.sub('.*%(.).*', '\\\\1', str))", "raw_code": "strings.sort(key=lambda str: re.sub('.*%(.).*', '\\\\1', str))", "str_map": {}}
{"src": ["sort", "a", "list", "of", "strings", "strings", "based", "on", "regex", "match"], "token": ["strings", ".", "sort", "(", "key", "=", "lambda", "str", ":", "re", ".", "sub", "(", "'.*%'", ",", "''", ",", "str", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "KEYWORD", "OP", "OP"], "cano_code": "strings.sort(key=lambda str: re.sub('.*%', '', str))", "decano_code": "strings.sort(key=lambda str: re.sub('.*%', '', str))", "raw_code": "strings.sort(key=lambda str: re.sub('.*%', '', str))", "str_map": {}}
{"src": ["create", "list", "listy", "containing", "3", "empty", "lists"], "token": ["listy", "=", "[", "[", "]", "for", "i", "in", "range", "(", "3", ")", "]"], "type": ["NAME", "OP", "OP", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "OP"], "cano_code": "listy = [[] for i in range(3)]", "decano_code": "listy = [[] for i in range(3)]", "raw_code": "listy = [[] for i in range(3)]", "str_map": {}}
{"src": ["sort", "numpy", "float", "array", "a", "column", "by", "column"], "token": ["A", "=", "np", ".", "array", "(", "sorted", "(", "A", ",", "key", "=", "tuple", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "OP"], "cano_code": "A = np.array(sorted(A, key=tuple))", "decano_code": "A = np.array(sorted(A, key=tuple))", "raw_code": "A = np.array(sorted(A, key=tuple))", "str_map": {}}
{"src": ["get", "a", "list", "from", "two", "strings", "12345", "and", "ab", "with", "values", "as", "each", "character", "concatenated"], "token": ["[", "(", "x", "+", "y", ")", "for", "x", "in", "'12345'", "for", "y", "in", "'ab'", "]"], "type": ["OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "STRING", "KEYWORD", "NAME", "KEYWORD", "STRING", "OP"], "cano_code": "[(x + y) for x in '12345' for y in 'ab']", "decano_code": "[(x + y) for x in '12345' for y in 'ab']", "raw_code": "[(x + y) for x in '12345' for y in 'ab']", "str_map": {}}
{"src": ["trim", "string", "_STR:0_"], "token": ["\" _STR:0_ \"", ".", "strip", "(", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP"], "cano_code": "\" _STR:0_ \".strip()", "decano_code": "\" _STR:0_ \".strip()", "raw_code": "' Hello '.strip()", "str_map": {" Hello ": "_STR:0_"}}
{"src": ["trim", "string", "myString "], "token": ["myString", ".", "strip", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "myString.strip()", "decano_code": "myString.strip()", "raw_code": "myString.strip()", "str_map": {}}
{"src": ["trimming", "a", "string", "_STR:0_"], "token": ["\" _STR:0_ \"", ".", "strip", "(", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP"], "cano_code": "\" _STR:0_ \".strip()", "decano_code": "\" _STR:0_ \".strip()", "raw_code": "' Hello '.strip()", "str_map": {" Hello ": "_STR:0_"}}
{"src": ["trimming", "a", "string", "_STR:0_"], "token": ["\" _STR:0_ \"", ".", "strip", "(", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP"], "cano_code": "\" _STR:0_ \".strip()", "decano_code": "\" _STR:0_ \".strip()", "raw_code": "' Hello'.strip()", "str_map": {" Hello": "_STR:0_"}}
{"src": ["trimming", "a", "string", "_STR:0_"], "token": ["\" _STR:0_ \"", ".", "strip", "(", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP"], "cano_code": "\" _STR:0_ \".strip()", "decano_code": "\" _STR:0_ \".strip()", "raw_code": "'Bob has a cat'.strip()", "str_map": {"Bob has a cat": "_STR:0_"}}
{"src": ["trimming", "a", "string", "_STR:0_"], "token": ["\" _STR:0_ \"", ".", "strip", "(", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP"], "cano_code": "\" _STR:0_ \".strip()", "decano_code": "\" _STR:0_ \".strip()", "raw_code": "'          Hello        '.strip()", "str_map": {"          Hello        ": "_STR:0_"}}
{"src": ["trimming", "a", "string", "str"], "token": ["str", ".", "strip", "(", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "str.strip()", "decano_code": "str.strip()", "raw_code": "str.strip()", "str_map": {}}
{"src": ["trimming", "_STR:0_", "from", "string", "myString"], "token": ["myString", ".", "strip", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "myString.strip(\" _STR:0_ \")", "decano_code": "myString.strip(\" _STR:0_ \")", "raw_code": "myString.strip('\\n')", "str_map": {"\n": "_STR:0_"}}
{"src": ["left", "trimming", "_STR:0_", "from", "string", "myString"], "token": ["myString", ".", "lstrip", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "myString.lstrip(\" _STR:0_ \")", "decano_code": "myString.lstrip(\" _STR:0_ \")", "raw_code": "myString.lstrip('\\n\\r')", "str_map": {"\n\r": "_STR:0_"}}
{"src": ["right", "trimming", "_STR:0_", "from", "string", "myString"], "token": ["myString", ".", "rstrip", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "myString.rstrip(\" _STR:0_ \")", "decano_code": "myString.rstrip(\" _STR:0_ \")", "raw_code": "myString.rstrip('\\n\\t')", "str_map": {"\n\t": "_STR:0_"}}
{"src": ["trimming", "a", "string", "_STR:0_", "by", "space"], "token": ["\" _STR:0_ \"", ".", "strip", "(", "' '", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "\" _STR:0_ \".strip(' ')", "decano_code": "\" _STR:0_ \".strip(' ')", "raw_code": "'  Hello\\n'.strip(' ')", "str_map": {"  Hello\n": "_STR:0_"}}
{"src": ["sort", "a", "list", "of", "tuples", "_STR:0_", "based", "on", "two", "elements", ",", "second", "and", "third"], "token": ["sorted", "(", "unsorted", ",", "key", "=", "lambda", "element", ":", "(", "element", "[", "1", "]", ",", "element", "[", "2", "]", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "sorted(unsorted, key=lambda element: (element[1], element[2]))", "decano_code": "sorted(unsorted, key=lambda element: (element[1], element[2]))", "raw_code": "sorted(unsorted, key=lambda element: (element[1], element[2]))", "str_map": {"unsorted": "_STR:0_"}}
{"src": ["decode", "string", "content", "to", "UTF-8", "code"], "token": ["print", "(", "content", ".", "decode", "(", "'utf8'", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "print(content.decode('utf8'))", "decano_code": "print(content.decode('utf8'))", "raw_code": "print(content.decode('utf8'))", "str_map": {}}
{"src": ["find", "the", "index", "of", "the", "maximum", "value", "in", "the", "array", "arr", "where", "the", "boolean", "condition", "in", "array", "cond", "is", "true"], "token": ["np", ".", "ma", ".", "array", "(", "np", ".", "tile", "(", "arr", ",", "2", ")", ".", "reshape", "(", "2", ",", "3", ")", ",", "mask", "=", "~", "cond", ")", ".", "argmax", "(", "axis", "=", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "np.ma.array(np.tile(arr, 2).reshape(2, 3), mask=~cond).argmax(axis=1)", "decano_code": "np.ma.array(np.tile(arr, 2).reshape(2, 3), mask=~cond).argmax(axis=1)", "raw_code": "np.ma.array(np.tile(arr, 2).reshape(2, 3), mask=~cond).argmax(axis=1)", "str_map": {}}
{"src": ["convert", "a", "dataframe", "df", "'s", "column", "ID", "into", "datetime", ",", "after", "removing", "the", "first", "and", "last", "3", "letters"], "token": ["pd", ".", "to_datetime", "(", "df", ".", "ID", ".", "str", "[", "1", ":", "-", "3", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "pd.to_datetime(df.ID.str[1:-3])", "decano_code": "pd.to_datetime(df.ID.str[1:-3])", "raw_code": "pd.to_datetime(df.ID.str[1:-3])", "str_map": {}}
{"src": ["read", "CSV", "file", "_STR:0_", "into", "a", "dataframe", "df", "with", "datatype", "of", "float", "for", "column", "_STR:1_", "considering", "character", "_STR:2_", "as", "NaN", "value"], "token": ["df", "=", "pd", ".", "read_csv", "(", "\" _STR:0_ \"", ",", "dtype", "=", "{", "\" _STR:1_ \"", ":", "np", ".", "float64", "}", ",", "na_values", "=", "[", "\" _STR:2_ \"", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP", "STRING", "OP", "OP"], "cano_code": "df = pd.read_csv(\" _STR:0_ \", dtype={\" _STR:1_ \": np.float64}, na_values=[\" _STR:2_ \"])", "decano_code": "df = pd.read_csv(\" _STR:0_ \", dtype={\" _STR:1_ \": np.float64}, na_values=[\" _STR:2_ \"])", "raw_code": "df = pd.read_csv('my.csv', dtype={'my_column': np.float64}, na_values=['n/a'])", "str_map": {"my.csv": "_STR:0_", "my_column": "_STR:1_", "n/a": "_STR:2_"}}
{"src": ["convert", "nan", "values", "to", "\u2018n/a\u2019", "while", "reading", "rows", "from", "a", "csv", "read_csv", "with", "pandas"], "token": ["df", "=", "pd", ".", "read_csv", "(", "'my.csv'", ",", "na_values", "=", "[", "'n/a'", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP", "STRING", "OP", "OP"], "cano_code": "df = pd.read_csv('my.csv', na_values=['n/a'])", "decano_code": "df = pd.read_csv('my.csv', na_values=['n/a'])", "raw_code": "df = pd.read_csv('my.csv', na_values=['n/a'])", "str_map": {}}
{"src": ["create", "a", "list", "containing", "all", "cartesian", "products", "of", "elements", "in", "list", "a"], "token": ["list", "(", "itertools", ".", "product", "(", "*", "a", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "list(itertools.product(*a))", "decano_code": "list(itertools.product(*a))", "raw_code": "list(itertools.product(*a))", "str_map": {}}
{"src": ["remove", "uppercased", "characters", "in", "string", "s"], "token": ["re", ".", "sub", "(", "'[^A-Z]'", ",", "''", ",", "s", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.sub('[^A-Z]', '', s)", "decano_code": "re.sub('[^A-Z]', '', s)", "raw_code": "re.sub('[^A-Z]', '', s)", "str_map": {}}
{"src": ["convert", "string", "_STR:0_", "into", "a", "DateTime", "object", "using", "format", "_STR:1_"], "token": ["datetime", ".", "strptime", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "datetime.strptime(\" _STR:0_ \", \" _STR:1_ \")", "decano_code": "datetime.strptime(\" _STR:0_ \", \" _STR:1_ \")", "raw_code": "datetime.strptime('2011221', '%Y%W%w')", "str_map": {"2011221": "_STR:0_", "%Y%W%w": "_STR:1_"}}
{"src": ["read", "file", "_STR:0_", "using", "encoding", "_STR:1_"], "token": ["codecs", ".", "open", "(", "\" _STR:0_ \"", ",", "'r'", ",", "\" _STR:1_ \"", ")", ".", "read", "(", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "codecs.open(\" _STR:0_ \", 'r', \" _STR:1_ \").read()", "decano_code": "codecs.open(\" _STR:0_ \", 'r', \" _STR:1_ \").read()", "raw_code": "codecs.open('myfile', 'r', 'iso-8859-1').read()", "str_map": {"myfile": "_STR:0_", "iso-8859-1": "_STR:1_"}}
{"src": ["create", "a", "list", "containing", "elements", "from", "list", "list", "that", "are", "predicate", "to", "function", "f"], "token": ["[", "f", "(", "x", ")", "for", "x", "in", "list", "]"], "type": ["OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP"], "cano_code": "[f(x) for x in list]", "decano_code": "[f(x) for x in list]", "raw_code": "[f(x) for x in list]", "str_map": {}}
{"src": ["regex", "matching", "5-digit", "substrings", "not", "enclosed", "with", "digits", "in", "s"], "token": ["re", ".", "findall", "(", "'(?<!\\\\d)\\\\d{5}(?!\\\\d)'", ",", "s", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.findall('(?<!\\\\d)\\\\d{5}(?!\\\\d)', s)", "decano_code": "re.findall('(?<!\\\\d)\\\\d{5}(?!\\\\d)', s)", "raw_code": "re.findall('(?<!\\\\d)\\\\d{5}(?!\\\\d)', s)", "str_map": {}}
{"src": ["create", "a", "list", "containing", "elements", "of", "list", "a", "if", "the", "sum", "of", "the", "element", "is", "greater", "than", "10"], "token": ["[", "item", "for", "item", "in", "a", "if", "sum", "(", "item", ")", ">", "10", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "OP", "NUMBER", "OP"], "cano_code": "[item for item in a if sum(item) > 10]", "decano_code": "[item for item in a if sum(item) > 10]", "raw_code": "[item for item in a if sum(item) > 10]", "str_map": {}}
{"src": ["convert", "currency", "string", "dollars", "to", "decimal", "cents_int"], "token": ["cents_int", "=", "int", "(", "round", "(", "float", "(", "dollars", ".", "strip", "(", "'$'", ")", ")", "*", "100", ")", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "cents_int = int(round(float(dollars.strip('$')) * 100))", "decano_code": "cents_int = int(round(float(dollars.strip('$')) * 100))", "raw_code": "cents_int = int(round(float(dollars.strip('$')) * 100))", "str_map": {}}
{"src": ["remove", "letters", "from", "string", "example_line", "if", "the", "letter", "exist", "in", "list", "bad_chars"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "dropwhile", "(", "lambda", "x", ":", "x", "in", "bad_chars", ",", "example_line", "[", ":", ":", "-", "1", "]", ")", ")", "[", ":", ":", "-", "1", "]"], "type": ["STRING", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP", "OP", "OP", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "\"\"\"\"\"\".join(dropwhile(lambda x: x in bad_chars, example_line[::-1]))[::-1]", "decano_code": "\"\"\"\"\"\".join(dropwhile(lambda x: x in bad_chars, example_line[::-1]))[::-1]", "raw_code": "\"\"\"\"\"\".join(dropwhile(lambda x: x in bad_chars, example_line[::-1]))[::-1]", "str_map": {}}
{"src": ["creating", "an", "empty", "list", "l"], "token": ["l", "=", "[", "]"], "type": ["NAME", "OP", "OP", "OP"], "cano_code": "l = []", "decano_code": "l = []", "raw_code": "l = []", "str_map": {}}
{"src": ["creating", "an", "empty", "list", "l"], "token": ["l", "=", "list", "(", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "OP"], "cano_code": "l = list()", "decano_code": "l = list()", "raw_code": "l = list()", "str_map": {}}
{"src": ["creating", "an", "empty", "list"], "token": ["list", "(", ")"], "type": ["KEYWORD", "OP", "OP"], "cano_code": "list()", "decano_code": "list()", "raw_code": "list()", "str_map": {}}
{"src": ["creating", "an", "empty", "list"], "token": ["[", "]"], "type": ["OP", "OP"], "cano_code": "[]", "decano_code": "[]", "raw_code": "[]", "str_map": {}}
{"src": ["properly", "quit", "a", "program"], "token": ["sys", ".", "exit", "(", "0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "sys.exit(0)", "decano_code": "sys.exit(0)", "raw_code": "sys.exit(0)", "str_map": {}}
{"src": ["add", "string", "-", "in", "4th", "position", "of", "a", "string", "s"], "token": ["s", "[", ":", "4", "]", "+", "'-'", "+", "s", "[", "4", ":", "]"], "type": ["NAME", "OP", "OP", "NUMBER", "OP", "OP", "STRING", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "s[:4] + '-' + s[4:]", "decano_code": "s[:4] + '-' + s[4:]", "raw_code": "s[:4] + '-' + s[4:]", "str_map": {}}
{"src": ["append", "3", "lists", "in", "one", "list"], "token": ["[", "[", "]", "for", "i", "in", "range", "(", "3", ")", "]"], "type": ["OP", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "OP"], "cano_code": "[[] for i in range(3)]", "decano_code": "[[] for i in range(3)]", "raw_code": "[[] for i in range(3)]", "str_map": {}}
{"src": ["initialize", "a", "list", "of", "empty", "lists", "a", "of", "size", "3"], "token": ["a", "=", "[", "[", "]", "for", "i", "in", "range", "(", "3", ")", "]"], "type": ["NAME", "OP", "OP", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "OP"], "cano_code": "a = [[] for i in range(3)]", "decano_code": "a = [[] for i in range(3)]", "raw_code": "a = [[] for i in range(3)]", "str_map": {}}
{"src": ["request", "URL", "url", "using", "http", "header", "{'referer': my_referer", "}"], "token": ["requests", ".", "get", "(", "url", ",", "headers", "=", "{", "'referer'", ":", "my_referer", "}", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "NAME", "OP", "OP"], "cano_code": "requests.get(url, headers={'referer': my_referer})", "decano_code": "requests.get(url, headers={'referer': my_referer})", "raw_code": "requests.get(url, headers={'referer': my_referer})", "str_map": {}}
{"src": ["set", "the", "y", "axis", "range", "to", "0, 1000", "in", "subplot", "using", "pylab"], "token": ["pylab", ".", "ylim", "(", "[", "0", ",", "1000", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "pylab.ylim([0, 1000])", "decano_code": "pylab.ylim([0, 1000])", "raw_code": "pylab.ylim([0, 1000])", "str_map": {}}
{"src": ["convert", "a", "column", "of", "list", "in", "series", "s", "to", "dummies"], "token": ["pd", ".", "get_dummies", "(", "s", ".", "apply", "(", "pd", ".", "Series", ")", ".", "stack", "(", ")", ")", ".", "sum", "(", "level", "=", "0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "pd.get_dummies(s.apply(pd.Series).stack()).sum(level=0)", "decano_code": "pd.get_dummies(s.apply(pd.Series).stack()).sum(level=0)", "raw_code": "pd.get_dummies(s.apply(pd.Series).stack()).sum(level=0)", "str_map": {}}
{"src": ["finding", "the", "largest", "delta", "between", "two", "integers", "in", "a", "list", "in", "python"], "token": ["max", "(", "abs", "(", "x", "-", "y", ")", "for", "x", ",", "y", "in", "zip", "(", "values", "[", "1", ":", "]", ",", "values", "[", ":", "-", "1", "]", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "max(abs(x - y) for x, y in zip(values[1:], values[:-1]))", "decano_code": "max(abs(x - y) for x, y in zip(values[1:], values[:-1]))", "raw_code": "max(abs(x - y) for x, y in zip(values[1:], values[:-1]))", "str_map": {}}
{"src": ["convert", "a", "hex", "string", "x", "to", "string"], "token": ["y", "=", "str", "(", "int", "(", "x", ",", "16", ")", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "y = str(int(x, 16))", "decano_code": "y = str(int(x, 16))", "raw_code": "y = str(int(x, 16))", "str_map": {}}
{"src": ["check", "if", "string", "a", "is", "an", "integer"], "token": ["a", ".", "isdigit", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "a.isdigit()", "decano_code": "a.isdigit()", "raw_code": "a.isdigit()", "str_map": {}}
{"src": ["function", "to", "check", "if", "a", "string", "is", "a", "number"], "token": ["isdigit", "(", ")"], "type": ["NAME", "OP", "OP"], "cano_code": "isdigit()", "decano_code": "isdigit()", "raw_code": "isdigit()", "str_map": {}}
{"src": ["check", "if", "string", "b", "is", "a", "number"], "token": ["b", ".", "isdigit", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "b.isdigit()", "decano_code": "b.isdigit()", "raw_code": "b.isdigit()", "str_map": {}}
{"src": ["pandas", "read", "comma-separated", "CSV", "file", "s", "and", "skip", "commented", "lines", "starting", "with", "_STR:0_"], "token": ["pd", ".", "read_csv", "(", "StringIO", "(", "s", ")", ",", "sep", "=", "','", ",", "comment", "=", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "pd.read_csv(StringIO(s), sep=',', comment=\" _STR:0_ \")", "decano_code": "pd.read_csv(StringIO(s), sep=',', comment=\" _STR:0_ \")", "raw_code": "pd.read_csv(StringIO(s), sep=',', comment='#')", "str_map": {"#": "_STR:0_"}}
{"src": ["pandas", ":", "change", "all", "the", "values", "of", "a", "column", "_STR:0_", "into", "_STR:1_"], "token": ["df", "[", "\" _STR:0_ \"", "]", "=", "df", "[", "\" _STR:0_ \"", "]", ".", "apply", "(", "lambda", "x", ":", "int", "(", "str", "(", "x", ")", "[", "-", "4", ":", "]", ")", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP", "OP", "OP", "OP"], "cano_code": "df[\" _STR:0_ \"] = df[\" _STR:0_ \"].apply(lambda x: int(str(x)[-4:]))", "decano_code": "df[\" _STR:0_ \"] = df[\" _STR:0_ \"].apply(lambda x: int(str(x)[-4:]))", "raw_code": "df['Date'] = df['Date'].apply(lambda x: int(str(x)[-4:]))", "str_map": {"Date": "_STR:0_", "int(str(x)[-4:])": "_STR:1_"}}
{"src": ["sum", "a", "list", "of", "numbers", "list_of_nums"], "token": ["sum", "(", "list_of_nums", ")"], "type": ["KEYWORD", "OP", "NAME", "OP"], "cano_code": "sum(list_of_nums)", "decano_code": "sum(list_of_nums)", "raw_code": "sum(list_of_nums)", "str_map": {}}
{"src": ["get", "an", "item", "from", "a", "list", "of", "dictionary", "lst", "which", "has", "maximum", "value", "in", "the", "key", "score", "using", "lambda", "function"], "token": ["max", "(", "lst", ",", "key", "=", "lambda", "x", ":", "x", "[", "'score'", "]", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "max(lst, key=lambda x: x['score'])", "decano_code": "max(lst, key=lambda x: x['score'])", "raw_code": "max(lst, key=lambda x: x['score'])", "str_map": {}}
{"src": ["BeautifulSoup", "find", "all", "tags", "with", "attribute", "_STR:0_", "equal", "to", "_STR:1_"], "token": ["soup", ".", "findAll", "(", "attrs", "=", "{", "\" _STR:0_ \"", ":", "\" _STR:1_ \"", "}", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "soup.findAll(attrs={\" _STR:0_ \": \" _STR:1_ \"})", "decano_code": "soup.findAll(attrs={\" _STR:0_ \": \" _STR:1_ \"})", "raw_code": "soup.findAll(attrs={'name': 'description'})", "str_map": {"name": "_STR:0_", "description": "_STR:1_"}}
{"src": ["remove", "all", "spaces", "from", "a", "string", "converted", "from", "dictionary", "{'a': 1, 'b': 'as df'", "}"], "token": ["str", "(", "{", "'a'", ":", "1", ",", "'b'", ":", "'as df'", "}", ")", ".", "replace", "(", "': '", ",", "':'", ")", ".", "replace", "(", "', '", ",", "','", ")"], "type": ["KEYWORD", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "str({'a': 1, 'b': 'as df'}).replace(': ', ':').replace(', ', ',')", "decano_code": "str({'a': 1, 'b': 'as df'}).replace(': ', ':').replace(', ', ',')", "raw_code": "str({'a': 1, 'b': 'as df'}).replace(': ', ':').replace(', ', ',')", "str_map": {}}
{"src": ["convert", "dictionary", "dict", "into", "a", "string", "formatted", "object"], "token": ["'{'", "+", "','", ".", "join", "(", "'{0!r}:{1!r}'", ".", "format", "(", "*", "x", ")", "for", "x", "in", "list", "(", "dct", ".", "items", "(", ")", ")", ")", "+", "'}'"], "type": ["STRING", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "OP", "STRING"], "cano_code": "'{' + ','.join('{0!r}:{1!r}'.format(*x) for x in list(dct.items())) + '}'", "decano_code": "'{' + ','.join('{0!r}:{1!r}'.format(*x) for x in list(dct.items())) + '}'", "raw_code": "'{' + ','.join('{0!r}:{1!r}'.format(*x) for x in list(dct.items())) + '}'", "str_map": {}}
{"src": ["concatenate", "items", "from", "list", "parts", "into", "a", "string", "starting", "from", "the", "second", "element"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "parts", "[", "1", ":", "]", ")"], "type": ["STRING", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "\"\"\"\"\"\".join(parts[1:])", "decano_code": "\"\"\"\"\"\".join(parts[1:])", "raw_code": "\"\"\"\"\"\".join(parts[1:])", "str_map": {}}
{"src": ["insert", "a", "character", "_STR:0_", "into", "a", "string", "in", "front", "of", "_STR:1_", "character", "in", "second", "part", "of", "the", "string"], "token": ["\"\"\",+\"\"\"", ".", "join", "(", "c", ".", "rsplit", "(", "\" _STR:1_ \"", ",", "1", ")", ")"], "type": ["STRING", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NUMBER", "OP", "OP"], "cano_code": "\"\"\",+\"\"\".join(c.rsplit(\" _STR:1_ \", 1))", "decano_code": "\"\"\",+\"\"\".join(c.rsplit(\" _STR:1_ \", 1))", "raw_code": "\"\"\",+\"\"\".join(c.rsplit('+', 1))", "str_map": {",": "_STR:0_", "+": "_STR:1_"}}
{"src": ["delete", "all", "rows", "in", "a", "numpy", "array", "a", "where", "any", "value", "in", "a", "row", "is", "zero", "0"], "token": ["a", "[", "np", ".", "all", "(", "a", "!=", "0", ",", "axis", "=", "1", ")", "]"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "a[np.all(a != 0, axis=1)]", "decano_code": "a[np.all(a != 0, axis=1)]", "raw_code": "a[np.all(a != 0, axis=1)]", "str_map": {}}
{"src": ["extract", "only", "alphabetic", "characters", "from", "a", "string", "your string"], "token": ["\"\"\" \"\"\"", ".", "join", "(", "re", ".", "split", "(", "'[^a-zA-Z]*'", ",", "'your string'", ")", ")"], "type": ["STRING", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "\"\"\" \"\"\".join(re.split('[^a-zA-Z]*', 'your string'))", "decano_code": "\"\"\" \"\"\".join(re.split('[^a-zA-Z]*', 'your string'))", "raw_code": "\"\"\" \"\"\".join(re.split('[^a-zA-Z]*', 'your string'))", "str_map": {}}
{"src": ["extract", "only", "characters", "from", "a", "string", "as", "a", "list"], "token": ["re", ".", "split", "(", "'[^a-zA-Z]*'", ",", "'your string'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.split('[^a-zA-Z]*', 'your string')", "decano_code": "re.split('[^a-zA-Z]*', 'your string')", "raw_code": "re.split('[^a-zA-Z]*', 'your string')", "str_map": {}}
{"src": ["get", "the", "union", "set", "from", "list", "of", "lists", "results_list"], "token": ["results_union", "=", "set", "(", ")", ".", "union", "(", "*", "results_list", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "OP", "OP", "NAME", "OP", "OP", "NAME", "OP"], "cano_code": "results_union = set().union(*results_list)", "decano_code": "results_union = set().union(*results_list)", "raw_code": "results_union = set().union(*results_list)", "str_map": {}}
{"src": ["get", "the", "union", "of", "values", "in", "list", "of", "lists", "result_list"], "token": ["return", "list", "(", "set", "(", "itertools", ".", "chain", "(", "*", "result_list", ")", ")", ")"], "type": ["KEYWORD", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "return list(set(itertools.chain(*result_list)))", "decano_code": "return list(set(itertools.chain(*result_list)))", "raw_code": "return list(set(itertools.chain(*result_list)))", "str_map": {}}
{"src": ["check", "if", "a", "numpy", "array", "a1", "contains", "any", "element", "of", "another", "array", "a2"], "token": ["np", ".", "any", "(", "np", ".", "in1d", "(", "a1", ",", "a2", ")", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "np.any(np.in1d(a1, a2))", "decano_code": "np.any(np.in1d(a1, a2))", "raw_code": "np.any(np.in1d(a1, a2))", "str_map": {}}
{"src": ["removing", "control", "characters", "from", "a", "string", "s"], "token": ["return", "''", ".", "join", "(", "ch", "for", "ch", "in", "s", "if", "unicodedata", ".", "category", "(", "ch", ")", "[", "0", "]", "!=", "'C'", ")"], "type": ["KEYWORD", "STRING", "OP", "NAME", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "OP", "STRING", "OP"], "cano_code": "return ''.join(ch for ch in s if unicodedata.category(ch)[0] != 'C')", "decano_code": "return ''.join(ch for ch in s if unicodedata.category(ch)[0] != 'C')", "raw_code": "return ''.join(ch for ch in s if unicodedata.category(ch)[0] != 'C')", "str_map": {}}
{"src": ["compare", "if", "each", "value", "in", "list", "a", "is", "less", "than", "respective", "index", "value", "in", "list", "b"], "token": ["all", "(", "i", "<", "j", "for", "i", ",", "j", "in", "zip", "(", "a", ",", "b", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "all(i < j for i, j in zip(a, b))", "decano_code": "all(i < j for i, j in zip(a, b))", "raw_code": "all(i < j for i, j in zip(a, b))", "str_map": {}}
{"src": ["python", "selenium", "click", "on", "button", "_STR:0_"], "token": ["driver", ".", "find_element_by_css_selector", "(", "\" _STR:0_ \"", ")", ".", "click", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "driver.find_element_by_css_selector(\" _STR:0_ \").click()", "decano_code": "driver.find_element_by_css_selector(\" _STR:0_ \").click()", "raw_code": "driver.find_element_by_css_selector('.button.c_button.s_button').click()", "str_map": {".button.c_button.s_button": "_STR:0_"}}
{"src": ["python", "selenium", "click", "on", "button"], "token": ["driver", ".", "find_element_by_css_selector", "(", "'.button .c_button .s_button'", ")", ".", "click", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "driver.find_element_by_css_selector('.button .c_button .s_button').click()", "decano_code": "driver.find_element_by_css_selector('.button .c_button .s_button').click()", "raw_code": "driver.find_element_by_css_selector('.button .c_button .s_button').click()", "str_map": {}}
{"src": ["kill", "a", "process", "make.exe", "[", "make", ".", "exe", "]", "from", "python", "script", "on", "windows"], "token": ["os", ".", "system", "(", "'taskkill /im make.exe'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "os.system('taskkill /im make.exe')", "decano_code": "os.system('taskkill /im make.exe')", "raw_code": "os.system('taskkill /im make.exe')", "str_map": {}}
{"src": ["SQLAlchemy", "select", "records", "of", "columns", "of", "table", "my_table", "in", "addition", "to", "current", "date", "column"], "token": ["print", "(", "select", "(", "[", "my_table", ",", "func", ".", "current_date", "(", ")", "]", ")", ".", "execute", "(", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "print(select([my_table, func.current_date()]).execute())", "decano_code": "print(select([my_table, func.current_date()]).execute())", "raw_code": "print(select([my_table, func.current_date()]).execute())", "str_map": {}}
{"src": ["remove", "duplicate", "characters", "from", "string", "_STR:0_"], "token": ["re", ".", "sub", "(", "'([a-z])\\\\1+'", ",", "'\\\\1'", ",", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.sub('([a-z])\\\\1+', '\\\\1', \" _STR:0_ \")", "decano_code": "re.sub('([a-z])\\\\1+', '\\\\1', \" _STR:0_ \")", "raw_code": "re.sub('([a-z])\\\\1+', '\\\\1', 'ffffffbbbbbbbqqq')", "str_map": {"ffffffbbbbbbbqqq": "_STR:0_"}}
{"src": ["remove", "periods", "inbetween", "capital", "letters", "that", "aren't", "immediately", "preceeded", "by", "word", "character(s", ")", "in", "a", "string", "s", "using", "regular", "expressions"], "token": ["re", ".", "sub", "(", "'(?<!\\\\w)([A-Z])\\\\.'", ",", "'\\\\1'", ",", "s", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.sub('(?<!\\\\w)([A-Z])\\\\.', '\\\\1', s)", "decano_code": "re.sub('(?<!\\\\w)([A-Z])\\\\.', '\\\\1', s)", "raw_code": "re.sub('(?<!\\\\w)([A-Z])\\\\.', '\\\\1', s)", "str_map": {}}
{"src": ["get", "a", "list", "of", "strings", "split_text", "with", "fixed", "chunk", "size", "n", "from", "a", "string", "the_list"], "token": ["split_list", "=", "[", "the_list", "[", "i", ":", "i", "+", "n", "]", "for", "i", "in", "range", "(", "0", ",", "len", "(", "the_list", ")", ",", "n", ")", "]"], "type": ["NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "split_list = [the_list[i:i + n] for i in range(0, len(the_list), n)]", "decano_code": "split_list = [the_list[i:i + n] for i in range(0, len(the_list), n)]", "raw_code": "split_list = [the_list[i:i + n] for i in range(0, len(the_list), n)]", "str_map": {}}
{"src": ["match", "string", "_STR:0_", "with", "regex", "_STR:1_", "then", "replace", "it", "with", "regex", "_STR:2_"], "token": ["re", ".", "sub", "(", "\" _STR:1_ \"", ",", "\" _STR:2_ \"", ",", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.sub(\" _STR:1_ \", \" _STR:2_ \", \" _STR:0_ \")", "decano_code": "re.sub(\" _STR:1_ \", \" _STR:2_ \", \" _STR:0_ \")", "raw_code": "re.sub('\\\\b(this|string)\\\\b', '<markup>\\\\1</markup>', 'this is my string')", "str_map": {"this is my string": "_STR:0_", "\\b(this|string)\\b": "_STR:1_", "<markup>\\1</markup>": "_STR:2_"}}
{"src": ["output", "data", "of", "the", "first", "7", "columns", "of", "pandas", "dataframe"], "token": ["pandas", ".", "set_option", "(", "'display.max_columns'", ",", "7", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NUMBER", "OP"], "cano_code": "pandas.set_option('display.max_columns', 7)", "decano_code": "pandas.set_option('display.max_columns', 7)", "raw_code": "pandas.set_option('display.max_columns', 7)", "str_map": {}}
{"src": ["display", "maximum", "output", "data", "of", "columns", "in", "dataframe", "pandas", "that", "will", "fit", "into", "the", "screen"], "token": ["pandas", ".", "set_option", "(", "'display.max_columns'", ",", "None", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "OP"], "cano_code": "pandas.set_option('display.max_columns', None)", "decano_code": "pandas.set_option('display.max_columns', None)", "raw_code": "pandas.set_option('display.max_columns', None)", "str_map": {}}
{"src": ["set", "the", "value", "in", "column", "_STR:0_", "to", "NaN", "if", "the", "corresponding", "value", "in", "column", "_STR:1_", "is", "equal", "to", "0", "in", "pandas", "dataframe", "df"], "token": ["df", ".", "ix", "[", "df", ".", "A", "==", "0", ",", "\" _STR:0_ \"", "]", "=", "np", ".", "nan"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME"], "cano_code": "df.ix[df.A == 0, \" _STR:0_ \"] = np.nan", "decano_code": "df.ix[df.A == 0, \" _STR:0_ \"] = np.nan", "raw_code": "df.ix[df.A == 0, 'B'] = np.nan", "str_map": {"B": "_STR:0_", "A": "_STR:1_"}}
{"src": ["selecting", "element", "_STR:0_", "followed", "by", "text", "_STR:1_", "with", "selenium", "WebDriver", "driver"], "token": ["driver", ".", "find_element_by_xpath", "(", "\"//li/label/input[contains(..,'polishpottery')]\"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "driver.find_element_by_xpath(\"//li/label/input[contains(..,'polishpottery')]\")", "decano_code": "driver.find_element_by_xpath(\"//li/label/input[contains(..,'polishpottery')]\")", "raw_code": "driver.find_element_by_xpath(\"//li/label/input[contains(..,'polishpottery')]\")", "str_map": {"//li/label/input": "_STR:0_", "polishpottery": "_STR:1_"}}
{"src": ["sort", "a", "list", "of", "dictionaries", "mylist", "by", "keys", "_STR:0_", "and", "_STR:1_"], "token": ["mylist", ".", "sort", "(", "key", "=", "operator", ".", "itemgetter", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "mylist.sort(key=operator.itemgetter(\" _STR:0_ \", \" _STR:1_ \"))", "decano_code": "mylist.sort(key=operator.itemgetter(\" _STR:0_ \", \" _STR:1_ \"))", "raw_code": "mylist.sort(key=operator.itemgetter('weight', 'factor'))", "str_map": {"weight": "_STR:0_", "factor": "_STR:1_"}}
{"src": ["ordering", "a", "list", "of", "dictionaries", "mylist", "by", "elements", "_STR:0_", "and", "_STR:1_"], "token": ["mylist", ".", "sort", "(", "key", "=", "lambda", "d", ":", "(", "d", "[", "\" _STR:0_ \"", "]", ",", "d", "[", "\" _STR:1_ \"", "]", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "mylist.sort(key=lambda d: (d[\" _STR:0_ \"], d[\" _STR:1_ \"]))", "decano_code": "mylist.sort(key=lambda d: (d[\" _STR:0_ \"], d[\" _STR:1_ \"]))", "raw_code": "mylist.sort(key=lambda d: (d['weight'], d['factor']))", "str_map": {"weight": "_STR:0_", "factor": "_STR:1_"}}
{"src": ["convert", "a", "list", "of", "lists", "lol", "to", "a", "dictionary", "with", "key", "as", "second", "value", "of", "a", "list", "and", "value", "as", "list", "itself"], "token": ["{", "x", "[", "1", "]", ":", "x", "for", "x", "in", "lol", "}"], "type": ["OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "{x[1]: x for x in lol}", "decano_code": "{x[1]: x for x in lol}", "raw_code": "{x[1]: x for x in lol}", "str_map": {}}
{"src": ["sort", "keys", "of", "dictionary", "_STR:0_", "based", "on", "their", "values"], "token": ["sorted", "(", "d", ",", "key", "=", "lambda", "k", ":", "d", "[", "k", "]", "[", "1", "]", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "sorted(d, key=lambda k: d[k][1])", "decano_code": "sorted(d, key=lambda k: d[k][1])", "raw_code": "sorted(d, key=lambda k: d[k][1])", "str_map": {"d": "_STR:0_"}}
{"src": ["round", "123", "to", "100"], "token": ["int", "(", "round", "(", "123", ",", "-", "2", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "int(round(123, -2))", "decano_code": "int(round(123, -2))", "raw_code": "int(round(123, -2))", "str_map": {}}
{"src": ["create", "file", "_STR:0_", "if", "file", "_STR:0_", "does", "not", "exist"], "token": ["fd", "=", "os", ".", "open", "(", "\" _STR:0_ \"", ",", "os", ".", "O_WRONLY", "|", "os", ".", "O_CREAT", "|", "os", ".", "O_EXCL", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "fd = os.open(\" _STR:0_ \", os.O_WRONLY | os.O_CREAT | os.O_EXCL)", "decano_code": "fd = os.open(\" _STR:0_ \", os.O_WRONLY | os.O_CREAT | os.O_EXCL)", "raw_code": "fd = os.open('x', os.O_WRONLY | os.O_CREAT | os.O_EXCL)", "str_map": {"x": "_STR:0_"}}
{"src": ["get", "a", "list", "of", "last", "trailing", "words", "from", "another", "list", "of", "strings`Original_List", "`"], "token": ["new_list", "=", "[", "x", ".", "split", "(", ")", "[", "-", "1", "]", "for", "x", "in", "Original_List", "]"], "type": ["NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "new_list = [x.split()[-1] for x in Original_List]", "decano_code": "new_list = [x.split()[-1] for x in Original_List]", "raw_code": "new_list = [x.split()[-1] for x in Original_List]", "str_map": {}}
{"src": ["reverse", "a", "string", "_STR:0_"], "token": ["\" _STR:0_ \"", "[", ":", ":", "(", "-", "1", ")", "]"], "type": ["STRING", "OP", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "\" _STR:0_ \"[::(-1)]", "decano_code": "\" _STR:0_ \"[::(-1)]", "raw_code": "'hello world'[::(-1)]", "str_map": {"hello world": "_STR:0_"}}
{"src": ["reverse", "list", "s"], "token": ["s", "[", ":", ":", "(", "-", "1", ")", "]"], "type": ["NAME", "OP", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "s[::(-1)]", "decano_code": "s[::(-1)]", "raw_code": "s[::(-1)]", "str_map": {}}
{"src": ["reverse", "string", "_STR:0_"], "token": ["''", ".", "join", "(", "reversed", "(", "\" _STR:0_ \"", ")", ")"], "type": ["STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "OP"], "cano_code": "''.join(reversed(\" _STR:0_ \"))", "decano_code": "''.join(reversed(\" _STR:0_ \"))", "raw_code": "''.join(reversed('foo'))", "str_map": {"foo": "_STR:0_"}}
{"src": ["reverse", "a", "string", "string"], "token": ["''", ".", "join", "(", "reversed", "(", "string", ")", ")"], "type": ["STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "''.join(reversed(string))", "decano_code": "''.join(reversed(string))", "raw_code": "''.join(reversed(string))", "str_map": {}}
{"src": ["reverse", "a", "string", "_STR:0_"], "token": ["\" _STR:0_ \"", "[", ":", ":", "(", "-", "1", ")", "]"], "type": ["STRING", "OP", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "\" _STR:0_ \"[::(-1)]", "decano_code": "\" _STR:0_ \"[::(-1)]", "raw_code": "'foo'[::(-1)]", "str_map": {"foo": "_STR:0_"}}
{"src": ["reverse", "a", "string", "a_string"], "token": ["a_string", "[", ":", ":", "(", "-", "1", ")", "]"], "type": ["NAME", "OP", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "a_string[::(-1)]", "decano_code": "a_string[::(-1)]", "raw_code": "a_string[::(-1)]", "str_map": {}}
{"src": ["reverse", "a", "string", "a_string"], "token": ["def", "reversed_string", "(", "a_string", ")", ":", "\n", "    ", "return", "a_string", "[", ":", ":", "(", "-", "1", ")", "]", ""], "type": ["KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "NAME", "OP", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP", "DEDENT"], "cano_code": "def reversed_string(a_string):\n    return a_string[::(-1)]", "decano_code": "def reversed_string(a_string):\n    return a_string[::(-1)]", "raw_code": "def reversed_string(a_string):\n    return a_string[::(-1)]", "str_map": {}}
{"src": ["reverse", "a", "string", "s"], "token": ["''", ".", "join", "(", "reversed", "(", "s", ")", ")"], "type": ["STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "''.join(reversed(s))", "decano_code": "''.join(reversed(s))", "raw_code": "''.join(reversed(s))", "str_map": {}}
{"src": ["generate", "a", "string", "of", "numbers", "separated", "by", "comma", "which", "is", "divisible", "by", "4", "with", "remainder", "1", "or", "2", "."], "token": ["\"\"\",\"\"\"", ".", "join", "(", "str", "(", "i", ")", "for", "i", "in", "range", "(", "100", ")", "if", "i", "%", "4", "in", "(", "1", ",", "2", ")", ")"], "type": ["STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "OP", "NUMBER", "KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "\"\"\",\"\"\".join(str(i) for i in range(100) if i % 4 in (1, 2))", "decano_code": "\"\"\",\"\"\".join(str(i) for i in range(100) if i % 4 in (1, 2))", "raw_code": "\"\"\",\"\"\".join(str(i) for i in range(100) if i % 4 in (1, 2))", "str_map": {}}
{"src": ["convert", "list", "lst", "of", "key", ",", "value", "pairs", "into", "a", "dictionary"], "token": ["dict", "(", "[", "(", "e", "[", "0", "]", ",", "int", "(", "e", "[", "1", "]", ")", ")", "for", "e", "in", "lst", "]", ")"], "type": ["KEYWORD", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "dict([(e[0], int(e[1])) for e in lst])", "decano_code": "dict([(e[0], int(e[1])) for e in lst])", "raw_code": "dict([(e[0], int(e[1])) for e in lst])", "str_map": {}}
{"src": ["sorting", "a", "list", "of", "tuples", "list_of_tuples", "where", "each", "tuple", "is", "reversed"], "token": ["sorted", "(", "list_of_tuples", ",", "key", "=", "lambda", "tup", ":", "tup", "[", ":", ":", "-", "1", "]", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "sorted(list_of_tuples, key=lambda tup: tup[::-1])", "decano_code": "sorted(list_of_tuples, key=lambda tup: tup[::-1])", "raw_code": "sorted(list_of_tuples, key=lambda tup: tup[::-1])", "str_map": {}}
{"src": ["sorting", "a", "list", "of", "tuples", "list_of_tuples", "by", "second", "key"], "token": ["sorted", "(", "list_of_tuples", ",", "key", "=", "lambda", "tup", ":", "tup", "[", "1", "]", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "sorted(list_of_tuples, key=lambda tup: tup[1])", "decano_code": "sorted(list_of_tuples, key=lambda tup: tup[1])", "raw_code": "sorted(list_of_tuples, key=lambda tup: tup[1])", "str_map": {}}
{"src": ["concatenating", "two", "one-dimensional", "NumPy", "arrays", "_STR:0_", "and", "_STR:1_", "."], "token": ["numpy", ".", "concatenate", "(", "[", "a", ",", "b", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "numpy.concatenate([a, b])", "decano_code": "numpy.concatenate([a, b])", "raw_code": "numpy.concatenate([a, b])", "str_map": {"a": "_STR:0_", "b": "_STR:1_"}}
{"src": ["writing", "items", "in", "list", "thelist", "to", "file", "thefile"], "token": ["for", "item", "in", "thelist", ":", "\n", "    ", "thefile", ".", "write", "(", "(", "'%s\\n'", "%", "item", ")", ")", ""], "type": ["KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NEWLINE", "INDENT", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "NAME", "OP", "OP", "DEDENT"], "cano_code": "for item in thelist:\n    thefile.write(('%s\\n' % item))", "decano_code": "for item in thelist:\n    thefile.write(('%s\\n' % item))", "raw_code": "for item in thelist:\n    thefile.write(('%s\\n' % item))", "str_map": {}}
{"src": ["writing", "items", "in", "list", "thelist", "to", "file", "thefile"], "token": ["for", "item", "in", "thelist", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "for item in thelist:\n    pass", "decano_code": "for item in thelist:\n    pass", "raw_code": "for item in thelist:\n    pass", "str_map": {}}
{"src": ["serialize", "itemlist", "to", "file", "outfile"], "token": ["pickle", ".", "dump", "(", "itemlist", ",", "outfile", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "pickle.dump(itemlist, outfile)", "decano_code": "pickle.dump(itemlist, outfile)", "raw_code": "pickle.dump(itemlist, outfile)", "str_map": {}}
{"src": ["writing", "items", "in", "list", "itemlist", "to", "file", "outfile"], "token": ["outfile", ".", "write", "(", "'\\n'", ".", "join", "(", "itemlist", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "outfile.write('\\n'.join(itemlist))", "decano_code": "outfile.write('\\n'.join(itemlist))", "raw_code": "outfile.write('\\n'.join(itemlist))", "str_map": {}}
{"src": ["update", "a", "user", "'", "s", "name", "as", "Bob Marley", "having", "id", "123", "in", "SQLAlchemy"], "token": ["session", ".", "query", "(", "User", ")", ".", "filter_by", "(", "id", "=", "123", ")", ".", "update", "(", "{", "'name'", ":", "'Bob Marley'", "}", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "KEYWORD", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "session.query(User).filter_by(id=123).update({'name': 'Bob Marley'})", "decano_code": "session.query(User).filter_by(id=123).update({'name': 'Bob Marley'})", "raw_code": "session.query(User).filter_by(id=123).update({'name': 'Bob Marley'})", "str_map": {}}
{"src": ["send", "cookies", "cookie", "in", "a", "post", "request", "to", "url", "_STR:0_", "with", "the", "python", "requests", "library"], "token": ["r", "=", "requests", ".", "post", "(", "\" _STR:0_ \"", ",", "cookies", "=", "cookie", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "r = requests.post(\" _STR:0_ \", cookies=cookie)", "decano_code": "r = requests.post(\" _STR:0_ \", cookies=cookie)", "raw_code": "r = requests.post('http://wikipedia.org', cookies=cookie)", "str_map": {"http://wikipedia.org": "_STR:0_"}}
{"src": ["insert", "directory", "_STR:0_", "at", "the", "0th", "index", "of", "current", "directory"], "token": ["sys", ".", "path", ".", "insert", "(", "0", ",", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "STRING", "OP"], "cano_code": "sys.path.insert(0, \" _STR:0_ \")", "decano_code": "sys.path.insert(0, \" _STR:0_ \")", "raw_code": "sys.path.insert(0, 'libs')", "str_map": {"libs": "_STR:0_"}}
{"src": ["get", "current", "date", "and", "time"], "token": ["datetime", ".", "datetime", ".", "now", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "datetime.datetime.now()", "decano_code": "datetime.datetime.now()", "raw_code": "datetime.datetime.now()", "str_map": {}}
{"src": ["get", "current", "time"], "token": ["datetime", ".", "datetime", ".", "now", "(", ")", ".", "time", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "datetime.datetime.now().time()", "decano_code": "datetime.datetime.now().time()", "raw_code": "datetime.datetime.now().time()", "str_map": {}}
{"src": ["get", "current", "time", "in", "pretty", "format"], "token": ["strftime", "(", "'%Y-%m-%d %H:%M:%S'", ",", "gmtime", "(", ")", ")"], "type": ["NAME", "OP", "STRING", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "strftime('%Y-%m-%d %H:%M:%S', gmtime())", "decano_code": "strftime('%Y-%m-%d %H:%M:%S', gmtime())", "raw_code": "strftime('%Y-%m-%d %H:%M:%S', gmtime())", "str_map": {}}
{"src": ["get", "current", "time", "in", "string", "format"], "token": ["str", "(", "datetime", ".", "now", "(", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "str(datetime.now())", "decano_code": "str(datetime.now())", "raw_code": "str(datetime.now())", "str_map": {}}
{"src": ["get", "current", "time"], "token": ["datetime", ".", "datetime", ".", "time", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "datetime.datetime.time(datetime.datetime.now())", "decano_code": "datetime.datetime.time(datetime.datetime.now())", "raw_code": "datetime.datetime.time(datetime.datetime.now())", "str_map": {}}
{"src": ["convert", "hex", "_STR:0_", "to", "integer"], "token": ["ord", "(", "\" _STR:0_ \"", ")"], "type": ["KEYWORD", "OP", "STRING", "OP"], "cano_code": "ord(\" _STR:0_ \")", "decano_code": "ord(\" _STR:0_ \")", "raw_code": "ord('\\xff')", "str_map": {"\u00ff": "_STR:0_"}}
{"src": ["identify", "duplicated", "rows", "in", "columns", "_STR:0_", "and", "_STR:1_", "with", "additional", "column", "in", "dataframe", "df"], "token": ["df", ".", "groupby", "(", "[", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", "]", ")", ".", "cumcount", "(", ")", "+", "1"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "NAME", "OP", "OP", "OP", "NUMBER"], "cano_code": "df.groupby([\" _STR:0_ \", \" _STR:1_ \"]).cumcount() + 1", "decano_code": "df.groupby([\" _STR:0_ \", \" _STR:1_ \"]).cumcount() + 1", "raw_code": "df.groupby(['PplNum', 'RoomNum']).cumcount() + 1", "str_map": {"PplNum": "_STR:0_", "RoomNum": "_STR:1_"}}
{"src": ["get", "current", "utc", "time"], "token": ["datetime", ".", "utcnow", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "datetime.utcnow()", "decano_code": "datetime.utcnow()", "raw_code": "datetime.utcnow()", "str_map": {}}
{"src": ["move", "last", "item", "of", "array", "a", "to", "the", "first", "position"], "token": ["a", "[", "-", "1", ":", "]", "+", "a", "[", ":", "-", "1", "]"], "type": ["NAME", "OP", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "a[-1:] + a[:-1]", "decano_code": "a[-1:] + a[:-1]", "raw_code": "a[-1:] + a[:-1]", "str_map": {}}
{"src": ["convert", "dataframe", "df", "to", "a", "pivot", "table", "using", "column", "_STR:0_", ",", "_STR:1_", ",", "and", "_STR:2_", "as", "indexes"], "token": ["df", ".", "set_index", "(", "[", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ",", "\" _STR:2_ \"", "]", ")", ".", "unstack", "(", "level", "=", "-", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP"], "cano_code": "df.set_index([\" _STR:0_ \", \" _STR:1_ \", \" _STR:2_ \"]).unstack(level=-1)", "decano_code": "df.set_index([\" _STR:0_ \", \" _STR:1_ \", \" _STR:2_ \"]).unstack(level=-1)", "raw_code": "df.set_index(['year', 'month', 'item']).unstack(level=-1)", "str_map": {"year": "_STR:0_", "month": "_STR:1_", "item": "_STR:2_"}}
{"src": ["run", "a", "pivot", "with", "a", "multi-index", "year", "and", "month", "in", "a", "pandas", "data", "frame"], "token": ["df", ".", "pivot_table", "(", "values", "=", "'value'", ",", "index", "=", "[", "'year'", ",", "'month'", "]", ",", "columns", "=", "'item'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df.pivot_table(values='value', index=['year', 'month'], columns='item')", "decano_code": "df.pivot_table(values='value', index=['year', 'month'], columns='item')", "raw_code": "df.pivot_table(values='value', index=['year', 'month'], columns='item')", "str_map": {}}
{"src": ["print", "a", "rational", "number", "3/2"], "token": ["print", "(", "'\\n\\x1b[4m'", "+", "'3'", "+", "'\\x1b[0m'", "+", "'\\n2'", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "print('\\n\\x1b[4m' + '3' + '\\x1b[0m' + '\\n2')", "decano_code": "print('\\n\\x1b[4m' + '3' + '\\x1b[0m' + '\\n2')", "raw_code": "print('\\n\\x1b[4m' + '3' + '\\x1b[0m' + '\\n2')", "str_map": {}}
{"src": ["what", "is", "the", "best", "way", "to", "sort", "list", "with", "custom", "sorting", "parameters", "in", "python", "?"], "token": ["li1", ".", "sort", "(", "key", "=", "lambda", "x", ":", "not", "x", ".", "startswith", "(", "'b.'", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "li1.sort(key=lambda x: not x.startswith('b.'))", "decano_code": "li1.sort(key=lambda x: not x.startswith('b.'))", "raw_code": "li1.sort(key=lambda x: not x.startswith('b.'))", "str_map": {}}
{"src": ["iterate", "backwards", "from", "10", "to", "0"], "token": ["range", "(", "10", ",", "0", ",", "-", "1", ")"], "type": ["KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP"], "cano_code": "range(10, 0, -1)", "decano_code": "range(10, 0, -1)", "raw_code": "range(10, 0, -1)", "str_map": {}}
{"src": ["get", "value", "of", "first", "child", "of", "xml", "node", "name"], "token": ["name", "[", "0", "]", ".", "firstChild", ".", "nodeValue"], "type": ["NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NAME"], "cano_code": "name[0].firstChild.nodeValue", "decano_code": "name[0].firstChild.nodeValue", "raw_code": "name[0].firstChild.nodeValue", "str_map": {}}
{"src": ["start", "a", "new", "thread", "for", "myfunction", "with", "parameters", "_STR:0_", "and", "1"], "token": ["thread", ".", "start_new_thread", "(", "myfunction", ",", "(", "\" _STR:0_ \"", ",", "1", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "OP"], "cano_code": "thread.start_new_thread(myfunction, (\" _STR:0_ \", 1))", "decano_code": "thread.start_new_thread(myfunction, (\" _STR:0_ \", 1))", "raw_code": "thread.start_new_thread(myfunction, ('MyStringHere', 1))", "str_map": {"MyStringHere": "_STR:0_"}}
{"src": ["start", "a", "new", "thread", "for", "myfunction", "with", "parameters", "_STR:0_", "and", "1"], "token": ["thread", ".", "start_new_thread", "(", "myfunction", ",", "(", "\" _STR:0_ \"", ",", "1", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "NUMBER", "OP", "OP"], "cano_code": "thread.start_new_thread(myfunction, (\" _STR:0_ \", 1))", "decano_code": "thread.start_new_thread(myfunction, (\" _STR:0_ \", 1))", "raw_code": "thread.start_new_thread(myfunction, ('MyStringHere', 1))", "str_map": {"MyStringHere": "_STR:0_"}}
{"src": ["get", "index", "of", "the", "first", "biggest", "element", "in", "list", "a"], "token": ["a", ".", "index", "(", "max", "(", "a", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "a.index(max(a))", "decano_code": "a.index(max(a))", "raw_code": "a.index(max(a))", "str_map": {}}
{"src": ["replace", "periods", ".", "that", "are", "not", "followed", "by", "periods", "or", "spaces", "with", "a", "period", "and", "a", "space", ". "], "token": ["re", ".", "sub", "(", "'\\\\.(?=[^ .])'", ",", "'. '", ",", "para", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.sub('\\\\.(?=[^ .])', '. ', para)", "decano_code": "re.sub('\\\\.(?=[^ .])', '. ', para)", "raw_code": "re.sub('\\\\.(?=[^ .])', '. ', para)", "str_map": {}}
{"src": ["convert", "a", "string", "a", "of", "letters", "embedded", "in", "squared", "brackets", "into", "embedded", "lists"], "token": ["[", "i", ".", "split", "(", ")", "for", "i", "in", "re", ".", "findall", "(", "'\\\\[([^\\\\[\\\\]]+)\\\\]'", ",", "a", ")", "]"], "type": ["OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP"], "cano_code": "[i.split() for i in re.findall('\\\\[([^\\\\[\\\\]]+)\\\\]', a)]", "decano_code": "[i.split() for i in re.findall('\\\\[([^\\\\[\\\\]]+)\\\\]', a)]", "raw_code": "[i.split() for i in re.findall('\\\\[([^\\\\[\\\\]]+)\\\\]', a)]", "str_map": {}}
{"src": ["extract", "dictionary", "d", "from", "list", "a", "where", "the", "value", "associated", "with", "the", "key", "_STR:0_", "of", "dictionary", "d", "is", "equal", "to", "_STR:1_"], "token": ["[", "d", "for", "d", "in", "a", "if", "d", "[", "\" _STR:0_ \"", "]", "==", "\" _STR:1_ \"", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "STRING", "OP", "OP", "STRING", "OP"], "cano_code": "[d for d in a if d[\" _STR:0_ \"] == \" _STR:1_ \"]", "decano_code": "[d for d in a if d[\" _STR:0_ \"] == \" _STR:1_ \"]", "raw_code": "[d for d in a if d['name'] == 'pluto']", "str_map": {"name": "_STR:0_", "pluto": "_STR:1_"}}
{"src": ["extract", "dictionary", "from", "list", "of", "dictionaries", "based", "on", "a", "key", "'", "s", "value", "."], "token": ["[", "d", "for", "d", "in", "a", "if", "d", "[", "'name'", "]", "==", "'pluto'", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "STRING", "OP", "OP", "STRING", "OP"], "cano_code": "[d for d in a if d['name'] == 'pluto']", "decano_code": "[d for d in a if d['name'] == 'pluto']", "raw_code": "[d for d in a if d['name'] == 'pluto']", "str_map": {}}
{"src": ["retrieve", "list", "of", "values", "from", "dictionary", "_STR:0_"], "token": ["list", "(", "d", ".", "values", "(", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "list(d.values())", "decano_code": "list(d.values())", "raw_code": "list(d.values())", "str_map": {"d": "_STR:0_"}}
{"src": ["replace", "occurrences", "of", "two", "whitespaces", "or", "more", "with", "one", "whitespace", "_STR:0_", "in", "string", "s"], "token": ["re", ".", "sub", "(", "' +'", ",", "\" _STR:0_ \"", ",", "s", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.sub(' +', \" _STR:0_ \", s)", "decano_code": "re.sub(' +', \" _STR:0_ \", s)", "raw_code": "re.sub(' +', ' ', s)", "str_map": {" ": "_STR:0_"}}
{"src": ["change", "the", "mode", "of", "file", "_STR:0_", "to", "permission", "number", "484"], "token": ["os", ".", "chmod", "(", "\" _STR:0_ \"", ",", "484", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NUMBER", "OP"], "cano_code": "os.chmod(\" _STR:0_ \", 484)", "decano_code": "os.chmod(\" _STR:0_ \", 484)", "raw_code": "os.chmod('my_script.sh', 484)", "str_map": {"my_script.sh": "_STR:0_"}}
{"src": ["write", "pandas", "dataframe", "df", "to", "the", "file", "_STR:0_", "without", "row", "names"], "token": ["df", ".", "to_csv", "(", "\" _STR:0_ \"", ",", "index", "=", "False", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df.to_csv(\" _STR:0_ \", index=False)", "decano_code": "df.to_csv(\" _STR:0_ \", index=False)", "raw_code": "df.to_csv('c:\\\\data\\\\t.csv', index=False)", "str_map": {"c:\\data\\t.csv": "_STR:0_"}}
{"src": ["remove", "all", "words", "which", "contains", "number", "from", "a", "string", "words", "using", "regex"], "token": ["re", ".", "sub", "(", "'\\\\w*\\\\d\\\\w*'", ",", "''", ",", "words", ")", ".", "strip", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "re.sub('\\\\w*\\\\d\\\\w*', '', words).strip()", "decano_code": "re.sub('\\\\w*\\\\d\\\\w*', '', words).strip()", "raw_code": "re.sub('\\\\w*\\\\d\\\\w*', '', words).strip()", "str_map": {}}
{"src": ["control", "the", "keyboard", "and", "mouse", "with", "dogtail", "in", "linux"], "token": ["dogtail", ".", "rawinput", ".", "click", "(", "100", ",", "100", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "dogtail.rawinput.click(100, 100)", "decano_code": "dogtail.rawinput.click(100, 100)", "raw_code": "dogtail.rawinput.click(100, 100)", "str_map": {}}
{"src": ["parse", "date", "string", "_STR:0_", "using", "format", "_STR:1_"], "token": ["datetime", ".", "strptime", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "datetime.strptime(\" _STR:0_ \", \" _STR:1_ \")", "decano_code": "datetime.strptime(\" _STR:0_ \", \" _STR:1_ \")", "raw_code": "datetime.strptime('2009/05/13 19:19:30 -0400', '%Y/%m/%d %H:%M:%S %z')", "str_map": {"2009/05/13 19:19:30 -0400": "_STR:0_", "%Y/%m/%d %H:%M:%S %z": "_STR:1_"}}
{"src": ["get", "the", "position", "of", "a", "regex", "match", "for", "word", "is", "in", "a", "string", "string"], "token": ["re", ".", "search", "(", "'\\\\bis\\\\b'", ",", "String", ")", ".", "start", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "re.search('\\\\bis\\\\b', String).start()", "decano_code": "re.search('\\\\bis\\\\b', String).start()", "raw_code": "re.search('\\\\bis\\\\b', String).start()", "str_map": {}}
{"src": ["get", "the", "position", "of", "a", "regex", "match", "is", "in", "a", "string", "string"], "token": ["re", ".", "search", "(", "'is'", ",", "String", ")", ".", "start", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "re.search('is', String).start()", "decano_code": "re.search('is', String).start()", "raw_code": "re.search('is', String).start()", "str_map": {}}
{"src": ["input", "an", "integer", "tuple", "from", "user"], "token": ["tuple", "(", "map", "(", "int", ",", "input", "(", ")", ".", "split", "(", "','", ")", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "tuple(map(int, input().split(',')))", "decano_code": "tuple(map(int, input().split(',')))", "raw_code": "tuple(map(int, input().split(',')))", "str_map": {}}
{"src": ["input", "a", "tuple", "of", "integers", "from", "user"], "token": ["tuple", "(", "int", "(", "x", ".", "strip", "(", ")", ")", "for", "x", "in", "input", "(", ")", ".", "split", "(", "','", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "tuple(int(x.strip()) for x in input().split(','))", "decano_code": "tuple(int(x.strip()) for x in input().split(','))", "raw_code": "tuple(int(x.strip()) for x in input().split(','))", "str_map": {}}
{"src": ["replace", "unicode", "character", "_STR:0_", "in", "string", "_STR:1_", "with", "_STR:2_"], "token": ["str", ".", "decode", "(", "'utf-8'", ")", ".", "replace", "(", "\" _STR:0_ \"", ",", "\" _STR:2_ \"", ")", ".", "encode", "(", "'utf-8'", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "str.decode('utf-8').replace(\" _STR:0_ \", \" _STR:2_ \").encode('utf-8')", "decano_code": "str.decode('utf-8').replace(\" _STR:0_ \", \" _STR:2_ \").encode('utf-8')", "raw_code": "str.decode('utf-8').replace('\\u2022', '*').encode('utf-8')", "str_map": {"\u2022": "_STR:0_", "str": "_STR:1_", "*": "_STR:2_"}}
{"src": ["replace", "unicode", "characters", "_STR:0_", "\\u2022", "'", "in", "string", "_STR:1_", "with", "_STR:2_"], "token": ["str", ".", "decode", "(", "'utf-8'", ")", ".", "replace", "(", "'\\u2022'", ",", "\" _STR:2_ \"", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "str.decode('utf-8').replace('\\u2022', \" _STR:2_ \")", "decano_code": "str.decode('utf-8').replace('\\u2022', \" _STR:2_ \")", "raw_code": "str.decode('utf-8').replace('\\u2022', '*')", "str_map": {"": "_STR:0_", "str": "_STR:1_", "*": "_STR:2_"}}
{"src": ["convert", "ndarray", "with", "shape", "3x3", "to", "array"], "token": ["np", ".", "zeros", "(", "(", "3", ",", "3", ")", ")", ".", "ravel", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "np.zeros((3, 3)).ravel()", "decano_code": "np.zeros((3, 3)).ravel()", "raw_code": "np.zeros((3, 3)).ravel()", "str_map": {}}
{"src": ["get", "os", "name"], "token": ["import", "platform", "\n", "platform", ".", "system", "(", ")"], "type": ["KEYWORD", "NAME", "NEWLINE", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "import platform\nplatform.system()", "decano_code": "import platform\nplatform.system()", "raw_code": "import platform\nplatform.system()", "str_map": {}}
{"src": ["get", "os", "version"], "token": ["import", "platform", "\n", "platform", ".", "release", "(", ")"], "type": ["KEYWORD", "NAME", "NEWLINE", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "import platform\nplatform.release()", "decano_code": "import platform\nplatform.release()", "raw_code": "import platform\nplatform.release()", "str_map": {}}
{"src": ["get", "the", "name", "of", "the", "OS"], "token": ["print", "(", "os", ".", "name", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "print(os.name)", "decano_code": "print(os.name)", "raw_code": "print(os.name)", "str_map": {}}
{"src": ["what", "is", "the", "most", "pythonic", "way", "to", "exclude", "elements", "of", "a", "list", "that", "start", "with", "a", "specific", "character", "?"], "token": ["[", "x", "for", "x", "in", "my_list", "if", "not", "x", ".", "startswith", "(", "'#'", ")", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "[x for x in my_list if not x.startswith('#')]", "decano_code": "[x for x in my_list if not x.startswith('#')]", "raw_code": "[x for x in my_list if not x.startswith('#')]", "str_map": {}}
{"src": ["replace", "fields", "delimited", "by", "braces", "{", "}", "in", "string", "_STR:0_", "with", "string", "_STR:1_"], "token": ["\" _STR:0_ \"", ".", "format", "(", "\" _STR:1_ \"", ")"], "type": ["STRING", "OP", "KEYWORD", "OP", "STRING", "OP"], "cano_code": "\" _STR:0_ \".format(\" _STR:1_ \")", "decano_code": "\" _STR:0_ \".format(\" _STR:1_ \")", "raw_code": "\"\"\"Day old bread, 50% sale {0}\"\"\".format('today')", "str_map": {"Day old bread, 50% sale {0}": "_STR:0_", "today": "_STR:1_"}}
{"src": ["get", "a", "minimum", "value", "from", "a", "list", "of", "tuples", "list", "with", "values", "of", "type", "string", "and", "float", "with", "nan"], "token": ["min", "(", "list", ",", "key", "=", "lambda", "x", ":", "float", "(", "'inf'", ")", "if", "math", ".", "isnan", "(", "x", "[", "1", "]", ")", "else", "x", "[", "1", "]", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "KEYWORD", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "min(list, key=lambda x: float('inf') if math.isnan(x[1]) else x[1])", "decano_code": "min(list, key=lambda x: float('inf') if math.isnan(x[1]) else x[1])", "raw_code": "min(list, key=lambda x: float('inf') if math.isnan(x[1]) else x[1])", "str_map": {}}
{"src": ["find", "average", "of", "a", "nested", "list", "a"], "token": ["a", "=", "[", "(", "sum", "(", "x", ")", "/", "len", "(", "x", ")", ")", "for", "x", "in", "zip", "(", "*", "a", ")", "]"], "type": ["NAME", "OP", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "a = [(sum(x) / len(x)) for x in zip(*a)]", "decano_code": "a = [(sum(x) / len(x)) for x in zip(*a)]", "raw_code": "a = [(sum(x) / len(x)) for x in zip(*a)]", "str_map": {}}
{"src": ["log", "info", "message", "_STR:0_", "with", "attributes", "{'app_name': 'myapp'", "}"], "token": ["logging", ".", "info", "(", "\" _STR:0_ \"", ",", "extra", "=", "{", "'app_name'", ":", "'myapp'", "}", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "logging.info(\" _STR:0_ \", extra={'app_name': 'myapp'})", "decano_code": "logging.info(\" _STR:0_ \", extra={'app_name': 'myapp'})", "raw_code": "logging.info('Log message', extra={'app_name': 'myapp'})", "str_map": {"Log message": "_STR:0_"}}
{"src": ["replace", "values", "of", "dataframe", "df", "with", "true", "if", "numeric"], "token": ["df", ".", "applymap", "(", "lambda", "x", ":", "isinstance", "(", "x", ",", "(", "int", ",", "float", ")", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "OP", "OP"], "cano_code": "df.applymap(lambda x: isinstance(x, (int, float)))", "decano_code": "df.applymap(lambda x: isinstance(x, (int, float)))", "raw_code": "df.applymap(lambda x: isinstance(x, (int, float)))", "str_map": {}}
{"src": ["sort", "list", "l", "based", "on", "its", "elements", "'", "digits"], "token": ["sorted", "(", "l", ",", "key", "=", "lambda", "x", ":", "int", "(", "re", ".", "search", "(", "'\\\\d+'", ",", "x", ")", ".", "group", "(", "0", ")", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "sorted(l, key=lambda x: int(re.search('\\\\d+', x).group(0)))", "decano_code": "sorted(l, key=lambda x: int(re.search('\\\\d+', x).group(0)))", "raw_code": "sorted(l, key=lambda x: int(re.search('\\\\d+', x).group(0)))", "str_map": {}}
{"src": ["close", "the", "window", "in", "tkinter"], "token": ["self", ".", "root", ".", "destroy", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "self.root.destroy()", "decano_code": "self.root.destroy()", "raw_code": "self.root.destroy()", "str_map": {}}
{"src": ["get", "mean", "of", "columns", "2, 5, 6, 7, 8", "for", "all", "rows", "in", "dataframe", "df"], "token": ["df", ".", "iloc", "[", ":", ",", "(", "[", "2", ",", "5", ",", "6", ",", "7", ",", "8", "]", ")", "]", ".", "mean", "(", "axis", "=", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "df.iloc[:, ([2, 5, 6, 7, 8])].mean(axis=1)", "decano_code": "df.iloc[:, ([2, 5, 6, 7, 8])].mean(axis=1)", "raw_code": "df.iloc[:, ([2, 5, 6, 7, 8])].mean(axis=1)", "str_map": {}}
{"src": ["filter", "dataframe", "df", "by", "sub-level", "index", "_STR:0_", "in", "pandas"], "token": ["df", "[", "df", ".", "index", ".", "map", "(", "lambda", "x", ":", "x", "[", "1", "]", ".", "endswith", "(", "\" _STR:0_ \"", ")", ")", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "df[df.index.map(lambda x: x[1].endswith(\" _STR:0_ \"))]", "decano_code": "df[df.index.map(lambda x: x[1].endswith(\" _STR:0_ \"))]", "raw_code": "df[df.index.map(lambda x: x[1].endswith('0630'))]", "str_map": {"0630": "_STR:0_"}}
{"src": ["flask-sqlalchemy", "delete", "row", "page"], "token": ["db", ".", "session", ".", "delete", "(", "page", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "db.session.delete(page)", "decano_code": "db.session.delete(page)", "raw_code": "db.session.delete(page)", "str_map": {}}
{"src": ["format", "a", "string", "u'Andr\\xc3\\xa9", "'", "that", "has", "unicode", "characters"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "chr", "(", "ord", "(", "c", ")", ")", "for", "c", "in", "'Andr\\xc3\\xa9'", ")"], "type": ["STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "STRING", "OP"], "cano_code": "\"\"\"\"\"\".join(chr(ord(c)) for c in 'Andr\\xc3\\xa9')", "decano_code": "\"\"\"\"\"\".join(chr(ord(c)) for c in 'Andr\\xc3\\xa9')", "raw_code": "\"\"\"\"\"\".join(chr(ord(c)) for c in 'Andr\\xc3\\xa9')", "str_map": {}}
{"src": ["convert", "a", "unicode", "_STR:0_", "to", "a", "string"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "chr", "(", "ord", "(", "c", ")", ")", "for", "c", "in", "\" _STR:0_ \"", ")", ".", "decode", "(", "'utf8'", ")"], "type": ["STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "\"\"\"\"\"\".join(chr(ord(c)) for c in \" _STR:0_ \").decode('utf8')", "decano_code": "\"\"\"\"\"\".join(chr(ord(c)) for c in \" _STR:0_ \").decode('utf8')", "raw_code": "\"\"\"\"\"\".join(chr(ord(c)) for c in 'Andr\\xc3\\xa9').decode('utf8')", "str_map": {"Andr\u00c3\u00a9": "_STR:0_"}}
{"src": ["list", "all", "files", "in", "directory", "_STR:0_"], "token": ["for", "(", "dirname", ",", "dirnames", ",", "filenames", ")", "in", "os", ".", "walk", "(", "\" _STR:0_ \"", ")", ":", "\n", "    ", "for", "subdirname", "in", "dirnames", ":", "\n", "        ", "print", "(", "os", ".", "path", ".", "join", "(", "dirname", ",", "subdirname", ")", ")", "\n", "", "for", "filename", "in", "filenames", ":", "\n", "        ", "pass", "", ""], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NEWLINE", "INDENT", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NEWLINE", "DEDENT", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT", "DEDENT"], "cano_code": "for (dirname, dirnames, filenames) in os.walk(\" _STR:0_ \"):\n    for subdirname in dirnames:\n        print(os.path.join(dirname, subdirname))\n    for filename in filenames:\n        pass", "decano_code": "for (dirname, dirnames, filenames) in os.walk(\" _STR:0_ \"):\n    for subdirname in dirnames:\n        print(os.path.join(dirname, subdirname))\n    for filename in filenames:\n        pass", "raw_code": "for (dirname, dirnames, filenames) in os.walk('.'):\n    for subdirname in dirnames:\n        print(os.path.join(dirname, subdirname))\n    for filename in filenames:\n        pass", "str_map": {".": "_STR:0_"}}
{"src": ["list", "all", "files", "in", "directory", "path"], "token": ["os", ".", "listdir", "(", "path", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "os.listdir(path)", "decano_code": "os.listdir(path)", "raw_code": "os.listdir(path)", "str_map": {}}
{"src": ["rename", "file", "dir", "to", "dir", "+", "_STR:0_"], "token": ["os", ".", "rename", "(", "dir", ",", "dir", "+", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "STRING", "OP"], "cano_code": "os.rename(dir, dir + \" _STR:0_ \")", "decano_code": "os.rename(dir, dir + \" _STR:0_ \")", "raw_code": "os.rename(dir, dir + '!')", "str_map": {"!": "_STR:0_"}}
{"src": ["insert", "a", "character", "-", "after", "every", "two", "elements", "in", "a", "string", "s"], "token": ["\"\"\"-\"\"\"", ".", "join", "(", "a", "+", "b", "for", "a", ",", "b", "in", "zip", "(", "s", "[", ":", ":", "2", "]", ",", "s", "[", "1", ":", ":", "2", "]", ")", ")"], "type": ["STRING", "OP", "NAME", "OP", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "\"\"\"-\"\"\".join(a + b for a, b in zip(s[::2], s[1::2]))", "decano_code": "\"\"\"-\"\"\".join(a + b for a, b in zip(s[::2], s[1::2]))", "raw_code": "\"\"\"-\"\"\".join(a + b for a, b in zip(s[::2], s[1::2]))", "str_map": {}}
{"src": ["printing", "numbers", "rounding", "up", "to", "third", "decimal", "place"], "token": ["print", "(", "'%.3f'", "%", "3.1415", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NUMBER", "OP"], "cano_code": "print('%.3f' % 3.1415)", "decano_code": "print('%.3f' % 3.1415)", "raw_code": "print('%.3f' % 3.1415)", "str_map": {}}
{"src": ["add", "variable", "var", "to", "key", "_STR:0_", "of", "first", "element", "in", "JSON", "data", "data"], "token": ["data", "[", "0", "]", "[", "\" _STR:0_ \"", "]", "=", "var"], "type": ["NAME", "OP", "NUMBER", "OP", "OP", "STRING", "OP", "OP", "NAME"], "cano_code": "data[0][\" _STR:0_ \"] = var", "decano_code": "data[0][\" _STR:0_ \"] = var", "raw_code": "data[0]['f'] = var", "str_map": {"f": "_STR:0_"}}
{"src": ["get", "the", "path", "of", "module", "a_module"], "token": ["print", "(", "a_module", ".", "__file__", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "print(a_module.__file__)", "decano_code": "print(a_module.__file__)", "raw_code": "print(a_module.__file__)", "str_map": {}}
{"src": ["get", "the", "path", "of", "the", "current", "python", "module"], "token": ["print", "(", "os", ".", "getcwd", "(", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "print(os.getcwd())", "decano_code": "print(os.getcwd())", "raw_code": "print(os.getcwd())", "str_map": {}}
{"src": ["get", "the", "path", "of", "the", "python", "module", "amodule"], "token": ["path", "=", "os", ".", "path", ".", "abspath", "(", "amodule", ".", "__file__", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "path = os.path.abspath(amodule.__file__)", "decano_code": "path = os.path.abspath(amodule.__file__)", "raw_code": "path = os.path.abspath(amodule.__file__)", "str_map": {}}
{"src": ["fill", "list", "myList", "with", "4", "0's"], "token": ["self", ".", "myList", ".", "extend", "(", "[", "0", "]", "*", "(", "4", "-", "len", "(", "self", ".", "myList", ")", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "self.myList.extend([0] * (4 - len(self.myList)))", "decano_code": "self.myList.extend([0] * (4 - len(self.myList)))", "raw_code": "self.myList.extend([0] * (4 - len(self.myList)))", "str_map": {}}
{"src": ["drop", "duplicate", "indexes", "in", "a", "pandas", "data", "frame", "df"], "token": ["df", "[", "~", "df", ".", "index", ".", "duplicated", "(", ")", "]"], "type": ["NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "df[~df.index.duplicated()]", "decano_code": "df[~df.index.duplicated()]", "raw_code": "df[~df.index.duplicated()]", "str_map": {}}
{"src": ["unpack", "elements", "of", "list", "i", "as", "arguments", "into", "function", "foo"], "token": ["foo", "(", "*", "i", ")"], "type": ["NAME", "OP", "OP", "NAME", "OP"], "cano_code": "foo(*i)", "decano_code": "foo(*i)", "raw_code": "foo(*i)", "str_map": {}}
{"src": ["generate", "list", "of", "numbers", "in", "specific", "format", "using", "string", "formatting", "precision", "."], "token": ["[", "(", "'%.2d'", "%", "i", ")", "for", "i", "in", "range", "(", "16", ")", "]"], "type": ["OP", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "OP"], "cano_code": "[('%.2d' % i) for i in range(16)]", "decano_code": "[('%.2d' % i) for i in range(16)]", "raw_code": "[('%.2d' % i) for i in range(16)]", "str_map": {}}
{"src": ["sort", "dictionary", "mydict", "in", "descending", "order", "based", "on", "the", "sum", "of", "each", "value", "in", "it"], "token": ["sorted", "(", "iter", "(", "mydict", ".", "items", "(", ")", ")", ",", "key", "=", "lambda", "tup", ":", "sum", "(", "tup", "[", "1", "]", ")", ",", "reverse", "=", "True", ")", "[", ":", "3", "]"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "sorted(iter(mydict.items()), key=lambda tup: sum(tup[1]), reverse=True)[:3]", "decano_code": "sorted(iter(mydict.items()), key=lambda tup: sum(tup[1]), reverse=True)[:3]", "raw_code": "sorted(iter(mydict.items()), key=lambda tup: sum(tup[1]), reverse=True)[:3]", "str_map": {}}
{"src": ["get", "top", "3", "items", "from", "a", "dictionary", "mydict", "with", "largest", "sum", "of", "values"], "token": ["heapq", ".", "nlargest", "(", "3", ",", "iter", "(", "mydict", ".", "items", "(", ")", ")", ",", "key", "=", "lambda", "tup", ":", "sum", "(", "tup", "[", "1", "]", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "heapq.nlargest(3, iter(mydict.items()), key=lambda tup: sum(tup[1]))", "decano_code": "heapq.nlargest(3, iter(mydict.items()), key=lambda tup: sum(tup[1]))", "raw_code": "heapq.nlargest(3, iter(mydict.items()), key=lambda tup: sum(tup[1]))", "str_map": {}}
{"src": ["get", "index", "of", "character", "_STR:0_", "in", "list", "_STR:1_", "a'", ",", "_STR:0_", "]", "'"], "token": ["[", "'a'", ",", "\" _STR:0_ \"", "]", ".", "index", "(", "\" _STR:0_ \"", ")"], "type": ["OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "['a', \" _STR:0_ \"].index(\" _STR:0_ \")", "decano_code": "['a', \" _STR:0_ \"].index(\" _STR:0_ \")", "raw_code": "['a', 'b'].index('b')", "str_map": {"b": "_STR:0_", "[": "_STR:1_"}}
{"src": ["set", "font", "size", "of", "axis", "legend", "of", "plot", "plt", "to", "_STR:0_"], "token": ["plt", ".", "setp", "(", "legend", ".", "get_title", "(", ")", ",", "fontsize", "=", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "plt.setp(legend.get_title(), fontsize=\" _STR:0_ \")", "decano_code": "plt.setp(legend.get_title(), fontsize=\" _STR:0_ \")", "raw_code": "plt.setp(legend.get_title(), fontsize='xx-small')", "str_map": {"xx-small": "_STR:0_"}}
{"src": ["python", ":", "convert", "a", "string", "to", "an", "integer"], "token": ["int", "(", "'  23  '", ")"], "type": ["KEYWORD", "OP", "STRING", "OP"], "cano_code": "int('  23  ')", "decano_code": "int('  23  ')", "raw_code": "int('  23  ')", "str_map": {}}
{"src": ["extract", "the", "2nd", "elements", "from", "a", "list", "of", "tuples"], "token": ["[", "x", "[", "1", "]", "for", "x", "in", "elements", "]"], "type": ["OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[x[1] for x in elements]", "decano_code": "[x[1] for x in elements]", "raw_code": "[x[1] for x in elements]", "str_map": {}}
{"src": ["get", "the", "opposite", "diagonal", "of", "a", "numpy", "array", "array"], "token": ["np", ".", "diag", "(", "np", ".", "rot90", "(", "array", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "np.diag(np.rot90(array))", "decano_code": "np.diag(np.rot90(array))", "raw_code": "np.diag(np.rot90(array))", "str_map": {}}
{"src": ["flatten", "list", "of", "tuples", "a"], "token": ["list", "(", "chain", ".", "from_iterable", "(", "a", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "list(chain.from_iterable(a))", "decano_code": "list(chain.from_iterable(a))", "raw_code": "list(chain.from_iterable(a))", "str_map": {}}
{"src": ["substitute", "two", "or", "more", "whitespace", "characters", "with", "character", "_STR:0_", "in", "string", "line"], "token": ["re", ".", "sub", "(", "'\\\\s{2,}'", ",", "\" _STR:0_ \"", ",", "line", ".", "strip", "(", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "re.sub('\\\\s{2,}', \" _STR:0_ \", line.strip())", "decano_code": "re.sub('\\\\s{2,}', \" _STR:0_ \", line.strip())", "raw_code": "re.sub('\\\\s{2,}', '|', line.strip())", "str_map": {"|": "_STR:0_"}}
{"src": ["print", "float", "a", "with", "two", "decimal", "points"], "token": ["print", "(", "(", "'%.2f'", "%", "a", ")", ")"], "type": ["KEYWORD", "OP", "OP", "STRING", "OP", "NAME", "OP", "OP"], "cano_code": "print(('%.2f' % a))", "decano_code": "print(('%.2f' % a))", "raw_code": "print(('%.2f' % a))", "str_map": {}}
{"src": ["print", "float", "a", "with", "two", "decimal", "points"], "token": ["print", "(", "(", "'{0:.2f}'", ".", "format", "(", "a", ")", ")", ")"], "type": ["KEYWORD", "OP", "OP", "STRING", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "print(('{0:.2f}'.format(a)))", "decano_code": "print(('{0:.2f}'.format(a)))", "raw_code": "print(('{0:.2f}'.format(a)))", "str_map": {}}
{"src": ["print", "float", "a", "with", "two", "decimal", "points"], "token": ["print", "(", "(", "'{0:.2f}'", ".", "format", "(", "round", "(", "a", ",", "2", ")", ")", ")", ")"], "type": ["KEYWORD", "OP", "OP", "STRING", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "OP"], "cano_code": "print(('{0:.2f}'.format(round(a, 2))))", "decano_code": "print(('{0:.2f}'.format(round(a, 2))))", "raw_code": "print(('{0:.2f}'.format(round(a, 2))))", "str_map": {}}
{"src": ["print", "float", "a", "with", "two", "decimal", "points"], "token": ["print", "(", "(", "'%.2f'", "%", "round", "(", "a", ",", "2", ")", ")", ")"], "type": ["KEYWORD", "OP", "OP", "STRING", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "print(('%.2f' % round(a, 2)))", "decano_code": "print(('%.2f' % round(a, 2)))", "raw_code": "print(('%.2f' % round(a, 2)))", "str_map": {}}
{"src": ["limit", "float", "13.9499999", "[", "13", ".", "9499999", "]", "to", "two", "decimal", "points"], "token": ["(", "'%.2f'", "%", "13.9499999", ")"], "type": ["OP", "STRING", "OP", "NUMBER", "OP"], "cano_code": "('%.2f' % 13.9499999)", "decano_code": "('%.2f' % 13.9499999)", "raw_code": "('%.2f' % 13.9499999)", "str_map": {}}
{"src": ["limit", "float", "3.14159", "[", "3", ".", "14159", "]", "to", "two", "decimal", "points"], "token": ["(", "'%.2f'", "%", "3.14159", ")"], "type": ["OP", "STRING", "OP", "NUMBER", "OP"], "cano_code": "('%.2f' % 3.14159)", "decano_code": "('%.2f' % 3.14159)", "raw_code": "('%.2f' % 3.14159)", "str_map": {}}
{"src": ["limit", "float", "13.949999999999999", "[", "13", ".", "949999999999999", "]", "to", "two", "decimal", "points"], "token": ["float", "(", "'{0:.2f}'", ".", "format", "(", "13.95", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "KEYWORD", "OP", "NUMBER", "OP", "OP"], "cano_code": "float('{0:.2f}'.format(13.95))", "decano_code": "float('{0:.2f}'.format(13.95))", "raw_code": "float('{0:.2f}'.format(13.95))", "str_map": {}}
{"src": ["limit", "float", "13.949999999999999", "[", "13", ".", "949999999999999", "]", "to", "two", "decimal", "points"], "token": ["'{0:.2f}'", ".", "format", "(", "13.95", ")"], "type": ["STRING", "OP", "KEYWORD", "OP", "NUMBER", "OP"], "cano_code": "'{0:.2f}'.format(13.95)", "decano_code": "'{0:.2f}'.format(13.95)", "raw_code": "'{0:.2f}'.format(13.95)", "str_map": {}}
{"src": ["load", "a", "tsv", "file", "c:/~/trainSetRel3.txt", "[", "c:/~/trainSetRel3", ".", "txt", "]", "into", "a", "pandas", "data", "frame"], "token": ["DataFrame", ".", "from_csv", "(", "'c:/~/trainSetRel3.txt'", ",", "sep", "=", "'\\t'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "DataFrame.from_csv('c:/~/trainSetRel3.txt', sep='\\t')", "decano_code": "DataFrame.from_csv('c:/~/trainSetRel3.txt', sep='\\t')", "raw_code": "DataFrame.from_csv('c:/~/trainSetRel3.txt', sep='\\t')", "str_map": {}}
{"src": ["set", "UTC", "offset", "by", "9", "hrs", "ahead", "for", "date", "_STR:0_"], "token": ["dateutil", ".", "parser", ".", "parse", "(", "'2013/09/11 00:17 +0900'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "dateutil.parser.parse('2013/09/11 00:17 +0900')", "decano_code": "dateutil.parser.parse('2013/09/11 00:17 +0900')", "raw_code": "dateutil.parser.parse('2013/09/11 00:17 +0900')", "str_map": {"2013/09/11 00:17": "_STR:0_"}}
{"src": ["pass", "a", "list", "of", "parameters", "`((1", ",", "2", ",", "3),", ")", "to", "sql", "queue", "_STR:0_"], "token": ["cur", ".", "mogrify", "(", "\" _STR:0_ \"", ",", "(", "(", "1", ",", "2", ",", "3", ")", ",", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "OP"], "cano_code": "cur.mogrify(\" _STR:0_ \", ((1, 2, 3),))", "decano_code": "cur.mogrify(\" _STR:0_ \", ((1, 2, 3),))", "raw_code": "cur.mogrify('SELECT * FROM table WHERE column IN %s;', ((1, 2, 3),))", "str_map": {"SELECT * FROM table WHERE column IN %s;": "_STR:0_"}}
{"src": ["sum", "all", "elements", "of", "two-dimensions", "list", "[[1, 2, 3, 4], [2, 4, 5, 6]]", "]"], "token": ["sum", "(", "[", "sum", "(", "x", ")", "for", "x", "in", "[", "[", "1", ",", "2", ",", "3", ",", "4", "]", ",", "[", "2", ",", "4", ",", "5", ",", "6", "]", "]", "]", ")"], "type": ["KEYWORD", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "OP"], "cano_code": "sum([sum(x) for x in [[1, 2, 3, 4], [2, 4, 5, 6]]])", "decano_code": "sum([sum(x) for x in [[1, 2, 3, 4], [2, 4, 5, 6]]])", "raw_code": "sum([sum(x) for x in [[1, 2, 3, 4], [2, 4, 5, 6]]])", "str_map": {}}
{"src": ["retrieve", "an", "arbitrary", "value", "from", "dictionary", "dict"], "token": ["next", "(", "iter", "(", "dict", ".", "values", "(", ")", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "next(iter(dict.values()))", "decano_code": "next(iter(dict.values()))", "raw_code": "next(iter(dict.values()))", "str_map": {}}
{"src": ["access", "an", "arbitrary", "value", "from", "dictionary", "dict"], "token": ["next", "(", "iter", "(", "list", "(", "dict", ".", "values", "(", ")", ")", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "OP", "OP", "OP"], "cano_code": "next(iter(list(dict.values())))", "decano_code": "next(iter(list(dict.values())))", "raw_code": "next(iter(list(dict.values())))", "str_map": {}}
{"src": ["group", "dataframe", "df", "by", "columns", "_STR:0_", "and", "_STR:1_"], "token": ["df", ".", "groupby", "(", "[", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", "]", ")", ".", "sum", "(", ")", ".", "unstack", "(", "level", "=", "0", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "KEYWORD", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "df.groupby([\" _STR:0_ \", \" _STR:1_ \"]).sum().unstack(level=0)", "decano_code": "df.groupby([\" _STR:0_ \", \" _STR:1_ \"]).sum().unstack(level=0)", "raw_code": "df.groupby(['Month', 'Fruit']).sum().unstack(level=0)", "str_map": {"Month": "_STR:0_", "Fruit": "_STR:1_"}}
{"src": ["sort", "list", "mylist", "of", "tuples", "by", "arbitrary", "key", "from", "list", "order"], "token": ["sorted", "(", "mylist", ",", "key", "=", "lambda", "x", ":", "order", ".", "index", "(", "x", "[", "1", "]", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "sorted(mylist, key=lambda x: order.index(x[1]))", "decano_code": "sorted(mylist, key=lambda x: order.index(x[1]))", "raw_code": "sorted(mylist, key=lambda x: order.index(x[1]))", "str_map": {}}
{"src": ["sort", "a", "list", "of", "dictionary", "persons", "according", "to", "the", "key", "['passport']['birth_info']['date'", "]"], "token": ["sorted", "(", "persons", ",", "key", "=", "lambda", "x", ":", "x", "[", "'passport'", "]", "[", "'birth_info'", "]", "[", "'date'", "]", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "STRING", "OP", "OP", "STRING", "OP", "OP"], "cano_code": "sorted(persons, key=lambda x: x['passport']['birth_info']['date'])", "decano_code": "sorted(persons, key=lambda x: x['passport']['birth_info']['date'])", "raw_code": "sorted(persons, key=lambda x: x['passport']['birth_info']['date'])", "str_map": {}}
{"src": ["remove", "the", "fragment", "identifier", "#something", "from", "a", "url", "http://www.address.com/something#something", "[", "http://www", ".", "address", ".", "com/something#something", "]"], "token": ["urlparse", ".", "urldefrag", "(", "'http://www.address.com/something#something'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "urlparse.urldefrag('http://www.address.com/something#something')", "decano_code": "urlparse.urldefrag('http://www.address.com/something#something')", "raw_code": "urlparse.urldefrag('http://www.address.com/something#something')", "str_map": {}}
{"src": ["download", "to", "a", "directory", "_STR:0_", "from", "source", "_STR:1_"], "token": ["urllib", ".", "request", ".", "urlretrieve", "(", "\" _STR:1_ \"", ",", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "urllib.request.urlretrieve(\" _STR:1_ \", \" _STR:0_ \")", "decano_code": "urllib.request.urlretrieve(\" _STR:1_ \", \" _STR:0_ \")", "raw_code": "urllib.request.urlretrieve('http://example.com/file.ext', '/path/to/dir/filename.ext')", "str_map": {"/path/to/dir/filename.ext": "_STR:0_", "http://example.com/file.ext": "_STR:1_"}}
{"src": ["remove", "all", "duplicates", "from", "a", "list", "of", "sets", "l"], "token": ["list", "(", "set", "(", "frozenset", "(", "item", ")", "for", "item", "in", "L", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "list(set(frozenset(item) for item in L))", "decano_code": "list(set(frozenset(item) for item in L))", "raw_code": "list(set(frozenset(item) for item in L))", "str_map": {}}
{"src": ["remove", "duplicates", "from", "a", "list", "of", "sets", "_STR:0_"], "token": ["[", "set", "(", "item", ")", "for", "item", "in", "set", "(", "frozenset", "(", "item", ")", "for", "item", "in", "L", ")", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "[set(item) for item in set(frozenset(item) for item in L)]", "decano_code": "[set(item) for item in set(frozenset(item) for item in L)]", "raw_code": "[set(item) for item in set(frozenset(item) for item in L)]", "str_map": {"L": "_STR:0_"}}
{"src": ["terminate", "process", "p"], "token": ["p", ".", "terminate", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "p.terminate()", "decano_code": "p.terminate()", "raw_code": "p.terminate()", "str_map": {}}
{"src": ["delete", "all", "values", "in", "a", "list", "mylist"], "token": ["del", "mylist", "[", ":", "]"], "type": ["KEYWORD", "NAME", "OP", "OP", "OP"], "cano_code": "del mylist[:]", "decano_code": "del mylist[:]", "raw_code": "del mylist[:]", "str_map": {}}
{"src": ["throw", "an", "error", "window", "in", "python", "in", "windows"], "token": ["ctypes", ".", "windll", ".", "user32", ".", "MessageBoxW", "(", "0", ",", "'Error'", ",", "'Error'", ",", "0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "STRING", "OP", "STRING", "OP", "NUMBER", "OP"], "cano_code": "ctypes.windll.user32.MessageBoxW(0, 'Error', 'Error', 0)", "decano_code": "ctypes.windll.user32.MessageBoxW(0, 'Error', 'Error', 0)", "raw_code": "ctypes.windll.user32.MessageBoxW(0, 'Error', 'Error', 0)", "str_map": {}}
{"src": ["remove", "empty", "strings", "from", "list", "str_list"], "token": ["str_list", "=", "list", "(", "[", "_f", "for", "_f", "in", "str_list", "if", "_f", "]", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "str_list = list([_f for _f in str_list if _f])", "decano_code": "str_list = list([_f for _f in str_list if _f])", "raw_code": "str_list = list([_f for _f in str_list if _f])", "str_map": {}}
{"src": ["remove", "newlines", "and", "whitespace", "from", "string", "yourstring"], "token": ["re", ".", "sub", "(", "'[\\\\ \\\\n]{2,}'", ",", "''", ",", "yourstring", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.sub('[\\\\ \\\\n]{2,}', '', yourstring)", "decano_code": "re.sub('[\\\\ \\\\n]{2,}', '', yourstring)", "raw_code": "re.sub('[\\\\ \\\\n]{2,}', '', yourstring)", "str_map": {}}
{"src": ["remove", "the", "last", "dot", "and", "all", "text", "beyond", "it", "in", "string", "s"], "token": ["re", ".", "sub", "(", "'\\\\.[^.]+$'", ",", "''", ",", "s", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.sub('\\\\.[^.]+$', '', s)", "decano_code": "re.sub('\\\\.[^.]+$', '', s)", "raw_code": "re.sub('\\\\.[^.]+$', '', s)", "str_map": {}}
{"src": ["remove", "elements", "from", "an", "array", "a", "that", "are", "in", "array", "b"], "token": ["A", "[", "np", ".", "all", "(", "np", ".", "any", "(", "A", "-", "B", "[", ":", ",", "(", "None", ")", "]", ",", "axis", "=", "2", ")", ",", "axis", "=", "0", ")", "]"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "KEYWORD", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "A[np.all(np.any(A - B[:, (None)], axis=2), axis=0)]", "decano_code": "A[np.all(np.any(A - B[:, (None)], axis=2), axis=0)]", "raw_code": "A[np.all(np.any(A - B[:, (None)], axis=2), axis=0)]", "str_map": {}}
{"src": ["write", "column", "_STR:0_", "of", "DataFrame", "a", "to", "csv", "file", "_STR:1_"], "token": ["a", ".", "to_csv", "(", "\" _STR:1_ \"", ",", "cols", "=", "[", "\" _STR:0_ \"", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP", "STRING", "OP", "OP"], "cano_code": "a.to_csv(\" _STR:1_ \", cols=[\" _STR:0_ \"])", "decano_code": "a.to_csv(\" _STR:1_ \", cols=[\" _STR:0_ \"])", "raw_code": "a.to_csv('test.csv', cols=['sum'])", "str_map": {"sum": "_STR:0_", "test.csv": "_STR:1_"}}
{"src": ["call", "a", "python", "script", "_STR:0_"], "token": ["exec", "(", "compile", "(", "open", "(", "\" _STR:0_ \"", ")", ".", "read", "(", ")", ",", "\" _STR:0_ \"", ",", "'exec'", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "exec(compile(open(\" _STR:0_ \").read(), \" _STR:0_ \", 'exec'))", "decano_code": "exec(compile(open(\" _STR:0_ \").read(), \" _STR:0_ \", 'exec'))", "raw_code": "exec(compile(open('test2.py').read(), 'test2.py', 'exec'))", "str_map": {"test2.py": "_STR:0_"}}
{"src": ["call", "a", "python", "script", "_STR:0_"], "token": ["subprocess", ".", "call", "(", "\" _STR:0_ \"", ",", "shell", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "subprocess.call(\" _STR:0_ \", shell=True)", "decano_code": "subprocess.call(\" _STR:0_ \", shell=True)", "raw_code": "subprocess.call('test1.py', shell=True)", "str_map": {"test1.py": "_STR:0_"}}
{"src": ["sort", "a", "zipped", "list", "zipped", "using", "lambda", "function"], "token": ["sorted", "(", "zipped", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "sorted(zipped, key=lambda x: x[1])", "decano_code": "sorted(zipped, key=lambda x: x[1])", "raw_code": "sorted(zipped, key=lambda x: x[1])", "str_map": {}}
{"src": ["how", "do", "i", "sort", "a", "zipped", "list", "in", "python", "?"], "token": ["zipped", ".", "sort", "(", "key", "=", "lambda", "t", ":", "t", "[", "1", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "zipped.sort(key=lambda t: t[1])", "decano_code": "zipped.sort(key=lambda t: t[1])", "raw_code": "zipped.sort(key=lambda t: t[1])", "str_map": {}}
{"src": ["sort", "a", "dictionary", "y", "by", "value", "then", "by", "key"], "token": ["sorted", "(", "list", "(", "y", ".", "items", "(", ")", ")", ",", "key", "=", "lambda", "x", ":", "(", "x", "[", "1", "]", ",", "x", "[", "0", "]", ")", ",", "reverse", "=", "True", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "sorted(list(y.items()), key=lambda x: (x[1], x[0]), reverse=True)", "decano_code": "sorted(list(y.items()), key=lambda x: (x[1], x[0]), reverse=True)", "raw_code": "sorted(list(y.items()), key=lambda x: (x[1], x[0]), reverse=True)", "str_map": {}}
{"src": ["using", "beautifulsoup", "to", "select", "div", "blocks", "within", "html", "soup"], "token": ["soup", ".", "find_all", "(", "'div'", ",", "class_", "=", "'crBlock '", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "soup.find_all('div', class_='crBlock ')", "decano_code": "soup.find_all('div', class_='crBlock ')", "raw_code": "soup.find_all('div', class_='crBlock ')", "str_map": {}}
{"src": ["remove", "elements", "from", "list", "centroids", "the", "indexes", "of", "which", "are", "in", "array", "index"], "token": ["[", "element", "for", "i", ",", "element", "in", "enumerate", "(", "centroids", ")", "if", "i", "not", "in", "index", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "NAME", "OP"], "cano_code": "[element for i, element in enumerate(centroids) if i not in index]", "decano_code": "[element for i, element in enumerate(centroids) if i not in index]", "raw_code": "[element for i, element in enumerate(centroids) if i not in index]", "str_map": {}}
{"src": ["list", "duplicated", "elements", "in", "two", "lists", "listA", "and", "listB"], "token": ["list", "(", "set", "(", "listA", ")", "&", "set", "(", "listB", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "list(set(listA) & set(listB))", "decano_code": "list(set(listA) & set(listB))", "raw_code": "list(set(listA) & set(listB))", "str_map": {}}
{"src": ["download", "_STR:0_", "from", "http", "and", "save", "as", "_STR:1_"], "token": ["testfile", "=", "urllib", ".", "request", ".", "URLopener", "(", ")", "\n", "testfile", ".", "retrieve", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NEWLINE", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "testfile = urllib.request.URLopener()\ntestfile.retrieve(\" _STR:0_ \", \" _STR:1_ \")", "decano_code": "testfile = urllib.request.URLopener()\ntestfile.retrieve(\" _STR:0_ \", \" _STR:1_ \")", "raw_code": "testfile = urllib.request.URLopener()\ntestfile.retrieve('http://randomsite.com/file.gz', 'file.gz')", "str_map": {"http://randomsite.com/file.gz": "_STR:0_", "file.gz": "_STR:1_"}}
{"src": ["download", "file", "from", "http", "url", "_STR:0_", "and", "save", "as", "_STR:1_"], "token": ["urllib", ".", "request", ".", "urlretrieve", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "urllib.request.urlretrieve(\" _STR:0_ \", \" _STR:1_ \")", "decano_code": "urllib.request.urlretrieve(\" _STR:0_ \", \" _STR:1_ \")", "raw_code": "urllib.request.urlretrieve('http://randomsite.com/file.gz', 'file.gz')", "str_map": {"http://randomsite.com/file.gz": "_STR:0_", "file.gz": "_STR:1_"}}
{"src": ["download", "file", "from", "http", "url", "file_url"], "token": ["file_name", "=", "wget", ".", "download", "(", "file_url", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "file_name = wget.download(file_url)", "decano_code": "file_name = wget.download(file_url)", "raw_code": "file_name = wget.download(file_url)", "str_map": {}}
{"src": ["set", "an", "array", "of", "unicode", "characters", "[u'\\xe9', u'\\xe3', u'\\xe2'", "]", "as", "labels", "in", "matplotlib", "ax"], "token": ["ax", ".", "set_yticklabels", "(", "[", "'\\xe9'", ",", "'\\xe3'", ",", "'\\xe2'", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "ax.set_yticklabels(['\\xe9', '\\xe3', '\\xe2'])", "decano_code": "ax.set_yticklabels(['\\xe9', '\\xe3', '\\xe2'])", "raw_code": "ax.set_yticklabels(['\\xe9', '\\xe3', '\\xe2'])", "str_map": {}}
{"src": ["get", "a", "list", "of", "all", "integer", "points", "in", "a", "dim", "dimensional", "hypercube", "with", "coordinates", "from", "-x", "to", "y", "for", "all", "dimensions"], "token": ["list", "(", "itertools", ".", "product", "(", "list", "(", "range", "(", "-", "x", ",", "y", ")", ")", ",", "repeat", "=", "dim", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "list(itertools.product(list(range(-x, y)), repeat=dim))", "decano_code": "list(itertools.product(list(range(-x, y)), repeat=dim))", "raw_code": "list(itertools.product(list(range(-x, y)), repeat=dim))", "str_map": {}}
{"src": ["convert", "unicode", "string", "s", "into", "string", "literals"], "token": ["print", "(", "s", ".", "encode", "(", "'unicode_escape'", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "print(s.encode('unicode_escape'))", "decano_code": "print(s.encode('unicode_escape'))", "raw_code": "print(s.encode('unicode_escape'))", "str_map": {}}
{"src": ["how", "to", "format", "a", "list", "of", "arguments", "my_args", "into", "a", "string"], "token": ["'Hello %s'", "%", "', '", ".", "join", "(", "my_args", ")"], "type": ["STRING", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "'Hello %s' % ', '.join(my_args)", "decano_code": "'Hello %s' % ', '.join(my_args)", "raw_code": "'Hello %s' % ', '.join(my_args)", "str_map": {}}
{"src": ["search", "and", "split", "string", "_STR:0_", "by", "delimiter", "_STR:1_"], "token": ["re", ".", "split", "(", "\" _STR:1_ \"", ",", "\" _STR:0_ \"", ",", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NUMBER", "OP"], "cano_code": "re.split(\" _STR:1_ \", \" _STR:0_ \", 1)", "decano_code": "re.split(\" _STR:1_ \", \" _STR:0_ \", 1)", "raw_code": "re.split('(ddd)', 'aaa bbb ccc ddd eee fff', 1)", "str_map": {"aaa bbb ccc ddd eee fff": "_STR:0_", "(ddd)": "_STR:1_"}}
{"src": ["regex", "search", "and", "split", "string", "_STR:0_", "by", "delimiter", "_STR:1_"], "token": ["re", ".", "split", "(", "\" _STR:1_ \"", ",", "\" _STR:0_ \"", ",", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NUMBER", "OP"], "cano_code": "re.split(\" _STR:1_ \", \" _STR:0_ \", 1)", "decano_code": "re.split(\" _STR:1_ \", \" _STR:0_ \", 1)", "raw_code": "re.split('(d(d)d)', 'aaa bbb ccc ddd eee fff', 1)", "str_map": {"aaa bbb ccc ddd eee fff": "_STR:0_", "(d(d)d)": "_STR:1_"}}
{"src": ["convert", "a", "list", "of", "dictionaries", "d", "to", "pandas", "data", "frame"], "token": ["pd", ".", "DataFrame", "(", "d", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "pd.DataFrame(d)", "decano_code": "pd.DataFrame(d)", "raw_code": "pd.DataFrame(d)", "str_map": {}}
{"src": ["split", "string", "_STR:0_", "into", "words", "that", "do", "not", "contain", "whitespaces"], "token": ["\" _STR:0_ \"", ".", "split", "(", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP"], "cano_code": "\" _STR:0_ \".split()", "decano_code": "\" _STR:0_ \".split()", "raw_code": "\"\"\"This is a string\"\"\".split()", "str_map": {"This is a string": "_STR:0_"}}
{"src": ["split", "string", "_STR:0_", "into", "words", "that", "does", "not", "contain", "whitespaces"], "token": ["\" _STR:0_ \"", ".", "split", "(", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP"], "cano_code": "\" _STR:0_ \".split()", "decano_code": "\" _STR:0_ \".split()", "raw_code": "\"\"\"This     is a     string\"\"\".split()", "str_map": {"This     is a     string": "_STR:0_"}}
{"src": ["python", "pandas", ":", "apply", "a", "function", "with", "arguments", "to", "a", "series"], "token": ["my_series", ".", "apply", "(", "your_function", ",", "args", "=", "(", "2", ",", "3", ",", "4", ")", ",", "extra_kw", "=", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "my_series.apply(your_function, args=(2, 3, 4), extra_kw=1)", "decano_code": "my_series.apply(your_function, args=(2, 3, 4), extra_kw=1)", "raw_code": "my_series.apply(your_function, args=(2, 3, 4), extra_kw=1)", "str_map": {}}
{"src": ["remove", "all", "duplicate", "items", "from", "a", "list", "lseperatedOrblist"], "token": ["woduplicates", "=", "list", "(", "set", "(", "lseperatedOrblist", ")", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "woduplicates = list(set(lseperatedOrblist))", "decano_code": "woduplicates = list(set(lseperatedOrblist))", "raw_code": "woduplicates = list(set(lseperatedOrblist))", "str_map": {}}
{"src": ["sum", "of", "product", "of", "combinations", "in", "a", "list", "l"], "token": ["sum", "(", "[", "(", "i", "*", "j", ")", "for", "i", ",", "j", "in", "list", "(", "itertools", ".", "combinations", "(", "l", ",", "2", ")", ")", "]", ")"], "type": ["KEYWORD", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "OP"], "cano_code": "sum([(i * j) for i, j in list(itertools.combinations(l, 2))])", "decano_code": "sum([(i * j) for i, j in list(itertools.combinations(l, 2))])", "raw_code": "sum([(i * j) for i, j in list(itertools.combinations(l, 2))])", "str_map": {}}
{"src": ["regular", "expression", "for", "validating", "string", "_STR:0_", "containing", "a", "sequence", "of", "characters", "ending", "with", "_STR:1_", "followed", "by", "any", "number", "of", "digits", "."], "token": ["re", ".", "compile", "(", "'{}-\\\\d*'", ".", "format", "(", "user", ")", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "re.compile('{}-\\\\d*'.format(user))", "decano_code": "re.compile('{}-\\\\d*'.format(user))", "raw_code": "re.compile('{}-\\\\d*'.format(user))", "str_map": {"user": "_STR:0_", "-": "_STR:1_"}}
{"src": ["convert", "all", "of", "the", "items", "in", "a", "list", "lst", "to", "float"], "token": ["[", "float", "(", "i", ")", "for", "i", "in", "lst", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[float(i) for i in lst]", "decano_code": "[float(i) for i in lst]", "raw_code": "[float(i) for i in lst]", "str_map": {}}
{"src": ["multiply", "all", "items", "in", "a", "list", "[1, 2, 3, 4, 5, 6", "]", "together"], "token": ["from", "functools", "import", "reduce", "\n", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "*", "y", ",", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", ")"], "type": ["KEYWORD", "NAME", "KEYWORD", "NAME", "NEWLINE", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "from functools import reduce\nreduce(lambda x, y: x * y, [1, 2, 3, 4, 5, 6])", "decano_code": "from functools import reduce\nreduce(lambda x, y: x * y, [1, 2, 3, 4, 5, 6])", "raw_code": "from functools import reduce\nreduce(lambda x, y: x * y, [1, 2, 3, 4, 5, 6])", "str_map": {}}
{"src": ["write", "a", "tuple", "of", "tuples", "a", "to", "a", "csv", "file", "using", "python"], "token": ["writer", ".", "writerow", "(", "A", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "writer.writerow(A)", "decano_code": "writer.writerow(A)", "raw_code": "writer.writerow(A)", "str_map": {}}
{"src": ["write", "all", "tuple", "of", "tuples", "a", "at", "once", "into", "csv", "file"], "token": ["writer", ".", "writerows", "(", "A", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "writer.writerows(A)", "decano_code": "writer.writerows(A)", "raw_code": "writer.writerows(A)", "str_map": {}}
{"src": ["python", ",", "format", "string", "_STR:0_", "to", "have", "_STR:1_", "and", "_STR:2_", "in", "the", "first", "and", "second", "positions"], "token": ["\" _STR:0_ \"", ".", "format", "(", "\" _STR:1_ \"", ",", "\" _STR:2_ \"", ")"], "type": ["STRING", "OP", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "\" _STR:0_ \".format(\" _STR:1_ \", \" _STR:2_ \")", "decano_code": "\" _STR:0_ \".format(\" _STR:1_ \", \" _STR:2_ \")", "raw_code": "\"\"\"{} %s {}\"\"\".format('foo', 'bar')", "str_map": {"{} %s {}": "_STR:0_", "foo": "_STR:1_", "bar": "_STR:2_"}}
{"src": ["truncate", "\\r\\n", "from", "each", "string", "in", "a", "list", "of", "string", "example"], "token": ["example", "=", "[", "x", ".", "replace", "(", "'\\r\\n'", ",", "''", ")", "for", "x", "in", "example", "]"], "type": ["NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "example = [x.replace('\\r\\n', '') for x in example]", "decano_code": "example = [x.replace('\\r\\n', '') for x in example]", "raw_code": "example = [x.replace('\\r\\n', '') for x in example]", "str_map": {}}
{"src": ["split", "elements", "of", "a", "list", "l", "by", "_STR:0_"], "token": ["[", "i", ".", "partition", "(", "\" _STR:0_ \"", ")", "[", "-", "1", "]", "for", "i", "in", "l", "if", "\" _STR:0_ \"", "in", "i", "]"], "type": ["OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "STRING", "KEYWORD", "NAME", "OP"], "cano_code": "[i.partition(\" _STR:0_ \")[-1] for i in l if \" _STR:0_ \" in i]", "decano_code": "[i.partition(\" _STR:0_ \")[-1] for i in l if \" _STR:0_ \" in i]", "raw_code": "[i.partition('\\t')[-1] for i in l if '\\t' in i]", "str_map": {"\t": "_STR:0_"}}
{"src": ["search", "for", "regex", "pattern", "_STR:0_", "in", "string", "testStr", "including", "new", "line", "character", "_STR:1_"], "token": ["re", ".", "search", "(", "\" _STR:0_ \"", ",", "testStr", ",", "re", ".", "DOTALL", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "re.search(\" _STR:0_ \", testStr, re.DOTALL)", "decano_code": "re.search(\" _STR:0_ \", testStr, re.DOTALL)", "raw_code": "re.search('Test(.*)print', testStr, re.DOTALL)", "str_map": {"Test(.*)print": "_STR:0_", "\n": "_STR:1_"}}
{"src": ["find", "button", "that", "is", "in", "li", "class", "next", "and", "assign", "it", "to", "variable", "next"], "token": ["next", "=", "driver", ".", "find_element_by_css_selector", "(", "'li.next>a'", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "next = driver.find_element_by_css_selector('li.next>a')", "decano_code": "next = driver.find_element_by_css_selector('li.next>a')", "raw_code": "next = driver.find_element_by_css_selector('li.next>a')", "str_map": {}}
{"src": ["get", "the", "size", "of", "file", "_STR:0_"], "token": ["os", ".", "stat", "(", "\" _STR:0_ \"", ")", ".", "st_size"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME"], "cano_code": "os.stat(\" _STR:0_ \").st_size", "decano_code": "os.stat(\" _STR:0_ \").st_size", "raw_code": "os.stat('C:\\\\Python27\\\\Lib\\\\genericpath.py').st_size", "str_map": {"C:\\Python27\\Lib\\genericpath.py": "_STR:0_"}}
{"src": ["return", "a", "string", "from", "a", "regex", "match", "with", "pattern", "_STR:0_", "in", "string", "_STR:1_"], "token": ["imtag", "=", "re", ".", "match", "(", "\" _STR:0_ \"", ",", "line", ")", ".", "group", "(", "0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "imtag = re.match(\" _STR:0_ \", line).group(0)", "decano_code": "imtag = re.match(\" _STR:0_ \", line).group(0)", "raw_code": "imtag = re.match('<img.*?>', line).group(0)", "str_map": {"<img.*?>": "_STR:0_", "line": "_STR:1_"}}
{"src": ["rename", "a", "folder", "Joe Blow", "to", "Blow, Joe"], "token": ["os", ".", "rename", "(", "'Joe Blow'", ",", "'Blow, Joe'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "os.rename('Joe Blow', 'Blow, Joe')", "decano_code": "os.rename('Joe Blow', 'Blow, Joe')", "raw_code": "os.rename('Joe Blow', 'Blow, Joe')", "str_map": {}}
{"src": ["find", "overlapping", "matches", "from", "a", "string", "hello", "using", "regex"], "token": ["re", ".", "findall", "(", "'(?=(\\\\w\\\\w))'", ",", "'hello'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.findall('(?=(\\\\w\\\\w))', 'hello')", "decano_code": "re.findall('(?=(\\\\w\\\\w))', 'hello')", "raw_code": "re.findall('(?=(\\\\w\\\\w))', 'hello')", "str_map": {}}
{"src": ["convert", "173", "to", "binary", "string"], "token": ["bin", "(", "173", ")"], "type": ["KEYWORD", "OP", "NUMBER", "OP"], "cano_code": "bin(173)", "decano_code": "bin(173)", "raw_code": "bin(173)", "str_map": {}}
{"src": ["convert", "binary", "string", "_STR:0_", "to", "integer"], "token": ["int", "(", "\" _STR:0_ \"", ",", "2", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NUMBER", "OP"], "cano_code": "int(\" _STR:0_ \", 2)", "decano_code": "int(\" _STR:0_ \", 2)", "raw_code": "int('01010101111', 2)", "str_map": {"01010101111": "_STR:0_"}}
{"src": ["convert", "binary", "string", "_STR:0_", "to", "integer"], "token": ["int", "(", "\" _STR:0_ \"", ",", "2", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NUMBER", "OP"], "cano_code": "int(\" _STR:0_ \", 2)", "decano_code": "int(\" _STR:0_ \", 2)", "raw_code": "int('010101', 2)", "str_map": {"010101": "_STR:0_"}}
{"src": ["convert", "binary", "string", "_STR:0_", "to", "integer"], "token": ["int", "(", "\" _STR:0_ \"", ",", "2", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NUMBER", "OP"], "cano_code": "int(\" _STR:0_ \", 2)", "decano_code": "int(\" _STR:0_ \", 2)", "raw_code": "int('0b0010101010', 2)", "str_map": {"0b0010101010": "_STR:0_"}}
{"src": ["convert", "21", "to", "binary", "string"], "token": ["bin", "(", "21", ")"], "type": ["KEYWORD", "OP", "NUMBER", "OP"], "cano_code": "bin(21)", "decano_code": "bin(21)", "raw_code": "bin(21)", "str_map": {}}
{"src": ["convert", "binary", "string", "_STR:0_", "to", "integer"], "token": ["int", "(", "\" _STR:0_ \"", ",", "2", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NUMBER", "OP"], "cano_code": "int(\" _STR:0_ \", 2)", "decano_code": "int(\" _STR:0_ \", 2)", "raw_code": "int('11111111', 2)", "str_map": {"11111111": "_STR:0_"}}
{"src": ["delete", "all", "digits", "in", "string", "s", "that", "are", "not", "directly", "attached", "to", "a", "word", "character"], "token": ["re", ".", "sub", "(", "'$\\\\d+\\\\W+|\\\\b\\\\d+\\\\b|\\\\W+\\\\d+$'", ",", "''", ",", "s", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.sub('$\\\\d+\\\\W+|\\\\b\\\\d+\\\\b|\\\\W+\\\\d+$', '', s)", "decano_code": "re.sub('$\\\\d+\\\\W+|\\\\b\\\\d+\\\\b|\\\\W+\\\\d+$', '', s)", "raw_code": "re.sub('$\\\\d+\\\\W+|\\\\b\\\\d+\\\\b|\\\\W+\\\\d+$', '', s)", "str_map": {}}
{"src": ["delete", "digits", "at", "the", "end", "of", "string", "s"], "token": ["re", ".", "sub", "(", "'\\\\b\\\\d+\\\\b'", ",", "''", ",", "s", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.sub('\\\\b\\\\d+\\\\b', '', s)", "decano_code": "re.sub('\\\\b\\\\d+\\\\b', '', s)", "raw_code": "re.sub('\\\\b\\\\d+\\\\b', '', s)", "str_map": {}}
{"src": ["delete", "self-contained", "digits", "from", "string", "s"], "token": ["s", "=", "re", ".", "sub", "(", "'^\\\\d+\\\\s|\\\\s\\\\d+\\\\s|\\\\s\\\\d+$'", ",", "' '", ",", "s", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "s = re.sub('^\\\\d+\\\\s|\\\\s\\\\d+\\\\s|\\\\s\\\\d+$', ' ', s)", "decano_code": "s = re.sub('^\\\\d+\\\\s|\\\\s\\\\d+\\\\s|\\\\s\\\\d+$', ' ', s)", "raw_code": "s = re.sub('^\\\\d+\\\\s|\\\\s\\\\d+\\\\s|\\\\s\\\\d+$', ' ', s)", "str_map": {}}
{"src": ["truncate", "string", "s", "up", "to", "character", "_STR:0_"], "token": ["s", ".", "split", "(", "\" _STR:0_ \"", ",", "1", ")", "[", "1", "]"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP"], "cano_code": "s.split(\" _STR:0_ \", 1)[1]", "decano_code": "s.split(\" _STR:0_ \", 1)[1]", "raw_code": "s.split(':', 1)[1]", "str_map": {":": "_STR:0_"}}
{"src": ["print", "a", "string", "s", "by", "splitting", "with", "comma", ","], "token": ["print", "(", "s", ".", "split", "(", "','", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "print(s.split(','))", "decano_code": "print(s.split(','))", "raw_code": "print(s.split(','))", "str_map": {}}
{"src": ["create", "list", "by", "splitting", "string", "mystring", "using", "_STR:0_", "as", "delimiter"], "token": ["mystring", ".", "split", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "mystring.split(\" _STR:0_ \")", "decano_code": "mystring.split(\" _STR:0_ \")", "raw_code": "mystring.split(',')", "str_map": {",": "_STR:0_"}}
{"src": ["remove", "parentheses", "only", "around", "single", "words", "in", "a", "string", "s", "using", "regex"], "token": ["re", ".", "sub", "(", "'\\\\((\\\\w+)\\\\)'", ",", "'\\\\1'", ",", "s", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.sub('\\\\((\\\\w+)\\\\)', '\\\\1', s)", "decano_code": "re.sub('\\\\((\\\\w+)\\\\)', '\\\\1', s)", "raw_code": "re.sub('\\\\((\\\\w+)\\\\)', '\\\\1', s)", "str_map": {}}
{"src": ["webbrowser", "open", "url", "url"], "token": ["webbrowser", ".", "open_new", "(", "url", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "webbrowser.open_new(url)", "decano_code": "webbrowser.open_new(url)", "raw_code": "webbrowser.open_new(url)", "str_map": {}}
{"src": ["webbrowser", "open", "url", "_STR:0_"], "token": ["webbrowser", ".", "open", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "STRING", "OP"], "cano_code": "webbrowser.open(\" _STR:0_ \")", "decano_code": "webbrowser.open(\" _STR:0_ \")", "raw_code": "webbrowser.open('http://example.com')", "str_map": {"http://example.com": "_STR:0_"}}
{"src": ["change", "the", "background", "colour", "of", "the", "button", "pushbutton", "to", "red"], "token": ["self", ".", "pushButton", ".", "setStyleSheet", "(", "'background-color: red'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "self.pushButton.setStyleSheet('background-color: red')", "decano_code": "self.pushButton.setStyleSheet('background-color: red')", "raw_code": "self.pushButton.setStyleSheet('background-color: red')", "str_map": {}}
{"src": ["apply", "a", "list", "of", "functions", "named", "_STR:0_", "over", "a", "list", "of", "values", "named", "_STR:1_"], "token": ["[", "x", "(", "y", ")", "for", "x", ",", "y", "in", "zip", "(", "functions", ",", "values", ")", "]"], "type": ["OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "[x(y) for x, y in zip(functions, values)]", "decano_code": "[x(y) for x, y in zip(functions, values)]", "raw_code": "[x(y) for x, y in zip(functions, values)]", "str_map": {"functions": "_STR:0_", "values": "_STR:1_"}}
{"src": ["modify", "the", "width", "of", "a", "text", "control", "as", "300", "keeping", "default", "height", "in", "wxpython"], "token": ["wx", ".", "TextCtrl", "(", "self", ",", "-", "1", ",", "size", "=", "(", "300", ",", "-", "1", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "wx.TextCtrl(self, -1, size=(300, -1))", "decano_code": "wx.TextCtrl(self, -1, size=(300, -1))", "raw_code": "wx.TextCtrl(self, -1, size=(300, -1))", "str_map": {}}
{"src": ["display", "a", "grayscale", "image", "from", "array", "of", "pixels", "imageArray"], "token": ["imshow", "(", "imageArray", ",", "cmap", "=", "'Greys_r'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "imshow(imageArray, cmap='Greys_r')", "decano_code": "imshow(imageArray, cmap='Greys_r')", "raw_code": "imshow(imageArray, cmap='Greys_r')", "str_map": {}}
{"src": ["replace", "all", "the", "nan", "values", "with", "0", "in", "a", "pandas", "dataframe", "df"], "token": ["df", ".", "fillna", "(", "0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "df.fillna(0)", "decano_code": "df.fillna(0)", "raw_code": "df.fillna(0)", "str_map": {}}
{"src": ["export", "a", "table", "dataframe", "df", "in", "pyspark", "to", "csv", "_STR:0_"], "token": ["df", ".", "toPandas", "(", ")", ".", "to_csv", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df.toPandas().to_csv(\" _STR:0_ \")", "decano_code": "df.toPandas().to_csv(\" _STR:0_ \")", "raw_code": "df.toPandas().to_csv('mycsv.csv')", "str_map": {"mycsv.csv": "_STR:0_"}}
{"src": ["write", "DataFrame", "df", "to", "csv", "file", "_STR:0_"], "token": ["df", ".", "write", ".", "csv", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df.write.csv(\" _STR:0_ \")", "decano_code": "df.write.csv(\" _STR:0_ \")", "raw_code": "df.write.csv('mycsv.csv')", "str_map": {"mycsv.csv": "_STR:0_"}}
{"src": ["get", "the", "sum", "of", "each", "second", "value", "from", "a", "list", "of", "tuple", "structure"], "token": ["sum", "(", "x", "[", "1", "]", "for", "x", "in", "structure", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "sum(x[1] for x in structure)", "decano_code": "sum(x[1] for x in structure)", "raw_code": "sum(x[1] for x in structure)", "str_map": {}}
{"src": ["sum", "the", "3", "largest", "integers", "in", "groupby", "by", "_STR:0_", "and", "_STR:1_"], "token": ["df", ".", "groupby", "(", "\" _STR:0_ \"", ")", "[", "\" _STR:1_ \"", "]", ".", "agg", "(", "lambda", "x", ":", "x", ".", "nlargest", "(", "3", ")", ".", "sum", "(", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "KEYWORD", "OP", "OP", "OP"], "cano_code": "df.groupby(\" _STR:0_ \")[\" _STR:1_ \"].agg(lambda x: x.nlargest(3).sum())", "decano_code": "df.groupby(\" _STR:0_ \")[\" _STR:1_ \"].agg(lambda x: x.nlargest(3).sum())", "raw_code": "df.groupby('STNAME')['COUNTY_POP'].agg(lambda x: x.nlargest(3).sum())", "str_map": {"STNAME": "_STR:0_", "COUNTY_POP": "_STR:1_"}}
{"src": ["parse", "string", "_STR:0_", "according", "to", "format", "_STR:1_"], "token": ["datetime", ".", "strptime", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "datetime.strptime(\" _STR:0_ \", \" _STR:1_ \")", "decano_code": "datetime.strptime(\" _STR:0_ \", \" _STR:1_ \")", "raw_code": "datetime.strptime('21/11/06 16:30', '%d/%m/%y %H:%M')", "str_map": {"21/11/06 16:30": "_STR:0_", "%d/%m/%y %H:%M": "_STR:1_"}}
{"src": ["get", "current", "script", "directory"], "token": ["os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "os.path.dirname(os.path.abspath(__file__))", "decano_code": "os.path.dirname(os.path.abspath(__file__))", "raw_code": "os.path.dirname(os.path.abspath(__file__))", "str_map": {}}
{"src": ["double", "each", "character", "in", "string", "text.read(", "[", "text", ".", "read(", "]", ")"], "token": ["re", ".", "sub", "(", "'(.)'", ",", "'\\\\1\\\\1'", ",", "text", ".", "read", "(", ")", ",", "0", ",", "re", ".", "S", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "re.sub('(.)', '\\\\1\\\\1', text.read(), 0, re.S)", "decano_code": "re.sub('(.)', '\\\\1\\\\1', text.read(), 0, re.S)", "raw_code": "re.sub('(.)', '\\\\1\\\\1', text.read(), 0, re.S)", "str_map": {}}
{"src": ["concatenate", "strings", "in", "tuple", "('a', 'b', 'c', 'd', 'g', 'x', 'r', 'e'", ")", "into", "a", "single", "string"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "(", "'a'", ",", "'b'", ",", "'c'", ",", "'d'", ",", "'g'", ",", "'x'", ",", "'r'", ",", "'e'", ")", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "\"\"\"\"\"\".join(('a', 'b', 'c', 'd', 'g', 'x', 'r', 'e'))", "decano_code": "\"\"\"\"\"\".join(('a', 'b', 'c', 'd', 'g', 'x', 'r', 'e'))", "raw_code": "\"\"\"\"\"\".join(('a', 'b', 'c', 'd', 'g', 'x', 'r', 'e'))", "str_map": {}}
{"src": ["get", "full", "path", "of", "current", "directory"], "token": ["os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "abspath", "(", "__file__", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "os.path.dirname(os.path.abspath(__file__))", "decano_code": "os.path.dirname(os.path.abspath(__file__))", "raw_code": "os.path.dirname(os.path.abspath(__file__))", "str_map": {}}
{"src": ["variable", "number", "of", "digits", "digits", "in", "variable", "value", "in", "format", "string", "_STR:0_"], "token": ["\" _STR:0_ \"", ".", "format", "(", "value", ",", "digits", ")"], "type": ["STRING", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "\" _STR:0_ \".format(value, digits)", "decano_code": "\" _STR:0_ \".format(value, digits)", "raw_code": "\"\"\"{0:.{1}%}\"\"\".format(value, digits)", "str_map": {"{0:.{1}%}": "_STR:0_"}}
{"src": ["get", "current", "requested", "url"], "token": ["self", ".", "request", ".", "url"], "type": ["NAME", "OP", "NAME", "OP", "NAME"], "cano_code": "self.request.url", "decano_code": "self.request.url", "raw_code": "self.request.url", "str_map": {}}
{"src": ["get", "a", "random", "item", "from", "list", "choices"], "token": ["random_choice", "=", "random", ".", "choice", "(", "choices", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "random_choice = random.choice(choices)", "decano_code": "random_choice = random.choice(choices)", "raw_code": "random_choice = random.choice(choices)", "str_map": {}}
{"src": ["sum", "the", "length", "of", "all", "strings", "in", "a", "list", "strings"], "token": ["length", "=", "sum", "(", "len", "(", "s", ")", "for", "s", "in", "strings", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "length = sum(len(s) for s in strings)", "decano_code": "length = sum(len(s) for s in strings)", "raw_code": "length = sum(len(s) for s in strings)", "str_map": {}}
{"src": ["sort", "a", "list", "s", "by", "first", "and", "second", "attributes"], "token": ["s", "=", "sorted", "(", "s", ",", "key", "=", "lambda", "x", ":", "(", "x", "[", "1", "]", ",", "x", "[", "2", "]", ")", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "s = sorted(s, key=lambda x: (x[1], x[2]))", "decano_code": "s = sorted(s, key=lambda x: (x[1], x[2]))", "raw_code": "s = sorted(s, key=lambda x: (x[1], x[2]))", "str_map": {}}
{"src": ["sort", "a", "list", "of", "lists", "s", "by", "second", "and", "third", "element", "in", "each", "list", "."], "token": ["s", ".", "sort", "(", "key", "=", "operator", ".", "itemgetter", "(", "1", ",", "2", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "s.sort(key=operator.itemgetter(1, 2))", "decano_code": "s.sort(key=operator.itemgetter(1, 2))", "raw_code": "s.sort(key=operator.itemgetter(1, 2))", "str_map": {}}
{"src": ["mysql", "commit", "current", "transaction"], "token": ["con", ".", "commit", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "con.commit()", "decano_code": "con.commit()", "raw_code": "con.commit()", "str_map": {}}
{"src": ["filtering", "out", "strings", "that", "contain", "_STR:0_", "from", "a", "list", "of", "strings", "lst"], "token": ["[", "k", "for", "k", "in", "lst", "if", "\" _STR:0_ \"", "in", "k", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "STRING", "KEYWORD", "NAME", "OP"], "cano_code": "[k for k in lst if \" _STR:0_ \" in k]", "decano_code": "[k for k in lst if \" _STR:0_ \" in k]", "raw_code": "[k for k in lst if 'ab' in k]", "str_map": {"ab": "_STR:0_"}}
{"src": ["find", "the", "first", "letter", "of", "each", "element", "in", "string", "input"], "token": ["output", "=", "''", ".", "join", "(", "item", "[", "0", "]", ".", "upper", "(", ")", "for", "item", "in", "input", ".", "split", "(", ")", ")"], "type": ["NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "output = ''.join(item[0].upper() for item in input.split())", "decano_code": "output = ''.join(item[0].upper() for item in input.split())", "raw_code": "output = ''.join(item[0].upper() for item in input.split())", "str_map": {}}
{"src": ["get", "name", "of", "primary", "field", "name", "of", "django", "model", "CustomPK"], "token": ["CustomPK", ".", "_meta", ".", "pk", ".", "name"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME"], "cano_code": "CustomPK._meta.pk.name", "decano_code": "CustomPK._meta.pk.name", "raw_code": "CustomPK._meta.pk.name", "str_map": {}}
{"src": ["count", "the", "number", "of", "words", "in", "a", "string", "s"], "token": ["len", "(", "s", ".", "split", "(", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "len(s.split())", "decano_code": "len(s.split())", "raw_code": "len(s.split())", "str_map": {}}
{"src": ["multiply", "array", "a", "and", "array", "b", "respective", "elements", "then", "sum", "each", "row", "of", "the", "new", "array"], "token": ["np", ".", "einsum", "(", "'ji,i->j'", ",", "a", ",", "b", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "np.einsum('ji,i->j', a, b)", "decano_code": "np.einsum('ji,i->j', a, b)", "raw_code": "np.einsum('ji,i->j', a, b)", "str_map": {}}
{"src": ["check", "python", "version"], "token": ["sys", ".", "version"], "type": ["NAME", "OP", "NAME"], "cano_code": "sys.version", "decano_code": "sys.version", "raw_code": "sys.version", "str_map": {}}
{"src": ["check", "python", "version"], "token": ["sys", ".", "version_info"], "type": ["NAME", "OP", "NAME"], "cano_code": "sys.version_info", "decano_code": "sys.version_info", "raw_code": "sys.version_info", "str_map": {}}
{"src": ["format", "number", "1000000000.0", "[", "1000000000", ".", "0", "]", "using", "latex", "notation"], "token": ["print", "(", "'\\\\num{{{0:.2g}}}'", ".", "format", "(", "1000000000.0", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "KEYWORD", "OP", "NUMBER", "OP", "OP"], "cano_code": "print('\\\\num{{{0:.2g}}}'.format(1000000000.0))", "decano_code": "print('\\\\num{{{0:.2g}}}'.format(1000000000.0))", "raw_code": "print('\\\\num{{{0:.2g}}}'.format(1000000000.0))", "str_map": {}}
{"src": ["initialize", "a", "list", "of", "empty", "lists", "x", "of", "size", "3"], "token": ["x", "=", "[", "[", "]", "for", "i", "in", "range", "(", "3", ")", "]"], "type": ["NAME", "OP", "OP", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "OP"], "cano_code": "x = [[] for i in range(3)]", "decano_code": "x = [[] for i in range(3)]", "raw_code": "x = [[] for i in range(3)]", "str_map": {}}
{"src": ["apply", "jinja2", "filters", "forceescape", "and", "linebreaks", "on", "variable", "my_variable"], "token": ["{", "{", "my_variable", "|", "forceescape", "|", "linebreaks", "}", "}"], "type": ["OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "{{my_variable | forceescape | linebreaks}}", "decano_code": "{{my_variable | forceescape | linebreaks}}", "raw_code": "{{my_variable | forceescape | linebreaks}}", "str_map": {}}
{"src": ["zip", "a", "list", "of", "tuples", "[(1, 4), (2, 5), (3, 6)", "]", "into", "a", "list", "of", "tuples", "according", "to", "original", "tuple", "index"], "token": ["zip", "(", "*", "[", "(", "1", ",", "4", ")", ",", "(", "2", ",", "5", ")", ",", "(", "3", ",", "6", ")", "]", ")"], "type": ["KEYWORD", "OP", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "zip(*[(1, 4), (2, 5), (3, 6)])", "decano_code": "zip(*[(1, 4), (2, 5), (3, 6)])", "raw_code": "zip(*[(1, 4), (2, 5), (3, 6)])", "str_map": {}}
{"src": ["split", "a", "list", "of", "tuples", "data", "into", "sub-lists", "of", "the", "same", "tuple", "field", "using", "itertools"], "token": ["[", "list", "(", "group", ")", "for", "key", ",", "group", "in", "itertools", ".", "groupby", "(", "data", ",", "operator", ".", "itemgetter", "(", "1", ")", ")", "]"], "type": ["OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "[list(group) for key, group in itertools.groupby(data, operator.itemgetter(1))]", "decano_code": "[list(group) for key, group in itertools.groupby(data, operator.itemgetter(1))]", "raw_code": "[list(group) for key, group in itertools.groupby(data, operator.itemgetter(1))]", "str_map": {}}
{"src": ["convert", "a", "string", "into", "a", "list"], "token": ["list", "(", "'hello'", ")"], "type": ["KEYWORD", "OP", "STRING", "OP"], "cano_code": "list('hello')", "decano_code": "list('hello')", "raw_code": "list('hello')", "str_map": {}}
{"src": ["create", "new", "column", "A_perc", "in", "dataframe", "df", "with", "row", "values", "equal", "to", "the", "value", "in", "column", "a", "divided", "by", "the", "value", "in", "column", "sum"], "token": ["df", "[", "'A_perc'", "]", "=", "df", "[", "'A'", "]", "/", "df", "[", "'sum'", "]"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df['A_perc'] = df['A'] / df['sum']", "decano_code": "df['A_perc'] = df['A'] / df['sum']", "raw_code": "df['A_perc'] = df['A'] / df['sum']", "str_map": {}}
{"src": ["getting", "a", "list", "of", "all", "subdirectories", "in", "the", "directory", "directory"], "token": ["os", ".", "walk", "(", "directory", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "os.walk(directory)", "decano_code": "os.walk(directory)", "raw_code": "os.walk(directory)", "str_map": {}}
{"src": ["get", "a", "list", "of", "all", "subdirectories", "in", "the", "directory", "directory"], "token": ["[", "x", "[", "0", "]", "for", "x", "in", "os", ".", "walk", "(", "directory", ")", "]"], "type": ["OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "[x[0] for x in os.walk(directory)]", "decano_code": "[x[0] for x in os.walk(directory)]", "raw_code": "[x[0] for x in os.walk(directory)]", "str_map": {}}
{"src": ["update", "all", "values", "associated", "with", "key", "i", "to", "string", "_STR:0_", "if", "value", "j", "is", "not", "equal", "to", "_STR:1_", "in", "dictionary", "d"], "token": ["{", "i", ":", "\" _STR:0_ \"", "for", "i", ",", "j", "in", "list", "(", "d", ".", "items", "(", ")", ")", "if", "j", "!=", "\" _STR:1_ \"", "}"], "type": ["OP", "NAME", "OP", "STRING", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "NAME", "OP", "STRING", "OP"], "cano_code": "{i: \" _STR:0_ \" for i, j in list(d.items()) if j != \" _STR:1_ \"}", "decano_code": "{i: \" _STR:0_ \" for i, j in list(d.items()) if j != \" _STR:1_ \"}", "raw_code": "{i: 'updated' for i, j in list(d.items()) if j != 'None'}", "str_map": {"updated": "_STR:0_", "None": "_STR:1_"}}
{"src": ["filter", "a", "dictionary", "d", "to", "remove", "keys", "with", "value", "none", "and", "replace", "other", "values", "with", "_STR:0_"], "token": ["dict", "(", "(", "k", ",", "\" _STR:0_ \"", ")", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", "if", "v", "is", "None", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP"], "cano_code": "dict((k, \" _STR:0_ \") for k, v in d.items() if v is None)", "decano_code": "dict((k, \" _STR:0_ \") for k, v in d.items() if v is None)", "raw_code": "dict((k, 'updated') for k, v in d.items() if v is None)", "str_map": {"updated": "_STR:0_"}}
{"src": ["filter", "a", "dictionary", "d", "to", "remove", "keys", "with", "value", "_STR:0_", "and", "replace", "other", "values", "with", "_STR:1_"], "token": ["dict", "(", "(", "k", ",", "\" _STR:1_ \"", ")", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", "if", "v", "!=", "\" _STR:0_ \"", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "OP", "STRING", "OP"], "cano_code": "dict((k, \" _STR:1_ \") for k, v in d.items() if v != \" _STR:0_ \")", "decano_code": "dict((k, \" _STR:1_ \") for k, v in d.items() if v != \" _STR:0_ \")", "raw_code": "dict((k, 'updated') for k, v in d.items() if v != 'None')", "str_map": {"None": "_STR:0_", "updated": "_STR:1_"}}
{"src": ["count", "number", "of", "rows", "in", "a", "group", "key_columns", "in", "pandas", "groupby", "object", "df"], "token": ["df", ".", "groupby", "(", "key_columns", ")", ".", "size", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "df.groupby(key_columns).size()", "decano_code": "df.groupby(key_columns).size()", "raw_code": "df.groupby(key_columns).size()", "str_map": {}}
{"src": ["return", "list", "result", "of", "sum", "of", "elements", "of", "each", "list", "b", "in", "list", "of", "lists", "a"], "token": ["result", "=", "[", "sum", "(", "b", ")", "for", "b", "in", "a", "]"], "type": ["NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "result = [sum(b) for b in a]", "decano_code": "result = [sum(b) for b in a]", "raw_code": "result = [sum(b) for b in a]", "str_map": {}}
{"src": ["what", "'", "s", "the", "best", "way", "to", "search", "for", "a", "python", "dictionary", "value", "in", "a", "list", "of", "dictionaries", "?"], "token": ["any", "(", "d", "[", "'site'", "]", "==", "'Superuser'", "for", "d", "in", "data", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "OP", "STRING", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "any(d['site'] == 'Superuser' for d in data)", "decano_code": "any(d['site'] == 'Superuser' for d in data)", "raw_code": "any(d['site'] == 'Superuser' for d in data)", "str_map": {}}
{"src": ["create", "a", "2D", "array", "of", "node", "objects", "with", "dimensions", "cols", "columns", "and", "rows", "rows"], "token": ["nodes", "=", "[", "[", "Node", "(", ")", "for", "j", "in", "range", "(", "cols", ")", "]", "for", "i", "in", "range", "(", "rows", ")", "]"], "type": ["NAME", "OP", "OP", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "OP"], "cano_code": "nodes = [[Node() for j in range(cols)] for i in range(rows)]", "decano_code": "nodes = [[Node() for j in range(cols)] for i in range(rows)]", "raw_code": "nodes = [[Node() for j in range(cols)] for i in range(rows)]", "str_map": {}}
{"src": ["replace", "extension", "_STR:0_", "in", "basename", "_STR:1_", "with", "extension", "_STR:2_"], "token": ["print", "(", "os", ".", "path", ".", "splitext", "(", "\" _STR:1_ \"", ")", "[", "0", "]", "+", "\" _STR:2_ \"", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NUMBER", "OP", "OP", "STRING", "OP"], "cano_code": "print(os.path.splitext(\" _STR:1_ \")[0] + \" _STR:2_ \")", "decano_code": "print(os.path.splitext(\" _STR:1_ \")[0] + \" _STR:2_ \")", "raw_code": "print(os.path.splitext('/home/user/somefile.txt')[0] + '.jpg')", "str_map": {".txt": "_STR:0_", "/home/user/somefile.txt": "_STR:1_", ".jpg": "_STR:2_"}}
{"src": ["set", "the", "resolution", "of", "a", "monitor", "as", "FULLSCREEN", "in", "pygame"], "token": ["pygame", ".", "display", ".", "set_mode", "(", "(", "0", ",", "0", ")", ",", "pygame", ".", "FULLSCREEN", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "pygame.display.set_mode((0, 0), pygame.FULLSCREEN)", "decano_code": "pygame.display.set_mode((0, 0), pygame.FULLSCREEN)", "raw_code": "pygame.display.set_mode((0, 0), pygame.FULLSCREEN)", "str_map": {}}
{"src": ["format", "float", "3.5e+20", "[", "3", ".", "5e+20", "]", "to", "$3.5 \\\\times 10^{20}", "[", "$3", ".", "5", "\\\\times", "10^{20}", "]", "$", "and", "set", "as", "title", "of", "matplotlib", "plot", "ax"], "token": ["ax", ".", "set_title", "(", "'$%s \\\\times 10^{%s}$'", "%", "(", "'3.5'", ",", "'+20'", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "ax.set_title('$%s \\\\times 10^{%s}$' % ('3.5', '+20'))", "decano_code": "ax.set_title('$%s \\\\times 10^{%s}$' % ('3.5', '+20'))", "raw_code": "ax.set_title('$%s \\\\times 10^{%s}$' % ('3.5', '+20'))", "str_map": {}}
{"src": ["get", "the", "age", "of", "directory", "(or", "file", ")", "/tmp", "in", "seconds", "."], "token": ["print", "(", "os", ".", "path", ".", "getmtime", "(", "'/tmp'", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "print(os.path.getmtime('/tmp'))", "decano_code": "print(os.path.getmtime('/tmp'))", "raw_code": "print(os.path.getmtime('/tmp'))", "str_map": {}}
{"src": ["how", "to", "get", "month", "name", "of", "datetime", "today"], "token": ["today", ".", "strftime", "(", "'%B'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "today.strftime('%B')", "decano_code": "today.strftime('%B')", "raw_code": "today.strftime('%B')", "str_map": {}}
{"src": ["get", "month", "name", "from", "a", "datetime", "object", "today"], "token": ["today", ".", "strftime", "(", "'%B'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "today.strftime('%B')", "decano_code": "today.strftime('%B')", "raw_code": "today.strftime('%B')", "str_map": {}}
{"src": ["convert", "nested", "list", "x", "into", "a", "flat", "list"], "token": ["[", "j", "for", "i", "in", "x", "for", "j", "in", "i", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[j for i in x for j in i]", "decano_code": "[j for i in x for j in i]", "raw_code": "[j for i in x for j in i]", "str_map": {}}
{"src": ["get", "each", "value", "from", "a", "list", "of", "lists", "a", "using", "itertools"], "token": ["print", "(", "list", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "a", ")", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "print(list(itertools.chain.from_iterable(a)))", "decano_code": "print(list(itertools.chain.from_iterable(a)))", "raw_code": "print(list(itertools.chain.from_iterable(a)))", "str_map": {}}
{"src": ["convert", "date", "string", "_STR:0_", "into", "day", "of", "week"], "token": ["datetime", ".", "datetime", ".", "strptime", "(", "\" _STR:0_ \"", ",", "'%B %d, %Y'", ")", ".", "strftime", "(", "'%A'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "datetime.datetime.strptime(\" _STR:0_ \", '%B %d, %Y').strftime('%A')", "decano_code": "datetime.datetime.strptime(\" _STR:0_ \", '%B %d, %Y').strftime('%A')", "raw_code": "datetime.datetime.strptime('January 11, 2010', '%B %d, %Y').strftime('%A')", "str_map": {"January 11, 2010": "_STR:0_"}}
{"src": ["convert", "date", "string", "to", "day", "of", "week"], "token": ["datetime", ".", "datetime", ".", "strptime", "(", "'January 11, 2010'", ",", "'%B %d, %Y'", ")", ".", "strftime", "(", "'%a'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "datetime.datetime.strptime('January 11, 2010', '%B %d, %Y').strftime('%a')", "decano_code": "datetime.datetime.strptime('January 11, 2010', '%B %d, %Y').strftime('%a')", "raw_code": "datetime.datetime.strptime('January 11, 2010', '%B %d, %Y').strftime('%a')", "str_map": {}}
{"src": ["remove", "item", "_STR:0_", "in", "list", "a"], "token": ["a", ".", "remove", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "a.remove(\" _STR:0_ \")", "decano_code": "a.remove(\" _STR:0_ \")", "raw_code": "a.remove('b')", "str_map": {"b": "_STR:0_"}}
{"src": ["remove", "item", "c", "in", "list", "a"], "token": ["a", ".", "remove", "(", "c", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "a.remove(c)", "decano_code": "a.remove(c)", "raw_code": "a.remove(c)", "str_map": {}}
{"src": ["delete", "the", "element", "6", "from", "list", "a"], "token": ["a", ".", "remove", "(", "6", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "a.remove(6)", "decano_code": "a.remove(6)", "raw_code": "a.remove(6)", "str_map": {}}
{"src": ["delete", "the", "element", "6", "from", "list", "a"], "token": ["a", ".", "remove", "(", "6", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "a.remove(6)", "decano_code": "a.remove(6)", "raw_code": "a.remove(6)", "str_map": {}}
{"src": ["delete", "the", "element", "c", "from", "list", "a"], "token": ["if", "(", "c", "in", "a", ")", ":", "\n", "    ", "a", ".", "remove", "(", "c", ")", ""], "type": ["KEYWORD", "OP", "NAME", "KEYWORD", "NAME", "OP", "OP", "NEWLINE", "INDENT", "NAME", "OP", "NAME", "OP", "NAME", "OP", "DEDENT"], "cano_code": "if (c in a):\n    a.remove(c)", "decano_code": "if (c in a):\n    a.remove(c)", "raw_code": "if (c in a):\n    a.remove(c)", "str_map": {}}
{"src": ["delete", "the", "element", "c", "from", "list", "a"], "token": ["try", ":", "\n", "    ", "a", ".", "remove", "(", "c", ")", "\n", "", "except", "ValueError", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "OP", "NEWLINE", "INDENT", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NEWLINE", "DEDENT", "KEYWORD", "NAME", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "try:\n    a.remove(c)\nexcept ValueError:\n    pass", "decano_code": "try:\n    a.remove(c)\nexcept ValueError:\n    pass", "raw_code": "try:\n    a.remove(c)\nexcept ValueError:\n    pass", "str_map": {}}
{"src": ["get", "all", "matching", "patterns", "_STR:0_", "from", "a", "string", "_STR:1_", "."], "token": ["re", ".", "findall", "(", "'(?=(a.*?a))'", ",", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.findall('(?=(a.*?a))', \" _STR:1_ \")", "decano_code": "re.findall('(?=(a.*?a))', \" _STR:1_ \")", "raw_code": "re.findall('(?=(a.*?a))', 'a 1 a 2 a 3 a 4 a')", "str_map": {"a.*?a": "_STR:0_", "a 1 a 2 a 3 a 4 a": "_STR:1_"}}
{"src": ["outer", "product", "of", "each", "column", "of", "a", "2d", "x", "array", "to", "form", "a", "3d", "array", "x"], "token": ["np", ".", "einsum", "(", "'ij,kj->jik'", ",", "X", ",", "X", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "np.einsum('ij,kj->jik', X, X)", "decano_code": "np.einsum('ij,kj->jik', X, X)", "raw_code": "np.einsum('ij,kj->jik', X, X)", "str_map": {}}
{"src": ["getting", "the", "last", "element", "of", "list", "some_list"], "token": ["some_list", "[", "(", "-", "1", ")", "]"], "type": ["NAME", "OP", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "some_list[(-1)]", "decano_code": "some_list[(-1)]", "raw_code": "some_list[(-1)]", "str_map": {}}
{"src": ["getting", "the", "second", "to", "last", "element", "of", "list", "some_list"], "token": ["some_list", "[", "(", "-", "2", ")", "]"], "type": ["NAME", "OP", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "some_list[(-2)]", "decano_code": "some_list[(-2)]", "raw_code": "some_list[(-2)]", "str_map": {}}
{"src": ["gets", "the", "n", "th-to-last", "element", "in", "list", "some_list"], "token": ["some_list", "[", "(", "-", "n", ")", "]"], "type": ["NAME", "OP", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "some_list[(- n)]", "decano_code": "some_list[(- n)]", "raw_code": "some_list[(- n)]", "str_map": {}}
{"src": ["get", "the", "last", "element", "in", "list", "alist"], "token": ["alist", "[", "(", "-", "1", ")", "]"], "type": ["NAME", "OP", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "alist[(-1)]", "decano_code": "alist[(-1)]", "raw_code": "alist[(-1)]", "str_map": {}}
{"src": ["get", "the", "last", "element", "in", "list", "astr"], "token": ["astr", "[", "(", "-", "1", ")", "]"], "type": ["NAME", "OP", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "astr[(-1)]", "decano_code": "astr[(-1)]", "raw_code": "astr[(-1)]", "str_map": {}}
{"src": ["make", "a", "list", "of", "integers", "from", "0", "to", "5", "where", "each", "second", "element", "is", "a", "duplicate", "of", "the", "previous", "element"], "token": ["print", "(", "[", "u", "for", "v", "in", "[", "[", "i", ",", "i", "]", "for", "i", "in", "range", "(", "5", ")", "]", "for", "u", "in", "v", "]", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "print([u for v in [[i, i] for i in range(5)] for u in v])", "decano_code": "print([u for v in [[i, i] for i in range(5)] for u in v])", "raw_code": "print([u for v in [[i, i] for i in range(5)] for u in v])", "str_map": {}}
{"src": ["create", "a", "list", "of", "integers", "with", "duplicate", "values", "[0, 0, 1, 1, 2, 2, 3, 3, 4, 4", "]"], "token": ["[", "0", ",", "0", ",", "1", ",", "1", ",", "2", ",", "2", ",", "3", ",", "3", ",", "4", ",", "4", "]"], "type": ["OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "[0, 0, 1, 1, 2, 2, 3, 3, 4, 4]", "decano_code": "[0, 0, 1, 1, 2, 2, 3, 3, 4, 4]", "raw_code": "[0, 0, 1, 1, 2, 2, 3, 3, 4, 4]", "str_map": {}}
{"src": ["create", "a", "list", "of", "integers", "from", "1", "to", "5", "with", "each", "value", "duplicated"], "token": ["[", "(", "i", "//", "2", ")", "for", "i", "in", "range", "(", "10", ")", "]"], "type": ["OP", "OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "OP"], "cano_code": "[(i // 2) for i in range(10)]", "decano_code": "[(i // 2) for i in range(10)]", "raw_code": "[(i // 2) for i in range(10)]", "str_map": {}}
{"src": ["remove", "first", "and", "last", "lines", "of", "string", "s"], "token": ["s", "[", "s", ".", "find", "(", "'\\n'", ")", "+", "1", ":", "s", ".", "rfind", "(", "'\\n'", ")", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NUMBER", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "s[s.find('\\n') + 1:s.rfind('\\n')]", "decano_code": "s[s.find('\\n') + 1:s.rfind('\\n')]", "raw_code": "s[s.find('\\n') + 1:s.rfind('\\n')]", "str_map": {}}
{"src": ["create", "dict", "of", "squared", "int", "values", "in", "range", "of", "100"], "token": ["{", "(", "x", "**", "2", ")", "for", "x", "in", "range", "(", "100", ")", "}"], "type": ["OP", "OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "OP"], "cano_code": "{(x ** 2) for x in range(100)}", "decano_code": "{(x ** 2) for x in range(100)}", "raw_code": "{(x ** 2) for x in range(100)}", "str_map": {}}
{"src": ["zip", "lists", "[1, 2], [3, 4], [5, 6", "]", "in", "a", "list"], "token": ["zip", "(", "*", "[", "[", "1", ",", "2", "]", ",", "[", "3", ",", "4", "]", ",", "[", "5", ",", "6", "]", "]", ")"], "type": ["KEYWORD", "OP", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "zip(*[[1, 2], [3, 4], [5, 6]])", "decano_code": "zip(*[[1, 2], [3, 4], [5, 6]])", "raw_code": "zip(*[[1, 2], [3, 4], [5, 6]])", "str_map": {}}
{"src": ["zip", "lists", "in", "a", "list", "[[1", ",", "2]", ",", "[3", ",", "4]", ",", "[5", ",", "6]", "]"], "token": ["zip", "(", "*", "[", "[", "1", ",", "2", "]", ",", "[", "3", ",", "4", "]", ",", "[", "5", ",", "6", "]", "]", ")"], "type": ["KEYWORD", "OP", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "zip(*[[1, 2], [3, 4], [5, 6]])", "decano_code": "zip(*[[1, 2], [3, 4], [5, 6]])", "raw_code": "zip(*[[1, 2], [3, 4], [5, 6]])", "str_map": {}}
{"src": ["request", "page", "_STR:0_", "with", "credentials", "of", "username", "_STR:1_", "and", "password", "_STR:2_"], "token": ["requests", ".", "get", "(", "\" _STR:0_ \"", ",", "auth", "=", "(", "\" _STR:1_ \"", ",", "\" _STR:2_ \"", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "requests.get(\" _STR:0_ \", auth=(\" _STR:1_ \", \" _STR:2_ \"))", "decano_code": "requests.get(\" _STR:0_ \", auth=(\" _STR:1_ \", \" _STR:2_ \"))", "raw_code": "requests.get('https://www.mysite.com/', auth=('username', 'pwd'))", "str_map": {"https://www.mysite.com/": "_STR:0_", "username": "_STR:1_", "pwd": "_STR:2_"}}
{"src": ["get", "a", "new", "string", "from", "the", "3rd", "character", "to", "the", "end", "of", "the", "string", "x"], "token": ["x", "[", "2", ":", "]"], "type": ["NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "x[2:]", "decano_code": "x[2:]", "raw_code": "x[2:]", "str_map": {}}
{"src": ["get", "a", "new", "string", "including", "the", "first", "two", "characters", "of", "string", "x"], "token": ["x", "[", ":", "2", "]"], "type": ["NAME", "OP", "OP", "NUMBER", "OP"], "cano_code": "x[:2]", "decano_code": "x[:2]", "raw_code": "x[:2]", "str_map": {}}
{"src": ["get", "a", "new", "string", "including", "all", "but", "the", "last", "character", "of", "string", "x"], "token": ["x", "[", ":", "(", "-", "2", ")", "]"], "type": ["NAME", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "x[:(-2)]", "decano_code": "x[:(-2)]", "raw_code": "x[:(-2)]", "str_map": {}}
{"src": ["get", "a", "new", "string", "including", "the", "last", "two", "characters", "of", "string", "x"], "token": ["x", "[", "(", "-", "2", ")", ":", "]"], "type": ["NAME", "OP", "OP", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "x[(-2):]", "decano_code": "x[(-2):]", "raw_code": "x[(-2):]", "str_map": {}}
{"src": ["get", "a", "new", "string", "with", "the", "3rd", "to", "the", "second-to-last", "characters", "of", "string", "x"], "token": ["x", "[", "2", ":", "(", "-", "2", ")", "]"], "type": ["NAME", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "x[2:(-2)]", "decano_code": "x[2:(-2)]", "raw_code": "x[2:(-2)]", "str_map": {}}
{"src": ["reverse", "a", "string", "some_string"], "token": ["some_string", "[", ":", ":", "(", "-", "1", ")", "]"], "type": ["NAME", "OP", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "some_string[::(-1)]", "decano_code": "some_string[::(-1)]", "raw_code": "some_string[::(-1)]", "str_map": {}}
{"src": ["select", "alternate", "characters", "of", "_STR:0_"], "token": ["\" _STR:0_ \"", "[", ":", ":", "2", "]"], "type": ["STRING", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "\" _STR:0_ \"[::2]", "decano_code": "\" _STR:0_ \"[::2]", "raw_code": "'H-e-l-l-o- -W-o-r-l-d'[::2]", "str_map": {"H-e-l-l-o- -W-o-r-l-d": "_STR:0_"}}
{"src": ["select", "a", "substring", "of", "s", "beginning", "at", "beginning", "of", "length", "LENGTH"], "token": ["s", "=", "s", "[", "beginning", ":", "(", "beginning", "+", "LENGTH", ")", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "s = s[beginning:(beginning + LENGTH)]", "decano_code": "s = s[beginning:(beginning + LENGTH)]", "raw_code": "s = s[beginning:(beginning + LENGTH)]", "str_map": {}}
{"src": ["terminate", "the", "program"], "token": ["sys", ".", "exit", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "sys.exit()", "decano_code": "sys.exit()", "raw_code": "sys.exit()", "str_map": {}}
{"src": ["terminate", "the", "program"], "token": ["quit", "(", ")"], "type": ["NAME", "OP", "OP"], "cano_code": "quit()", "decano_code": "quit()", "raw_code": "quit()", "str_map": {}}
{"src": ["terminating", "a", "python", "script", "with", "error", "message", "_STR:0_"], "token": ["sys", ".", "exit", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "sys.exit(\" _STR:0_ \")", "decano_code": "sys.exit(\" _STR:0_ \")", "raw_code": "sys.exit('some error message')", "str_map": {"some error message": "_STR:0_"}}
{"src": ["encode", "value", "of", "key", "city", "in", "dictionary", "data", "as", "ascii", ",", "ignoring", "non-ascii", "characters"], "token": ["data", "[", "'City'", "]", ".", "encode", "(", "'ascii'", ",", "'ignore'", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "data['City'].encode('ascii', 'ignore')", "decano_code": "data['City'].encode('ascii', 'ignore')", "raw_code": "data['City'].encode('ascii', 'ignore')", "str_map": {}}
{"src": ["get", "current", "CPU", "and", "RAM", "usage"], "token": ["psutil", ".", "cpu_percent", "(", ")", "\n", "psutil", ".", "virtual_memory", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NEWLINE", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "psutil.cpu_percent()\npsutil.virtual_memory()", "decano_code": "psutil.cpu_percent()\npsutil.virtual_memory()", "raw_code": "psutil.cpu_percent()\npsutil.virtual_memory()", "str_map": {}}
{"src": ["get", "current", "RAM", "usage", "of", "current", "program"], "token": ["pid", "=", "os", ".", "getpid", "(", ")", "\n", "py", "=", "psutil", ".", "Process", "(", "pid", ")", "\n", "memoryUse", "=", "(", "py", ".", "memory_info", "(", ")", "[", "0", "]", "/", "(", "2.0", "**", "30", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NEWLINE", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NEWLINE", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "pid = os.getpid()\npy = psutil.Process(pid)\nmemoryUse = (py.memory_info()[0] / (2.0 ** 30))", "decano_code": "pid = os.getpid()\npy = psutil.Process(pid)\nmemoryUse = (py.memory_info()[0] / (2.0 ** 30))", "raw_code": "pid = os.getpid()\npy = psutil.Process(pid)\nmemoryUse = (py.memory_info()[0] / (2.0 ** 30))", "str_map": {}}
{"src": ["print", "cpu", "and", "memory", "usage"], "token": ["print", "(", "(", "psutil", ".", "cpu_percent", "(", ")", ")", ")", "\n", "print", "(", "(", "psutil", ".", "virtual_memory", "(", ")", ")", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NEWLINE", "KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "print((psutil.cpu_percent()))\nprint((psutil.virtual_memory()))", "decano_code": "print((psutil.cpu_percent()))\nprint((psutil.virtual_memory()))", "raw_code": "print((psutil.cpu_percent()))\nprint((psutil.virtual_memory()))", "str_map": {}}
{"src": ["read", "a", "ragged", "csv", "file", "D:/Temp/tt.csv", "[", "D:/Temp/tt", ".", "csv", "]", "using", "names", "parameter", "in", "pandas"], "token": ["pd", ".", "read_csv", "(", "'D:/Temp/tt.csv'", ",", "names", "=", "list", "(", "'abcdef'", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "OP"], "cano_code": "pd.read_csv('D:/Temp/tt.csv', names=list('abcdef'))", "decano_code": "pd.read_csv('D:/Temp/tt.csv', names=list('abcdef'))", "raw_code": "pd.read_csv('D:/Temp/tt.csv', names=list('abcdef'))", "str_map": {}}
{"src": ["get", "first", "non-null", "value", "per", "each", "row", "from", "dataframe", "df"], "token": ["df", ".", "stack", "(", ")", ".", "groupby", "(", "level", "=", "0", ")", ".", "first", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "df.stack().groupby(level=0).first()", "decano_code": "df.stack().groupby(level=0).first()", "raw_code": "df.stack().groupby(level=0).first()", "str_map": {}}
{"src": ["print", "two", "numbers", "10", "and", "20", "using", "string", "formatting"], "token": ["\"\"\"{0} {1}\"\"\"", ".", "format", "(", "10", ",", "20", ")"], "type": ["STRING", "OP", "KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "\"\"\"{0} {1}\"\"\".format(10, 20)", "decano_code": "\"\"\"{0} {1}\"\"\".format(10, 20)", "raw_code": "\"\"\"{0} {1}\"\"\".format(10, 20)", "str_map": {}}
{"src": ["replace", "placeholders", "in", "string", "_STR:0_", "with", "arguments", "(10, 20, foo='bar', ham='spam'", ")"], "token": ["\" _STR:0_ \"", ".", "format", "(", "10", ",", "20", ",", "foo", "=", "'bar'", ",", "ham", "=", "'spam'", ")"], "type": ["STRING", "OP", "KEYWORD", "OP", "NUMBER", "OP", "NUMBER", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "\" _STR:0_ \".format(10, 20, foo='bar', ham='spam')", "decano_code": "\" _STR:0_ \".format(10, 20, foo='bar', ham='spam')", "raw_code": "\"\"\"{1} {ham} {0} {foo} {1}\"\"\".format(10, 20, foo='bar', ham='spam')", "str_map": {"{1} {ham} {0} {foo} {1}": "_STR:0_"}}
{"src": ["create", "list", "changed_list ", "containing", "elements", "of", "list", "original_list", "whilst", "converting", "strings", "containing", "digits", "to", "integers"], "token": ["changed_list", "=", "[", "(", "int", "(", "f", ")", "if", "f", ".", "isdigit", "(", ")", "else", "f", ")", "for", "f", "in", "original_list", "]"], "type": ["NAME", "OP", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "changed_list = [(int(f) if f.isdigit() else f) for f in original_list]", "decano_code": "changed_list = [(int(f) if f.isdigit() else f) for f in original_list]", "raw_code": "changed_list = [(int(f) if f.isdigit() else f) for f in original_list]", "str_map": {}}
{"src": ["get", "a", "dictionary", "with", "keys", "from", "one", "list", "keys", "and", "values", "from", "other", "list", "data"], "token": ["dict", "(", "zip", "(", "keys", ",", "zip", "(", "*", "data", ")", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "OP", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "dict(zip(keys, zip(*data)))", "decano_code": "dict(zip(keys, zip(*data)))", "raw_code": "dict(zip(keys, zip(*data)))", "str_map": {}}
{"src": ["convert", "string", "apple", "from", "iso-8859-1/latin1", "to", "utf-8"], "token": ["apple", ".", "decode", "(", "'iso-8859-1'", ")", ".", "encode", "(", "'utf8'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "apple.decode('iso-8859-1').encode('utf8')", "decano_code": "apple.decode('iso-8859-1').encode('utf8')", "raw_code": "apple.decode('iso-8859-1').encode('utf8')", "str_map": {}}
{"src": ["exclude", "column", "names", "when", "writing", "dataframe", "df", "to", "a", "csv", "file", "filename.csv", "[", "filename", ".", "csv", "]"], "token": ["df", ".", "to_csv", "(", "'filename.csv'", ",", "header", "=", "False", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df.to_csv('filename.csv', header=False)", "decano_code": "df.to_csv('filename.csv', header=False)", "raw_code": "df.to_csv('filename.csv', header=False)", "str_map": {}}
{"src": ["escape", "character", "_STR:0_", "in", "string", "_STR:1_", "while", "using", "function", "format", "with", "arguments", "('1', '2', '3'", ")"], "token": ["print", "(", "\" _STR:1_ \"", ".", "format", "(", "'1'", ",", "'2'", ",", "'3'", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "print(\" _STR:1_ \".format('1', '2', '3'))", "decano_code": "print(\" _STR:1_ \".format('1', '2', '3'))", "raw_code": "print('{0}:<15}}{1}:<15}}{2}:<8}}'.format('1', '2', '3'))", "str_map": {"}": "_STR:0_", "{0}:<15}}{1}:<15}}{2}:<8}}": "_STR:1_"}}
{"src": ["get", "dictionary", "with", "max", "value", "of", "key", "_STR:0_", "in", "list", "of", "dicts", "ld"], "token": ["max", "(", "ld", ",", "key", "=", "lambda", "d", ":", "d", "[", "\" _STR:0_ \"", "]", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "max(ld, key=lambda d: d[\" _STR:0_ \"])", "decano_code": "max(ld, key=lambda d: d[\" _STR:0_ \"])", "raw_code": "max(ld, key=lambda d: d['size'])", "str_map": {"size": "_STR:0_"}}
{"src": ["format", "parameters", "_STR:0_", "and", "_STR:1_", "into", "plcaeholders", "in", "string", "_STR:2_"], "token": ["\" _STR:2_ \"", ".", "format", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")"], "type": ["STRING", "OP", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "\" _STR:2_ \".format(\" _STR:0_ \", \" _STR:1_ \")", "decano_code": "\" _STR:2_ \".format(\" _STR:0_ \", \" _STR:1_ \")", "raw_code": "\"\"\"{0}\\\\w{{2}}b{1}\\\\w{{2}}quarter\"\"\".format('b', 'a')", "str_map": {"b": "_STR:0_", "a": "_STR:1_", "{0}\\w{{2}}b{1}\\w{{2}}quarter": "_STR:2_"}}
{"src": ["django", "create", "a", "foreign", "key", "column", "user", "and", "link", "it", "to", "table", "_STR:0_"], "token": ["user", "=", "models", ".", "ForeignKey", "(", "\" _STR:0_ \"", ",", "unique", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "user = models.ForeignKey(\" _STR:0_ \", unique=True)", "decano_code": "user = models.ForeignKey(\" _STR:0_ \", unique=True)", "raw_code": "user = models.ForeignKey('User', unique=True)", "str_map": {"User": "_STR:0_"}}
{"src": ["write", "a", "regex", "pattern", "to", "match", "even", "number", "of", "letter", "a"], "token": ["re", ".", "compile", "(", "'^([^A]*)AA([^A]|AA)*$'", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "STRING", "OP"], "cano_code": "re.compile('^([^A]*)AA([^A]|AA)*$')", "decano_code": "re.compile('^([^A]*)AA([^A]|AA)*$')", "raw_code": "re.compile('^([^A]*)AA([^A]|AA)*$')", "str_map": {}}
{"src": ["join", "numpy", "array", "b", "with", "numpy", "array", "_STR:0_", "along", "axis", "0"], "token": ["b", "=", "np", ".", "concatenate", "(", "(", "a", ",", "a", ")", ",", "axis", "=", "0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "b = np.concatenate((a, a), axis=0)", "decano_code": "b = np.concatenate((a, a), axis=0)", "raw_code": "b = np.concatenate((a, a), axis=0)", "str_map": {"a": "_STR:0_"}}
{"src": ["custom", "sort", "an", "alphanumeric", "list", "l"], "token": ["sorted", "(", "l", ",", "key", "=", "lambda", "x", ":", "x", ".", "replace", "(", "'0'", ",", "'Z'", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "sorted(l, key=lambda x: x.replace('0', 'Z'))", "decano_code": "sorted(l, key=lambda x: x.replace('0', 'Z'))", "raw_code": "sorted(l, key=lambda x: x.replace('0', 'Z'))", "str_map": {}}
{"src": ["plot", "logarithmic", "axes", "with", "matplotlib"], "token": ["ax", ".", "set_yscale", "(", "'log'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "ax.set_yscale('log')", "decano_code": "ax.set_yscale('log')", "raw_code": "ax.set_yscale('log')", "str_map": {}}
{"src": ["access", "environment", "variable", "_STR:0_"], "token": ["os", ".", "environ", "[", "\" _STR:0_ \"", "]"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "os.environ[\" _STR:0_ \"]", "decano_code": "os.environ[\" _STR:0_ \"]", "raw_code": "os.environ['HOME']", "str_map": {"HOME": "_STR:0_"}}
{"src": ["get", "value", "of", "environment", "variable", "_STR:0_"], "token": ["os", ".", "environ", "[", "\" _STR:0_ \"", "]"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "os.environ[\" _STR:0_ \"]", "decano_code": "os.environ[\" _STR:0_ \"]", "raw_code": "os.environ['HOME']", "str_map": {"HOME": "_STR:0_"}}
{"src": ["print", "all", "environment", "variables"], "token": ["print", "(", "os", ".", "environ", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "print(os.environ)", "decano_code": "print(os.environ)", "raw_code": "print(os.environ)", "str_map": {}}
{"src": ["get", "all", "environment", "variables"], "token": ["os", ".", "environ"], "type": ["NAME", "OP", "NAME"], "cano_code": "os.environ", "decano_code": "os.environ", "raw_code": "os.environ", "str_map": {}}
{"src": ["get", "value", "of", "the", "environment", "variable", "_STR:0_"], "token": ["print", "(", "os", ".", "environ", ".", "get", "(", "\" _STR:0_ \"", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "print(os.environ.get(\" _STR:0_ \"))", "decano_code": "print(os.environ.get(\" _STR:0_ \"))", "raw_code": "print(os.environ.get('KEY_THAT_MIGHT_EXIST'))", "str_map": {"KEY_THAT_MIGHT_EXIST": "_STR:0_"}}
{"src": ["get", "value", "of", "the", "environment", "variable", "_STR:0_", "with", "default", "value", "default_value"], "token": ["print", "(", "os", ".", "getenv", "(", "\" _STR:0_ \"", ",", "default_value", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP"], "cano_code": "print(os.getenv(\" _STR:0_ \", default_value))", "decano_code": "print(os.getenv(\" _STR:0_ \", default_value))", "raw_code": "print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))", "str_map": {"KEY_THAT_MIGHT_EXIST": "_STR:0_"}}
{"src": ["get", "value", "of", "the", "environment", "variable", "_STR:0_", "with", "default", "value", "_STR:1_"], "token": ["print", "(", "os", ".", "environ", ".", "get", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "print(os.environ.get(\" _STR:0_ \", \" _STR:1_ \"))", "decano_code": "print(os.environ.get(\" _STR:0_ \", \" _STR:1_ \"))", "raw_code": "print(os.environ.get('HOME', '/home/username/'))", "str_map": {"HOME": "_STR:0_", "/home/username/": "_STR:1_"}}
{"src": ["create", "a", "dictionary", "containing", "each", "string", "in", "list", "my_list", "split", "by", "_STR:0_", "as", "a", "key/value", "pairs"], "token": ["print", "(", "dict", "(", "[", "s", ".", "split", "(", "\" _STR:0_ \"", ")", "for", "s", "in", "my_list", "]", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP", "OP"], "cano_code": "print(dict([s.split(\" _STR:0_ \") for s in my_list]))", "decano_code": "print(dict([s.split(\" _STR:0_ \") for s in my_list]))", "raw_code": "print(dict([s.split('=') for s in my_list]))", "str_map": {"=": "_STR:0_"}}
{"src": ["find", "the", "index", "of", "element", "closest", "to", "number", "11.5", "[", "11", ".", "5", "]", "in", "list", "a"], "token": ["min", "(", "enumerate", "(", "a", ")", ",", "key", "=", "lambda", "x", ":", "abs", "(", "x", "[", "1", "]", "-", "11.5", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "min(enumerate(a), key=lambda x: abs(x[1] - 11.5))", "decano_code": "min(enumerate(a), key=lambda x: abs(x[1] - 11.5))", "raw_code": "min(enumerate(a), key=lambda x: abs(x[1] - 11.5))", "str_map": {}}
{"src": ["find", "element", "a", "that", "contains", "string", "_STR:0_", "in", "file", "root"], "token": ["e", "=", "root", ".", "xpath", "(", "'.//a[contains(text(),\"TEXT A\")]'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "e = root.xpath('.//a[contains(text(),\"TEXT A\")]')", "decano_code": "e = root.xpath('.//a[contains(text(),\"TEXT A\")]')", "raw_code": "e = root.xpath('.//a[contains(text(),\"TEXT A\")]')", "str_map": {"TEXT A": "_STR:0_"}}
{"src": ["find", "the`a", "`", "tag", "in", "html", "root", "which", "starts", "with", "the", "text", "TEXT A", "and", "assign", "it", "to", "e"], "token": ["e", "=", "root", ".", "xpath", "(", "'.//a[starts-with(text(),\"TEXT A\")]'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "e = root.xpath('.//a[starts-with(text(),\"TEXT A\")]')", "decano_code": "e = root.xpath('.//a[starts-with(text(),\"TEXT A\")]')", "raw_code": "e = root.xpath('.//a[starts-with(text(),\"TEXT A\")]')", "str_map": {}}
{"src": ["find", "the", "element", "that", "holds", "string", "_STR:0_", "in", "file", "root"], "token": ["e", "=", "root", ".", "xpath", "(", "'.//a[text()=\"TEXT A\"]'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "e = root.xpath('.//a[text()=\"TEXT A\"]')", "decano_code": "e = root.xpath('.//a[text()=\"TEXT A\"]')", "raw_code": "e = root.xpath('.//a[text()=\"TEXT A\"]')", "str_map": {"TEXT A": "_STR:0_"}}
{"src": ["create", "list", "c", "containing", "items", "from", "list", "b", "whose", "index", "is", "in", "list", "index"], "token": ["c", "=", "[", "b", "[", "i", "]", "for", "i", "in", "index", "]"], "type": ["NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "c = [b[i] for i in index]", "decano_code": "c = [b[i] for i in index]", "raw_code": "c = [b[i] for i in index]", "str_map": {}}
{"src": ["get", "the", "dot", "product", "of", "two", "one", "dimensional", "numpy", "arrays"], "token": ["np", ".", "dot", "(", "a", "[", ":", ",", "(", "None", ")", "]", ",", "b", "[", "(", "None", ")", ",", ":", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "KEYWORD", "OP", "OP", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "OP", "OP", "OP", "OP"], "cano_code": "np.dot(a[:, (None)], b[(None), :])", "decano_code": "np.dot(a[:, (None)], b[(None), :])", "raw_code": "np.dot(a[:, (None)], b[(None), :])", "str_map": {}}
{"src": ["multiplication", "of", "two", "1-dimensional", "arrays", "in", "numpy"], "token": ["np", ".", "outer", "(", "a", ",", "b", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "np.outer(a, b)", "decano_code": "np.outer(a, b)", "raw_code": "np.outer(a, b)", "str_map": {}}
{"src": ["execute", "a", "file", "_STR:0_", "with", "arguments", "arg1", "and", "arg2", "in", "python", "shell"], "token": ["subprocess", ".", "call", "(", "[", "\" _STR:0_ \"", ",", "arg1", ",", "arg2", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "subprocess.call([\" _STR:0_ \", arg1, arg2])", "decano_code": "subprocess.call([\" _STR:0_ \", arg1, arg2])", "raw_code": "subprocess.call(['./abc.py', arg1, arg2])", "str_map": {"./abc.py": "_STR:0_"}}
{"src": ["replace", "NaN", "values", "in", "column", "_STR:0_", "with", "the", "mean", "of", "data", "in", "column", "_STR:1_", "of", "dataframe", "df"], "token": ["df", "[", "[", "\" _STR:0_ \"", "]", "]", ".", "fillna", "(", "df", ".", "groupby", "(", "\" _STR:1_ \"", ")", ".", "transform", "(", "'mean'", ")", ")"], "type": ["NAME", "OP", "OP", "STRING", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "df[[\" _STR:0_ \"]].fillna(df.groupby(\" _STR:1_ \").transform('mean'))", "decano_code": "df[[\" _STR:0_ \"]].fillna(df.groupby(\" _STR:1_ \").transform('mean'))", "raw_code": "df[['value']].fillna(df.groupby('group').transform('mean'))", "str_map": {"value": "_STR:0_", "group": "_STR:1_"}}
{"src": ["separate", "each", "character", "in", "string", "s", "by", "_STR:0_"], "token": ["re", ".", "sub", "(", "'(.)(?=.)'", ",", "'\\\\1-'", ",", "s", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.sub('(.)(?=.)', '\\\\1-', s)", "decano_code": "re.sub('(.)(?=.)', '\\\\1-', s)", "raw_code": "re.sub('(.)(?=.)', '\\\\1-', s)", "str_map": {"-": "_STR:0_"}}
{"src": ["concatenate", "_STR:0_", "in", "between", "characters", "of", "string", "str"], "token": ["re", ".", "sub", "(", "'(?<=.)(?=.)'", ",", "\" _STR:0_ \"", ",", "str", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "KEYWORD", "OP"], "cano_code": "re.sub('(?<=.)(?=.)', \" _STR:0_ \", str)", "decano_code": "re.sub('(?<=.)(?=.)', \" _STR:0_ \", str)", "raw_code": "re.sub('(?<=.)(?=.)', '-', str)", "str_map": {"-": "_STR:0_"}}
{"src": ["get", "the", "indexes", "of", "the", "x", "and", "y", "axes", "in", "numpy", "array", "np", "where", "variable", "a", "is", "equal", "to", "variable", "value"], "token": ["i", ",", "j", "=", "np", ".", "where", "(", "a", "==", "value", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "i, j = np.where(a == value)", "decano_code": "i, j = np.where(a == value)", "raw_code": "i, j = np.where(a == value)", "str_map": {}}
{"src": ["print", "letter", "that", "appears", "most", "frequently", "in", "string", "s"], "token": ["print", "(", "collections", ".", "Counter", "(", "s", ")", ".", "most_common", "(", "1", ")", "[", "0", "]", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "print(collections.Counter(s).most_common(1)[0])", "decano_code": "print(collections.Counter(s).most_common(1)[0])", "raw_code": "print(collections.Counter(s).most_common(1)[0])", "str_map": {}}
{"src": ["find", "float", "number", "proceeding", "sub-string", "par", "in", "string", "dir"], "token": ["float", "(", "re", ".", "findall", "(", "'(?:^|_)'", "+", "par", "+", "'(\\\\d+\\\\.\\\\d*)'", ",", "dir", ")", "[", "0", "]", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "float(re.findall('(?:^|_)' + par + '(\\\\d+\\\\.\\\\d*)', dir)[0])", "decano_code": "float(re.findall('(?:^|_)' + par + '(\\\\d+\\\\.\\\\d*)', dir)[0])", "raw_code": "float(re.findall('(?:^|_)' + par + '(\\\\d+\\\\.\\\\d*)', dir)[0])", "str_map": {}}
{"src": ["get", "all", "the", "matches", "from", "a", "string", "abcd", "if", "it", "begins", "with", "a", "character", "a"], "token": ["re", ".", "findall", "(", "'[^a]'", ",", "'abcd'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.findall('[^a]', 'abcd')", "decano_code": "re.findall('[^a]', 'abcd')", "raw_code": "re.findall('[^a]', 'abcd')", "str_map": {}}
{"src": ["get", "a", "list", "of", "variables", "from", "module", "_STR:0_", "in", "current", "module", "."], "token": ["print", "(", "[", "item", "for", "item", "in", "dir", "(", "adfix", ")", "if", "not", "item", ".", "startswith", "(", "'__'", ")", "]", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "print([item for item in dir(adfix) if not item.startswith('__')])", "decano_code": "print([item for item in dir(adfix) if not item.startswith('__')])", "raw_code": "print([item for item in dir(adfix) if not item.startswith('__')])", "str_map": {"adfix.py": "_STR:0_"}}
{"src": ["get", "the", "first", "element", "of", "each", "tuple", "in", "a", "list", "rows"], "token": ["[", "x", "[", "0", "]", "for", "x", "in", "rows", "]"], "type": ["OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[x[0] for x in rows]", "decano_code": "[x[0] for x in rows]", "raw_code": "[x[0] for x in rows]", "str_map": {}}
{"src": ["get", "a", "list", "res_list", "of", "the", "first", "elements", "of", "each", "tuple", "in", "a", "list", "of", "tuples", "rows"], "token": ["res_list", "=", "[", "x", "[", "0", "]", "for", "x", "in", "rows", "]"], "type": ["NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "res_list = [x[0] for x in rows]", "decano_code": "res_list = [x[0] for x in rows]", "raw_code": "res_list = [x[0] for x in rows]", "str_map": {}}
{"src": ["duplicate", "data", "in", "pandas", "dataframe", "x", "for", "5", "times"], "token": ["pd", ".", "concat", "(", "[", "x", "]", "*", "5", ",", "ignore_index", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "pd.concat([x] * 5, ignore_index=True)", "decano_code": "pd.concat([x] * 5, ignore_index=True)", "raw_code": "pd.concat([x] * 5, ignore_index=True)", "str_map": {}}
{"src": ["get", "a", "repeated", "pandas", "data", "frame", "object", "x", "by", "5", "times"], "token": ["pd", ".", "concat", "(", "[", "x", "]", "*", "5", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP", "NUMBER", "OP"], "cano_code": "pd.concat([x] * 5)", "decano_code": "pd.concat([x] * 5)", "raw_code": "pd.concat([x] * 5)", "str_map": {}}
{"src": ["sort", "json", "ips_data", "by", "a", "key", "_STR:0_"], "token": ["sorted_list_of_keyvalues", "=", "sorted", "(", "list", "(", "ips_data", ".", "items", "(", ")", ")", ",", "key", "=", "item", "[", "1", "]", "[", "\" _STR:0_ \"", "]", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "STRING", "OP", "OP"], "cano_code": "sorted_list_of_keyvalues = sorted(list(ips_data.items()), key=item[1][\" _STR:0_ \"])", "decano_code": "sorted_list_of_keyvalues = sorted(list(ips_data.items()), key=item[1][\" _STR:0_ \"])", "raw_code": "sorted_list_of_keyvalues = sorted(list(ips_data.items()), key=item[1]['data_two'])", "str_map": {"data_two": "_STR:0_"}}
{"src": ["read", "json", "elevations", "to", "pandas", "dataframe", "df"], "token": ["pd", ".", "read_json", "(", "elevations", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "pd.read_json(elevations)", "decano_code": "pd.read_json(elevations)", "raw_code": "pd.read_json(elevations)", "str_map": {}}
{"src": ["generate", "a", "random", "number", "in", "1", "to", "7", "with", "a", "given", "distribution", "[0.1", "[", "[0", ".", "1", "]", ",", "0.05", "[", "0", ".", "05", "]", ",", "0.05", "[", "0", ".", "05", "]", ",", "0.2", "[", "0", ".", "2", "]", ",", "0.4", "[", "0", ".", "4", "]", ",", "0.2", "[", "0", ".", "2", "]", "]"], "token": ["numpy", ".", "random", ".", "choice", "(", "numpy", ".", "arange", "(", "1", ",", "7", ")", ",", "p", "=", "[", "0.1", ",", "0.05", ",", "0.05", ",", "0.2", ",", "0.4", ",", "0.2", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])", "decano_code": "numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])", "raw_code": "numpy.random.choice(numpy.arange(1, 7), p=[0.1, 0.05, 0.05, 0.2, 0.4, 0.2])", "str_map": {}}
{"src": ["return", "rows", "of", "data", "associated", "with", "the", "maximum", "value", "of", "column", "_STR:0_", "in", "dataframe", "df"], "token": ["df", ".", "loc", "[", "df", "[", "\" _STR:0_ \"", "]", ".", "idxmax", "(", ")", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "df.loc[df[\" _STR:0_ \"].idxmax()]", "decano_code": "df.loc[df[\" _STR:0_ \"].idxmax()]", "raw_code": "df.loc[df['Value'].idxmax()]", "str_map": {"Value": "_STR:0_"}}
{"src": ["find", "recurring", "patterns", "in", "a", "string", "_STR:0_"], "token": ["re", ".", "findall", "(", "'^(.+?)((.+)\\\\3+)$'", ",", "\" _STR:0_ \"", ")", "[", "0", "]", "[", ":", "-", "1", "]"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP", "NUMBER", "OP", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "re.findall('^(.+?)((.+)\\\\3+)$', \" _STR:0_ \")[0][:-1]", "decano_code": "re.findall('^(.+?)((.+)\\\\3+)$', \" _STR:0_ \")[0][:-1]", "raw_code": "re.findall('^(.+?)((.+)\\\\3+)$', '42344343434')[0][:-1]", "str_map": {"42344343434": "_STR:0_"}}
{"src": ["convert", "binary", "string", "_STR:0_", "to", "numpy", "array"], "token": ["np", ".", "fromstring", "(", "\" _STR:0_ \"", ",", "dtype", "=", "'<f4'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "np.fromstring(\" _STR:0_ \", dtype='<f4')", "decano_code": "np.fromstring(\" _STR:0_ \", dtype='<f4')", "raw_code": "np.fromstring('\\x00\\x00\\x80?\\x00\\x00\\x00@\\x00\\x00@@\\x00\\x00\\x80@', dtype='<f4')", "str_map": {"\u0000\u0000\u0080?\u0000\u0000\u0000@\u0000\u0000@@\u0000\u0000\u0080@": "_STR:0_"}}
{"src": ["convert", "binary", "string", "to", "numpy", "array"], "token": ["np", ".", "fromstring", "(", "'\\x00\\x00\\x80?\\x00\\x00\\x00@\\x00\\x00@@\\x00\\x00\\x80@'", ",", "dtype", "=", "'>f4'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "np.fromstring('\\x00\\x00\\x80?\\x00\\x00\\x00@\\x00\\x00@@\\x00\\x00\\x80@', dtype='>f4')", "decano_code": "np.fromstring('\\x00\\x00\\x80?\\x00\\x00\\x00@\\x00\\x00@@\\x00\\x00\\x80@', dtype='>f4')", "raw_code": "np.fromstring('\\x00\\x00\\x80?\\x00\\x00\\x00@\\x00\\x00@@\\x00\\x00\\x80@', dtype='>f4')", "str_map": {}}
{"src": ["insert", "variables", "(var1, var2, var3", ")", "into", "sql", "statement", "_STR:0_"], "token": ["cursor", ".", "execute", "(", "\" _STR:0_ \"", ",", "(", "var1", ",", "var2", ",", "var3", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "cursor.execute(\" _STR:0_ \", (var1, var2, var3))", "decano_code": "cursor.execute(\" _STR:0_ \", (var1, var2, var3))", "raw_code": "cursor.execute('INSERT INTO table VALUES (?, ?, ?)', (var1, var2, var3))", "str_map": {"INSERT INTO table VALUES (?, ?, ?)": "_STR:0_"}}
{"src": ["execute", "a", "sql", "statement", "using", "variables", "var1", ",", "var2", "and", "var3"], "token": ["cursor", ".", "execute", "(", "'INSERT INTO table VALUES (%s, %s, %s)'", ",", "(", "var1", ",", "var2", ",", "var3", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "cursor.execute('INSERT INTO table VALUES (%s, %s, %s)', (var1, var2, var3))", "decano_code": "cursor.execute('INSERT INTO table VALUES (%s, %s, %s)', (var1, var2, var3))", "raw_code": "cursor.execute('INSERT INTO table VALUES (%s, %s, %s)', (var1, var2, var3))", "str_map": {}}
{"src": ["how", "to", "use", "variables", "in", "SQL", "statement", "in", "python", "?"], "token": ["cursor", ".", "execute", "(", "'INSERT INTO table VALUES (%s, %s, %s)'", ",", "(", "var1", ",", "var2", ",", "var3", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "cursor.execute('INSERT INTO table VALUES (%s, %s, %s)', (var1, var2, var3))", "decano_code": "cursor.execute('INSERT INTO table VALUES (%s, %s, %s)', (var1, var2, var3))", "raw_code": "cursor.execute('INSERT INTO table VALUES (%s, %s, %s)', (var1, var2, var3))", "str_map": {}}
{"src": ["pandas", "split", "strings", "in", "column", "_STR:0_", "by", "_STR:1_", "into", "columns", "in", "dataframe", "df"], "token": ["df", "[", "\" _STR:0_ \"", "]", ".", "str", "[", "1", ":", "-", "1", "]", ".", "str", ".", "split", "(", "\" _STR:1_ \"", ",", "expand", "=", "True", ")", ".", "astype", "(", "float", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "KEYWORD", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df[\" _STR:0_ \"].str[1:-1].str.split(\" _STR:1_ \", expand=True).astype(float)", "decano_code": "df[\" _STR:0_ \"].str[1:-1].str.split(\" _STR:1_ \", expand=True).astype(float)", "raw_code": "df['stats'].str[1:-1].str.split(',', expand=True).astype(float)", "str_map": {"stats": "_STR:0_", ",": "_STR:1_"}}
{"src": ["split", "string", "in", "column", "_STR:0_", "by", "_STR:1_", "into", "separate", "columns", "in", "dataframe", "df"], "token": ["df", "[", "\" _STR:0_ \"", "]", ".", "str", "[", "1", ":", "-", "1", "]", ".", "str", ".", "split", "(", "\" _STR:1_ \"", ")", ".", "apply", "(", "pd", ".", "Series", ")", ".", "astype", "(", "float", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "KEYWORD", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df[\" _STR:0_ \"].str[1:-1].str.split(\" _STR:1_ \").apply(pd.Series).astype(float)", "decano_code": "df[\" _STR:0_ \"].str[1:-1].str.split(\" _STR:1_ \").apply(pd.Series).astype(float)", "raw_code": "df['stats'].str[1:-1].str.split(',').apply(pd.Series).astype(float)", "str_map": {"stats": "_STR:0_", ",": "_STR:1_"}}
{"src": ["unpack", "column", "_STR:0_", "in", "dataframe", "df", "into", "a", "series", "of", "columns"], "token": ["df", "[", "\" _STR:0_ \"", "]", ".", "apply", "(", "pd", ".", "Series", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "df[\" _STR:0_ \"].apply(pd.Series)", "decano_code": "df[\" _STR:0_ \"].apply(pd.Series)", "raw_code": "df['stats'].apply(pd.Series)", "str_map": {"stats": "_STR:0_"}}
{"src": ["wait", "for", "shell", "command", "p", "evoked", "by", "subprocess.Popen", "[", "subprocess", ".", "Popen", "]", "to", "complete"], "token": ["p", ".", "wait", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "p.wait()", "decano_code": "p.wait()", "raw_code": "p.wait()", "str_map": {}}
{"src": ["encode", "string", "s", "to", "utf-8", "code"], "token": ["s", ".", "encode", "(", "'utf8'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "s.encode('utf8')", "decano_code": "s.encode('utf8')", "raw_code": "s.encode('utf8')", "str_map": {}}
{"src": ["parse", "string", "_STR:0_", "into", "a", "datetime", "object", "using", "format", "_STR:1_"], "token": ["datetime", ".", "datetime", ".", "strptime", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "datetime.datetime.strptime(\" _STR:0_ \", \" _STR:1_ \")", "decano_code": "datetime.datetime.strptime(\" _STR:0_ \", \" _STR:1_ \")", "raw_code": "datetime.datetime.strptime('01-Jan-1995', '%d-%b-%Y')", "str_map": {"01-Jan-1995": "_STR:0_", "%d-%b-%Y": "_STR:1_"}}
{"src": ["copy", "a", "file", "from", "src", "to", "dst"], "token": ["copyfile", "(", "src", ",", "dst", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "copyfile(src, dst)", "decano_code": "copyfile(src, dst)", "raw_code": "copyfile(src, dst)", "str_map": {}}
{"src": ["copy", "file", "_STR:0_", "to", "_STR:1_"], "token": ["shutil", ".", "copy2", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "shutil.copy2(\" _STR:0_ \", \" _STR:1_ \")", "decano_code": "shutil.copy2(\" _STR:0_ \", \" _STR:1_ \")", "raw_code": "shutil.copy2('/dir/file.ext', '/new/dir/newname.ext')", "str_map": {"/dir/file.ext": "_STR:0_", "/new/dir/newname.ext": "_STR:1_"}}
{"src": ["copy", "file", "_STR:0_", "to", "_STR:1_"], "token": ["shutil", ".", "copy2", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "shutil.copy2(\" _STR:0_ \", \" _STR:1_ \")", "decano_code": "shutil.copy2(\" _STR:0_ \", \" _STR:1_ \")", "raw_code": "shutil.copy2('/dir/file.ext', '/new/dir')", "str_map": {"/dir/file.ext": "_STR:0_", "/new/dir": "_STR:1_"}}
{"src": ["print", "a", "list", "of", "integers", "list_of_ints", "using", "string", "formatting"], "token": ["print", "(", "', '", ".", "join", "(", "str", "(", "x", ")", "for", "x", "in", "list_of_ints", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "print(', '.join(str(x) for x in list_of_ints))", "decano_code": "print(', '.join(str(x) for x in list_of_ints))", "raw_code": "print(', '.join(str(x) for x in list_of_ints))", "str_map": {}}
{"src": ["multiply", "column", "_STR:0_", "and", "column", "_STR:1_", "by", "column", "_STR:2_", "in", "datafram", "df"], "token": ["df", "[", "[", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", "]", "]", ".", "multiply", "(", "df", "[", "\" _STR:2_ \"", "]", ",", "axis", "=", "'index'", ")"], "type": ["NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df[[\" _STR:0_ \", \" _STR:1_ \"]].multiply(df[\" _STR:2_ \"], axis='index')", "decano_code": "df[[\" _STR:0_ \", \" _STR:1_ \"]].multiply(df[\" _STR:2_ \"], axis='index')", "raw_code": "df[['A', 'B']].multiply(df['C'], axis='index')", "str_map": {"A": "_STR:0_", "B": "_STR:1_", "C": "_STR:2_"}}
{"src": ["convert", "string", "_STR:0_", "to", "hex"], "token": ["hex", "(", "ord", "(", "\" _STR:0_ \"", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "STRING", "OP", "OP"], "cano_code": "hex(ord(\" _STR:0_ \"))", "decano_code": "hex(ord(\" _STR:0_ \"))", "raw_code": "hex(ord('a'))", "str_map": {"a": "_STR:0_"}}
{"src": ["get", "the", "sum", "of", "values", "to", "the", "power", "of", "their", "indices", "in", "a", "list", "l"], "token": ["sum", "(", "j", "**", "i", "for", "i", ",", "j", "in", "enumerate", "(", "l", ",", "1", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "sum(j ** i for i, j in enumerate(l, 1))", "decano_code": "sum(j ** i for i, j in enumerate(l, 1))", "raw_code": "sum(j ** i for i, j in enumerate(l, 1))", "str_map": {}}
{"src": ["remove", "extra", "white", "spaces", "&", "tabs", "from", "a", "string", "s"], "token": ["\"\"\" \"\"\"", ".", "join", "(", "s", ".", "split", "(", ")", ")"], "type": ["STRING", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "\"\"\" \"\"\".join(s.split())", "decano_code": "\"\"\" \"\"\".join(s.split())", "raw_code": "\"\"\" \"\"\".join(s.split())", "str_map": {}}
{"src": ["replace", "comma", "in", "string", "s", "with", "empty", "string", "_STR:0_"], "token": ["s", "=", "s", ".", "replace", "(", "','", ",", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "s = s.replace(',', \" _STR:0_ \")", "decano_code": "s = s.replace(',', \" _STR:0_ \")", "raw_code": "s = s.replace(',', '')", "str_map": {"": "_STR:0_"}}
{"src": ["resample", "dataframe", "frame", "to", "resolution", "of", "1", "hour", "1H", "for", "timeseries", "index", ",", "summing", "values", "in", "the", "column", "radiation", "averaging", "those", "in", "column", "tamb"], "token": ["frame", ".", "resample", "(", "'1H'", ")", ".", "agg", "(", "{", "'radiation'", ":", "np", ".", "sum", ",", "'tamb'", ":", "np", ".", "mean", "}", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "frame.resample('1H').agg({'radiation': np.sum, 'tamb': np.mean})", "decano_code": "frame.resample('1H').agg({'radiation': np.sum, 'tamb': np.mean})", "raw_code": "frame.resample('1H').agg({'radiation': np.sum, 'tamb': np.mean})", "str_map": {}}
{"src": ["how", "do", "i", "get", "rid", "of", "python", "tkinter", "root", "window", "?"], "token": ["root", ".", "destroy", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "root.destroy()", "decano_code": "root.destroy()", "raw_code": "root.destroy()", "str_map": {}}
{"src": ["create", "a", "pandas", "dataframe", "df", "from", "elements", "of", "a", "dictionary", "nvalues"], "token": ["df", "=", "pd", ".", "DataFrame", ".", "from_dict", "(", "{", "k", ":", "v", "for", "k", ",", "v", "in", "list", "(", "nvalues", ".", "items", "(", ")", ")", "if", "k", "!=", "'y3'", "}", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})", "decano_code": "df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})", "raw_code": "df = pd.DataFrame.from_dict({k: v for k, v in list(nvalues.items()) if k != 'y3'})", "str_map": {}}
{"src": ["flask", "get", "value", "of", "request", "variable", "_STR:0_"], "token": ["first_name", "=", "request", ".", "args", ".", "get", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "first_name = request.args.get(\" _STR:0_ \")", "decano_code": "first_name = request.args.get(\" _STR:0_ \")", "raw_code": "first_name = request.args.get('firstname')", "str_map": {"firstname": "_STR:0_"}}
{"src": ["flask", "get", "posted", "form", "data", "_STR:0_"], "token": ["first_name", "=", "request", ".", "form", ".", "get", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "first_name = request.form.get(\" _STR:0_ \")", "decano_code": "first_name = request.form.get(\" _STR:0_ \")", "raw_code": "first_name = request.form.get('firstname')", "str_map": {"firstname": "_STR:0_"}}
{"src": ["get", "a", "list", "of", "substrings", "consisting", "of", "the", "first", "5", "characters", "of", "every", "string", "in", "list", "buckets"], "token": ["[", "s", "[", ":", "5", "]", "for", "s", "in", "buckets", "]"], "type": ["OP", "NAME", "OP", "OP", "NUMBER", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[s[:5] for s in buckets]", "decano_code": "[s[:5] for s in buckets]", "raw_code": "[s[:5] for s in buckets]", "str_map": {}}
{"src": ["sort", "list", "the_list", "by", "the", "length", "of", "string", "followed", "by", "alphabetical", "order"], "token": ["the_list", ".", "sort", "(", "key", "=", "lambda", "item", ":", "(", "-", "len", "(", "item", ")", ",", "item", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "the_list.sort(key=lambda item: (-len(item), item))", "decano_code": "the_list.sort(key=lambda item: (-len(item), item))", "raw_code": "the_list.sort(key=lambda item: (-len(item), item))", "str_map": {}}
{"src": ["set", "index", "equal", "to", "field", "_STR:0_", "in", "dataframe", "df"], "token": ["df", "=", "df", ".", "set_index", "(", "[", "\" _STR:0_ \"", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "OP"], "cano_code": "df = df.set_index([\" _STR:0_ \"])", "decano_code": "df = df.set_index([\" _STR:0_ \"])", "raw_code": "df = df.set_index(['TRX_DATE'])", "str_map": {"TRX_DATE": "_STR:0_"}}
{"src": ["list", "comprehension", "with", "an", "accumulator", "in", "range", "of", "10"], "token": ["list", "(", "accumulate", "(", "list", "(", "range", "(", "10", ")", ")", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NUMBER", "OP", "OP", "OP", "OP"], "cano_code": "list(accumulate(list(range(10))))", "decano_code": "list(accumulate(list(range(10))))", "raw_code": "list(accumulate(list(range(10))))", "str_map": {}}
{"src": ["how", "to", "convert", "a", "date", "string", "_STR:0_", "in", "format", "_STR:1_", "to", "different", "format", "_STR:2_"], "token": ["datetime", ".", "datetime", ".", "strptime", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")", ".", "strftime", "(", "\" _STR:2_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "datetime.datetime.strptime(\" _STR:0_ \", \" _STR:1_ \").strftime(\" _STR:2_ \")", "decano_code": "datetime.datetime.strptime(\" _STR:0_ \", \" _STR:1_ \").strftime(\" _STR:2_ \")", "raw_code": "datetime.datetime.strptime('2013-1-25', '%Y-%m-%d').strftime('%m/%d/%y')", "str_map": {"2013-1-25": "_STR:0_", "%Y-%m-%d": "_STR:1_", "%m/%d/%y": "_STR:2_"}}
{"src": ["convert", "a", "date", "string", "_STR:0_", "in", "format", "_STR:1_", "to", "different", "format", "_STR:2_"], "token": ["datetime", ".", "datetime", ".", "strptime", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")", ".", "strftime", "(", "\" _STR:2_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "datetime.datetime.strptime(\" _STR:0_ \", \" _STR:1_ \").strftime(\" _STR:2_ \")", "decano_code": "datetime.datetime.strptime(\" _STR:0_ \", \" _STR:1_ \").strftime(\" _STR:2_ \")", "raw_code": "datetime.datetime.strptime('2013-1-25', '%Y-%m-%d').strftime('%-m/%d/%y')", "str_map": {"2013-1-25": "_STR:0_", "%Y-%m-%d": "_STR:1_", "%-m/%d/%y": "_STR:2_"}}
{"src": ["get", "a", "dataframe", "df2", "that", "contains", "all", "the", "columns", "of", "dataframe", "df", "that", "do", "not", "end", "in", "prefix"], "token": ["df2", "=", "df", ".", "ix", "[", ":", ",", "(", "~", "df", ".", "columns", ".", "str", ".", "endswith", "(", "'prefix'", ")", ")", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "df2 = df.ix[:, (~df.columns.str.endswith('prefix'))]", "decano_code": "df2 = df.ix[:, (~df.columns.str.endswith('prefix'))]", "raw_code": "df2 = df.ix[:, (~df.columns.str.endswith('prefix'))]", "str_map": {}}
{"src": ["create", "list", "new_list", "containing", "the", "last", "10", "elements", "of", "list", "my_list"], "token": ["new_list", "=", "my_list", "[", "-", "10", ":", "]"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "new_list = my_list[-10:]", "decano_code": "new_list = my_list[-10:]", "raw_code": "new_list = my_list[-10:]", "str_map": {}}
{"src": ["get", "the", "last", "10", "elements", "from", "a", "list", "my_list"], "token": ["my_list", "[", "-", "10", ":", "]"], "type": ["NAME", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "my_list[-10:]", "decano_code": "my_list[-10:]", "raw_code": "my_list[-10:]", "str_map": {}}
{"src": ["convert", "matlab", "engine", "array", "x", "to", "a", "numpy", "ndarray"], "token": ["np", ".", "array", "(", "x", ".", "_data", ")", ".", "reshape", "(", "x", ".", "size", "[", ":", ":", "-", "1", "]", ")", ".", "T"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP", "OP", "NAME"], "cano_code": "np.array(x._data).reshape(x.size[::-1]).T", "decano_code": "np.array(x._data).reshape(x.size[::-1]).T", "raw_code": "np.array(x._data).reshape(x.size[::-1]).T", "str_map": {}}
{"src": ["select", "the", "first", "row", "grouped", "per", "level", "0", "of", "dataframe", "df"], "token": ["df", ".", "groupby", "(", "level", "=", "0", ",", "as_index", "=", "False", ")", ".", "nth", "(", "0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NAME", "OP", "KEYWORD", "OP", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "df.groupby(level=0, as_index=False).nth(0)", "decano_code": "df.groupby(level=0, as_index=False).nth(0)", "raw_code": "df.groupby(level=0, as_index=False).nth(0)", "str_map": {}}
{"src": ["concatenate", "sequence", "of", "numpy", "arrays", "LIST", "into", "a", "one", "dimensional", "array", "along", "the", "first", "axis"], "token": ["numpy", ".", "concatenate", "(", "LIST", ",", "axis", "=", "0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "numpy.concatenate(LIST, axis=0)", "decano_code": "numpy.concatenate(LIST, axis=0)", "raw_code": "numpy.concatenate(LIST, axis=0)", "str_map": {}}
{"src": ["convert", "and", "escape", "string", "_STR:0_", "to", "UTF-8", "code"], "token": ["\" _STR:0_ \"", ".", "encode", "(", "'utf-8'", ")", ".", "decode", "(", "'unicode_escape'", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "\" _STR:0_ \".encode('utf-8').decode('unicode_escape')", "decano_code": "\" _STR:0_ \".encode('utf-8').decode('unicode_escape')", "raw_code": "\"\"\"\\\\xc3\\\\x85\u3042\"\"\".encode('utf-8').decode('unicode_escape')", "str_map": {"\\xc3\\x85\u3042": "_STR:0_"}}
{"src": ["encode", "string", "_STR:0_", "to", "bytes"], "token": ["\" _STR:0_ \"", ".", "encode", "(", "'utf-8'", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "\" _STR:0_ \".encode('utf-8')", "decano_code": "\" _STR:0_ \".encode('utf-8')", "raw_code": "\"\"\"\\\\xc3\\\\x85\u3042\"\"\".encode('utf-8')", "str_map": {"\\xc3\\x85\u3042": "_STR:0_"}}
{"src": ["interleave", "the", "elements", "of", "two", "lists", "a", "and", "b"], "token": ["[", "j", "for", "i", "in", "zip", "(", "a", ",", "b", ")", "for", "j", "in", "i", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[j for i in zip(a, b) for j in i]", "decano_code": "[j for i in zip(a, b) for j in i]", "raw_code": "[j for i in zip(a, b) for j in i]", "str_map": {}}
{"src": ["merge", "two", "lists", "a", "and", "b", "into", "a", "single", "list"], "token": ["[", "j", "for", "i", "in", "zip", "(", "a", ",", "b", ")", "for", "j", "in", "i", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[j for i in zip(a, b) for j in i]", "decano_code": "[j for i in zip(a, b) for j in i]", "raw_code": "[j for i in zip(a, b) for j in i]", "str_map": {}}
{"src": ["delete", "all", "occureces", "of", "8", "in", "each", "string", "s", "in", "list", "lst"], "token": ["print", "(", "[", "s", ".", "replace", "(", "'8'", ",", "''", ")", "for", "s", "in", "lst", "]", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "print([s.replace('8', '') for s in lst])", "decano_code": "print([s.replace('8', '') for s in lst])", "raw_code": "print([s.replace('8', '') for s in lst])", "str_map": {}}
{"src": ["split", "string", "hello", "into", "a", "string", "of", "letters", "seperated", "by", ","], "token": ["\"\"\",\"\"\"", ".", "join", "(", "'Hello'", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "\"\"\",\"\"\".join('Hello')", "decano_code": "\"\"\",\"\"\".join('Hello')", "raw_code": "\"\"\",\"\"\".join('Hello')", "str_map": {}}
{"src": ["in", "django", ",", "select", "100", "random", "records", "from", "the", "database", "Content.objects", "[", "Content", ".", "objects", "]"], "token": ["Content", ".", "objects", ".", "all", "(", ")", ".", "order_by", "(", "'?'", ")", "[", ":", "100", "]"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "Content.objects.all().order_by('?')[:100]", "decano_code": "Content.objects.all().order_by('?')[:100]", "raw_code": "Content.objects.all().order_by('?')[:100]", "str_map": {}}
{"src": ["create", "a", "NumPy", "array", "containing", "elements", "of", "array", "a", "as", "pointed", "to", "by", "index", "in", "array", "b"], "token": ["A", "[", "np", ".", "arange", "(", "A", ".", "shape", "[", "0", "]", ")", "[", ":", ",", "(", "None", ")", "]", ",", "B", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "OP", "OP", "OP", "KEYWORD", "OP", "OP", "OP", "NAME", "OP"], "cano_code": "A[np.arange(A.shape[0])[:, (None)], B]", "decano_code": "A[np.arange(A.shape[0])[:, (None)], B]", "raw_code": "A[np.arange(A.shape[0])[:, (None)], B]", "str_map": {}}
{"src": ["pivot", "dataframe", "df", "so", "that", "values", "for", "upc", "become", "column", "headings", "and", "values", "for", "saleid", "become", "the", "index"], "token": ["df", ".", "pivot_table", "(", "index", "=", "'saleid'", ",", "columns", "=", "'upc'", ",", "aggfunc", "=", "'size'", ",", "fill_value", "=", "0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "df.pivot_table(index='saleid', columns='upc', aggfunc='size', fill_value=0)", "decano_code": "df.pivot_table(index='saleid', columns='upc', aggfunc='size', fill_value=0)", "raw_code": "df.pivot_table(index='saleid', columns='upc', aggfunc='size', fill_value=0)", "str_map": {}}
{"src": ["match", "zero-or-more", "instances", "of", "lower", "case", "alphabet", "characters", "in", "a", "string", "f233op "], "token": ["re", ".", "findall", "(", "'([a-z]*)'", ",", "'f233op'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.findall('([a-z]*)', 'f233op')", "decano_code": "re.findall('([a-z]*)', 'f233op')", "raw_code": "re.findall('([a-z]*)', 'f233op')", "str_map": {}}
{"src": ["match", "zero-or-more", "instances", "of", "lower", "case", "alphabet", "characters", "in", "a", "string", "f233op "], "token": ["re", ".", "findall", "(", "'([a-z])*'", ",", "'f233op'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.findall('([a-z])*', 'f233op')", "decano_code": "re.findall('([a-z])*', 'f233op')", "raw_code": "re.findall('([a-z])*', 'f233op')", "str_map": {}}
{"src": ["split", "string", "_STR:0_", "using", "string", "_STR:1_"], "token": ["re", ".", "split", "(", "\" _STR:1_ \"", ",", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.split(\" _STR:1_ \", \" _STR:0_ \")", "decano_code": "re.split(\" _STR:1_ \", \" _STR:0_ \")", "raw_code": "re.split('_for_', 'happy_hats_for_cats')", "str_map": {"happy_hats_for_cats": "_STR:0_", "_for_": "_STR:1_"}}
{"src": ["split", "string", "_STR:0_", "based", "on", "string", "_STR:1_", ",", "_STR:2_", "or", "_STR:3_"], "token": ["re", ".", "split", "(", "'_(?:for|or|and)_'", ",", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.split('_(?:for|or|and)_', \" _STR:0_ \")", "decano_code": "re.split('_(?:for|or|and)_', \" _STR:0_ \")", "raw_code": "re.split('_(?:for|or|and)_', 'sad_pandas_and_happy_cats_for_people')", "str_map": {"sad_pandas_and_happy_cats_for_people": "_STR:0_", "and": "_STR:1_", "or": "_STR:2_", "for": "_STR:3_"}}
{"src": ["split", "a", "string", "l", "by", "multiple", "words", "for", "or", "or", "or", "and"], "token": ["[", "re", ".", "split", "(", "'_(?:f?or|and)_'", ",", "s", ")", "for", "s", "in", "l", "]"], "type": ["OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[re.split('_(?:f?or|and)_', s) for s in l]", "decano_code": "[re.split('_(?:f?or|and)_', s) for s in l]", "raw_code": "[re.split('_(?:f?or|and)_', s) for s in l]", "str_map": {}}
{"src": ["zip", "keys", "with", "individual", "values", "in", "lists", "k", "and", "v"], "token": ["[", "dict", "(", "zip", "(", "k", ",", "x", ")", ")", "for", "x", "in", "v", "]"], "type": ["OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[dict(zip(k, x)) for x in v]", "decano_code": "[dict(zip(k, x)) for x in v]", "raw_code": "[dict(zip(k, x)) for x in v]", "str_map": {}}
{"src": ["sort", "a", "list", "_STR:0_", "in", "descending", "order", "."], "token": ["sorted", "(", "lst", ",", "reverse", "=", "True", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "sorted(lst, reverse=True)", "decano_code": "sorted(lst, reverse=True)", "raw_code": "sorted(lst, reverse=True)", "str_map": {"lst": "_STR:0_"}}
{"src": ["sort", "array", "order_array", "based", "on", "column", "_STR:0_", ",", "_STR:1_", "and", "_STR:2_"], "token": ["order_array", ".", "sort", "(", "order", "=", "[", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ",", "\" _STR:2_ \"", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "order_array.sort(order=[\" _STR:0_ \", \" _STR:1_ \", \" _STR:2_ \"])", "decano_code": "order_array.sort(order=[\" _STR:0_ \", \" _STR:1_ \", \" _STR:2_ \"])", "raw_code": "order_array.sort(order=['year', 'month', 'day'])", "str_map": {"year": "_STR:0_", "month": "_STR:1_", "day": "_STR:2_"}}
{"src": ["sort", "a", "structured", "numpy", "array", "_STR:0_", "on", "multiple", "columns", "_STR:1_", ",", "_STR:2_", "and", "_STR:3_", "."], "token": ["df", ".", "sort", "(", "[", "\" _STR:1_ \"", ",", "\" _STR:2_ \"", ",", "\" _STR:3_ \"", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "df.sort([\" _STR:1_ \", \" _STR:2_ \", \" _STR:3_ \"])", "decano_code": "df.sort([\" _STR:1_ \", \" _STR:2_ \", \" _STR:3_ \"])", "raw_code": "df.sort(['year', 'month', 'day'])", "str_map": {"df": "_STR:0_", "year": "_STR:1_", "month": "_STR:2_", "day": "_STR:3_"}}
{"src": ["check", "if", "elements", "in", "list", "my_list", "are", "coherent", "in", "order"], "token": ["return", "my_list", "==", "list", "(", "range", "(", "my_list", "[", "0", "]", ",", "my_list", "[", "-", "1", "]", "+", "1", ")", ")"], "type": ["KEYWORD", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "return my_list == list(range(my_list[0], my_list[-1] + 1))", "decano_code": "return my_list == list(range(my_list[0], my_list[-1] + 1))", "raw_code": "return my_list == list(range(my_list[0], my_list[-1] + 1))", "str_map": {}}
{"src": ["group", "rows", "of", "pandas", "dataframe", "df", "with", "same", "_STR:0_"], "token": ["df", ".", "groupby", "(", "\" _STR:0_ \"", ")", ".", "agg", "(", "lambda", "x", ":", "x", ".", "tolist", "(", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "df.groupby(\" _STR:0_ \").agg(lambda x: x.tolist())", "decano_code": "df.groupby(\" _STR:0_ \").agg(lambda x: x.tolist())", "raw_code": "df.groupby('id').agg(lambda x: x.tolist())", "str_map": {"id": "_STR:0_"}}
{"src": ["encode", "u'X\\xc3\\xbcY\\xc3\\x9f", "'", "as", "unicode", "and", "decode", "with", "utf-8"], "token": ["'X\\xc3\\xbcY\\xc3\\x9f'", ".", "encode", "(", "'raw_unicode_escape'", ")", ".", "decode", "(", "'utf-8'", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "'X\\xc3\\xbcY\\xc3\\x9f'.encode('raw_unicode_escape').decode('utf-8')", "decano_code": "'X\\xc3\\xbcY\\xc3\\x9f'.encode('raw_unicode_escape').decode('utf-8')", "raw_code": "'X\\xc3\\xbcY\\xc3\\x9f'.encode('raw_unicode_escape').decode('utf-8')", "str_map": {}}
{"src": ["parse", "string", "a", "to", "float"], "token": ["float", "(", "a", ")"], "type": ["KEYWORD", "OP", "NAME", "OP"], "cano_code": "float(a)", "decano_code": "float(a)", "raw_code": "float(a)", "str_map": {}}
{"src": ["parse", "string", "s", "to", "float", "or", "int"], "token": ["try", ":", "\n", "    ", "return", "int", "(", "s", ")", "\n", "", "except", "ValueError", ":", "\n", "    ", "return", "float", "(", "s", ")", ""], "type": ["KEYWORD", "OP", "NEWLINE", "INDENT", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NEWLINE", "DEDENT", "KEYWORD", "NAME", "OP", "NEWLINE", "INDENT", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "DEDENT"], "cano_code": "try:\n    return int(s)\nexcept ValueError:\n    return float(s)", "decano_code": "try:\n    return int(s)\nexcept ValueError:\n    return float(s)", "raw_code": "try:\n    return int(s)\nexcept ValueError:\n    return float(s)", "str_map": {}}
{"src": ["check", "if", "object", "a", "has", "property", "_STR:0_"], "token": ["if", "hasattr", "(", "a", ",", "\" _STR:0_ \"", ")", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "if hasattr(a, \" _STR:0_ \"):\n    pass", "decano_code": "if hasattr(a, \" _STR:0_ \"):\n    pass", "raw_code": "if hasattr(a, 'property'):\n    pass", "str_map": {"property": "_STR:0_"}}
{"src": ["check", "if", "object", "a", "has", "property", "_STR:0_"], "token": ["if", "hasattr", "(", "a", ",", "\" _STR:0_ \"", ")", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "if hasattr(a, \" _STR:0_ \"):\n    pass", "decano_code": "if hasattr(a, \" _STR:0_ \"):\n    pass", "raw_code": "if hasattr(a, 'property'):\n    pass", "str_map": {"property": "_STR:0_"}}
{"src": ["get", "the", "value", "of", "attribute", "_STR:0_", "of", "object", "a", "with", "default", "value", "_STR:1_"], "token": ["getattr", "(", "a", ",", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "getattr(a, \" _STR:0_ \", \" _STR:1_ \")", "decano_code": "getattr(a, \" _STR:0_ \", \" _STR:1_ \")", "raw_code": "getattr(a, 'property', 'default value')", "str_map": {"property": "_STR:0_", "default value": "_STR:1_"}}
{"src": ["delete", "every", "8th", "column", "in", "a", "numpy", "array", "_STR:0_", "."], "token": ["np", ".", "delete", "(", "a", ",", "list", "(", "range", "(", "0", ",", "a", ".", "shape", "[", "1", "]", ",", "8", ")", ")", ",", "axis", "=", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NUMBER", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "np.delete(a, list(range(0, a.shape[1], 8)), axis=1)", "decano_code": "np.delete(a, list(range(0, a.shape[1], 8)), axis=1)", "raw_code": "np.delete(a, list(range(0, a.shape[1], 8)), axis=1)", "str_map": {"a": "_STR:0_"}}
{"src": ["convert", "ms", "milliseconds", "to", "a", "datetime", "object"], "token": ["datetime", ".", "datetime", ".", "fromtimestamp", "(", "ms", "/", "1000.0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "datetime.datetime.fromtimestamp(ms / 1000.0)", "decano_code": "datetime.datetime.fromtimestamp(ms / 1000.0)", "raw_code": "datetime.datetime.fromtimestamp(ms / 1000.0)", "str_map": {}}
{"src": ["find", "the", "magnitude", "(length", ")", "squared", "of", "a", "vector", "vf", "field"], "token": ["np", ".", "einsum", "(", "'...j,...j->...'", ",", "vf", ",", "vf", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "np.einsum('...j,...j->...', vf, vf)", "decano_code": "np.einsum('...j,...j->...', vf, vf)", "raw_code": "np.einsum('...j,...j->...', vf, vf)", "str_map": {}}
{"src": ["request", "http", "url", "url"], "token": ["r", "=", "requests", ".", "get", "(", "url", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "r = requests.get(url)", "decano_code": "r = requests.get(url)", "raw_code": "r = requests.get(url)", "str_map": {}}
{"src": ["request", "http", "url", "url", "with", "parameters", "payload"], "token": ["r", "=", "requests", ".", "get", "(", "url", ",", "params", "=", "payload", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "r = requests.get(url, params=payload)", "decano_code": "r = requests.get(url, params=payload)", "raw_code": "r = requests.get(url, params=payload)", "str_map": {}}
{"src": ["post", "request", "url", "url", "with", "parameters", "payload"], "token": ["r", "=", "requests", ".", "post", "(", "url", ",", "data", "=", "payload", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "r = requests.post(url, data=payload)", "decano_code": "r = requests.post(url, data=payload)", "raw_code": "r = requests.post(url, data=payload)", "str_map": {}}
{"src": ["make", "an", "HTTP", "post", "request", "with", "data", "post_data"], "token": ["post_response", "=", "requests", ".", "post", "(", "url", "=", "'http://httpbin.org/post'", ",", "json", "=", "post_data", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "post_response = requests.post(url='http://httpbin.org/post', json=post_data)", "decano_code": "post_response = requests.post(url='http://httpbin.org/post', json=post_data)", "raw_code": "post_response = requests.post(url='http://httpbin.org/post', json=post_data)", "str_map": {}}
{"src": ["django", "jinja", "slice", "list", "mylist", "by", "_STR:0_"], "token": ["{", "{", "(", "mylist", "|", "slice", ")", ":", "\" _STR:0_ \"", "}", "}"], "type": ["OP", "OP", "OP", "NAME", "OP", "KEYWORD", "OP", "OP", "STRING", "OP", "OP"], "cano_code": "{{(mylist | slice): \" _STR:0_ \"}}", "decano_code": "{{(mylist | slice): \" _STR:0_ \"}}", "raw_code": "{{(mylist | slice): '3:8'}}", "str_map": {"3:8": "_STR:0_"}}
{"src": ["create", "dataframe", "df", "with", "content", "of", "hdf", "store", "file", "_STR:0_", "with", "key", "of", "_STR:1_"], "token": ["df1", "=", "pd", ".", "read_hdf", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "df1 = pd.read_hdf(\" _STR:0_ \", \" _STR:1_ \")", "decano_code": "df1 = pd.read_hdf(\" _STR:0_ \", \" _STR:1_ \")", "raw_code": "df1 = pd.read_hdf('/home/.../data.h5', 'firstSet')", "str_map": {"/home/.../data.h5": "_STR:0_", "firstSet": "_STR:1_"}}
{"src": ["get", "the", "largest", "index", "of", "the", "last", "occurrence", "of", "characters", "_STR:0_", "in", "string", "test_string"], "token": ["max", "(", "test_string", ".", "rfind", "(", "i", ")", "for", "i", "in", "\" _STR:0_ \"", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "STRING", "OP"], "cano_code": "max(test_string.rfind(i) for i in \" _STR:0_ \")", "decano_code": "max(test_string.rfind(i) for i in \" _STR:0_ \")", "raw_code": "max(test_string.rfind(i) for i in '([{')", "str_map": {"([{": "_STR:0_"}}
{"src": ["print", "_STR:0_", "plus", "unicode", "character", "u'\\u2713", "'"], "token": ["print", "(", "\" _STR:0_ \"", "+", "'\\u2713'", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "print(\" _STR:0_ \" + '\\u2713')", "decano_code": "print(\" _STR:0_ \" + '\\u2713')", "raw_code": "print('here is your checkmark: ' + '\\u2713')", "str_map": {"here is your checkmark: ": "_STR:0_"}}
{"src": ["print", "unicode", "characters", "in", "a", "string", "\\u0420\\u043e\\u0441\\u0441\\u0438\\u044f"], "token": ["print", "(", "'\\u0420\\u043e\\u0441\\u0441\\u0438\\u044f'", ")"], "type": ["KEYWORD", "OP", "STRING", "OP"], "cano_code": "print('\\u0420\\u043e\\u0441\\u0441\\u0438\\u044f')", "decano_code": "print('\\u0420\\u043e\\u0441\\u0441\\u0438\\u044f')", "raw_code": "print('\\u0420\\u043e\\u0441\\u0441\\u0438\\u044f')", "str_map": {}}
{"src": ["pads", "string", "_STR:0_", "on", "the", "left", "with", "1", "zero"], "token": ["print", "(", "'{0}'", ".", "format", "(", "\" _STR:0_ \"", ".", "zfill", "(", "2", ")", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "print('{0}'.format(\" _STR:0_ \".zfill(2)))", "decano_code": "print('{0}'.format(\" _STR:0_ \".zfill(2)))", "raw_code": "print('{0}'.format('5'.zfill(2)))", "str_map": {"5": "_STR:0_"}}
{"src": ["remove", "duplicates", "elements", "from", "list", "sequences", "and", "sort", "it", "in", "ascending", "order"], "token": ["sorted", "(", "set", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "sequences", ")", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "sorted(set(itertools.chain.from_iterable(sequences)))", "decano_code": "sorted(set(itertools.chain.from_iterable(sequences)))", "raw_code": "sorted(set(itertools.chain.from_iterable(sequences)))", "str_map": {}}
{"src": ["pandas", "dataframe", "df", "column", "_STR:0_", "to", "list"], "token": ["df", "[", "\" _STR:0_ \"", "]", ".", "values", ".", "tolist", "(", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "df[\" _STR:0_ \"].values.tolist()", "decano_code": "df[\" _STR:0_ \"].values.tolist()", "raw_code": "df['a'].values.tolist()", "str_map": {"a": "_STR:0_"}}
{"src": ["get", "a", "list", "of", "all", "values", "in", "column", "a", "in", "pandas", "data", "frame", "df"], "token": ["df", "[", "'a'", "]", ".", "tolist", "(", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "df['a'].tolist()", "decano_code": "df['a'].tolist()", "raw_code": "df['a'].tolist()", "str_map": {}}
{"src": ["escaping", "quotes", "in", "string"], "token": ["replace", "(", "'\"'", ",", "'\\\\\"'", ")"], "type": ["NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "replace('\"', '\\\\\"')", "decano_code": "replace('\"', '\\\\\"')", "raw_code": "replace('\"', '\\\\\"')", "str_map": {}}
{"src": ["check", "if", "all", "string", "elements", "in", "list", "words", "are", "upper-cased"], "token": ["print", "(", "all", "(", "word", "[", "0", "]", ".", "isupper", "(", ")", "for", "word", "in", "words", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "print(all(word[0].isupper() for word in words))", "decano_code": "print(all(word[0].isupper() for word in words))", "raw_code": "print(all(word[0].isupper() for word in words))", "str_map": {}}
{"src": ["remove", "items", "from", "dictionary", "myDict", "if", "the", "item", "'", "s", "value", "val", "is", "equal", "to", "42"], "token": ["myDict", "=", "{", "key", ":", "val", "for", "key", ",", "val", "in", "list", "(", "myDict", ".", "items", "(", ")", ")", "if", "val", "!=", "42", "}"], "type": ["NAME", "OP", "OP", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "NAME", "OP", "NUMBER", "OP"], "cano_code": "myDict = {key: val for key, val in list(myDict.items()) if val != 42}", "decano_code": "myDict = {key: val for key, val in list(myDict.items()) if val != 42}", "raw_code": "myDict = {key: val for key, val in list(myDict.items()) if val != 42}", "str_map": {}}
{"src": ["remove", "all", "items", "from", "a", "dictionary", "myDict", "whose", "values", "are", "42"], "token": ["{", "key", ":", "val", "for", "key", ",", "val", "in", "list", "(", "myDict", ".", "items", "(", ")", ")", "if", "val", "!=", "42", "}"], "type": ["OP", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "KEYWORD", "NAME", "OP", "NUMBER", "OP"], "cano_code": "{key: val for key, val in list(myDict.items()) if val != 42}", "decano_code": "{key: val for key, val in list(myDict.items()) if val != 42}", "raw_code": "{key: val for key, val in list(myDict.items()) if val != 42}", "str_map": {}}
{"src": ["determine", "the", "byte", "length", "of", "a", "utf-8", "encoded", "string", "s"], "token": ["return", "len", "(", "s", ".", "encode", "(", "'utf-8'", ")", ")"], "type": ["KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "return len(s.encode('utf-8'))", "decano_code": "return len(s.encode('utf-8'))", "raw_code": "return len(s.encode('utf-8'))", "str_map": {}}
{"src": ["kill", "a", "process", "with", "id", "process.pid", "[", "process", ".", "pid", "]"], "token": ["os", ".", "kill", "(", "process", ".", "pid", ",", "signal", ".", "SIGKILL", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "os.kill(process.pid, signal.SIGKILL)", "decano_code": "os.kill(process.pid, signal.SIGKILL)", "raw_code": "os.kill(process.pid, signal.SIGKILL)", "str_map": {}}
{"src": ["get", "data", "of", "columns", "with", "null", "values", "in", "dataframe", "df"], "token": ["df", "[", "pd", ".", "isnull", "(", "df", ")", ".", "any", "(", "axis", "=", "1", ")", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "df[pd.isnull(df).any(axis=1)]", "decano_code": "df[pd.isnull(df).any(axis=1)]", "raw_code": "df[pd.isnull(df).any(axis=1)]", "str_map": {}}
{"src": ["strip", "everything", "up", "to", "and", "including", "the", "character", "&", "from", "url", "url", ",", "strip", "the", "character", "=", "from", "the", "remaining", "string", "and", "concatenate", ".html", "to", "the", "end"], "token": ["url", ".", "split", "(", "'&'", ")", "[", "-", "1", "]", ".", "replace", "(", "'='", ",", "''", ")", "+", "'.html'"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP", "STRING"], "cano_code": "url.split('&')[-1].replace('=', '') + '.html'", "decano_code": "url.split('&')[-1].replace('=', '') + '.html'", "raw_code": "url.split('&')[-1].replace('=', '') + '.html'", "str_map": {}}
{"src": ["parse", "a", "file", "sample.xml", "[", "sample", ".", "xml", "]", "using", "expat", "parsing", "in", "python", "3"], "token": ["parser", ".", "ParseFile", "(", "open", "(", "'sample.xml'", ",", "'rb'", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "parser.ParseFile(open('sample.xml', 'rb'))", "decano_code": "parser.ParseFile(open('sample.xml', 'rb'))", "raw_code": "parser.ParseFile(open('sample.xml', 'rb'))", "str_map": {}}
{"src": ["exit", "script"], "token": ["sys", ".", "exit", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "sys.exit()", "decano_code": "sys.exit()", "raw_code": "sys.exit()", "str_map": {}}
{"src": ["assign", "value", "in", "group", "dynamically", "to", "class", "property", "attr"], "token": ["setattr", "(", "self", ",", "attr", ",", "group", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "setattr(self, attr, group)", "decano_code": "setattr(self, attr, group)", "raw_code": "setattr(self, attr, group)", "str_map": {}}
{"src": ["decode", "url-encoded", "string", "some_string", "to", "its", "character", "equivalents"], "token": ["urllib", ".", "parse", ".", "unquote", "(", "urllib", ".", "parse", ".", "unquote", "(", "some_string", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "urllib.parse.unquote(urllib.parse.unquote(some_string))", "decano_code": "urllib.parse.unquote(urllib.parse.unquote(some_string))", "raw_code": "urllib.parse.unquote(urllib.parse.unquote(some_string))", "str_map": {}}
{"src": ["decode", "a", "double", "URL", "encoded", "string", "_STR:0_", "to", "_STR:1_"], "token": ["urllib", ".", "parse", ".", "unquote", "(", "urllib", ".", "parse", ".", "unquote", "(", "\" _STR:0_ \"", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "urllib.parse.unquote(urllib.parse.unquote(\" _STR:0_ \"))", "decano_code": "urllib.parse.unquote(urllib.parse.unquote(\" _STR:0_ \"))", "raw_code": "urllib.parse.unquote(urllib.parse.unquote('FireShot3%2B%25282%2529.png'))", "str_map": {"FireShot3%2B%25282%2529.png": "_STR:0_", "FireShot3+(2).png": "_STR:1_"}}
{"src": ["change", "flask", "security", "register", "url", "to", "/create_account"], "token": ["app", ".", "config", "[", "'SECURITY_REGISTER_URL'", "]", "=", "'/create_account'"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "STRING"], "cano_code": "app.config['SECURITY_REGISTER_URL'] = '/create_account'", "decano_code": "app.config['SECURITY_REGISTER_URL'] = '/create_account'", "raw_code": "app.config['SECURITY_REGISTER_URL'] = '/create_account'", "str_map": {}}
{"src": ["open", "a", "file", "/home/user/test/wsservice/data.pkl", "[", "/home/user/test/wsservice/data", ".", "pkl", "]", "in", "binary", "write", "mode"], "token": ["output", "=", "open", "(", "'/home/user/test/wsservice/data.pkl'", ",", "'wb'", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "output = open('/home/user/test/wsservice/data.pkl', 'wb')", "decano_code": "output = open('/home/user/test/wsservice/data.pkl', 'wb')", "raw_code": "output = open('/home/user/test/wsservice/data.pkl', 'wb')", "str_map": {}}
{"src": ["remove", "the", "last", "element", "in", "list", "a"], "token": ["del", "a", "[", "(", "-", "1", ")", "]"], "type": ["KEYWORD", "NAME", "OP", "OP", "OP", "NUMBER", "OP", "OP"], "cano_code": "del a[(-1)]", "decano_code": "del a[(-1)]", "raw_code": "del a[(-1)]", "str_map": {}}
{"src": ["remove", "the", "element", "in", "list", "a", "with", "index", "1"], "token": ["a", ".", "pop", "(", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "a.pop(1)", "decano_code": "a.pop(1)", "raw_code": "a.pop(1)", "str_map": {}}
{"src": ["remove", "the", "last", "element", "in", "list", "a"], "token": ["a", ".", "pop", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP"], "cano_code": "a.pop()", "decano_code": "a.pop()", "raw_code": "a.pop()", "str_map": {}}
{"src": ["remove", "the", "element", "in", "list", "a", "at", "index", "index"], "token": ["a", ".", "pop", "(", "index", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "a.pop(index)", "decano_code": "a.pop(index)", "raw_code": "a.pop(index)", "str_map": {}}
{"src": ["remove", "the", "element", "in", "list", "a", "at", "index", "index"], "token": ["del", "a", "[", "index", "]"], "type": ["KEYWORD", "NAME", "OP", "NAME", "OP"], "cano_code": "del a[index]", "decano_code": "del a[index]", "raw_code": "del a[index]", "str_map": {}}
{"src": ["print", "a", "celsius", "symbol", "on", "x", "axis", "of", "a", "plot", "ax"], "token": ["ax", ".", "set_xlabel", "(", "'Temperature (\\u2103)'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "ax.set_xlabel('Temperature (\\u2103)')", "decano_code": "ax.set_xlabel('Temperature (\\u2103)')", "raw_code": "ax.set_xlabel('Temperature (\\u2103)')", "str_map": {}}
{"src": ["print", "a", "celsius", "symbol", "with", "matplotlib"], "token": ["ax", ".", "set_xlabel", "(", "'Temperature ($^\\\\circ$C)'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "ax.set_xlabel('Temperature ($^\\\\circ$C)')", "decano_code": "ax.set_xlabel('Temperature ($^\\\\circ$C)')", "raw_code": "ax.set_xlabel('Temperature ($^\\\\circ$C)')", "str_map": {}}
{"src": ["convert", "a", "list", "of", "lists", "list_of_lists", "into", "a", "list", "of", "strings", "keeping", "empty", "sub-lists", "as", "empty", "string", "_STR:0_"], "token": ["[", "\" _STR:0_ \"", ".", "join", "(", "l", ")", "for", "l", "in", "list_of_lists", "]"], "type": ["OP", "STRING", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[\" _STR:0_ \".join(l) for l in list_of_lists]", "decano_code": "[\" _STR:0_ \".join(l) for l in list_of_lists]", "raw_code": "[''.join(l) for l in list_of_lists]", "str_map": {"": "_STR:0_"}}
{"src": ["get", "a", "list", "of", "all", "the", "duplicate", "items", "in", "dataframe", "df", "using", "pandas"], "token": ["pd", ".", "concat", "(", "g", "for", "_", ",", "g", "in", "df", ".", "groupby", "(", "'ID'", ")", "if", "len", "(", "g", ")", ">", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "OP", "NUMBER", "OP"], "cano_code": "pd.concat(g for _, g in df.groupby('ID') if len(g) > 1)", "decano_code": "pd.concat(g for _, g in df.groupby('ID') if len(g) > 1)", "raw_code": "pd.concat(g for _, g in df.groupby('ID') if len(g) > 1)", "str_map": {}}
{"src": ["delete", "third", "row", "in", "a", "numpy", "array", "x"], "token": ["x", "=", "numpy", ".", "delete", "(", "x", ",", "2", ",", "axis", "=", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "x = numpy.delete(x, 2, axis=1)", "decano_code": "x = numpy.delete(x, 2, axis=1)", "raw_code": "x = numpy.delete(x, 2, axis=1)", "str_map": {}}
{"src": ["delete", "first", "row", "of", "array", "x"], "token": ["x", "=", "numpy", ".", "delete", "(", "x", ",", "0", ",", "axis", "=", "0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "x = numpy.delete(x, 0, axis=0)", "decano_code": "x = numpy.delete(x, 0, axis=0)", "raw_code": "x = numpy.delete(x, 0, axis=0)", "str_map": {}}
{"src": ["merge", "rows", "from", "dataframe", "df1", "with", "rows", "from", "dataframe", "df2", "and", "calculate", "the", "mean", "for", "rows", "that", "have", "the", "same", "value", "of", "axis", "1"], "token": ["pd", ".", "concat", "(", "(", "df1", ",", "df2", ")", ",", "axis", "=", "1", ")", ".", "mean", "(", "axis", "=", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "pd.concat((df1, df2), axis=1).mean(axis=1)", "decano_code": "pd.concat((df1, df2), axis=1).mean(axis=1)", "raw_code": "pd.concat((df1, df2), axis=1).mean(axis=1)", "str_map": {}}
{"src": ["get", "the", "average", "values", "from", "two", "numpy", "arrays", "old_set", "and", "new_set"], "token": ["np", ".", "mean", "(", "np", ".", "array", "(", "[", "old_set", ",", "new_set", "]", ")", ",", "axis", "=", "0", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "np.mean(np.array([old_set, new_set]), axis=0)", "decano_code": "np.mean(np.array([old_set, new_set]), axis=0)", "raw_code": "np.mean(np.array([old_set, new_set]), axis=0)", "str_map": {}}
{"src": ["matplotlib", "change", "marker", "size", "to", "500"], "token": ["scatter", "(", "x", ",", "y", ",", "s", "=", "500", ",", "color", "=", "'green'", ",", "marker", "=", "'h'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "scatter(x, y, s=500, color='green', marker='h')", "decano_code": "scatter(x, y, s=500, color='green', marker='h')", "raw_code": "scatter(x, y, s=500, color='green', marker='h')", "str_map": {}}
{"src": ["create", "new", "list", "result", "by", "splitting", "each", "item", "in", "list", "words"], "token": ["result", "=", "[", "item", "for", "word", "in", "words", "for", "item", "in", "word", ".", "split", "(", "','", ")", "]"], "type": ["NAME", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "result = [item for word in words for item in word.split(',')]", "decano_code": "result = [item for word in words for item in word.split(',')]", "raw_code": "result = [item for word in words for item in word.split(',')]", "str_map": {}}
{"src": ["convert", "JSON", "string", "_STR:0_", "into", "a", "DateTime", "object", "using", "format", "_STR:1_"], "token": ["datetime", ".", "datetime", ".", "strptime", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "datetime.datetime.strptime(\" _STR:0_ \", \" _STR:1_ \")", "decano_code": "datetime.datetime.strptime(\" _STR:0_ \", \" _STR:1_ \")", "raw_code": "datetime.datetime.strptime('2012-05-29T19:30:03.283Z', '%Y-%m-%dT%H:%M:%S.%fZ')", "str_map": {"2012-05-29T19:30:03.283Z": "_STR:0_", "%Y-%m-%dT%H:%M:%S.%fZ": "_STR:1_"}}
{"src": ["count", "true", "values", "associated", "with", "key", "_STR:0_", "in", "dictionary", "tadas"], "token": ["sum", "(", "item", "[", "\" _STR:0_ \"", "]", "for", "item", "in", "list", "(", "tadas", ".", "values", "(", ")", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "sum(item[\" _STR:0_ \"] for item in list(tadas.values()))", "decano_code": "sum(item[\" _STR:0_ \"] for item in list(tadas.values()))", "raw_code": "sum(item['one'] for item in list(tadas.values()))", "str_map": {"one": "_STR:0_"}}
{"src": ["encode", "a", "pdf", "file", "pdf_reference.pdf", "[", "pdf_reference", ".", "pdf", "]", "with", "base64", "encoding"], "token": ["a", "=", "open", "(", "'pdf_reference.pdf'", ",", "'rb'", ")", ".", "read", "(", ")", ".", "encode", "(", "'base64'", ")"], "type": ["NAME", "OP", "KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "a = open('pdf_reference.pdf', 'rb').read().encode('base64')", "decano_code": "a = open('pdf_reference.pdf', 'rb').read().encode('base64')", "raw_code": "a = open('pdf_reference.pdf', 'rb').read().encode('base64')", "str_map": {}}
{"src": ["split", "string", "a", "using", "new-line", "character", "_STR:0_", "as", "separator"], "token": ["a", ".", "rstrip", "(", ")", ".", "split", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "a.rstrip().split(\" _STR:0_ \")", "decano_code": "a.rstrip().split(\" _STR:0_ \")", "raw_code": "a.rstrip().split('\\n')", "str_map": {"\n": "_STR:0_"}}
{"src": ["split", "a", "string", "a", "with", "new", "line", "character"], "token": ["a", ".", "split", "(", "'\\n'", ")", "[", ":", "-", "1", "]"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "a.split('\\n')[:-1]", "decano_code": "a.split('\\n')[:-1]", "raw_code": "a.split('\\n')[:-1]", "str_map": {}}
{"src": ["return", "http", "status", "code", "204", "from", "a", "django", "view"], "token": ["return", "HttpResponse", "(", "status", "=", "204", ")"], "type": ["KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "return HttpResponse(status=204)", "decano_code": "return HttpResponse(status=204)", "raw_code": "return HttpResponse(status=204)", "str_map": {}}
{"src": ["check", "if", "7", "is", "in", "a"], "token": ["(", "7", "in", "a", ")"], "type": ["OP", "NUMBER", "KEYWORD", "NAME", "OP"], "cano_code": "(7 in a)", "decano_code": "(7 in a)", "raw_code": "(7 in a)", "str_map": {}}
{"src": ["check", "if", "_STR:0_", "is", "in", "list", "a"], "token": ["(", "\" _STR:0_ \"", "in", "a", ")"], "type": ["OP", "STRING", "KEYWORD", "NAME", "OP"], "cano_code": "(\" _STR:0_ \" in a)", "decano_code": "(\" _STR:0_ \" in a)", "raw_code": "('a' in a)", "str_map": {"a": "_STR:0_"}}
{"src": ["sort", "list", "results", "by", "keys", "value", "_STR:0_"], "token": ["sorted", "(", "results", ",", "key", "=", "itemgetter", "(", "\" _STR:0_ \"", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "sorted(results, key=itemgetter(\" _STR:0_ \"))", "decano_code": "sorted(results, key=itemgetter(\" _STR:0_ \"))", "raw_code": "sorted(results, key=itemgetter('year'))", "str_map": {"year": "_STR:0_"}}
{"src": ["get", "current", "url", "in", "selenium", "webdriver", "browser"], "token": ["print", "(", "browser", ".", "current_url", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "print(browser.current_url)", "decano_code": "print(browser.current_url)", "raw_code": "print(browser.current_url)", "str_map": {}}
{"src": ["split", "string", "str", "with", "delimiter", "_STR:0_", "or", "delimiter", "_STR:1_"], "token": ["re", ".", "split", "(", "'; |, '", ",", "str", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "OP"], "cano_code": "re.split('; |, ', str)", "decano_code": "re.split('; |, ', str)", "raw_code": "re.split('; |, ', str)", "str_map": {"; ": "_STR:0_", ", ": "_STR:1_"}}
{"src": ["un-escaping", "characters", "in", "a", "string", "with", "python"], "token": ["\"\"\"\\\\u003Cp\\\\u003E\"\"\"", ".", "decode", "(", "'unicode-escape'", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "\"\"\"\\\\u003Cp\\\\u003E\"\"\".decode('unicode-escape')", "decano_code": "\"\"\"\\\\u003Cp\\\\u003E\"\"\".decode('unicode-escape')", "raw_code": "\"\"\"\\\\u003Cp\\\\u003E\"\"\".decode('unicode-escape')", "str_map": {}}
{"src": ["convert", "date", "string", "s", "in", "format", "pattern", "_STR:0_", "into", "a", "timestamp"], "token": ["time", ".", "mktime", "(", "datetime", ".", "datetime", ".", "strptime", "(", "s", ",", "\" _STR:0_ \"", ")", ".", "timetuple", "(", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "time.mktime(datetime.datetime.strptime(s, \" _STR:0_ \").timetuple())", "decano_code": "time.mktime(datetime.datetime.strptime(s, \" _STR:0_ \").timetuple())", "raw_code": "time.mktime(datetime.datetime.strptime(s, '%d/%m/%Y').timetuple())", "str_map": {"%d/%m/%Y": "_STR:0_"}}
{"src": ["convert", "string", "_STR:0_", "to", "an", "integer", "timestamp"], "token": ["int", "(", "datetime", ".", "datetime", ".", "strptime", "(", "\" _STR:0_ \"", ",", "'%d/%m/%Y'", ")", ".", "strftime", "(", "'%s'", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "int(datetime.datetime.strptime(\" _STR:0_ \", '%d/%m/%Y').strftime('%s'))", "decano_code": "int(datetime.datetime.strptime(\" _STR:0_ \", '%d/%m/%Y').strftime('%s'))", "raw_code": "int(datetime.datetime.strptime('01/12/2011', '%d/%m/%Y').strftime('%s'))", "str_map": {"01/12/2011": "_STR:0_"}}
{"src": ["get", "http", "header", "of", "the", "key", "_STR:0_", "in", "flask"], "token": ["request", ".", "headers", "[", "\" _STR:0_ \"", "]"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "request.headers[\" _STR:0_ \"]", "decano_code": "request.headers[\" _STR:0_ \"]", "raw_code": "request.headers['your-header-name']", "str_map": {"your-header-name": "_STR:0_"}}
{"src": ["select", "records", "of", "dataframe", "df", "where", "the", "sum", "of", "column", "_STR:0_", "for", "each", "value", "in", "column", "_STR:1_", "is", "0"], "token": ["df", ".", "groupby", "(", "\" _STR:1_ \"", ")", "[", "\" _STR:0_ \"", "]", ".", "filter", "(", "lambda", "x", ":", "x", ".", "sum", "(", ")", "==", "0", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "STRING", "OP", "OP", "KEYWORD", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "df.groupby(\" _STR:1_ \")[\" _STR:0_ \"].filter(lambda x: x.sum() == 0)", "decano_code": "df.groupby(\" _STR:1_ \")[\" _STR:0_ \"].filter(lambda x: x.sum() == 0)", "raw_code": "df.groupby('User')['X'].filter(lambda x: x.sum() == 0)", "str_map": {"X": "_STR:0_", "User": "_STR:1_"}}
{"src": ["get", "data", "of", "dataframe", "df", "where", "the", "sum", "of", "column", "_STR:0_", "grouped", "by", "column", "_STR:1_", "is", "equal", "to", "0"], "token": ["df", ".", "loc", "[", "df", ".", "groupby", "(", "\" _STR:1_ \"", ")", "[", "\" _STR:0_ \"", "]", ".", "transform", "(", "sum", ")", "==", "0", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "OP", "OP", "NUMBER", "OP"], "cano_code": "df.loc[df.groupby(\" _STR:1_ \")[\" _STR:0_ \"].transform(sum) == 0]", "decano_code": "df.loc[df.groupby(\" _STR:1_ \")[\" _STR:0_ \"].transform(sum) == 0]", "raw_code": "df.loc[df.groupby('User')['X'].transform(sum) == 0]", "str_map": {"X": "_STR:0_", "User": "_STR:1_"}}
{"src": ["get", "data", "from", "dataframe", "df", "where", "column", "_STR:0_", "is", "equal", "to", "0"], "token": ["df", ".", "groupby", "(", "'User'", ")", "[", "\" _STR:0_ \"", "]", ".", "transform", "(", "sum", ")", "==", "0"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "OP", "OP", "NUMBER"], "cano_code": "df.groupby('User')[\" _STR:0_ \"].transform(sum) == 0", "decano_code": "df.groupby('User')[\" _STR:0_ \"].transform(sum) == 0", "raw_code": "df.groupby('User')['X'].transform(sum) == 0", "str_map": {"X": "_STR:0_"}}
{"src": ["how", "do", "i", "find", "an", "element", "that", "contains", "specific", "text", "in", "selenium", "webdriver", "(Python)", "?"], "token": ["driver", ".", "find_elements_by_xpath", "(", "\"//*[contains(text(), 'My Button')]\"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "driver.find_elements_by_xpath(\"//*[contains(text(), 'My Button')]\")", "decano_code": "driver.find_elements_by_xpath(\"//*[contains(text(), 'My Button')]\")", "raw_code": "driver.find_elements_by_xpath(\"//*[contains(text(), 'My Button')]\")", "str_map": {}}
{"src": ["convert", "pandas", "group", "by", "object", "to", "multi-indexed", "dataframe", "with", "indices", "_STR:0_", "and", "_STR:1_"], "token": ["df", ".", "set_index", "(", "[", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "df.set_index([\" _STR:0_ \", \" _STR:1_ \"])", "decano_code": "df.set_index([\" _STR:0_ \", \" _STR:1_ \"])", "raw_code": "df.set_index(['Name', 'Destination'])", "str_map": {"Name": "_STR:0_", "Destination": "_STR:1_"}}
{"src": ["coalesce", "non-word-characters", "in", "string", "a"], "token": ["print", "(", "re", ".", "sub", "(", "'(\\\\W)\\\\1+'", ",", "'\\\\1'", ",", "a", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP", "OP"], "cano_code": "print(re.sub('(\\\\W)\\\\1+', '\\\\1', a))", "decano_code": "print(re.sub('(\\\\W)\\\\1+', '\\\\1', a))", "raw_code": "print(re.sub('(\\\\W)\\\\1+', '\\\\1', a))", "str_map": {}}
{"src": ["open", "a", "file", "_STR:0_", "under", "unix"], "token": ["os", ".", "system", "(", "'start \"$file\"'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "os.system('start \"$file\"')", "decano_code": "os.system('start \"$file\"')", "raw_code": "os.system('start \"$file\"')", "str_map": {"$file": "_STR:0_"}}
{"src": ["convert", "a", "unicode", "string", "title", "to", "a", "_STR:0_", "string"], "token": ["unicodedata", ".", "normalize", "(", "'NFKD'", ",", "title", ")", ".", "encode", "(", "\" _STR:0_ \"", ",", "'ignore'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "unicodedata.normalize('NFKD', title).encode(\" _STR:0_ \", 'ignore')", "decano_code": "unicodedata.normalize('NFKD', title).encode(\" _STR:0_ \", 'ignore')", "raw_code": "unicodedata.normalize('NFKD', title).encode('ascii', 'ignore')", "str_map": {"ascii": "_STR:0_"}}
{"src": ["convert", "a", "unicode", "string", "a", "to", "a", "_STR:0_", "string"], "token": ["a", ".", "encode", "(", "\" _STR:0_ \"", ",", "'ignore'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "a.encode(\" _STR:0_ \", 'ignore')", "decano_code": "a.encode(\" _STR:0_ \", 'ignore')", "raw_code": "a.encode('ascii', 'ignore')", "str_map": {"ascii": "_STR:0_"}}
{"src": ["create", "a", "list", "files", "containing", "all", "files", "in", "directory", "_STR:0_", "that", "starts", "with", "numbers", "between", "0", "and", "9", "and", "ends", "with", "the", "extension", "_STR:1_"], "token": ["files", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "\" _STR:0_ \"", ")", "if", "re", ".", "match", "(", "'[0-9]+.*\\\\.jpg'", ",", "f", ")", "]"], "type": ["NAME", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "OP"], "cano_code": "files = [f for f in os.listdir(\" _STR:0_ \") if re.match('[0-9]+.*\\\\.jpg', f)]", "decano_code": "files = [f for f in os.listdir(\" _STR:0_ \") if re.match('[0-9]+.*\\\\.jpg', f)]", "raw_code": "files = [f for f in os.listdir('.') if re.match('[0-9]+.*\\\\.jpg', f)]", "str_map": {".": "_STR:0_", ".jpg": "_STR:1_"}}
{"src": ["adding", "a", "1-d", "array", "[1, 2, 3, 4, 5, 6, 7, 8, 9", "]", "to", "a", "3-d", "array", "np.zeros((6, 9, 20)", "[", "np", ".", "zeros((6,", "9,", "20)", "]", ")"], "token": ["np", ".", "zeros", "(", "(", "6", ",", "9", ",", "20", ")", ")", "+", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", "]", ")", "[", "(", "None", ")", ",", ":", ",", "(", "None", ")", "]"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "OP", "KEYWORD", "OP", "OP", "OP", "OP", "OP", "KEYWORD", "OP", "OP"], "cano_code": "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]", "decano_code": "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]", "raw_code": "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])[(None), :, (None)]", "str_map": {}}
{"src": ["add", "array", "of", "shape", "(6, 9, 20", ")", "to", "array", "[1, 2, 3, 4, 5, 6, 7, 8, 9", "]"], "token": ["np", ".", "zeros", "(", "(", "6", ",", "9", ",", "20", ")", ")", "+", "np", ".", "array", "(", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", "]", ")", ".", "reshape", "(", "(", "1", ",", "9", ",", "1", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))", "decano_code": "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))", "raw_code": "np.zeros((6, 9, 20)) + np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]).reshape((1, 9, 1))", "str_map": {}}
{"src": ["how", "can", "i", "launch", "an", "instance", "of", "an", "application", "using", "python", "?"], "token": ["os", ".", "system", "(", "'start excel.exe <path/to/file>'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "os.system('start excel.exe <path/to/file>')", "decano_code": "os.system('start excel.exe <path/to/file>')", "raw_code": "os.system('start excel.exe <path/to/file>')", "str_map": {}}
{"src": ["get", "the", "list", "with", "the", "highest", "sum", "value", "in", "list", "x"], "token": ["print", "(", "max", "(", "x", ",", "key", "=", "sum", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "OP"], "cano_code": "print(max(x, key=sum))", "decano_code": "print(max(x, key=sum))", "raw_code": "print(max(x, key=sum))", "str_map": {}}
{"src": ["sum", "the", "length", "of", "lists", "in", "list", "x", "that", "are", "more", "than", "1", "item", "in", "length"], "token": ["sum", "(", "len", "(", "y", ")", "for", "y", "in", "x", "if", "len", "(", "y", ")", ">", "1", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "OP", "NUMBER", "OP"], "cano_code": "sum(len(y) for y in x if len(y) > 1)", "decano_code": "sum(len(y) for y in x if len(y) > 1)", "raw_code": "sum(len(y) for y in x if len(y) > 1)", "str_map": {}}
{"src": ["enclose", "numbers", "in", "quotes", "in", "a", "string", "This is number 1 and this is number 22"], "token": ["re", ".", "sub", "(", "'(\\\\d+)'", ",", "'\"\\\\1\"'", ",", "'This is number 1 and this is number 22'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.sub('(\\\\d+)', '\"\\\\1\"', 'This is number 1 and this is number 22')", "decano_code": "re.sub('(\\\\d+)', '\"\\\\1\"', 'This is number 1 and this is number 22')", "raw_code": "re.sub('(\\\\d+)', '\"\\\\1\"', 'This is number 1 and this is number 22')", "str_map": {}}
{"src": ["multiply", "the", "columns", "of", "sparse", "matrix", "m", "by", "array", "a", "then", "multiply", "the", "rows", "of", "the", "resulting", "matrix", "by", "array", "a"], "token": ["numpy", ".", "dot", "(", "numpy", ".", "dot", "(", "a", ",", "m", ")", ",", "a", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP"], "cano_code": "numpy.dot(numpy.dot(a, m), a)", "decano_code": "numpy.dot(numpy.dot(a, m), a)", "raw_code": "numpy.dot(numpy.dot(a, m), a)", "str_map": {}}
{"src": ["django", "check", "if", "an", "object", "with", "criteria", "name", "equal", "to", "_STR:0_", "and", "criteria", "title", "equal", "to", "_STR:1_", "exists", "in", "model", "entry"], "token": ["Entry", ".", "objects", ".", "filter", "(", "name", "=", "\" _STR:0_ \"", ",", "title", "=", "\" _STR:1_ \"", ")", ".", "exists", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "Entry.objects.filter(name=\" _STR:0_ \", title=\" _STR:1_ \").exists()", "decano_code": "Entry.objects.filter(name=\" _STR:0_ \", title=\" _STR:1_ \").exists()", "raw_code": "Entry.objects.filter(name='name', title='title').exists()", "str_map": {"name": "_STR:0_", "title": "_STR:1_"}}
{"src": ["sort", "a", "nested", "list", "by", "the", "inverse", "of", "element", "2", ",", "then", "by", "element", "1"], "token": ["sorted", "(", "l", ",", "key", "=", "lambda", "x", ":", "(", "-", "int", "(", "x", "[", "1", "]", ")", ",", "x", "[", "0", "]", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "sorted(l, key=lambda x: (-int(x[1]), x[0]))", "decano_code": "sorted(l, key=lambda x: (-int(x[1]), x[0]))", "raw_code": "sorted(l, key=lambda x: (-int(x[1]), x[0]))", "str_map": {}}
{"src": ["get", "domain/host", "name", "from", "request", "object", "in", "django"], "token": ["request", ".", "META", "[", "'HTTP_HOST'", "]"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "request.META['HTTP_HOST']", "decano_code": "request.META['HTTP_HOST']", "raw_code": "request.META['HTTP_HOST']", "str_map": {}}
{"src": ["get", "a", "string", "randomkey123xyz987", "between", "two", "substrings", "in", "a", "string", "api('randomkey123xyz987', 'key', 'text'", ")", "using", "regex"], "token": ["re", ".", "findall", "(", "\"api\\\\('(.*?)'\"", ",", "\"api('randomkey123xyz987', 'key', 'text')\"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "re.findall(\"api\\\\('(.*?)'\", \"api('randomkey123xyz987', 'key', 'text')\")", "decano_code": "re.findall(\"api\\\\('(.*?)'\", \"api('randomkey123xyz987', 'key', 'text')\")", "raw_code": "re.findall(\"api\\\\('(.*?)'\", \"api('randomkey123xyz987', 'key', 'text')\")", "str_map": {}}
{"src": ["invoke", "perl", "script", "_STR:0_", "using", "perl", "interpeter", "_STR:1_", "and", "send", "argument", "var", "to", "it"], "token": ["subprocess", ".", "call", "(", "[", "\" _STR:1_ \"", ",", "\" _STR:0_ \"", ",", "var", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP", "OP"], "cano_code": "subprocess.call([\" _STR:1_ \", \" _STR:0_ \", var])", "decano_code": "subprocess.call([\" _STR:1_ \", \" _STR:0_ \", var])", "raw_code": "subprocess.call(['/usr/bin/perl', './uireplace.pl', var])", "str_map": {"./uireplace.pl": "_STR:0_", "/usr/bin/perl": "_STR:1_"}}
{"src": ["print", "list", "of", "items", "myList"], "token": ["print", "(", "'\\n'", ".", "join", "(", "str", "(", "p", ")", "for", "p", "in", "myList", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP"], "cano_code": "print('\\n'.join(str(p) for p in myList))", "decano_code": "print('\\n'.join(str(p) for p in myList))", "raw_code": "print('\\n'.join(str(p) for p in myList))", "str_map": {}}
{"src": ["update", "the", "dictionary", "mydic", "with", "dynamic", "keys", "i", "and", "values", "with", "key", "_STR:0_", "from", "dictionary", "o"], "token": ["mydic", ".", "update", "(", "{", "i", ":", "o", "[", "\" _STR:0_ \"", "]", "}", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "mydic.update({i: o[\" _STR:0_ \"]})", "decano_code": "mydic.update({i: o[\" _STR:0_ \"]})", "raw_code": "mydic.update({i: o['name']})", "str_map": {"name": "_STR:0_"}}
{"src": ["split", "a", "utf-8", "encoded", "string", "stru", "into", "a", "list", "of", "characters"], "token": ["list", "(", "stru", ".", "decode", "(", "'utf-8'", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "list(stru.decode('utf-8'))", "decano_code": "list(stru.decode('utf-8'))", "raw_code": "list(stru.decode('utf-8'))", "str_map": {}}
{"src": ["convert", "utf-8", "with", "bom", "string", "s", "to", "utf-8", "with", "no", "bom", "u"], "token": ["u", "=", "s", ".", "decode", "(", "'utf-8-sig'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "u = s.decode('utf-8-sig')", "decano_code": "u = s.decode('utf-8-sig')", "raw_code": "u = s.decode('utf-8-sig')", "str_map": {}}
{"src": ["filter", "model", "_STR:0_", "where", "_STR:1_", "is", "not", "equal", "to", "3", "in", "django"], "token": ["Entry", ".", "objects", ".", "filter", "(", "~", "Q", "(", "id", "=", "3", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "OP", "NAME", "OP", "KEYWORD", "OP", "NUMBER", "OP", "OP"], "cano_code": "Entry.objects.filter(~Q(id=3))", "decano_code": "Entry.objects.filter(~Q(id=3))", "raw_code": "Entry.objects.filter(~Q(id=3))", "str_map": {"Entry": "_STR:0_", "id": "_STR:1_"}}
{"src": ["lookup", "an", "attribute", "in", "any", "scope", "by", "name", "_STR:0_"], "token": ["getattr", "(", "__builtins__", ",", "\" _STR:0_ \"", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "getattr(__builtins__, \" _STR:0_ \")", "decano_code": "getattr(__builtins__, \" _STR:0_ \")", "raw_code": "getattr(__builtins__, 'range')", "str_map": {"range": "_STR:0_"}}
{"src": ["restart", "a", "computer", "after", "900", "seconds", "using", "subprocess"], "token": ["subprocess", ".", "call", "(", "[", "'shutdown'", ",", "'/r'", ",", "'/t'", ",", "'900'", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "subprocess.call(['shutdown', '/r', '/t', '900'])", "decano_code": "subprocess.call(['shutdown', '/r', '/t', '900'])", "raw_code": "subprocess.call(['shutdown', '/r', '/t', '900'])", "str_map": {}}
{"src": ["shutdown", "a", "computer", "using", "subprocess"], "token": ["subprocess", ".", "call", "(", "[", "'shutdown'", ",", "'/s'", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "subprocess.call(['shutdown', '/s'])", "decano_code": "subprocess.call(['shutdown', '/s'])", "raw_code": "subprocess.call(['shutdown', '/s'])", "str_map": {}}
{"src": ["abort", "a", "computer", "shutdown", "using", "subprocess"], "token": ["subprocess", ".", "call", "(", "[", "'shutdown'", ",", "'/a '", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "subprocess.call(['shutdown', '/a '])", "decano_code": "subprocess.call(['shutdown', '/a '])", "raw_code": "subprocess.call(['shutdown', '/a '])", "str_map": {}}
{"src": ["logoff", "computer", "having", "windows", "operating", "system", "using", "python"], "token": ["subprocess", ".", "call", "(", "[", "'shutdown'", ",", "'/l '", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "subprocess.call(['shutdown', '/l '])", "decano_code": "subprocess.call(['shutdown', '/l '])", "raw_code": "subprocess.call(['shutdown', '/l '])", "str_map": {}}
{"src": ["shutdown", "and", "restart", "a", "computer", "running", "windows", "from", "script"], "token": ["subprocess", ".", "call", "(", "[", "'shutdown'", ",", "'/r'", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "subprocess.call(['shutdown', '/r'])", "decano_code": "subprocess.call(['shutdown', '/r'])", "raw_code": "subprocess.call(['shutdown', '/r'])", "str_map": {}}
{"src": ["erase", "the", "contents", "of", "a", "file", "filename"], "token": ["open", "(", "'filename'", ",", "'w'", ")", ".", "close", "(", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "open('filename', 'w').close()", "decano_code": "open('filename', 'w').close()", "raw_code": "open('filename', 'w').close()", "str_map": {}}
{"src": ["how", "to", "erase", "the", "file", "contents", "of", "text", "file", "in", "python", "?"], "token": ["open", "(", "'file.txt'", ",", "'w'", ")", ".", "close", "(", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "open('file.txt', 'w').close()", "decano_code": "open('file.txt', 'w').close()", "raw_code": "open('file.txt', 'w').close()", "str_map": {}}
{"src": ["convert", "dataframe", "df", "to", "list", "of", "dictionaries", "including", "the", "index", "values"], "token": ["df", ".", "to_dict", "(", "'index'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df.to_dict('index')", "decano_code": "df.to_dict('index')", "raw_code": "df.to_dict('index')", "str_map": {}}
{"src": ["create", "list", "of", "dictionaries", "from", "pandas", "dataframe", "df"], "token": ["df", ".", "to_dict", "(", "'records'", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "df.to_dict('records')", "decano_code": "df.to_dict('records')", "raw_code": "df.to_dict('records')", "str_map": {}}
{"src": ["group", "a", "pandas", "data", "frame", "by", "monthly", "frequenct", "m", "using", "groupby"], "token": ["df", ".", "groupby", "(", "pd", ".", "TimeGrouper", "(", "freq", "=", "'M'", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "df.groupby(pd.TimeGrouper(freq='M'))", "decano_code": "df.groupby(pd.TimeGrouper(freq='M'))", "raw_code": "df.groupby(pd.TimeGrouper(freq='M'))", "str_map": {}}
{"src": ["divide", "the", "members", "of", "a", "list", "conversions", "by", "the", "corresponding", "members", "of", "another", "list", "trials"], "token": ["[", "(", "c", "/", "t", ")", "for", "c", ",", "t", "in", "zip", "(", "conversions", ",", "trials", ")", "]"], "type": ["OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "[(c / t) for c, t in zip(conversions, trials)]", "decano_code": "[(c / t) for c, t in zip(conversions, trials)]", "raw_code": "[(c / t) for c, t in zip(conversions, trials)]", "str_map": {}}
{"src": ["sort", "dict", "data", "by", "value"], "token": ["sorted", "(", "data", ",", "key", "=", "data", ".", "get", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "sorted(data, key=data.get)", "decano_code": "sorted(data, key=data.get)", "raw_code": "sorted(data, key=data.get)", "str_map": {}}
{"src": ["sort", "a", "dictionary", "data", "by", "its", "values"], "token": ["sorted", "(", "data", ".", "values", "(", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "sorted(data.values())", "decano_code": "sorted(data.values())", "raw_code": "sorted(data.values())", "str_map": {}}
{"src": ["get", "a", "list", "of", "pairs", "of", "key-value", "sorted", "by", "values", "in", "dictionary", "data"], "token": ["sorted", "(", "list", "(", "data", ".", "items", "(", ")", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "sorted(list(data.items()), key=lambda x: x[1])", "decano_code": "sorted(list(data.items()), key=lambda x: x[1])", "raw_code": "sorted(list(data.items()), key=lambda x: x[1])", "str_map": {}}
{"src": ["sort", "dict", "by", "value", "python"], "token": ["sorted", "(", "list", "(", "data", ".", "items", "(", ")", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "sorted(list(data.items()), key=lambda x: x[1])", "decano_code": "sorted(list(data.items()), key=lambda x: x[1])", "raw_code": "sorted(list(data.items()), key=lambda x: x[1])", "str_map": {}}
{"src": ["display", "current", "time"], "token": ["now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%H:%M:%S'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "now = datetime.datetime.now().strftime('%H:%M:%S')", "decano_code": "now = datetime.datetime.now().strftime('%H:%M:%S')", "raw_code": "now = datetime.datetime.now().strftime('%H:%M:%S')", "str_map": {}}
{"src": ["find", "the", "index", "of", "the", "second", "occurrence", "of", "the", "substring", "bar", "in", "string", "foo bar bar bar"], "token": ["\"\"\"foo bar bar bar\"\"\"", ".", "replace", "(", "'bar'", ",", "'XXX'", ",", "1", ")", ".", "find", "(", "'bar'", ")"], "type": ["STRING", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "\"\"\"foo bar bar bar\"\"\".replace('bar', 'XXX', 1).find('bar')", "decano_code": "\"\"\"foo bar bar bar\"\"\".replace('bar', 'XXX', 1).find('bar')", "raw_code": "\"\"\"foo bar bar bar\"\"\".replace('bar', 'XXX', 1).find('bar')", "str_map": {}}
{"src": ["check", "if", "key", "_STR:0_", "and", "key", "_STR:1_", "are", "presented", "in", "dictionary", "sites"], "token": ["set", "(", "[", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", "]", ")", ".", "issubset", "(", "sites", ")"], "type": ["KEYWORD", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "set([\" _STR:0_ \", \" _STR:1_ \"]).issubset(sites)", "decano_code": "set([\" _STR:0_ \", \" _STR:1_ \"]).issubset(sites)", "raw_code": "set(['stackoverflow', 'google']).issubset(sites)", "str_map": {"stackoverflow": "_STR:0_", "google": "_STR:1_"}}
{"src": ["replace", "string", "_STR:0_", "in", "string", "stuff", "with", "character", "_STR:1_"], "token": ["stuff", ".", "replace", "(", "\" _STR:0_ \"", ",", "\" _STR:1_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP"], "cano_code": "stuff.replace(\" _STR:0_ \", \" _STR:1_ \")", "decano_code": "stuff.replace(\" _STR:0_ \", \" _STR:1_ \")", "raw_code": "stuff.replace(' and ', '/')", "str_map": {" and ": "_STR:0_", "/": "_STR:1_"}}
{"src": ["save", "array", "at", "index", "0", ",", "index", "1", "and", "index", "8", "of", "array", "np", "to", "tmp", "file", "tmp"], "token": ["np", ".", "savez", "(", "tmp", ",", "*", "[", "getarray", "[", "0", "]", ",", "getarray", "[", "1", "]", ",", "getarray", "[", "8", "]", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "np.savez(tmp, *[getarray[0], getarray[1], getarray[8]])", "decano_code": "np.savez(tmp, *[getarray[0], getarray[1], getarray[8]])", "raw_code": "np.savez(tmp, *[getarray[0], getarray[1], getarray[8]])", "str_map": {}}
{"src": ["substract", "1", "hour", "and", "10", "minutes", "from", "current", "time"], "token": ["t", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "(", "t", "-", "datetime", ".", "timedelta", "(", "hours", "=", "1", ",", "minutes", "=", "10", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NEWLINE", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "t = datetime.datetime.now()\n(t - datetime.timedelta(hours=1, minutes=10))", "decano_code": "t = datetime.datetime.now()\n(t - datetime.timedelta(hours=1, minutes=10))", "raw_code": "t = datetime.datetime.now()\n(t - datetime.timedelta(hours=1, minutes=10))", "str_map": {}}
{"src": ["subtract", "1", "hour", "and", "10", "minutes", "from", "time", "object", "t"], "token": ["(", "t", "-", "datetime", ".", "timedelta", "(", "hours", "=", "1", ",", "minutes", "=", "10", ")", ")"], "type": ["OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "(t - datetime.timedelta(hours=1, minutes=10))", "decano_code": "(t - datetime.timedelta(hours=1, minutes=10))", "raw_code": "(t - datetime.timedelta(hours=1, minutes=10))", "str_map": {}}
{"src": ["add", "1", "hour", "and", "2", "minutes", "to", "time", "object", "t"], "token": ["dt", "=", "datetime", ".", "datetime", ".", "combine", "(", "datetime", ".", "date", ".", "today", "(", ")", ",", "t", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP"], "cano_code": "dt = datetime.datetime.combine(datetime.date.today(), t)", "decano_code": "dt = datetime.datetime.combine(datetime.date.today(), t)", "raw_code": "dt = datetime.datetime.combine(datetime.date.today(), t)", "str_map": {}}
{"src": ["subtract", "5", "hours", "from", "the", "time", "object", "dt"], "token": ["dt", "-=", "datetime", ".", "timedelta", "(", "hours", "=", "5", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP"], "cano_code": "dt -= datetime.timedelta(hours=5)", "decano_code": "dt -= datetime.timedelta(hours=5)", "raw_code": "dt -= datetime.timedelta(hours=5)", "str_map": {}}
{"src": ["encode", "string", "data", "using", "hex", "_STR:0_", "encoding"], "token": ["print", "(", "data", ".", "encode", "(", "\" _STR:0_ \"", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "print(data.encode(\" _STR:0_ \"))", "decano_code": "print(data.encode(\" _STR:0_ \"))", "raw_code": "print(data.encode('hex'))", "str_map": {"hex": "_STR:0_"}}
{"src": ["return", "the", "decimal", "value", "for", "each", "hex", "character", "in", "data", "data"], "token": ["print", "(", "' '", ".", "join", "(", "[", "str", "(", "ord", "(", "a", ")", ")", "for", "a", "in", "data", "]", ")", ")"], "type": ["KEYWORD", "OP", "STRING", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "OP", "OP"], "cano_code": "print(' '.join([str(ord(a)) for a in data]))", "decano_code": "print(' '.join([str(ord(a)) for a in data]))", "raw_code": "print(' '.join([str(ord(a)) for a in data]))", "str_map": {}}
{"src": ["get", "all", "the", "items", "from", "a", "list", "of", "tuple", "_STR:0_", "where", "second", "item", "in", "tuple", "is", "_STR:1_", "."], "token": ["[", "x", "for", "x", "in", "l", "if", "x", "[", "1", "]", "==", "1", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NUMBER", "OP", "OP", "NUMBER", "OP"], "cano_code": "[x for x in l if x[1] == 1]", "decano_code": "[x for x in l if x[1] == 1]", "raw_code": "[x for x in l if x[1] == 1]", "str_map": {"l": "_STR:0_", "1": "_STR:1_"}}
{"src": ["create", "array", "a", "containing", "integers", "from", "stdin"], "token": ["a", ".", "fromlist", "(", "[", "int", "(", "val", ")", "for", "val", "in", "stdin", ".", "read", "(", ")", ".", "split", "(", ")", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "OP", "OP", "OP"], "cano_code": "a.fromlist([int(val) for val in stdin.read().split()])", "decano_code": "a.fromlist([int(val) for val in stdin.read().split()])", "raw_code": "a.fromlist([int(val) for val in stdin.read().split()])", "str_map": {}}
{"src": ["place", "_STR:0_", "infront", "of", "each", "non-letter", "char", "in", "string", "line"], "token": ["print", "(", "re", ".", "sub", "(", "'[_%^$]'", ",", "'\\\\\\\\\\\\g<0>'", ",", "line", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP", "OP"], "cano_code": "print(re.sub('[_%^$]', '\\\\\\\\\\\\g<0>', line))", "decano_code": "print(re.sub('[_%^$]', '\\\\\\\\\\\\g<0>', line))", "raw_code": "print(re.sub('[_%^$]', '\\\\\\\\\\\\g<0>', line))", "str_map": {"\\": "_STR:0_"}}
{"src": ["get", "all", "a", "tags", "where", "the", "text", "starts", "with", "value", "some text", "using", "regex"], "token": ["doc", ".", "xpath", "(", "\"//a[starts-with(text(),'some text')]\"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "doc.xpath(\"//a[starts-with(text(),'some text')]\")", "decano_code": "doc.xpath(\"//a[starts-with(text(),'some text')]\")", "raw_code": "doc.xpath(\"//a[starts-with(text(),'some text')]\")", "str_map": {}}
{"src": ["convert", "a", "list", "of", "lists", "a", "into", "list", "of", "tuples", "of", "appropriate", "elements", "form", "nested", "lists"], "token": ["zip", "(", "*", "a", ")"], "type": ["KEYWORD", "OP", "OP", "NAME", "OP"], "cano_code": "zip(*a)", "decano_code": "zip(*a)", "raw_code": "zip(*a)", "str_map": {}}
{"src": ["convert", "a", "list", "of", "strings", "lst", "to", "list", "of", "integers"], "token": ["[", "map", "(", "int", ",", "sublist", ")", "for", "sublist", "in", "lst", "]"], "type": ["OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[map(int, sublist) for sublist in lst]", "decano_code": "[map(int, sublist) for sublist in lst]", "raw_code": "[map(int, sublist) for sublist in lst]", "str_map": {}}
{"src": ["convert", "strings", "in", "list-of-lists", "lst", "to", "ints"], "token": ["[", "[", "int", "(", "x", ")", "for", "x", "in", "sublist", "]", "for", "sublist", "in", "lst", "]"], "type": ["OP", "OP", "KEYWORD", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP"], "cano_code": "[[int(x) for x in sublist] for sublist in lst]", "decano_code": "[[int(x) for x in sublist] for sublist in lst]", "raw_code": "[[int(x) for x in sublist] for sublist in lst]", "str_map": {}}
{"src": ["get", "index", "of", "elements", "in", "array", "a", "that", "occur", "in", "another", "array", "b"], "token": ["np", ".", "where", "(", "np", ".", "in1d", "(", "A", ",", "B", ")", ")", "[", "0", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NUMBER", "OP"], "cano_code": "np.where(np.in1d(A, B))[0]", "decano_code": "np.where(np.in1d(A, B))[0]", "raw_code": "np.where(np.in1d(A, B))[0]", "str_map": {}}
{"src": ["create", "a", "list", "where", "each", "element", "is", "a", "dictionary", "with", "keys", "_STR:0_", "and", "_STR:1_", "and", "values", "corresponding", "to", "each", "value", "in", "the", "lists", "referenced", "by", "keys", "_STR:0_", "and", "_STR:1_", "in", "dictionary", "d"], "token": ["[", "{", "\" _STR:0_ \"", ":", "a", ",", "\" _STR:1_ \"", ":", "b", "}", "for", "a", ",", "b", "in", "zip", "(", "d", "[", "\" _STR:0_ \"", "]", ",", "d", "[", "\" _STR:1_ \"", "]", ")", "]"], "type": ["OP", "OP", "STRING", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP", "OP"], "cano_code": "[{\" _STR:0_ \": a, \" _STR:1_ \": b} for a, b in zip(d[\" _STR:0_ \"], d[\" _STR:1_ \"])]", "decano_code": "[{\" _STR:0_ \": a, \" _STR:1_ \": b} for a, b in zip(d[\" _STR:0_ \"], d[\" _STR:1_ \"])]", "raw_code": "[{'key1': a, 'key2': b} for a, b in zip(d['key1'], d['key2'])]", "str_map": {"key1": "_STR:0_", "key2": "_STR:1_"}}
{"src": ["split", "dictionary", "of", "lists", "into", "list", "of", "dictionaries"], "token": ["map", "(", "dict", ",", "zip", "(", "*", "[", "[", "(", "k", ",", "v", ")", "for", "v", "in", "value", "]", "for", "k", ",", "value", "in", "list", "(", "d", ".", "items", "(", ")", ")", "]", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "OP", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "OP", "OP"], "cano_code": "map(dict, zip(*[[(k, v) for v in value] for k, value in list(d.items())]))", "decano_code": "map(dict, zip(*[[(k, v) for v in value] for k, value in list(d.items())]))", "raw_code": "map(dict, zip(*[[(k, v) for v in value] for k, value in list(d.items())]))", "str_map": {}}
{"src": ["get", "last", "day", "of", "the", "first", "month", "in", "2002"], "token": ["calendar", ".", "monthrange", "(", "2002", ",", "1", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "calendar.monthrange(2002, 1)", "decano_code": "calendar.monthrange(2002, 1)", "raw_code": "calendar.monthrange(2002, 1)", "str_map": {}}
{"src": ["get", "last", "day", "of", "the", "second", "month", "in", "2002"], "token": ["calendar", ".", "monthrange", "(", "2008", ",", "2", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "calendar.monthrange(2008, 2)", "decano_code": "calendar.monthrange(2008, 2)", "raw_code": "calendar.monthrange(2008, 2)", "str_map": {}}
{"src": ["get", "last", "day", "of", "the", "second", "month", "in", "2100"], "token": ["calendar", ".", "monthrange", "(", "2100", ",", "2", ")"], "type": ["NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "calendar.monthrange(2100, 2)", "decano_code": "calendar.monthrange(2100, 2)", "raw_code": "calendar.monthrange(2100, 2)", "str_map": {}}
{"src": ["get", "last", "day", "of", "the", "month", "month", "in", "year", "year"], "token": ["calendar", ".", "monthrange", "(", "year", ",", "month", ")", "[", "1", "]"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP"], "cano_code": "calendar.monthrange(year, month)[1]", "decano_code": "calendar.monthrange(year, month)[1]", "raw_code": "calendar.monthrange(year, month)[1]", "str_map": {}}
{"src": ["get", "last", "day", "of", "the", "second", "month", "in", "year", "2012"], "token": ["monthrange", "(", "2012", ",", "2", ")"], "type": ["NAME", "OP", "NUMBER", "OP", "NUMBER", "OP"], "cano_code": "monthrange(2012, 2)", "decano_code": "monthrange(2012, 2)", "raw_code": "monthrange(2012, 2)", "str_map": {}}
{"src": ["get", "last", "day", "of", "the", "first", "month", "in", "year", "2000"], "token": ["(", "datetime", ".", "date", "(", "2000", ",", "2", ",", "1", ")", "-", "datetime", ".", "timedelta", "(", "days", "=", "1", ")", ")"], "type": ["OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "(datetime.date(2000, 2, 1) - datetime.timedelta(days=1))", "decano_code": "(datetime.date(2000, 2, 1) - datetime.timedelta(days=1))", "raw_code": "(datetime.date(2000, 2, 1) - datetime.timedelta(days=1))", "str_map": {}}
{"src": ["calling", "an", "external", "command", "_STR:0_"], "token": ["from", "subprocess", "import", "call"], "type": ["KEYWORD", "NAME", "KEYWORD", "NAME"], "cano_code": "from subprocess import call", "decano_code": "from subprocess import call", "raw_code": "from subprocess import call", "str_map": {"ls -l": "_STR:0_"}}
{"src": ["calling", "an", "external", "command", "_STR:0_"], "token": ["os", ".", "system", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "os.system(\" _STR:0_ \")", "decano_code": "os.system(\" _STR:0_ \")", "raw_code": "os.system('some_command with args')", "str_map": {"some_command with args": "_STR:0_"}}
{"src": ["calling", "an", "external", "command", "_STR:0_"], "token": ["os", ".", "system", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "os.system(\" _STR:0_ \")", "decano_code": "os.system(\" _STR:0_ \")", "raw_code": "os.system('some_command < input_file | another_command > output_file')", "str_map": {"some_command < input_file | another_command > output_file": "_STR:0_"}}
{"src": ["calling", "an", "external", "command", "_STR:0_"], "token": ["stream", "=", "os", ".", "popen", "(", "\" _STR:0_ \"", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "stream = os.popen(\" _STR:0_ \")", "decano_code": "stream = os.popen(\" _STR:0_ \")", "raw_code": "stream = os.popen('some_command with args')", "str_map": {"some_command with args": "_STR:0_"}}
{"src": ["calling", "an", "external", "command", "_STR:0_"], "token": ["print", "(", "subprocess", ".", "Popen", "(", "\" _STR:0_ \"", ",", "shell", "=", "True", ",", "stdout", "=", "subprocess", ".", "PIPE", ")", ".", "stdout", ".", "read", "(", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "print(subprocess.Popen(\" _STR:0_ \", shell=True, stdout=subprocess.PIPE).stdout.read())", "decano_code": "print(subprocess.Popen(\" _STR:0_ \", shell=True, stdout=subprocess.PIPE).stdout.read())", "raw_code": "print(subprocess.Popen('echo Hello World', shell=True, stdout=subprocess.PIPE).stdout.read())", "str_map": {"echo Hello World": "_STR:0_"}}
{"src": ["calling", "an", "external", "command", "_STR:0_"], "token": ["print", "(", "os", ".", "popen", "(", "\" _STR:0_ \"", ")", ".", "read", "(", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "print(os.popen(\" _STR:0_ \").read())", "decano_code": "print(os.popen(\" _STR:0_ \").read())", "raw_code": "print(os.popen('echo Hello World').read())", "str_map": {"echo Hello World": "_STR:0_"}}
{"src": ["calling", "an", "external", "command", "_STR:0_"], "token": ["return_code", "=", "subprocess", ".", "call", "(", "\" _STR:0_ \"", ",", "shell", "=", "True", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "return_code = subprocess.call(\" _STR:0_ \", shell=True)", "decano_code": "return_code = subprocess.call(\" _STR:0_ \", shell=True)", "raw_code": "return_code = subprocess.call('echo Hello World', shell=True)", "str_map": {"echo Hello World": "_STR:0_"}}
{"src": ["calling", "an", "external", "command", "_STR:0_"], "token": ["p", "=", "subprocess", ".", "Popen", "(", "\" _STR:0_ \"", ",", "shell", "=", "True", ",", "stdout", "=", "subprocess", ".", "PIPE", ",", "stderr", "=", "subprocess", ".", "STDOUT", ")", "\n", "for", "line", "in", "p", ".", "stdout", ".", "readlines", "(", ")", ":", "\n", "    ", "print", "(", "line", ",", "end", "=", "' '", ")", "\n", "", "retval", "=", "p", ".", "wait", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NEWLINE", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NEWLINE", "DEDENT", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "p = subprocess.Popen(\" _STR:0_ \", shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\nfor line in p.stdout.readlines():\n    print(line, end=' ')\nretval = p.wait()", "decano_code": "p = subprocess.Popen(\" _STR:0_ \", shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\nfor line in p.stdout.readlines():\n    print(line, end=' ')\nretval = p.wait()", "raw_code": "p = subprocess.Popen('ls', shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\nfor line in p.stdout.readlines():\n    print(line, end=' ')\nretval = p.wait()", "str_map": {"ls": "_STR:0_"}}
{"src": ["calling", "an", "external", "command", "_STR:0_"], "token": ["call", "(", "[", "'ls'", ",", "'-l'", "]", ")"], "type": ["NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "call(['ls', '-l'])", "decano_code": "call(['ls', '-l'])", "raw_code": "call(['ls', '-l'])", "str_map": {"ls -l": "_STR:0_"}}
{"src": ["decode", "url", "url", "with", "utf8", "and", "print", "it"], "token": ["print", "(", "urllib", ".", "parse", ".", "unquote", "(", "url", ")", ".", "decode", "(", "'utf8'", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "print(urllib.parse.unquote(url).decode('utf8'))", "decano_code": "print(urllib.parse.unquote(url).decode('utf8'))", "raw_code": "print(urllib.parse.unquote(url).decode('utf8'))", "str_map": {}}
{"src": ["decode", "a", "urllib", "escaped", "url", "string", "url", "with", "utf8"], "token": ["url", "=", "urllib", ".", "parse", ".", "unquote", "(", "url", ")", ".", "decode", "(", "'utf8'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "url = urllib.parse.unquote(url).decode('utf8')", "decano_code": "url = urllib.parse.unquote(url).decode('utf8')", "raw_code": "url = urllib.parse.unquote(url).decode('utf8')", "str_map": {}}
{"src": ["delete", "letters", "from", "string", "_STR:0_"], "token": ["\"\"\"\"\"\"", ".", "join", "(", "filter", "(", "str", ".", "isdigit", ",", "\" _STR:0_ \"", ")", ")"], "type": ["STRING", "OP", "NAME", "OP", "KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "OP"], "cano_code": "\"\"\"\"\"\".join(filter(str.isdigit, \" _STR:0_ \"))", "decano_code": "\"\"\"\"\"\".join(filter(str.isdigit, \" _STR:0_ \"))", "raw_code": "\"\"\"\"\"\".join(filter(str.isdigit, '12454v'))", "str_map": {"12454v": "_STR:0_"}}
{"src": ["update", "row", "values", "for", "a", "column", "season", "using", "vectorized", "string", "operation", "in", "pandas"], "token": ["df", "[", "'Season'", "]", ".", "str", ".", "split", "(", "'-'", ")", ".", "str", "[", "0", "]", ".", "astype", "(", "int", ")"], "type": ["NAME", "OP", "STRING", "OP", "OP", "KEYWORD", "OP", "NAME", "OP", "STRING", "OP", "OP", "KEYWORD", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "df['Season'].str.split('-').str[0].astype(int)", "decano_code": "df['Season'].str.split('-').str[0].astype(int)", "raw_code": "df['Season'].str.split('-').str[0].astype(int)", "str_map": {}}
{"src": ["sort", "a", "list", "of", "tuples", "my_list", "by", "second", "parameter", "in", "the", "tuple"], "token": ["my_list", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "my_list.sort(key=lambda x: x[1])", "decano_code": "my_list.sort(key=lambda x: x[1])", "raw_code": "my_list.sort(key=lambda x: x[1])", "str_map": {}}
{"src": ["find", "indexes", "of", "all", "occurrences", "of", "a", "substring", "tt", "in", "a", "string", "ttt"], "token": ["[", "m", ".", "start", "(", ")", "for", "m", "in", "re", ".", "finditer", "(", "'(?=tt)'", ",", "'ttt'", ")", "]"], "type": ["OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "[m.start() for m in re.finditer('(?=tt)', 'ttt')]", "decano_code": "[m.start() for m in re.finditer('(?=tt)', 'ttt')]", "raw_code": "[m.start() for m in re.finditer('(?=tt)', 'ttt')]", "str_map": {}}
{"src": ["find", "all", "occurrences", "of", "a", "substring", "in", "a", "string"], "token": ["[", "m", ".", "start", "(", ")", "for", "m", "in", "re", ".", "finditer", "(", "'test'", ",", "'test test test test'", ")", "]"], "type": ["OP", "NAME", "OP", "NAME", "OP", "OP", "KEYWORD", "NAME", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "[m.start() for m in re.finditer('test', 'test test test test')]", "decano_code": "[m.start() for m in re.finditer('test', 'test test test test')]", "raw_code": "[m.start() for m in re.finditer('test', 'test test test test')]", "str_map": {}}
{"src": ["split", "string", "s", "based", "on", "white", "spaces"], "token": ["re", ".", "findall", "(", "'\\\\s+|\\\\S+'", ",", "s", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "re.findall('\\\\s+|\\\\S+', s)", "decano_code": "re.findall('\\\\s+|\\\\S+', s)", "raw_code": "re.findall('\\\\s+|\\\\S+', s)", "str_map": {}}
{"src": ["set", "columns", "['race_date', 'track_code', 'race_number'", "]", "as", "indexes", "in", "dataframe", "rdata"], "token": ["rdata", ".", "set_index", "(", "[", "'race_date'", ",", "'track_code'", ",", "'race_number'", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "rdata.set_index(['race_date', 'track_code', 'race_number'])", "decano_code": "rdata.set_index(['race_date', 'track_code', 'race_number'])", "raw_code": "rdata.set_index(['race_date', 'track_code', 'race_number'])", "str_map": {}}
{"src": ["recursively", "go", "through", "all", "subdirectories", "and", "files", "in", "rootdir"], "token": ["for", "(", "root", ",", "subFolders", ",", "files", ")", "in", "os", ".", "walk", "(", "rootdir", ")", ":", "\n", "    ", "pass", ""], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NEWLINE", "INDENT", "KEYWORD", "DEDENT"], "cano_code": "for (root, subFolders, files) in os.walk(rootdir):\n    pass", "decano_code": "for (root, subFolders, files) in os.walk(rootdir):\n    pass", "raw_code": "for (root, subFolders, files) in os.walk(rootdir):\n    pass", "str_map": {}}
{"src": ["sort", "a", "list", "of", "dictionary", "values", "by", "_STR:0_", "in", "reverse", "order"], "token": ["list", ".", "sort", "(", "key", "=", "lambda", "item", ":", "item", "[", "\" _STR:0_ \"", "]", ",", "reverse", "=", "True", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "list.sort(key=lambda item: item[\" _STR:0_ \"], reverse=True)", "decano_code": "list.sort(key=lambda item: item[\" _STR:0_ \"], reverse=True)", "raw_code": "list.sort(key=lambda item: item['date'], reverse=True)", "str_map": {"date": "_STR:0_"}}
{"src": ["display", "first", "5", "characters", "of", "string", "_STR:0_"], "token": ["\"\"\"{:.5}\"\"\"", ".", "format", "(", "\" _STR:0_ \"", ")"], "type": ["STRING", "OP", "KEYWORD", "OP", "STRING", "OP"], "cano_code": "\"\"\"{:.5}\"\"\".format(\" _STR:0_ \")", "decano_code": "\"\"\"{:.5}\"\"\".format(\" _STR:0_ \")", "raw_code": "\"\"\"{:.5}\"\"\".format('aaabbbccc')", "str_map": {"aaabbbccc": "_STR:0_"}}
{"src": ["unpack", "hexadecimal", "string", "s", "to", "a", "list", "of", "integer", "values"], "token": ["struct", ".", "unpack", "(", "'11B'", ",", "s", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "struct.unpack('11B', s)", "decano_code": "struct.unpack('11B', s)", "raw_code": "struct.unpack('11B', s)", "str_map": {}}
{"src": ["finding", "the", "index", "of", "an", "item", "_STR:0_", "given", "a", "list", "['foo', 'bar', 'baz'", "]", "containing", "it"], "token": ["[", "i", "for", "i", ",", "j", "in", "enumerate", "(", "[", "\" _STR:0_ \"", ",", "'bar'", ",", "'baz'", "]", ")", "if", "j", "==", "\" _STR:0_ \"", "]"], "type": ["OP", "NAME", "KEYWORD", "NAME", "OP", "NAME", "KEYWORD", "KEYWORD", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP", "KEYWORD", "NAME", "OP", "STRING", "OP"], "cano_code": "[i for i, j in enumerate([\" _STR:0_ \", 'bar', 'baz']) if j == \" _STR:0_ \"]", "decano_code": "[i for i, j in enumerate([\" _STR:0_ \", 'bar', 'baz']) if j == \" _STR:0_ \"]", "raw_code": "[i for i, j in enumerate(['foo', 'bar', 'baz']) if j == 'foo']", "str_map": {"foo": "_STR:0_"}}
{"src": ["generate", "all", "permutations", "of", "list", "[1, 2, 3", "]", "and", "list", "[4, 5, 6", "]"], "token": ["print", "(", "list", "(", "itertools", ".", "product", "(", "[", "1", ",", "2", ",", "3", "]", ",", "[", "4", ",", "5", ",", "6", "]", ")", ")", ")"], "type": ["KEYWORD", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP", "OP", "OP"], "cano_code": "print(list(itertools.product([1, 2, 3], [4, 5, 6])))", "decano_code": "print(list(itertools.product([1, 2, 3], [4, 5, 6])))", "raw_code": "print(list(itertools.product([1, 2, 3], [4, 5, 6])))", "str_map": {}}
{"src": ["generate", "all", "permutations", "of", "a", "list", "[1, 2, 3", "]"], "token": ["itertools", ".", "permutations", "(", "[", "1", ",", "2", ",", "3", "]", ")"], "type": ["NAME", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "itertools.permutations([1, 2, 3])", "decano_code": "itertools.permutations([1, 2, 3])", "raw_code": "itertools.permutations([1, 2, 3])", "str_map": {}}
{"src": ["substitute", "occurrences", "of", "unicode", "regex", "pattern", "u'\\\\p{P}+", "'", "with", "empty", "string", "_STR:0_", "in", "string", "text"], "token": ["return", "re", ".", "sub", "(", "'\\\\p{P}+'", ",", "\" _STR:0_ \"", ",", "text", ")"], "type": ["KEYWORD", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "return re.sub('\\\\p{P}+', \" _STR:0_ \", text)", "decano_code": "return re.sub('\\\\p{P}+', \" _STR:0_ \", text)", "raw_code": "return re.sub('\\\\p{P}+', '', text)", "str_map": {"": "_STR:0_"}}
{"src": ["manually", "throw/raise", "a", "ValueError", "exception", "with", "the", "message", "_STR:0_"], "token": ["raise", "ValueError", "(", "\" _STR:0_ \"", ")"], "type": ["KEYWORD", "NAME", "OP", "STRING", "OP"], "cano_code": "raise ValueError(\" _STR:0_ \")", "decano_code": "raise ValueError(\" _STR:0_ \")", "raw_code": "raise ValueError('A very specific bad thing happened')", "str_map": {"A very specific bad thing happened": "_STR:0_"}}
{"src": ["throw", "an", "exception", "_STR:0_"], "token": ["raise", "Exception", "(", "\" _STR:0_ \"", ")"], "type": ["KEYWORD", "NAME", "OP", "STRING", "OP"], "cano_code": "raise Exception(\" _STR:0_ \")", "decano_code": "raise Exception(\" _STR:0_ \")", "raw_code": "raise Exception('I know Python!')", "str_map": {"I know Python!": "_STR:0_"}}
{"src": ["manually", "throw", "an", "exception", "_STR:0_"], "token": ["raise", "Exception", "(", "\" _STR:0_ \"", ")"], "type": ["KEYWORD", "NAME", "OP", "STRING", "OP"], "cano_code": "raise Exception(\" _STR:0_ \")", "decano_code": "raise Exception(\" _STR:0_ \")", "raw_code": "raise Exception('I know python!')", "str_map": {"I know python!": "_STR:0_"}}
{"src": ["throw", "a", "ValueError", "with", "message", "_STR:0_"], "token": ["raise", "ValueError", "(", "\" _STR:0_ \"", ")"], "type": ["KEYWORD", "NAME", "OP", "STRING", "OP"], "cano_code": "raise ValueError(\" _STR:0_ \")", "decano_code": "raise ValueError(\" _STR:0_ \")", "raw_code": "raise ValueError('represents a hidden bug, do not catch this')", "str_map": {"represents a hidden bug, do not catch this": "_STR:0_"}}
{"src": ["throw", "an", "exception", "with", "message", "_STR:0_"], "token": ["raise", "Exception", "(", "\" _STR:0_ \"", ")"], "type": ["KEYWORD", "NAME", "OP", "STRING", "OP"], "cano_code": "raise Exception(\" _STR:0_ \")", "decano_code": "raise Exception(\" _STR:0_ \")", "raw_code": "raise Exception('This is the exception you expect to handle')", "str_map": {"This is the exception you expect to handle": "_STR:0_"}}
{"src": ["throw", "a", "value", "error", "with", "message", "_STR:0_", ",", "_STR:1_", ",", "_STR:2_", ",", "_STR:3_"], "token": ["raise", "ValueError", "(", "\" _STR:0_ \"", ")"], "type": ["KEYWORD", "NAME", "OP", "STRING", "OP"], "cano_code": "raise ValueError(\" _STR:0_ \")", "decano_code": "raise ValueError(\" _STR:0_ \")", "raw_code": "raise ValueError('A very specific bad thing happened')", "str_map": {"A very specific bad thing happened": "_STR:0_", "foo": "_STR:1_", "bar": "_STR:2_", "baz": "_STR:3_"}}
{"src": ["throw", "a", "runtime", "error", "with", "message", "_STR:0_"], "token": ["raise", "RuntimeError", "(", "\" _STR:0_ \"", ")"], "type": ["KEYWORD", "NAME", "OP", "STRING", "OP"], "cano_code": "raise RuntimeError(\" _STR:0_ \")", "decano_code": "raise RuntimeError(\" _STR:0_ \")", "raw_code": "raise RuntimeError('specific message')", "str_map": {"specific message": "_STR:0_"}}
{"src": ["throw", "an", "assertion", "error", "with", "message", "_STR:0_", ",", "distance"], "token": ["raise", "AssertionError", "(", "\" _STR:0_ \"", ",", "distance", ")"], "type": ["KEYWORD", "NAME", "OP", "STRING", "OP", "NAME", "OP"], "cano_code": "raise AssertionError(\" _STR:0_ \", distance)", "decano_code": "raise AssertionError(\" _STR:0_ \", distance)", "raw_code": "raise AssertionError(\"Unexpected value of 'distance'!\", distance)", "str_map": {"Unexpected value of 'distance'!": "_STR:0_"}}
{"src": ["if", "selenium", "textarea", "element", "foo", "is", "not", "empty", ",", "clear", "the", "field"], "token": ["driver", ".", "find_element_by_id", "(", "'foo'", ")", ".", "clear", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "driver.find_element_by_id('foo').clear()", "decano_code": "driver.find_element_by_id('foo').clear()", "raw_code": "driver.find_element_by_id('foo').clear()", "str_map": {}}
{"src": ["clear", "text", "from", "textarea", "_STR:0_", "with", "selenium"], "token": ["driver", ".", "find_element_by_id", "(", "\" _STR:0_ \"", ")", ".", "clear", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "driver.find_element_by_id(\" _STR:0_ \").clear()", "decano_code": "driver.find_element_by_id(\" _STR:0_ \").clear()", "raw_code": "driver.find_element_by_id('foo').clear()", "str_map": {"foo": "_STR:0_"}}
{"src": ["convert", "a", "number", "2130706433", "to", "ip", "string"], "token": ["socket", ".", "inet_ntoa", "(", "struct", ".", "pack", "(", "'!L'", ",", "2130706433", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "NUMBER", "OP", "OP"], "cano_code": "socket.inet_ntoa(struct.pack('!L', 2130706433))", "decano_code": "socket.inet_ntoa(struct.pack('!L', 2130706433))", "raw_code": "socket.inet_ntoa(struct.pack('!L', 2130706433))", "str_map": {}}
{"src": ["rearrange", "the", "columns", "_STR:0_", ",'b','x','y", "'", "of", "pandas", "DataFrame", "df", "in", "mentioned", "sequence", "_STR:1_", ",'y','a", "'", ",'b", "'"], "token": ["df", "=", "df", "[", "[", "\" _STR:1_ \"", ",", "'y'", ",", "\" _STR:0_ \"", ",", "'b'", "]", "]"], "type": ["NAME", "OP", "NAME", "OP", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "STRING", "OP", "OP"], "cano_code": "df = df[[\" _STR:1_ \", 'y', \" _STR:0_ \", 'b']]", "decano_code": "df = df[[\" _STR:1_ \", 'y', \" _STR:0_ \", 'b']]", "raw_code": "df = df[['x', 'y', 'a', 'b']]", "str_map": {"a": "_STR:0_", "x": "_STR:1_"}}
{"src": ["call", "base", "class", "'", "s", "__init_", "_", "method", "from", "the", "child", "class", "ChildClass"], "token": ["super", "(", "ChildClass", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP", "NAME", "OP", "OP", "NAME", "OP"], "cano_code": "super(ChildClass, self).__init__(*args, **kwargs)", "decano_code": "super(ChildClass, self).__init__(*args, **kwargs)", "raw_code": "super(ChildClass, self).__init__(*args, **kwargs)", "str_map": {}}
{"src": ["sum", "of", "all", "values", "in", "a", "python", "dict", "d"], "token": ["sum", "(", "d", ".", "values", "(", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "sum(d.values())", "decano_code": "sum(d.values())", "raw_code": "sum(d.values())", "str_map": {}}
{"src": ["sum", "of", "all", "values", "in", "a", "python", "dict"], "token": ["sum", "(", "d", ".", "values", "(", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP"], "cano_code": "sum(d.values())", "decano_code": "sum(d.values())", "raw_code": "sum(d.values())", "str_map": {}}
{"src": ["convert", "python", "dictionary", "your_data", "to", "json", "array"], "token": ["json", ".", "dumps", "(", "your_data", ",", "ensure_ascii", "=", "False", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP"], "cano_code": "json.dumps(your_data, ensure_ascii=False)", "decano_code": "json.dumps(your_data, ensure_ascii=False)", "raw_code": "json.dumps(your_data, ensure_ascii=False)", "str_map": {}}
{"src": ["assign", "an", "array", "of", "floats", "in", "range", "from", "0", "to", "100", "to", "a", "variable", "values"], "token": ["values", "=", "np", ".", "array", "(", "[", "i", "for", "i", "in", "range", "(", "100", ")", "]", ",", "dtype", "=", "np", ".", "float64", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "OP", "NAME", "KEYWORD", "NAME", "KEYWORD", "KEYWORD", "OP", "NUMBER", "OP", "OP", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "values = np.array([i for i in range(100)], dtype=np.float64)", "decano_code": "values = np.array([i for i in range(100)], dtype=np.float64)", "raw_code": "values = np.array([i for i in range(100)], dtype=np.float64)", "str_map": {}}
{"src": ["sort", "a", "list", "of", "dictionaries", "list_of_dct", "by", "values", "in", "an", "order", "order"], "token": ["sorted", "(", "list_of_dct", ",", "key", "=", "lambda", "x", ":", "order", ".", "index", "(", "list", "(", "x", ".", "values", "(", ")", ")", "[", "0", "]", ")", ")"], "type": ["KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "NAME", "OP", "NAME", "OP", "NAME", "OP", "KEYWORD", "OP", "NAME", "OP", "NAME", "OP", "OP", "OP", "OP", "NUMBER", "OP", "OP", "OP"], "cano_code": "sorted(list_of_dct, key=lambda x: order.index(list(x.values())[0]))", "decano_code": "sorted(list_of_dct, key=lambda x: order.index(list(x.values())[0]))", "raw_code": "sorted(list_of_dct, key=lambda x: order.index(list(x.values())[0]))", "str_map": {}}
{"src": ["change", "the", "case", "of", "the", "first", "letter", "in", "string", "s"], "token": ["return", "s", "[", "0", "]", ".", "upper", "(", ")", "+", "s", "[", "1", ":", "]"], "type": ["KEYWORD", "NAME", "OP", "NUMBER", "OP", "OP", "NAME", "OP", "OP", "OP", "NAME", "OP", "NUMBER", "OP", "OP"], "cano_code": "return s[0].upper() + s[1:]", "decano_code": "return s[0].upper() + s[1:]", "raw_code": "return s[0].upper() + s[1:]", "str_map": {}}
{"src": ["join", "list", "of", "numbers", "[1,2,3,4] ", "to", "string", "of", "numbers", "."], "token": ["\"\"\"\"\"\"", ".", "join", "(", "[", "1", ",", "2", ",", "3", ",", "4", "]", ")"], "type": ["STRING", "OP", "NAME", "OP", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "NUMBER", "OP", "OP"], "cano_code": "\"\"\"\"\"\".join([1, 2, 3, 4])", "decano_code": "\"\"\"\"\"\".join([1, 2, 3, 4])", "raw_code": "\"\"\"\"\"\".join([1, 2, 3, 4])", "str_map": {}}
{"src": ["delete", "every", "non", "utf-8", "characters", "from", "a", "string", "line"], "token": ["line", "=", "line", ".", "decode", "(", "'utf-8'", ",", "'ignore'", ")", ".", "encode", "(", "'utf-8'", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "STRING", "OP", "OP", "NAME", "OP", "STRING", "OP"], "cano_code": "line = line.decode('utf-8', 'ignore').encode('utf-8')", "decano_code": "line = line.decode('utf-8', 'ignore').encode('utf-8')", "raw_code": "line = line.decode('utf-8', 'ignore').encode('utf-8')", "str_map": {}}
{"src": ["execute", "a", "command", "command ", "in", "the", "terminal", "from", "a", "python", "script"], "token": ["os", ".", "system", "(", "command", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP"], "cano_code": "os.system(command)", "decano_code": "os.system(command)", "raw_code": "os.system(command)", "str_map": {}}
{"src": ["MySQL", "execute", "query", "_STR:0_", "with", "parameters", "param1", "and", "param2"], "token": ["c", ".", "execute", "(", "\" _STR:0_ \"", ",", "(", "param1", ",", "param2", ")", ")"], "type": ["NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "NAME", "OP", "OP"], "cano_code": "c.execute(\" _STR:0_ \", (param1, param2))", "decano_code": "c.execute(\" _STR:0_ \", (param1, param2))", "raw_code": "c.execute('SELECT * FROM foo WHERE bar = %s AND baz = %s', (param1, param2))", "str_map": {"SELECT * FROM foo WHERE bar = %s AND baz = %s": "_STR:0_"}}
{"src": ["parse", "string", "datestr", "into", "a", "datetime", "object", "using", "format", "pattern", "_STR:0_"], "token": ["dateobj", "=", "datetime", ".", "datetime", ".", "strptime", "(", "datestr", ",", "\" _STR:0_ \"", ")", ".", "date", "(", ")"], "type": ["NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "NAME", "OP", "STRING", "OP", "OP", "NAME", "OP", "OP"], "cano_code": "dateobj = datetime.datetime.strptime(datestr, \" _STR:0_ \").date()", "decano_code": "dateobj = datetime.datetime.strptime(datestr, \" _STR:0_ \").date()", "raw_code": "dateobj = datetime.datetime.strptime(datestr, '%Y-%m-%d').date()", "str_map": {"%Y-%m-%d": "_STR:0_"}}
