  call the function os.path.dirname with an argument django.__file__, join the result into a path,
  raise an ValueError exception with an argument string 'Unable to add handler %r: %s' formated with h and e.
  substitute the datetime.max for exp.
  if content is an instance of a EmailMessage class,
  raise an TemplateDoesNotExist exception with an argument name.
  divide j by integer 7, substitute the floored result for week_number.
  value under the 'primary_key' key of the extra_params dictionary is boolean True,
  self.cleaned_data is an empty dictionary.
  evaluate next boolean expression, value of converter function with opts.db_table as argument is contained in tables,
  errors is an empty list.
  if error is not an instance of ValidationError,
  new_method_proxy, __class__ is an property object created with previous result as an argument.   call the function new_method_proxy with an argument operator.eq, substitute the result for __eq__.
  field_type is a string 'NullBooleanField('
  from django.utils import six into default name space.
  call the method parser.next_token, substitute the result for token.
  return boolean False.
  derive the class SplitHiddenDateTimeWidget from the SplitDateTimeWidget base class.
  if callback is an instance of functools.partial object,
  raise an exception parser.error_class with an argument string "Not expecting '%s' in this position in if tag.",
  translators_comment_start is None.
  call the method self.fetch_command with first element of cwords as an argument, substitute it for subcommand_cls.
  call the function call_command with 2 arguments: string migrate and unpacked dictionary options.
  if html_message is True,
  return self._size.
  _func_globals is a string "__globals__".
  join elements of output into a string, return the result.
  if opts.model is true,
  slice the filename from the previous result as start index to the end, strip it of white spaces from both ends,   if the result is not an empty string and filename is not an empty string, return boolean True, otherwise return boolean False.   define the method _close_files with an argument self.
  call the method self.clear_cdata_mode.
  if elt is an instance of Group class,
  mapped with a function k, for every k and v in return value of the method candidate_subs.items.   format candidate_pat with candidate_subs, return the result.
  if call to the function _samefile with old_file_name and new_file_name evaluates to boolean True,
  write a new line to the self.stream file stream.
  substitute origin for self.origin.
  doublecolon_len is an integer 0.
  call the function _explode_shorthand_ip_string with an argument ip_str, substitute the result for ip_str.
  try,
  if new_name ends with a string '_',
  bring integer 36 to the power of factor, substitute the result for j.
  html set to boolean True and truncate set to string ' ...', return the result.   decorator function register.filter with an argument is_safe set to boolean False.
  substitute length for self._remaining.
  define the method render with 2 arguments: self and context.
  fks_to_parent is a list containing f for every f in opts.fields, only if f is an instance of ForeignKey,
  return value under the alias key of self._caches.caches dictionary.
  substitute self.max_value for the value under the 'max' key of the attrs dictionary.
  call the method __init__ from the base class of the class MultiValueDict, with an argument key_to_list_mapping.
  call the __init__ method with an argument name from the base class of the MovedModule class.
  if not,
  from django.utils.functional import allow_lazy into default name space.
  if HTMLParseError or UnboundLocalError exceptions are caught,
  value is None.
  derive the class SafeBytes from bytes and SafeData base classes.
  derive the class ChoiceField from the base class Field class.
  from django.forms.formsets import BaseFormSet and formset_factory into default name space.
  substitute params without the first element for params.
  return boolean True, otherwise return boolean False.   define private method __ne__ with self class instance and other as arguments.
  return filter_func.
  append ch to result.
  return result converted into an integer.   if not,
  join self.file_path and fname into a valid file path, substitute it for self._fname.
  if field PY2 of the module six is boolean True,
  for every name in bits from the start index 1 to the end index negative 2,
  get 'value' attribute of the _prefixes, if it exists, return it, otherwise return '/'.
  from django.utils.functional import cached_property into default name space.
  if unpack is true,
  if not,
  derive the class BadSignature from the Exception base class.
  from django.utils.encoding import python_2_unicode_compatible into default name space.
  return self.msg formatted with a tuple, with elements generated from return value of the function force_text with 2 arguments:
  if settings.configured,
  call the method self._iteritems, for every k and v in the result,
  import module warnings.
  context_extras is an empty dictionary.
  if current_app and is true and current_app is contained in app_list,
  label set to return value of the function _ called with an string 'Delete' and required as boolean False.   define the method add_prefix with an argument self.
  define the method __iter__ with an argument self.
  call the method handler.addQuickElement with 2 arguments: string 'uri' and value under the 'author_link' key of the self.feed dictionary.
  "%r is not a valid date" formated with date and third element of the result of the function sys.exc_info.   define the function parse_http_date_safe an argument date.
  if filter_func has an attribute "_decorated_function",
  from django.utils.encoding import smart_text, force_str and force_text into default name space.
  from django.core.exceptions import ValidationError and NON_FIELD_ERRORS into default name space.
  for every dict_ in self.dicts,
  yield one element of line iterable.
  get the value under the 'exclude' key of the options dictionary, substitute the result for exclude.
  define the method __init__ with 3 arguments: self, schemes set to None and unpacked dictionary kwargs.
  call the function ugettext with an argument string "%s GB", substitute '%s' with the result of the call to the function,
  if six.text_type is contained in resultclasses, cls._delegate_text is boolean True, otherwise it is boolean False.
  option is a string '--testrunner='.
  call the function isabs with an argument path, if it evaluates to false,
  call the method parser.add_argument with arguments: string '--database', action set to string 'store', dest set to string 'database',
  substitute obj for the value of the memo dictionary at the identity of the self object key.
  define the method setdefault with 3 arguments: self, key and default set to None.
  for every form in self call the form.as_table method, join the results in a string, separated by an empty string.
  for every character in name,
  substitute '%s' in the string '\n%s:\n%s\n', with group_name and formatted, substitute the result for msg.
  call the method match.group with an argument integer 0, return the result.
  define the method __bytes_cast with an argument self.
  tuple with 3 elements: strings '%H:%M:%S', '%H:%M:%S.%f' and '%H:%M' for 'TIME_INPUT_FORMATS',   tuple with 4 elements: strings '%Y-%m-%d %H:%M:%S', '%Y-%m-%d %H:%M:%S.%f', '%Y-%m-%d %H:%M' and '%Y-%m-%d' for 'DATETIME_INPUT_FORMATS'.   define the function reset_format_cache.
  call the method context.push with unpacked dictionary values as an argument, with the result perform,
  contextlib.contextmanager decorator,
  call the function re.compile with raw string '&(?!(\w+|#\d+);)', substitute the result for unencoded_ampersands_re.
  evaluate the method connections[db].ops.cache_key_culling_sql, evaluate the result by table modulus, call the method cursor.execute,
  'Database state will be brought to the state after that migration.' as arguments.   call the method parser.add_argument with string '--noinput', action containing string 'store_false', dest set to string 'interactive',
  derive the LabelCommand class from the BaseCommand base class.
  if attrs is false, make it an empty dictionary.
  for every check in checks,
  if not,
  status_code is an integer 404.
  if not,
  call the method cursor.execute with sql as argument.
  define the function cycle with 2 arguments: parser and token.
  call the function lazy with 2 arguments: func and unpacked list resultclasses, call the result with 2 arguments: unpacked list args,
  substitute second element of elt for param.
  raise an TemplateSyntaxError exception with an argument string "'%s' cannot appear more than once in the same template",
  try,
  join app_dir and string 'sql' into a file path, use the result as an argument for the call to the function os.path.normpath,
  raise CommandError exception with "App '%s' does not have migrations (you cannot selectively sync unmigrated apps)",
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  if p_pattern starts with a string '^',
  call the method cursor.execute with an argument line.
  call the function force_bytes with an argument password, substitute the result for password.
  yield buf as return value of the generator.
  call the method timezone.tzname with an argument None, return the result.
  for every path in collect,
  substitute opts for value under the 'opts' key of definition dictionary.
  raise an base.DeserializationError exception with string "<field> node is missing the 'name' attribute" as argument.
  if sent is true,
  define the method inner with 2 arguments: self and unpacked list args.
  try,
  call the options.get method with string 'CULL_FREQUENCY' and integer 3 as arguments, use the string 'cull_frequency' and previous result as the arguments for the call to the params.get method, substitute the result for cull_frequency.
  call the method params.get with 2 arguments, string 'KEY_FUNCTION' and None, use the result as the argument for the call to the function get_key_func, substitute the result for the self.key_func.
  define the method utcoffset with 2 arguments: self and dt.
  define the method add_arguments with 2 arguments self and parser.
  call the method handler.addQuickElement with 3 arguments: string 'summary', value under the 'description' key of item dictionary,
  derive the class RendererMixin from the object base class.
  do nothing,
  ch is None.
  try,
  pad the rest of the field with bytes string '=', use the result as an argument for the call to the method base64.urlsafe_b64decode,   return the result.   if LookupError or BinasciiError, renamed to e, exceptions are caught.
  substitute new_args for result_args.
  paths is a list containing results of the function force_text called with an argument p, for every p in paths.
  app_configs is a list containing app_config.
  if event equals a string "START_ELEMENT" and node.nodeName equals a string 'object',
  if data is None,
  import module tempfile.
  substitute target_var for self.target_var.
  if not an empty string, and truncate, return the result.   return text.
  if length of bits is greater than integer 2,
  try,
  define the method __init__ with 2 arguments: self and language.
  define the method j with an argument self.
  call the method related.natural_key, substitute the result for value.
  if ch is contained in string '*?+',
  call the method transaction.get_autocommit with an argument self.using, if it evaluates to true,
  call the method __init__ from the base class of the class TemplateIfParser, with 2 arguments: unpacked list args and unpacked dictionary.
  use it as an argument for the call to the method self.style.MIGRATE_HEADING, write the result to self.stdout.   for every operation in migration.merged_operations,
  where '%s' is replaced with taglib_module.   templatetags_modules is an empty list.
  if AttributeError exception is caught,
  for every field in concrete_model._meta.local_fields,
  dest set to string 'verbosity', default set to string '1', type set to int, choices is a list, containing integers: 0, 1, 2 and 3,   call the method parser.add_option with 2 arguments: string '--settings' and help as a string 'The Python path to a settings module,  e.g. "myproject.settings.main". If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.'
  import module random as random_module.
  if construct is true,
  if limit_choices_to is not None,
  extend collect list with settings.TEMPLATE_CONTEXT_PROCESSORS.
  self.connection is None.
  open new_path file in 'wb' mode, with file descriptor renamed to new_file,
  from django.utils import six into default name space.
  define the method validate_unique with an argument self.
  for every base in new_class.__mro__ in reversed order,
  from django.utils.encoding import force_bytes and python_2_unicode_compatible into default name space.
  raise an NotImplementedError exception with argument string "This backend doesn't support absolute paths.".
  max_num is integer 1.
  call the method self.setlist with 2 arguments: key and default_list.
  call the exp.replace with microsecond set to integer 0, substitute the result for exp.
  where '%s' is replaced by lookup_view.   try,
  if not,
  return text.
  import module datetime.
  get 'Meta' attribute from form object, if it exists substitute it for meta, if not meta is None.
  call the method self.connection.quit.
  raise the exception ValueError, with string as argument, "@python_2_unicode_compatible cannot be applied",
  substitute form.cleaned_data for cleaned_data.
  define the method setdefault with 3 arguments: self, key and default.
  from django.utils.encoding import force_text and python_2_unicode_compatible into default name space.
  define the method send_messages with arguments self and email_message.
  otherwise if formfield_callback is not callable object,
  call the method parser.parse, substitute the result for nodelist.
  increment doublecolon_len by integer 1,
  call the function _urlize with 4 arguments: value, trim_url_limit as limit converted into an integer, nofollow as boolean True,
  try,
  get name attribute from the instance object, call it and return the result.
  substitute base for self.base.
  define the function module_has_submodule with 2 arguments: package and module_name.
  decrement date.month by integer 1, use the result as an key to obtain the value from the months dictionary, substitute it for month.
  do nothing.
  raise an exception parser.error_class with an argument string "Not expecting '%s' as infix operator in if tag.",
  bring integer 36 to the power of factor, if i is smaller than the result,
  define the method __str__ with argument self.
  substitute arg converted into an integer for length.
  if m is false,
  get the '_decorated_function' attribute from func object, if it exists substitute it for func.
  call the method parser.add_argument with 5 arguments: string '--tag', string '-t', action set to string 'append',
  set the file position pointer at file_pos.
  old_style_list is boolean True.
  delete the attribute name from the cache dictionary under the DEFAULT_CACHE_ALIAS key.
  define the method __enter__ with argument self.
  if self.count equals a integer 0 and self.allow_empty_first_page is false,
  ingeter 0 and integer 0.   call the method _time.mktime with an argument tt, substitute the result for stamp.
  can_order as can_order, can_delete as can_delete, validate_min as validate_min, validate_max as validate_max,   substitute the result for form.   substitute model for FormSet.model.
  from django.conf.locale import LANG_INFO.
  kwargs is an empty dictionary.
  derive the class TokenParser form the base class object.
  get the values under the keys 'app_label' and 'migration_name' of the options dictionary, substitute the results for app_label and migration_name, respectively.
  decorator function register.filter with an argument is_safe set to boolean False.
  for every name in filters,
  return __wrapper__.
  call the function number_format with an argument value, return the result.
  append model to model_list.
  substitute HTMLParser from the module _html_parser for HTMLParser.
  try,
  write string "Cleaning up temporary files.\n" to self.stdout stream.
  call the method os.environ.copy, substitute the result for new_environ.
  if not,
  if TypeError exception is caught,
  exception_middleware is an empty list.
  return attrs.
  substitute x for k and boolean True for v.
  call the method self._cache.disconnect_all.
  if TYPE equals to RAW,
  return an empty string.
  if props is true,
  write new line to the self.stream file stream.
  call the function mark_safe with an argument value, return the result.
  if self doesnt have '_queryset' attribute,
  import module datetime.
  otherwise if self.object is an instance of the models.base.ModelBase class,
  call the function import_library with an argument module, append the result to builtins.
  re raise an exception.
  evaluate the logic expression, plat does not equals to string 'Pocket PC', and plat does not equals to string 'win32'
  if e has an attribute 'code' and e.code is contained in self.error_messages,
  SINGLE_BRACE_START is a string '{'.
  if not,
  return None.
  define the function lazy_number with 4 arguments: func, resultclass, number set to None and unpacked dictionary kwargs.
  split dotted_path into two parts from the right at the '.' character, assign the result to module_path and class_name, respectively.
  if ImportError exception is caught,
  if LookupError exception is caught,
  only if app_configs is None ot model._meta.app_config is contained in app_configs, error is a list containing all the previous elements.   chain all errors elements into a list, return it.
  called with an argument w, and sub_widgets as an empty string, append the result to output.   call the function format_html with 3 arguments: self.outer_html,
  call the method app.rpartition with an argument '.', substitute last element of the result for app.
  substitute pickled for value under the key key of self._cache dictionary.
  if field_desc doesnt end with '(',
  remove first element from self.tokens, return removed element.
  from django.utils import six into default name space.
  self.filters is an empty dictionary.
  from django.utils import six and lru_cache into default name space.
  define the method content with 2 arguments: self and value.
  call the method serializers.serialize with 6 arguments: format, result of the function get_objects, indent set to indent,
  substitute '%s' in string '%s-%s-%s' with y, m and d, return the result.
  call the method __copy__ with an argument unpacked list self.dicts, return the result.
  if not,
  from django.db import models and DEFAULT_DB_ALIAS into default name space.
  if data_list is true,
  and code set to string 'invalid'.   decorator deconstructible,
  if not,
  substitute message for self.message.
  if 'require_all_fields' key of the kwargs dictionary exists remove it and substitute its value for self.require_all_fields,
  use_null_fallback is boolean False.
  if ValueError exception is caught,
  default set to None and help set to string 'Overrides the default address where the live server (used '  'with LiveServerTestCase) is expected to run from. The default value is localhost:8081.'   call the function get_runner with arguments settings and self.test_runner, substitute the result for test_runner_class.
  substitute file_name for self.file_name.
  value is None.
  raise an ValueError exception with an argument string "Base36 input too large".
  raise an ValueError with an argument string "The %s could not be %s because the data didn't validate.",
  define the function lock with arguments f and flags.
  substitute CheckboxChoiceInput for choice_input_class.
  only if v.Serializer.internal_use_only is false, return the resulting list.   define the function get_deserializer with an argument format.
  if ValueError exception is caught,
  try,
  substitute MONTHS for self.months.
  define the function python_reloader with main_func and kwargs as arguments.
  raise an TemplateSyntaxError exception with an argument string "'%s' takes one argument", where '%s' is replaced with first element of bits.
  if trim is true,
  raise an exception.
  from django.utils.functional import allow_lazy into default name space.
  call the self.handle_noargs method with with unpacked dictionary options as argument, return the result.
  call the Warning function with 3 arguments: hint tuple containing one string, Django 1.6 introduced a new default test runner.
  define the method render with 5 arguments: self, name set to None, value set to None, attrs set to None and choices set to an empty tuple.
  derive the class MultiValueField from the base class Field class.
  with the name of the module callback is in and the view_name, respectively, use it as the argument for the ValueError exception raise.   if response has an attribute named 'render' and response.render is a callable function,
  help is an string 'Installs the named fixture(s) in the database.'.
  extend final_output with alter_sql.
  if data is None,
  try,
  return s.
  char2number is an dictionary, with 26 elements: 2 for 'a', 2 for 'b', 2 for 'c', 3 for 'd', 3 for 'e', 3 for 'f', 4 for 'g',
  _urllib_error_moved_attributes is a list with 3 elements: result of the call to the function MovedAttribute with 3 arguments:
  return nothing.
  property decorator,
  derive the class LazyStream from the six.Iterator base class.
  define the method __bool__ with an argument self.
  substitute settings.CACHE_MIDDLEWARE_SECONDS for cache_timeout.
  if fields is true and f.name is not contained in fields,
  if self.directory_permissions_mode is not None,
  params is an empty list,
  if self.can_import_settings is true,
  skip this loop iteration.
  if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
  try,
  call the __add__ method with an arguments rhs from the base class of the class SafeText, substitute the result for t.
  call the method self.exit_command.
  substitute boolean_check for self.check_test if check_test is None, otherwise substitute check_test for self.check_test.
  return first element of the list containing elements of error.
  add j and integer 1, substitute the result for i.
  try,
  import module re.
  do nothing.
  if not,
  substitute bytes for binary_type.
  skip this loop iteration,
  raise an UnrecognizedArchiveFormat exception with an argument string "Path not a recognized archive format: %s",
  call the self.style.HTTP_INFO with an argument msg, substitute it for msg.
  if value has an attribute '_meta',
  from django.core.files import temp as tempfile into default name space.
  define the method extract with 2 arguments self and to_path.
  substitute warning for self.warning.
  sum year and off, substitute the result for year.
  define initialization method __init__ with self class instance, unpacked list args, unpacked dictionary kwargs as arguments.
  unpacked list field_value as an argument, substitute the result for value of under the field.attname key of the data dictionary.   if not,
  define the method s with an argument self.
  call the method self.remove_potfiles.
  define the function get_declared_fields with 3 arguments: bases, attrs and with_base_fields set to boolean True.
  and i is greater than or equal to self.min_num,   value under the 'empty_permitted' key of the defaults dictionary is boolean True.
  define the method register with self ans unpacked list tags as arguments.
  join app_config.path and string 'locale' into a file path, substitute it for localedir.
  define the method render with 4 arguments: self, name, value and attrs set to None.
  substitute self.setting for context.autoescape.
  code set to an string 'invalid_choice' and dictionary params with an entry: choice for 'value'.   return new_value.
  all the function fcntl.flock with return value of the _fd(f) function and fcntl.LOCK_UN as arguments, substitute the result for ret.
  if not,
  convert arg to an integer, substitute it for p.
  substitute years for self.years.
  DEFAULT_MAX_NUM is an integer 1000.
  got_request_exception is a instance of a Signal class, created with an argument providing_args as the list containing string 'request'.
  call the function get_callable with an argument self._callback_str, substitute the result for self._callback.
  if not,
  substitute '%s' in the string " (%s squashed migrations)" with length of replaces filed of graph.nodes element at the plan_node index, append the string to the title.
  substitute first element of loader for loader and loader without the first element for args.
  hex_format_string is a string "%%0%ix" formated with hlen multiplied with integer 2.
  call the function split_domain_port with an argument host, assign the result to domain and port, respectively.
  try,
  if node is an instance of Node,
  for every i and word in enumerated iterable words,
  derive the class Command from the AppCommand base class.
  for every site in sites,
  define the function become_daemon with 4 argument: our_home_dir set to '.', out_log set to None, err_log set to None,
  define the method G with an argument self.
  call the method test_runner.run_tests with an argument test_labels, substitute it for failures.
  default_error_messages is an dictionary with 3 entries: return value of the function _ called with an argument,
  derive the class Critical from base class CheckMessage.
  if 'coerce' key of the kwargs dictionary exists remove it and substitute its value for self.coerce,
  return is empty dictionary.
  else if timeout equals to integer 0,
  call the function table_name_filter with an argument table_name, if it evaluates to true,
  try,
  if the key doesnt exists use sys.stderr as an argument.   if not,
  import module re.
  substitute first element of row for column_name.
  for every var in self.vars,
  define the method render with 2 arguments: self and context.
  define the method validate with arguments self and value.
  if field.serialize is true,
  raise an exception of class NotImplementedError with string 'subclasses of BaseCache must provide an add() method' as argument.
  get the value from the options dictionary under the key 'traceback', substitute it for self.show_traceback.
  call the method zipfile.ZipFile.read with 2 arguments: self and first element of the result of the self.namelist method.
  get value under the config_string key of the PALETTES dictionary, call the copy method on the result and substitute it for palette.
  if token.contents equals string 'else',
  call the method readline.parse_and_bind with an argument string "tab:complete".
  call the method b64encoded.decode with string 'latin1' as argument, substitute the result for b64encoded.
  self.stdout is an instance of OutputWrapper class created with an argument: value under the 'stdout' key of the options dictionary,
  define the method total_form_count with an argument self.
  remove the old_file_name file.
  from django.utils.translation import ugettext_lazy as _ and ungettext_lazy into default name space.
  define the function date with 2 arguments value and arg set to None.
  try,
  from django.utils.encoding import force_str into default name space.
  for 'errors', return value of the function force_text with an argument label for 'label', return value of the function six.text_type,   with an argument bf, for 'field', help_text for help_text, html_class_attr for 'html_class_attr' and bf.html_name for 'field_name'.    if top_errors is true,
  if format_module_path is an instance of six.string_types,
  define the function conditional_content_removal with request and response as the arguments.
  define the method __next__ with an argument self.
  if lookup_view is a callable object,
  from __future__ import unicode_literals into default name space.
  return boolean False,
  add model to created_models set.
  if file self is not closed,
  substitute name for self.name.
  call the method self._populate.
  call the function _bin_to_long with an argument u perform bitwise exclusive OR with 2 operands, previous result an result,
  add string '%s.templatetags' to a list, where '%s' is replaced with app_config.name,
  substitute the result for url_fields.   call the function urlunsplit with an argument url_fields, substitute the result for value.
  register.tag decorator,
  temp_lib is an instance of Library class.
  define the method widget_attrs with arguments self and widget.
  if not,
  if KeyError exception is caught,
  resolved_path is an empty list.
  call the method self.tag, substitute the result for self.tagname.
  define the method __setstate__ with 2 arguments: self and obj_dict.
  attrs is an empty dictionary.
  call the method Module_six_moves_urllib_request with an argument: string ".moves.urllib.error" appended to __name__,
  define the method transform with 3 arguments: self, node and results.
  call f.read function, use the result as the argument for zlib.decompress function call, call the pickle.loads function with the previous result as argument, return the result.
  convert self.index into a string and append it to '_' string, substitute it for value under the 'id' key of self.attrs dictionary.
  if the value under the 'test_flush' key of the options dictionary exists,
  from django.conf import settings into default name space.
  call the method calendar.isleap with an argument self.data.year, return the result.
  if opts is true,
  decrement t by integer 1,
  zip val1 and va2 into list of tuples, for every x and y in the result,
  if attrs is not None,
  otherwise if, if value under the 'unique' key of the dictionary contained under the column_name key of the dictionary indexes is true,
  sys.stderr is an instance of NullDevice class.
  define the function join with 3 arguments: value, arg and autoescape set to None.
  call the method self._load_post_and_files.
  use the result as a key to get the value from the connections dictionary, substitute the result for connection.   call the function check_for_migrations with 2 arguments: app_config and connection.
  substitute value under the cache_alias key of the caches dictionary for cache.
  call the method self.check_for_whole_start_tag with i as an argument, substitute result for the endpos.
  substitute the result for result.   call the function _long_to_bin with 2 arguments: result and hex_format_string, return the result.
  reverse order of elements of self.keyOrder, return the result.
  for every i and arg in enumerated iterable args,
  string '--keyword=gettext_noop', string '--keyword=gettext_lazy', string '--keyword=ngettext_lazy:1,2',   string '--keyword=ugettext_noop', string '--keyword=ugettext_lazy', string '--keyword=ungettext_lazy:1,2',   string '--keyword=pgettext:1c,2', string '--keyword=npgettext:1c,2,3', string '--keyword=pgettext_lazy:1c,2',   string '--keyword=npgettext_lazy:1c,2,3' and string '--output=-', substitute the result for args.   append work_file to args.
  for m in merge_migrations append m.ancestry to a list, zip the resulting list into tuples of pairs, for every level in result,
  if urlconf is None,
  call the function import_module with an argument mod_name.
  with an argument string 'object', return the result.   define the method _get_model_from_node with arguments self, node and attr.
  call the __bool__ method with argument self, on the return value of the type function with argument self, return the result.
  code set to string 'max_whole_digits' and params set to a dictionary with an entry: difference of the self.max_digits and self.decimal_places, for 'max'.    return value.
  if form._meta.widgets is true,
  join elements of output into a string, separated by newline characters, use it as the argument for the call the function mark_safe,
  file_field_list is an empty list.
  call the method dict.__setitem__ with 3 arguments: result, result of the function copy.deepcopy, called with 2 arguments: key,
  call the function func with 2 arguments: unpacked list resolved_args and unpacked dictionary resolved_kwargs,
  if ValidationError, substituted for e, exception is caught,
  return nothing,
  return self.hashvalue.
  split ip_str into parts by ':', if '.' is contained in the last element of the result,
  call the method self.get_renderer with 4 arguments: name, value, attrs and choices, for every widget in result,
  derive the class HttpResponseRedirectBase from the HttpResponse base class.
  for every template_dir in template_dirs,
  from django.conf import settings into default name space.
  define the function filesizeformat with an argument bytes.
  if language_code is not contained in self._regex_dict,
  get the directory name of filename, substitute the result for dirname.
   _mutable is boolean True.
  return modules.s
  if string 'trimmed' is contained in result of the method t.split_contents, trimmed is boolean True, otherwise is boolean False.
  'migrations. Unmigrated apps will also have their initial_data fixture reloaded. Does not achieve a "fresh install" state.'   define the add_arguments with arguments self and parser.
  yield value under key key of self dictionary.
  define the method add_arguments with 2 arguments self and parser.
  call the method s.decode with an argument string 'utf-8', substitute the result for s.
  if self.errors is true and self.form has an attribute 'error_css_class',
  otherwise if value is an instance of datetime.time,
  attachment is an instance of a class MIMEBase, created with the arguments basetype and subtype.
  if KeyboardInterrupt exception is caught,
  trym
  if mode equals to string 'add' and current_expires is lesser than now, or mode equals to string 'set', and result is true,
  if self.fail_silently is boolean False,
  create a list out of basedir elements for which function os.path.isdir returns true, apply the os.path.abspath function on every element, and put the results in a list, basedir is set of previous list elements.
  call the method __init__ from the base class of the EntitiesForbidden class.
  decrement l by integer 1, multiply it with hlen, subtract the result from dklen, substitute the result for r.
  if 'error_messages' is contained in kwargs,
  define the method prepare_value with arguments: self and value.
  with '%s' substituted for app_label, as arguments.   if migration_name equals to string 'zero',
  call the method other_dict.lists, for every key and value_list in result,
  call the OVERLAPPED function, substitute the result for overlapped.
  if model is contained in created_models,
  define the method add_item_elements with 2 arguments, handler self and item.
  call the function warnings.warn with 2 arguments: string "Need {0} values to unpack in for loop; got {1}. This will raise an
   substitute whitelist for self.domain_whitelist.
  dest set to string 'use_reloader', default set to boolean True and help is a string 'Tells Django to NOT use the auto-reloader.'.   def get_handler with 3 arguments: self, unpacked list args and unpacked dictionary options.
  if StandardError, renamed to e, exception is caught,
  define the method tzname with 2 arguments self and dt.
  _wrapped is None.
  define the method reader with an argument self.
  value is boolean True.
  call the method subcommand_cls.create_parser with 2 argument an empty string an first element of cwords, substitute it for parser.
  if first element of data_list is contained in self.empty_values,
  and unpacked dictionary kwargs.   substitute streaming_content for self.streaming_content.
  call the method lookups.appendlist with 2 arguments: pattern.callback and a tuple containing 3 elements: bits, p_pattern,
  define the method delete_first_token with an argument self.
  call the os.fdopen function with fd, mode and bufsize as the arguments, assign the file handle object to self.file.
  define the method __enter__ with an argument self.
  call the method self.make_key with key and version set to version as arguments, substitute the result for key.
  bits is an empty list.
  and instance of Name class created with an argument string 'python_2_unicode_compatible'.   decorated is an instance of class Node, created with 3 arguments: syms.decorated, list with 2 arguments: decorator and klass,
  str.__unicode__().encode('utf-8'), call the lambda function and put the result in the __str__ filed of klass.   return klass.
  for every app_label in bad_app_labels,
  if old_attr is None,
  if self._wrapped is contained in empty,
  substitute value for value under the key key of dictionary at last element of self.dicts.
  chars is a string 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'.
  do nothing.
  value is an instance of a class Decimal created with value as an argument.
  if self.match is None or call to the method self.match_re.search with an argument f, evaluated to true,
  call the function smart_split with an argument self.contents, substitute the result converted to an iterable for bits.
  if expires is false,
  define the function decorating_function with an argument user_function.
  and unpacked dictionary kwargs, return the result.   define the function assertRegex with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  try,
  derive the class URLValidator form the RegexValidator base class.
  substitute OPERATORS dictionary element under token key for op.
  call the connection.cursor method, substitute the result for cursor.
  derive the class RenderContext from the BaseContext base class.
  convert ret to a boolean, return it.
  substitute name for self.name.
  if is_templatized is true,
  import module hashlib.
  substitute 'n' for answer.
  raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
  return nothing.
  register.tag decorator function with an argument 'filter',
  if base_lang is contained in settings.LANGUAGES_BIDI, return boolean True, if not, return boolean False.
  derive the class BlockContext from the Exception base class.
  _upload_handlers is an empty list.
  call the method archive.extract with an argument to_path.
  substitute serialize for __str__.
  from django.utils import lru_cache into default name space.
  call the parser.add_argument method with the string '--database', default set to DEFAULT_DB_ALIAS and help containig string,
  import module traceback.
  get the value under the 'HTTP_ACCEPT_LANGUAGE' key of the request.META dictionary, if it exists substitute it for accept,
  bitwise shift integer 1 to the left by 31 spaces, substitute integer 1 from the result, convert the result to a integer, substitute it for MAXSIZE.
  for every d in reversed list self.dicts,
  call the method validate with an argument value from the base class of the DecimalField class.
  define the method clear with argument self.
  f _serializers is false,
  define lambda function that returns self.file.write field, use it as an argument for property function, put the result in write.
  for every field, error_list in self.error_dict.items method return value,
  call the method list.__getitem__ with 2 arguments self and key, substitute the result for value.
  append '-' to generic_lang_code, if supported_code starts with it,
  define the method writer_leaves with an argument self.
  and code set to an string 'required'.   for every val in value,
  widget is an instance of HiddenInput class.   if not,
  derive the class NullDevice.
  remove the first element from self.backout, substitute the result for self.pointer.
  for key and value in return value of the six.iterlists function called with an argument self,
  raise an ValidationError with 3 arguments: dictionary self.error_messages value under the key 'invalid_choice',
  and _, respectively.   if file_ is true,
  default set to False and help set to string'Creates SQL to unapply the migration, rather than to apply it' as arguments.   define the method handle with self class instance, list of arguments args and options dictionary as the arguments.
  call the function _unpack_ipv4 with an argument ip_str, substitute the result for ipv4_unpacked.
  return an instance of SafeBytes, created with an argument s.
  return cls.
  property decorator,
  if content has an attribute 'temporary_file_path',
  call the function io.open with 3 arguments: potfile, string 'a' and encoding set to string 'utf-8' as arguments,
  where '%s' is replaced with request.__class__.__name__, path, return value of the function six.text_type called with an argument get,   return value of the function six.text_type called with an argument post, return value of the function six.text_type,   called with an argument cookies and return value of the function six.text_type called with an argument meta.   define the function bytes_to_text with 2 arguments s and encoding.
  import module warnings.
  from logging.config import dictConfig.
  call the BaseConverter function with BASE36_ALPHABET as argument, store the result in base36.
  substitute compressed for data.
  filename is a tuple containing 3 initial elements: string 'utf-8', and empty string and filename.
  register.tag decorator,
  if not,
  split host from the right side into 2 parts at the ':', substitute the result for bits.
  from io import BytesIO into default name space.
  import module warnings.
  define the function request with an argument request.
  call the method initial_form_count from the base class of the class BaseModelFormSet, return the result.
  substitute '%s' in 'Forbidden (Permission denied): %s' with request.path, extra is an dictionary with two pairs of elements,
  define the method o with an argument self.
  for every k in doomed,
  increment weight by integer 2.
  default set to True, help containing string 'Tells Django to NOT prompt the user for input of any kind.' as arguments.   call the method parser.add_argument with string '--no-initial-data', action containing string 'store_false',
  if attrs is true,
  import module decimal.
  if t.token_type equals TOKEN_BLOCK,
  call the method request_finished.connect with argument update_watch.
  raise an TemplateSyntaxError exception with an argument string "'ssi' tag takes one argument: the path to the file to be included".
  for every table_name in return value of the method connection.introspection.table_names called with an argument cursor,
  return string 'https' if value under the "HTTPS" key of the os.environ dictionary equals string 'on', if not return 'http'.
  join inner_text elements into a string.
  if not,
  join template_dirs elements into a string, separated by '|', use it as an argument for the call to the function force_bytes,
  return property object with _media as getter function.
  return context.
  if self.connector equals conn_type,
  from django.utils.deprecation import RemovedInDjango20Warning into default name space.
  define the method strptime with arguments self, value and format.
  increment i by integer 1, substitute the result for i.
  if not,
  return an empty string,
  output is an empty list.
  where '%s' is replaced with app_label.   try,
  extend new_second_item with item.
  num_args is an integer 0.
  confirm is a string 'yes'.
  _trans is an instance of Trans class.
  if exists, if not use None as the second argument, return the result.   call the function MigrationExecutor with connection and self.migration_progress_callback as arguments, substitute the result fro executor.
  call the function force_text, with the function get_current_timezone_name and errors set to string 'ignore' as arguments,
  if active has an attribute 'value',
  NON_FIELD_ERRORS is an string '__all__'.
  if data is boolean False,
  call the method get_runner with 2 arguments: settings and value under the 'testrunner' key of the options dictionary, substitute it for the TestRunner.
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  value under the app_config key of the app_list is None.
  decorator function register.filter with an argument is_safe set to boolean False.
  if not,
  substitute model._base_manager for objects.
  if not,
  call the function re.sub with 3 arguments: raw string "\\.|.", escape_quotes and tok without the first and last element,
  for every resultclass in resultclasses,
  where '%s' are replaced with name and param.   otherwise if param is contained in kwargs,
  if "__call__" is contained in klass.__dict__ for any klass in __mro__ field of the obj class, return boolean True, otherwise return False.
  s_len is integer 0.
  insert mw_instance.process_response at the beginning of self._response_middleware.
  call the method _trans.gettext_noop with an argument message.
  remove element under '_data' key of obj_dict dictionary, if it exists substitute it for data, if not data is an empty list.
  from django.utils.translation import ugettext_lazy and pgettext_lazy into default name space.
  call the method token.split_contents, substitute the result for bits.
  yield string "# This is an auto-generated Django model module." as the result.
  if html is true,
  find the value of response under the key 'Cache-Control', use it as a delimiter to split string ss_delim_re,
  call the method self.nodelist.render with an argument context, substitute the result for result.
  return lambda function with text as argument and return value being result of the function colorize, called with 3 arguments: text,
  call the method logging.StreamHandler, substitute the result for handler.
  if chunk is None,
  substitute HiddenInput for widget.
  substitute value under the f.name key of the help_texts dictionary for value under the 'help_text' key of kwargs dictionary.
  from django.utils import six into default name space.
  define the method __enter__ with argument self.
  define the method _parse_header with an argument line.
  otherwise id change equals to I18N_MODIFIED,
  do nothing.
  if min_value is not None,
  if key is not contained in self,
  pyinotify.IN_MOVED_FROM, pyinotify.IN_MOVED_TO and pyinotify.IN_CREATE, store the result in mask.   for every path in return value of the call to the function gen_filenames with argument only_new set to boolean True,
  if self.use_natural_foreign_keys is true and field.rel.to has an attribute 'natural_key',
  if TypeError or ValueError exceptions are caught,
  if self.verbosity is greater or equal than integer 1,
  append f.name to exclude.
  __T is a raw string '(?P<hour>\d{2}):(?P<min>\d{2}):(?P<sec>\d{2})'.
  try,
  try,
  binary or os.O_EXCL if allow_overwrite is boolean False, use the previous as the mode to open new_file_name file, assign the file descriptor to fd.   try,
  substitute self.html_name for name.
  return version
  call the method Model._meta.get_all_field_names, substitute the result for model_fields.
  substitute self.context.render_context for render_context.
  opts.localized_fields, opts.labels, opts.help_texts and opts.error_messages, substitute the result for fields.   for every k and v in return value of the function six.iteritems called with an argument fields, if n is false, append it to a list,
  substitute '%r' in string ' npgettext(%r, %r, %r,count) ' with message_context, result of the function join_tokens,
  define the method upload_handlers with an argument self.
  append string '_directory' to app_or_project, substitute it for base_directory.
  substitute serialize for __bytes__.
  call the function do_translate with 2 arguments: message and string 'gettext', return the result.
  call the function re.compile with 2 arguments: string '^([a-z]):' and re.I, substitute the result for _drive_re.
  return compile_function.
  substitute nonlocal_root for a tuple with an element root.
  call the function middleware_method with request and response as the arguments, substitute the result for response.
  and self._current for 'fields'.   if self.use_natural_primary_keys is false or obj doesnt have a 'natural_key' attribute.
  call the method appendlist from the base class of the QueryDict class, with arguments key and value.
  if data is an instance of MultiValueDict or MergeDict class,
  mime_type is a string 'application/rss+xml; charset=utf-8'.
  substitute options for self.options.
  substitute _iterkeys for iterkeys.
  requires_system_checks is boolean False.
  substitute self.deleted_forms for forms_to_delete.
  if not,
  substitute self.urlconf_name for self.urlconf_module.
  define the method render with 2 arguments self and context.
  substitute '%s' with title in the string " [ ] %s", write it to the standard output.
  if content is empty, substitute it for an empty string.
  if unhandled_params is true,
  define the method check_migrations with an argument self.
  if ImportError, renamed to exc, exception is caught,
  substitute so and se for sys.stdout and sys.stderr.
  define the method rss_attributes with an argument self.
  do nothing.
  substitute help_text for self.help_text.
  call the method self.empty_variable with an argument token,
  derive the class DisallowedHost from the SuspiciousOperation base class.
  call the method tried.extend with an argument: t added to a list containing element pattern, for every t in sub_tried.
  call the method clear from the base class of the class SortedDict.
  for every path in self.locale_paths,
  if not,
  define function _i18n_cache_key_suffix, with request and cache_key as arguments.
  otherwise if autoescape is true,
  return an empty string.
  if confirm equals a string 'yes',
  derive the class DecimalField from the base class IntegerField class.
  call the method unlink on self with self.name as the argument.
  expires as a string 'Thu, 01-Jan-1970 00:00:00 GMT', return the result.   define the method make_bytes with 2 arguments: self and value.
  substitute self.config for config.
  call the function get_ns_resolver with arguments ns_pattern and resolver, substitute the result for resolver.
  otherwise if, first element of message_context is equal to "'",
  substitute source for e.django_template_source.
  return boolean True.
  call the function sys.exit with an integer 1 as an argument.
  import module operator.
  self._css is an empty dictionary.
  call the method path.normpath with an argument expanded_template, substitute it for expanded_template.
  join into a file path: self.locale_dir and string '.pot' appended to domain converted to string, substitute it for potfile.
  call the method self.source_error with 2 arguments: token.source and msg, return the result.
  return the value under the INITIAL_FORM_COUNT key of the self.management_form.cleaned_data dictionary.
  define the method __add__ with 2 arguments self and rhs.
  if TypeError, renamed to te, exception is caught,
  return value under the key key of dictionary in last element of self.dicts,
  if not,
  use it as an argument for the call to the method self.style.MIGRATE_HEADING, write the result to self.stdout.   call the method writer.as_string, append newline to the result, write it to self.stdout.
  model._meta.app_label, model._meta.object_name, parent_model._meta.app_label, parent_model._meta.object_name, respectively.   return fk.
  increment year by integer 1900.
  define the method url_patterns with an argument self.
  call the method zbuf.getvalue, return the result.
  yield and empty string as the result.
  raise an TemplateSyntaxError exception with an argument string "'%s' received multiple values for keyword argument '%s'",
  assign values under the 'app_label' and 'migration_name' keys of the options dictionary to the app_label and migration_name, respectively.
  define the function rfc2822_date with an argument date.
  join p and cmd into a file path, substitute it for f.
  call the function file_move_safe with content.temporary_file_path function result and full_path.
  call the function new_method_proxy with an argument bool, substitute the result for __nonzero__.
  from IPython.Shell import IPShell into default namespace.
  return message.
  doublecolon_start is integer -1.
  stats is a list with 2 elements: 2 integers 0.
  call the method questioner.ask_merge with an argument app_label, if it evaluates to true,
  call the function handle_m2m with an argument relobj.
  from django.core import validators into default name space.
  and digestmod set to hashlib.sha1, return the result.   define the function constant_time_compare with 2 arguments: length set to integer 12,
  define the function iri_to_uri with iri as an argument.
  call the method _trans.gettext with an argument message.
  create a list out of open_tags elements form (i+1)-th index to the end, substitute it for open_tags.
   is exception is caught,
  try,
  call the re.compile function with an argument raw string '^[-a-zA-Z0-9_]+$', substitute the result for slug_re.
  define the method get with 3 arguments: self, header and alternate set to None.
  if name is not None,
  from django.utils.ipv6 import clean_ipv6_address into default name space.
  register.tag decorator,
  if ImportError exception occurred,
  created with 4 arguments: qs, initial as pk_value, required as boolean False and widget as widget.   call the method add_fields from the base class of the class BaseModelFormSet, with 2 arguments: form and index.
  call the method connection.creation.sql_destroy_model with arguments: model, references_to_delete and style, extend with the result the list output.
  call the method field.clean with an argument value, substitute the result for value.
  call the function date.strftime with an argument string '%s, %%d %s %%Y %%H:%%M:%%S ' formated with dow and month,
  call the signed_value.rsplit method with arguments self.sep and integer 1, substitute the result for value and sig, respectively.
  substitute token.source for e.django_template_source.
  define the method latest_post_date with an argument self.
  get config dictionary element under 'incremental' key, if it exists substitute it for incremental, if not,
  define the function run with 5 arguments: addr, port, wsgi_handler, ipv6 set to boolean False and threading set to boolean False.
  call the method self.unclosed_block_tag with an argument list with an element endtag.
  define the method __init__ with 2 arguments self and file.
  call the method context.render_context.push.
  m2m_convert is an lambda function with an argument n, return value is the return value of the method field.rel.to._meta.pk.to_python,
  substitute self.template_with_initial for template.
  substitute self.current_token for t.
  inputs is an empty list.
  call the function mark_safe with an argument contents, return the result.
  substitute _iterkeys for iterkeys.
  from django.db import connections and DEFAULT_DB_ALIAS into default namespace.
  status_code is an integer 304.
  define the method with 3 arguments: self, app_config  set to None and display_num_errors set to boolean False.
  substitute the location for self.base_location.
  skip this loop iteration,
  call the method parser.add_library with an argument lib.
  formated with string created by joining elements of result of the function re.escape with an argument x, with separator '|',   for every x in DOTS, and re.DOTALL, substitute the result for hard_coded_bullets_re.   call the function re.compile with raw string '(?:<p>(?:&nbsp;|\s|<br \/>)*?</p>\s*)+\Z', substitute the result for trailing_empty_content_re.
  if not,
  if template_dir is directory,
  if _supported is None,
  derive class ImageFile from the base class File.
  want_unicode is boolean True.
  try,
  substitute '%s' in a string "\nCreated new merge migration %s" with writer path, write it to self.stdout.
  if every filter_name in strings 'escape' or 'safe',
  substitute current_app for ns.
  get the value under the key 'exclude' of the options dictionary, convert it to an integer, substitute it for exclude.
  return result.
  from django.core.wsgi import get_wsgi_application into default name space.
  if 'id' is contained in self.attrs,
  cls.__dispatch is an empty dictionary.
  call the method __init__ from the base class of the class CheckboxInput, with an argument attrs.
  define the funtion _generate_cache_header_key with key_prefix and request as arguments.
  define the method next with an argument self.
  return list with an element first_item, and boolean True.
  from __future__ import absolute_import into default name space.
  if ch is not equal to string '<' or string '=',
  define the function removetags with 2 arguments value and arg.
  define the function force_text, with s, encoding set to 'utf-8', strings_only set to False, errors set to string 'strict' as arguments.
  return message.
  define the method get with 5 arguments, self class instance, key, default set to None and version set to None.
  get the value under the mem_args key of the cache dictionary, return it.
  if termios is true,
  if value.tzinfo is None and call to the method value.tzinfo.utcoffset called with an argument value evaluates to None,
  if Exception, renamed to e, exception is caught,
  if value under the 'errlog' key of options dictionary is true,
  get the value under the 'filename' key of the params dictionary, if the key exists substitute it for guessed_filename,
  do nothing.
  define the function find_template with 2: template_name and dirs set to None.
  seen_data is an empty set.
  define the method utcoffset with 2 arguments self and dt.
  call the method token.split_contents, substitute the result for bits.
  substitute index for doublecolon_start.
  return self._changed_data.
  try,
  raise an StopIteration exception.
  substitute args for self.args.
  result is an integer 0.
  html_class_attr is an empty string.
  try,
  convert value and arg to integers, if value is divisible by arg, return True, otherwise return boolean False.
  append string ', ' to field_desc.
  __Y is a raw string '(?P<year>\d{4})'.
  raise an TemplateDoesNotExist exception with an argument template_name.
  import module time.
  define the function from_current_timezone with an argument value.
  reverse order of parts, join them into a string, separated with '.', substitute the result for value.
  define the function do_translate with 2 arguments: message and translation_function.
  if six.PY3 is true,
  __all__ is a tuple containing strings: 'ModelForm', 'BaseModelForm', 'model_to_dict', 'fields_for_model', 'save_instance',
  join top_dir, relative_dir and return value of the function filename.replace called with 2 arguments: base_name and name,
  from os.path import join, normcase, normpath, abspath, isabs, sep and dirname into default name space.
  for every arg in the result,   if arg is an instance of Promise class,
  try,
  derive the class DjangoRuntimeWarning from the RuntimeWarning base class.
  call the method path.encode with an argument fs_encoding, return the result.
  import module os.
  if not,
  call the method field_node.getElementsByTagName with an argument string 'None', if it evaluates to true,
  if encoding is true, substitute it for self._encoding, if not substitute settings.DEFAULT_CHARSET for self._encoding.
  derive the InMemoryUploadedFile class from the UploadedFile base class.
  substitute model._default_manager for objects.
  substitute callback for self._callback_str.
  usage set to return value of the method self.usage called with an argument subcommand, version set to return value of the method self.get_version.   call the method parser.add_option with 8 arguments: string '-v', string '--verbosity', action set to string 'store',
  call the method handler.addQuickElement with 2 arguments: string 'comments' and value under the 'comments' key of the item dictionary.
  if length of tablenames is greater than zero,
  substitute old_attr for self.attr.
  call the method render from the base class of the class ClearableFileInput, called with 3 arguments: name, value and attrs,
  if it is smaller than the value of dictionary kwargs under the key 'max_age', substitute kwargs value under the key 'max-age' by it.   if cc contains item 'private' and kwargs contains item 'public',
  try,
  text_kwargs is a dictionary created from the result of the function force_text with an argument v, mapped through function k, for every k and v in return value of the kwargs.items.
  substitute i-th element of value for field_value.
  if tried is true,
  call the method self.itervalues, return list of results.
  call the method handler.addQuickElement with 2 arguments: string 'name' and value under the 'author_name' key of the self.feed dictionary.
  convery value into a tuple, substitute it for value.
  try,
  substitute value under name key of logging._handlers dictionary for handler.
  if not,
  if not,
  if var is false or whitespaces are contained in var,
  if s is an instance of six.text_type or Promise,
  get the next element of the iterable pattern_iter, assign the result for ch.
  raise CommandError with an argument string 'Unknown model: %s', where '%s' is replaced with app_label and model_label, respectively.
  if self.number is greater than integer 1, return boolean True, otherwise return boolean False.
  define the method dst with 2 arguments self and dt.
  call the method timezone.get_current_timezone, substitute the result for current_timezone.
  call the method get_template with an argument template, substitute the result for template.
  if lengths of value and arg are equal, return boolean True, otherwise return boolean False.
  and initial as a dictionary with 4 entries: result of self.total_form_count method for TOTAL_FORM_COUNT,   result of self.initial_form_count method for INITIAL_FORM_COUNT, self.min_num for MIN_NUM_FORM_COUNT and self.max_num for MAX_NUM_FORM_COUNT.   return form.
  raise an TypeError with an argument string "The argument `field` must be `None` when the `error`argument contains errors for multiple fields.".
  try,
  call the method self.as_tuple with an argument value under 'address' key of config dictionary,
  substitute setting and nodelist for self.setting and self.nodelist, respectively.
  convert num to an integer, substitute the result for length.
  call the function warn_about_renamed_method with 2 arguments: class_name and unpacked list renamed_method, substitute the result for wrapper.
  define the method encoding with arguments self and val.
  substitute obj_pk.pk for obj_pk.
  define the function get_library with an argument library_name.
  delete self._get.
  substitute the result for new_permission.   call the function os.chmod wiht arguments filename and new_permissions.
  define the method read with arguments self and size set to None.
  raise an CommandError exception with an argument string "errors happened while running msguniq\n%s", where '%s' is replaced with errors.
  call the function mark_for_escaping with an argument value, return the result.
  if not,
  try,
  if j equals to integer -1,
  close the file fd.
  while i is smaller than l,
  if field.rel.to._meta.pk.rel is true,
  define the method symlinks_supported.
  call the function _trans.deactivate_all, return the result.
  call the method self.model._default_manager.get_queryset with an argument qs.
  if 'step' key of the attrs dictionary doesnt exists assign it step as an value.
  call the __init__ method from the base class of the HttpResponseNotAllowed class, called with arguments: unpacked list args,
  if length of app_labels is equal to integer 1,
  from django.utils._os import npath and upath into default name space.
  call the method writer.as_string, write the result to file fh.
  while rbp is smaller than self.current_token.lbp,
  if self.file_path is not an instance of six.string_types,
  append ')' to third element of bit, substitute it for sentinal.
  call the function new_method_proxy with an argument operator.delitem, substitute the result for __delitem__.
  if want_unicode is true,
  derive the class Formatter from object base class.
  value is an instance of ConvertingTuple class, created with an argument value.
  define the function rmtree_errorhandler with 3 arguments func, path and exc_info.
  get the value under the 'verbosity' key of the options dictionary, substitute it for self.verbosity.
  call the self._create_message method with argument msg, substitute it for msg.
  and element of tokens at i incremented by 1 index equals a string "in",   token is a string "not in".
  from django.utils.module_loading import module_has_submodule into default name space.
  with lock,
  try,
  from django.conf import settings into default name space.
  call the method self.data.timetuple, use the result as an argument for the call to the function time.mktime,
  define the function pgettext with 2 arguments: context and message.
  substitute save_as_new for self.save_as_new.
  call the self.close method.
  substitute sign for self.sign.
  for every form in self call the form.as_ul method, join the results in a string, separated by an empty string.
  if autoescape is true and value is not an instance of SafeData, autoescape is boolean True, otherwise it is boolean False.
  define the function mark_for_escaping with an argument s.
  try,
  call the function timedelta with an argument minutes set to offset, substitute the result for self.__offset.
  convert field into a string and concatenate it to a string '* ', append the result to output.
  evaluate the function force_str with key as the argument, substitute it for key.
  substitute _urllib_request_moved_attributes for Module_six_moves_urllib_request._moved_attributes.
  if fget is not None,
  return boolean True.
  define the method reverse with arguments self, lookup_view, unpacked list args and unpacked dictionary kwargs.
  references_to_delete is an empty dictionary.
  return an instance of FirstOfNode class, created with an argument, result of the method parser.compile_filter called with bit,
  yield key and value under key key of self dictionary.
  convert six.PY3 to an integer, substitute it for buffering.
  define the method __init__ with arguments self and request defaulting to None.
  raise an exception.
  for every field in return value of the function _parse_date_fmt,
  substitute self.max_num for total_forms.
  if six.PY3 is true,
  for every k2 and v2 in v,
  define the method getvalue with an argument self.
  append string "Field renamed because it was a Python reserved word." to field_notes.
  if self.sep is not contained in signed_value,
  call the function _ with an argument string 'p.m.', return the result.
  if fields is true and f.name is not contained in fields,
  if exception http.Http404 as e is caught,
  call the method token.contents.split, substitute the result for args.
  if call to the method finder.find_module with 2 arguments: name and package_path evaluates to true,
  join elements of the output into a string, separated by newlies, return the string.
  define the function get_unbound_function with an argument unbound.
  get value under key key of self dictionary, if it doesnt exists return default, substitute the result for value.
  if self has an attribute '_coerce',
  if not,
  from django.utils import six into default name space.
  if cleaned_line ends with ';' character,
  append template_dir to app_template_dirs.
  substitute key for result.key.
  call the method self._isdst with an argument dt, if it evaluates to true,
  define the method get_json_data with 2 arguments self and escape_html set to boolean False.
  property decorator,
  define the function get_default_timezone_name.
  while i is lesser than length of subject and i-th element of subject is not equal to p-th element of subject,
  call the self.run method with unpacked dictionary options as an argument.
  get _itervalues attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable,
  if filename is not contained in _mtimes,
  call the method self.get_handler with 2 arguments unpacked list args and unpacked dictionary options, substitute the result for handler.
  use the result as an argument for the call to the function binascii.unhexlify, return the result.   if hashlib had an instance "pbkdf2_hmac",
  do nothing.
  get _iterkeys attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable,
  increment the lineno by the count of the newlines in self.__starttag_text.
  substitute context for self.context.
  if KeyboardInterrupt exception is caught,
  intrans is boolean False.
  call the function force_str with an argument string '<%s\npath:%s,\nGET:%s,\nPOST:%s,\nCOOKIES:%s,\nMETA:%s>',
  if maxsize equals integer 0,
  call the method self.get with key and version set to version as arguments, substitute the result for value.
  call the self._lock.reader method, with the result perform the following,
  return parser
  loader is an instance of MigrationLoader class, created with an argument connection.
  substitute connection.ops.quote_name for qn.
  default set to boolean True, help set to string 'Tells Django to NOT prompt the user for input of any kind.'.   call the method parser.add_argument with 5 arguments: string '--failfast', action set to string 'store_true', dest set to 'failfast',
  from django.utils.encoding import python_2_unicode_compatible and force_st into default name space.
  if invalid_var_format_string is None,
  call the method error.items, for every field and error_list in the result,
  define the method getvalue with an argument self.
  define the method __init__ with 4 arguments: self, name, regex and next set to None.
  substitute value for value under the self.variable_name key of the context dictionary.
  if not,
  define the function _parse_date_fmt.
  import module importlib.
  call the method data.items, for every medium and paths in the result.
  if IndexError exception is caught,
  return supported.
  return boolean False.
  call the method self._assert_mutable.
  every occurrence of '<' with '&lt;', every occurrence of '>' with '&gt;', every occurrence of '"' with '&quot;',   and every occurrence of "'" with '&#39;', call the function mark_safe with the previous result as an argument, return the result.   call the function allow_lazy with 2 arguments: escape, six.text_type, substitute the result for escape.
  call the method formats.number_format with 2 arguments: number and absolute value of p,
  derive the class Loader from the BaseLoader base class.
  if data is not None, substitute data for initial_value, otherwise data_value is an empty string.
  except ImportError.
  try,
  substitute name for old_attr.
  if form.is_bound is true,
  try,
  get attribute 'print' from the moves.builtins object, if it exists substitute it for print_, if not print_ is None.
  define the method handle_merge with arguments self, loader and conflicts.
  increment Tok.num with an integer 1.
  and help set to string 'Nominates a database to print the SQL for. Defaults to the "default" database.'.   define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.
  if not,
  define the method add_arguments with 2 arguments: self and parser.
  call the function force_str with an argument format_type, substitute the result for format_type.
  _itervalues is a string "values".
  assign the result to the sql and references, respectively.   add model to seen_models set.
  mapped_tokens is an empty list.
  apps is an empty dictionary.
  raise an TemplateSyntaxError exception with an argument "Searching for value. Expected another value but found end of string: %s",
  if six.PY2 is true, _BASE64_DECODE_ERROR is TypeError, if not, _BASE64_DECODE_ERROR is binascii.Error.
  if settings.DEBUG is true,
  otherwise if call the method simple_url_2_re.match with an argument middle evaluates to true,
  substitute os.unlink for unlink.
  if filename is an instance of MIMEBase,
  if i incremented by 1 is lesser than length of chunks,
  for every fixture_file, fixture_dir and fixture_name in return value of the method self.find_fixtures called with an argument fixture_label,
  substitute name for self.name.
  parts is an empty list.
  call the method block.nodelist.render with an argument context, substitute the result for result.
  if latest_date is true, return it, if not, call the method datetime.datetime.now and return the result.
  call the method gettext_module.find with 3 arguments: string 'django', path and list with an element: result of the function,
  if field equals NON_FIELD_ERRORS,
  from django.core.mail.backends.base import BaseEmailBackend into default name space.
  substitute model._meta for opts.
  decorator stringfilter,
  count occurrences of '\n' in t.contents, add the result to t.lineno, substitute the result for cur_lineno.
  define the method media with an argument self.
  if self.verbosity is greater or equal to integer 2,
  raise an TemplateDoesNotExist exception with an argument name.
  instantiate Lexer class with 2 argumets src and origin, call the method tokenize from it, for every t in the result,
  raise an exception of class NotImplementedError, with string 'subclasses of BaseCache must provide a get() method' as argument.
  do nothing.
  append to options a tuple containing 2 entries: firs element of sorted list of the s_opt.option_strings,
  call the method __init__ from the base class of the class InlineForeignKeyField, with 2 arguments unpacked list args,
  import module sys.
  return integer 1 and ch2.
  do nothing.
  otherwise if value is boolean False,
  derive the class BoundField from the base class object.
  substitute result for cache dictionary value under the key key.
  return string 'form'.
  substitute cache for value under the alias key of self._caches.caches dictionary.
  filesize_number_format with result of division of bytes by GB as an argument, substitute the result for value.   otherwise if bytes is smaller than PB,
   from django.utils import timezone into default name space.
  if self.allow_files is true and full_file is a file, or if self.allow_folders is true and full_file is an directory,
  yield string "#   * Rearrange models' order" as the result.
  raise an exception.
  return reversed list output.
  return s.
  call the method self.options.copy, substitute the result for self.json_kwargs.
  HttpResponseNotModified, HttpResponseBadRequest, HttpResponseForbidden, HttpResponseNotFound, HttpResponseNotAllowed, HttpResponseGone,   HttpResponseServerError, Http404, BadHeaderError, JsonResponse into default name space.   from django.http.utils import fix_location_header and conditional_content_removal into default name space.
  join m and n into a string, separated by '.', substitute the result for lookup_view_s.
  from functools import reduce into default name space.
  substitute DEFAULT_MAX_NUM for max_num,
  get the index name, of the parser._namedCycleNodes, return the result.
  call the method self.as_hidden with an argument only_initial set to boolean True,
  split string cc_delim_re by value of dictionary response under the key 'Vary' as a delimiter, substitute it for vary_headers.
  return string 'NOTPROVIDED'.
  call the method self.to_python with an argument value, strip the whitespaces from the both ends of the result and substitute it for value.
   if initial equals a string 'False',
  define the method configure_custom with 2 arguments: self and config.
  output_transaction is boolean True.
  define lambda function that returns self.file.newlines field, use it as an argument for property function, put the result in newlines.
  digits is a string "0123456789abcdefghijklmnopqrstuvwxyz".
  if not,
  try,
  try,
  call the Error function with 4 arguments, string "%s was connected to the '%s' signal with a lazy reference to the '%s' sender,
  if values is None,
  if not,
  if commands_only is true,
  import module time.
  define the method handle_inspection with 2 argument: self and options.
  substitute _itervalues for itervalues.
  define the method writer with an argument self.
  if response is None,
  call the method form.is_valid, perform bitwise and with the result and forms_valid as operands, substitute the result for forms_valid.
  define the method is_hidden with an argument self.
  decorator lru_cache.lru_cache with an argument maxsize set to None.
  return boolean True.
  define the function blankout with 2 arguments: src and char.
  define the function localtime with 2 arguments: value and timezone set to None.
  for every c in self.children.   define the method __repr__ with an argument self.
  derive the class SelectDateWidget for the Widget base class.
  call the method parser.find_filter with an argument filter_name, substitute the result for filter_func.
  self.activated is boolean False.
  if ImportError exception is caught,
  call the function formatdate with an argument epoch_seconds, substitute the result for rfcdate.
  substitute msg for body_msg.
  classmethod decorator,
  from __future__ import unicode_literals into default name space.
  append list with 2 strings: '_request' and '_current_app' to SimpleTemplateResponse.rendering_attrs, substitute the result for rendering_attrs.
  call the method self.make_key with key and version set to version as arguments, substitute the result for key.
  call the method bf.css_classes, substitute the result for css_classes.
  from django.db import connections, router, transaction, models and DEFAULT_DB_ALIAS into default name space.
  do nothing.
  substitute bp for lbp.
  if max_age is not None,
  to the function timedelta called with an argument seconds as negative time.altzone, return the result.   if not,
  call the method node.render with an argument context, return the result.
  if not,
  call the method shutil.copyfileobj with 2 arguments: extracted and outfile.
  define the function normalize_newlines with an argument text.
  asvar is None.
  define the method reader_enters with an argument self.
  all_unique_checks is union of all_unique_checks set and unique_checks set.
  df is an instance of DateFormat class, created with an argument value.
  return value under key key of self dictionary
  input_type is None.
  raise an exception.
  define the method __setitem__ with 3 arguments: self, key and value.
  if data is not None,
  and store it in the value of the dictionary response under the key 'ETag'.   return response
  from __future__ import unicode_literals into default name space.
  call the function vars with an argument options, substitute the result for cmd_options.
  call the function templatize with 2 arguments: src_data and sliced orig_file, without first 2 elements, substitute the result for content.
  append a tuple with 2 elements: f and f with first occurrence of the path replaced with an empty string, to self.choices.
  where '%s' is replaced with subject.   substitute i for p.
  call the function pformat with an argument value, return the result.
  call the function zlib.decompress with an argument data, substitute the result for data.
  if not,
  if p is greater or equal to integer 0,
  call the function ungettext with 3 arguments: singular, plural and number, return the result.
  get the value under the 'database' key of the options dictionary, substitute it for self.database.
  return an instance of BoundField class, created with arguments self, field and name.
  import module sys.
  if not,
  if index is not None,
  define the method value_from_datadict with 4 arguments: self, data, files and name.
  call the function allow_lazy with 2 arguments: normalize_newlines and six.text_type, substitute the result for normalize_newlines.
  evaluate the function bytes with the argument s, and return the result.
  if not,
  return self.file.size.
  skip this loop iteration,
  set old_method_name attribute of the base object to the result of the function wrapper called with an argument new_method.
  decorator deconstructible,
  from django.conf import settings into default name space.
  call the method self.open()
  raise a NotImplementedError with an argument string
  try,
  raise an base.SerializationError exception with argument string "Non-model object (%s) encountered during serialization",
  define lambda function with self class instance as the argument, lambda function body encapsulates the call to the method,
  define the method __init__ with arguments self, content and name defaulting to None.
  import rlcompleter.
  do nothing.
  define the method _start_relational_field with arguments self and field.
  if length of self.dicts is equal to an integer 1,
  define the method handle_fk_field with arguments self, obj and field.
  help is a tuple containing a string "Runs the command-line client for specified database, or the default database if none is provided.".
  replace '%s' in string "### %s = %s" with key and value under the key key of the user_setting dictionary, append it to the output.
  return value.
  instantiate Header class with localpart and encoding, convert it to a string, substitute the result for localpart.
  subtract length of hextet from 4, create a string with previous result number of character '0', append hextet to it,
  raise an TemplateSyntaxError exception with an argument string "'for' statements should use the format 'for x in y': %s",
  return nothing.
  define the function popen_wrapper with 2 arguments: args and os_err_exc_type set to CommandError.
  define the method create_variable_node with 2 arguments: self and contents.
  substitute value under 'warning' key of kwargs dictionary for warning.
  from django.core.exceptions import ImproperlyConfigured into default name space.
  call the method render from the base class of the class NullBooleanSelect, with 4 arguments: name, value, attrs and choices,
  call the method self._text_words with 2 arguments length and truncate, return the result.
  try,
  return a tuple with 3 elements: copyreg._reconstructor, tuple with 3 elements: self.__class__, object and None,
  substitute instance._meta for opts.
  call the function middleware_method with the request and response as the arguments, assign the result to response.
  set field interesting for this class instance to interesting_cdata from module _html_parser.
  from __future__ import unicode_literals into default name space.
  call the function import_module with an argument app_name.
  call the function force_text with an argument value, substitute the result for text_value.
  call the method date_value.strftime with an argument input_format, return the result.
  wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string " OK" as a argument.
  val is None.
  try,
  return ZERO.
  do nothing.
  define the method nud with 2 arguments: self and parser.
  derive the class Loader from the BaseLoader base class.
  call the method bytes_to_text with 2 arguments: default and self.encoding, substitute the result for default.
  substitute locale_dir for self.locale_dir.
  get the attribute 'Media' of the cls object, if it exists substitute it for definition, if not definition is None.
  raise an exception.
  from datetime import datetime,  timedelta and tzinfo into default name space.
  return boolean True, otherwise return boolean False.   define the function make_aware with 2 arguments: value and timezone.
  call the method self._text_chars with 4 arguments: length, truncate, text and truncate_len, return the result.
  call the method self.clean with value as argument, substitute the result for cleaned.
  substitute element at self.pos index of self.tokens for retval.
  derive the class UnrecognizedArchiveFormat from the ArchiveException base class.
  define the function patch_response_headers, with response and cache_timeout with None as default value, as arguments.
  substitute content_type_extra for self.content_type_extra.
  otherwise if self.verbosity is greater than integer 0,
  if self.verbosity is greater or equals integer 2 and fixture_files_in_dir is false,
  return sites.
  if subcommand is contained in no_settings_commands,
  try,
  call the function lazy with 2 arguments: lambda function with unpacked dictionary kwargs as an argument and return value an instance of NumberAwareString class and NumberAwareString, call the result with an argument unpacked dictionary kwargs, substitute the result for proxy.
  define the method add with 5 arguments: self, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
  return attrs.
  args is a string '[fixture ...]'.
  from django.utils.safestring import mark_safe into default name space.
  substitute form.cleaned_data for cleaned_data.
  substitute empty_label for self.empty_label.
   if _serializers is false,
  check_for_language is lambda function that returns boolean True for every argument x.
  and _, respectively.   if file_ is true,
  get the value under the BLOCK_CONTEXT_KEY key of the context.render_context dictionary, substitute it for block_context.
  define the method __mod__ with 2 arguments: self and rhs.
  call the method dot_re.sub with 2 arguments: char and src, return the result.
  return potfiles.
  substitute list with an element block_name for parser.__loaded_blocks.
  try,
  if not,
  if first element of str_number equals a string '-'.
  derive the class CheckboxChoiceInput from the ChoiceInput base class.
  substitute string 'checked' for value under the 'checked' key of final_attrs dictionary.
  concatenate name and string '_id', return it.
  return an empty string.
  return value.
  skip this loop iteration.
  return a string "<Variable Node: %s>", substitute '%s' with self.filter_expression.
  define the function time with 2 arguments value and arg set to None.
  if value is not an instance of list or tuple types,
  compile regex from the raw string '(\d{4})-(\d\d?)-(\d\d?)$', substitute it for RE_DATE.
  if third element of bits equals a string 'parsed',
  remove dirname key from dirs.
  convert host to lowercase.
  substitute paginator for self.paginator.
  call the method text.splitlines with an argument boolean True, for every line in the result,
  sum sign and hhmm, substitute the result for name.
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  try,
  call method mail.attach_alternative as html_message and string 'text/hmtl' as arguments.
  call the method middleware.process_view with 4 arguments: request, view_func, args and kwargs, substitute the result for result.
  from django.template.base import Lexer, Parser, tag_re, NodeList, VariableNode and TemplateSyntaxError into default name space.
  break the loop execution.
  define the function file_complete with arguments self and file_size.
  define the function build_instance with 3 arguments: Model, data and db.
  method, substitute the result for file_name.   get the value under the 'content-type' of the meta_data dictionary, if it exists assign it to content_type, content_type_extra,
  self.activated is boolean True.
  skip this loop iteration,
  sort elements formatted, join them in the list separated with newline character, substitute the result for formatted.
  define the function dummy with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  ns_resolver is class instance of a class RegexURLResolver, created with 2 arguments: ns_pattern and resolver.url_patterns.
  return boolean False.
  substitute name for new_attr.
  call the s.serialize method with arguments queryset and unpacked dictionary options.
  input_type is None.
  if labels is true and f.name is contained in labels,
  call the function constant_time_compare with 2 arguments: val1 and val2.
  call the method self.handle_fk_field with arguments obj and field.
  from wsgiref.util import FileWrapper
  and prefix as node.prefix.   call the method node.replace with an argument decorated.
  decorator function receiver with an argument setting_changed,
  import module os.
  call the function register_serializer with 3 arguments: format, value under the format key of the BUILTIN_SERIALIZERS dictionary and serializers.
  'and "requires_system_checks", which is illegal. Use only "requires_system_checks".', replace '%s' for self.__class__.__name__.   call the method self.requires_system_checks with an argument: self.requires_system_checks if has_new_option is true,
  out is an instance of StringIO class, created with an empty string as an argument.
  if domain equals a string 'djangojs' and file_ext is contained in command.extensions,
  return an instance of ModelChoiceIterator class, created with an argument self.
  call the method f.post_create_sql with arguments: style and model._meta.db_table, extend the output with the result.
  return EndToken.
  call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for _default.
  call the function sanitize_address with arguments addr and email_message.encoding, for every addr in return value of the function email_message.recipients, store the results in a recipients list.
  skip this loop iteration.
  call the function _generate_cache_header_key with key_prefix and request as arguments, substitute the result for cache_key.
  try,
  if name is contained in MEDIA_TYPES,
  define the method handle_field with arguments self, obj and field.
  call the method logging.getLogger, substitute the result for root.
  from __future__ import unicode_literals into default name space.
  and token.   otherwise if token.token_type equals integer 1,
  for every __ in iterator,
  if initial is None,
  call the method self.fetch_command with first element of options.args as argument, on the result call the method print_help,
  call the function force_text with arguments self and _regex, substitute the result for regex.
  separated with string ', ', substitute '%s' with self.sequence, substitute '%d' with length of self.nodelist_loop,   substitute '%s' with reversed_text.   define the method __iter__ with an argument self.
  define the function npath with an argument path.
  label_for is an empty string.
  get the hash value of the tup, substitute it for self.hashvalue.
  return the result.   define the method id_for_label with 2 arguments: self and id_.
  replace "%s" from the string ' class="%s"' with css_classes, substitute it for html_class_attr.
  define the method bound_data with arguments self, data and initial.
  call to the resolver.resolve method with request.path_info as an argument.
  if obj is an instance of datetime.datetime,
  return self.html_name.
  from django.utils.encoding import force_bytes into default name space.
  otherwise if ch equals a string '[',
  raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
  add self.form.error_css_class to extra_classes set.
  return None.
  substitute if _locs_ is None for _locs_.
  from django.http import Http404 into default name space.
  call the method self.validate_unique.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  and string 'ignore', call the method decode on the result with an argument string 'ascii', substitute the result for value.   call the method re.sub with 3 arguments: string '[^\w\s-]', empty string and value, strip the result of whitespaces from both ends,
  evaluate function has_bom with po_path as argument.
  increment stats dictionary value under the MISSES key by integer 1.
  call the function io.open with 3 arguments: work_file, string 'w' and encoding set to settings.FILE_CHARSET as arguments,
  __all__ is an tuple containing string 'SelectDateWidget'.
  substitute attrs and choices for self.attrs and self.choices
  parsed is boolean False.
  and generic_lang_code.   call the function re.compile with an argument string '\s*\n\s*', substitute the result for trim_whitespace_re.
  default_error_messages is an dictionary with an initial entry: result of the function _ called with an argument string,
  value under the self key of state_frame dictionary is None.
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  call the method final_output.extend with an argument output.
  self.COOKIES is an empty dictionary.
  msg is a tuple containing string "\nYou have installed Django's auth system, and don't have any superusers defined.\nWould you like to create one now? (yes/no): ".
  substitute _urllib_error_moved_attributes for Module_six_moves_urllib_error._moved_attributes.
  finally perform,
  substitute '%r' with name and compile_function.   define the method tag_function with 2 argument: self and func.
  if ValueError exception is caught,
  derive the class Command from the AppCommand base class.
  return result.
  for every c in return value of the method response.cookies.values,
  yield node as an return value of a generator.
  define the method _set_choices with arguments self and value.
  call the method os.path.splitext with an argument base, substitute the result for base and ext, respectively.
  TRANSLATOR_COMMENT_MARK is a string 'Translators'.
  append value under the key v of foreground dictionary to code_list.
  bits is an empty list.
  raise an CommandError exception with an argument string "couldn't handle %s template %s.", replace '%s' with self.app_or_project and template.
  attrs is a dictionary containing 1 entry: return value of the smart_text function with argument obj._meta for 'model'.
  call the function _ with an argument string 'a.m.', return the result.
  builtins is an dictionary with 3 initial entries: boolean True for 'True', boolean False for 'False' and None for 'None'.
  call the method self.check_test with an argument value, if it evaluates to true,
  define the method values with an argument self.
  convert o to an string, return it.
  raise an ValueError with an argument string 'empty_label list/tuple must have 3 elements.'.
  if model is contained in created_models,
  template_with_initial is a string '%(initial_text)s: %(initial)s %(clear_template)s<br />%(input_text)s: %(input)s'.
  call the method sys.stderr.close.
  call the function os.kill with os.getpid() and negative exit_code as arguments.
  if not,
  raise an AttributeError with an argument string "no such move, %r", formated with a tuple with an element name.
  call the function ugettext with an argument string "%s KB", substitute '%s' with the result of the call to the function,
  if settings.USE_TZ is true,
  call the function is_library_missing with an argument taglib_module, if it evaluates to true,
  substitute elements of middle from the beginning to the negative length of closing, for middle.
  if ImportError, renamed to e, exception is caught,
  substitute '%s' in 'Not Found: %s' with request.path, extra is an dictionary with two pairs of elements 'status_code' with value 404,
  substitutions dictionary.   call the function mark_safe with an argument template, formated with substitutions, return the result.
  call the function vars with an argument options, substitute the result for cmd_options.
  for every name in loggers,
  raise a SerializerDoesNotExist exception with an argument format.
  call the method self.invalid_block_tag with 3 arguments: token, command and parse_until.
  decorator deconstructible,
  return boolean False.
  import module os.
  filemsg is an empty string.
  if cword equlals a integer 1,
  define the function check_for_language with an argument lang_code.
  define the method __init__ with an argument self.
  from django.middleware.csrf import get_token into default name space.
  call the method __init__ form the base class of the Command class.
  define the function default_key_func with 3 arguments, key, key_prefix and version.
  define the method __init__ with 4 arguments: self, content set to an empty list, unpacked list args and unpacked dictionary kwargs.
  define the __init__ method with arguments: self, unpacked list args and unpacked dictionary kwargs.
  call the function new_method_proxy with an argument operator.getitem, substitute the result for __getitem__.
  define the method fixture_dirs with an argument self.
  import module subprocess.
  if default_list is None,
  if data is not None or files is not None, self.is_bound is boolean True, otherwise it is boolean False.
  convert result of the method self.__iter__ into a list, return element at the idx index.
  define the method strptime with arguments self, value and format.
  modified_code is None.
  call the method bytes_to_text with 2 arguments: key and self.encoding, substitute the result for value.
  substitute it for self.view_name.   define the method __getitem__ with arguments self and index.
  define the method write_message with arguments self and message.
  if timeouts is None return None, otherwise return the sum of function time.time return value and timeout.
  if not,
  define the function emit_pre_migrate_signal with 4 arguments: create_models, verbosity, interactive and db.
  call the traceback.extract_tb method with argument tb, substitute the first element of last row of the result to filename.
  for every attr in _urllib_request_moved_attributes,
  if callback is an callable object,
  modify value at the key 'Location' of the dictionary response by applying function request.build_absolute_uri on it.
  return boolean False.
  define the method new_file with arguments: self, field_name, file_name, content_type, content_length, charset set to None,
  if not,
  self.object_name is a string 'CacheEntry'.
  for every filename in gen_filenames(),
  compile regex from raw string '(?P<hour>\d{1,2}):(?P<minute>\d{1,2})(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?',
  if value under 'plain' key of the options dictionary is true,
  call the function format_html_join twice, first time with 3 elements: an empty string, string ' {0}="{1}"'
  meta is an instance of a class named 'Meta', derived from the object base class, without any fields.
  import module sys.
  call the function StringIO with an argument stream_or_string, substitute the result for stream.
  raise a exception of CommandError class, with string "App '%s' does not have migrations" with '%s' replaced with app_label as the argument.
  define the method add_arguments with self class instance and parse as the arguments.
 return self._encoding.
  if not, sself.empty_value is an empty string.   call the method __init__ with 2 arguments: unpacked list args and unpacked dictionary kwargs,
  sum best_doublecolon_start and best_doublecolon_len, substitute the result for best_doublecolon_end,
  if iri is not initialized,
  raise an exception.
  decode with an argument string 'ascii', substitute the result for name.   take elements of p from index i incremented by 1 to the end, strip the result of the whitespaces, substitute it for value.
  self.path_info is an empty string.
  raise KeyError exception with an argument key.
  call the function cleanup_url with an argument url, assign the result to filename and display_url, respectively.
  from django.utils.html import conditional_escape and format_html into default name space.
  define the method extend_nodelist with 4 arguments: self, nodelist, node and token.
  call the method dig1.digest, use the result as an argument for the call to the function dig2.update.
  if result is not None,
  do nothing.
  method lru_cache.lru_cache with an argument maxsize set to None, as a decorator,
  substitute self.__class__ for obj.__class__.
  get the value under the 'list' key of options dictionary, if key doesnt exist return False, if the return value is True,
  derive the class SafeMIMEText from the MIMEMixin and MIMEText base class.
  substitute value under the NEXT key of the oldroot dictionary for root and first element of nonlocal_root.
  replace '%(size)d with bytes, substitute the result for value.   otherwise if bytes is smaller than MB,
  if alias is not contained in setting.CACHES,
  unpacked list field_value as an argument, substitute the result for obj.   get field.rel.field_name attribute of the object obj, substitute it for value.
  do nothing.
  substitute value.pk for value.
  define the method det_valid_name with arguments self and name.
  print a string "In the tar file %s the member %s is invalid: %s", where '%s' is substituted with: name, member.name and exc, respectively.
  action set to string 'append', default as an empty list and help set to a string:   'The file name(s) to render. Separate multiple extensions with commas, or use -n multiple times.'.   define the method handle with 5 arguments: self, app_or_project, name, target set to None and unpacked dictionary options.
  decorator stringfilter,
  try,
  LIGHT_PALETTE is a string 'light'.
  define the method _cache with self class instance as an argument.
  import stat.
  call the method models.signals.post_migrate.send with 5 arguments: sender set to app_config, app_config set to app_config,
  expires is None.
  if value is false,
  if 'warning' is contained in kwargs,
  decrement self.number by one, multiply it by self.paginator.per_page, increment the result by one, return it.
  substitute token.source for node.source.
  call the safe_join function with arguments self.location and name, substitute it for path.
  raise an CommandError exception with an argument string "Unknown command: %r", with '%r' replaced by name.
  and string 'ascii' and call the function to_bytes with 2 arguments: value and string 'latin-1',   join the previous 2 results into a string, separated by ': ', append it to a list, substitute the resulting list for headers.   join headers into a string, separated by string '\r\n'.
  call the method self._lib.Client with argument self._servers.
  call the function _load_serializers.
  return check.
  append string ".moves.urllib_response" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for response.
  integer 0 and integer 0.   try,
  if this_bases is None,
  define the initialization method __init__ with self, table and params as arguments.
  return an empty string,
  if token.token_type equals integer 0,
  for f in sorted list of the files in the self.path directory,
  and return value of the function flatatt called with an argument final_attrs, substitute the result for output.   call the method self.render_options with 2 arguments: choices and list with an entry, value, substitute the result for options.
  if not, self.coerce is an identity lambda function with an argument val.   if 'empty_value' key of the kwargs dictionary exists remove it and substitute its value for self.empty_value,
  return nothing.
  define the method _get_scheme with self class instance as argument.
  flat is an empty dictionary,
  substitute producer for self._producer.
  call the method self.validate_key with argument key.
  if value is not contained in result,
  derive the class EmailBackend from the BaseEmailBackend base class.
  define the method run_checks with self class instance, app_configs defaulting to None, tags defaulting to None as argument.
  call the method callback.rindex with an argument character '.', substitute the result for dot.
  define the method compress with arguments self and data_list.
  evaluate the boolean expression, if first three characters of sample equals to string of bytes '\xef\xbb\xbf\',
  define the method page with self class instance and number as arguments.
  call the method lookups.appendlist with 2 arguments: name and a tuple containing 3 elements: new_matches, sum of p_pattern and pat,
  define method clear_cdata_mode, with self class instance as an argument.
  substitute is_reversed for self.is_reversed.
  if it is not equal to stat.S_IREAD,   raise an exception.
  from __future__ import unicode_literals into default name space.
  help is a tuple containing a string "Output the contents of the database as a fixture of the given "
  define the method resolve_error_handler with arguments self and view_type.
  if confirm is not equal to string 'yes' or string 'no',
  raise a ValidationError exception with arguments self.message and code set to self.code.
  define the method __setitem__ with 3 arguments: self, key and value.
  get field.name attribute of obj, convert it to a string, substitute it for the value under the filed.name key of self._current dictionary.
  for every accessor_name and object_list is return value of the method self.m2m_data.items.
  define the function safeseq with an argument value.
  if message is not an instance of the ValidationError class,
  if ext is false and content_type is true,
  call the method self.build_attrs with 3 arguments: attrs, type as a string 'checkbox', name as name, substitute the result for final_attrs.
  cal the method re.subn with 3 arguments: raw string '\W', string '_' and new_name.
  write ']' to the self.stream file stream.
  call the method handler.endElement with an argument string 'author'.
  substitute second element of bits for tag.
  if incomment is true,
  return s.
  define the function get_language_from_request with 2 arguments: request and check_path set to boolean False.
  define the method __init__ with 6 arguments: self, regex, urlconf_name, default_kwargs set to None, app_name set to None and namespace set to None.
  with previous result and list containing cull_num, respectively as arguments.   call the method cursor.execute with string "DELETE FROM %s WHERE cache_key < %%s" as argument,
  replace '%s' with: elements of last element of parts joined into a string and last element of parts.   if not,
  otherwise if intrans is true,
  objects_in_fixture is integer 0.
  if self.timezone is false,
  from django.views.debug import ExceptionReporter and get_exception_reporter_filter into default name space.
  strip t.contents from the left side of whitespaces, if the result starts with TRANSLATOR_COMMENT_MARK,
  if settings.STATIC_URL is None,
  substitute old_method_name for self.old_method_name.
  if '::' is not contained in ip_str and number of occurrences of ':' in ip_str is not equal to integer 7,
  define the protected method _cull with self class instance, db, cursor and now as arguments.
  call the function make_key with 3 arguments: args, kwds and typed, substitute the result for key.
  call the function time_format with 2 arguments: value and arg, return the result.
  if not,
  update self dictionary with updates.
  substitute length of s for end.
  from ctypes import sizeof, c_ulong, c_void_p, c_int64, Structure, Union, POINTER, windll and byref into default name space.
  raise an TemplateSyntaxError exception with an argument string "Invalid syntax in widthratio tag. Expecting 'as' keyword".
  derive the class ImageField from the base class FileField class.
  substitute deactivate for self.deactivate.
  define the method add_arguments with 2 arguments self and parser.
  define the method __str__ with an argument self.
  substitute index for end.
  if AttributeError exception is caught,
  if self.close_called is False,
  instantiate RelatedObject class with 3 arguments: cls.fk.rel.to, cls.model and cls.fk,
  get the value under the 'format' key of the options dictionary, substitute the result for format.
  if self.allow_folders is true,
  convert the result into a string and substitute it for value.   if not,
  subcommand is a string 'help'.
  substitute choice for choice_value and choice_label, respectively.
  CheckboxInput, Select, NullBooleanSelect, SelectMultiple, DateInput, DateTimeInput, TimeInput, SplitDateTimeWidget,   SplitHiddenDateTimeWidget and FILE_INPUT_CONTRADICTION.   from django.utils import formats into default name space.
  substitute self.version for version.
  self.pointer is integer 0.
  flush zfile stream buffer.
  raise an LookupError with an argument lang_code.
  call the method self.merge with an argument translation.
  try,
  substitute the result for formatters dictionary value under name key.   if StandardError, renamed to e, exception is caught,
  define the method ipython with an argument self.
  call the function format_html with 2 arguments: string '<optgroup label="{0}">' and return value of the function force_text,
  return value.
  return self.
  if Exception, renamed to e, exception is caught,
  if year is lesser than integer 70,
  if not,
  substitute value for field.name key of self._current dictionary.
  get the value under the 'interactive' key of the options dictionary, substitute it for self.interactive.
  call the method _trans.ngettext with 3 arguments singular, plural and number.
  substitute conditional_escape for escaper.
  return value.
  derive the class FirstOfNode from Node base class.
  if timeout equals to DEFAULT_TIMEOUT,
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  call the method _trans.npgettext with 4 arguments context, singular, plural and number.
  call the BaseConverter function with BASE16_ALPHABET as argument, store the result in base16.
  called with arguments: filename and pattern.   call the function ignore with an argument pattern, for every pattern in ignore_patterns,
  define the method close with self and dictionary pairs of elements kwargs.
  skip this loop iteration.
  self._post is an instance of QueryDict created with arguments: an empty string and encoding set to self._encoding,
  import module warnings.
  call the function smart_text with an argument value, strip the result of whitespaces from both ends and substitute it for value.
  substitute max_width for self.max_width.
  left justify value under the 'microsecond' key of the kw dictionary, in the field of width 6, fill the rest with '0',
  as_form is boolean False.
  return default_key_func.
  for every e in errors convert e into a string and append it to a string '  * ',
  no_settings_commands is a list containing entries: 'help', 'version', '--help', '--version', '-h', 'compilemessages', 'makemessages',
  define the method to_python with arguments self and value.
  if number is greater than self.num_pages,
  derive the class Command from the base class BaseCommand.
  define the method __init__ with 2 arguments: self and obj.
  for every migration_name in migration_names,
  return guessed_path.
  for every path in paths,
  leave_locale_alone is boolean True.
  define lambda function that returns self.file.isatty field, use it as an argument for property function, put the result in isatty.
  substitute state for self.state.
  error_messages is an empty dictionary.   substitute error_message for value under the 'invalid' key of the error_messages dictionary.
  return an instance of a class WithNode, created with 4 arguments: None, None, nodelist and extra_context as extra_context.
  of the _DJANGO_DEPRECATED_LOCALES dictionary, RemovedInDjango19Warning and stacklevel set to integer 2.   call the function translation with an argument language, substitute the result for _active.value.
  return nothing.
  derive the class EntitiesForbidden from the DefusedXmlException base class.
  call the method self.nodelist_true.render with an argument context, return the result.
  if not,
  return the value under the is_dst key of the _time.tzname dictionary.
  for every arg in s, call the function force_text with arg, encoding, strings_only and errors as arguments,
  if not,
  replace all occurrences of symbol '_' in string k with symbol '-', use new string as key to find a value in dictionary cc,
  if second element of sys.version_info is smaller than or equal to integer 1,
  MIN_NUM_FORM_COUNT is a string 'MIN_NUM_FORMS'.
  substitute the result for key.   pdict is an empty dictionary.
  import_module function, substitute the result for module.   return an instance of the module.Command class.
  for every frag in name.
  define the method _get_context_stack_frame with 2 arguments: self and context.
  define the function modelform_defines_fields with an argument form_class.
  return media.
  if initial is None,
  field_notes is an empty list.
  if self.queryset is not None,
  sum bottom and self.per_page, substitute the result for top.
  if condition is not None,
  convert max_entries into a string, substitute it for self._max_entries.
  define the method __repr__ with an argument self.
  append string "System check identified %s (%s silenced)." to msg, replace first '%s' for: string "no issues",
  basedirs is a list containing tuple with strings, 'conf/locale' and 'locale'.
  if errors is true,
  decorator stringfilter,
  define the method open with argument self.
  replace '%s' in string '<%s list>' with __class__.__name__ field of first element of self.urlconf_name, substitute it for urlconf_repr.
  try,
  derive the class Command from the AppCommand base class.
  try,
  call the method s.render with 3 arguments: field string formated with name, val and local_attrs, substitute the result for select_html.
  define the function date_format with 3 arguments: value, format set to None and use_l10n set to None.
  define the method __new__ with 3 arguments: cls, unpacked list args and unpacked dictionary kwargs.
  raise an SystemRestart exception,
  if not,
  created with 2 arguments: required as boolean False and widget set to HiddenInput.   call the method __init__ from the base class of the class ManagementForm, called with 2 arguments: unpacked list args,
  convert timeout into an integer, return it.
  if the key doesnt exists substitute boolean False for self.use_natural_primary_keys.   call the method self.start_serialization
  if empty_label is not None,
  call the method translation._info.copy, substitute the result for self._info.
  from django import http into default name space.
  define the method inner_run with 3 arguments: self, unpacked list args and unpacked dictionary options.
  if name is true, substitute it for function_name, if not get '_decorated_function' attribute from func object, if it exists,
  raise an Resolver404 exception with an argument dictionary containing 2 entries: new_path for 'path' and tried for 'tried'.
  return value under the 'wsgi.url_scheme' key of self.environ dictionary.
  substitute value under the number key of the rhs dictionary for number_value.
  call the method self._should_delete_form with an argument, if it evaluates to true,
  request_repr is a string "unavailable".
  if s is not an instance of the object Exception,
  timeout is a integer -1.
  for every attr in _urllib_parse_moved_attributes,
  define the method is_ajax with an argument self.
  use the result as an argument for the call to the function datetime.fromtimestamp, return the result.   define the function get_storage_class with argument import_path=None defaulting to None.
  format self.month_field string with name, use it as the key for the data dictionary, substitute the result for m.
  evaluate binary expression with 4 operands: os.O_WRONLY, binary or os.O_CREAT, binary or os.O_EXCL,
  call the self._load_post_and_files method.
  if any resulting element is true, return boolean True, otherwise return boolean False.   convert os.sep into a string and append '*' to it, substitute the result for dir_suffix.
  if not,
  substitute newline character for newline.
  if s is not an instance of the object six/string_types,
  define the method __init__ with 7 arguments: self, request, dict_ set to None, processors set to None, current_app set to None,
  default_error_messages is an dictionary containing entry: return value of the function _ called with an string 'This field is required.' for 'required'.
  define the method load with self class instance and rawdata as arguments.
  self.content_type_extra is None.
  return template_name.
  if self.__language equals settings.LANGUAGE_CODE or self.__language equals a string "en-us",
  raise an ValueError exception with an argument string "dictionary doesn't specify a version".
  raise an TemplateSyntaxError exception with an argument string "next-to-last argument to 'regroup' tag must be 'as'".
  evaluate the function BytesIO with argument chunk, substitute it for chunk_buffer.
  derive the class override from the object base class.
  define the method _add_fallback with an argument self.
  define the function _add_doc with 2 arguments: func and doc.
  try,
  if striped x by '.' character is not contained in ignored, for every x in ext_list put x into a set, return the resulting set.
  if value is an instance of SafeData, safe is boolean True, otherwise it is boolean False.
  define the method __init__ with 2 arguments: self and text.
  call the method __init__ from the base class of the class Select, with an argument attrs.
  try,
  call the method parser.add_argument with arguments: string 'args' and nargs set to '*'.
  if only_initial is false,
  delete the form.cleaned_data dictionary entry under the field key.
  call the method cmatch.group with an argument integer 1, format with the result string ' _(%s) ', write it to out.
  call the method self.configure_logger with 3 arguments: name, value under name key of loggers dictionary and boolean True.
  if os.name equals string 'nt',
  define the function import_module with 3 arguments: name and package set to None.
  define the method render with 4 arguments: self, name, value and attrs set to None.
  return self.find_template_cache dictionary value under the key key.
  call the unsign method from the base class of the TimestampSigner class with an argument value, substitute the result for result.
  call the method __init__ from the base class of the class IntegerField, with arguments unpacked list args and unpacked dictionary kwargs.
  renamed is boolean True.
  call the method bit.group with an argument integer 0, yield the result.
  if not,
  call the method shell.mainloop.
  return value under the name key of the files dictionary, if it doesnt exists, return None.
  define the method set_many with self, data, timeout set to DEFAULT_TIMEOUT and version set to None as arguments.
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  if not,
  define the method __iter__ with an argument self.
  raise an StopIteration.
  if TypeError or ValueError exceptions are caught,
  return decorating_function.
  define the function _is_shorthand_ip with an argument ip_str.
  try,
  if fname doesnt start with self._dir and fname file path doesnt exists,
  define the method __init__ with an argument self.
  append string 'Field name made lowercase.' to field_notes.
  define the method build_absolute_uri with an arguments self and location set to None.
  from django.utils import lru_cache into default name space.
  value under 'localize' key of kwargs dictionary is boolean True.
  if field.help_text is true,
  import module tempfile.
  called with sep appended to base_path as an argument and results of the function normcase called twice with final_path,   and base_pah are not equal and directory name of the result of the function normcase called with an argument base_path,   if not equal to the result of the function normcase called with an argument base_path.   raise an ValueError with an argument string 'The joined path (%s) is located outside of the base path component (%s)',
  from django.utils.encoding import force_st into default name space.
  self.abstract is boolean False.
  if META_override is not None, or otherwise generated with the call to the function pformat with an argument request.META.   if Exception exception is caught,
  define the method validate_unique with an argument self.
  do nothing.
  register.tag decorator,
  define the function sql_destroy_indexes with 3 arguments: app_config, style and connection.
  import module warnings.
  consume_next is boolean True.
  call the method __new__ with an argument cls from the base class of the klass function.
  default string value, substitute it for value.   return value if six.PY2 is true, if not return value.encode(ISO_8859_1).decode(UTF_8).
  and help set to 'Fixture labels.'.   call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store', dest as a string 'database',
  subtract decimals from digits, substitute the result for whole_digits.
  define the method handle with 3 arguments: self and unpacked dictionary options.
  func is an instance of TemplateLoader class, created with unpacked list args.
  break from the loop execution.
  self.choices is an empty list.
  call the method self.Z, substitute the result for seconds.
  if value has an '__iter__' attribute and value is not an instance of bytes or six.string_types class.
  substitute windll.kernel32.LockFileEx for LockFileEx.
  evaluate the function import_string with key_func as argument, return the result.
  if kwarg is true,
  get the value under the LANGUAGE_SESSION_KEY key of the request.session dictionary, substitute it for lang_code.
  from django.conf import settings into default namespace.
  second element of l for every l in return value of the self._files.lists   call the method f.close.
  and lambda function returning x for x, substitute the firs element of resulting list for style_func.   call the function style_func with an argument msg, use the result as an argument for the call to the function force_str,
  call the os.utime function with arguments dst and tuple containing 2 elements: st.st_atime and st.st_mtime.
  if m is false and p is lesser than integer 0,
  derive the class MediaDefiningClass from the type base class.
  status_code is an integer 302.
  if not settings.DEBUG is true and settings.ALLOWED_HOSTS is false,
  try,
  call the function six.reraise with 3 arguments: exc_type, exc_value and third element of the result of the method sys.exc_info.
  define the method close with argument self.
  join elements of output in a string, separated by newlines, return it.
  derive the class MaxLengthValidator form the BaseValidator base class.
  call the function calendar.isleap with an argument self.data.year, if it evaluates to true,
  call the method self.clean, substitute the result for cleaned_data.
  called with 3 arguments: data, files and name, substitute the result for upload.   if self.is_required is boolean false and call to the method value_from_datadict from the instance of CheckboxInput class,
  call the method self.nodelist.render with an argument context, substitute the result output.
  define __del__ method with self as the argument.
  call the method hmac.new with 3 arguments: key, msg set to result of the function force_bytes with an argument value,
  define the method _ipython_pre_100 with an argument self.
  call the method time.mktime with an argument tt, substitute the result for stamp.
  from django.forms.fields import Field and FileField into default name space.
  if name is true, substitute it for self.name, otherwise substitute func.__name__ for self.name.
  unpack dictionary final_attrs, map the values through force_text function with an argument v and convert it to a dictionary, again,
  write data bytes to outfile.
  if value is contained in self.empty_values,
  return self.
  substitute DjangoJSONEncoder for DateTimeAwareJSONEncoder.
  call the params.get method with string 'TIMEOUT' and integer 300 as arguments, use the string 'timeout' and previous result as the arguments for the call to the params.get method, substitute the result for timeout.
  define the function handle_default_options with an argument options.
  call the color_style method, substitute the result for self.style.
  raise an TemplateSyntaxError exception with an argument string "%s requires %d arguments, %d provided",
  derive the class WSGIRequestHandler from simple_server.WSGIRequestHandler and object base classes.
  self.connection is None.
  remove the first element of value under the name key of self.blocks dictionary, return it.
  decorator stringfilter,
  substitute self.queryset for qs.
  append val to self.vals.
  contains_nontext is boolean False.
  obj is an instance of Model class, created with an unpacked dictionary data as argument.
  define the method message_dict with an argument self.
  call the method self.instance.validate_unique with an argument exclude set to exclude.
  substitute fcntl.LOCK_NB for LOCK_NB.
  define the function timesince_filter with 2 arguments value and arg set to None.
  if i-th element of subject is '"' character or "'" character,
  if extra_context is false,
  call the field.rel.to._meta.get_field method with an field.rel.field_name argument, on the result call the method to_python,
  substitute object_list for self.object_list.
  INITIAL_FORM_COUNT is a string 'INITIAL_FORMS'.
  property decorator,
  raise CommandError with an argument string 'Unknown app in excludes: %s', where '%s' is replaced with exclude.
  substitute form.instance for obj.
  define the function address_string with an argument self.
  Meta is an instance of class with name 'Meta', parent base class and fields attrs.
  remove the value under the 'using' key from the options dictionary, assign it to the db, if the entry doesnt exists,
  return flat.
  stderr set to subprocess.PIPE, shell set to boolean True, cwd set to repo_dir and universal_newlines set to boolean True,   as arguments, substitute the result for git_log.   evaluate the method git_log.communicate, substitute first element of the result for timestamp.
  call the method self.iteritems, return the list of results.
  open writer.path file in write mode, with file descriptor as fh, perform the following,
  call the function mark_safe with an argument arg, append it to arg_vals.
  msgs_with_ctxt is a tuple containing 2 elements: string created by concatenating context, CONTEXT_SEPARATOR and singular,
  do nothing.
  return self._request.
  call the method self._delete with argument key.
  substitute self for result.parent.
  if evaluation of the function find_command with self.program as argument equals to None,
  append f.name to exclude.
  import module base64.
  call the method queryset.filter with an argument pk__in set to primary_keys, substitute the result for queryset.
  substitute app_name for self.app_name.
  define the method strftime with 2 arguments: self and fmt.
  convert role to uppercase.
  return an empty string,
  convert number to a string, truncate first element.
  call the function time.strftime with 2 arguments: fmt and and timetuple without the first element,
  join dir_ and return value of the function os.path.dirname called with an argument fixture_name into a valid file path,
  get the position of the self.file file pointer, substitute it for pos.
  if location is None,
  define _get_files method with self class instance as the argument.
  call the method self.style.NOTICE with string "  Your models have changes that are not yet reflected in a migration, and so won't be applied." as an argument, use the result as an argument for the call to the self.stdout.write method.
  substitute WSGIRequest for request_class.
  "Django 1.7 changed the global defaults for the MIDDLEWARE_CLASSES. django.contrib.sessions.middleware.SessionMiddleware,   django.contrib.auth.middleware.AuthenticationMiddleware, and django.contrib.messages.middleware.MessageMiddleware were removed   from the defaults. If your project needs these middleware then you should configure this setting.", obj set to None, and   id set to a string '1_7.W001', put the result into a list and return it.   if not,
  self.literal is None,
  call the method data.find with an argument self._boundary, substitute the result for index.
  find the ending position of the regular expression match of the object match, substitute the result for j.
  if value under the name key of self.cleaned_data dictionary is not None,
  return integer 0.
  call the self._createdir method.
  substitute i-th element of subject for c.
  call the function is_aware with an argument o, if it evaluates to true,
  for every model in app_models,
  return value.
  do nothing.
  filemsg is a string 'file %s, ', where '%s' is replaced with origin.
  try,
  if space equals integer 0,
  call the function template_dir.decode with an argument fs_encoding, substitute the result for template_dir.
  call the function import_string with an argument loader, substitute the result for TemplateLoader.
  return instance of _HashedSeq class, created with an argument key.
  return nothing.
  return val.
  define the method as_bytes with arguments self and unixfrom set to boolean False.
  for every i and item in enumerated iterable values,
  indexes is an empty dictionary.
  if not,
  from email.utils import formatdate into default name space.
  try,
  if IOErro, renamed to e, exception is caught,
  for every app_config in return value of the method apps.get_app_configs,
  return iterator object based on the self.file collection object.
  append app_name to the invalid_apps.
  substitute settings.SECRET_KEY for secret.
  substitute '%s' with ser_fmt, fixture_name and return value of the function humanize called with an argument fixture_dir.   call the method serializers.deserialize with 4 arguments: ser_fmt, fixture, using set to self.using,
  if reason is not None,
  for every filename in files,
  put the results into a list, substitute self.locale_paths for it.   substitute first element of self.locale_paths for self.default_locale_path.
  if string 'DJANGO_AUTO_COMPLETE' is not contained in os.environ,
  call the method self.validate with an argument out.
  get attribute "urlpatterns" form the self.urlconf_module, substitute it for patterns, if the attribute doesnt exist,
  call the method strftime with an argument fmt, from the base class of the type of dt class.
  for every base in reversed order of bases,
  strings "addbase", "urllib" and "urllib.response", result of the function MovedAttribute, called with 3 arguments:   strings "addclosehook", "urllib", "urllib.response", result of the function MovedAttribute, called with 3 arguments:   strings "addinfo", "urllib", "urllib.response" and result of the function MovedAttribute, called with 3 arguments:   strings "addinfourl", "urllib", "urllib.response".   for every attr in _urllib_response_moved_attributes,
  called with value under the 'pubdate' key of the item dictionary.   if value under the 'comments' key of the item dictionary is not None,
  replace all the '%r' with self.level, self.msg, self.hint. self.obj and self.id, respectively, return the result.   define the method is_serious with argument self.
  call the threading.local method, assign the result to trans_real._active.
  multiply offset.days, integer 24 and integer 60, sum the result with floored result of dividing offset.seconds by integer 60,
  msgid is a string '<%s.%s.%s%s@%s>', replace '%s' with utcdate, pid, randint, idstring and idhost, respectively.
  return an empty string.
  break from the loop execution.
  called with an argument string 'Unknown', tuple with 2 elements: string '2' and return value of the function ugettext_lazy,   called with an argument string 'Yes' and tuple with 2 elements: string '3' and return value of the function ugettext_lazy,   called with an argument string 'No'.   call the method __init__ from the base class of the class NullBooleanSelect, with arguments attrs and choices.
  get the value filed from the return value of the call to the c.key with the argument key, add the value to the cookiedict under the key key.
  define the function validate_ipv46_address with an argument value.
  for every k and v in items of dictionary kwargs, respectively,
  self.field.choice_cache is a list containing results of the method self.choice called with an argument obj,
  from email.mime.text import MIMEText into default name space.
  return self.source.
  substitute exclude for value under the 'exclude' key of attrs dictionary.
  call the method self.extra_headers.get with arguments: string 'To' and joined string from self.to elements separated by ', ',
  for every event and node in self.event_stream,
  if template doesnt have a 'render' attribute,
  if not,
  try,
  import module time as _time.
  if i is equal to len_values decremented by 1, value under the 'last' key of the loop_dict dictionary is boolean True, otherwise it is False.
  if string 'help' is contained in options,
  if default is None,
  derive the class LocMemCache from the base class BaseCache.
  derive the class Node form the base class object.
  do nothing.
  call the file.__exit__ method on self with exc, value and tb as the arguments.
  call the method self.clear_checkbox_id with an argument checkbox_name, substitute the result for checkbox_id.
  if name equals a string 'content-disposition',
  if value is not an instance of bytes or six.text_type classes,
  import module signal.
  join elements of comment_notes into a string, separated by whitespaces, append it to the string ' #', append the result to field_desc.
  raise an TemplateSyntaxError exception with an argument string 'The %r option was specified more than once.',
  raise a NotImplementedError with an argument string 'subclasses of Deserializer must provide a __next__() method'.
  if string '()' is contained in config,
  substitute first element of the result for param and value.   if param is not in params and varkw is None,
  call the method parser.parse with an argument tuple with an element string 'endifchanged', substitute the result for nodelist_false.
  call the function parse_boundary_stream with 2 arguments: sub_stream and integer 1024, yield the result as the return value of the generator.
  import module socket.
  derive the class Info from base class CheckMessage.
  if self.field.required is true and self.form has an attribute 'required_css_class' ,
  return rv.
  substitute self.__offset.seconds for offset.
  define the function regroup with 2 arguments: parser and token.
  if content is not None raise an error.
  call the method self.open.
  loader is an instance of MigrationLoader class, created with 2 arguments: None and ignore_no_migrations set to boolean True.
  return result.
  define the method __len__ with an argument self.
  substitute model._meta.app_label for app.
  append string "Field renamed because it started with '_'." to field_notes.
  substitute the '%s' in the string "The view %s.%s didn't return an HttpResponse object. It returned None instead.",
  decorator function register.filter with an argument is_safe set to boolean True.
  update widget.attrs dictionary with extra_attrs.
  is smaller than self.min_num,   raise an ValidationError with 2 arguments: return value of the function ungettext with 3 arguments:
  separated by newline, substitute it for msgs.   if not,
  if filters is true,
  define the method pop with 3 arguments: self, key and default set to None.
  raise an TypeError with an argument s.
  return result.
  derive the class ContentNotRenderedError from the Exception base class.
  define the function default_if_none with 2 arguments value and arg.
  if app_label is not contained in executor.loader.migrated_apps,
  return self.
  __all__ is an list with an element 'luhn'.
  for every item in elt,
  substitute SelectMultiple for widget.
  get value under the key settings.CACHE_MIDDLEWARE_ALIAS of caches dictionary, substitute with it the cache.
  decorator python_2_unicode_compatible,
  substitute self._pk_field.name for name.
  call the method self.queryset.filter with an argument, unpacked dictionary with an entry: pk for key.
  convert elements of self into a list, return the its printable representation.
  if middleware has an attribute 'process_request',
  for every app_label in app_labels,
  define the function receive_data_chunk with arguments self, raw_data and start.
  call the function six.text_type with an argument number, substitute the result for str_number.
  call the method six.iteritems with an argument base.base_fields, convert it to a list and append fields to it, substitute the result for fields.
  substitute DNS_NAME for idhost.
  if not,
  substitute obj.tzinfo for self.timezone.
  if retval is true,
  if OSError, renamed to e, is caught,
  and self.format_string, return the result.   derive the class SpacelessNode from Node base class.
  write 79 '-' characters into self.stream file stream.
  call the method os.path.splitext with an argument self.file, assign the result to _ and file_ext.
  call the function get_supported_language_variant with an argument settings.LANGUAGE_CODE, return the result.
  get 'fields' attribute from the options object, if it exists substitute it for self.fields, if not self.fields is None.
  substitute self.field.label for self.label.
  is_usable is boolean True.
  call the force_text with an argument message, yield the result.
  raise an CommandError exception with an argument string '"%s" is not a valid port number or address:port pair.',
  data is an empty dictionary.
  if self.verbosity is greater or equal to integer 1,
  for every obj in return value of the PythonDeserializer created with 2 arguments: return value of the function yaml.load,
  define the method render with 2 arguments: self and context.
  call the function unicodedata.normalize with 2 arguments: string 'NFKD' and thousand_sep, put the result and thousand_sep into a set,
  if max_age is not None,
  if self.verbosity is greater or equal to integer 1,
  convert priority into a floating point integer, substitute it for priority.
  call the method _illegal_formatting.search with an argument fmt, substitute the result for illegal_formatting.
  import module sys.
  replace all the '%s' occurrences with migration_name and app_label, respectively.   target is a list containing tuple with two elements app_label and migration.name.
  raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to string 'required'.
  decrement self.remaining by length of result.
  if Exception, renamed to e, exception is caught,
  and help set to string 'Raise on exception'.   call the method parser.add_option with 5 arguments: string '--no-color', action is string 'store_true', dest is string 'no_color',
  if cls has an attribute k,
  trans_bit is a list with an element bit.
  if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
  import module gettext as gettext_module.
  split string pks by ',', substitute the result for primary_keys.
  errors is an empty list.
  if not,
  from __future__ import unicode_literals into default name space.
  call the function copy with an argument base class of the class BaseContext, substitute the result for duplicate.
  from django.template.context import BaseContext, Context, RequestContext and ContextPopException into default namespace.
  output_transaction is boolean False.
  call the method self._set with key, pickled and timeout as arguments.
  define the function parse_boundary_stream with arguments stream and max_header_size.
  call the method self.clear_checkbox_name with an argument name, substitute the result for checkbox_name.
  try,
  call the function force_bytes with 2 arguments: safe and self.encoding, substitute it for safe.
  if not,
  derive the class Operator from the base class TokenBase.
  define initialization method __init__ with 4 arguments: self, host, list of arguments args and dictionary of arguments kwargs.
  import module sys.
  where '%s' are replaced with name and param.   if not,
  raise an exception CommandError, with argument string "%r conflicts with the name of an existing Python module and cannot be used as a project name. Please try another name.", where '%r' is replaced with project_name.
  call the function var.find with an argument: '_' appended to VARIABLE_ATTRIBUTE_SEPARATOR, if the result is greater than integer -1,
  if args is true,
  use the result as an argument for the call to the function datetime.fromtimestamp, return the result.   define the method created_time with arguments self and name.
  raise an AttributeError exception.
  otherwise if level converted into a string equals level,
  call the function shutil.copymode with arguments old_path and new_path.
  convert items of attrs dictionary to list of tuples, for every attr and value in it,
  otherwise if disable_existing is true,
  substitute length of existing for num_existing.
  if self.timezone is false,
  call the method parser.parse_args with argv, without the first 2 elements, substitute the result for options and args.
  define the function F with an argument i.
  decorator function wraps with an argument func.
  ERROR is integer 40.
  do nothig.
  return the value under the language_code key of the self._app_dict dictionary.
  call the method __init__ from the base class of EmailBackend class, with arguments: unpacked list args and unpacked dictionary kwargs.
  if ImportError exception is caught,
  call the mw_class function, store the result in the mw_instance.
  call to the self.handle_uncaught_exception method with request, resolver and value of the evaluated function sys.exec_info,
  substitute first element of renamed_method for old_method_name.
  define the method create_token with 4 arguments: self, token_string, source and in_tag.
  define the function lock with arguments f and flags.
  if safe_input is true,
  define the method render with 2 arguments: self and context.
  derive the class Iterator from the base class object.
  obj is a string "?".
  remove first and last elements of s, replace every occurrence of string '\%s' formated with quote with quote,
  if context_instance is false,
  with new_path and self.style.NOTICE, respectively, write it to self.stderr stream.   if self.paths_to_remove is true,
  convert processors into a tuple and substitute it for processors.
  do nothing.
  define the method to_python with 2 arguments: self and value.
  if ValueError exception is caught,
  return a string "UTC".
  call the function split_url with an argument value, substitute the result for url_fields.
  evaluate the method self._cache.decr with key and negative delta as arguments, return the result.
  define the function cache_info.
  try,
  define the method add_arguments with arguments self and parser.
  call the method self.style.MIGRATE_HEADING with an argument string "Will squash the following migrations:",
  and app_or_project if app_or_project equals to string 'app', if not, it is replaced with 'a' and app_or_project.   call the method re.search with 2 arguments: raw string '^[_a-zA-Z]\w*$' and name, if it evaluates to false,
  substitute schemes for self.schemes.
  substitute the '%s' with table and 3 elements of a list: b64encoded, exp and key, respectively.   if DatabaseError exception is caught,
  define the method utcoffset with 2 arguments self and dt.
  if context.autoescape is true and output is not an instance of SafeData class or output is an instance of EscapeData class,
  call the method parser.parse with an argument tuple with an element string 'endif', substitute the result for nodelist.
  decorator function register.filter with an argument is_safe set to boolean False.
  for every key_value in natural,
  define the function templatetag with 2 arguments: parser and token.
  substitute length of package for dot.
  substitute http_cookies.Morsel for Morsel.
  define the method save_existing_objects with 2 arguments: self and commit set to boolean True.
  convert whitespace character to unicode and substitute the result for space.
  python_2_unicode_compatible decorator,
  if not,
  call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'fixture', nargs set to '+',
  call the method form.add_initial_prefix with an argument name, substitute the result for self.html_initial_name.
  call the method cursor.execute with an argument sql.
  return value.pk.
  call the method self.endElement with an argument name.
  cookiedict is an empty dictionary.
  return an empty string.
  define the method reset with an argument self.
  if UnicodeEncodeError exception is caught,
  define the method __init__ with 4 arguments: self, nodelist_true, nodelist_false and unpacked list varlist.
  return default.
  mixed_subtype is a string 'mixed'.
  decrement self.position by length of bytes.
  do nothing.
  call the method self.compile_filter_error with 2 arguments: token and e, if it evaluates to false,
  if self.encoding exists substitute it for encoding, if not substitute settings.DEFAULT_CHARSET for encoding.
  if not,
  and form_class_attrs.   derive the class BaseModelFormSet from the BaseFormSet base class.
  raise an TemplateSyntaxError exception with an argument string "%r received an invalid token: %r", where '%r' is replaced with,
  return nothing.
  call the self.stderr.write, with string "The po files under %s are in a seemingly not writable location. mo files will not be updated/created." as argument, with '%s' replaced by dirpath.
  raise an MultiPartParserError with an argument string 'Invalid Content-Type: %s', where '%s' is replaced with content_type.
  define the function _split_statements with an argument content.
  x is integer 0.
  return msgid.
  from django.utils.datastructures import MultiValueDict into default name space.
  substitute text for self.text.
  if not,
  try,
  if match is true,
  for v in return value of the function match.groups, convert v into an integer and append i to a list,
  call the method hashlib.sha1 with an argument secret appended to key_salt, call the method digest on the result, return the result.
  call the os.path.splitex with argument name, assign the result to name and ext, respectively.
  convert the first element of the first row of targets to string, append it to the string "  Unapply all migrations: ",
  import module logging.
  call the method connection.close,
  from django.utils.translation import trans_real into default namespace.
  call the function os.path.basename with first element of self.argv as an argument, substitute the result for self.prog_name.
  define the method to_language with an argument self.
  create a tuple out of types of v, for every v in args, extend key tuple with the result.
  import module decimal.
  import module sys.
  define the method __repr__ with an argument self.
  derive class _MovedItems from the _LazyModule base class.
  RAISE_ERROR is an instance of object class.
  call the method stream.read with an argument max_header_size, substitute the result for chunk.
  if self.is_localized is true,
  call the method self.get_full_path, append the result to string '//', substitute it for location.
  call the method json.dumps with a dictionary generate with an expression as an argument, return value of the function e.get_json_data,
  call the function params.update with argument kwargs.
  define the method _format_value with 2 arguments: self and value.
  if not,
  derive the class Command from the BaseCommand base class.
  concatenate package_name, string '.' and module_name, substitute it for full_module_name.
  args is an empty string.
  value under the 'debug' key of the context_extras dictionary is boolean True.
  try,
  executor is an instance of the class MigrationExecutor created with an argument: value under the DEFAULT_DB_ALIAS key of the connections dictionary.
  yield string "# Also note: You'll have to insert the output of 'django-admin.py sqlcustom [app_label]'" as the result.
  call the method self._lock, with the return value,
  raise an ValueError exception with an argument string "Don't mix *args and **kwargs in call to reverse()!".
  for every field in concrete_model._meta.many_to_many,
  derive the class ZipArchive from the BaseArchive base class.
  break the loop execution.
  define the method _archive_cls with an argument file.
  derive the class BoundaryIter from the six.Iterator base class.
  derive the class SplitDateTimeField from the base class MultiValueField class.
  substitute doc for func.__doc__.
  if Exception exception is caught,
  format_key is a string 'DATETIME_INPUT_FORMATS'.
  derive the class BaseMemcachedCache from base class BaseMemcachedCacheMethods and BaseCache.
  otherwise if size is less than length of self.buffer,
  code is a string 'invalid'
  use the app_config, style and connection as arguments for the call to the sql_create, sql_custom and sql_indexes functions,  append the results respectively, return the result.
  prefix set to None, initial set to None, error_class set to ErrorList, label_suffix set to None,   empty_permitted set to boolean False, instance set to None.   substitute self._meta for opts.
  get the value under the 'filename' key of the disposition dictionary, substitute it for file_name.
  otherwise if value is not an instance of list ot tuple type,
  domain_whitelist is a list containing string 'localhost'.
  return a tuple with 3 elements: if path is true, path, in not, a string '%s.%s' formated with obj.__class__.__module__,
  if the key doesnt exists substitute boolean False for self.use_natural_keys.   if self.use_natural_keys is true,
  evaluate the logical expression, if other is an instance of RegexValidator and self.regex.pattern equals to other.regex.pattern,
  call the method self.render, return the result.
  remove config dictionary element under 'filter' key, if it exists substitute it for filters, if not, filters is None.
  create directories from the elements in filename.
  call the method self.validate_key with argument key.
  while i is lesser than length of subject and i-th element of subject is not an empty space or tab character,
  po_path is a string containing joined directory path from dirpath and f.
  define the method to_python with arguments self and value.
  otherwise if cmatches is true,
  if kwds is true or typed is true, call the function make_key with 3 arguments: args, kwds and typed, substitute the result for key,
  call the method self.get_queryset, substitute field pk under the result at the index index for pk_value.
  yield string "#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table" as the result.
  if args in None of boolean False, substitute it for an empty dictionary.
  return id_.
  evaluate the function getdefaultlocale from the module locale, if second element of return value exists assign it to encoding,
  where '%s' is replaced with result of the function humanize, called with an argument fixture_dir.   fixture_files_in_dir is an empty list.
  if kwargs is true,
  append tuple with 2 elements: command and token.source, append the result to self.command_stack.
  call the function force_text with an argument bf_errors, format the error_row string with the result, append it to the output.
  call the method pop from the base class of the class QueryDict, with arguments key and unpacked list args, return the result.
  return obj_pk.
  try,
  if path_to_remove is file,
  define the method __init__ with 4 arguments: self, nodelist, parent_name and template_dirs set to None.
  call the function locks.lock with fd and locks.LOCK_EX as arguments.
  and '3' for '3', substitute it for value.   if KeyError exception is caught,
  default set to False, help containing string 'Show a list of all known migrations and which are applied' as arguments.   define the method handle with self instance of a class, list args, dictionary options as arguments.
  derive the class Command from the BaseCommand class.
  iterations and dklen, return the result.   if not,
  TEMPLATE_FRAGMENT_KEY_TEMPLATE is a string 'template.cache.%s.%s'.
  if not,
  call the method self.xml.startElement with arguments string 'natural' and an empty dictionary.
  define the function include_is_allowed with an argument filepath.
  from django.core.management.base import BaseCommand and CommandError into default name space.
  if file path top_dir doesnt exists,
  join to_path and name into a file path, substitute the result for filename.
  self.paths_to_remove is an empty list.
  if second element of options is true,
  import module re.
  substitute utc for tzinfo.
  call the method bad_app_labels with an argument app_label,
  if not,
  define the method as_table with an argument self.
  derive the class CheckRegistry with object as base class.
  help is an empty string.
  call the method time.localtime with an argument stamp, substitute the result for tt.
  substitute the result for commands_dict.   for every name and app in return value of the function six.iteritems calle with return argument of function get_commands as an arugment,
  call the self.clear method.
  from django.core.servers.fastcgi import FASTCGI_OPTIONS into default namespace,
  delete all the whitespaces from ext, split it by ',' character, extend ext_list with the result.
  append string '.' to result.
  and elements of token_string from second to second last element wiht the whitespaces striped from the both sides.   otherwise if token_string starts with BLOCK_TAG_START,
  if format is not contained in _serializers,
  define the method render with 4 arguments: self, name, value and attrs set to None.
  convert self.dict into boolean, return the result.
  substitute '%s' in a string "  Branch %s" with migration.name,
  from django.utils.deconstruct import deconstructible into default name space.
  return val and encoded as a tuple.
  if app_label is not contained in executor.loader.migrated_apps,
  if length of app_labels is greater than integer 1 and primary_keys is true,
  if not,
  call the method extend with an argument error_list on the return value of the method error_dict.setdefault called with 2 arguments: field and an empty list.
  call the function get_commands, substitute it for commands.
  define function patch_cache_control, with response and dictionary set of arguments, kwargs, as arguments.
  return result,
  instantiate the TimestampSigner object with arguments key and salt set to salt, call its method sign with an argument base64, return it.
  potfiles is an empty list.
  define the method render with an argument self.
  HITS and MISSES are integer 0 and 1, respectively.
  if not,
  call the function format_html with 2 arguments: string '<input{0} />', return value of the function flatatt, called with an argument,
  call the method parser.parse with an argument tuple with 3 elements strings 'elif', 'else' and 'endif', substitute the result for nodelist.
  call the method value.as_tuple, assign the result to sign, digittuple and exponent, respectively.
  define the method is_hidden with an argument self.
  define the method __str__ with an argument self.
  self._unget_history is an empty list.
  call the function compile_string with 2 arguments: template_string and origin, substitute the result for self.nodelist.
  if response is None,
  and result of the method self.field.label_from_instance, called with an argument obj.   derive the class ModelChoiceField from the ChoiceField base class.
  call the function get_default_timezone, substitute the result for self.timezone.
  for every value in initial call the function force_text with an argument value, add the results into a set, substitute the resulting set for initial_set.
  call the function _generate_cache_key with request, request.method, an empty list and key_prefix as arguments, return the result.
  multiply self.number and self.paginator.per_page, return the result.
  define the method __iter__ with an argument self.
  from django.core.exceptions import MiddlewareNotUsed, PermissionDenied and SuspiciousOperation into default name space.
  substitute first args for other_dict.
  where '%s' is replaced with first element of bits.   call the method parser.compile_filter with second element of bits as an argument, substitute the result for filepath.
  from django.utils import six into default name space.
  for every key in self,
  define the function is_safe_url with 2 arguments url and host set to None.
  if arg is None,
  if args is true,
  raise an AttributeError with an argument string "This QueryDict instance is immutable".
  substitute the result for args.   call the function popen_wrapper with an argument args, assign the result to msgs, errors and status, respectively.
  def initialization method __init__ with self class instance, stream, limit and buf_size set to integer value of the product 64*1024*1024.
  for every i and k in enumerated values of self._cache, if i is divisible by self._cull_frequency, append k to doomed list.
  called with an argument kw, only if v is not None, substitute the result for kw.   call the method datetime.time with an argument unpacked dictionary kw, return the result.
  call the function method with 3 arguments: self, unpacked list args and unpacked dictionary kwargs, substitute the result for data.
  define the method l with an argument self.
  substitute show_hidden_initial for self.show_hidden_initial.
  if field.rel.to._default_manager has an atttribute 'get_by_natural_key',
  derive the class HttpResponseBase from the six.Iterator base class.
  call the function lazy with 2 arguments: _string_concat and six.text_type, substitute the result for string_concat.
  if TemplateLoader has an attribute 'load_template_source',
  call the __init__ method from the base class of the class SimpleTemplateResponse, with 3 arguments: an empty string, content_type and status.
  call the os.stat function with argument filename, store the return value in stat.
  call the method self.__class__ with an argument list, with elements: tuples with 2 elements: k and hard copy of list v,
  call the method self.sequence.resolve with 2 arguments: context and boolean True, substitute the result for values.
  call the method app.start.
  if filepath starts with root,
  if fixture_name is an absolute file path,
  call the self.seek method with argument integer 0.
  call the method resource.decode with an argument settings.FILE_CHARSET, substitute the result for resource.
  otherwise if base_url does not ends with '/' character,
  define the method __delattr__ with self and name as arguments.
  get the value under the date_key key of the item dictionary, substitute it for item_date.
  from django.utils.datastructures import MultiValueDict and MergeDict into default name space.
  sub_ul_renderer is an instance of ChoiceFieldRenderer class, created with 4 arguments: name as self.name, value as self.value,
  return chunk.
  increment Field.creation_counter by one.
  for every i and field in enumerated iterable self.fields,
  call the function allow_lazy with an argument words, substitute the result for words.
  substitute '%s' in a string "    - %s\n" with return value of the operation.describe method, write the result to self.stdout.
  result is an instance of SimpleLazyObject class, created with an argument self._setupfunc.
  do nothing.
  where '%s' is replaced with first element of bits.   return an instance of ExtendsNode with 2 arguments nodelist and parent_name.
  call the function urlquote with an argument _prefix, use the result as an argument for the call to the normalize function,
  if not,
  append ':' and ipv4_address to result.
  self._js is an empty list.
  if KeyError exception is caught,
  call the method self.handle_file_complete with arguments old_field_name, counters.
  do nothing.
  try,
  substitute the result for s.   if not,
  raise an TemplateSyntaxError exception with an argument string "Only 'silent' flag is allowed after cycle's name, not '%s'.",
  return boolean True, otherwise return boolean False.   define the function is_naive with an argument value.
  if migration.replaces is true,
  if not field_value is None.   if f.blank is false and form_field.required is false and field_value is contained in form_field.empty_values,
  if KeyError or AttributeError, renamed to exc, exceptions are caught,
  call the method self.decompress with an argument value, substitute the result for value.
  define the method add with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
  if match is true and call to the method match.group with an argument integer 1 evaluates to true, kwarg_format is boolean True,
  define the method __init__ with 8 arguments: self, file, field_name, name, content_type, size, charset and content_type_extra set to None.
  define the method pk_is_not_editable with an argument pk.
  return WRAPPER_ASSIGNMENTS.
  substitute boolean False for cache_choices.
  substitute pubid for self.pubid.
  LOCK_EX, LOCK_SH and LOCK_NB are all equal to integer 0.
  return templatetags_modules.
  from django.conf import settings into default namespace.
  format string normal_row with an dictionary containing 5 entries: an empty string for 'errors', empty string for 'label',
  substitute value under the 'verbosity' key of the options dictionary for verbosity.
  return nothing.
  for every sql in sql_list,
  call the private dict.__setitem__ method with self class instance, key and M as arguments.
  if not,
  parts is an empty list.
  break from the loop execution.
  if not,
  define the method __nonzero__ with argument self.
  define the method __init__ with 3 arguments: self, template_string and origin.
  from collections import OrderedDict into default name space.
  if not, self.hide_empty is boolean False.   get the value under the 'verbosity' key of the options dictionary, substitute it for self.verbosity.
  substitute the result for parsed.   if parsed.scheme is true and parsed.scheme is not contained in self.allowed_schemes,
  append entry to files list.
  if not accept is an empty string.   call the function parse_accept_lang_header with an argument accept, for every accept_lang and unused in the result,
  import module warnings.
  RemovedInDjango19Warning and stacklevel set to integer 2.   if data is None or data is an instance of dict type,
   if m is true,
  substitute value for value under the field.name key of the self._current dictionary.
  call the function force_text with second element of choice as an argument, substitute the result for self.choice_label.
  property decorator,
  write a new line to the self.stream file stream.
  from django.utils.encoding import force_text and python_2_unicode_compatible into default name space.
  call the function force_bytes with an argument secret, substitute the result for secret.
  for every obj in result of the method self.queryset.all.   for every choice in self.field.choice_cache,
  call the method router.db_for_write with argument self.cache_model_class, substitute the result for db.
  join results of format_html called with 2 arguments: format_string and tuple with an element args, into a string,
  import module json.
  call the function format_html with 3 arguments: string ('<textarea{0}>\r\n{1}</textarea>', return value of the function flatatt,
  if model is contained in excluded_models,
  singular is an empty list.
  substitute '%s' in a string "    - %s\n" with return value of the operation.describe method, write the result to self.stdout.
  return error_dict.
  if second element of source is None,
  return obj_dict.
  tuple with 2 elements: start and end and boolean False, append the result to result.   substitute end for upto.
  define private method __str__ with argument self.
  call the function m.group, if the result evaluates to true,
  result of the m.group method called with an argument integer 0 converted into lowercase and result of the method value.title,   substitute the result for t.   call the function re.sub with 3 arguments: string "\d([A-Z])", lambda function with an argument m and return value,
  content is a File object instance created with content argument.
  nonlocal_root is an list with an element root.
  python_2_unicode_compatible decorator,
  define the method entity_decl with arguments self, name, is_parameter_entity, value, base, sysid, pubid and notation_name.
  define the funtion get_internal_wsgi_application.
  convert result to lowercase and return it.
  if not,
  if response is True,
  if not,
  define the method inner with argument check.
  define the method create_variable_node with 2 arguments self and filter_expression.
  call the function deactivate_all.
  try,
  for model in model_list,
  model_list is an empty list.
  from collections import UserList into default namespace.
  substitute self.closed for close.
  dest as a string 'all' default as boolean False and help as a string 'Updates the message files for all existing locales.'.   call the method parser.add_argument with 5 arguments: string '--extension', string '-e', dest set to string 'extensions',
  from django.utils.dates import MONTHS, MONTHS_3, MONTHS_ALT, MONTHS_AP, WEEKDAYS and WEEKDAYS_ABBR into default name space.
  string 'Ensure this value has at least %(limit_value)d characters (it has %(show_value)d).' and string 'limit_value', substitute the result for message.   code is a string 'min_length'
  call the method self.is_url with an argument template, if it evaluates to true,
  return an empty string.
  for every f and e in list of tuples of self dictionary key, pair entries.   define the method as_json with 2 argumens self and escape_html set to boolean False.
  define the method tzname with 2 arguments: self and dt.
  define the private method __contains__ with self class instance and key as arguments.
  call the method os.environ.get with 2 arguments: strings 'PATHEXT' and '.COM;.EXE;.BAT;.CMD', split the result at os.pathsep, substitute it for pathext.
  BUILTIN_SERIALIZERS is a dictionary containing 4 inital entries: "django.core.serializers.xml_serializer" for "xml",
  define the function is_valid_path with arguments path and urlconf set to None.
  if third element from the end of the args equals string 'as',
  if self._varlist is true,
  where '%s' is replaced with taglib and e.   if not,
  if app_config.models_module is None,
  substitute the result for the value under the 'day' key of the html dictionary.   output is an empty list.
  if not,
  call the method parser.add_argument with 3 arguments: string 'args', nargs set to argparse.REMAINDER and help as a string 'Various KEY=val options.'
  property decorator,
  exit the program with the code integer 1.
  if s is an instance of an object six.memoryview.
  if not,
  obj is None,
  call the private dict.__setitem__ method with self class instance, key and result of the function http_cookies.Morsel() as arguments.
  if command is contained in parse_until,
  for every basedir in basedirs,
  if match is false or call to the method match.group with an argument integer 1 evaluates to boolean false,
  if _globs_ is None,
  status_code is an integer 410.
  substitute first, second and second elements of bits for yes, no, maybe, respectively.
  convert candidate to a string.
  call the method self._coerce with an argument data, substitute the result for data.
  if else,
  substitute content_length for self._content_length.
  return None.
  instantiate class Decimal with string '1.0' as argument, divide it by product of instance of Decimal class created with integer 10,
  if self.empty_permitted is true and call to the method self.has_changed evaluates to false,
  return the result of the method field.widget.value_from_datadict called with 3 arguments: self.data, self.files and prefix.
  define the method N with an argument self.
  substitute value under the NON_FIELD_ERRORS key of opts.error_messages dictionary for error_messages.
  format_locations is an empty list.
  if not,
  define the function default with 2 arguments value and arg.
  otherwise call the function sys.getdefaultencoding and substitute its result for fs_encoding.   if six.PY3 is true or os.name equals a string 'nt',
  app_configs is None.
  get opt attribute of the opts object, substitute it for value.
  return value.
  call the MigrationExecutor with the connection as the argument, substitute it for executor.
   if terminal_char is not equal to string ')',
  for every match in the result,   substitute match.lastgroup for name.
  strip message_context of "'" characters from both ends, substitute the result for message_context.
  where '%s' is replaced with taglib_module and e.   try,
  set field cdata_tag for this class instance to None.
  if fake is true,
  try,
  derive the class SimpleNode form the base class TagHelperNode.
  if self.setting is true,
  call the get_valid_filename with argument name, return the result.
  define method __exit__ with self, exc, value and tb as the arguments.
  convert locale to lowercase and return it.
  do nothing.
  return s.
  insert token at the beginning of self.tokens.
  if i is greater than or equal to length of subject,
  optimizer is an instance of MigrationOptimizer class.
  call the self.make_key with key and version set to version as arguments, substitute the result for key.
  if value under the 'ENGINE' key of the connection.settings_dict dictionary equals a string 'django.db.backends.dummy',
  from django.utils import six into default name space.
  return value.
  substitute the results in a list for T.   join elements of T in a bytes string, append first r elements of result of the call to the function F with an argument l to it,
  get the value under the e.code key of the self.error_messages dictionary, substitute the result for e.message.
  call the function transaction.atomic, with using set to db.alias as the argument, return value is a function which is called,
  call the method self.incr_version with key, negative delta and version as arguments.
  call the method tarfile.open with an argument file, substitute the result for self._archive.
  define the function comment with 2 arguments: parser and token.
  for every bit in elements of bits without the first element, call the method parser.compile_filter, with an argument bit,
  and truncate, return the result.   return elements of words joined in a string, separated with whitespaces.
  call the method match.groupdict, substitute the result for kw.
  call the method formats.get_format_lazy with an argument string 'DATE_INPUT_FORMATS', substitute the result for input_formats.
  if self.obj is None,
  all_models is an empty list.
  then the first element of the result of the function formats.get_format called with an argument self.format_key, return the result.   derive the class DateInput from the DateTimeBaseInput base class.
  get the value under the 'HTTP_X_FORWARDED_HOST' key of the self.META dictionary, substitute the result for host.
  derive the class MinValueValidator form the BaseValidator base class.
  derive the class WithNode from Node base class.
  import module keyword.
  if ImportError exception is caught,
  define the method hidden_fields with an argument self.
  __all__ is a tuple containing 2 initial elements: strigs 'WSGIServer' and 'WSGIRequestHandler'.
  if only_initial is false,
  define the method delete with self class instance, key and version set to None as arguments.
  define the method __init__ with an argument self.
  if use_natural_keys is true,
  return klass.
  convert header to lowercase, use it to as a key to get the value of the self._headers dictionary,
  try,
  substitute '%s' in string '<%s %s %s>' with self.__class__.__name__, self.name and self.regex.pattern, respectively,
  if AttributeError exception is caught.
  and help is a string 'Specifies file to which the output is written.'.   define the method handle with arguments self, unpacked list app_labels and unpacked dictionary options.
  raise an TemplateSyntaxError exception with an argument string "'autoescape' argument should be 'on' or 'off'".
  attrs is a empty list.
  substitute _iterkeys for __iter__.
  call the function copy with an argument self.render_context, substitute the result for duplicate.render_context.
  for meta_line in return value of the method self.get_meta called with an argument table_name.
  append bit to split.
  define the method __next__ with an argument self.
  from django.apps import apps into default name space.
  for every module_to_search in args,
  from __future__ import unicode_literals into default name space.
  where '%s' is replaced with token.contents.   call the method re.split with 2 arguments: raw string ' *, *' and elements of bits from 1 index to in_index index,
  and absolute value of p, substitute the result for exp.   try,
  call the get_script_name function with environ as argument, substitute the result for script_name.
  self.year_none_value is a tuple containing 2 elements: integer 0 and first element of empty_label.
  and stacklevel set to 2 as arguments.   call the _create_cache with backend and dictionary kwargs as arguments, substitute the result for cache.
  call the method self.configurator.convert with an argument value, substitute the result for result.
  tuple with 2 elements: upto and start and boolean False, append the result to result.   substitute start for upto.
  try,
  decrement end by one.
  call the method path.decode with an argument fs_encoding, return the result.
  define the method parse_args with 3 arguments: self, args set to None and namespace set to None.
  return self.
  return result.
  if value is contained in self.empty_values,
  RemovedInDjango19Warning, stacklevel set to integer 2.   for field_name every obj in list created from the elements of the return value of the function six.iteritems with an argument attrs.
  format a string "(?P<%s>%s)" with groupid and tok.regex, append it to the parts.
  call the method self.namelist, if the length of the result is not integer 1,
  define the function flatten_result with an argument source.
  append f to file_field_list.
  call the method return self.format with an argument string 'D, j M Y H:i:s O', return the result.
  call the function write with an argument end.
  return the value under the self.data.month key of the MONTHS_ALT dictionary.
  call the method parser.add_argument with 2 arguments: string 'args' and nargs set to '*'.
  define the function catalog.
  if i is contained in relations, is_relation is boolean True, otherwise is_relation is boolean False.
  substitute level for self.level.
  get value under the 'filters' key of the config dictioanry, if it exists substitute it for filters, if not filters is None.
  call the method parser.next_token, substitute the result for token.
  return nodes.
  _file is None.
  RemovedInDjango19Warning and integer 2.   substitute dicts for self.dicts.
  if formatter is true,
  substitute Field.creation_counter for self.creation_counter.
  close the file self.
  invalid_apps is an empty list.
  define the method __init__ with arguments: self, fields set to an empty tuple, unpacked list args and unpacked dictionary kwargs.
  value under the cache_key key of the _format_cache dictionary is None.
  if d is an instance of real_datetime class,
  substitute fg for value under the 'fg' key of definition dictionary.
  as the arguments, substitute the result for response.   if Exception, renamed to e, exception is caught,
  self._current is None.
  if cache_timeout equals to None,
  _encoding is None.
  call the method filename.encode with an argument string 'utf-8', substitute the result for filename.
  encoding is None.
  remove config dictionary element under '()' key, substitute it for c.
  import module warnings.
  if self._read_started is true and self doesnt have an '_body' attribute.
  append ext to the end of it, substitute the resulting list for name.   substitute name for self._name.
  if module os field name equals to string 'nt',
  from django.core import mail into default name space.
  define the function find_commands with an argument management_dir.
  call the method self.__class__ with an argument self, return the result.
  if not,
  for every k and v in result of the call to the method type_.__dict__.items,
  numbers is a list containing return value of the MigrationAutodetector.parse_number method called with an argument migration.name,
  raise an InvalidTemplateLibrary exception with an argument string "Unsupported arguments to Library.tag: (%r, %r)",
  for every key and value in data,
  call the method pickle.dumps with value and pickle.HIGHEST_PROTOCOL as arguments, substitute it for pickled.
  if key is not contained in self,
  call the function self.coerce with an argument value, substitute it for value.
  if other is an instance of Promise class,
  if not,
  if self.data.minute equals integer 0 and self.data.hour equals integer 12,
  if code is contained in _supported and call to the function check_for_language with an argument code evaluates to true,
  dest set to string 'list_tags' and help set to string 'List available tags.'.   define method handle with arguments self, unapcked list app_labels and unpacked dictionary options.
  substitute '%s' with first element of bits and block_name, respectively.   append block_name to parser.__loaded_blocks.
  from django.core.validators import validate_ipv4_address.
  from django.utils.timezone import template_localtime into default name space.
  decorator stringfilter,
  define the method start_object with arguments self and obj.
  define the method content with an argument self.
  define the method _get_page_range with an argument self.
  call the method self.get_queryset, substitute i-th element of the result for value under the 'instance' key of kwargs dictionary.
  from django.core.files import uploadhandler into default name space.
  find the first subgroup of the matched string from the match object, strip the whitespaces from the begging and end, replace it for tag.
  split string s once, with '=' as delimiter, substitute the result for t.
  return an instance of SafeText, created with an argument t.
  and RemovedInDjango19Warning.   from django.conf import settings into default namespace.
  append ch to quant.
  convert slice of language string from (p+1)-th index to the end to uppercase, append it to the previous result, return the resulting string.   if not,
  if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
  for every line in chunk_buffer,
  if self equals to other return boolean False, otherwise return True.
  call the method threading.RLock, substitute the result for self.mutex.
  if self.id exists, convert self.id to a string, surround it with round brackets, substitute id for it, otherwise id is an empty string.
  if StopIteration exception,
  vary_headers is an empty list.
  return val.
  call the function os.environ.get with 2 arguments: string 'PATH' and an empty string, split the result at the os.pathsep, substitute the result for path.
  raise an CommandError exception with an argument string "couldn't download URL %s to %s: %s", where '%s' is replaced with url,
  cal the method self.startElement with 2 arguments: name and attrs.
  substitute var1 and var2 for self.var1 and self.var2, respectively.
  where string '%s' is replaced by lookup_view and mod_name, respectively.   if not,
  if kwarg_format is true,
  call the method parser.add_argument with 4 arguments: string '--plain', action set to string 'store_true', dest as a string 'plain',
  call the function force_text with an argument value, substitute the result for value.
  call the method migration.ancestry.index with an argument common_ancestor, increment the result by one,
  call the method notifier.stop.
  if data is true,
  if ImportError exception is caught.
  return result.
  conditions_nodelists is a list containing tuple with 2 elements condition and nodelist.
  import module sys.
  RemovedInDjango19Warning and stacklevel set to integer 2.   import module logging.handlers.
  replace '%s' in the string  "%s.process_template_response didn't return an HttpResponse object. It returned None instead.",
  substitute the result for the value under the 'year' key of the html dictionary.   call the function six.iteritems with an argument self.months, convert the result to a list and substitute it for choices.
  return default.
  call the method self.make_key with key and version set to version as arguments, substitute the result for key.
  if not,
  use the result as an argument for the call to the method final_output.extend.   add model to known_models set.
  format string '\x1b[%sm' with RESET, return the result.
  from django.utils.html import escape into default name space.
  filesize_number_format is an lambda function with an argument value, return value is the result of the method formats.number_format,
  field_params is an empty dictionary.
  with name_str, use it as an argument to throw an CommandError exception.   if self.merge is true and conflicts is false,
   if settings.FILE_UPLOAD_TEMP_DIR is true,
  call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'test_label', nargs set to string '*',
   if self.file_permissions_mode is not None,
  call the method unescape with attrvalue as the argument on the self class instance, substitute the result for attrvalue.
  __author__ is a string "Benjamin Peterson <benjamin@python.org>".
  reverse settings.LOCALE_PATHS element order, for every localedir in the result,
  call the _lock.setdefault method with name and RWLock() as arguments, substitute the result for self_lock.
  get_language is a lambda function returning settings.LANGUAGE_CODE.
  call the method self.options.update with dictionary as an argument, containing 1 element: boolean False for 'use_decimal'.
  call the method self.get_backend_timeout with argument timeout, substitute it for expiry.
  return self.
  _called_from_command_line is boolean False.
  define the function deactivate.
  decorator stringfilter,
  raise an TemplateSyntaxError exception with an argument string "Searching for value. Unexpected end of string in column %d: %s",
  call the method __deepcopy__ with an argument memo from the base class of the class ChoiceField, substitute the result for result.
  call the function method with 3 arguments: self, unpacked list args and unpacked dictionary kwargs, substitute the result for data.
  return data.
  call the method self.is_valid, if it evaluates to false,
  return integer 0.
  call the function timesince with an argument value, return the result.
  if related_att is not None,
  define the method _handle_object with arguments self and node.
  return filenames.
  call the function escape with an argument value, return the result.
  call the function datetime.fromtimestamp with argument timeout, substitute it for exp.
  call the method self.make_key with key and version set to version as arguments, substitute the result for key.
  call the method HttpResponse.content.fset with 2 arguments: self and value.
  define the method encoding with an argument self.
  if not,
  call the function no_style, substitute the result for self.style.
  concatenate __name__, string '.moves' and attr.name together, use it as an key to get the value from the sys.modules dictionary,
  property decorator,
  call the method self.add_arguments with an argument parser.
  increment i by integer 1.
  derive the class NullBooleanField from the base class BooleanField class.
  substitute the result for block_content.   if self.verbatim is true and block_content equals self.verbatim,
  property decorator.
  return data.
  set the attribute name from value under the DEFAULT_CACHE_ALIAS key of caches dictionary to value, return it.
  call the self._lock.writer method, with the result perform the following,
  increment loaded_objects_in_fixture by one.
  if value is false or for every v in value every v is contained in self.empty_values,
  return an instance of a URLNode class, created with 4 arguments viewname, args, kwargs and asvar.
  define the method run_from_argv with arguments self and argv.
  call the function pgettext with an argument 'String to return when truncating text', '%(truncated_text)s...', substitute the result for truncate.
  self.namespace and self.regex.pattern, respectively. return it.   define the method _populate with an argument self.
  define the method _media with an argument self.
  get the value under the part key of the PALETTES dictionary, update with it palette dictionary.
  substitute DEFAULT_MIN_NUM for min_num,
  raise an exception.
  define the method __init__ with 2 arguments: self and attrs set to None.
  try,
  from django.conf import settings into default name space.
  from functools import lru_cache.
  return number.
  get the value under the 'CONTENT_TYPE' key of environ dictionary, if the key doesnt exist get the empty string,
  call the encode function on the Header class instance, created with arguments addr and encoding, substitute the result for addr.
  substitute settings.CACHE_MIDDLEWARE_SECONDS for cache_timeout.
  call the function lazy with 2 arguments: func and unpacked list resultclasses, call the result with 2 arguments: unpacked list args,
  return key_func.
  if DecimalException exception is caught,
  if path is an instance of six.string_types,
  define function get_max_age with response as an argument.
  string 'A secure pseudo-random number generator is not available on your system. Falling back to Mersenne Twister.'.   using_sysrandom is boolean False.
  get the unicode representation of result of the method match.group called with an integer 1, format with in a string "\\u%04x",
  and value under the unique_for key of form.cleaned_data dictionary is not None,   if lookup equals a string 'date',
  call the method _ExpatParser.reset with an argumen sefl.
  format_key is a string 'TIME_INPUT_FORMATS'.
  create a instance of a class BadSerializerModule from the object base class, with elements Deserializer set to bad_serializer and Serializer set to bad_serializer.
  widgets is a tuple with 2 elements: instance of DateInput class, created with 2 arguments: attrs as attrs and format as date_format,
  if end_index is None and s_len is greater than truncate_len,
  define the method size with arguments self and name.
  substitute changeset for get_git_changeset.cache.
  call the method query.lists, substitute the result for query.
  define the __init__ method with 4 arguments: self, message set to None, code set to None and whitelist set to None.
  if text is an empty string and length of opts equals integer 1 and first element of opts equals string 'reset',
  call the method model_to_dict with 3 arguments: instance, opts.fields, opts.exclude and substitute the result for object_data.
  define the function sql_indexes with 3 arguments: app_config, style and connection.
  where '%r' is replaced with subcommand and '%s' is replaced with self.prog_name.   call the function sys.exit with an argument integer 1.
  import bz2.
  append check.tags into a list for every check in self.registered_checks if check has 'tags' attribute, put the elements into a set and return it.
  if data is true, substitute it for data, otherwise data is an empty list.
  if not,
  raise an ValidationError with 2 arguments: value under the 'invalid_list' key of the self.error_messages dictionary and code set to 'invalid_list'.
  return boolean False.
  and self.code equals to other.code, return boolean True, otherwise return boolean False.   decorator deconstructible,
  call the method from_current_timezone with an argument result, return the result.
  if 'class' is contained in attrs,
  return attrs.
  import module types.
  raise an ValueError with an argument string "'%s.%s' has more than one ForeignKey to '%s.%s'.", where '%s' is replaced with,
  substitute max_expr for self.max_expr.
  define the method __contains__ with self and key as arguments.
  substitute rhs for number_value.
  define the method setlistdefault with 3 arguments: self, key and default_list set to None.
  call the smart_text function with an argument token, return the result.
  from __future__ import unicode_literals into default name space.
  substitute c_int64 for ULONG_PTR.
  if tuple current_version elements are greater or equal to (3, 4), respectively,
  substitute prefix for self.prefix.
  raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a delete() method'.
  substitute self.form.auto_id for auto_id.
  if field is contained in self.errors,
  call the function mark_safe with an argument word, substitute the result for i-th element of words.
  return default.
  split ip_str by ':', substitute the result for hextets.
  derive the class EmailMultiAlternatives from the EmailMessage base class.
  from django.utils import iri_to_uri, force_bytes, force_text to the default name space.
  if value is not an instance of list type,
  convert bit to an integer and use it as index to obtain an element for list current, substitute it for current.
  import module json.
  from __future__ import unicode_literals into default name space.
  if TypeError, renamed to te, exception is caught,
  if not substitute field.initial for initial.   call the method filed.clean with arguments value and initial, substitute the result for value.
  substitute e for message.
  while the result of the method new_name.find, called with an argument string '__' is greater or equals integer 0,
  from xml.sax.saxutils import XMLGenerator into default name space.
  an unpacked list natural_key as argument, substitute the pk filed of the resulting object for obj.pk.   if Model.DoesNotExist exception is caught,
  for every f in file_field_list,
  if data is instance of Node and data.negated is false, and if data.connector equals conn_type or length of data equals integer 1,
  call the method imp.find_module with 2 arguments: module_name and list containing element entry, assign the result to file_, _,
  if self is not contained in context.render_context,
  app_name and model._meta.object_name, respectively.   evaluate connection.creation.sql_create_model method with model, no_style() and seen_models as arguments,
  strip message_context of "'" characters from both ends, substitute the result for message_context.
  do nothing.
  append string '.moves' to __name__, use it as an argument to instantiate _MovedItems class, assign it to moves,
  if value under the 'subtitle' key of the self.feed dictionary is not None,
  if rel_model has an 'natural_key' attribute and rel_model is not equal to model,
  _anonymous_ is a list containing one string: '_offset_union'.
  call the function six.text_type with an argument value, use the result as an argument for the call to the function mark_safe,
  if method msg.get_charset evaluates to true, call the get_output_charset method on the return value of the msg.get_charset method, substitute the result for charset, otherwise if it is false, substitute the string 'utf-8' for charset.
  define the method has_key with self class instance, key and version defaulting to None as arguments.
  substitute io.BytesIO for BytesIO.
  from django.core import checks into default name space.
  substitute serialize_headers for __bytes__.
  unpacked dictionary daemon_kwargs.   if value under the 'pidfile' of options dictionary exists,
  substitute _iteritems for items.
  for i in self._deleted_form_indexes append i-th element of self.forms into a list, return the resulting list.
  if PY3 filed of six is boolean True,
  where '%s' is replaced with var.   call the method var.split with an argument VARIABLE_ATTRIBUTE_SEPARATOR, convert the result to a tuple and substitute it for self.lookups.
  define the method get_block with 2 arguments self and name.
  call the method self.error_class, substitute the result for value under the field key of the self._errors dictionary.
  derive the class HTMLParser from the base class HTMLParser located in the module _html_parser.
  matches is boolean False.
  try,
  if result is true,
  derive the class ManagementUtility from object base class.
  from django.utils.encoding import force_text into default name space.
  define the method unparsed_entity_decl with arguments self, name, base, sysid, pubid and notation_name.
  substitute attrs for self.attrs.
  raise an CommandError exception with an argument string "Multiple fixtures named '%s' in %s. Aborting.", where '%s' is replaced with:
  try,
  call the method sql_flush with 5 arguments: self.style, connection, only_django set to boolean True,
  call the function get_format with an argument string 'DATE_INPUT_FORMATS', substitute the first element of the result for input_format.
  label is a string 'label'
  define the method __init__ with 4 arguments: self, parser, unpacked list args and unpacked dictionary kwargs.
  call the function self.filter_expr.resolve with an argument context, return the result.
  if value under the header key of the self.META dictionary is equal to value,
  derive the class Command from the BaseCommand base class.
  call the method _format_modules_cache.setdefault with 2 arguments: lang and list created out of the results of the function,
  joint prefix, character '.' and self._callback_str together, substitute the result for self._callback_str.
  if self has an attribute '_files',
  if token equals a string "not" and i incremented by 1 is lesser than l,
  help is a string "Deprecated - use 'migrate' instead.".
  if field is not None,
  return nothing.
  define the method handle_charref with 2 arguments self and name.
  substitute value under the 'use_ipv6' key of the options dictionary for self.use_ipv6.
  return result.
 call the method os.chdir with an argument our_home_dir.
  date_data is a tuple with an entry: attribute lookup from the value under the unique_for key of the form.cleaned_data dictionary.
  derive the class ImproperlyConfigured from the Exception base class.
  call the method self.writer_enters.
  name appended to string '_', as the name of the attribute to get from other object, or if the previous doesnt exist, None.   return combined.
  from xml.sax import handler into default name space.
  if ValueError exception is caught,
  try,
  exit program with code integer 0.
  read data from buf, yield the result.
  append string ".moves.urllib_parse" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for parse.
  define the method __init__ with 4 arguments: self, template_string, origin set to None and name set to None.
  return an empty list.
  substitute the '%s' with table and list containing return value of the method call ops.value_to_db_datetime with argument now on the object under the db key of connections dictionary, respectively.   call the method cursor.execute with string "SELECT COUNT(*) FROM %s" as argument, substitute the '%s' with table.
  define the method appendlist with 3 arguments: self, key and value.
  return self.
  if 'date' is not in header_names,
  for every renamed_method in cls.renamed_methods,
  if target is None,
  and a list containing a string '-h',   call the method self.main_help_text, append new line to it, write it to sys.stdout.
  from math import ceil into default name space.
  return name.
  define the method read with an argument self.
  return client.
  derive the class Command from the AppCommand base class.
  call the function getargspec with an argument func, substitute the result for args, varargs, varkw and defaults, respectively.
  outut is an empty list.
  return an empty list.
  skip this loop iteration,
  return an instance of SafeBytes, created with an argument data.
  return boolean True.
  if six.PY3 is true,
  define the method _construct_form with 3 arguments: self, i and unpacked dictionary kwargs.
  call the method os.unlink with an argument pot_path.
  if confirm equals string 'yes',
  if i is true,
  and unpacked dictionary kwargs.   substitute queryset for self.queryset.
  append string '_0' to id_.
  return boolean False.
  define the method get_unique_error_message with 2 arguments: self and unique_check.
  if ImportError exception is caught,
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  define the method handle_entityref with 2 arguments self and name.
  if offset is lesser than integer 0, sign is set to '-', otherwise sign is '+',
  for every form in self call the form.as_p method, join the results in a string, separated by an empty string.
  define the method send_messages with arguments self and email_messages.
  if exclude is true and f.name is contained in exclude,
  call the method self._read_limited, store the return value into chunk.
  define the function close_caches with dictionary pair of elements kwargs as argument.
  if value is None and attr is contained in declared_fields,
  if not,
  convert the value under the 'umask' key of options dictionary into an integer of base 8, substitute it for value under the 'umask' key of daemon_kwargs dictionary.
  convert to integer the value of dictionary cc under the key 'max-age', and return it
  define the method get_unique_error_message with 2 arguments: self and unique_check.
  return the result of the method self._html_output, called with 5 arguments: normal_row to a string,
  define the function print_ with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  substitute localized_fields for value under the 'localized_fields' key of attrs dictionary.
  code set to an string 'invalid_choice' and dictionary params with an entry: value for 'value'.   return value.
  from django.utils.safestring import mark_safe into default name space.
  substitute the resulting list for app_config.   if not,
  want_unicode is boolean False.
  import module sys.
  endless loop,
  initial set to None, error_class set to ErrorList, label_suffix set to None, empty_permitted set to boolean False.   if data is not None or files is not None, self.is_bound is boolean True, otherwise it is boolean False.
  define the function lock with arguments f and flags.
  _func_code is a string "__code__".
  call the method self._stream.read with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  call the self.convert method with s, self.decimal, self.decimal_digits and self.sign as arguments, assign the result to the neg and value, respectively.
  call the method self.form with unpacked dictionary defaults as an argument, substitute it for form.
  if in_index-th element of bits equals to string 'in',
  derive the AppCommand class from the BaseCommand base class.
  define the method add with 4 arguments: self, data, conn_type and squash set to boolean True.
  call the method inspect.getmro with an argument new_class, for every base in the result,
  get the element with maximal value between initial_forms and self.min_num, add self.extra to it, substitute the result for total_forms.
  for every k in keys,
  split x by character '=' and append first element of the result to the prev_opts list.   for every opt in options, if first element of opt is not contained in prev_opts, append opt to the list, substitute it for options.
  call the method self.error_class with an argument list with one element, return value of the method self.get_form_error,
  define the method __prepare_class__ with an argument self.
  yield choice.
  and pattern.default_args.   if pattern.name is not None,
  self.default_locale_path is None.
  with an argument value evaluates to false, and if 'convert_to_local_time' attribute of value object doesnt exists,   or is it does is boolean True, should_convert is boolean True, otherwise is boolean False.   if should_convert is true, call the function localtime with an argument value and return the result, otherwise return value.
  substitute buffer for memoryview.
  call the method apps.get_app_config with an argument app_label, for every app_label in app_labels, append the results to a list,
  return response.
  args is a empty tuple.
  try,
  get the value of the values dictionary under the value converted to lowercase key, substitute it for value, if the key doesnt exists,
  from __future__ import unicode_literals into default name space.
  date_keys is a tuple with 2 arguments: strings 'updateddate' and 'pubdate'.
  import module re.
  from .registry import register, run_checks, tag_exists and Tags into default name space.
  if not,
  format value into printable data representation with formating rules arg, return the result.
  if not,
  yield k.
  get the value under the name key of the data dictionary, if it exists substitute it for value, if not, value is None.
  call the method self.validate_name with 2 arguments name and app_or_project.
  call the method base.build_instance with arguments Model, data and self.db, substitute the result for obj.
  define the method encode with self class instance and i as arguments.
  return an instance of a class RegexURLResolver created with arguments: raw string '^/' and a list containing an element ns_resolver.
  call the function allow_lazy with 2 arguments: remove_tags, six.text_type, substitute the result for remove_tags.
  where '%s' is replaced with name and taglib.   call the method parser.add_library with an argument temp_lib.
  call the method logging.getLogger with an argument string 'py.warnings', substitute the result for logger.
  get the next element of the self._producer iterable, substitute it for output.
  raise an AttributeError exception with string "Unable to determine the file's size." as argument.
  define the method start_serialization with an argument self.
  if KeyError exception is caught,
  call the force_text function with 3 arguments: e.strerror, DEFAULT_LOCALE_ENCODING and strings_only set to boolean True.
  final_output is an empty list.
  call the method self.handle_startendtag with tag and attrs as the arguments.
  try,
  if self.timeout is not None,
  convert settings.FIXTURE_DIRS to a list, extend dirs by it.
  substitute template_string for self.template_string.
  call the method o.isoformat substitute the result for r.
  call the method router.allow_migrate with 2 arguments: self.using and obj.object.__class__, if it evaluates to true,
  if result is not root,
  raise an CommandError exception with an argument string "%r is not a valid port number.", where '%r' is repaced with self.port.
  for every f in files,
  if line is true,
  append '.' to frag, append the result to used.
  sublist is an string '\n%s<ul>\n%s\n%s</ul>\n%s', where every '%s' is replaced with indent, sublist, indent and indent, respectively.
  call the method parser.parse_args with an arguments args set to an empty list, assign the result for defaults and _, respectively.
  substitute as_string for as_bytes.
  define the method previous_page_number with an argument self.
  return self.__name.
  call the method os.path.abspath with an argument dirpath, join the result and dirname into a file path, inset it at the beggining of self.locale_paths.
  join bytes and self._leftover into a bytes string, substitute it for self._leftover.
  derive the class RssUserland091Feed from the RssFeed base class.
  called with an argument kw, only if v is not None, substitute the result for kw.   substitute tzinfo for value under the 'tzinfo' key of the kw dictionary.
  append name to exclude.
  define the method root_attributes with an argument self.
  substitute cached_loaders for self._cached_loaders.
  call the self.validate_key method with argument key.
  substitute the result for offset.   if first element of tzinfo equals '-',
  import module sys.
  parser is an instance of CommandParser class, created with 3 arguments: self, prog as a string created by joining:
  call the OVERLAPPED function, substitute the result for overlapped.
  join statements into a string, separated by newline characters, return it.
  merge_migrations is an empty list.
  call the method domain_part.encode with an argument string 'idna', on the return value call the decode method with string 'ascii' as argument, substitute the result for domain_part.
  define the function prepend_token with 2 arguments: self and token.
  define the method as_data with an argument self.
  and help is a string 'Migrations will be squashed until and including this migration.'.   call the method parser.add_argument with 5 arguments: string '--no-optimize', action as a string 'store_true',
  raise an ImproperlyConfigured exception with an argument string "Error importing template source loader %s - can't pass arguments to
  decrement truncate_len by integer 1.
  if Exception, renamed to e, exception is caught,
  define the function handle_m2m with an argument value,
  define the function format_html with 3 arguments: format_string, unpacked list args and unpacked dictionary kwargs.
  try,
  substitute i for self.pointer.
  convert self.file to string and append string '.py' to it, substitute the result for thefile.
  return boolean False.
  append '.' to name, substitute the result for prefixed.
  from django.forms.widgets import Media,  MediaDefiningClass,  TextInput and Textarea into default name space.
  if AttributeError exception is caught,
  append '/' to prefix.
  define the method __init__ with 4 arguments: self, children set to None, connector set to None and negated set to boolean False.
  get the value under the template_name key of the self.cache_key dictionary, if it exists, substitute it for key,
  if block_name is contained in parser.__loaded_blocks,
  derive the class CacheClass from the base class LocMemCache.
  substitute nodelist_true and nodelist_false for self.nodelist_true and self.nodelist_false, respectively.
  otherwise if t.token_type equals TOKEN_COMMENT,
  define the function Deserializer with 2 arguments: stream_or_string and unpacked dictionary options.
  convert header to lowercase, use it as the key to get the value from the self._headers dictionary, return the second element of the result.
  do nothing.
  define the function get_fixed_timezone with an argument offset.
  and help set to string 'Nominates a database to print the SQL for. Defaults to the "default" database.'.   define the handle_app_config with 3 arguments self, app_config and unpacked dictionary options.
  if value object the 'unique_id_is_permalink' key of the item dictionary is an instance of bool type,
  define the function validate_integer with an argument value.
  warn_msg is a string "The translator-targeted comment '%s' (%sline %d) was ignored, because it wasn't the last item on the line.",
  self._view_middleware is an empty list.
  define the function select_template with 2 arguments: template_name_list and dirs set to None.
  call the method self.build_attrs with 3 arguments: attrs, type set to self.input_type, name set to name,
  return self.text.
  define the __init__ method with arguments: self, text, subtype and charset.
  derive the class BaseEmailBackend from the object base class.
  if self.verbosity is greater or equal to integer 2,
  define the method __repr__ with an argument self.
  call the method router.allow_migrate with 2 arguments: database and cache.cache_model_class, if it evaluates to false,
  derive the class datetime from the real_datetime base class.
  if event.path ends with string '.mo',
  if middle ends with closing and count of occurrence of closing in middle equals count of occurrence of opening in middle incremented by one,
  for every o in opts,
  if ImportError exception is caught,
  define the method app_dict with an argument self.
  if value is None,
  if self.LibraryValueNotFoundException exception is caught,
  try,
  call the function force_text with an argument url, return the result.
  define the method cfg_convert with 2 arguments: self and value.
  call the method boundary with an argument string 'ascii', use the result to call to the parse_header function,
  substitute newretval for retval.
  if attrs is not None,
  return boolean True.
  return an empty string.
  if not self.max_length is None.   remove the value under 'allow_empty_file' key from the kwargs dictionary and if the key exists,
  slice root starting from the prefix_length index to the end, substitute it for path_rest.
  import module warnings.
  call the function import_module with 2 arguments: string .management and app_config.name.
  substitute the last element of parts for ser_fmt.
  default set to boolean False and help set to string 'Tells Django to use an IPv6 address.'.   define the method handle with self class instance, list of arguments fixture_labels and dictionary options as arguments.
  if IOError, substituted to e, exception is caught,
  define the function module_has_submodule with 2 arguments: package and module_name.
  from functools import update_wrapper.
  return an instance of SafeBytes, created with an argument t.
  append value to self._closable_objects list.
  define the function format with 6 arguments: number, decimal_sep, decimal_pos set to None, grouping set to integer 0,
  define the method __contains__ with 2 arguments: self and other.
  call the method handler.startElement with 2 arguments: string "rss" and result of the method self.rss_attributes.
  for every finder in sys.meta_path,
  call the method viewname.split, with an argument ':', substitute the result for parts.
  call the method self.total_form_count, for every i in sequence of integers, from 0 to the previous result,
  substitute old_setting for context.autoescape.
  lookups is an instance of the MultiValueDict class.
  return hard copy of self.keyOrder elements.
  for every s in strings, call the function force_text with an argument s, join the results in a string, return the result.
  from django.core.management.base import BaseCommand and CommandError into default name space.
  namespaces is an empty dictionary.
  call the function re.compile with 2 arguments: string '^([a-z])[:|]' and re.I, substitute the result for _url_drive_re.
  if length of bits is lesser than integer 3 or second element of bits is not equal to string 'as',
  append flup_module to string "Can't import flup.", print it to the standard output.
  if self.data is an instance of datetime.datetime and result of the function is_aware called with an argument self.data evaluates to true,
  call the method self.validate_key with argument key.
  define the method _wrapper with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  substitute the result for sequence_sql.   if sequence_sql is true,
  dest as a string 'interface' and help as a string 'Specify an interactive interpreter interface. Available options: "ipython" and "bpython"'.   define the method _ipython_pre_011 with an argument self.
  for dirname in dirs,
  _urllib_parse_moved_attributes is a list with 16 elemetns, all of them are the results of the call to the function MovedAttribute with different 3 string arguments.
  substitute c_ulong for ULONG_PTR.
  take all but the length of path_info last elements of script_url, substitute it for script_name.
  if bits is true and kwarg_format is false,
  define the method  main_help_text with arguments: self class instance and commands_only set to boolean False.
  use length of result as an argument for the call to the function six.text_type, substitute the result for width.   if autoescape is false, if value is an instance of SafeData,
  substitute s1 for s.
  if not,
  call the method n.getAttribute with string 'pk' as argument, use the result as an argument for the call to the field.rel.to._meta.pk.to_python method, substitute the result for obj_pk.
  filemsg is an empty string.
  return an instance of SafeText, created with an argument s converted into a string.
  replace every occurrence of '\\' in s with '\\\\'.
  call the function escape with an argument output.
  call the function digest with an argument password, call the method digest on the result, substitute the result or password.
  call the method re_escaped.sub with 2 arguments: raw string '\1' and piece, append the result to pieces.
  content_length is integer 0.
  filesize_number_format with result of division of bytes by TB as an argument, substitute the result for value.   if not,
  substitute key for value under the KEY key of the oldroot dictionary.
  constant_string is a raw string "(?:%(i18n_open)s%(strdq)s%(i18n_close)s|%(i18n_open)s%(strsq)s%(i18n_close)s|%(strdq)s|%(strsq)s)",
  raise an exception.
  _func_closure is a string "func_closure".
  call the method datetime.timedelta with an argument seconds set to integer 1, increment delta by it.
  decorator stringfilter,
  call the method self.style.NOTICE with string "  Run 'manage.py makemigrations' to make new migrations, and then re-run 'manage.py migrate' to apply them." as an argument, use the result as an argument for the call to the self.stdout.write method.
  do nothing.
  do nothing.
  if first two elements of sys.version_info equal to integers 2 ant 7, respectively,
  call the method serializers.get_public_serializer_formats, substitute the result for self.serialization_formats.
  call the __init__ method from the base class of the EmailBackend class, with arguments: unpacked list args and unpacked dictionary kwargs.
  substitute i-th element of self.forms for form.
  from django.utils.six.moves.urllib.parse import parse_qsl,  urlencode,  quote,  urljoin and urlsplit into default name space.
  if not,
  call the function resolve with arguments path and urlconf.
  define the method has_key with 2 arguments: self and key.
  call the method zipfile.ZipFile with an argument self, substitute the result for self._archive.
  define the function debug with 2 arguments: parser and token.
  substitute _iteritems for items.
  substitute style_func for self.style_func.
  if self.verbosity is greater or equal to 3,
  import module itertools.
  define the __init__ method with arguments: self, unpacked list args and unpacked dictionary kwargs.
  define the method handle_uncaught_exception with self class instance, request, resolver and exec_info as arguments.
  derive class CacheKeyWarning from the DjangoRuntimeWarning base class.
  call the method autoreload.main with 3 arguments: self.inner_run, None and options.
  return boolean True.
  return an instance of _CacheInfo class, created with 4 arguments: value under the HITS key of the stats dictionary,
  remove first and last character from the attrvalue, substitute it for attrvalue.
  append x converted to an integer to bits.
  derive the class Signer from the object base class.
  call the function get_templatetags_modules, substitute the result for templatetags_modules.
  try,
  covert to string value under the 'unique_id_is_permalink' key of the item dictionary, convert it to lowercase,
  append command.xgettext_options to list containing 15 elements: string 'xgettext', string '-d', domain, string '--language=Python',
  substitute negate for self.negate.
  return cookiedict.
  return None.
  if match is true,
  define the method bound_data with arguments self, data and initial.
  append filename to the self.attachments list.
  call the method domain.encode with an argument string 'idna', call the method decode on the result with an argument string 'ascii',
  try,
  call the function _ with an argument string 'Ensure this value is greater than or equal to %(limit_value)s.', substitute the result for message.
  get translation_function attribute of the _default object, call the result with 3 arguments: singular, plural and number, return the result.
  define the method handle with 3 arguments: self, unpacked list test_labels and unpacked dictionary options.
  if not,
  old_field_name is None.
  get the value under the 'id' key of the attrs dictionary, substitute the return value field of the self object for id_.
  for every uclass, unique_check in all_unique_checks,
  define the function wrapper with an argument cls.
  return an instance of TemplateLiteral with 2 arguments: result of the function self.template_parser.compile_filter,
  call the method __init__ from the base class of the Deserializer class with arguments stream_or_string and unpacked dictionary options.
  from django.utils.six.moves import copyreg into default name space.
  call the self.stderr.write method with string "    Failed to install custom SQL for %s.%s model: %s\n" as argument,
  if IOError exception is caught,
  remove 'LOCATION' key from kwargs dictionary and put it into location, or use an empty string if key doesnt exists.
  substitute attrs for self.attrs.
  if arg starts with options,
  return value.
  import module sys.
  define the method __iter__ with an argument self.
  import module sys.
  define the method next_token with an argument self.
  return value.
  a dictionary with 18 pairs of dictionary value and string keys for DARK_PALETTE,   and a dictionary with 18 pairs of dictionary value and string keys for LIGHT_PALETTE.   substitute DARK_PALETTE for DEFAULT_PALETTE.
  substitute instance._meta for opts.
  define the method tokenize with an argument self.
  if changes is true,
  if name is not contained in data,
  '"Upload a valid image. The file you uploaded was either not an image or a corrupted image."' for 'invalid_image'.   define the method to_python with arguments self and data.
  from django.utils.six.moves import zip into default name space.
  allow_files set to boolean True, allow_folders set to boolean False, required set to boolean True, widget set to None,   label set to None, initial set to None, help_text set to an empty string, unpacked list args, unpacked dictionary kwargs.   substitute path, match and recursive for self.path, self.match and self.recursive.
  substitute old_attr for new_attr.
  if MiddlewareNotUsed exception is raised,
  define the method eval with 2 arguments self and context.
  replace every occurrence of newline character in value with string '<br />', use it as an argument for the call to the mark_safe,
  substitute URLInput for widget.
  call the function data with 3 arguments: self.year, self.month and self.day, return the result.
  do nothing.
  define the method _iteritems with an argument self.
  return an empty string.
  if not,
  format_key is a string 'DATE_INPUT_FORMATS'.
  define the method __init__ with 7 arguments: self, regex, max_length set to None, min_length set to None, error_message set to None,
  remove dirname from the dirnames.
  call the self._open method with name and mode arguments, return the result.
  instantiate class X, get its length.
  num_pages is a property object with _get_num_pages as a getter method.
  from django.utils.timezone import get_default_timezone, is_aware and is_naive into default name space.
  import module os.
  get the value from the options dictionary under the key 'verbosity', substitute it for self.verbosity.
  import module os.
  return value.
  get the value under the old_method_name key of the base.__dict__ dictionary, substitute it for old_method.
  write string "  No optimizations possible." to self.stdout stream.
  for every name in loggers,
  from django.utils.safestring import SafeData and EscapeData into default name space.
  if ValueError exception is caught.
  serialize data to JSON format with cls set to encoder, substitute it for data.
  slit by whitespace the value under the 'COMP_WORDS' key of the os.environ dictionary, substitute the result without the first element for cwords.
  self.stdout.ending is None.
  define the method tell with an argument self.
  sub_match.url_name, self.app_name if it exists or if not sub_match.app_name and sub_match.namespaces list appended to self.name.   append pattern to tried list.
  and instance of TimeInput class, created with 2 arguments: attrs set to attrs and format set to date_format.   call the method __init__ from the base class of the class SplitDateTimeWidget, with 2 arguments: widgets and attrs.
  use the result as an key to get the value from the LUHN_ODD_LOOKUP dictionary, sum all the results and substitute the result for odds.   sum evens and odds, if the result is divisible by integer 10, return boolean True, if not return boolean False.
  self._errors is an instance of ErrorDict.
  from django.conf import settings into default name space.
  try,
  if self.addr is false,
  derive the class CycleNode from Node base class.
  define the method validate with arguments self and value.
  new_class.declared_fields.keys.   if missing_fields is true,
  subject is an string '%s: %s' formated with record.levelname and result of the method record.getMessage, respectively.
  substitute first size elements of self.buffer for result.
  define the function rfc3339_date with an argument date.
  define the function sql_custom with 3 arguments: app_config, style and connection.
  default_validators is a list with an element validators.validate_email.
  define the function build_request_repr with arguments: request, path_override set to None, GET_override set to None,
  yield widget.
  from .. import Warning, register and Tags into default name space.
  call the method parser.next_token, substitute the result for token.
  set self.cdata_tag to None.
  if stream_or_string is not an instance of bytes or six.string_types,
  if only_new is true,
  define the function safe_join with 2 arguments base and unpacked dictionary paths.
  derive the class CacheClass from the DatabaseCache base class.
  substitute self.waiting_readers for t.
  if not,
  for every f in opts.local_fields that has an 'post_create_sql' attribute, append f to a list, substitute the resulting list for post_sql_fields.
  raise an AttributeError with an argument string "This %s instance has no `content` attribute. "Use `streaming_content` instead.",
  return html.
  call the method nodelist.get_nodes_by_type with an argument nodetype, extend nodes with the result.
  derive the class EscapeText from six.text_type and EscapeData base classes.
  substitute data for data_value if data is not None, otherwise data_value is an empty list.
  inplural is boolean False.
  if not,
  if AttributeError exception is caught,
  call the middleware_method with request, callback, callback_args and callback_kwargs as the arguments, substitute the result for response.
  import module opera.
  from django.utils.ipv6 import is_valid_ipv6_address into default name space.
  if not,
  return result.
  call the flatten method of the self and other objects, if they are equal, return boolean True, if not return boolean False.
  close file descriptor s.
  if __name__ equals a string '__main__'.
  define the function __init__ with 11 arguments: self, required set to boolean True, widget set to None, label set to None,
  import flup
  if cache_timeout is None,
  define the method _create_message with arguments self and msg.
  return wrapper.
  if boundary is false or return value of the method cgi.valid_boundary called with an argument boundary evaluates to false,
  substitute settings.CACHE_MIDDLEWARE_KEY_PREFIX for key_prefix.
  call the method constant_re.match with first element of parts as an argument, substitute the result for cmatch.
  if not,
  return an empty string.
  open err_log flie in append mode with buffering size of input buffer, substitute the result for se.
  return self._client.
  define the method items with an argument self.
  call the method self.unclosed_block_tag with an argument parse_until.
  call the method self.make_key with key and version set to version as arguments, substitute the result for key.
  derive the class cached_property from the object base class.
  call the method self.__deepcopy__ with an empty dictionary as an argument.
  if not,
  otherwise if child.nodeType equals to child.ELEMENT_NODE,
  define the method check_programs with an argument unpacked list programs.
  if idstring is None,
  call the function re.compile with 2 arguments regex, re.UNICODE and substitute the result for regex.
  created with arguments sys.stderr and self.style.ERROR.   replace '%s' in string '%s: %s' with e.__class__.__name__ and e, respectively, write it to the stderr stream.
  for every node in return value of the graph.leaf_nodes method called with the app_name argument,
  call the function _check_boolean_field_default_value with dictionary kwargs as argument, use the result as an argument for the call to the function errors.extend.
  if escaped is true,
  define the method _save with arguments self, name and content.
  or opts.auto_created is True and return value of converter function with opts.auto_created._meta.db_table is contained in tables,   invert the evaluated expression and return it.   manifest is OrderDict class instance, created with tuple of two elements, app_name and list of elements of model_list for which model_installed function returned true, for every app_name and model_list in all_modules.
  call the method self.write_items with an argument handler.
  call the method self.parse_file_upload with arguments self.META and data, assign the result to self._post and self._files.
  from django.conf import settings into default name space.
  if ValueError exception is caught,
  call the method self.get_template_sources with 2 arguments template_name and template_dirs, for every filepath in the result,
  map elements from args through the function conditional_escape, substitute the result for args_safe.
  from django.core.management.base import CommandError into default name space.
  get the value under the name key of self.blocks dictionary, insert to it block at the beginning.
  from django.core.management.base import AppCommand into default name space.
  call the function os.stat with an argument filename, substitute the result for st.
  define the method e with an argument self.
  call the function localize with 2 arguments: value and use_l10n=context.use_l10n, substitute the result for value.
  call the method connection.introspection.get_relations with 2 arguments cursor, table_name and substitute the result for indexes.
  if value is false, return it, if it is true convert first element of value to uppercase letter, return the value.
  self._validate_unique is boolean True.
  call the function mark_safe with an argument result, return it.
  import module warnings.
  from django.utils.functional import cached_property into default name space.
  raise an ValidationError with 3 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary,
  convert '\n' to a string, if it is contained in value or '\r' converted to an string is contained in value,
  concatenate var_name, VARIABLE_ATTRIBUTE_SEPARATOR and fourth element of bits, use the result as an argument for the call the method,
  call the method msg.attach with an argument body_msg.
  call the function to_locale with an argument language, substitute it for self.__locale.
  call the method p.find with bytes string '=' as an argument, substitute the result for i.
  write current_chunk to file fd.
  define the method compile_function_error with 3 arguments: self, token and e.
  define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  call the method self.__class__, substitute the result for result.
  substitute upload_handlers for self._upload_handlers.
  _empty_value is an empty list.
  if tok starts with "'",
  if self doesnt have an attribute '_fqdn',
  for every iso_input in the result,   if iso_input is not contained in val,
  call the function template_localtime with 2 arguments: obj and context.use_tz, substitute the result for obj.
  raise a ValidationError exception with arguments self.message and code set to self.code.
  define the function ngettext_lazy with 3 arguments: singular, plural and number set to None.
  if self._cull_frequency equals to integer 0.
  if prefix is false, and self doesnt have '_callback_str' attribute,
  define the method configure_formatter with 2 arguments: self and config.
  substitute buf_size for self.buf_size.
  call the force_bytes function with an argument settings.SECRET_KEY, substitute the result for key.
  define the function deactivate.
  set attr.name attribute of the Module_six_moves_urllib_request object to attr.
  define the mehod __lt__ with self and other.
  call the method self._archive.read with an argument name, substitute the result for data.
  return None.
  import module cgi.
  return output.
  define the method __enter__ with an argument self.
  raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a created_time() method'.
  if field is contained in form.cleaned_data,
  if lookup_view is contained in self._callback_strs,
  self.lookups is None.
  return an empty string.
  get '_filter_name' attribute of the func object, if it exists, substitute it for filter_name, if not, filter_name is None.
  delete the value under the header converted to lowercase key of the self._headers dictionary.
  if pickle.PickleError exception is caught,
  define the method setlistdefault with 3 arguments: self, key and default_list set to None.
  get the type of the exc object, substitute it for exc_type.
  if end is not a '>' or '/>' character,
  convert to an integer first element of the value under the 'content-length' key of the meta_data dictionary, substitute it for content_length.
  call the baseconv.base62.decode method with an argument timestamp, substitute the result for timestamp.
  replace all '%s' in string '<%s %s (%s:%s) %s>' with self.__class__.__name__, urlconf_repr, self.app_name,
  call the method self.validate_name with arguments project_name and string "project".
  sub is an empty string.
  resource_string is None.
  return self.
  decrement self.active_writers by integer 1,
  if not,
  get the value under the 'indent' key of self.options dictionary, if it is true,
  return None.
  import module sys.
  append entry to the directories list.
  define the method add_initial_prefix with 2 arguments: self and field_name.
  define the method emit_post_migrate with arguments verbosity, interactive and database.
  self.registered_checks is an empty list.
  if size is not zero,
  call the function six.text_type with an argument self, divide the result with rhs and return the reminder of the division.
  if 'fields' attribute of meta is None, or if it doesnt exists if fields is None and if 'exclude' attribute of meta is None,
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  try,
  return an empty list.
  sql_files is an empty list.
  if value under the 'author_link' key of the item dictionary is not None,
  define the method __init__ with 4 arguments: self, key set to None, sep set to ':' and salt set to None.
  define the method clean with arguments self and value.
  property decorator,
  get the value under the 'id' key of the self.attrs dictionary, substitute it for id_ if the key exists, if not id_ is None.
  substitute value for the vale under the name key of the pdict dictionary.
  for every obj in result of the method queryset.iterator,
  if not, substitute func.__name__ for name.   call the method self.filter with 3 arguments: name, func and unpacked dictionary flags.
  'Enter a number.' for 'invalid'.   define the method to_python with arguments self and value.
  call the method posixpath.splitext with an argument the_path.
  call the self._list_cache_files method, substitute the result for filelist.
  from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space.
  call the self.initial_form_count method, return the sublist of self.forms from the beginning to the previous result as the end index.
  return content.
  return result.
  call the function _load_serializers.
  call the method self.connection.login with arguments self.username and self.password.
  yield d.
  define the method handle_label with 3 arguments: self, label and unpacked dictionary options.
  try,
  append 2 consecutive newlines to output.
  import module functools.
  pop the value under the 'file_path' key of kwargs dictionary, substitute it for self.file_path.
  call the method self.get_date_error_message with an argument date_check, append the result to errors.
  update flat dictionary with d.
  call parser.add_argument method with '--noinput', action set to string 'store_false', dest set to string 'interactive',
  for every fixture_dir in fixture_dirs,
  substitute the result for final_attrs.   get the value under the 'id' key of final_attrs dictionary, substitute if for id_ if the key doesnt exists, id_ is None.
  call the method self.configure_logger with 2 arguments: name and value under loggers dictionary key name.
  if s_len is greater than length,
  if not,
  if not,
  substitute complain for __imul__.
  define the method get_queryset with an argument self.
  input_type is a string 'radio'.
  EMPTY_VALUES is a tuple containing 5 initial elements: None, empty string, empty list, empty tuple and an empty dictionary.
  __version__ is a string "1.6.1".
  call the method get_accessor_name on the result, substitute all occurrences of '+' in the result with an empty string, return it.   define the method save_new with 3 arguments: self, form and commit set to boolean True.
  define the method enter_command with 3 arguments: self, command and token.
  substitute options.args for args.
  with self.mutex perform,
  if ImportError or AttributeError exception occurred,
  try,
  call the method self.connection.close.
  and third element of the function sys.exc_info result.   return attr.
  join elements of self.vals into a bytes string, substitute the result for ret.
  define the method _set_regex with arguments self and regex.
  substitute '%s' in TEMPLATE_FRAGMENT_KEY_TEMPLATE string with fragment_name and args.hexdigest(), respectively, return the result.
  try,
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  dirs is a list containing basedir.
  return the printable representation of the self object converted to a dictionary.
  while field.rel is not None,
  zbuf is an instance of BytesIO class.
  memo is an empty dictionary.
  if header list is not None,
  if app_labels is true,
  from django.apps import apps into default name space.
  if UnicodeError exception is caught,
  call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store', dest as a string 'database',
  if line ends with a new line character substitute width incremented by integer 1 for max_width, if not substitute width for max_width.
  try,
  call the method Model._meta.get_all_field_names, substitute the result for model_fields.
  define the method __call__ with 2 arguments: self and f.
  substitute self.subject for value under the 'Subject' key of msg dictionary.
  define the method __init__ with 2 arguments: self and conditions_nodelists.
  if not,
  finally perform,
  return new_class.
  from django.utils.crypto import get_random_string into default name space.
  raise an exception parser.error_class with an argument string "Unexpected end of expression in if tag.".
  define the method listdir with arguments self and path.
  calculate the length of args, substitute it for alen.
  substitute second element of bits without the first and last element for format_string.
  substitute self.addr without the first and last element for self.addr.
  substitute it for candidate_subs.   if not,
  otherwise if ch equals a string '(',
  call the translation.get_language_bidi function, substitute the result for the value under the 'LANGUAGE_BIDI' key of the context_extras dictionary.
  if not,
  import module logging.
  define the function file_move_safe with 4 arguments: old_file_name, new_file_name, chunk_size set to multiple of integers 1024 and 64,
  define the method _list_cache_files with argument self.
  from django.apps import apps into default name space.
  call the function force_text with an argument value, substitute the result for value under the 'value' key of the final_attrs.
  derive the class TimeFormat from the base class Formatter.
  if status is True,
  called with an argument this_value_expr, result of the method parser.compile_filter called with an argument max_value_expr,   return value of the method parser.compile_filter called with an argument max_width and asvar as asvar.   register.tag decorator function with an argument 'with',
  call the function self._key_to_file with key and version as arguments, substitute it for fname.
  define the method __init__ with 2 arguments: self and config.
  call the function new_method_proxy with an argument hash, substitute the result for __hash__.
  return boolean False.
  remove element under 'stream' key of kwargs dictionary, substitute the result for value under 'strm' key of kwargs dictionary.
  define the function deactivate_all.
  if ValueError or self.queryset.model.DoesNotExist exception is caught,
  try,
  substitute i for p.
  and unpacked dictionary kwargs, return the result.   call the function MovedModule with 2 arguments: strings "_dummy_thread" and "dummy_thread",
  append string ".moves.urllib_robotparser" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for robotparser.
  and result of bitwise OR performed on 2 operands: re.MULTILINE and re.VERBOSE,   substitute the result for value under the state key of the self.regexes dictionary.   substitute first for self.state.
  decorator method register.tag with an argument 'include',
  use it as an argument for the call to the force_str function, return the result.   define the method add_prefix with arguments self and prefix.
  for every entry in os.listdir function return value called with the argument path,
  gettext._translations is an empty dictionary.
  substitute the result for i-th element of lines.   if not,
  default_validators is a list with an element, return value of the validators.URLValidator method.
  ch2 is None.
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  get the value under the new_method_name key of the base.__dict__ dictionary, substitute it for new_method.
  if connection exists dont change it, if not call the get_connection function with username set to auth_user,
  define the method has_changed with an argument self.
  DEFAULT_MIN_NUM is an integer 0.
  call the self._lock.writer method, with the result perform the following,
  call the BaseConverter function with BASE56_ALPHABET as argument, store the result in base56.
  convert fourth element of row to an integer, substitute it for value under the 'max_digits' key of the field_params.
  if not substitute field.initial for initial_value.   if initial_value is an callable object,
  define the function urlquote_plus with 2 arguments: url and safe set to an empty string.
  and convert it to lowercase, substitute the result for value.   call the function re.sub with 3 arguments: string '[-\s]+', string '-' and value, use the result as an argument for the call to the,
  "format (using each model's default manager unless --all is specified).".   define the method add_arguments with arguments self and parser.
  substitute len for _len.
  if Exception exception is caught.
  return boolean True.
  acceptable_endblocks is a tuple with 2 elements: string 'endblock' and 'endblock %s', where '%s' replaced with block_name.
  call the function write with an argument sep.
  call the method m.group with an argument string 'year', convert the result into a string, substitute it for year.
  for every name and var in return value of the function six.iteritems called with an argument self.extra_context.   if self.isolated_context is true,
  if use_func is true,
  call the function resource_string with 2 arguments app_config.name and pkg_name, substitute the result for resource.
  call the function convert_old_style_list with an argument value, substitute the result for value and converted, respectively.
  is_usable is boolean True.
  return self.
  call the function conditional_escape with an argument contents, substitute the result for contents.
  if leading is true,
  self._unget_history is an empty list.
  for every field in self.fields,
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  return an instance of SafeBytes, created with an argument data.
  substitute language for self.language.
  call the __init__ method of the base class of the class LocaleRegexURLResolver, with arguments:  None, urlconf_name, default_kwargs, app_name and namespace.
  define the function b64_encode with an argument s.
  property decorator,
  return an dictionary containing 1 entry: settings.MEDIA_URL for 'MEDIA_URL'.
  multiply 10 to the power of 200, with 10 to the power of 200, negative, substitute the result for neg_inf.
  string '<script type="text/javascript" src="{0}"></script>' and absolute file path of the path, for every path is self._js.   define the method render_css with an argument self.
  derive class _LazyModule from the types.ModuleType base class.
  call the method cls.__new__ with 2 arguments: cls and unpacked list args.
  return boolean True.
  call the parseaddr function with return value of the force_text with argument addr, as argument, substitute the result for addr.
  if 'pk' is contained in d,
  gett self.attr from the module object, return it.
  return a list with an element tuple with 2 elements: an empty string and an empty list.
  from django.core.mail import get_connection into default name space.
  decorator stringfilter,
  if http_cookies.CookieError exception is raised,
  derive the class DeserializedObject from the object base class.
  kwargs is a dictionary with elements: config dictionary element under k key for k, for every k in result of function valid_ident,
  define the method _find_boundary with an arguments self, data and eof set to boolean False.
  if email_messages is false,
  return duplicate
  define the method __iter__ with an argument self.
  derive the class EmailField from the base class CharField class.
  try,
  if locale is not false or None, substitute it for locales, otherwise substitute all_locales for locales.
  call the function get_template_from_string with 3 arguments: template, origin and template_name, substitute the result for template.
  raise an CommandError with an argument string "%r is not a valid %s name. Please %s.", were '%r' is replaced with name,
  return timezone.zone.
  use the result as the argument for the call to the function hashlib.sha1, call the hexdigest method on the result,   join template_name and previous final result into a string, separated with '-', return it.   if not,
  call the method handler.endElement with an argument string 'rss'.
  delete the value under key key of self._expire_info.
  substitute value for self.value.
  import module warnings.
  call the function next_space_index with 2 arguments: subject and i, substitute the result for i.
  termios is None.
  if not,
  errors is an empty list.
  return None.
  derive the class RenameMethodsBase from type base class.
  for every node in self.nodelist_loop,
  status_code is an integer 405.
  tablename and return value of the function force_text called with an argument e, respectively.   for every statement in index_output,
  if files is true, substitute it for self.files, if not self.files is an empty dictionary.
  substitute args, without the last element for args.
  if not,
  call the method threading.Semaphore with an argument integer 0, substitute the result for self.can_write.
  derive the class Textarea from the Widget base class.
  for every message in email_messages:
  substitute path_info for self.path_info.
  from __future__ import unicode_literals into default name space.
  shell is an instance of IPShell class, created with an argument argv as an empty list.
  append a tuple containing 2 elements: content and mimetype, to the self.alternatives list.
  if self.verbosity is greater than integer 1,
  if StopIteration exception,
  if settings.TEMPLATE_DEBUG and display_name are both true,
  substitute name for filter_func._filter_name.
  call the __init__ method with 3 arguments: WARNING, unpacked list args and unpacked dictionary kwargs from the base class of Warning.
  raise an BadSignature exception with an argument string 'Signature "%s" does not match', where '%s' is replaced by sig.
  sum absolute p with units an integer 1, substitute the result for prec.
  action set to 'append', default is a list containing string 'py' and help set to string:   'The file extension(s) to render (default: "py"). Separate multiple extensions with commas, or use -e multiple times.'.   call the method parser.add_argument with 6 arguments: string '--name', string '-n', dest set to string 'files',
  call the method self.can_write.release.
   if field.widget.needs_multipart_form is true,
  if instance is None,
  decorator deconstructible,
  define the method H with an argument self.
  if value is an instance of str type,
  do nothing.
  if return value of the method UserModel._default_manager.exists is false and value under the 'interactive' key of the options dictionary is true,
  call the method widget_attrs with an argument widget, from the base class of the DecimalField class, substitute the result for attrs.
  derive the class Tags with base class object.
  substitute name for self.name.
  call the function make_origin with 4 arguments: display_name, self.load_template_source, template_name and template_dirs,
  import module zipfile.
  for every loader in self._loaders,
  return boolean False.
  once split at the '.' value under the 'ENGINE' key of the connection.settings_dict dictionary, substitute last element of the result for backend_name.
  if _cookie_encodes_correctly and _cookie_allows_colon_in_names are boolean True,
  self.none_value is a tuple containing 2 elements: integer 0 and empty_label.
  for every field, errors in self.error_dict.items method return value,
  if not,
  extend all_locales list with the elements of locale_dirs list on which os.path.basename function was applied.
  write it to self.stdout.   if not,
  from django.core.management.commands.check import Command as CheckCommand into default name space.
  substitute self._setupfunc for repr_attr.
  try,
  get the value under the settings.__module__ key of the sys.modules dictionary,
  derive the class PageNotAnInteger from the InvalidPage base class.
  call the method node.render with an argument context, append the result to the nodelist.
  if self.message_context is true,
  append string '_0' to id_.
  add together self.to, self.cc and self.bcc, return the result.
  call the function func with 2 arguments: unpacked list self.__args and unpacked dictionary self.__kw, return the result.
  append value under the 'protocol' key of the options dictionary to the string 'server.', substitute it for flup_module.
  otherwise if f.unique is true,
  call the method copy.copy, substitute the result for obj.
  remove the first occurrence of the filename value in the _error_files list.
  prefix set to None, queryset set to None and unpacked dictionary kwargs.   substitute queryset for self.queryset.
  return an instance of a class RegexURLResolver created with arguments: raw string '^/' and urlconf.
  append list containing string '--no-wrap' to self.msguniq_options.
  return data.
  import module re.
   from django.utils import translation into default namespace.
  if version is None,
  define the method file_complete with arguments self and file_size.
  raise an TemplateSyntaxError exception with an argument string "Invalid arguments provided to assignment_tag".
  substitute the result for final_attrs.   call the method self.is_checked, if it evaluates to true,
   substitute value under the RESULT key of the root dictionary for oldvalue.
  self._num_pages is a integer 0.
  if Exception, renamed to e, exception is caught,
  call the self.read method with argument chunk_size, substitute the result for data.
  define the method __init__ with arguments: self and options set to None.
  call the function func with 2 arguments: unpacked list self.__args and unpacked dictionary self.__kw, substitute the result for res.
  define the function unlock with argument f.
  import module sys.
  where '%r' are replaced by val and name, respectively.   try,
  define the method __init__ with 6 arguments: self, dict_ set to None, autoescape set to True, current_app set to None,
  self.items is an empty list.
  set the file pointer at the beginning of the self.file file.
  define the method get with 4 arguments, self, key, default set to None and version set to None.
  otherwise if value is an instance of datetime.datetime,
  from django.utils.dates import MONTHS into default name space.
  call the method parser.delete_first_token.
  call the function middleware_class with 2 arguments: unpacked list m_args and unpacked dictionary m_kwargs,
  assign script_name to the value under the 'SCRIP_NAME' key of the self.META dictionary.
  substitute complain for __delitem__.
  substitute self.DEFAULT_CHUNK_SIZE for chunk_size.
  if not,
  import module django.core.checks.compatibility.django_1_6_0.
  call the method middleware.process_exception with 2 arguments: request and e, substitute the result for result.
  use the result as the argument for the call to the messages.update function.   update messages dictionary with error_messages, if it exists, if not don't update it.
  saved_instances is an empty list.
  if KeyError exception is caught,
  substitute initial_forms for total_forms.
  unpacked list exc_info.   if self.include_html is true, call the method reporter.get_traceback_html and substitute the result for html_message,
  raise an exception ImproperlyConfigured with string "You must define a '%s' cache" as argument, with '%s' replaced with DEFAULT_CACHE_ALIAS converted into a string.
  return boolean False.
  return nodelist.
  if site is contained in sites2,
  read chunk_size bytes from the old_file file, substitute the result for current_chunk.
  for every ext in combo, if ext is true, join it to a string, separated by '.', put the result in a tuple,
  do nothing.
  call the __init__ method with 3 arguments: INFO, unpacked list args and unpacked dictionary kwargs from the base class of Info.
  _builtin_context_processors is a tuple containing a string 'django.core.context_processors.csrf'.
  call the function strip_tags with an argument value, return the result.
  define the method render with 4 arguments: self, name, value and attrs set to None.
  if not,
  if value is true,
  from django.conf import settings into default name space.
  substitute i-th element of self.data for error.
  call the method handler.addQuickElement with 2 arguments: string 'pubDate' and result of the function rfc2822_date,
  if not, substitute used_name for guessed_filename.   if not,
  call the function json.loads with an argument stream_or_string, substitute the result for objects.
  return nothing.
  import module time.
  and unpacked dictionary kwargs.   define the method new_file with arguments: self, file_name, unpacked list args and unpacked dictionary kwargs.
  try,
  try,
  append to a list elements of the iterator self, return the resulting list.
  assign the values to the callback, callback_args, callback_kwargs, respectively, from the resolver_match tuple.
  define the method compile_filter_error with 3 arguments: self, token and e.
  call the method self.nodelist.render with an argument context, strip the result of the surrounding whitespaces,
  derive the class MultipleObjectsReturned from the Exception base class.
  if text has an '__html__' attribute,
  call the function get_quantifier with 2 arguments: ch and pattern_iter, substitute the result for count and ch, respectively.
  self._files is an instance of class MultiValueDict.   if not,
  define the method handle with arguments self and unpacked dictionary options.
  write a newline into a self.stream file stream.
  define the method __init__ with 4 arguments: self, form, field and name.
  if escaped is true,
  with the argument view, store the result in the view.   return view
  substitute i-th element of self.forms for form.
  try,
  define method add_arguments with class instance self and parser as the input arguments.
  value under the 'feed_url' key of the self.feed dictionary for 'href'.   if value under the 'language' key of the self.feed dictionary is not None,
  if not,
  autodetector is an instance of the MigrationAutodetector class, created with 3 arguments: result of the method loader.project_state,
  __all__ is a tuple containing strings: 'Storage', 'FileSystemStorage', 'DefaultStorage' and 'default_storage'.
  break from the loop execution,
  call the method parser.compile_filter with an argument string "var|%s", where '%s' is replaced with rest, substitute the result for filter_expr.
  if self doesnt have an '_body' attribute,
  tt is a tuple with 9 elements: dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, result of the method dt.weekday,
  call the os.umask function with argument integer 0, substitute the result for old_umask.
  strip whitespaces from both ends of unicode_value, substitute the result for value.
  get the value under the 'extensions' key of the options dictionary, substitute it for extensions.
  if value equals k or text_value equals return value of the function force_text called with argument k,
  call the method self.configure_filter with an argument value under name key of formatters dictionary,
  return nothing.
  if data is bound to the same object as FILE_INPUT_CONTRADICTION,
  define the method update with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  if not,
  from pprint import pformat into default name space.
  from copy import copy into default name space.
  call the function six.iteritems with an argument kwargs, for every key and value in the result,
  remove first element from self.command_stack.
  substitute exception for self.exception.
  substitute source for self.source.
  for every cnt and digit in enumerated list int_part with reversed ordering of elements,
  substitute the list of results for values.   return an instance of a class IfChangedNode, created with 3 arguments: nodelist_true, nodelist_false and unpacked list values.
  define the function ifnotequal with 2 arguments: parser and token.
  remove the first element from result.
  raise an ValueError with an argument string "'%s' has no field named '%s'.", with '%s' replaced with self.__class__.__name__ and field, respectively.
  increment current_len by integer 1,
  set accessor_name of the self.object to object_list.
  call the method self.split_leading_dir with an argument path, assign the result to prefix and rest, respectively.
  neg is integer 0.
  define the method __str__ with an argument self.
  return s.
  call the method self.has_previous, if it evaluate to false, call the self.has_next method, return the result.
  define the method handle with 3 arguments: self, unpacked args and unpacked dictionary options.
  where '%s' is replaced with self.__class__.__name__.   if self doesnt have an '_ordering' attribute,
  decorator function register.filter with an argument is_safe set to boolean True.
  empty string for 'field', empty string for 'help_text' and html_class_attr for html_class_attr.   append last_row to output.
  for x in a list containing 3 elements: self.id, self.first and self.second, if x is not None,
  nesting is integer 0.
  from django.utils.functional import lazy into default name space.
  if options is true,
  call the method translation._catalog.copy, substitute the result for self._catalog.
  if settings.USE_L10N is true, substitute settings.USE_THOUSAND_SEPARATOR for use_grouping,
  if e.errno equals to errno.EEXIST,
  return self.data.day.
  for every field, initial and data in list of tuples tuple containing elements of self.fields, initial and data, respectively,
  call the method self.style.NOTICE with an argument:
  if not,
  value under the "RUN_MAIN" key of new_environ dictionary is a string 'true'.
  if value under the DEFAULT_CACHE_ALIAS key of caches dictionary is not equal to other, return boolean True, otherwise return False.
  return _decorator.
  error is an dictionary with an initial entry error.error_list for filed if true, or NON_FIELD_ERRORS if not.
  default_error_messages is an dictionary with an initial entry: result of the function _ called with an argument string,
  define the method S with an argument self.
  return an dictionary containing 1 entry: return value of the function _get_val for 'csrf_token'.
  raise an CommandError exception with an argument string "you must provide %s %s name", where '%s' is replaced with string 'an',
  if fname file path exists,
  call the method handler.addQuickElement with 3 arguments: string 'category', an empty string and a dictionary with an entry:
  if self.locale_paths is true,
  call the method self._get_scheme, return the result.
  call the method self.configure_custom with an argument config, substitute the result for result.
  locales is a difference between the locales and exclude sets.
  substitute content.name for name.
  call the function _urlize with 3 arguments: value, nofollow set to boolean True, autoescape set to autoescape,
  if encoded contains string "\\" and if encoded doesnt start with the double quote symbol,
  call the method to_delete.add with an argument model.
  define the method __init__ with arguments self, context, base, sysid and pubid.
  call the method self.getvalue, return the result.
  from django.utils.encoding import force_str,  force_text and DEFAULT_LOCALE_ENCODING into default name space.
  define the function find_command with 3 arguments: cmd, path set to None and pathext set to None.
  call the function os.path.basename with argument name, substitute the result for name.
  missing_args_message is a tuple containing a string "No database fixture specified. Please provide the "
  replace the result for tz_name.   call the method tz_name.encode with the arguments 'ascii' and 'ignore', call the method decode on the result with 'ascii' as argument,
  import readline.
  substitute help_texts for value under the 'help_texts' key of attrs dictionary.
  define the method has_header with 2 arguments: self and header.
  and e.level is lesser than checks.WARNING and result of the method e.is_silenced in false.   append e to warnings list for every e in all_issues, if checks.WARNING is lesser than or equal to e.level,
  remove symlink_path file.
  timeout is integer 300.
  if not,
  call the self._delete method with argument fname.
  substitute str for text_type.
  define the function modelform_factory with 10 arguments: model, form set to ModelForm, fields set to None, exclude set to None,
  output is an empty list.
  if m is true,
  if settings.DEBUG_PROPAGATE_EXCEPTIONS is True,
  try,
  if p is greater or equal to integer 0,
  __all__ is a tuple containing strings: 'LOCK_EX', 'LOCK_SH', 'LOCK_NB', 'lock' and 'unlock'.
  append a tuple with 2 elements: None and nodelist to conditions_nodelists.
  raise an NotImplementedError exception with an argument string 'subclasses of BaseCommand must provide a handle() method'.
  call the method self.validate_key with argument key.
  if self._delegate_bytes and six.PY2 are both true,
  call the function re.compile with an argument string "^\s*trans\s+((?:"[^"]*?")|(?:'[^']*?'))(\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?')))?\s*", substitute the result for inline_re.
  call the function pickle.dumps with argument value, use the result and integer -1 as arguments for the call to the function zlib.compress, use the result as an argument for the call to the f.write method.
  sum m and value under the medium key of the base dictionary, substitute it for m.
  from django.utils.encoding import force_text into default name space.
  join elements of list source from index last to the end into a string, substitute it for piece.
  define the function remove_tags with 2 arguments: html and tags.
  tr,
  RemovedInDjango19Warning and integer 2 as arguments.   if self does not have an '_request' attribute,
  try,
  i is integer 365.
  call the method self.has_header with string 'Content-Encoding' as an argument, if it evaluates to true,
  append list containing view_path to self.namespaces list, join all the elements into a string separated by character ':',
  _meth_self is a string "__self__".
  verbosity set to verbosity, interactive set to interactive and using set to db.   call the method models.signals.post_syncdb.send with 6 arguments: sender set to app_config.models_module,
  is derived from the formset base class and with fields contained in attrs, return an instance of the obtained class.   define the function all_valid with an argument formsets.
  return name and tuple containing 2 elements value and params.
  define the method load_template with 3 arguments: self, template_name and template_dirs set to None.
  if not,
  import warnings.
  define the function add_to_builtins with an argument module.
  call the function check_errors with argument main_func, substitute the result for wrapped_main_func.
  append work_file to string '#: ', substitute it for old.
  call the method self.make_bytes with an argument value, substitute the result for value.
  if not,
  streaming is boolean True.
  call the method self.__cast, if the result equals other, return boolean True, otherwise return boolean False.
  returns the result of the call the method d._get_pk_val, if not return d, put all the generator items into a tuple row_data.   if row_data is true and None is not contained in row_data,
  if OSError, NotImplementedError or AttributeError exceptions are caught,
  if ignore is true,
  define the method render with 2 arguments: self and context.
  call the function import_string with an argument dotted_path, substitute the result for attr.
  try,
  substitute the result for trimmed.   middle is a string '<a href="%s"%s>%s</a>' formated with url, nofollow_attr and trimmed.
  call the function re.compile with 2 arguments: raw string '^https?://\[?\w' and re.IGNORECASE, substitute the result for simple_url_re.
  call the get method with an argument string 'tried' on the first element of the e.args, substitute the result for sub_tried.
  append func to processors.
  for every d in reversed list self.dicts,
  label set to None, initial set to None, help_text set to an empty string, unpacked list args and unpacked dictionary kwargs.   call the __init__ method of the base class of the class ChoiceField, called with 7 arguments: required set to required,
  do nothing.
  split second element of hextet into parts by ':', append them to new_ip.
  try,
  call the function force_text with an argument template_string.
  import module re.
  raise an TemplateSyntaxError exception with an argument string "Searching for value. Unexpected end of string in column %d: %s",
  from django.core.exceptions import ValidationError into default name space.
  if KeyError exception is caught,
  substitute v for value under the k converted to lower case key of options dictionary.
  call the cursor method on the value under the db key of connections dictionary, preform following with return value named cursor,
  if self.asvar is true,
  if third element of bits is not equal to a string 'by',
  define the method namespace_dict with an argument self.
  if ending is true and msg doesnt end with ending,
  self.file is a instance of a class TemporaryUploadedFile initialized with arguments: self.file_name, self.content_type, integer 0,
  decorator decorator.
  import module collections.
  substitute size for self._size.
  second contains: string 'InternalHigh and ULONG_PTR, third: '_offset_union' and _OFFSET_UNION, forth 'hEvent' and HANDLE.   call the function POINTER with argument OVERLAPPED, substitute the result for LPOVERLAPPED.
  from django.apps import apps into default name space.
  raise an ValueError exception with an argument string ''Unable to configure root logger: %s' formated with e.
  update self.__dict__ dictionary with obj_dict.
  for every cat in value under the 'categories' key of the self.feed dictionary.
  strfunc is an instance of a class Name, created with 2 arguments: string "__str__" and prefix as unifunc.prefix.
  from django.core.files.utils import FileProxyMixin into default name space.
  define the method __init__ with an argument self.
  and settings.SECRET_KEY, call on it method encode with an argument string 'utf-8',   use the result as an argument for the call to the method hashlib.sha256, call the method digest on the result,   use the result as an argument for the call to the function random.seed.   call the function random.choice with an argument allowed_chars, for every i in range of integers from 0 to lengths,
  raise an TemplateSyntaxError exception with an argument string "Invalid templatetag argument: '%s'. Must be one of: %s",
  from django.utils.module_loading import import_string into default name space.
  if fift element of bits is not equal to a string 'as',
  call the function timedelta with an argument seconds set to negative _time.altzone, substitute the result for self.DSTOFFSET.
  if name is true,
  return the second element of the return value of the call to the self._det_image_dimensions method.
  if the key doesnt exists use sys.stdout as an argument.   if value under the 'no_color' key of the options dictionary.
  open_tags is an empty list.
  if six.PY3 is true,
  convert language to lowercase, return it.
  sum value and arg, return the result.
  instantiate TimestampSigner object with arguments key and salt set to salt, call its method unsign with arguments:
  if settings.DEBUG is true and value of the request.META dictionary under the 'REMOTE_ADDR' key is contained in settings.INTERNAL_IPS,
  both_before is a list containing 14 elements, all of them are instances of Tok class, created with 2 arguments, a string and a raw string.
  if self.data.hour is greater than inreger 12,
  substitute cache_info for wrapper.cache_info.
  if BLOCK_CONTEXT_KEY is contained in render_context and call to the method get_block with an argument self.name from the object,
  import module calendar.
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  return the result.   call the function force_bytes with arguments value and self._charset, return the result.
  if value has an attribute 'close',
  if settings.USE_L10N is true,
  define the method handle with self class instance and dictionary pair of elements options as arguments.
  cache_suffix is a string '.djcache'.
  otherwise if rhs is an instance of SafeBytes,
  return boolean True.
  if call to the method self.L evaluates to true, and result of the call to the method self.data.month is greater than integer 2,
  if indent is true,
  if IndexError, TypeError or ValueError exception is caught,
  use global variable template_source_loaders.
  call the function re.compile with 2 arguments: raw string "((?:[^\s'"]*(?:(?:"(?:[^"\\]|\\.)*" | '(?:[^'\\]|\\.)*')[^\s'"]*)+) | \+)",
  from collections import OrderedDict into default name space.
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  from logging import _checkLevel.
  substitute it for d.   while rest is true,
  from django.utils.deprecation import RemovedInDjango19Warning and RemovedInDjango20Warning into default name space.
  options_list is an empty tuple.
  if not,
  from itertools import product into default name space.
  raise an Resolver404 exception with an argument dictionary containing 1 entry: path for 'path'.
  substitute length of self.object_list for self._count.
  call the function _check_middleware_classes with dictionary kwargs as argument, use the result as an argument for the call to the function errors.extend.
  from django.core.management.base import CommandError into default name space.
  call the function trim_whitespace with an argument message, substitute the result for message.
  substitute first length elements of words for words.
  locales is a list with an element locale.
  call function _generate_cache_header_key with arguments key_prefix and request, substitute the result for cache_key.
  if ignore is true and field_name is not contained in model_fields,
  if not,
  call the method os.path.basename with an argument fixture_name, substitute the result for fixture_name.
  define the function write_pot_file with 2 arguments potfile and msgs.
  split instructions by ',' character, substitute the result for styles.
  if error_message is not None,
  return t.
  if exclude is not None,
  return a string '<%s token: "%s...">' with '%s', replace '%s' with token_name and 20 self.contents elements with every newline deleted.
  property decorator,
  convert key_prefix, version and key into strings, concatenate them respectively, with character ':' as delimiter, return the result.
  multiply offset by integer -1.
  call the method self.__dict__.copy, substitute the result for state.
  call the method self.fk.rel.to, substitute the result for self.instance.
  call the method self.full_clean.
  define the function decorator_from_middleware with an argument middleware_class.
  import module os.
  use the result as an argument for the call to the function mark_safe, return the result.   if p equals integer 0,
  return value under the key key of d dictionary.
  define the method clean with an argument self.
  get the absolute path of the __file__, repo_dir is name of the directory two leveles above it.
  skip this loop iteration.
  get the 'do_not_call_in_templates' attribute of current object, if it exists and is true,
  if filename is true and filename path doesnt exist,
  raise an exception.
  derive Serializer from the base.Serializer base class.
  try,
  return a list with an element tuple with 2 elements: an empty string and an empty list.
  if mw_instance has an attribute named 'process_exception'.
  if doublecolon_start equals integer -1,
  return an empty string,
  define the function get_language_from_path with an argument path.
  otherwise if ch equals a string '(',
  define the method _cache with argument self.
  define the method _format_value with 2 arguments: self and value.
  if filename ends with '/' or with '\\',
  call the function _import_module with an argument self.mod, return the result.
  call the method self.add_prefix with an argument name, substitute the result for prefixed_name.
  call the method call the function warnings.warn with 3 arguments: msg formatted with language and value under the language key,
  intrans is boolean True.
  infos, 'INFOS'   for every issues and group_name in sorted_issues,
  and unpacked dictionary kwargs.   define the method subwidgets with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
  substitute RadioFieldRenderer for renderer.
  define the method tag with 3 arguments: self, name set to None and compile_function set to None.
  requires_system_checks is boolean False.
  import module re.
  if fname is contained in self._list_cache_files method return value,
  call the function sql_indexes with app_config, self.style and connection as arguments, store the result in statements.
  if not,
  define the function _check_test_runner with app_config set to None and kwargs dictionary as arguments.
  assign obj to the obj field of self instance of this class.
  convert byte to its integer representation, return all of the results for every byte in buf.
  define the method get_template_source with 3 arguments: self, template_name, template_dirs set to None.
  if value under the index key of the hextets dictionary equals to string '0',
  if not,
  import module unicodedata.
  formated with 3 elements: self.class_name, self.old_method_name and self.new_method_name, self.deprecation_warning and integer 2.   call the function f with a arguments: unpacked list args and unpacked dictionary kwargs, return the result.
  return result.
  get 'render' attribute of template object, if it is callable,
  call the method cursor.execute with string "SELECT cache_key FROM %s WHERE cache_key = %%s and expires > %%s" as argument,
  if self.paginator.count equals a integer 0,
  define the method as_text with an argument self.
  _mtimes is an empty dictionary.
  if other is not equal to list containing elements of self, return boolean True, otherwise return boolean False.
  if the key doesnt exists substitute boolean False for self.ignore.   define the method _make_parser with an argument self.
  if Exception exception is caught,
  if value equals self.empty_value or value is contained in self.empty_values,
  if i is equal to integer 0, value under the 'first' key of the loop_dict dictionary is boolean True, otherwise it is False.
  call the method pyinotify.INotifyWrapper.create, on the return value call the inotify_init method, substitute the result for fd.
  yield string 'from %s import models' % self.db_module as the result, where "%s" is replaced with result of the call to the function,
  call the method executor.loader.graph.leaf_nodes and substitute its result for targets.
  move integer 1 left for 30 bits, substitute the result for GB.
  call the function datetime with an argument unpacked list kw, return the result.
  return value.
  if length of s is greater than integer 13,
  if not,
  get the value under the 'app_label' key of the options dictionary, substitute it for self.app_label.
  return an empty dictionary.
  raise an NotImplementedError with an argument string 'subclasses of Widget must provide a render() method'.
  return new_value.
  from io import BytesIO into default name space.
  substitute the result for value under the 'input' key of the substitutions dictionary.   if value is true and value has an attribute 'url',
  if f.editable is true and f is an instance of models.AutoField, or f.name is not contained in cleaned_data,
  call the method mail.outbox.extend with messages.
  if not,
  if lang is None,
  try,
  otherwise if i is smaller than list_length decremented by one,
  if response is None,
  decorator function register.filter with an argument is_safe set to boolean False.
  substitute the result for value under the 'isPermaLink' key of the guid_attrs dictionary.   call the method handler.addQuickElement with 3 arguments: string 'guid', value under the 'unique_id' key of the item dictionary,
  for every key in return value of the method c.keys call,
  if '.' is contained in words or '@' is contained in word or ':' is contained in word,
  call the function ugettext with an argument string "%s MB", substitute '%s' with the result of the call to the function,
  import module operator.
  define the function npgettext with 4 arguments: context, singular, plural and number.
  if consume_next is true,
  substitute filter_expr and nodelist for self.filter_expr and self.nodelist, respectively.
  evaluate the binary expression with 4 operands: os.O_WRONLY, binary or os.O_CREATE, binary or 'O_BINARY' attribute of object os,
  if NotImplementedError exception is caught,
  define the function is_iterable with an argument x.
  call he function is_valid_ipv6_address with an argument ip_str, if it evaluates to false,
  flush the output buffer of the self.stdout object.
  if not,
  call the function _ with an argument string 'noon', return the result.
   for every p in path,
  args is an empty string.
  if archive.ArchiveException or IOError, renamed to e, exception are caught,
  define the method _iterlists with an argument self.
  define the method __str__ with an argument self.
  from io import BytesIO into default name space.
  call the method self.run_shell with an argument shell set to value under the 'interface' key of the options dictionary.
  substitute fields for value under the 'fields' key of attrs dictionary.
  from email import charset as Charset, encoders as Encoders, message_from_string and generator.
  from django.apps import apps into default name space.
  substitute field.rel.to with rel_model.
  if language_code is not containsed in self._app_dict
  if name is not contained in logging._handlers,
  import module datetime.
  define the method body with an argument self.
  substitute self.choices for self.widget.choices.
  if self.asvar is None,
  call the method self.attach with arguments filename, content and mimetype.
  from the base class of the class SimpleCookie call the value_encode method with val as the argument, store the result in the val and encoded, respectively.
  'CacheKeyWarning' and 'BaseCache'   DEFAULT_CACHE_ALIAS is a string 'default'.
  call the timezone.now function, substitute the result for now.
  databases is a list containing 2 elements: self.using and None.
  define the method __repr__ with an argument self.
  self._cull_frequency is integer 3.
  append model to app_list_value.
  regex is an property object of this class, with _get_regex getter and _set_regex setter function.
  if best_doublecolon_len is greater than integer 1,
  do nothing.
  use the result as an argument for the call to the method final_output.extend.   call the method connection.creation.sql_for_pending_references with 3 arguments: refo, style and pending_references,
  define the method start_serialization with an argument self.
  if not,
  close fd file.
  raise an NotImplementedError exception with an argument sting 'subclasses of LazyObject must provide a _setup() method'.
  substitute string " " for space.
  if six.PY3 is true,
  define the method add_arguments with 2 arguments self and parser.
  define the function random with an argument value.
  define the method as_string with arguments self and unixfrom set to boolean False.
  from django.core.serializers import base into default name space.
  assign the result for year_val, month_val and day_val, respectively.   html is an empty dictionary.
  split lang_code by '-', substitute the first element of the result for generic_lang_code.
  from django.core.management.base import BaseCommand and CommandError into default name space.
  call the method logging.Formatter with 2 arguments: fmt and dfmt, substitute the result for result.
  call the function formset.is_valid, if it evaluates to false,
  define the method __get__ with 3 arguments: self, obj and tp.
  call the function include_is_allowed with an argument filepath, if it evaluates to false,
  from django.forms.fields import Field and ChoiceField into default name space.
  from django.core.management.base import BaseCommand into default name space.
  import module time.
  otherwise if char is contained in string 'bEFMmNn',
  define the method __init__ with 4 arguments: self, cyclevars, variable_name set to None and silent set to boolean False.
  substitute tok.next for state.
  call the smart_text function with 2 arguments: return value of the obj._get_pk_val function and string_only set to boolean True,
  call the add_argument method on the parser object with string '--backwards', asction set to 'store_true', dest set to 'backwards',
  for every f in opts.local_fields,
  call to the self.handle_uncaught_exception method with request, resolver and value of the evaluated function sys.exec_info,
  call the method self.parent_name.resolve with an argument context.
  define the method handle_raw_input with arguments: self, input_data, META, content_length, boundary and encoding set to None.
  if not,
  define the function Deserializer with arguments stream_or_string and unpacked dictionary options.
  call the method self.__copy__, return the result.
  otherwise if content is not an instance of Message class,
  join the result in a string separated by whitespaces, substitute it for s.   return s.
  define the method add_arguments with 2 arguments self and parser.
  import module sys.
  if OSError, renamed to e, exception is caught,
  substitute variable_name for self.variable_name.
  call the function sys.getfilesystemencoding if it evaluates to true, substitute its result for fs_encoding,
  pop the value under the 'stream' key of the kwargs dictionary, if it exists replace it for self.stream, if not replace sys.stdout for self.stream.
  define the method handle_fk_field with self, obj and field arguments.
  return nothing.
  url is a property of the class, lambda function is getter attribute with an argument self and return value is the value under the 'Location' key of the self dictionary.
  call the method form.add_prefix with an argument self._pk_field.name,
  call the method literal_match.group with an integer 1, substitute the result for ip_address.
  for every app_config in return value of the call to the function apps.get_app_configs,
  skip this loop iteration.
  try,
  return None.
  derive the class Trans from the object base class.
  define lambda function that returns self.file.flush field, use it as an argument for property function, put the result in flush.
  import module codecs.
  call the function re.compile with 2 arguments: raw string '<%s(/?>|(\s+[^>]*>))' formated with tags_re and re.U,
  for every part in parts,
  derive the class MergeDict from the object base class.
  from django.core.urlresolvers import set_script_prefix into default name space.
  smart_text function, return the result.   if not,
  and html set to boolean True, return the result.   decorator function register.filter with an argument is_safe set to boolean True.
  call the method parser.expression with an argument bp, substitute the result for self.first.
  remove name from existing.
  call the method token.split_contents, substitute the result for bits.
  if empty_label is an instance of list or tuple type,
  call the method context_instance.push with an argument dictionary, with the result perform,
  and third element of the return value of the function sys.exc_info.   if inhibit_post_migrate is false,
  substitute has_key for __contains__.
  substitute iter for iterbytes.
  if length of bits equals integer 2,
  define the function dictsort with 2 arguments value and arg.
  from __future__ import unicode_literals into default name space.
  call the method self.handle_uncaught_exception with request, resolver and return value of the function sys.exec_info as the arguments.
  define the method __repr__ with an argument self.
  use_l10n set to None and use_tz set to None.   call the method Context.__init__ with 5 arguments: self, dict_, current_app as current_app, use_l10n as use_l10n, use_tz as use_tz.
  define function no_style, without input arguments.
  call the method self.as_widget with 3 arguments: instance of a class TextInput, attrs and unpacked dictionary kwargs, return the result.
  i is integer 366.
  call the method parser.parse with an argument tuple with an element string 'endfor', substitute the result for nodelist_empty.
  find the first subgroup of the matched string from the match object, convert it to lowercase, substitute it for tag and self.lasttag.
  call the method parser.parse with an argument tuple with an element end_tag, substitute the result for nodelist_false.
  if not,
  ser_fmt is None.
  from django.core.management.color import color_style into default name space.
  if self.data.minute equals integer 0,
  if reversed is True substitute difference of d and now for delta, if not substitute the difference of now and d for delta.
  zip val1 and va2 into list of tuples, for every x and y in the result,
  test_runner is an instance of TestRunner class, called with an argument unpacked dictionary options.
  define the method source_error with 3 arguments: self, source and msg.
  define the function unescape_entities with an argument text.
  raise an exception,
  if sub_match is true,
  '\\u0027' for integer representation of string '\', '\\u0022' for integer representation of string '"',   '\\u003E' for integer representation of string '>', '\\u003C' for integer representation of string '<',   '\\u0026' for integer representation of string '%', '\\u003D' for integer representation of string '=',   '\\u002D' for integer representation of string '-', '\\u003B' for integer representation of string ';',   '\\u2028' for integer representation of string '\u2028' and '\\u2029' for integer representation of string '\u2029'.   for eery z in range of integers from 0 to 31, update _js_escapes dictionary with '\\u%04X' formated with z,
  if args is None,
  call the self._createdir method.
  from django.utils.translation import ugettext_lazy as _ into default name space.
  define the method O with an argument self.
  define the function next_space_index with 2 arguments: self and subject.
  add obj.object.__class__ to self.models set.
  error_msg is a string "Your TEMPLATE_DIRS setting is empty. Change it to point to at least one template directory.".
  call the method parser.expression with an argument bp, substitute it for self.seconds.
  import module sys.
  as the arguments, substitute the result for response.   try,
  app_dirs is an empty list.
  substitute namespaces for the value under language_code key of the self._namespace_dict dictionary.
  call the method simple_url_re.match with an argument middle, if it evaluates to true,
  return a string "<DjangoTranslation lang:%s>", where '%s' is replaced with self.__language.
  define the method _get_validation_exclusions with an argument self.
  call the function inline_re.match with an argument t.contents, substitute the result for imatch.
  return.
  from django.utils.datastructures import MultiValueDict into default name space.
  convert value to lowercase and return the result.
  substitute __name__ field of the result for function_name, in not, substitute func.__name__ for function_name.   call the function partial with 8 arguments: generic_tag_compiler, params set to params, varargs set to varargs, varkw set to varkw,
  yield string 'month' as an return value of the generator.
  otherwise if query has an attribute 'items',
  if string 'django.middleware.clickjacking.XFrameOptionsMiddleware' is not contained in settings.MIDDLEWARE_CLASSES set,
  return r.
  and e.level is lesser than checks.CRITICAL.   append e to criticals list for every e in all_issues, if checks.CRITICAL is lesser than or equal to e.level.
  define the method render with 2 arguments: self and context.
  if not,
  call the function strftime with 2 arguments: self and fmt, return the result.
  raise an InvalidTemplateLibrary exception with an argument string "Template library %s does not have a variable named 'register'",
  if KeyError exception is caught,
  call the method token.split_contents, substitute results without the first element for bits.
  call method __init__ from the base class of the class MemcachedCache with arguments: server, params,
  yield string '    %s', where '%s' is replaced with field_desc.
  otherwise if func is callable object,
  if answer equals a string 'y',
  call the executor.loader.get_migration_by_prefix with app_label and migration_name, substitute the result for migration.
  if not,
  return boolean upload.
  remove self._regex_validator from self.validators.
  substitute the result for new_class.   if bases equals a tuple with an element: class BaseModelForm.
  self.file_permissions_mode is a tuple containing: file_permissions_mode if file_permissions_mode is not None,
  if sys.version_info is greater than or equal to a tuple with 3 elements: integers 2, 7 and 2, respectively,
  from django.conf import settings into default name space.
  define the method render with 2 arguments: self and context.
  derive the class ComboField from the base class Field class.
  return an empty string.
  append the result to old_app_dirs.   if file path old_app_dir exists,
  if self._wrapped is empty,
  if row is None,
  call the method self.resolve_context with an argument self.context_data, substitute the result for context.
  widget.is_localized is boolean True.
  classmethod decorator,
  raise an EnvironmentError exception with string "Cache directory '%s' does not exist and could not be created" as argument,
  call the method self._populate.
  call the function force_str with an argument quoted_url, use the result as an argument for the call to the function unquote_plus,
  substitute SplitHiddenDateTimeWidget for hidden_widget.
  define the method __init__ with arguments self and attrs set to None.
  yield the result.   if ImportError exception is caught,
  if value under the 'microsecond' key of the kw dictionary is true,
  define the function curry with 3 arguments: _curried_func, unpacked list args and unpacked dictionary kwargs.
  call the callback function with request and dictionary argument param_dict as the arguments, substitute it for response.
  if is_compressed is true,
  call the method self._convert_to_charset with arguments: header and string 'ascii', substitute the result for header.
  feed data to the parser p.
  define the function _make_key with 9 arguments: args, kwds, typed, kwd_mark as a tuple with an element result of the function object,
  call the method six.moves.input with an argument string "Do you wish to proceed? [yN] ", substitute the result for answer.
  get the value under the name key of the self.initial dictionary, if it exists substitute it for initial,
  yield representative and boolean True.
  call the method __init__ from the base class of the class DebugLexer, with 2 arguments: template_string and origin.
  if not,
  if self.field.label_suffix is not None, substitute self.field.label_suffix for label_suffix,
  if formfield has an attribute 'queryset',
  if settings.DEBUG is true,
  use the result as an argument for the call to the field.to_python method, substitute the result for initial_value.   if ValidationError exception is caught,
  call the method m.group with an argument integer 0, use it as an argument for the call to the re_tag.match function,
  sort elements of kwds, substitute the result for sorted_items.
  from itertools import dropwhile into default name space.
  all the method field.rel.to._meta.get_field with field.rel.field_name as argument, call the to_python method on the result with,
  define the method __repr__ with an argument self.
  call the method sys._getframe with an argument 1, substitute the result for frame.
  os.path.basename(prog_name) and subcommand, separated by whitespace and description set to self.help, if exists, or None, otherwise.   call the method parser.add_option with 3 arguments: string '--version', action set to string 'version',
  input_type is a string 'text'.
  call the nethod self._isdst with an argument dt, if it evaluates to true,
  if regex is an instance of six.string_types class,
  call the method self.handle_m2m_field with arguments obj and filed.
  raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to 'required'.
  define the method reload with an argument self.
  define the method open with argument self.
  otherwise if ch equals a string '^',
  call the self._read_limiter with length of self.buffer subtracted from size as argument, store the result into chunk.
  if value under the 'socket' key of the options dictionary is false and values under the 'host' and 'port' keys of the options dictionary are true,
  called with string as an argument 'Error executing %s: %s', where '%s' is replaced by: first element of args and strerror, respective,   and third element of the result of the function sys.exc_info.   call the method p.communicate, assign the result to output and errors, respectively.
  cmp_fmt is None.
  return palette.
  output is an empty list.
  default_error_messages is an dictionary with 2 entries: return value of the function _ called with an argument string,
  substitute media.__dict__ for media_attrs.
  import module os.
  get the value under the field key of the html dictionary, append it to output.
  call the function get_language, substitute the result for language_code.
  get the value under the self.status_code key of the REASON_PHRASES dictionary, if it exists substitute it for the self.reason_phrase,
  domains is a tuple with element string 'django'.
  return nothing.
  convert to k and v to strings for every k and v in return value of the response.item method, response_headers is a list containing all the above iteration elements.
  define the method __get__ with 3 arguments: self, instance and name type to None.
  if not,
  call the method sys.stderr.write with an argument string "  installed flup, then make sure you have it in your PYTHONPATH.\n".
  value under the resultclass key of the cls.__dispatch dictionary is an empty dictionary.
  define the method serialize_headers with an argument self.
  __all__ is a list containing a string "runfastcgi".
  from django.core.exceptions import ValidationError into default name space.
  call the method loader.select_template with an argument template, return the result.
  if length of value is not equal to integer 1,
  nm and addr are addr.
  return None.
  msg is a string "[%s] %s\n", where '%s' are replaced with return value of the method self.log_date_time_string and formated args.
  if value is contained in self.empty_values,
  define the method endChannelElement with 2 arguments: self and handler.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  if e.errno equals to errno.EEXIST,
  raise an TemplateSyntaxError exception with an argument string "'%s' tag with name '%s' appears more than once",
  if t is not None
  __all__ is an tuple with 3 elements: strings 'MultiPartParser', 'MultiPartParserError' and 'InputStreamExhausted'.
  substitute it for max_age, if not, max_age is integer 0.   if not,
  define the method css_classes with 2 arguments: self and extra_classes set to None.
  define the method autocomplete with an argument self.
  convert new_name to a string and append it to string 'number_', substitute the result for new_name.
  call the function self._new_gnu_trans with 2 arguments: localedir and use_null_fallback, substitute the result for translation.
  call the function _get_foreign_key with 3 arguments: parent_model, model and fk_name=fk_name, substitute the result for fk.
  if fk is not an instance of ForeignKey class, or fk.rel.to is not equal to parent_model,
  call the method models.signals.pre_migrate.send with 5 arguments: sender set to app_config, app_config set to app_config,
  return j.
  if entry is a directory,
  get the value under the 'content-transfer-encoding' key of the disposition meta_data, substitute it for transfer_encoding.
  if count of occurrence of '.' in ip_str is not equal to integer 3,
  replace '%s' in string 'ignoring file %s in %s\n' with filename and dirpath, write it to self.stdout.
  define the method listdir with arguments self and path.
  for every app_name in app_names.
  if t is contained in self.__dispatch,
  _meth_func is a string "__func__".
  substitute this list for additional_headers.   join all of the elements of vary_headers and additional_headers in a string delimited by a comma,
  if not,
  evaluate the function bytes with the argument s, and return the result.
  try,
  from __future__ import unicode_literals into default name space.
  derive the class _OFFSET from the Structure base class.
  call the method selected_choices.remove with an argument option_value.
  define the method __init__ with 2 arguments: self and key_to_list_mapping set to an empty tuple.
  call the function _add_doc with 2 arguments: u and string """Text literal""".
  raise and exception InvalidCacheBackendError with string "Could not find config for '%s' in settings.CACHES" as argument, replace '%s' with alias.
  if self.is_bound is false,
  close the file object.
  if app_config.models_module is None,
  from django.core.cache.backends.db import BaseDatabaseCache into default name space.
  substitute s for self.s.
  with the name of the type of the self class instance of the middleware_method, raise the ValueError with the previous as the argument.   call the method self.apply_response_fixes with the request and response as the arguments, substitute the result for response.
  from django.utils.safestring import mark_safe and SafeData into default name space.
  if use_reloader is true,
  call the method loader.get_migration with arguments node_app and node_name, extend the migration.merged_operations with the operations field of the result.
  for every fixture_label in fixture_labels,
  call the function datetime.datetime with utc as argument if call to the is_aware(d) returns True, if not None is the argument, store the result in now.
  from django.template.base import Library, add_to_builtins, builtins, get_library, get_templatetags_modules, get_text_list,
  call the function get_mod_func with an argument mod_name, store the result in parentmod and submod, respectively.
  for every field_name and field_value in return value of the function six.iteritems called with value under the 'fields' key of dictionary d,
  call the method warnings.warn with an argument string "No fixture named '%s' found." where '%s' is replaced with fixture_name.
  define the method __delitem__ with 3 arguments: self and key.
  substitute value under 'unique_id' key of item dictionary for unique_id.
  call the function data with 3 arguments: d.year, d.month and d.day, return the result.
  if for all attr in list of attributes 'level', 'msg', 'hint', 'obj' and 'id', self and other have the same attribute attr,
  call the method s.find with an argument bytes string ';', substitute the result for end.
  increment s_len by integer 1,
  if length of bits is smaller than integer 1,
  if self does not has an '_post' attribute.
  get "_decorated_function" attribute from func object, if it exists substitute __name__ field of the result for name,
  substitute module.WSGIServer for WSGIServer.
  if not,
  get 'nodelist' attribute from self object. if it doesnt exists return boolean False, if the result evaluates to false,
  call the function self._truncate_html with 5 arguments: length, truncate, text, truncate_len and boolean False, return the result.
  if not,
  append value to self.dicts list.
  table2model with an argument table_name.   call the function table2model with an argument table_name, append the result to known_models.
  called with an argument string ':?.!'.   call the method format_html with 3 arguments: string '{0}{1}', contents and label_suffix, substitute the result for contents.
  can_import_settings is boolean False.
  all the method self.create_table with arguments: db and cache._table.
  define the method end_object with arguments self and obj.
  return result.
  substitute DEFAULT_DB_ALIAS for db.   remove the value under the 'ignorenonexistent' key from the options dictionary, assign it to the ignore, if the entry doesnt exists,
  and help set to a string 'Nominates a database to print the SQL for. Defaults to the "default" database.'.   define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.
  derive the OutputWrapper class from the object base class.
  call the function mark_safe with an argument word, substitute the result for i-th element of words.
  join tokens elements into a string, substitute it for message.
  substitute self._upload_handlers for handlers.
  import module warnings.
  do nothing.
  from django.core.exceptions import ImproperlyConfigured into default name space.
  if f is None,
  return msg_count.
  call the method self.create_token with 3 arguments: self.template_string list elements from upto index to start index,
  raise an TemplateSyntaxError exception with an argument string "Named cycle '%s' does not exist", where '%s' is replaced with name.
  define the __init__ method with 3 arguments: self, unpacked list args and unpacked dictionary **kwargs.
  call the function sys.getfilesystemencoding, if it evaluates to true, substitute the result for fs_encoding,
  do not perform the following only if bits.scheme and bits.netloc are both true,
  if new_mod is None,
  if self.verbosity is greater than integer 0,
  missing_args_message is an string "Enter at least one application label.".
  call the method resultclass.mro, reverse the order of elements, for every type_ in the result.
  call the fastcgi_help function with an argument string "Invalid combination of host, port, socket.", return it.
  return an empty dictionary.
  defaults set to defaults, name set to function_name, takes_context set to takes_context and node_class set to InclusionNode,   substitute the result for compile_func.   substitute func.__doc__ for compile_func.__doc__.
  call the function import_string with an argument logging_config, substitute the result for logging_config_func.
  define the function do_include with 2 arguments parser and token.
  import module random.
  if not,
  if os.path.sep is contained in fixture_name,
  substitute value for self.value.
  from django.core.management.sql import sql_delete into default name space.
  if self.instance.pk is None,
  try,
  from django.core.management.color import no_style into default name space.
  substitute third and first element of bits for key and value, respectively.
  declare that we use global variables cached_modules and _cached_filenames in this function.
  return an empty string.
  define the function __init__ with 5 arguments: self, takes_context, args, kwargs and target_var.
  valid is boolean True.
  define the function conditional_escape with an argument text.
  substitute absolute value of the exponent for decimals.
  _fields_ is a list containing 2 tuples: first tuple contains: string 'Offset' and DWORD, second contains: string 'OffsetHigh' and DWORD.
  define lambda function that returns self.file.encoding field, use it as an argument for property function, put the result in encoding.
  self._raw_ipv6 is boolean False.
  define the method list with 3 arguments: self and unpacked list args and unpacked dictionary kwargs.
  return kwargs.
  convert the value under the 'daemonize' key of options dictionary to lowercase, if it equals to string 'false', 'no' or 'f',
  define the method render with 2 arguments self and context.
  if tag is not contained in TemplateTagNode.mapping,
  return list_ and boolean False.
  call the method self.build_attrs with 2 arguments: attrs and name set to name, substitute the result for final_attrs.
  call the method handler.addQuickElement with 2 arguments: string 'rights' and value under the 'feed_copyright' key of the self.feed dictionary.
  from django.core.management.color import color_style and no_style into default name space.
  if it doesnt exists return otherwise.   define the method __getitem__ with 2 arguments: self and key.
  if OSError, renamed to e, exception is caught,
  value under the 'author_name' key of the item dictionary and dictionary with an entry: "http://purl.org/dc/elements/1.1/" for "xmlns:dc".   if value under the 'pubdate' key of the item dictionary is not None,
  get translation_function attribute of the t object, call the result with 3 arguments: singular, plural and number, return the result.
  call the method regex.match with an argument date, substitute the result for m.
  call the function allow_lazy with 2 arguments: javascript_quote and six.text_type, substitute the result for javascript_quote.
  extend collect list with _builtin_context_processors.
  substitute var_name for self.var_name.
  substitute _urllib_robotparser_moved_attributes for Module_six_moves_urllib_robotparser._moved_attributes.
  instantiate a class Group with 2 arguments: string "%%(%s)s" formated with param, and param, append it to result.
  define the method generic_tag_compiler with 9 arguments: parser, token, params, varargs, varkw, defaults, name, takes_context,
  define the method clean with arguments self, data and initial set to None.
  validTemplateLibrary, BLOCK_TAG_START, BLOCK_TAG_END, VARIABLE_TAG_START, VARIABLE_TAG_END, SINGLE_BRACE_START, SINGLE_BRACE_END,   COMMENT_TAG_START, COMMENT_TAG_END, VARIABLE_ATTRIBUTE_SEPARATOR, get_library, token_kwargs, kwarg_re and render_value_in_context.   from django.template.smartif import IfParser and Literal into default name space.
  if IndexError exception is caught,
  and truncate set to string ' ...', return the result.   decorator function register.filter with an argument is_safe set to boolean True.
  if mimetype is None,
  from __future__ import unicode_literals into default name space.
  form the tuple from the attrname converted to lowercase and attrvalue, append it to the end of attrs.
  sum results of method self.save_existing_objects called with an argument commit and of method self.save_new_objects,
  call the method close on self.
  call the method self.errors.as_data, for every error for value under the filed key of the returned dictionary,
  define the method incr with 4 arguments, self class instance, key, delta defaulting to integer 1 and version defaulting to None.
  call the connection.creation.sql_indexes_for_model with model and no_style() as arguments, substitute the result for index_squl.
  decorator function register.filter with an argument is_safe set to boolean True.
  _iterkeys is a string "keys".
  return boolean False.
  if value under the 'umask' key of options dictionary is true,
  raise an TemplateSyntaxError exception "'%s' is decorated with takes_context=True so it must have a first argument of 'context'",
  call the method time_str.decode with an argument string 'utf-8', substitute the result for time_str.
  if not,
  define the method close with an argument self.
  call the method filter_re.finditer with an argument token, substitute the result for matches.
  call the initialization method _html_parser.HTMLParser.__init__(self) for the base class.
  define the function become_daemon with 4 arguments: our_home_dir set to '.', out_log set to a string '/dev/null',
  and unpacked dictionary kwargs.   call the function force_text with an argument self.value, substitute the result for self.value.
  get 'error_messages' attribute from the options object, if it exists substitute it for self.error_messages,
  function-based loader.", where '%s' is replaced with loader.   substitute TemplateLoader for func.
  decorator function register.filter with an argument is_safe set to boolean False.
  call the method self.event_stream.expandNode with an argument node.
  if pks is true,
  if not,
  if cookie is not an instance of http_cookies.BaseCookie,
  if language_code is not contained in self._namespace_dict,
  if nodelist is an instance of NodeList and node is not an instance of TextNode class.
  if value is false or character '@' is not contained in value,
  call the function urlunsplit with a tuple containing 5 elements: scheme, netloc, path, query and fragment, as an argument, substitute the result for url.
  join path and entry into a file path, if it exists,
  define the method __deepcopy__ with 3 arguments: self and memo.
  call the method self.validate with an argument display_num_errors set to boolean True.
  if LookupError exception is caught,
  append name to 'add_' use it as the name of the attribute to get from combined object , call the result with an argument:
  if f is not None append it to a list for every f in tuple containing 3 elements: style_func, self.style_func,
  substitute module for the value under the format key of the _serializers dictionary.
  output is an empty string.
  with field_value as an argument, return the result.   define the method _handle_m2m_field_node with arguments self, node and field.
  _CacheInfo is an instance of namedtuple class created with 2 arguments: string "CacheInfo" and a list with 4 elements: string 'hits',
  value under the self.var_name key of the context dictionary is an list with dictionary elements with 2 entries:
  if serializers is None and _serializers is false,
  if self.selected_fields is None or field.attname is contained in self.selected_fields,
  from django.core.cache.backends.base import InvalidCacheBackendError, CacheKeyWarning and BaseCache into default name space.
  return value of the call to the function _ with an argument string 'Enter only digits separated by commas.' and string 'invalid'.   decorator deconstructible,
  for f in file_list,
  if not,
  define the method back with an argument self.
  define the function _samefile with arguments src and dst.
  return an raw string '\"'.
  value under the comment_lineno_cache key of the lineno_comment_map dictionary is an empty string.
  define the method push with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  call the method pretty_name with an argument name, substitute the result for self.label.
  if node is not an instance of ExtendsNode,
  if not,
  if data is true,
  evaluate the field.get_attname, use the result as the name of the obj attribute to get, substitute it for related_att.
  otherwise if length of app_labels is greater than integer 1,
  raise an ValueError exception wit an argument string "Not a string literal: %r", where "%r" is replaced with s.
  break from the loop execution.
  if length of args is greater than 4.
  if other is instance of EmailValidator and, self.domain_whitelist equals to other.domain_whitelist,
  method MONTHS.index, increment the result by integer 1, substitute it for month.   call the method m.group with an argument string 'fay', convert the result into a string, substitute it for day.
  from django.utils.functional import allow_lazy and SimpleLazyObject into default name space.
  from django.utils.encoding import smart_text and force_text into default name space.
  if self.stream is not None,
  define the method __getitem__ with 2 arguments: self and key.
  try,
  _urllib_request_moved_attributes is an list with 33 elements, all of them are the results of the call to the function MovedAttribute with 3 different string arguments.
  if not,
  if plen is lesser than difference of alen and dlen, or if plen is greater than alen,
  7 for 'jul', 8 for 'aug', 9 for 'sep', 10 for 'oct', 11 for 'nov' and 12 for 'dec'.   MONTHS_AP is an dictionary with 12 entries: result of the function pgettext_lazy with 2 arguments: 'abbrev. month' and 'Jan.' for 1,
  from itertools import groupby and cycle as itertools_cycle into default name space.
  call the method os.umask with an argument umask.
  get the value under the key key of the self.find_template_cache dictionary, substitute it for result.
  call the function six.text_type with return value of the function bytes(s), encoding and errors as the arguments,
  define the method configure_logger with 4 arguments: self, name, config, incremental set to boolean False.
   file is an instance of BytesIO class created with an argument: value under the 'content' key of the data dictionary.
  if message is an instance of ValidationError class and message.code is contained in error_messages,
  define the method total_error_count with an argument self.
  if self.load_initial_data is not empty,
  define the method save_existing with 4 arguments: self, form, instance and commit set to boolean True.
  call the method attachment.add_header with 3 arguments: string 'Content-Disposition', string 'attachment' and filename set to filename.
  get _assertRegex attribute of the self object, call the result with 2 arguments: unpacked list args,
  substitute value for self.value.
  while i is lesser than length of subject and i-th element of subject is an empty space or tab character.
  if length bits is smaller than intger 4,
  call the method self._create_mime_attachment with the arguments content and mimetype, substitute the result for attachment.
  if self._count is None,
  call the method validators.ip_address_validators with arguments protocol, unpack_ipv4, substitute first element of the result for self.default_validators.
  assign path_info to the value under the 'PATH_INFO' key of the self.META dictionary.
  raise an CommandError exception with an argument "Can't find %s. Make sure you have GNU gettext tools 0.15 or newer installed.",  where '%s' is replaced with program.
  if self.active_writers equals integer 0 and self.waiting_writers equals integer 0 and self.active_readers equals integer 0,
  if max_value is not None,
  msg is a string "Execution of %s failed", with '%s' replaced by self.program.
  if self.connection_reset is true,
  name set to self.file_name, content_type set to self.content_type, size set to file_size, charset set to self.charset,   and content_type_extra set to self.content_type_extra, return it.   define the function load_handler with arguments: path, unpacked list args and unpacked dictionary kwargs.
  call the function re.compile with an argument raw string '(((?<=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))', substitute the result for re_camel_case.
  define the method __eq__ with self and other as arguments.
  call the function warnings.warn with 3 arguments: string "The django.forms.util module has been renamed. "
  call the method m.group with an argument string 'value', use the result as an argument for the call to the force_str,
  substitute deconstruct for klass.deconstruct.
  return an instance of RequestContext class, created with 3 arguments: self._request, context and current_app set to self._current_app.
  define the method get_renderer with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
  MEMCACHE_MAX_KEY_LENGTH is integer 250.
  code is a string 'invalid'.
  define the method clear with argument self.
  if not,
  define the function ljust with 2 arguments value and arg.
  try,
  d is an empty dictionary.
  from importlib import import_module into default name space.
  return boolean False.
  if ValueError exception is caught,
  try,
  define the method timestamp with an argument self.
  if value under the name key of the sys.modules dictionary is not None, return boolean True, otherwise return boolean False.
  set attr.name attribute of the Module_six_moves_urllib_parse object to attr.
  return attachment.
  call the method operator.attrgetter with an argument _func_defaults, substitute the result for get_method_defaults.
  define the method __init__ with 7 arguments: self, request, template, context set to None, content_type set to None,
  buffer_ is None.
  break from the loop execution.
  return nothing.
  define the method ordered_forms with an argument self.
  if column_name is contained in indexes,
  call the method self._new_instance with 3 arguments: self.children, self.connector and self.negated, substitute the result for obj.
  use the result as the argument for the function call to the pickle.loads, return the result.   define the method set with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
  if not,
  raise an ImproperlyConfigured exception with argument string 'Path for saving email messages exists, but is not a directory: %s',  replace '%s' with self.file_path.
  if value is not contained in result,
  call the method handler.endElement with an argument string 'feed'.
  call the method translation.activate with an argument saved_locale.
  if all_issues is true,
  derive the class MultiWidget from the Widget base class.
  join func.__module__ and func.__name__ into a string, separated by character '.', substitute it for self._func_path.
  return callback split into two lists at the dot index, without the element at the dot index.
  from django.conf import settings into default name space.
  otherwise if action equals to string 'unapply_start'.
  if six.PY3 is true,
  call the function patch_response with response and cache_timeout decremented by integer 1 as arguments.
  or settings.FILE_UPLOAD_DIRECTORY_PERMISSIONS if it is.   define the method _open with arguments self, name and mode defaulting to string 'rb'.
  join usage elements in a string separated by newline characters, return it.
  call the function allow_lazy with an argument strip_tags, substitute the result for strip_tags.
  for value under the key key of the cache dictionary.   increment stats dictionary value under the MISSES key by integer 1.
  as long as current_chunk is not an empty string,
  if ext is true,
  substitute '%r' in string 'Cache key contains characters that will cause errors if used with memcached: %r' with key,
  common_prefix is None.
  from django.core.serializers.python import Deserializer as PythonDeserializer into default name space.
  define the method __deepcopy__ with 2 arguments: self and memo.
  from django.utils.formats import localize into default name space.
  if self has an attribute 'error_dict',
  if not,
  call the function ugettext with an argument string "Please correct the duplicate data for %(field_name)s which must be unique for,
  if old_field_name is true,
  return printable representation of self.value.
  def method add_arguments with self class instance and parser as the arguments.
  return boolean True.
  substitute field.queryset for self.queryset.
  raise an ValidationError with 3 arguments: value under the 'required' key of the self.error_messages dictionary,
  convert cull_frequency into an integer and substitute it for self._cull_frequency.
  status_code is an integer 301.
  for every i and v in enumerated iterable value,
  if forms_valid is true and call to the method self.non_form_errors, evaluates to false, return boolean True, otherwise return False.
  where '%d' is replaced with name, dlen subtracted from alen, and plen.   return boolean True.
  break the loop execution.
  call the function sys.exit with argument exit_code.
  call the function format_html with 4 arguments: string '<label{0}>{1} {2}</label>', label_for, result of the method self.tag,
  call the method datetime.datetime.strptime with 2 arguments: result of the function force_str called with an argument value,
  derive the class UnreadablePostError from the base class IOError.
  call the method operator.attrgetter with an argument _func_code, substitute the result for get_method_code.
  bitwise shift integer 1 to the left by 31 spaces, return the result.
  define the method upload_complete with argument self.
  call the function self.path with argument name, use the result as an argument for the call to the function os.path.getctime,
  if ValidationError, renamed to e, exception is caught,
  to the function url.hexdigest(), respectively, substitute it for cache_key.   call the function _i18n_cache_key_suffix with request and cache_key as arguments, return the result.
  if not,
  get the value under the state key of the regexes dictionary, call the method finditer on the result with 2 arguments: text and start,
  from django.conf import settings into default name space.
  return source and display_name.
  if func is None,
  call the method form.add_initial_prefix with an argument self.auto_id, substitute the result for self.html_initial_id.
  do nothing.
  return self.token.
  field_dict is an instance of OrderedDict class, created with an argument field_list.
  substitute self.subject for subject.
  use the result as an argument for the call to the function bytes, return the result.   define the method __cast with an argument self.
  from collections import OrderedDict into default name space.
  reverse elements order of values.
  if StopFutureHandlers exception is caught.
  if safe is true,
  for name in attributes of models_signals object,
  from threading import local into default name space.
  and unpacked dictionary kwargs.   python_2_unicode_compatible decorator,
  alternatively, if six.PY3 is true check if message does not have an attribute 'message', if six.PY3 is false, check if message doesnt have an attribute 'code', perform the following,
  with lock,
  raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a url() method'.
  call the method self.data.utctimetuple, use the result as an argument for the call to the function calendar.timegm,
  substitute first 12 elements of r for r.
  kwargs is an empty dictionary,
  yield item.
  if NotImplementedError exception is caught,
  incomment is boolean True.
  from django.utils.six.moves.urllib.parse import urlparse into default name space.
  return boolean True.
  keep_blank_values set to boolean True, encoding set to encoding.   call the method appendlist with 2 arguments: key and value.
  translation._info is an empty dictionary.
  concatenate first site elements of s, syear and elements of s from the site incremented by integer 4 index, substitute the result for s.
  close the process with an argument 0.
  substitute the result for timezone.   divide timezone by integer 60, substitute the quotient of the division for hour and reminder for minute.
  return self._name.
  substitute block for value under the 'block' key of context dictionary.
  define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
  import module errno.
  substitute the length of the resulting list for number_equal.   if number_equal is greater than integer 40,
  append i_args to args, append new_args with the result.
  return last rollback elements of chunk.
  return result.
  substitute content for self.content.
  from django.utils.encoding import smart_text into default name space.
  substitute encoding for self.encoding.
  from django.utils import six into default name space.
  if not,
  call the function sql_custom with app_config, self.style and connection as the arguments, substitute the result for statements.
  call the params.get with string 'OPTIONS' and empty dictionary as arguments, substitute the result for options.
  for every obj in PythonDeserializer called with arguments objects and unpacked dictionary options,
  define the method __init__ with argument self, server and params.
  value under the index key of the hextets dictionary is a string '0'.
  rendering_attrs is a list containing 3 strings: 'template_name', 'context_data' and '_post_render_callbacks'.
  call the method self.instance.full_clean with 2 arguments: exclude set to exclude and validate_unique set to boolean False.
  or settings.FILE_UPLOAD_PERMISSIONS if it is.   self.directory_permissions_mode is a tuple containing: directory_permissions_mode if directory_permissions_mode is not None,
  substitute its __name__ field for function name, if it doesnt exists substitute func.__name__ for function_name.   call the function generic_tag_compiler, params set to params, varargs set to varargs, varkw set to varkw, defaults set to defaults,
  join statements into a string, separated by newlines, return it.
  substitute obj for value under the self.var_name key of the context dictionary.
  call the force_str function with an argument: salt, if it exists, if not with a string '%s.%s', with '%s' replaced by,
  define the function walk_to_end with 2 arguments ch and input_iter.
  from django.utils.deprecation import RemovedInNextVersionWarning into default name space.
  call the method self._create_attachments with argument msg, return the result.
  return func.
  status_code is an integer 400.
  from django.template.loader import BaseLoader, get_template_from_string, find_template_loader and make_origin into default name space.
  match is boolean True.
  call the function dropwhile with 2 arguments: function len and msgs spit into parts at newlines, join the result into a string,
  convert keys of dictionary self.dict into a iterable, return it.
  self.bad_cookies is an empty set.
  call the function new_method_proxy with an argument bytes, substitute the result for __bytes__.
  substitute registry.tag_exists for tag_exists.
  kwargs is an empty dictionary.
  call the method self._iteritems, for every k and v in the result,
  return self.streaming_content
  try,
  call the method settings._setup.
  return msg_count.
  decorator function register.filter with an argument is_safe set to boolean False.
  model is None.
  use the result as an argument for the call to the function iri_to_uri, return the result.   call the function lazy with arguments reverse and str, substitute the results for reverse_lazy.
  use the result as an argument for the call to the os.path.join function,   use the result and the norm_patterns as arguments for the call to the is_ignored function, if it evaluates to true,   remove dirname from the dirnames.
  call the method self.nodelist_false.render with an argument context, return the result.
  from django.core.files.utils import FileProxyMixin into default name space.
  context_extras is an empty dictionary.
  call the method sys.stderr.write with an argument string "Unknown command: %r\nType '%s help' for usage.\n",
  raise an value.with_traceback exception with an argument tb.
  opts and unpacked dictionary kwargs.   NOCOLOR_PALETTE is a string 'nocolor'.
  if strict is false,
  TOKEN_COMMENT is integer 3.
  call the function six.text_type with s as an argument, substitute the result for s.
  use the remainder of the division of name by count as the argument for the call to the avoid_wrapping function, store the result in result.
  if IOError, renamed to e, exception is caught,
  import module shutil.
  from django.core.management.sql import sql_create into default name space.
  call the function get_language, substitute the result for lang.
  get the value under the 'content-disposition' key of the meta_data dictionary, substitute second element of it for disposition.
  if not,
  found is boolean True.
  call the subprocess.Popen function with, 'git log --pretty=format:%ct --quiet -1 HEAD', stdout set to subprocess.PIPE,
  if exclude is true and f.name is contained in exclude,
  define the function fdel with 2 arguments: instance and name set to fdel.__name__.
  "Use django.utils.timezone.get_default_timezone instead." and RemovedInDjango19Warning.   call the method tzinfo.__init__ with an argument self.
  if bcc is true,
  if first element of message_context equals to character '"',
  re_formatchars.split, for every i and piece in enumerated result,   if i is even number,
  call the function hook with an argument entry, substitute the result for finder.
  from django.db.migrations.writer import MigrationWriter into default name space.
  call the method self._assert_mutable.
  if not,
  from django.utils.six.moves import xrange into default name space.
  define the method __init__ with 3 arguments: self, offset set to None, name set to None.
  if end is not None,
  if settings.TEMPLATE_DEBUG is true and origin is None,
  import module base64.
  call the method __new__ from the base class of the class DeclarativeFieldsMetaclass, with 4 arguments: mcs, name, bases and attrs.
  divide self.data.day by 10, substitute reminder of the result for last.
  define the method get_version with an arguments self.
  if self has an attribute '_body',
  self.invoked_for_django is boolean True.
  substitute '%s' is "%s.process_response didn't return an HttpResponse object. It returned None instead.",
  call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the item dictionary.
  model._meta.app_label, model._meta.object_name, fk_name, respectively.   if not,
  settings.USE_I18N is boolean True.
  if mimetype is not None raise an error.
  return a string '%s %s %s' formated with 3 elements: result of the function force_text called with an argument i,
  raise a NotImplementedError with an argument string 'subclasses of Serializer must provide a start_serialization() method'.
  call the function get_bytes_from_wsgi with environ, string 'PATH_INFO' and character '/' as arguments, substitute the result for path_info.
  define the function get_current_timezone.
  raise an ValidationError exception with 2 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary,
  property decorator,
  try,
  define the function wordcount with an argument value.
  raise an TemplateSyntaxError exception with an argument string "'regroup' tag takes five arguments".
  define the function model_to_dict with 3 arguments: instance, fields set to None and exclude set None.
  define the function timeuntil_filter with 2 arguments value and arg set to None.
  call the method self._headers.values, return the result,
  substitute '%s' in string ' # %s' with line, write it to out file.
  from unittest import import everything.
  try,
  import gettext module.
  define the method words with 4 arguments: self, num, truncate set to None, html set to boolean False.
  if can_fail is true,
  while t is greater than integer 0,
  call the method value.encode with an argument charset, substitute the result for value.
  call the method os._exit with an argument integer 1.
  write it for self.stderr.   exit the program with the integer 2 as exit code.
  call the __init__ method with stream_class(content) and name set to name arguments, from the base class of the ContentFile class.
  define the method __deepcopy__ with 2 arguments: self and memo.
  from django.utils.encoding import force_text into default name space.
  try,
  and e.level is lesser than checks.WARNING and result of the method e.is_silenced in false.   append e to errors list for every e in all_issues, if checks.ERROR is lesser than or equal to e.level,
  attribute of the self object for name converted into a string.   raise an KeyError with an argument string 'Unknown media type "%s"', where '%s' is replaced with name.
  value is None.
  substitute class_name for self.class_name.
  subclass is a instance of a class named Migration, derived from the base class Migration, with 1 field:
  call the function check_for_migrations with arguments app_config and connection.
  if length of bits is greater or equal to intger 2 and second last element of bits is equal to string 'as',
  if bits is false,
  substitute complain for __setslice__.
  otherwise if value is an instance of decimal.Decimal, float or six.integer_types,
  join dirpath and filename into a path separated by '/', append it to new_filenames.
  call the method self.field.bound_data with 2 arguments: self.data and value under the self.name key of the dictionary,
  raise an ImportError exception with an argument string "Could not import '%s'. The path must be fully qualified.",
  decorator function register.filter with an argument is_safe set to boolean True.
  replace '%s' in string 'ignoring directory %s\n' with dirname, write it to self.stdout stream.
  if newretval is not None,
  derive the class SyndicationFeed from the object base class.
  if fields is true,
  if not,
  if OSError renamed to e, exception is caught,
  decorator stringfilter,
  define the function get_public_serializer_formats.
  and final_attrs, append the result to output.   call the method self.format_output with an argument output, use the result as an argument for the call to the function mark_safe,
  define the method changed_data with an argument self.
  for ext in pathext,
  substitute the result for file_name.   call the function unescape_entities with an argument file_name, use the result as an argument for the call to the self.IE_sanitize,
  join elements of self.fed into a string, return the result.
  if not,
  substitute the '%s' with table and list containing key, respectively.   fetch one entry from the database that cursor points at, substitute it for the result.
  call the function get_template with 2 arguments template_name and dirs, return the result.
  return an instance of a class WidthRatioNode, created with 4 arguments: result of the method parser.compile_filter,
  substitute timezone for _active.value.
  raise an ValueError exception with an argument string 'Unable to configure formatter %r: %s' formated with name and e.
  if opts.model is None.
  append string 'max_digits and decimal_places have been guessed, as this database handles decimal fields as float' to field_notes.
  if self._cull_frequency equals to integer 0.
  call the function bytes with an argument self, divide the result with rhs and return the reminder of the division.
  get the value under the if iso_input not in val key of the ISO_INPUT_FORMATS dictionary, if it doesnt exists return an empty tuple,
  return a list containing return values of the function to_py called with an argument val, for every val in value.
  define the method add_arguments with 2 arguments self and parser.
  if data has an attribute 'read',
  from django.utils import six into default name space.
  skip this loop iteration,
  if first element of s is not contained in "\"'" or last element of s is not equal to first element of s,
  if obj.pk is None,
  substitute settings.STATIC_URL for prefix.
  call the function getInnerText with an argument child, use the result as an argument for the call to the method inner_text.extend.
  match regex datetime_re with value, substitute the result for match.
  call the method one_percent_re.sub with 2 arguments: string '%%' and t.contents, substitute the result for contents.
  from django.utils.text import get_text_list and capfirst into default name space.
  substitute name for self.name.
  if t.token_type == TOKEN_TEXT:
  return an integer 0.
  if ImportError exception is caught,
  where '%s' is replaced with name.   if defaults is not None,
  if not,
  call the emit_pre_migrate_signal with create_models, self.verbosity, self.interactive. connection.alias as arguments.
  raise an ValueError exception with an argument string 'Unable to configure logger %r: %s' formated with name and e.
  call the function template_localtime with 2 arguments: output and use_tz set to context.use_tz, substitute the result for output.
  return an empty string.
  substitute date_check elements to uclass, lookup, field and unique_for, respectively.
  define the method recipients with argument self.
  import module random.
  return self.DSTOFFSET.
  join statements into a string, separated by white spaces, append it to statements.
  if not,
  call the method mimetype.split with arguments: character '/' and integer 1, substitute the result for basetype and subtype, respectively.
  raise CommandError exception with string "The %s file has a BOM (Byte Order Mark). Django only supports .po files encoded in UTF-8 and without any BOM.", with '%s' replaced with po_path, as argument.
  return None.
  if not,
  for every ldir in dirs,
  if settings.USE_L10N is true and value is an instance of six.string_types,
  if ValueError or TypeError are caught,
  unique_check is a list with elements field, for every field in unique_check if field is not equal to self.fk.name.
  use the result as an argument for the call to the mark_safe function, return the result.   call the function func with 2 arguments: unpacked list args and unpacked dictionary kwargs, return the result.
  call the function importlib.import_module with an argument serializer_module, substitute it for module.
  if not,
  substitute self.count for top.
  self.years is list containing 10 successive integers from this_year.
  define the function _string_concat with an argument unpacked list strings.
  call the function six.reraise with 3 arguments: class ValidationError, class ValidationError, created with 3 arguments:
  return size of the image that was fed to the parser p.
  for every item in sorted_items,
  break the loop execution,
  try,
  define the method delete with 3 arguments: self, key, and version set to None.
  if 'is_safe' attribute of func object exists and is true and obj is an instance of SafeData,
  call the function timedelta with an argument seconds as negative time.timezone, subtract the result from the result of the call,
  program is string 'msgfmt'
  if not,
  if format_module_path is None.
  split value into words, return the length of the result.
  if title is an instance of list or tuple,
  substitute the result for offset_mins, otherwise offset_mins is integer 0.   convert elements of tzinfo from indexes 1 to 3 to an integer, multiply it by integer 60 and increment it by offset_mins,
  substitute notation_name for self.notation_name.
  from django.conf import settings into default name space.
  call the method self.val_expr.resolve with an argument context, substitute the result for value.
  if OSError exception is caught,
  raise an ValidationError with 3 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary,
  call the method self.write_message with argument message.
  if AmbiguityError exception is raised,
  try,
  call the method parser.compile_filter with an argument value, substitute the result for value under the key key of kwargs dictionary.
  url is None.
  try,
  define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
  get the value under the 'cookies' key of the state dictionary,
  derive the class LocaleRegexProvider with object as base class.
  name is an empty list.
  define the function length with an argument value.
  if identity lambda function returns false, substitute the x for capfirst, if not call the function force_text with an argument x,
  from django.forms.utils import flatatt,  ErrorDict and ErrorList into default name space.
  if not,
  if number equals a integer 1 and self.allow_empty_first_page is true,
  substitute boundary for self._boundary.
  call the function mark_safe with an argument value, return the result.
  define the method _has_changed with arguments self, initial and data.
  call the function activate with an argument self.language.
  substitute TemporaryFile for NamedTemporaryFile.
  substitute the result for filters dictionary value under name key.   if StandardError, renamed to e, exception is caught,
  call the method warnings.warn with 2 arguments: string "No fixture data found for '%s'. (File format may be invalid.)",
  return value.
  if self._options exists,
  sum media and w.media, substitute the result for media.
  if field_value is cotained in self.empty_values,
  tf is an instance of TimeFormat class, created with an argument value.
  call the function make_origin with 4 arguments: display_name, loader, name and dirs, return a tuple containing 2 elements:
  if ValidationError, renamed to e, is caught,
  derive the class TranslatableFile from the object class.
  call the method netloc.encode with an argument string 'idna', call the method decode on the result with an argument 'ascii',
  if not, self.merge is boolean False.   get the value under the 'empty' key of the options dictionary, if the key exists substitute it for self.empty,
  call the function get_library with an argument taglib, substitute the result for lib.
  return new_class.
  raise an AttributeError with an argument string "%s could not be imported ", formated with self.name.
  substitute val_expr for self.val_expr.
  define the function truncatewords_html with 2 arguments value and arg.
  perform the bitwise or operation on the next 6 operands pyinotify.IN_MODIFY pyinotify.IN_DELETE, pyinotify.IN_ATTRIB,
  call the method handler.startDocument.
  increment i by integer 1.
  call the function endblock_re.match with an argument t.contents, substitute the result for endbmatch.
  derive the class HttpResponseNotFound from the HttpResponse base class.
  define the method run_validators with arguments self and value.
  call the method self.create_variable_node with an argument filter_expression, substitute the result for var_node.
  call the method baseconv.base62.encode with result of the time.time function converted to an integer, as an argument, return the result.
  convert base to lowercase, if it ends with string '.tar',
  if value is an instance of bool.
  raise an CommandError with an argument string "Problem installing fixture '%s': %s is not a known serialization format.",
  call the function re.compile with 2 arguments: raw string "([A-Za-z]{1,8}(?:-[A-Za-z0-9]{1,8})*|\*)(?:\s*;\s*q=(0(?:\.\d{,3})?|1(?:.0{,3})?))?(?:\s*,\s*|$)",
  do nothing.
  call the function get_language_from_path with an argument request.path_info, substitute it for lang_code.
  for every app_config in reversed list created out of the return value of the function apps.get_app_configs,
  if not,
  return final_output.
  return boolean True, otherwise return boolean False.   property decorator.
  return field.to_python.
  BASE56_ALPHABET is a string '23456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz'.
  from django.http.multipartparser import MultiPartParser and MultiPartParserError into default name space.
  define the method filter with 2 arguments: self and record.
  if conflicts is true and self.merge is false,
  from django.utils.encoding import force_str into default name space.
  substitute labels for value under the 'labels' key of attrs dictionary.
  substitute StringIO for stream_class if content is an instance of six.text_type, otherwise substitute BytesIO for stream_class.
  substitute value under the key key of self._cache dictionary for pickled.
  return default.
  from django.http.cookie import SimpleCookie and parse_cookie into default name space.
  return errors.
  while i is smaller than list_length,
  visible_issue_count is an integer 0.
  or path is not contained in the value under the medium key of self._css dictionary.   call the method self._css.setdefault with 2 arguments medium and an empty string, append path to the result.
  call the method m.groups, use the first element of the result as key for obtaining value from d dictionary,
  if not,
  decompress is boolean True.
  return an empty string,
  if key is not contanied in self,
  call the function datetime_safe.new_datetime with an argument date, substitute the result for date.
  define the method __init__ with 4 arguments: self, target, expression and var_name.
  return an string "[Included template had syntax error: %s]", where '%s' is replaced with e.
  join elements of output into a string with newline as separator, use it as an argument for the call to the function mark_safe, return it.
  if self.is_reversed is true,
  if PY3 is true,
  define protected method _BaseCookie__set with self class instance, key, real_value and coded_value as arguments.
  if IOError or OSError exceptions occurred,
  derive the class TemplateEncodingError form the base class Exception.
  substitute app_template_dirs for template_dirs.
  raise an TemplateSyntaxError exception with an argument string "'%s' is not a valid tag or filter in tag library '%s'",
  for every field_node in return value of the method node.getElementsByTagName with an argument string 'field'.
  call the method apps.get_app_configs, for every app_config in the result,
  if prefix is None,
  create a directory self.default_locale_path.
  if value is boolean True,
  default_error_messages is an dictionary with 5 initial entries: return value of the function _ called with an argument string,
  substitute default for value under the key key of self dictionary.
  self.message_context is None.
  call the function register_serializer with 3 arguments: format, value under the format key of the settings.SERIALIZATION_MODULES dictionary and serializers.
  call the method to_python with an argument value from the base class of the TimeField class, return the result.
  from django.utils.datastructures import MultiValueDict and ImmutableList into default name space.
  import module django.core.checks.compatibility.django_1_7_0.
  instantiate class BoundaryIter with 2 arguments: self._stream and self._boundary, use it to instantiate LazyStream class, return it.
  raise an ValueError exception with an argument string "Unable to convert %r" formated with value.
  if not, substitute self.auto_id for id_.   call the method widget.id_for_label with an argument id_, return the result.
  if self.localize is true,
  for every header in list of strings compiled by splitting string cc_delim_re with value under the key 'Vary' of response dictionary as a delimiter.
  call the function os.unlink with an argument work_file.
  join tmpdir and sting 'symlink' into a file path name, substitute it for symlink_path.
  substitute the '%s' with table and 3 elements of a list: b64encoded, exp and key, respectively.   if not,
  substitute FIELD for TYPE,
  call the method msg.attach with an argument attachment.
  derive the class SimpleLazyObject from the LazyObject base class.
  value under f.name key of the dta dictionary is an empty list.
  raise an NotImplementedError exception with an argument string 'Awaiting Implementation'.
  for every pattern in allowed_hosts:
  return result.
  call the function import_module with an argument templatetag_module.
  if not,
  import module time.
  and 3 additional pairs of dictionaries for string.   define the function configure_logging with 2 arguments: logging_config and logging_settings.
  replace all the occurrences of previous string in msgs for an empty string, substitute the result for msgs.   call the function io.open with 3 arguments: pofile, string 'w' and encoding set to string 'utf-8' as arguments,
  map elements of self._iterator through self.make_bytes function, return the result.
 call the function re.compile with an argument raw string "^\s*plural$", substitute the result for plural_re.
  if vale is None or an empty string,
  for every sql in return value of the function connection.creation.sql_for_pending_references called with arguments: model, style,
  substitute value under name key of handlers dictionary for handler_config.
  call the method self.nodelist_true.render with an argument context, assign the result to compare_to and nodelist_true_output.
  decorator stringfilter,
  call the method parser.delete_first_token.
  if InputStreamExhausted exception is caught,
  return an instance of FixedOffset class, created with 2 arguments: offset and name.
  substitute the return value of the smart_text function with an argument obj_pk for the value under the 'pk' key of the attrs dictionary.
  return fixture_files.
  define the function get_language_from_path with an argument request.
  derive the class StreamingHttpResponse from the HttpResponseBase base class.
  called with an argument BlockNode.   define the method __repr__ with an argument self.
  call the function allow_lazy with an argument phone2numeric, substitute the result for phone2numeric.
  return an instance of DebugVariableNode, created with an argument contents.
  field.rel.__class__.__name__ for 'rel' and return value of the function smart_text with an argument field.rel.to._meta for 'to'.   derive the class Deserializer from the base.Deserializer base class.
  if call to the function os.path.exists with argument directory evaluates to boolean False,
  call the method translation.activate with an argument string 'en-us'.
  convert value to an string and substitute it for value.
  if not,
  call the method result.utctimetuple, use the result as an argument for the call to the method calendar.timegm, return the result.
  if KeyboardInterrupt exception is caught,
  if elt is an instance of NonCapture class,
  return boolean False.
  if widget is an instance of the NumberInput class, and string 'step' is not contained in widget.attrs,
  for every item in self.items,
  if ip_str starts with ':, but it doesnt starts with '::', or if ip_str ends with ':, but it doesnt ends with '::',
  for app_config in reversed list of apps.get_app_configs() elements,
  quant is an empty list.
  from django.core.cache import caches into default name space.
  append list containing string '--no-location' to self.msgmerge_options.
  for every sublist in second_item,
  use global variable _supported.
  if locale_dir is false,
  if field_name is false,
  if id_ is true,
  inner_text is an empty list.
  call the method notifier.process_events.
  format string '&%s;' with name, append it to self.fed.
  define the method render with 2 arguments self and context.
  define the function import_library with an argument taglib_module.
  self.managed is boolean True.
  try,
  call the pyinotify.WatchManager method, assign the result to wm.
  date_data is a tuple with 3 elements: date.year, date.month and date.day.
  call function force_bytes with value as argument, use the result to as the result for the call to the methgod ctx.update.
  get the value under the format key of the _serializers dictionary, return the Serializer filed of the result.
  if obj is an instance of Field, append to a list a tuple with 2 elements: field_name,   and poped value under the field_name key of the attrs dictionary, substitute the resulting list for fields.   sort fields elements with key being a lambda function with argument x and return value creation_counter filed of first element of x.
  call the function getInnerText with argument field_node, on the result call the method strip, use the result as an argument for the
  derive the class InterBoundaryIter from the six.Iterator base class.
  call the function six.iteritems with an argument: instance of base class of the MultiValueDict class, return the result.
  substitute field_type for field_type and new_params, respectively.
  substitute stream for self._stream.
  from django.conf import settings into default namespace.
  define the method __multiple_chunks__ with arguments self and chunk_size defaulting to None.
  substitute settings.TIME_FORMAT for arg.
  define the method _isdst with 2 arguments: self and dt.
  if settings.ADMINS is false,
  define the method __call__ with arguments self and value.
  return lang_code.
  nodelist.contains_nontext is boolean True.
  substitute filepath for self.filepath.
  if css_classes is true,
  try,
  derive the class DebugNode from Node base class.
  raise an v exception.
  define the method write with 3 arguments self, outfile and encoding.
  find the ending position of the regular expression match of the object match, substitute the result for k.
  call the function formatdate with 2 arguments: epoch_seconds and usegmt set to boolean True, return the result.
  call the function super_set with 2 arguments: key and value.
  raise an exception value.
  requires_system_checks is boolean False.
  bring integer 2 to the power of 10, multiply it by integer 64, substitute the result for chunk_size.
  data is None.
  call self.clear method.
  get the value under the 'indent' key of the self.options dictionary, substitute it for indent.
  call the method self._cull with db, cursor and now as arguments.
  call the clean method wiht value argument from the base class of the SlugField class, return the result.
  return output.
  define the method close with argument self.
  not_found is an empty list.
  call the method value.astimezone with an argument timezone, substitute the result for value.
  if length of app_labels equals integer 0,
  for every elt in source,
  _mtimes is an empty dictionary.
  if 'expects_localtime' attribute of func object exists and is true,
   help is a string "Creates new migration(s) for apps.".
  if model_list is None,
  remove the value under 'max_length' key from the kwargs dictionary and if the key exists substitute it for self.max_length,
  raise an ValueError with an argument string "Invalid header: %r", where '%s' is replaced with line.
  call the method logging._acquireLock.
  return an empty string.
  define the method tokenize with an argument self.
  zip self.loopvars and item is a list to tuples, convert the result to an dictionary, substitute it for unpacked_vars.
  call the function os.spawnve with os.P_WAIT, sys.executable, args and new_environ as arguments, substitute the result for exit_code.
  remove the first element from the self.context.
  if value under the 'description' key of the item dictionary is not None,
  from django.utils.encoding import force_text into default name space.
  convert self.use_ipv6 to boolean, substitute it for self._raw_ipv6.
  if not,
  if ImportError exception is caught,
  input_type is a string 'password'.
  if second element of t is boolean True,
  call the method connection.ops.end_transaction_sql, use the result as the argument for the call to the method self.style.SQL_KEYWORD,
  num_sent is an integer 0.
  define the method __init__ with 3 arguments: self, attrs set to None and choices set to an empty tuple.
  raise a ValidationError exception with 2 arguments: return value of the function _ called with an argument string 'Enter a valid IPv6 address.', and code set to string 'invalid'.
  define the method update_watch with sender defaulting to None and dictionary pair of elements kwargs.
  call the function is_aware with an argument value, if it evaluates to true,
  decorator cached_property,
  call the method self._create_attachment with an unpacked list attachment as an argument, use the result as an argument for the call to the msg.attach method.
  substitute self.parent_instance.pk for value under the 'initial' key of the kwargs dictionary.
  define the method _post_clean with an argument self.
  substitute char '0' for the value under the 'Content-Length' key of the response dictionary.
  call the method self.iterkeys, return the list of results.
  substitute library for self._lib.
  get the type of self object, call the __bool__ method on the result with an argument self, return the result.
  derive the class TagHelperNode form the base class Node.
  define the function set_urlconf with an argument urlconf_name.
  import module base64.
  define the function indexbytes with 2 arguments buf and i.
  call the LockFileEx function with 5 arguments: hfile, integer 0, integer 0, hexadecimal value FFFF0000, return value of the byref function called with argument overlapped, substitute the result for ret.
  try,
  from django.conf import settings into default name space.
  if default is true and RAISE_ERROR is false,
  raise an KeyError with an argument string "Key %r not found in '%s'", substitute '%s' with name and self.__class__.__name__.
  return value.
  call the function ungettext_lazy with 3 arguments: string 'Ensure this value has at least %(limit_value)d character (it has %(show_value)d),
  raise an CommandError exception with an argument "Database inspection isn't supported for the currently selected database backend.".
  define the method __init__ with 4 arguments: self, permitted_methods, unpacked list args and unpacked dictionary kwargs.
  call the method cache.set with cache_key, an empty list and cache_timeout as arguments.
  substitute DebugLexer and DebugParser for lexer_class and parser_class.
  and '%s' is replaced with app_or_project and message, respectively.   define the method download with arguments self and url.
  define the method __init__ with 2 arguments self and dt.
  from django.utils.encoding import force_bytes into default name space.
  define the method regex with an argument self.
  substitute the result for migration.ancestry.   append migration to merge_migrations.
  if not,
  increment i by integer 1.
  define the function mail_admins with subject, message, fails_silently set to boolean False, connection set to None,
  if not,
  import module warnings.
  call the function func with 3 arguments: context, self.first and self.second, return the result.
  skip this loop iteration.
  call the method sys.stderr.write with an argument string "ERROR: %s\n", where '%s' is replaced by e.
  clean is a lambda function with arguments self and x, return value is x.
  if AttributeError exception is caught.
  if value under the 'author_email' key of the item dictionary is not None,
  raise an EmptyPage exception with string 'That page number is less than 1' as an argument.
  from django.core.management.base import AppCommand into default name space.
  derive class BaseDatabaseCache from BaseCache base class.
  return id_.
  define the method has_changed with an argument self.
  call the method connections.all(), perform the following for every db in the result,
  call the handle method of the base class of the Command class, with 4 arguments: string 'project', project_name, target,
  _encoding is None.
  substitute messages.error_list for the value under the field key of the self.error_dict dictionary.
  return major.
  call the function clean_ipv6_address with arguments value and self.unpack_ipv4, return the result.
  for arg in argv list without the first two elements,
  if response.streaming is boolean False,
  if templatetags_modules is false,
  define the function get_unbound_function with an argument unbound.
  substitute sixth element of bits for var_name.
  derive the class RegroupNode from Node base class.
  call the formatdate function, substitute it for value under the 'Date' key of msg dictionary.
  call the function get_urlconf with an argument urlconf.
  self._container is a list containing element value.
  substitute cyclevars for self.cyclevars.
  from django.utils.six.moves.urllib.parse import urljoin into default name space.
  unpack dictionary kwargs, map it through self.attrs and convert to dictionary, substitute the result for attrs.
  derive the class StopFutureHandlers from the UploadFileException base class.
  return self.data.month.
  for every form in self.saved_forms,
  for second and third element of args, respectively.   if length of args equals integer 2,
  if not,
  substitute self.html_initial_id for value under the 'id' key of the attrs dictionary.
  for every i and tuple containing dirpath and f, in enumerated list of locations,
  call the method handler.file.close.
  if not,
  if self.data.hour equals integer 0,
  append a tuple with 2 elements: obj and form.changed_data to self.changed_objects.
  substitute ngettext for ngettext_lazy.
  if value is contained in self.empty_values and self.required is true,
  define the method __init__ with arguments self, flo and chunk_size set to integer 64 multiplied by integer 1024.
  define the method get_default_prefix with an argument cls.
  from django.core.management.base import BaseCommand and CommandError into default name space.
  if value is true and method self.valid_value called with an argument value evaluates to false,
  parse_until is an empty list,
  from django.utils.six.moves.urllib.parse import quote, quote_plus, unquote, unquote_plus, urlparse, urlencode as original_urlencode.
  define the method list with 3 arguments: self and unpacked list args and unpacked dictionary kwargs.
  substitute sysid for self.sysid.
  define the function new_datetime with an argument d.
  path is an list containing path.
  define the method as_textarea with 3 arguments: self, attrs set to None and unpacked dictionary kwargs.
  call the function format_html with 4 arguments: string '<option value="{0}"{1}>{2}</option>', option_value, selected_html,
  call the timestamp.strftime with string '%Y%m%d%H%M%S' as an argument, substitute the result for changeset.
  dependencies set to a list of tuples with 2 elements: app_label and migration.name for every migration in merge_migrations.   call the method subsclass with 2 arguments: string "%04i_merge", replace '%04i' with biggest_number incremented by one,
  call the method cursor.close,
  if rest is not False, None is considered False,
  if locales in not empty,
  substitute tuple with 2 elements: bz2.BZ2File and string 'r' for value under the 'bz2' key of the self.compression_formats dictionary.
  call the function popen_wrapper with argument args, assign the result to msgs, errors and status.
  return _dec.
  join together callback.__module__, character "." and callback.__name__, substitute the result for lookup_str.
  if func is None,
  substitute col_name for value under the 'db_column' key of the field_params dictionary.
  substitute '%s' in 'django.security.%s' with the name of the type of the class object e, use it as the argument for the call to the,
  callback is an lambda function with an argument response and with return value result of the method middleware.process_response,
  called with an argument value, substitute the result for value under the 'initial' key of the substitutions dictionary.   if self.is_required is false,
  from django.db import connection into default name space.
  if not,
  call the os.stat function with argument src, substitute the result for st.
  join package.__name__ and module_name into a string separated with '.', substitute it for name.
  if value is true,
  _fields_ is a list containing 2 tuples: first tuple contains: string '_offset' and _OFFSET, second contains: string 'Pointer' and PVOID.
  call the method app_list.items, use the result as an argument for the call to the function sort_dependencies, for every model in result,
  if value under the 'method' key of the options dictionary equals to string 'perfork' or 'fork',
  define the method nud with 2 arguments self and parser.
  substitute variables for self.vars.
  call the method self._cache.add with key, value, self.get_backend_timeout(timeout) as arguments.
  __caches is an empty dictionary.
  call the function unicodedata.normalize with 2 arguments: string 'NFC' and self._wrapped, substitute the result for text.
  call the method logger.addHandler with an argument handler.
  and only if self.match is None or return value of the method self.match_re.search called with an argument f is true.   append a tuple containing 2 elements: full_file and f to self.choices list.
  define the method render with 2 arguments: self and context.
  if exception is caught,
  return parent.
  if TemplateSyntaxError, renamed to e, exception is caught,
  return id_.
  evaluate the function debug.technical_500_response with request, evaluated value of function sys.exc_info as a list,
  where '%s' is replaced with self.__class__.__name__.   define the method flush with an argument self.
  return an instance of a BlockNode class, created with 2 arguments: block_name and nodelist.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  self._cached_loaders is an empty list.
  if length of t is greater than integer 1,
  return self.__language.
  append an empty string to usage.
  define the method __init__ with 4 arguments: self, content_type set to None, status set to None, reason set to None.
  call a function _ with a string 'Enter a valid value.' as an argument, substitute the result for message.
  if it exists or None if not and convert_apps set to app_labels, if it exists or None if not, substitute the result for changes.   if changes is false and self.verbosity is greater than, or equal to iteger 1,
  substitute the middleware.   define the function _decorator with an argument view_func.
  instantiate class Module_six_moves_urllib with an argument, string ".moves.urllib" appended to __name__,
  take locale or all_locales, whichever is not empty, respectively, and substitute it for locales.
  from django.utils import six into default name space.
  call the method bytes_to_text with 2 arguments: key and self.encoding, substitute the result for key.
  derive the class TextNode form the base class Node.
  call the method template.render with an argument context, substitute it for content.
  substitute them for app_label and migration_name, respectively.   executor is an instance of MigrationExecutor, created with value under the DEFAULT_DB_ALIAS key of the connections dictionary.
  define the function has_bom with fn as argument.
  if ImportError, renamed to e, exception is caught,
  if self.path is lesser than other.path, return boolean True, otherwise return boolean False.
  append to options a tuple containing 2 entries: result of the method s_opt.get_opt_string and s_opt.nargs,
  call the function logging.getLogger with string 'django.request' as the argument, assign the return object handle to logger.
  if conflicts is true,
  substitute value under the "unifunc" key of the results dictionary for unifunc.
  define method load_middleware with class instance self as the argument.
  int_part_gd is an empty string.
  return an empty string.
  substitute charset for self.charset.
  return host and an empty string.
  an instance of VerbatimNode class, return it.   register.tag decorator,
  in string '%s=%s' replace '%s' with k and return value of the function strip_prefix with an argument printable representation of v,
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  define the function with arguments self and filename.
  define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options.
  strip path of all leading '/' and '\\' characters, substitute the result for path.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  call the function warnings.warn with 2 arguments: string "OptionParser usage for Django management commands "
  statement is an empty list.
  raise an ImportError exception with an argument string "No IPython".
  if match is true,
  replace '%s' in a string "Created new squashed migration %s" with writer.path, use it as an argument for the call to the method,
  call the method sys.exc_info, substitute the result without the first element for e and tb.
  self.error_list is an empty list.
  if not,
  define the function modelformset_factory with 18 arguments: model, form set to ModelForm, formfield_callback set to None,
  define the method __next__ with an argument self.
  if not,
  for every root in settings.ALLOWED_INCLUDE_ROOTS,
  if not,
  if localized_fields equals ALL_FIELDS, or if localized_fields is true and f.name is contained in localized_fields,
  check if lowercase header_query exists is existing_headers, return the boolean result.
  define the method end_serialization with an argument self.
  get_format called with an argument string 'DATE_INPUT_FORMATS', substitute the result for format.   call the method value.strftime with an argument format, return the result.
  is an even number,   call the method s.find with 2 arguments: bytes string ';' and end incremented by one, substitute the result for end.
  substitute value under the database key of the connections dictionary for connection.
  raise an self.error with 2 arguments: None and string "Unclosed tags: %s ",
  from django.utils import six into default name space.
  if value under the 'microsecond' key of the kw dictionary is true,
  with the result renamed to fp, perform the following:   call the method fp.write with an arguments src_data.
  substitute _urllib_parse_moved_attributes for Module_six_moves_urllib_parse._moved_attributes.
  join elements of output into a string, separated with newlines, return the result.
  call the method __init__ from the base class of the class BaseInlineFormSet, with 5 arguments: data, files, prefix set to prefix,
  from django.utils.xmlutils import SimplerXMLGenerator into default name space.
  for every model in return value of the function router.get_migratable_models, called with arguments:
  define the method to_python with arguments self and data.
  otherwise if vale is not an instance of ConvertingTuple and value is an instance of tuple type,
  if logging_settings is true,
  call the method self.paginator.validate_number with self.number decremented by 1 as argument, return the result.
  import module re.
  if not,
  define the method add_root_elements with 2 arguments: self and handler.
  if form is contained in forms_to_delete,
  from module __future__ import unicode_literals to default name space.
  call the method self.create_parser with first and second element of argv, substitute the result for parser.
  define the function urlsafe_base64_decode with an argument s.
  otherwise if vale is an instance of value,
  call the self.get_response with request as the argument, substitute the result for response.
  if incremental is true,
  get the value from the options dictionary under the key 'load_initial_data', substitute it for self.load_initial_data.
  raise an TemplateSyntaxError exception with an argument string "'templatetag' statement takes one argument".
  for every name and value in return value of the method self.extra_headers.items,
  if ending is None substitute self.ending for ending.
  binary or 'O_BINARY' attribute of the os object, or integer 0 if it doesnt exists.   call the os.open function with full_path, flags and octal number 0o666 as arguments, substitute the result for fd.
  call the function os.chmod with arguments dst and mode.
  call the method connection.creation.create_test_db with verbosity set to verbosity, autoclobber set to inverse value of interactive,
  call the method self.make_view_atomic with callback as the argument, substitute the result for the wrapped_callback.
  for every hextet in new_ip,
  call the function warnings.warn with an argument string "A {% csrf_token %} was used in a template, but the context did not provide the value.  This is usually caused by not using RequestContext.".
  from django.utils.safestring import mark_safe into default name space.
  "pulls out all strings marked for translation. It creates (or updates) a message "   "file in the conf/locale (in the django tree) or locale (for projects and "   "applications) directory.\n\nYou must run this command with one of either the "   "--locale, --exclude or --all options.".    requires_system_checks is boolean False.
  import msvcrt.
  raise an NoReverseMatch exception with an argument string "%s is not a registered namespace", with '%s' replaced with key.
  if not,
  raise an exception.
  raise an CommandError exception with an argument string 'You appear not to have the %r program installed or on your path.',
  result of the call to the function _ with an argument string 'feb' for 2,   result of the call to the function _ with an argument string 'mar' for 3,   result of the call to the function _ with an argument string 'apr' for 4,   result of the call to the function _ with an argument string 'may' for 5,   result of the call to the function _ with an argument string 'jun' for 6,   result of the call to the function _ with an argument string 'jul' for 7,   result of the call to the function _ with an argument string 'aug' for 8,   result of the call to the function _ with an argument string 'sep' for 9,   result of the call to the function _ with an argument string 'oct' for 10,   result of the call to the function _ with an argument string 'nov' for 11,   result of the call to the function _ with an argument string 'dec' for 12.   MONTHS_3_REV is an dictionary with 12 entries: 1 for 'jan', 2 for 'feb', 3 for 'mar', 4 for 'apr', 5 for 'may', 6 for 'jun',
  if AttributeError exception is caught,
  from __future__ import unicode_literals into default name space.
  yield v.
  if 'needs_autoescape' attribute of func object exists and is true,
  if not,
  if self.field.show_hidden_initial is true,
  left justify string s in a field of width equal to the sum of length of s and reminder of the division of length of s by integer 4,
  call the method self.extra_headers.get with string 'From' and self.from_email as arguments, substitute the result for value under the 'From' key of msg dictionary.
  static method,
  call the DefaultCacheProxy function, substitute it for cache.
  raise CommandError exception, with sring "Can't find %s. Make sure you have GNU gettext tools 0.15 or newer installed." as argument, substitute '%s' with self.program.
  raise an ValueError exception with an argument string 'Unable to set formatter %r: %s' formated with formatter and e.
  create an iterator out of x.
  call the urljoin function with arguments: self.base_url and result of the call to the function filepath_to_uri with argument name, return the result.
  define the method __init__ with 2 arguments: self and offset.
  for every node in nodelist,
  if config dictionary value under 'version' key is not equal to integer 1,
  define initialization method __init__ with argument self.
  otherwise if first element of message_context equals to character "'",
  define private method __getattr__ with self class instance and attr as the arguments.
  call the function warnings.warn with 3 arguments: string 'import_by_path() has been deprecated. Use import_string() instead.',
  otherwise if dirname equals string 'locale',
  from django.utils.encoding import force_bytes,  force_text,  force_str and iri_to_uri into default name space.
  if ZeroDivisionError exception is caught,
  from django.core.files.move import file_move_safe into default name space.
  substitute EscapeText for EscapeUnicode.
  define the method __init__ with 15 elements: self, title, link, description, language set to None, author_email set to None,
  if ImportError, renamed to e, exception is caught,
  incomment is boolean False.
  define the function addslashes with an argument value.
  derive the class DefusedXmlException from the ValueError base class.
  call the method self.configurator.convert with an argument value.
  call the method create_token from the base class of the class DebugLexer, with 2 arguments: template_string and in_tag,
  dictionary keys converted into sets,   skip this loop iteration,
  return boolean False.
  if ValidationError exception is caught,
  self.waiting_writers is an integer 0.
  substitute RemovedInDjango19Warning for RemovedInNextVersionWarning.
  call the function lazy with arguments _get_val and six.text_type, substitute the result for _get_val.
  for every item in values,
  return None.
  if offset is an instance of timedelta class,
  from django.core.management.color import no_style into default name space.
  property decorator,
  call the function smart_text with argument related_att, use the result as an argument for the call to the self.xml.characters method.
  call the function func with 2 arguments: unpacked list resolved_args and unpacked dictionary resolved_kwargs, substitute the result for _dict.
  from django.core.management.base import AppCommand into default name space.
  delete self.name attribute from the obj.__class__ object.
  if setting has an "SERIALIZATION_MODULES" attribute,
  delete name attribute of the _MovedItems object.
  raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
  define the method _get_queryset with an argument self.
  return boolean True.
  call the function is_ignored, with arguments: file_path and self.ignore_patterns, if it evaluates to true,
  call the method __init__ with an argument name form the base class of the class MovedAttribute.
  output is a list containing an entry: result of the function format_html called with 2 arguments:
  if language_code is not contained in self._reverse_dict
  call the __init__ method with 3 arguments: DEBUG, unpacked list args and unpacked dictionary kwargs from the base class of Debug.
  call the method settings.configure.
  from django.utils.safestring import mark_safe into default name space.
  define the function get_language_info with an argument lang_code.
  result of the function iri_to_uri called with an argument link for 'link',   result of the function to_unicode called with an argument description for 'description',   result of the function to_unicode called with an argument author_email for 'author_email',   result of the function to_unicode called with an argument author_name for 'author_name',   result of the function iri_to_uri called with an author_link link for 'author_link', pubdate for 'pubdate',   updateddate for 'updateddate', result of the function to_unicode called with an comments author_name for 'comments',   result of the function to_unicode called with an argument unique_id) for 'unique_id)',   unique_id_is_permalink for 'unique_id_is_permalink', enclosure for 'enclosure',    if true, categories is value for 'categories' key, if not, empty tuple is value for 'categories' key,   result of the function to_unicode called with an argument item_copyright for 'item_copyright', ttl for 'ttl'.   update dictionary item with an argument kwargs.
  if attrs is true, call the function flatatt with an argument attrs, substitute the result for attrs, if not attrs is an empty string.
  call the method self.find_files with an argument string '.', substitute the result for file_list.
  if decimal_separator is contained in value,
  substitute varlist for self.varlist.
  return path.
  call the method render from the base class of the class FileInput, called with 3 arguments: name, None and attrs as attrs.
  convert params into a list, substitute it for unhandled_params.
  call the method comment_re.sub with an arguments: raw string '\1' and line, strip the whitespaces surrounding the result, return it.
  substitute greater element between integer 0 and end decremented by one for last.
  import module warnings.
  call the function http_date with no arguments, and substitute its return value
  raise an SyntaxError with an argument string "Translation blocks must not include other block tags: %s (%sline %d)",
  try,
  call the method formfield_callback with 2 arguments: f and unpacked dictionary kwargs, substitute the result for formfield.
  if self._changed_data is None,
  substitute number_value for kwargs dictionary value under the 'number' key.
  do nothing.
  if iterator is None,
  yield emitting as result of the generator.
  substitute name, nodelist and parent for self.name, self.nodelist and self.parent.
  yield node.
  call the function copy.deepcopy with 2 arguments: self.children and memodict, substitute the result for obj.children.
  derive the class Library form the base class object.
  derive the class Parser from the base class object.
  substitute settings.DATE_FORMAT for arg.
  from django.conf import settings into default name space.
  dest set to string 'load_initial_data', default set to boolean True,   and help as a string 'Tells Django not to load any initial data after database synchronization.'   call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
  if AttributeError exception is caught,
  call the function urlsplit with an argument value, assign the result to scheme, netloc, path, query and fragment, respectively.
  with the result,   evaluate method connection.cursor, with return value as curs,
  remove kwargs dictionary element under the 'method' key, substitute it for method.
  if self.requires_system_checks is true and values under the 'skip_validation' and 'skip_checks' keys of the options dictionary are false,
  return first element of t.
  if not,
  increment level by one.
  call the method signal.signal with signal.SIGTTOU and old_handler, as arguments.
  split label by '.', assign the result to app_label and model_label, respectively.
  from django.core.management.base import BaseCommand and CommandError into default name space.
  define the method id_for_label with an argument self.
  join return value of the function six.text_type called with an argument self.management_form and forms into a string,
  try,
  where '%s' is replaced with filter_name.   call the method parser.parse with an argument tuple with an element string 'endfilter', substitute the result for nodelist.
  call the httpd_cls function with 4 arguments: server_address, WSGIRequestHandler and ipv6 set to ipv6, substitute the result for httpd.
  substitute loader.graph for graph.
  if self.use_ssl and self.use_tls are boolean True,
  return it.   if PY3 is true,
  call the function smart_text with argument key_value, use the result as an argument for the call to the self.xml.characters method.
  define the method __init__ with 2 arguments: self and source.
  _urllib_response_moved_attributes is a list with 4 elements: result of the function MovedAttribute, called with 3 arguments:
  call the method cursor.execute with string "DELETE FROM %s WHERE cache_key = %%s" as argument,
  try,
  call the method context.push, with the result perform,
  if self.verbosity is greater or equal to integer 1.
  yield string "#" as the result.
  return value, if it is None return arg.
  arg_vals is an empty list,
  if decimal_pos is not None
  do nothing.
  derive the class SafeText from six.text_type and SafeData base classes.
  if TypeError or ValueError exceptions are caught,
  and name set to None.   define the function dec with an argument func.
  return an empty string.
  from django.utils.module_loading import import_string into default name space.
  if not,
  if not,
  derive the class HttpResponseRedirect from the HttpResponseRedirectBase base class.
  if the key doesnt exists substitute None for self.selected_fields.   remove the 'use_natural_keys' key from the options dictionary and substitute it for self.use_natural_keys,
  if self.stream is None:
  for every item in self.items,
  for every c in self.children.   return string '(%s: %s)', formated with self.connector and string created by joining c into a string, separated by ', ',
  call the function sanitize_address with arguments addr and encoding, for every addr in return value of the getadresses function with tuple containing val as argument, join all the results into a string separated by ', ', substitute the result for val.
  if self.verbosity is greater than integer 0,
  define the method to_python with arguments self and value.
  join elements of pieces into a string, return it.
  substitute renderer for self.renderer.
  for every app and names in result of the method conflicts.items, join names into a string, separated by ', ',
  from django.utils.encoding import force_str and force_text into default name space.
  call the function import_module with an argument project_name.
  return an instance of Literal class, created with an argumen value.
  if not,
  if i is greater than, or equal to the result of the call to the method self.initial_form_count,
  update defaults dictionary with kwargs.
  "(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}(?<!-)\.?)|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|\[?[A-F0-9]*:[A-F0-9:]+\]?)(?::\d+)?(?::\d+)?(?:/",   "?|[/?]\S+)$" and re.IGNORECASE, substitute the result for regex.   call a function _ with a string 'Enter a valid value.' as an argument, substitute the result for message.
  define the method with self class instance and parser as arguments.
  return result.
  get the value under the e.errno key of the ERRORS dictionary, substitute it for error_text.
  call the function six.reraise with 3 arguments: ImportError, instance of ImportError class created with an argument msg,
  define the method clean with arguments self and value.
  if col_name is not equal to new_name and field_notes is true,
  if dirname is true, return dirname converted to a string and surounded by single quotes, if not return string 'absolute path'.
  call the function re.compile with an argument raw string '\S', substitute it for dot_re.
  if string '__str__' is not contained in __dict__ field of klass,
  call the method __init__ from the base class of the class CharField, with arguments unpacked list args and unpacked dictionary kwargs.
  raise an UnrecognizedArchiveFormat exception with an argument string "File object not a recognized archive format.".
  try,
  define the function ungettext with 3 arguments: singular, plural and number.
  substitute value for the value under the name key of the self.cleaned_data dictionary.
  substitute '%s' in string "#. #-#-#-#-#  %s.pot (PACKAGE VERSION)  #-#-#-#-#\n" with self.domain,
  call the traceback.print_exc method.
  substitute value under the 'verbosity' key of the options dictionary for self.verbosity.
  return the result.   if UnicodeDecodeError exception is caught,
  if object response has an attribute 'render' and if response.render is callable object,
  EndToken is an instance of EndToken class.
  if app_labels is false,
  import module sys.
  from django.utils import six into default name space.
  and self.choice_label, return the result.   define the method is_checked with an argument self.
  define the method validate with arguments self and value.
  define the method resolve_template with 2 arguments: self and template.
  derive the class WidthRatioNode from Node base class.
  try,
  value under the item key of self.dict dictionary is None.
  raise an exception e.
  define the method __init__ with 2 arguments: self and name.
  from django.template.defaultfilters import date into default name space.
  call the method middleware.process_response with 2 arguments: request and response, return the result.
  for every fname in return value of the glob.glob1 function called with 2 arguments: self._dir and ,
  define the method clear with argument self.
  default set to boolean True and help set to string 'Tells Django to NOT prompt the user for input of any kind.'.   call the parser.add_argument with string '--addrport', default set to an empty string and help as string 'Port number or ipaddr:port to run the server on.'.
  do nothing.
  call logging.getLogger method with string 'django.request' as argument, store the result in logger.
  if PY3 is true,
  return val.
  for every pattern in reversed list self.url_patterns,
  if not,
  return ret.
  call the method self.emit_post_migrate with arguments verbosity, interactive and database.
  call the function warnings.warn with 3 arguments:
  call the method self.to_python with an argument value, substitute it for value.
  define the method __init__ with arguments self, stream and boundary.
  call the method os.chdir with an argument our_home_dir.
  from django.conf import settings into default name space.
  call the method self.common_logger_config with 3 arguments: root, config and incremental.
  supported is boolean False.
  write a string "Resetting sequences\n" to self.stdout stream.
  if name is contained in existing,
  call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with an entry:
  call the __init__ method of the base class of the class URLValidator, with unpacked dictionary kwargs as argument.
  from django.utils.module_loading import import_string into default name space.
  if attribute '_client' of the self object is None,
  try,
  reverse element order of dicts, join them in a string, substitute the result for number.
  from .html_parser import HTMLParser and HTMLParseError into default name space.
  substitute '%s' in string '%s %s' with the elements of value converted into a tuple, substitute the result for value.
  if fname file path exists,
  "path of at least one fixture in the command line."   define the method add_arguments with 2 arguments: self and parser.
  get the value under the 'no_obsolete' key of the options dictionary, substitute it for self.no_obsolete.
  substitute fifth element of row for value under the 'max_digits' key of the field_params.
  _win is a tuple containing 1 initial boolean: True is sys.platform equals to string "win32", False otherwise.
  substitute MultipleHiddenInput for hidden_widget.
  define the function loads with 5 arguments: s, key set to None, salt set to string 'django.core.signing',
  try,
  define the method resolve with an argument self.
  from django.utils import six into default name space.
  raise an NotImplementedError with an argument string 'subclasses of SyndicationFeed must provide a write() method'.
  delete dictionary item 'public' from cc.
  for every supported_code in _supported,
  call the re.compile function with 2 arguments: raw string "(^[-!#$%&'*+/=?^_`{}|~0-9A-Z]+(\.[-!#$%&'*+/=?^_`{}|~0-9A-Z]+)*$",
  return an string "<For Node: for %s in %s, tail_len: %d%s>", substitute '%s' with elements of self.loopvars joined into a string,
  for every loader in template_source_loaders,
  call the function __proxy__ with 2 arguments: args and kw, return the result.
  call the method app.initialize with an argument argv as an empty list.
  define the method __call__ with arguments self and value.
  decorator cached_property.
  from django.core.management.utils import handle_extensions, find_command and popen_wrapper into default name space.
  if request has an attribute named 'urlconf',
  msg_count is integer 0.
  return nothing.
  substitute mtime for the value under the filename key of _mtimes dictionary.
  call the function to_current_timezone with an argument value, substitute the result for value.
  from __future__ import unicode_literals into default name space.
  substitute link for link_prev, link_next, key and result, respectively.
  if commit is false,
  for every w in self.widgets, if all elements w.is_hidden are true, return boolean True, otherwise return boolean False.
  return a string "<DeserializedObject: %s.%s(pk=%s)>", where '%s' are replaced with self.object._meta.app_label,
  return None.
  call the method parser.add_option with 2 arguments: string '--pythonpath' and help set to string 'A directory to add to the Python path, e.g. "/home/djangoprojects/myproject".'.
  if value.tzinfo is not None and call to the method value.tzinfo.utcoffset called with an argument value evaluates to not None,
  call the method __init__ from the base class of the EmailMultiAlternatives class, with 9 arguments: subject, body, from_email, to,
  BLOCK_TAG_END is a string '%}'.
  if last element of pieces is true,
  if stream_or_string is an instance of the six.string_types,
  DEFAULT_TIMEOUT is a instance of the class object.
  get the unicode representation of current working directory, join it and path into a string, substitute the result for path.
  remove config dictionary entry under 'format' key, substitute it for value under 'fmt' key of config dictionary.
  divide x by length of to_digits, convert floor value of the result to an integer, substitute it for x.
  if attrs is false, make attrs an empty dictionary.
  replace every occurrence of '\n' in s with '\\n'.
  try,
  call the CacheHandler function, substitute the result for caches.
  if not,
  define the method __setitem__ with 3 arguments: self, kay and value.
  floor the division of i by j, use it an an index to get the element of the digits list, append the result for base36.
  call the function lazy with 2 arguments: gettext and str, substitute gettext_lazy.
  if not,
  call the method parser.add_argument with 6 arguments: string '--ipv6', string '-6', action set to string 'store_true',
  call the method self.build_attrs with 2 arguments: attrs and name set to name, substitute the result for final_attrs.
  extend the self.error_list list with message.error_list.
  derive the class NullBooleanSelect from the Select base class.
  return boolean True.
  if LookupError exception is caught,
  call the method field._has_changed with 2 arguments: return value of the function field.to_python called with an argument initial,
  define the function escape_filter with an argument value.
  from django.utils import archive into default name space.
  return an instance of SafeText, created with an argument data.
  call the method self._assert_mutable.
  define the method delete_cookie with 4 arguments: self, key, path set to character '/' and domain set to None.
  convert key and default to strings, get the value under the key string key of the environ dictionary, if it does not exists use the,
  BASE62_ALPHABET is string '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.
  loaders is an empty list.
  if self.activated is boolean True,
  define the method copy with an argument self.
  return default.
  if not,
  call the function token_kwargs with 3 arguments: remaining_bits, parser, support_legacy set to boolean False, substitute the result for value.
  raise an exception.
  raise an NotImplementedError with an argument string 'Subclasses must define this method.'.
  define the method render with 2 arguments: self and context.
  try,
  with self.mutex perform,
  convert value to an integer.
  substitute self.field.widget for widget.
  if self.data is false,
  and re.VERBOSE, substitute the result for smart_split_re.   define the function smart_split with an argument text.
  raise an Exception exception with an argument string "This %s instance cannot tell its position",
  truncate last 9 elements of filename and append it string ".py".
  substitute object_list for self.object_list.
  otherwise if fourth element of version does not equals to 'final',
  RemovedInDjango19Warning and stacklevel set to integer 2.   define the function _resolve_name with 3 arguments: name, package and level.
  get the value under the 'no_wrap' key of the options dictionary, if it is true,
  regex is an empty string.
  otherwise if self.file_path file path doesnt exists,
  buf is an instance of StreamingBuffer class.
  if y and m and d are all true,
  if MultiPartParserError exception is caught,
  call the function force_str with an argument sep, substitute the result for self.sep.
  set opname attribute of cls object to opfunc.
  define the method __len__ with an argument self.
  self.day_none_value is a tuple containing 2 elements: integer 0 and third element of empty_label.
  from django.utils.html import format_html, format_html_join and escape into default name space.
  call the method self.file.write with argument raw_data.
  define the method __exit__ with 4 arguments: self, exc_type, exc_value and traceback.
  if six.PY3 is true,
  writer is an instance of MigrationWriter class, created with an argument migration.
  return value.
  format the previous in a tuple, append the tuple to the response_headers.   call the start_response function with force_str(status) method return value and response_headers as arguments.
  for every ch and escaped in input_iter,
  call the function six.text_type with an argument arg, append the result to '%', format the previous with value, return the result.
  sublist_item is None.
  if new_name is contained in used_column_names,
  base is an instance of Media class.
  if self does not have 'bad_cookies' attribute,
  if AttributeError exception is caught,
  locale_dirs is a list of elements from the list of path names that maths the basedir path with '/*' wild card characters for which call to the os.path.isdir returned true, assign it to locale_dirs.
  extend errors list with m for every m in e.error_list, only if m is not in errors.
  if lengths of initial and data are equal,
  define the method handle_field with argument self, obj and field.
  append to errors list a dictionary created with 2 etries, if escape_html is true, return value of the function escape
  define the method management_form with an argument self.
  call the method filename.rfind with an argument string "\\", increment the result by one,
  substitute value for self.cookies dictionary value under the key key.
  property decorator, to be called by property built-in function.
  call the method self.writer_leaves.
  call the function locks.unlock with argument fd.
  for the call to the function upath, get the directory name of the resulting system path, join the result and string 'locale',   into a valid file path, substitute it for globalpath.   append settings.LOCALE_PATHS converted into a list to a list containing an element globalpath, return it.
  join elements of quant into a string, split it by string ',', substitute the result for values.
  self._ordering is an empty list.
   if app_config.models_module is None or app_config is contained in excluded_apps,
  return string 'https'.
  append rel_model to deps.
  if ',' is not contained in arg,
  for every bwidget in self.widgets,
  if OverflowError or ValueError exceptions are caught,
  call the method filter.get_request_repr with an argument request, format string '\n{0}' with the result, substitute the result for request_repr.
  substitute auto_id for value under the 'id' key of the attrs dictionary.
  from django.template.base import TemplateDoesNotExist into default name space.
  from django.utils.encoding import smart_text and is_protected_type into default name space.
  substitute every '%s' in string '%s<li>%s%s</li>' with indent, with result of the function escaper called with an argument:
  define the method new with 2 arguments: self and values set to None.
  for every exclude in excludes,
  try,
  url is an empty string.
  call the method self.resolve with an argument c, substitute the result for c.
  return an empty list.
  finally perform,
  if not,
  cc is a dictionary populated with items by calling function _to_tuple with el as an argument,
  get executor.loader.graph.nodes list item at the index of the first element of targets list, get the value under the 'backwards' key of options dictionary, put previous two elements is a tuple, tuple is contained in a plan list.
  define the method render with 2 arguments self and context.
  if ret equals to integer 0, return boolean True, otherwise return boolean False.
  otherwise add boolean False, for every candidate in the result perform following,   if candidate is false,
  if first and second element of sys.version_info are both equal to integer 3,
  if parent has an attribute 'render',
  return value.
  field_type is a string 'TextField'.
  property decorator,
  value is None.
  otherwise if var is None,
  call the method handler.endElement with 2 arguments: string 'author' and an empty dictionary.
  if not,
  call the self.stderr.write method with string "    Failed to install index for %s.%s model: %s\n" as argument,
  define the function to_locale with 2 arguments language and to_lower set to boolean False.
  if fourth element of attr_list and termios.ECHO are both true,
  define the function render_to_string with 4 arguments: template_name, dictionary set to None, context_instance set to None and dirs set to None.
  import module os.
  if root is true,
  define the function boolean_check with an argument v.
  httpd.daemon_threads is boolean True.
  if response is True,
  derive the class TemporaryFileUploadHandler from the FileUploadHandler base class.
  call the method tempfile.NamedTemporaryFile with arguments: suffix set to string '.upload' and dir set to settings.FILE_UPLOAD_TEMP_DIR.
  call the method m.group with an argument string 'hour', convert the result into a string, substitute it for hour.
  raise an NotImplementedError with an argument string 'subclasses of BaseLoader must provide a load_template_source() method'.
  for every bytes in stream,
  call the function re.compile with 2 arguments: raw string '^www\.|^(?!http)\w[^@]+\.(com|edu|gov|int|mil|net|org)($|/.*)$',
  value is an string '1'.
  call the method self.add_fields with arguments form and i).
  substitute args for self.args.
  try,
  from django.db.models.fields.related import ManyToManyField.
  append tuple containing 3 elements: candidate, fixture_dir and fixture_name to list fixture_files_in_dir.
  return self.var.
  from django.utils.timezone import utc and get_fixed_timezone into default name space.
  substitute the '%s' with table and list containing return value of the method call ops.value_to_db_datetime with argument now on the object under the db key of connections dictionary, respectively.   if exists return next entry from the database that cursor points at.
  do nothing.
  derive the class NodeList form the base class list.
  otherwise if ns is not contained in app_list,
  use the global variables _mtimes and _win in this function.
  full_statement is a list containing: string "CREATE TABLE %s (", where %s is replaced by result of the function qn called with an argument tablename.
  otherwise if self._meta.exclude is true and field is not contained in self._meta.exclude,
  raise an ValueError exception with string "The file cannot be reopened." as an argument.
  for every basedir in basedirs,
  if not,
  fork a child process, if the result equals integer 0,
  if name is callable object,
  raise an exception.
  call the add_argument method on parser object, use string '--database', default set to DEFAULT_DB_ALIAS and help set to string,
  call the BaseCache initialization method __init__ with 3 arguments self, list of arguments args and dictionary of arguments kwargs.
  if self.localize is true,
  return name, ser_fmt and cmp_fmt.
  define the method add_fields with 2 arguments: self, form and index.
  substitute self.obj for model.
  if second last element of django.VERSION is not equal to a string 'final',
  raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
  from django.utils import six into default name space.
  for eery app_config in app_configs,
  raise an base.DeserializationError exception with an argument string "<%s> node is missing the required '%s' attribute",
  save_as_new set to boolean False, prefix set to None, queryset set to None and unpacked dictionary kwargs.   if instance is None,
  substitute operator.getitem for indexbytes.
  define the method get with 3 arguments: self, key and otherwise set to None.
  return an empty string.
  from django.core.management.sql import sql_custom into default name space.
  def the method __init__ with 5 arguments: self, object_list, per_page, orphans set to integer 0 and allow_empty_first_page set to boolean True.
  call the method datetime.datetime with an argument unpacked dictionary kw, return the result.
  define the method _send with arguments self and email_message.
  tt is an tuple with 9 elements: dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, result of the function dt.weekday,
  decrement self.waiting_writers by integer 1,
  call the mail.send method with fail_silently set to fail_silently as argument.
  if OSError exception is caught,
  return result.
  for every node in compiled_parent.nodelist,
  define the method decr with arguments self, key, delta defaulting to integer 1 and version defaulting to None.
  if _urlconfs has an attribute 'value',
  try,
  if data is true,
  try,
  call the method call_command with string 'loaddata', string 'initial_data', verbosity set to self.verbosity,
  read the whole file f, substitute the result for content.
  define the function make_list with an argument value.
  cursor is None.
  call the method self.create_select with 6 arguments: name, self.year_field, value, year_val, choices and self.year_none_value,
  extension_map is a dictioanry with 6 initial elntries: TarArchive for '.tar', TarArchive for '.tar.bz2', TarArchive for '.tar.gz',
  substitute value under the name key of the lib.filters dictionary for value under the name key of the temp_lib.filters dictionary.
  call the method self.can_read.release.
  call the method kwarg_re.match with an argument bit, substitute it for match.
  join printable representation of d into a string separated with ', ', for every d in self.dicts, substitute the result for dictreprs.
  and self.regex.flags equals to other.regex.flags and self.message equals to other.message and self.code equals to other.code,   and self.inverse_match equals to other.inverse_match, return the result.   define the method __ne__ with arguments self and other.
  call the method handler.endElement with an argument string 'item'.
  from __future__ import unicode_literals into default name space.
  for every app_config in return value of the method apps.get_app_configs, only if app_config.models_module is not None,   and app_config is not contained in excluded_apps.   if not,
  and help is a string 'Tells Django to use plain Python, not IPython or bpython.'.   call the method parser.add_argument with 4 arguments: string '--no-startup', action as a string 'store_true',
  and trimmed, write the result to out.   for every part in singular,
  set the file position pointer at the beginning.
  call the method wm.add_watch with path and mask as arguments.
  import module time.
  call the method connection.ops.start_transaction_sql, use the result as an argument for the call to the method self.style.SQL_KEYWORD,
  derive the WSGIHandler class from the base class base.BaseHandler.
  if self.dry_run is false,
  derive the class FilePathField from the base class ChoiceField class.
  call the method setdefault from the base class of the class SortedDict, with 2 arguments key and default, return the result.
  call the method add_arguments from the base class of the Command class, with an argument parser.
  if not,
  if self.initial is true, substitute the length of self.initial for initial_forms, if not, initial_forms is integer 0.
  derive the class Input from the Widget base class.
  call the function chain with arguments self.choices and choices, for every option_value and option_label in the result,
  return value.
  define handle_field method with self, obj and field arguments.
  otherwise if call to the method finder.find_module with an argument name evaluates to true,
  cached_loaders is an empty list.
  response_fixes is a list with  http.fix_location_header and http.conditional_content_removal as elements.
  if html is true,
  call the method self.queryset.get with an argument, unpacked dictionary with an element: value for key, substitute the result for value.
  if sub_tried is not None,
  derive the class BlockNode from the Node base class.
  call the method self.show_migration_list with connection as first argument, as second argument use value under the 'app_label' key of options dictionary,
  return path_info.decode method return value called with UTF_8 as the argument.
  get the value under the 'no_location' key of the options dictionary, if it is true,
  from django.forms.fields import everything into default name space.
  call the function timedelta with an argument minutes set to offset, substitute the result for self.__offset.
  substitute list_ for first_item and second_item, respectively.
  do nothing.
  define the method F with an argument self.
  return nodelist_true_output, if true, if not call the method self.nodelist_true.render with an argument context and return the result.
  define the method __init__ with self class instance, file, and name defaulting to None as arguments.
  call the method os.path.dirname with an argument fixture_name, append it to a list, substitute resulting list for fixture_dirs.
  _response_middleware is an empty list.
  convert value and arg into a integers, return their sum.
  define the method validate_key with self class instance and key as arguments.
  for every code in tuple with 2 elements: lang_code and generic_lang_code,
  define the method close with an argument self.
  substitute i for p.
  self._post_render_callbacks is an empty list.
  raise an ImportError exception.
  return an instance of AutoEscapeControlNode with 2 arguments: boolean exception arg equals to string 'on', and nodelist.
  call the function re.compile with an argument string "([\u0080-\uffff])", substitute the result for ustring_re.
  define the method __getstate__ with an argument self.
  call the method self._archive_cls with an argument file, call the result with an argument file, substitute the result for self._archive.
  get value under the BLOCK_CONTEXT_KEY key of context.render_context dictionary, substitute it for block_context.
  from django.utils.timezone import is_aware into default name space.
  call the method make_key with arguments key and version from the base class of the class BaseMemcachedCache, use it as an argument for the call to the function force_str, return the result.
  return.
  dest as a string 'no_startup' and help as a string 'When using plain Python, ignore the PYTHONSTARTUP environment variable and ~/.pythonrc.py script.'.   call the method parser.add_argument with 5 arguments: string '-i', string '--interface', choices set to string self.shells,
  call the M.set method with the key, real_value, coded_value as the arguments.
  and fk.rel.to is not contained in result of the call to the method parent_model._meta.get_parent_list.   raise an ValueError with an argument string "fk_name '%s' is not a ForeignKey to '%s.%'.", where '%s' is replaced with,
  import module copy.
  for every w in widgets, call the function w and append the result to a list, if w is an instance of type class,
  call the method form.save with an argument commit as commit, return the result.
  define method parse_starttag with self class instance and i as the arguments.
  if prefix is None,
  input_type is a string 'number'.
  if not,
  substitute i-th element of list for title.
  if not,
  call the method cursor.execute with string "DELETE FROM %s" as argument, substitute the '%s' with table.
  if schemes is not None,
  derive the class IntegerField from the base class Field class.
  substitute settings.TEMPLATE_DIRS for template_dirs.
  define initialization method __init__ with self instance of the class as an argument.
  do nothing.
  if use_l10n is true, or if use_l10n is None and settings.USE_L10N is true,
  substitute current_app for self.current_app.
  decorator function lru_cache.lru_cache with an argument maxsize set to integer 1000.
  return None.
  define the method __init__ with 2 arguments self and var.
  dir set to None as the arguments.   call the method tmpfile.mkstemp with suffix set to suffix, prefix set to prefix and dir set to dir, store the result in the fd and name, respective.
  from django.utils.translation import ugettext_lazy as _ and ugettext into default name space.
  if not,
  terminal_char is an string ')'.
  substitute the result for value.   if not,
  call the method self.end_serialization.
  define the function dec with an argument func,
  from django.core.files.move import file_move_safe into default name space.
  define the function unlock with argument f.
  import module warnings.
  read file fp, substitute the read data for output.
  append new_filenames to _cached_filenames.
  open the file named filepath in read mode, with file descriptor renamed to fp perform,
  call the function render_value_in_context with 2 arguments output and context, return the result.
  if 'incomplete' key of the f.error_messages doesnt exists, assign it the value under the 'incomplete' key of the self.error_messages dictionary.
  try,
  if message is an instance of SafeData,
  call the method media_property with an argument new_class, substitute the result for new_class.media.
  if help_texts is not None,
  from django.utils.encoding import force_text into default name space.
  if self.verbosity is greater than integer 0,
  if pattern.namespace is true,
  for every punctuation in TRAILING_PUNCTUATION,
  if value is contained in self.empty_values,
  call the method text.find with 2 arguments: substr and i, substitute the result for j.
  raise a ValueError exception with an argument "You can only use `unpack_ipv4` if `protocol` is set to 'both'".
  call the method value.replace with an arugment tzinfo set to None, return the result.
  substitute number for self.number.
  join base an unpacked list paths into a string, get the absolute path in unicode representation of the result, substitute the result for final_path.
  if self.verbosity is greater than integer 1,
  if lengths of initial and data are not the same,
  elt is an list with an element elt.
  if not,
  import module copy.
  substitute obj._meta.concrete_model for concrete_model.
  call the method HTMLParser.__init__ with 2 arguments: self and strict set to boolean False.
  define lambda function that returns self.file.read field, use it as an argument for property function, put the result in read.
  call the method regex_match.group with an argument integer 1, substitute the result for lang_code.
  if field is contained in self.errors return boolean True, if not, return boolean False.
  and return value of the function f.db_type called with an argument connection set to connection.   if f.null is false, append string append "NOT NULL" to field_output, otherwise append "NULL" to field_output.
  convert value to uppercase, return the result.
  with return value of the function io.open with fname and string 'rb' as arguments, named as f,
  substitute self.is_localized for widget.is_localized.
  if values is None,
  if key_prefix is None,
  call the function force_str with raw data as an argument and substitute it for rawdata.
  append tuple containing two entries: k and integer 1 to options, for every k in FASTCGI_OPTIONS.
  define the method __init__, with 3 arguments: self, stream_or_string and unpacked dictionary options.
  if fset is not None,
  derive the class URLField from the base class CharField class.
  define the function smart_text, with s, encoding set to string 'utf-8', strings_only set to False, errors set to 'strict' as arguments.
  return changeset.
  default set to DEFAULT_DB_ALIAS and help set to a string:   'Nominates a database onto which the cache tables will be installed. Defaults to the "default" database.'   define the method handle with arguments self, unpacked list tablenames and unpacked dictionary options.
  call the method __init__ from the base class of the class PasswordInput, called with an argument attrs.
  define the method __delitem__ with 2 arguments: self and key.
  call the method self.setlistdefault with an argument key, append value to the result.
  if vary_on is None,
  from django.http.response import REASON_PHRASES as STATUS_CODE_TEXT  # NOQA into default name space.
  otherwise if first element of second row of args equals a string '3',
  join tempdir and guessed_filename into a file path, substitute it for guessed_path.
  substitute first end elements of s for f.
  if not, shutdown_message is an empty string.   if sys.platform equals string win32', substitute string 'CTRL-BREAK' for quit_command, if not substitute string 'CONTROL-C' for quit_command.
  substitute last for value under the PREV key of the link dictionary.
  for every name in MEDIA_TYPES,
  call the function func with 2 arguments: obj and unpacked list arg_vals, substitute the result for new_obj.
  call the function _generate_cache_key with request, request.method, headerlist, key_prefix as arguments, return the result.
  call the method self.set_cdata_mode with tag as the argument.
  call the function module_has_submodule with 2 arguments: package and module, return inverted boolean result.
  define the method save with arguments self, name and content.
  call the function save_m2m.
  define the method _set_size with arguments self and size.
  call the method self._start_relational_field with an argument field.
  call the method self.check,
  add model to models set.
  get 'value' attribute of the _active object, if it exists substitute it for t, if not t is None.
  derive the class AdminEmailHandler from logging.Handler base class.
  _get_files is getter function for FILES attribute of this class.
  call the method formats.localize_input with an argument value, return the result.
  do nothing.
  if middleware has an attribute 'process_response',
  do nothing
  call the method self.getlist with an argument key, return the result.
  define the method __text_cast with an argument self.
  data is an empty list.
  for every x in argset,
  call the method self._get_size_from_underlying_file, substitute the result for self._size.
  needs_multipart_form is boolean False.
  if self.localize is true,
  from django.template.base import TemplateSyntaxError, Library, Node, TextNode, token_kwargs and Variable into default namespace.
  call the method self._base_set with string 'set', key, value and timeout as arguments.
  join all of the results into a string separated by newline character, return the result.   define the method __str__ with an argument self.
  call the function phone2numeric with an argument value, return the result.
  sort all_files and return it.
  otherwise if pluralmatch is true,
  result of the m.group method called with an argument integer 0 converted into lowercase and t, return the result.   decorator function register.filter with an argument is_safe set to boolean True.
  return boolean False.
  define the function template_localtime with 2 arguments: value and use_tz set to None.
  define the method get_dump_object with arguments self and obj.
  filesize_number_format with result of division of bytes by MB as an argument, substitute the result for value.   otherwise if bytes is smaller than TB,
  otherwise if autoescape is true,
  __all__ is an list containing string 'SelectDateWidget'.
  import module re.
  if not,
  derive the NoArgsCommand class from the BaseCommand base class.
  break from the smallest enclosing loop.
  pos and last are integer 0.
  return an empty string.
  return nothing.
  try,
  join lineno_comment_map dictionary value under the comment_lineno_cache key into a string, separated with ' | ',
  define the method __init__ with 4 arguments: self, name, nodelist, parent set to None.
  call the function supports_color, if evaluates to False,
  return s.
  raise an ContextPopException.
  if self._pk_field equals self.fk,
  define the method __new__ with 4 arguments: cls, name, this_bases and d.
  d is an instance of class Decimal, created with result of the function force_text,
  delete attr.
  call the method render from the base class of the class PasswordInput, called with 3 arguments: name, value and attrs,
  if parse_until is true,
  if value is not equal self.empty_value,
  remove tmpdir directory.
  define the method __next__ with an argument self.
  for every k and v in return value of the extra_params.items method, join all results into a string separated by a string ', ',   substitute it for field_desc.   append string ')' to field_desc.
  define the function ifchanged with 2 arguments: parser and token.
  raise an exception DjingoUnicodeDecodeError, with s and list of arguments *args from object e, as the arguments.
  for every v in value, return the list of results.   call the method prepare_value the base class of the class ModelMultipleChoiceField, with an argument value, return the result.
  substitute value under the name key of the lib.filters dictionary for value under the name key of the temp_lib.filters dictionary.
  for every lib in builtins,
  define the method __iter__ with an argument self.
  self._leftover is an empty string.
  decorator stringfilter,
  return retval.
  increment visible_issue_count for length of issues.
  try,
  define the method cache_key with 3 arguments: self, template_name and template_dirs.
  convert fist p elements of locale to lowercase, append '_' to it,
  from django.utils import six into default name space.
  import module sys.
  FILTER_ARGUMENT_SEPARATOR, FILTER_SEPARATOR, SINGLE_BRACE_END, SINGLE_BRACE_START, TOKEN_BLOCK, TOKEN_COMMENT, TOKEN_TEXT, TOKEN_VAR,   TRANSLATOR_COMMENT_MARK, UNKNOWN_SOURCE, VARIABLE_ATTRIBUTE_SEPARATOR, VARIABLE_TAG_END, VARIABLE_TAG_START, filter_re and tag_re.   from django.template.base import ContextPopException, InvalidTemplateLibrary, TemplateDoesNotExist, TemplateEncodingError,
  convert the first element of the result to uppercase, append to it the rest of the result, substitute it for capfirst.   call the function allow_lazy with 3 arguments: capfirst and six.text_type.
  define the method _initialize_handlers with an argument self.
  return context.render_context.
  indent contain tabs number of tab character.
  self.path is an empty string.
  from __future__ import unicode_literals into default name space.
  from __future__ import unicode_literals into default name space.
  try,
  call the method self._base_set with string 'add', key, value and timeout as arguments, return the result.
  define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.
  database set to connection.alias, skip_validation set to boolean True, app_label set to app_label and hide_empty set to boolean True.   return created_models
  define the function partition with 2 arguments: predicate and values.
  call the method transaction.atomic with 2 arguments: using set to database, savepoint set to connection.features.can_rollback_ddl,
  if field.rel is true and field.rel is an instance of models.ManyToManyRel,
  define the method utcoffset with 2 arguments self and dt.
  if message is not None,
  define the function reverse with 6 arguments: viewname, urlconf set to None, args set to None, kwargs set to None,
  define the function _check_boolean_field_default_value with app_config set to None and kwargs dictionary as arguments.
  call the method field.hidden_widget, substitute the result for field.hidden_widget.
  form_class_attrs is a dictionary with 2 entries: Meta for 'Meta' and formfield_callback for 'formfield_callback'.
  decorator function register.filter with an argument is_safe set to boolean True.
  for 'maxSpare', value under the key 'minspare' of options dictionary converted to an integer for 'minSpare',   and value under the key 'maxchildren' of options dictionary converted to an integer, for 'maxThreads'.   if not,
  call the function sanitize_address with arguments email_message.from_email and email_message.encoding, substitute the result for from_email.
  define the method __repr__ with an argument self.
  if not,
  from django.db.migrations.autodetector import MigrationAutodetector into default name space.
  call the method MIMEText.__init__ with 4 arguments: self, text, subtype and None.
  try,
  derive class LimitedStream from the object base class, making it a new-style class.
  if site is contained in sites1,
  if length of words is greater than length,
  if number is an instance of int type.
  use the result as the argument for the call to the sql.extend method.   if self.verbosity is greater or equal than integer 1 and sql is true,
  from __future__ import unicode_literals into default name space.
  call the method self.configurator.convert with an argument value, substitute the result for result.
  try,
  "or the 'exclude' attribute is prohibited; form %s needs updating.", where '%s' is replaced with name.   if opts.fields equals ALL_FIELDS,
  break from the smallest enclosing loop execution.
  call the function warnings.warn with 3 arguments: string "`%s.%s` is deprecated, use `%s` instead.",
  write content to new_file file.
  where '%s' is replaced with top_dir.   call the function handle_extensions with 2 arguments: value under the 'extensions' key of the options dictionary,
  raise CommandError exception with msg as argument.
  substitute input_formats for self.input_formats.
  define the method __init__ with 4 arguments: self, data set to None, files set to None, auto_id is an string 'id_%s', prefix is None,
  call the method self.characters with an argument contents.
  if not,
  try,
  register.tag decorator,
  from django.conf import settings into default namespace.
  define the function all_locale_paths.
  derive the class NowNode from Node base class.
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  if signal has an attribute 'SIGTTOU',
  append the result to the '\n' string, write it to self.stdout.   finally perform,
  return string '1'.
  call the method loader.get_template with an argument template, return the result.
  call the method self.build_attrs with an argument attrs, substitute the result for final_attrs.
  from django.utils.six.moves.urllib.request import urlretrieve into default name space.
  substitute substitute TextInput for widget.
  if mw_instance has an attribute named 'process_template_response'.
  if var starts with '_(' and var ends with ')',
  self.changed_objects is an empty list.
  from __future__ import absolute_import into default name space.
  delete X.
  safe_data is an empty dictionary.
  server_address is a tuple containing 2 initial elements: addr and port.
  if level is true,
  define the method write_message with arguments self and message.
  if inverse_match is not None,
  if self.asvar is true,
  set self.__starttag_text to None.
  decorator register with Tags.models as an argument.
  return plural_suffix.
  if 'locale' is a directory,
  define the method url with arguments self and name.
  if not,
  define the method __reduce__ with an argument self.
  if GET_override is not None, or otherwise generated with the call to the function pformat with an argument request.GET.   if Exception exception is caught,
  define the method __dir__ with an argument self.
  if not,
  with an argument i, for 'prefix' and self.error_class for 'error_class'.   if self.is_bound is true,
  zfile is an instance of GzipFile class, created with 3 arguments: mode set to string 'wb', compresslevel set to integer 6,
  return endpos.
  define the method root_attributes with an argument self.
  call the method f.value_from_object with an argument instance, substitute the result for value under the f.name key of the data dictionary.
  import module sys.
  substitute i-th element of self.forms for form.
  call the method validators.RegexValidator with an argument regex set to regex, substitute it for self._regex_validator.
  call the self.xml.addQuickElement method with 2 arguments: string 'object' and attr dictionary containing 1 entry:
  call the method __init__ from the base class of the class RadioChoiceInput, with 2 arguments: unpacked list args,
  for every func in self.response_fixes,
  import module sys.
  if not,
  call the method self.find_template_cache.clear.
  raise an ValueError exception with an argument string 'Unable to configure root logger: %s' formated with e.
  define the method __init__ with self and limit_value as arguments.
  obj._constructor_args is a tuple with 2 elements: args and kwargs.
  raise an TemplateDoesNotExist exception with an argument, elements of not_found joined into a string, separated with ', '
  called with an argument view_func.   define the function _wrapped_view with 3 arguments: request, unpacked list args and unpacked dictionary kwargs.
  raise a exception of ComandError class with string "More than one migration matches '%s' in app '%s'. Please be more specific.",
  raise an NotImplementedError exception with argument string 'subclasses of Storage must provide an exists() method'.
  if value under the 'indent' key of the self.options dictionary is true,
  assign StringIO.StringIO to StringIO and BytesIO.
  call the method s.decode with encoding and errors as the arguments, substitute the result for s.
  close file file.
  substitute the limit_value for self.limit_value.
  get self.to_field attribute of self.parent_instance, substitute it for orig.
  set attr.name attribute of Module_six_moves_urllib_robotparser object to attr.
  from django.conf import settings into default name space.
  for every key in self.keyOrder,
  call the method datetime.datetime.strptime with 2 arguments: result of the function force_str called with an argument value,
  from django.forms.fields import IntegerField and BooleanField into default name space.
  if close is True,
  do nothing.
  call the method base64.b64encode with argument pickled, substitute the result for b64encoded.
  if initial is None,
  call the function import_module with an argument taglib_module, substitute the result for mod.
  open '/dev/null' file in read mode, substitute the result for si.
  try,
  if cache_timeout is lesser than integer 0,
  if token.contents doesn not equals a string 'endif', raise an AssertionError exception,
  define the get_many method with self class instance, keys and version set to None as arguments.
  value under the ORDERING_FIELD_NAME key of the form.fields is an instance of IntegerField class, created with 2 arguments:
  if self.instance.pk is not None,
  call the method base.build_instance with arguments Model, data and db, substitute the result for obj.
  define the method clear with self class instance as the argument,
  status_code is an integer 200.
  call the function ugettext with an argument string "Please correct the duplicate data for %(field)s.",
  while i is lesser than num_existing and first pflen elements of i-th element of existing equals prefixed,
  define the method __init__ with 3 arguments: self, attrs set to None and render_value set to boolean False.
  raise an CommandError exception, with an arguent: string "App '%s' has migrations. Only the sqlmigrate and sqlflush commands can be used when an app has migrations.", where '%s' is replaced for app_config.label.
  call the function conf.copy, substitute it for params.
  substitute new_result for result.
  calculate length of provided and increment it by one, substitute the result for plen.
  from django.db import connections,  DEFAULT_DB_ALIAS and migrations into default name space.
  define the method __init__ with 4 arguments: self, context, unpacked list args and unpacked dictionary kwargs.
  templatetags_modules_candidates is an list with an argument string 'django.templatetags'.
  call the __add__ method with an arguments rhs from the base class of the class SafeBytes, substitute the result for t.
  while bit doesnt end with sential,
  from io import BytesIO into default name space.
  if base has an attribute 'base_fields'.
  import code.
  called with an argument item.   call the method self.add_item_elements with 2 arguments: handler and item.
  if NotImplementedError exception,
  derive the class ViewDoesNotExist from the Exception base class.
  if not,
  call the method self.make_key with key and version set to version as arguments, substitute the result for key.
  append an empty string to list hextets.
  call the method parser.parse with an argument tuple with an element string 'endautoescape', substitute the result for nodelist.
  call the method self.path with argument name, substitute the result for full_path.
  if not,
  convert provided into a list and substitute it for provided.
  read 4 bytes from file f and store it in sample.
  from __future__ import unicode_literals into default name space.
  if csrf_token is not None,
  define the method errors with an argument self.
  append list containing string '--no-location' to self.xgettext_options.
  zip elements of inner_result and inner_args into a list of tuples, for every i_item and i_args in the result,
  substitute integers 0, 1, 2 and 3 for PREV, NEXT, KEY and RESULT, respectivley.
  property decorator,
  update fields dictionary with new_class.declared_fields.
  define the function unlock with argument f.
  requires_system_checks is boolean False.
  cls is None.
  for i in self._ordering append to a list value under the first element of i key of the self.forms dictionary, return resulting list.
  define the method __repr__ with an argument self.
  and integer 60, substitute the result for timezone.   divide timezone by integer 60, substitute the quotient of the division for hour and reminder for minute.
  call the function warnings.warn with 3 arguments: string 'Reversing by dotted path is deprecated (%s).', with '%s' replaced with
  return out.
  define the method set with 5 arguments: self, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
  delete the value under key key of self._cache dictionary.
  raise an exception.
  define the method close with argument self.
  if return value of the self.is_secure method is true and server_port is not equal to string '443',
  call the function getattr with request, string 'LANGUAGE_CODE' and function get_language as arguments,
  if timeout equals to DEFAULT_TIMEOUT,
  raise a SerializerDoesNotExist exception with an argument format.
  get the type of form object, return an instance of resulting class created with 3 arguments: class_name, tuple with an element form,
  call the method self._start_relational_field with the argument field.
  try,
  substitute prefix for self.prefix.
  return value under the key key of d dictionary.
  if not,
  return attrs.
  if extra_context is true, substitute it for self.extra_context, if not self.extra_context is an empty dictionary.
  substitute kwargs for self.kwargs.
  from django.conf import settings into default name space.
  if context is an instance of Context class.
  decorator function register.filter with an argument is_safe set to boolean True.
  define the function length_is with 2 arguments value and arg.
  call the function ungettext_lazy with 3 arguments: string 'Ensure this value has at most %(limit_value)d character (it has %(show_value)d),
  default set to boolean False and help set to a string 'Display all settings, regardless of their value. Default values are prefixed by "###".'   define the method handle with arguments self and unpacked dictionary options.
  define the function _get_model with an argument model_identifier.
  if not,
  if string '()' is contained in config,
  get config dictionary element under 'datefmt' key, if it exists substitute it for dfmt, if not, dfmt is None.
  call the make_msgid function, substitute it for value under the 'Message-ID' key of msg dictionary.
  call the function escape with an argument text, return the result.
  define the method add_error with 3 arguments: self, field and errors.
  call the function fcntl.flock with return value of the _fd(f) function and flags as arguments, substitute the result for ret.
  if not formfield_callback is None.   call the method __new__ from the base class of the class ModelFormMetaclass, with 4 arguments: mcs, name, bases and attrs,
  return boolean True.
  define the method _create_message with arguments self and msg.
  replace every occurrence of '\t' in s with '\\t'.
  define the method close with argument self.
  remove item from self dictionary.
  call the method s.get_data, return the result.
  call the method stream.unget with last rollback elements of chunk as an argument.
  substitute post for self._post.
  read chunk_size bytes from file and store it in data.
  call the method handler.addQuickElement with 2 arguments: string 'published' and result of the function rfc3339_date,
  skip this loop iteration.
  if StandardError, renamed to e, exception is caught,
  define the function get_key_func with argument key_func.
  unpack a dictionary with an entry id_for_label for 'for', map it through attrs mapping if attrs is true,
  substitute stream_or_string for self.stream.
  call the function allow_lazy with 2 arguments: get_valid_filename and six.text_type, substitute the result for get_valid_filename.
  define the method value with an argument self.
  define the function templatize with 2 arguments: src and origin set to None.
  if response has an attribute 'render' and response.render is a callable object,
  ' ' for 's', 'x' for 'S', 'x' for 'W', '!' for 'W' and None for 'Z'.   derive the class Choice from list base class.
  return an string "<%s: %r>", where '%s' is replaced with self.__class__.__name__ and self.var, respectively.
  substitute value under the name key for bf.
  derive the class SerializationError from the Exception base class.
  delete attr.
  if Exception, renamed to e, exception is caught,
  call the method validators.MinLengthValidator with min_length converted into an integer, append the result to list self.validators.
  class_types is a tuple with 2 elements: type and types.ClassType.
  if StopIteration exception,
  if settings.SECURE_PROXY_SSL_HEADER is true,
  define the method a with an argument self.
  yield line.
  remove values under the keys 'name' and 'directory' of the options dictionary and substitute it for app_name and target, respectively.
  nodelist_false is an instance of NodeList.
  divide 10 to the power of 400 by 10 to the power of 400, substitute the result for nan.
  is_compressed is boolean False.
  call the function get_supported_language_variant with an argument lang_code, return the result.
  where '%s' is replaced with parse_until elements joined into a string, separated with ', '.   define the method compile_filter_error with 3 arguments: self, token and e.
  substitute '%s' from string "<%s: %s (%s)>" with self.__class__.__name__, self.name and self.content_type, respectively, use it as an argument for the call to the function force_str, return the result.
  substitute the second element of result for current_expires.
  define the function csrf with an argument request.
  if key is not contained in self,
  append filename to filenames.
  import module zipfile.
  raise an ImportError exception.
  if value under the key 'ATOMIC_REQUESTS of db.settings_dic dictionary is True and db.alias is not present in the non_atomic_requests,
  if six.PY2 is true and path is not an instance of six.text_type type,
  call the method self.args_check with 3 arguments: filter_name, filter_func and args.
  define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options.
  call the method date.weekday, use the result as an key to obtain the value from the days dictionary, substitute it for dow.
  self.resolver_match is None.
  append ext to guessed_filename.
  substitute self for result.parent.
  substitute the result for final_attrs dictionary value under the 'value' key.   call the function format_html with 2 arguments: string '<input{0} />',
  if converter is true,
  call the method self.strptime with arguments value and format, return the result.
  convert tag to lowercase if it is not equal to self.cdata_tag,
  if ValueError or TypeError exceptions are caught,
  if settings.SETTINGS_MODULE is true,
  if self.asvar is None,
  endless loop,
  add params to extra_params dictionary.
  raise an TemplateSyntaxError exception with an argument string "Malformed arguments to url tag".
  do nothing
  define the method content with an argument self.
  define the method create_var with 2 arguments: self and value.
  'may be ambiguous or it may not exist.', substitute the result for message.   params is an dictionary containing 2 initial entries: value for 'datetime' and current_timezone for 'current_timezone'.
  call the function six.reraise with 3 arguments: DeserializationError, return value of the DeserializationError called with an argument e,
  parent is a tuple with 2 arguments: form.Meta and object.
  call the function self.path with argument name, use the result as an argument for the call to the function os.path.getmtime,
  calculate length of chunk modulo integer 4, substitute the result for over_bytes.
  if KeyError and TypeError exceptions are caught,
  join rendered_widgets into a string, return it.
  substitute the result for value under the NON_FIELD_ERRORS key of the form._errors dictionary.   for every field in unique_check,
  if cached is not None,
  if os.name equals string 'posix',
  substitute environ for self.environ.
  if code is not None,
  define the method next_page_number with an argument self.
  define the method eval with 2 arguments: self and context.
  append a string 'This field type is a guess.' to field_notes.
  define the method _delete with arguments self and key.
  return s.
  call the function os.walk with 3 arguments: root, topdown set to boolean True, followlinks set to self.symlinks,
  if max_num is None,
  for every cmatch in cmatches,
  from argparse import ArgumentParser into default name space.
  call the method self.__prepare_class__.
  call the method block_context.push with 2 arguments: self.name and push.
  if value is contained in self.empty_values,
  call the method cursor.execute with string "UPDATE %s SET value = %%s, expires = %%s WHERE cache_key = %%s" as argument,
  if tags is not None.
  get the value under the key 'locale' of the options dictionary, substitute it for locale.
  if widgets is true and f.name is contained in widgets,
  read one line from self file stream, substitute the result for buf.
  try,
  value under the klass key of the cls.__dispatch dictionary is an empty dictionary.
  convert to integer value of dictionary cc under the key 'max-age',
  define the method end_object with arguments self and obj.
  for every tok in rules,
  if values under "author_name" and "author_email" keys of the item dictionary are both true,
  use tag as an argument to call the iterator method next, substitute the result for invalid_tag.   raise an CommandError exception with an argument string 'There is no system check with the "%s" tag.', where '%s' is replaced with invalid_tag.
  if e.is_serious method evaluates to true, call the function color_style, on the result call the method ERROR with result of the  force_str called with an argument e, if not call the function color_style on the result call the method ERROR with result of the  force_str called with an argument e, for every e in issues, formatted is a tuple containing the previous result.
  return other_dict.
  dest set to string 'tags' and help set to string 'Run only checks labeled with given tag.'.   call the method parser.add_argument with 4 arguments: string '--list-tags', action set to string 'store_true',
  if old_style_list is false,
  define the function static with an argument request.
  try,
  if not,
  call the method self.fields.items, for every name and field in result,
  append string " You may need to add %r to ALLOWED_HOSTS." to msg, where '%s' is replaced with domain.
  raise an DTDForbidden exception with arguments name, sysid and pubid.
  call the ops.quote_name method with argument self._table on the value under the db key of connections dictionary, substitute the result for table.
  if self.form.is_bound is false,
  define the __init__ method with argument self.
  return nothing.
  increment stats dictionary value under the HITS key by integer 1.
  and '%(error)s' is replaced with return value of the force_text function called with an argument e,   extend the top_errors with the result.   call the function six.text_type with an argument bf, append the result to hidden_fields.
  call the method imatch.group with an argument integer 2, use the result as an argument for the call to the method context_re.match,
  try,
  call the method self.next_token, substitute the result for self.current_token.
  define the function _get_foreign_key with 4 arguments: parent_model, model, fk_name set to None and can_fail set to boolean False.
  from django.utils.encoding import force_text and iri_to_uri into default name space.
  decrement factor by one.
  for every app_label and app_migrations in result of the method changes.items,
  if not,
  substitute force_text for force_str.
  call the executor.loader.get_migration_by_prefix with app_label and migration_name with arguments, substitute the result fr migration.
  define the function trim_url with 2 arguments: x and limit set to trim_url_limit.
  return saved_instances.
  if '.' is not contained in str_number,
  move integer 1 left for 40 bits, substitute the result for TB.
  open filename file in write mode, with the file descriptor renamed to outfile, perform,
  derive the class CheckboxInput from the Widget base class.
  substitute _itervalues for values.
  evaluate function force_bytes with path as the argument, replace all of the occurancies of the "\\" with "/" in the resulting string,
  import threading module.
  call the method token_string.find with an argument TRANSLATOR_COMMENT_MARK, if it evaluates to true,
  derive the class Command from the BaseCommand class.
  call the function check_for_language with an argument lang, if it evaluates to false,
  if not,
  try,
  from django.utils.module_loading import import_string into default name space.
  raise an TemplateSyntaxError exception with an argument string, "'%s' tag takes at least 2 arguments and the second last argument
  if not,
  substitute inverse_match for self.inverse_match.
  return result.
  call the method self.make_key with key and version set to version as arguments, substitute the result for key.
  if ValueError exception is caught,
  define the method __getitem__ with 2 arguments: self and idx.
  if value is None,
  call the method self.fields.items, for every name and field in return value,
  substitute the result for args and kwargs.   return an instance of AssignmentNode class created with 4 arguments: takes_context, args, kwargs and target_var.
  return boolean True.
  return boolean False.
  return self._fname.
  if csrf_token equals string 'NOTPROVIDED',
  skip this loop iteration.
  get the value under the 'database' key of the options dictionary, substitute the result for database.
  if not,
  return nothing.
  return boolean True.
  where '%s' is replaced with library_name and elements of tried_modules joined into a string, separated by ','.   return lib.
  define the method add_arguments with self and parser as arguments.
  call the function datetime.now, on the result call the method strftime with an argument string '%B %d, %Y - %X', substitute the result for now.
  get the value under the name key of the self dictionary, yield it as the return value of the generator.
  raise an ImproperlyConfigured exception with argument string 'Could not write to directory: %s', replace '%s' with self.file_path.
  if template is an instance of list or tuple types,
  try,
  return s.
  self._stream is a class instance of a LimitedStream class, initialized with self.environ dictionary value under the 'wsgi.input' key,
  call the method bmatch.group with an argument integer 1, use the result as an argument for the call to the function context_re.match,
  import module sys.
  define the function smart_urlquote with an argument url.
  define the method resolve with 2 arguments: self and context.
  call the function os.path.realpath with an argument d, use the result as an argument for the call to the function os.path.abspath,
  if self.scheme equals to string 'https', return boolean True, otherwise return boolean False.
  get is a string '<could not parse>'.
  skip this loop iteration.
  substitute args for key.
  escaped is boolean True.
  from django.forms.utils import ErrorList into default name space.
  with the result renamed to fp, perform the following:   read file fp and substitute the result for msgs.
  _supported is None.
  internal_use_only is a boolean False.
  if qs._result_cache is not None,
  do nothing.
  call the method urlresolvers.set_urlconf with urlconf as the argument.
  divide value by max_value, multiply the result with max_width, substitute it for ratio.
  call the logger.warning method with string 'Bad Request (UnicodeDecodeError)', exec_info set to sys.exec_info() and dictionary extra
  if not,
  define the method render with 2 arguments: self and context.
  do nothing.
  for every pk in value,
  call the method parser.add_argument with an argument string '--settings'.
  define the method process with 3 arguments: self, command and domain.
  return self.connection.
  increment num_args by one.
  if not,
  define compile_messages method with self class instance and locations as a arguments.
  append string '%%(%s)s' to plural, where '%s' is replaced with t.contents.
  call the function force_str with 3 arguments: string "<Text Node: '%s'>", with '%s' replaced with first 25 elements of self.s string,
  if func_name is false,
  remove key element from self.keyOrder dictionary.
  substitute _iteritems for items.
  substitute complain for pop.
  if first element of sys.version_info equals integer 3, PY3 is boolean True, otherwise it is boolean False.
  define the method __init__ with 2 arguments: self and variables.
  define the method _render with 2 arguments self and context.
  if failures is true,
  yaml import CSafeDumper as SafeDumper into default name space.
  define the function make_origin with 4 arguments: display_name, loader, name and dirs.
  decorator function register.filter with an argument is_safe set to boolean False.
  substitute result for value under key key of self dictionary.
  yield a tuple with 2 elements: tok.name and toktext.
  define the method_mark_post_parse_error with an argument self.
  if not,
  evaluate the method s.decode with string 'utf-8' and errors as the arguments,
  and help set to a string 'Nominates a database to print the SQL for. Defaults to the "default" database.'.   define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.
  if not,
  WARNING is integer 30.
  substitute arg converted into an integer for length.
  substitute nodelist for self.nodelist.
  break from the loop execution,
  return the value under the language_code key of the self._reverse_dict dictionary.
  and csrf_token, return the result.   if not,
  if not,
  if value.__traceback__ is not tb,
  if sys.platform equals to string "win32",
  if PY3 is true,
  call the function local, substitute the result for _active.
  raise an NotImplementedError with argument string 'subclasses of FileUploadHandler must provide a receive_data_chunk() method'.
  call the function sql_destroy_indexes with 3 arguments: app_config, self.style and connection, substitute the result for statements.
  join elements of c into a string, return it.
  for every date_check in all_date_checks,
  if endbmatch is true,
  self.models is an empty set.
  substitute propagate for logger.propagate.
  of the options dictionary and value under the 'port' key of the options dictionary converted into an integer.   if value under the 'socket' key of the options dictionary is true and values under the 'host' and 'port' keys of the options dictionary are false,
  for every d in self.dicts,
  if Exception exception is caught.
  if data is true, substitute list created from elements of data, substitute it for self.keyOrder, otherwise self.keyOrder is an empty list.
  convert text without first element to hexadecimal integer, substitute it for c.
  take the first i elements of string p, strip the whitespaces from the both sides, convert it to lowercase and apply on it the method,
  if self.alternatives is true,
  define the method _iteritems with an argument self.
  filter_raw_string is a raw string "^(?P<constant>%(constant)s)|^(?P<var>[%(var_chars)s]+|%(num)s)| (?:\s*%(filter_sep)s\s*
  if app_config.models_module is None or app_config is contained in excluded_apps
  call the method archive.extract with arguments: filename and tempdir.
  if self.regex is not an instance of six.string_types,
  get_language_bidi is lambda function returning boolean True if settings.LANGUAGE_CODE is contained in settings.LANGUAGES_BIDI.
  call the method base.DeserializedObject with arguments obj and m2m_data, return the result.
  if code is not None
   with self.mutex perform,
  format with it a string '# %s', write it to out.   comment_lineno_cache is None,
  return self.__name.
  define the method from_dict with argument cls and file_dict.
  raise an VariableDoesNotExist exception with an argument string "Failed lookup for key [%s] in %r",
  define the method handle_m2m_field with self, obj and field arguments.
  if ValueError exception is caught,
  define the function i18n with an argument request.
  call the function _ with an argument string 'Ensure this value is less than or equal to %(limit_value)s.', substitute the result for message.
  define the method _construct_form with 3 arguments: self, i and unpacked dictionary kwargs.
  call the function flatten_result with an argument result, unpack the resulting list and zip it in the list of tuples, return the result.
  derive the class MultiPartParserError from the Exception base class.
  define the method as_table with an argument self.
  call the function warnings.warn with 3 arguments: string "get_declared_fields is deprecated and will be removed in Django 1.9.",
  write errors to self.stdout.
  raise an ValueError exception with an argument string 'Unable to convert %r at %r' formated with value and rest.
  otherwise if second element of args equals a string '404',
  return nothing.
  if not,
  substitute message.message, message.code, message.params for message, code and params, respectively.
  get the value under the key 'interactive' of options dictionary, substitute it for interactive.
  increment msg_count by one.
  call the self.get method with k and version set to version as arguments, substitute the result for val.
  format the string  '<p>%s</p>' with the result, for every p in paras, substitute list of results for paras.   join elements of paras into a string separated with '\n\n', return the result.
  substitute _iterlists for lists.
  raise an CommandError exception with an argument string "Django doesn't know which syntax to use for your SQL statements,\n"
  year_val and month_val and day_val are set to None.
  define the method resolve with 2 arguments: self and s.
  call the method self.z, substitute the result for day_of_year.
  from __future__ import unicode_literals into default name space.
  if not,
  and unpacked dictionary kwargs, return the result.   define the function assertRaisesRegex with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  from django.conf import settings into default name space.
  call the method cursor.execute with string "SELECT cache_key, expires FROM %s WHERE cache_key = %%s" as argument,
  if ImproperlyConfigured renamed to exc, exception is caught,
  remove the first element from self.command_stack, assign the result to command and source, respectively.
  call the function func with 2 arguments: unpacked list resolved_args and unpacked dictionary resolved_kwargs, return it.
  if self.to_field is true,
  from django.core import serializers into default name space.
  return name.
  line is an empty string.
  return expanded_template.
  call the method _ExpatParser.__init__ with arguments self, unpacked list args and unpacked dictionary kwargs.
  call the method cursor.execute with string "SELECT COUNT(*) FROM %s" as argument, substitute the '%s' with table.
  perform bitwise exclusive OR on 2 operands integer representation of x and integer representation of y,
  call the method connection.introspection.sequence_list if reset_sequences is true, substitute the result for seqs, if not, seqs is an empty tuple.
  sites is an empty list.
  help is a string "Prints the CREATE TABLE SQL statements for the given app name(s).".
  call the method token.split_contents, substitute the result for bits.
  from django.db import models and router into default name space.
  invert the ordering of elements of int_part_gd, substitute it for int_part.
  return an empty dictionary.
  from django.utils.jslex import prepare_js_for_gettext into default name space.
  substitute length of chunk for chunk_length.
  if self.use_ipv6 is true and socket.has_ipv6 is false,
  FILE is a file".
  register.tag decorator,
  set attrvalue to None.
  substitute self.fk.name for name.
  call the function dec with an argument func, return the result.
  call the method type.__new__ with 4 arguments: cls, name, empty tuple and d, return the result.
  otherwise substitute args for key.   with lock,
  call the method m.end, slice list rest from previous result as starting index to the end, substitute the result for rest.
  define the method __nonzero__ with an argument self.
  substitute flags for self.flags.
  dirs is an empty dictionary.
  from django.utils import six into default name space.
  split path in two parts by '\\' string, return the result.
  try,
  if size is None,
  get the value under the lang_code key of the LANG_INFO dictionary, return it.
  call the method __delitem__ from the base class of the QueryDict class, with an argument key.
  from django.core.management.base import CommandError and BaseCommand into default name space.
  define the method external_entity_ref_handler with arguments self, context, base, sysid and pubid.
  raise an exception.
  return value.
  timeout is a integer -1.
  end_index is None.
  increment the offset by the length of self.__starttag_text.
  if not,
  derive the class Command from the BaseCommand class.
  call the method formats.sanitize_separators with an argument value, substitute the result for value.
  return nothing.
  return result.
  call the get_bytes_from_wsgi function with environ, string 'PATH_INFO' and empty strings as arguments, substitute the result for path_info.
  do nothing.
  call the method get_unique_error_message from the base class of the class BaseInlineFormSet, with an argument unique_check, return the result.
  if node is not an instance of TextNode,
  append value to parts.
  concatenate CheckCommand.help to string 'Deprecated. Use "check" command instead. ', substitute it for help.
  if KeyError, IndexError and AttributeError exception is caught,
  if the value under the 'bindAddress' key of the wsgi_opts dictionary is not None, set daemonize to boolean True, if not, set it to boolean False.
  created with an argument constant_arg, append it to args.   otherwise if var_arg is true,
  if AttributeError exception is caught,
  return the length of self.children.
  define the method add with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
  import module errno.
  call the function sself.__cast with an argument self, divide the result with rhs and return the reminder of the division.
  from io import BytesIO into default name space.
  set name attribute of self._wrapped object to value.
  decorator stringfilter,
  call the method add_fields from the base class of the class BaseInlineFormSet, with 2 arguments: form and index.
  call the function escape with an argument word, substitute the result for i-th element of words.
  add self.buffer and self._read_limited method return value together, store it in result.
  append decimals to parts.
  define the method add_post_render_callback with 2 arguments: self and callback.
  if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
  if app_label is not contained in executor.loader.migrated_apps,
  self.pos is integer 0.
  from django.core import checks into default name space.
  substitute value under the self.token_type key of the TOKEN_MAPPING dictionary for token_name.
  compile regex from a string '\\(.)', substitute it for re_escaped.
  call the method self.importer with an argument used, substitute the result for found.
  if in_tag and is not contained in self.verbatim,
  call the self.start_object with an argument obj.
  if result is not None,
  define the __getitem__ method with self and alias arguments.
  call the self.compare method with arguments cleaned and self.limit_value, if it evaluates to true,
  return string 'th'.
  'resent-to', 'resent-cc' and 'resent-bcc'.   define the function forbid_multi_line_headers with arguments: name, val and encoding.
  from django.utils.html import avoid_wrapping into default name space.
  try,
  define the function time_format with 2 arguments: value and format_string.
  define the method __len__ with an argument self.
  return path.
  import module os.
  define the method is_url with arguments self and template.
  call the method validators.MaxValueValidator with max_value converted into an integer, append the result to list self.validators.
  call the method self.max_expr.resolve with an argument context, substitute the result for max_value.
  call the method app_config.get_models, substitute the result fr model_list.
  call the method HTMLParser.__init__ with an argument self.
  substitute None for pickled.
  if not self.error_messages is None.   derive the class ModelFormMetaclass from the DeclarativeFieldsMetaclass base class.
  increment weight by integer 2.
  define the method configure_handler with 2 arguments: self and config.
  if not,
  create the object WSGIServer with 2 arguments: get_internal_wsgi_application return value and unpacked dictionary wsgi_opts, call the method run on it.
  call the method self.validate_key with key as argument.
  define the method __init__ with an argument self.
  none_value is a tuple containing 2 elements: integer 0 and string '---'.
  substitute complain for reverse.
  try,
  _fields_ is a list containing 4 tuples: first tuple contains: string 'Internal' and ULONG_PTR,
  define the method _has_changed with 3 arguments: self, initial and data.
  define the method validate with arguments self and value.
  if keys is true,
  if self.pk_field,
  if s is an instance of SafeData or EscapeData,
  append rel_model to deps.
  for every template_dir in template_dirs,
  if self.cdata_tag is not None,
  for every middleware_path in settings.MIDDLEWARE_CLASSES:
  return the string '<Page %s of %s>', with occurrences of '%s' replaced by self.number and self.paginator.num_pages, respectively.
  convert num to an integer, substitute it for length.
  for every node in self.nodelist,
  find first index of occurrence of character '-' in locale, substitute it for p.
  if ImportError exception is caught,
  is greater than self.max_num, or if value under the TOTAL_FORM_COUNT key of the self.management_form.cleaned_data dictionary,   is grater than self.absolute_max,   raise an ValidationError with 2 arguments: return value of the function ungettext with 3 arguments:
  for p in self.ignore_patterns if p ends with dir_suffix take sliced list p from the start,
  from django.utils.encoding import force_str and force_text into default name space.
  if scheme is not contained in self.schemes,
  if limit is None or length of x is lesser than or equal to limit,
  if parser doesnt have an '_namedCycleNodes' attribute,
  return directories and files.
  MONTHS is an dictionary with 12 entries: result of the call to the function _ with an argument string 'January' for 1,
  format self.day_field string with name, use it as the key for the data dictionary, substitute the result for d.
  call the method __init__ from the base class of the class RendererMixin, with 2 arguments: unpacked list args,
  substitute parent_name for self.parent_name.
  and ignorenonexistent set to self.ignore, substitute the result for objects.   for every obj in objects,
  call the method e.encode with an argument string "latin-1".
  author_name set to None, author_link set to None, subtitle set to None, categories set to None, feed_url set to None,   feed_copyright set to None, feed_guid set to None, ttl set to None and unpacked dictionary kwargs.   to_unicode is an lambda function with an argument s, result is the result of the function force_text,
  and a result of the method __repr__ called from instance of base class of the MultiValueDict class.   define the method __getitem__ with 2 arguments: self and key.
  call the method errors.extend with argument new_errors.
  try,
  alter_sql is an empty list.
  create a tuple out of types of v, for every k and v in sorted_items, extend key tuple with the result.
  if ValueError exception is caught,
  replace '%s' in string "%s; charset=%s" with settings.DEFAULT_CONTENT_TYPE and self._charset, substitute it for content_type.
  try,
  call the method nodelist.get_nodes_by_type with an argument ExtendsNode, if it evaluates to true,
  call the function CheckRegistry, substitute the result for registry.
  call the function open_method with arguments: fixture_file and mode, substitute the result for fixture.
  substitute the regex_compiled for value under the language_code key of the self._regex_dict dictionary.
  return result.
  derive the class SignatureExpired from the BadSignature base class.
  if proto is greater than or equal to integer 2,
  output is an empty list.
  define the function to_current_timezone with an argument value.
  format string hex_format_string with x, call the method encode on the result with an argument string 'ascii',
  decorator function register.filter with 2 arguments expects_localtime set to boolean True and is_safe set to boolean False.
  for every part in plural,
  raise CommandError with an argument string 'Unknown application: %s', where '%s' is replaced with app_label.
  substitute code for self.code.
  update object_data dictionary with initial.
  found is boolean False.
  if self.file has an attribute 'tell' and an attribute 'seek',
  define the method __init__ with 3 arguments: self, setting and nodelist.
  and number set to number, return the result.   define the function npgettext_lazy with 4 arguments: context, singular, plural and number set to None.
  get 'exec' attribute from the moves.builtins object, substitute it for exec_.
  import module warnings.
  url is a string 'mailto:%s@%s' formated with local and domain.
  for every i in range of integers from 0 to length of result, not included,
  join hidden_fields elements into a string, without separation, substitute the result for str_hidden.
  data is an empty dictionary.
  return the absolute path of file path filepath, substitute it for filepath.
  for every i and row in enumerated result of the method connection.introspection.get_table_description called with arguments: cursor and table_name,
  increment self.position by length of output.
  try,
  guid_attrs is an empty dictionary.
  EventHandler.modified_code is FILE_MODIFIED.
  define the method _isdst with 2 arguments self and dt.
  define the method loaders with an argument self.
  if extra_attrs is true,
  divide since by seconds, store the floored result in count.
  define the function dec with an argument func.
  get the directory name of filename, substitute it for dirname.
  define the method send with arguments self and fail_silently set to boolean False.
  call the method f.formfield with an argument, unpacked dictionary kwargs, substitute the result for formfield.
  if flags is not None,
  call the function settings.is_overridden with argument string 'ADMINS', if it evaluates to boolean True,
  call the self.style.MIGRATE_HEADING method with string "Running migrations:" as an argument, use the result as an argument for the call to the self.stdout.write method.
  for every name and value in items of props dictionary,
  define the method has_changed with arguments self, initial and data.
  define the method __init__ with 2 arguments: self and callback.
  append a tuple with 2 elements: condition and nodelist to conditions_nodelists.
  call the function datetime.datetime with 3 arguments, d.year, d.month and d.day, substitute the result for d.
  if not,
  consume_next is boolean False.
  if not,
  call the method self._create_alternatives with an argument msg, use it as an argument for the call to the self._create_attachments method, return the result.
  if string 'forloop' is contained in context,
  property decorator,
  call the function six.text_type with length of lines as an argument,
  get_format called with an argument string 'TIME_INPUT_FORMATS', substitute the result for format.   call the method value.strftime with an argument format, return the result.
  call the function reset_translations.
  property decorator,
  raise an TypeError exception with an argument string 'In order to allow non-dict objects to be serialized set the safe parameter to False'.
  from functools import wraps into default name space.
  if sign is contained in self.digits,
  breaks from the smallest enclosing loop.
  call the method connection.ops.prepare_sql_script with 2 arguments: return value of the function fp.read,
  call the method six.iteritems with an argument kwarg, convert the result into a list,
  if age is greater than max_age,
  substitute io.StringIO for StringIO.
  continue with the next iteration of the for loop.
  call the method self.add_handlers with 2 arguments: logger and handlers.
  define the method _text_words with 3 arguments: self, length and truncate.
  convert to strings and concatenate context, CONTEXT_SEPARATOR and message, substitute the result for msg_with_ctxt.
  return boolean False.
  call the method obj.delete.
  derive the class BaseArchive from the object base class.
  open writer.path file in write mode, with the file descriptor as fh, perform the following,
  define method has_key with self class instance, key and version set to None as arguments.
  call the self._lock.writer method, with the result perform the following,
  if not,
  substitute callback.func for callback.
  extend all_models list with the result.   call the function emit_post_migrate_signal with 4 arguments: all_models converted into a set, verbosity, interactive and database.
  if _active has an attribute "value",
  ModelFormMetaclass and BaseModelForm.   do nothing.
  response.content is bytes empty string.
  call the method handler.startElement with 2 arguments: string "item" and result of the method self.item_attributes with an argument item.
  week_number is integer 1.
  renamed is boolean False.
  import module datetime.
  for every i and line in enumerated iterable lines,
  from django.utils.safestring import mark_safe into default name space.
  __M is a raw string '(?P<mon>\w{3})'.
  join localpart and domain in a string separated by '@' character, substitute it for addr.
  child_nodelists is an tuple with an element 'nodelist'.
  call the function _load_serializers.
  do nothing.
  return func.
  define the function verbatim with 2 arguments: parser and token.
  define method get_exception_response, with self class instance, request, resolver and status_code as the arguments.
  find the ending position of the regular expression match of the object match, substitute the result for k.
  for every matches, pat and defaults in return value of the method pattern.reverse_dict.getlist called with an argument name,
  call the method handler.handle_raw_input with 5 arguments: self._input_data, self._meta, self._content_length, self._boundary,
  derive the class Serializer from the PythonSerializer base class.
  joining string '%r: %r' formated with k and v into a string, separated with ', ', use it to format a string '{%s}', return it.   define the method clear with an argument self.
  call the function warnings.warn with 3 arguments: string "cache_choices has been deprecated and will be removed in Django 1.9.",
  if cc is true,
  if value under the 'verbosity' key of the options dictionary is greater than zero,
  call the function re.compile with an argument raw string '^\w{3}, %s %s %s %s GMT$' formated with __D, __M, __Y and __T,
  evaluate the method self._has_expired with argument key, if it as False,
  if autoescape is true and value is not an instance of SafeData, autoescape is boolean True, otherwise it is boolean False.
  if t.token_type is not equal to TOKEN_COMMENT,
  get the value under the 'use_natural_primary_keys' key of the options dictionary, substitute the result for use_natural_primary_keys.
  return a tuple with 2 elements: integers 1 and 0.
  call the function timezone.get_current_timezone, substitute the result for current_timezone.
  if not,
  call the message_from_string function with an argument content, substitute the result for content.
  set the value under the 'bindAddress' key of the wsgi_opts dictionary to a tuple containing 2 elements: value under the 'host' key,
  otherwise if ch is contained in string "*?+{",
  with all occurrences of '%s' replaced with app_name and model._meta.object_name, respectively.   try,
  get the value under the key 'DJANGO_COLORS' of os.environ dictionary, if key doesnt exists return empty string, assign the result to DJANGO_COLORS.
  if call to the method self.is_valid, evaluates to false or self.can_delete is boolean false,
  for every __ in range of integers from 0 up to sep subtracted from fill_to,
  substitute self for retval.
  best_doublecolon_start is an integer -1.
  return boolean False.
  do nothing.
  if fifth element of row is not None, substitute it for value under the 'max_digits' key of the field_params,
  seen_data is an empty set.
  remove self.value_converters dictionary element under prefix key, if it exists substitute it for converter, if not, converter is None.
  call the function bytes with an argument value, return the result.
  define the method clean with arguments self and value.
  if errors is true,
  if m is None,
  if not,
  if middleware has an attribute 'process_view',
  for every pattern in self.url_patterns,
  define the method is_secure with an argument self.
  try,
  decorator python_2_unicode_compatible,
  define the function _strip_once with an argument value.
  if receiver is an instance of types.FunctionType type,
  derive the class Command from the BaseCommands base class.
  call the method self.set with arguments key, value, timeout set to timeout, version set to version.
  define the method id_for_label with 2 arguments: self and id_.
  call the method style.NOTICE with an argument string "Note that only Django core commands are listed as settings are not properly configured (error: %s).", where '%s' is replaced by self.settings_exception, append the result to usage.
  for every app_label in app_labels,
  remove slots_var key from the orig_vars dictionary.
  substitute the result for value under 'mailhost' key of config dictionary.   otherwise if klass is subclass of logging.handlers.SysLogHandler class, and string 'address' is contained in config,
  loader is instance of MigrationLoader initialized with connection as an argument.
  derive the class RequireDebugFalse from logging.Filter base class.
  if value under the 'language' key of the self.feed dictionary is not None,
  if it doesnt exists return value of the function capfirst with an argument self.fk.verbose_name for 'label'.   if self.fk.rel.field_name is not equal to self.fk.rel.to._meta.pk.name,
  and database set to value under the 'database' key of the options dictionary.   break the loop execution.
  define the method represent_decimal with arguments self and data.
  call the method re.search with 2 arguments: raw string '^[_a-zA-Z]' and name, if it evaluates to false,
  for every k and v in result of the function six.iteritems,called with an argument self,
  define the method __init__ with arguments: self, cmd and unpacked dictionary kwargs.
  call the method middleware.process_request with an argument request, substitute the result for result.
  return response.
  from django.db import connections, router, transaction and DEFAULT_DB_ALIAS into default name space.
  if ImportError exception is caught.
  define the method visible_fields with an argument self.
  try,
  if KeyError exception is caught,
  if file is an instance of six.string_types.
  otherwise, if pattern has an '_callback' attribute.
  define the function check_model_signals with app_config defaulting to None and unpacked dictionary kwargs as arguments,
  raise an exception.
  from django.utils.translation import ugettext_lazy,  ugettext as _ and pgettext into default name space.
  if not,
  if resolver.urlconf_module is None:
  help is a string 'Runs a development server with data from the given fixture(s).'.
  if TypeError exception is caught,
  register.tag decorator,
  substitute urlconf_name for self.urlconf_name.
  define the method start_doctype_decl with an arguments self, name, sysid, pubid and has_internal_subset.
  define the function salted_hmac with 3 arguments: key_salt, value and secret set to None.
  import module cgi.
  of the obj object.   if commit is true,
  from django.db import models into default name space.
  return a tuple wit 2 elements: _lazy_proxy_unpickle and tuple with 3 elements: func, self.__args, self.__kw and resultclasses.
  if ImportError, IndentationError, NameError, SyntaxError, TypeError or AttributeErrorexception is caught,
  return boolean False.
  call the method val.encode with argument string 'ascii'.
  substitute cls.__bytes_cast for cls.__bytes__.
  call the self.path function with argument path, substitute it for path.
  _ with an argument string "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.",   and string 'invalid'.   call the re.compile function with an argument raw string '^(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}$',
  replace every occurrence of raw string '\\' in the result with string '\\', return the result.   call the function allow_lazy with an argument unescape_string_literal, substitute the result for unescape_string_literal.
  try,
  for every ip in tuple containing 3 elements: self._ipython, self._ipython_pre_100 and self._ipython_pre_011,
  return integer 0.
  covert to lowercase language elements from (p+1)-th index to the end, append it to the previous result, return it.   if not,
  for every node in self.nodelist_loop,
  from django.core.exceptions import ImproperlyConfigured into default name space.
  define the function check_1_7_compatibility with argument kwargs dictionary.
  call the method handler.addQuickElement with 2 arguments: string 'lastBuildDate' and result of the function rfc2822_date,
  yield one element of data iterable.
  and help set to a string 'Optional table names. Otherwise, settings.CACHES is used to find cache tables.' .   call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store', dest as a string 'database',
  return value.
  define the method _update_errors with 2 arguments: self and errors.
  self._choices and self.widget.choices are assigned value converted into a list.
  try,
  if is_templatized is true,
  self.object._meta.object_name and self.object.pk, respectively.   define the method save, with 3 arguments: self, save_m2m set to boolean True and using set to boolean True.
  substitute m2m_data for self.m2m_data.
  separated by newline, use it as an argument for the call to the function mark_safe, return the result.   define the method as_ul with an argument self.
  define lambda function that returns self.file.xreadlines field, use it as an argument for property function, put the result in xreadlines.
  define the functionbase36_to_int with an argument s.
  use it to call the cgi.parse_header method, assign the result to the _ and content_params respectively.   if string 'charset' is contained in content_params,
  raise AttributeError exception,
  if las equals integer 2,
  substitute connection for self.connection.
  define the method popitem with an argument self.
  derive the class EmailBackend from the BaseEmailBackend base class.
  if not,
  assign the result to ctypes and opts.   get the value under the 'boundary' key of the opts dictionary, substitute it for boundary.
  return j.
  call the method self.render_option with 2 arguments: selected_choices and unpacked list option, append the result to output.
  substitute charset for self.charset.
  _iterkeys is a string "iterkeys".
  otherwise if prefix is not equal to common_prefix,
  from django.template.loader import get_template, select_template.
  return obj.
  make a directory named original_path.
  if message-id' is not in header_names,
  if s is instance of a class Promise,
  call the function os.remove with argument fname.
  derive the TemporaryUploadedFile class from the UploadedFile base class.
  return an instance of IfEqualNode class, created with 5 arguments: val1, val2, nodelist_true, nodelist_false and negate.
  define the function to_locale with an argument language.
  define the method get_nodes_by_type with 2 arguments: self and nodetype.
  initial_set is set created out of return values of the function force_text called with an argument value,
  get the value under the 'indent' key of the options dictionary, substitute the result for indent.
  if not,
  _dec.__name__ is a string 'method_decorator(%s)' formated with decorator.__name__.
  call the method __init__ from the base class of the class RegexField, with 4 arguments: max_length, min_length, unpacked list args,
  call the method self.reset.
  return an empty list.
  return result.
  from django.utils.safestring import SafeData, EscapeData, mark_safe and mark_for_escaping into default namespace.
  if 'coerce' key of the kwargs dictionary exists remove it and substitute its value for self.coerce,
  do nothing.
  return ipv4_unpacked.
  where '%s' is replaced with elemnts of token from upto index till the end, and token.   substitute filters for self.filters.
  call the method logging.captureWarnings with an argument boolean True.
  if length of bits is not equal to integer 6,
  substitute stream for self._stream.
  from pprint import pformat into default name space.
  derive the class RemovedInDjango19Warning from DeprecationWarning base class.
  where '%(field)s' is replaced with return value of the get_text_list function called with 2 arguments:   unique_check and return value of the function six.text_type called with return value of the function _ with an argument string 'and',   return the result.   define the method get_date_error_message with 2 arguments: self and date_check.
  call the method imp.find_module with 2 arguments: module_name and list containing element entry, assign the result to file_, _,
  if _localtime is None,
  define the function join_tokens with 2 arguments: tokens and trim set to boolean False.
  delete _prefixes.values.
  do nothing.
  func.is_usable in false,
  if message is true,
  call the add_argument method on the parser object, with string 'migration_name', and help set to string 'Migration name to print the SQL for.' as arguments.
  call the method rlcompleter.Completer with an argument imported_objects, use the complete field of the result as an argument for the call to the method readline.set_completer.
  if AttributeError exception is caught,
  call the function re.compile with raw string '(<a [^>]*?)target=[^\s>]+', substitute the result for link_target_attribute_re.
  for every key and value in list created out of the elements of the result of the call to the method attrs.items,
  breaks from the smallest enclosing loop execution.
  call the method self.connection.sendmail with arguments: from_email, recipients and return value of the function message.as_bytes.
  try,
  if not,
  call the function force_str with an argument signature, return the result.
  define the method _has_changed with arguments self, initial and data.
  call the function getInnerText with argument k, on the result call the method strip, for every k in keys, append the results to field_value list.
  if show_traceback is true,
  define the method chars with 4 arguments: self, num, truncate set to None, html set to boolean False.
  call the self.stdout.write method with string "    Processing %s.%s model\n" as argument, with all occurrences of '%s' replaced with,
  if incremental is true,
  from django.http.response import HttpResponse, StreamingHttpResponse, HttpResponseRedirect, HttpResponsePermanentRedirect,
  append string '-_' to the BASE62_ALPHABET, substitute it for BASE64_ALPHABET.
  define the function assertCountEqual with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  default set to DEFAULT_DB_ALIAS and help as a string 'Nominates a specific database to load fixtures into. Defaults to the "default" database.'   call the method parser.add_argument with 5 arguments: string '--app', action as a string 'store', dest as a string 'app_label',
  append '(' to field_type.
  derive the class Tok from the object base class.
  decorator function register.filter with 2 arguments string "slice" and is_safe set to boolean True.
  append j to sites.
  evaluate the function http.parse_cookie with raw_cookie as an argument, return the result.
  call the function processor with an argument request, update updates dictionary with the result.
  substitute absolute seconds for seconds.
  raise an ValidationError exception with an argument errors.
  if safe is not None,
  try,
  for every path in format_module_path,
  call the method self._get_model_from_node with arguments node and string 'model'.
  return the result.   define the function pgettext with 2 arguments: context and message.
  string '--keyword=gettext_noop', string '--keyword=gettext_lazy', string '--keyword=ngettext_lazy:1,2',   string '--keyword=pgettext:1c,2', string '--keyword=npgettext:1c,2,3' and string '--output=-', substitute it for args.   append work_file to args.
  increment piece by firs element of elt.
  if os.name equals to 'nt',
  define the function do_ntranslate with 4 arguments: singular, plural, number and translation_function.
  define the method clean with 2 arguments: self and value.
  boolean_attrs is an empty list.
  self._changed_data is an empty list.
  try,
  if value is false,
  do nothing.
  if ch2 equals string '?',
  queryset set to qs and unpacked dictionary kwargs.   define the method initial_form_count with an argument self.
  get the value under log key of root.manager.loggerDict dictionary, substitute it for logger.
  call the method self._cache.clear.
  from django.utils.xmlutils import SimplerXMLGenerator into default name space.
  replace '%s' in string 'django_%s_template_' with self.app_or_project, substitute it for prefix.
  define the method serialize_headers with an argument self.
  call the method node.hasAttribute with string 'pk' as an argument, if it evaluates to true,
  call the function force_text with first element of choice as an argument, substitute the result for self.choice_value.
  define the function get_tag_uri with 2 arguments: url and date.
  call the translation.get_language function, substitute the result for the value under the 'LANGUAGE_CODE' key of the context_extras dictionary.
  define the method _new_gnu_trans with 3 arguments: self, localedir and use_null_fallback set to boolean True.
  call the method field.widget.value_from_datadict with 3 arguments: self.data, self.files and return value of the method,
  call the method self.connection.starttls.
  register.tag decorator,
  split t.contents by '|' symbol, substitute the result for parts,
  try,
  substitute the result for value under the 'clear_checkbox_name' key of the substitutions dictionary.   call the function conditional_escape with an argument checkbox_id,
  if not,
  call the function allow_lazy with 2 arguments: urlize, six.text_type, substitute the result for urlize.
  if ImportError exception is caught,
  call the method threading.RLock, substitute the result for self._lock.
  if f.rel and f.rel.to are not contained in to_delete,
  use the result as an argument for the call to the function strip_spaces_between_tags, return the result.   derive the class TemplateTagNode from Node base class.
  if self has an attribute 'clean_%s', where '%s' is replaced with name,
  if not,
  from django.utils.translation import ugettext as _ into default name space.
  as long k is smaller than endpos,
  define the method language with an argument self.
  deifne the method __init__ with 5 arguments: self, class_name, old_method_name, new_method_name and deprecation_warning.
  deactivate and deactivate_all are lambda functions returning None.
  output is an empty list.
  do nothing.
  return boolean True.
  define the function escapejs_filter with an argument value.
  get is a tuple containing elements generated by the call to the function pformat with an argument COOKIES_override,
  write the chunk to the file _file.
  import module django.
  and unpacked dictionary kwargs.   define the method render with 2 arguments self and context.
  return response.
  if addr is a instance of six.string_types,
  do nothing.
  call the function date with 2 arguments: result of the call to the function datetime.now with an argument tz set to tzinfo,
  call the function force_text with argument val, substitute it for val.
  raise an ValidationError with 2 arguments: value under the 'contradiction' key of the self.error_messages dictionary and code set to 'contradiction'.
  call the method match.group with an arugument name, substitute the result for toktext.
  if six.PY2 is true and path is not an instance of byes type,
  start is an integer 0.
  import module glob.
  append tuple containing 2 elements: k and v to a list, for every k and v in options, only if k starts with curr,
  initialize the object of a InMemoryUploadedFile class with arguments: file set to self.file, field_name set to self.field_name,
  set file pointer at the beginning of the self.file file.
  collect is an empty list.
  append param to i-th element of result_args.
  derive the class DjangoUnicodeDecodeError from the base class UnicodeDecodeError.
  call the function force_text with an argument text, substitute the result for text.
  format string ' _(%s) ', with fmatch, write it to out.
  if t is not None,
  derive the class DateTimeInput from the DateTimeBaseInput base class.
  from django.core.exceptions import ImproperlyConfigured into default name space.
  call the function re.compile with an argument raw string "^\s*blocktrans(\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?')))?(?:\s+|$)",
  i is integer 0.
  call the method self.stdout.write, with an argument string "Rendering %s template files with extensions: %s\n",
  register.tag decorator,
  if os has an attribute 'utime',
  kwargs is a dictionary with 17 entries: form for 'form', formfield_callback for 'formfield_callback', formset for 'formset',
  if id_ is true id_attr set to return value of the function format_html, if not id_attr set to an empty string,   content set to result of the function mark_safe with an argument: string created by joining elements of outputs, with '\n' separator,   return the result.   derive the class RadioFieldRenderer from the ChoiceFieldRenderer base class.
  open the output file in writing mode if output is true, assign the file descriptor to stream, otherwise stream is None.
  if not,
  raise an ValueError exception with string "Key '%s' not found" as argument, substitute '%s' with key converted into a string.
  if six.PY3 is true,
  t is an instance of Template class, created with 2 arguments output and name set to filepath.
  self.blocks is a dictionary with elements: n for n.name, for every n in return value of the method nodelist.get_nodes_by_type,
  append d to self.fed.
  definition is an empty dictionary,
  substitute value under the subcommand key of the commands dictionary for app_name.
  from datetime import datetime into default name space.
  self.month_none_value is a tuple containing 2 elements: integer 0 and second element of empty_label.
  for every key in self.keyOrder,
  if message is an instance of SafeData.
  root is an list with 4 elements: root, root, None and None.
  for every attr in self.child_nodelists,
  try,
  for every formset in formsets,
  define the method add_root_elements with 2 arguments self and handler.
  shells is a list containing 2 elements: string 'ipython' and string 'bpython'.
  define the function pprint with an argument value.
  define the method handle_m2m_field with argument self, obj and field.
  set attr.name attribute of Module_six_moves_urllib_response object to attr.
  define the method reader_leaves with an argument self.
  if TemplateDoesNotExist exception is caught,
  call the method lexer.lex with an arguments js, for every name and tok in the result,
  get the type of res, call the method mro on the result, for every t in the result,
  get the value under the 'addrport' key of the options dictionary, if it is false,
  call the method widget.id_for_label with an argument id_, substitute the result for id_for_label.
  call the initialization method with argument params for the base class of the BaseMemcachedCache class.
  define the method __init__ with 2 arguments self and file.
  set the file pointer at the beginning of the self.file file.
  call the function _trans.get_language_from_request with 2 arguments: request and check_path, return the result.
  call the function ungettext with 3 arguments: singular, plural and number, substitute the result for result.
  call the method parser.print_help.
  skip this loop iteration.
  flush the output buffer of the self.stdout object.
  slice language from (p+1)-th index to the end, calculate the length of the obtained segment, if it is greater than integer 2,
  self.bcc is an empty list.
  if self.cmd._called_from_command_line is true,
  self._validate_unique is boolean False.
  and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) or y.eval(context) is True, for 'or',   result of the function inflix called with 2 arguments, integer 7,   and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) and y.eval(context) is True for 'and',   result of the function prefix called with 2 arguments, integer 8,   and lambda function with 2 arguments context and x, returns boolean True if x.eval(context) is True for 'not',   result of the function inflix called with 2 arguments, integer 9,   and lambda function with 2 arguments context and x, returns boolean True if x.eval(context) is contained in y.eval(context) for 'in',   result of the function inflix called with 2 arguments, integer 9,   and lambda function with 2 arguments context and x, returns boolean True if x.eval(context) is not contained in y.eval(context),   for 'not in', result of the function inflix called with 2 arguments, integer 10,   and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) equals y.eval(context) for '=',   result of the function inflix called with 2 arguments, integer 10,   and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) equals y.eval(context) for '==',   result of the function inflix called with 2 arguments, integer 10,   and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) doesnt equals y.eval(context) for '!=',   result of the function inflix called with 2 arguments, integer 10 and,   lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) is greater than y.eval(context) for '>',   result of the function inflix called with 2 arguments, integer 10 and and lambda function with 3 arguments context, x and y,   returns boolean True if x.eval(context) is greater than or equal to y.eval(context) for '>=',   result of the function inflix called with 2 arguments, integer 10 and and lambda function with 3 arguments context, x and y,   returns boolean True if x.eval(context) is smaller than y.eval(context) for '<',   result of the function inflix called with 2 arguments, integer 10 and and lambda function with 3 arguments context, x and y,   returns boolean True if x.eval(context) is smaller than or equal to y.eval(context) for '<=',   call the function OPERATORS.items, for every key and op in result,
  if _cached_filenames is empty and settings.USE_I18N is True,
  finally perform,
  if language_code is not contained in self._regex_dict,
  call the os.utime unction, with path and None as arguments.
  if length of unique_check equals integer 1,
  call the method handler.addQuickElement with 2 arguments: string 'link' and value under the 'link' key of the item dictionary.
  if TypeError exception is caught,
  substitute value under the PREV key of the root dictionary for last.
  call the function new_method_proxy with an argument dir, substitute the result for __dir__.
  do nothing.
  define the function is_aware with an argument value.
  if key_func is not of None type,
  derive the class IfChangedNode from Node base class.
  try,
  plist is an empty list.
  get 'clean_%s', where '%s' is replaced with name' attribute of the self object, call the result as an function,
  for every dict_ in self.dicts,
  if not,
  write it to self.stdout.   substitute Command for BaseRunserverCommand.
  convert current_expires to a string, use it as the argument for the call to the function typecast_timestamp, substitute the result for current_expires.
  call the function is_valid_ipv6_address with an argument value, if it evaluates to false,
  split first element of hextet into parts by ':', append them to new_ip.
  call the method m.groups, use the first element of the result as key for obtaining value from self.config dictionary,
  call the method node.render with an argument context, append the result to the nodelist.
  meta is a string '<could not parse>'.
  from __future__ import absolute_ into default name space.
  substitute return value of function no_style for style.
  if self._wrapped is empty,
  substitute type.__call__ for __call__.
  otherwise if self.name exists and self.name file path exists,
  self._leftover is an empty string.
  call the method handler.addQuickElement with 2 arguments: string 'description' and value under the 'description' key of the item dictionary.
  raise an TypeError exception with an argument string "Variable must be a string or number, got %s", replace '%s' with type of var.
  code set to an string 'invalid_choice' and dictionary params with an entry: value for 'value'.   define the method valid_value with arguments self and value.
  '(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?(?P<tzinfo>Z|[+-]\d{2}(?::?\d{2})?)?$', substitute it for datetime_re.   define the function parse_date with an argument value.
  if self has an '_regex_validator' attribute and self._regex_validator is contained in self.validators,
  from django.utils import six into default name space.
  if name is None,
  define the method __iter__ with an argument self.
  import module re.
  return boolean False.
  substitute result for value under the id of self key of memo dictionary.
  substitute options.settings for value under the 'DJANGO_SETTINGS_MODULE' key of the os.environ dictionary.
  skip this loop iteration,
  return func.
  remove the first element from p_pattern.
  if not,
  from django.utils import six into default name space.
  call the function forbid_multi_line_headers with 3 arguments: name, val and self.encoding, substitute the result for name and val, respectively.
  try,
  decimal_places set to None, unpacked list args and unpacked dictionary kwargs.   substitute max_digits and decimal_places for self.max_digits and self.decimal_places.
  and fileobj set to buf.   read data from buf file stream, yield the result.
  'status code' with integer value of 400 and 'request' with value request, respectively use the previous to call the function security_logger.error.   if settings.DEBUG is True,
  define the function get_language_from_request with 2 arguments: request and check_path set to boolean False.
  return boolean True.
  call the method self.__class__ with an argument list, with 2 elements: key and result of the function copy.deepcopy,
  call the function module_to_dict with an argument global_settings, substitute it for default_settings.
  call the method self.as_table, return the result.
  call the method parser.add_argument with string '--locale', string '-l', dest set to string 'locale', action set to string 'append',
  return nothing.
  raise an self.error exception with 2 arguments: token and string  "Invalid block tag: '%s', expected %s",
  import module re.
  and for every _, nodelist in self.conditions_nodelists.   define the method render with 2 arguments: self and context.
  if KeyError exception is caught,
  if not,
  derive CacheEntry class from the object base class.
  delete the value under the 'Content-Transfer-Encoding' key of self dictionary.
  while bits is true,
  finally perform,
  import module calendar.
  locations is an empty list.
  if self.can_import_settings is false,
  self.verbatim is boolean False.
  from wsgiref import simple_server into default name space.
  append a tuple containing 3 elements: filename, content, mimetype to self.attachments list.
  if template_dirs is true,
  call the method clean with an argument value from the base class of the class ComboField.
  otherwise is settings.USE_TI is true,
  execute code statement """exec _code_ in _globs_, _locs_""".
  if number is an integer and use_grouping is false and decimal_pos is false,
  define the method render with 4 arguments: self, name, value and attrs set to None.
  if formatter is true,
  do nothing.
  get the value under the 'database' key of options dictionary, use it as a index to get connections list element, store it in connection.
  call the method Model._meta.get_field with an argument field_name, substitute it for field.
  escaper is an identity lambda function.
  call the timezone.now function, substitute the result for now.
  call the method token.split_contents, convert the result into a list and substitute it for bits.
  return self.
  if not,
  write string "  Installing indexes...\n" to the standard output.
  otherwise if action equals to string 'apply_success',
  call the method self.common_logger_config with 3 arguments: logger, config and incremental.
  define the function urlunquote with an argument quoted_url.
  substitute cmd for self.cmd.
  substitute callback for self._callback.
  call the function os.path.dirname with an argument writer.path, substitute the result for migrations_directory.
  from django.apps import apps.
  split arg by ',', substitute the result for bits.s
  call the function become_daemon with 2 arguments: our_home_dir set to the value under the 'workdir' key of options dictionary and,
  result of the function force_text called with an argument title, and with sublist, append the string to output.   increment i by 1.
  data is an empty list.
  get the name key of the data dictionary, substitute it for value.
  define the method add_arguments with arguments self and parser.
  try,
  define the method empty_block_tag with 2 arguments: self and token.
  define the function get_format with 3 arguments: format_type, lang set to None and use_l10n set to None.
  help is a string "Squashes an existing set of migrations (from first until specified) into a single new one.".
  if endpos is lesser than zero,
  define the initialization method __init__ with self class instance and table as arguments.
  define the method _post_clean with an argument self.
  try,
  from io import StringIO into default name space.
  try,
  from django.utils.text import unescape_entities into default name space.
  from django.utils.functional import LazyObject into default name space.
  define the function _findall with 2 arguments text and substr.
  call the function convert_old_style_list with an argument sublist, substitute the result for item and old_style_list.
  fields is an tuple containing instances of the class DateField, created with 3 arguments: input_formats set to input_date_formats,
  call the function reloader_thread.
  call the function six.iteritems with an argument kwargs, for every k and v in the result,
  delete the _serializers dictionary entry at the format key.
  substitute save_m2m for form.save_m2m.
  call the method cache.set, with cache_key, headerlist, cache_timeout as arguments.
  try,
  call the method token.split_contents, substitute the result for bits.
  define convert method with self class instance, number, from_digits, to_digits and sign as arguments.
  return boolean True.
  call the sql_flush function with self.style, connections under the key with the value of options dictionary under the 'database' key,
  raise an base.DeserializationError exception with an argument string "<%s> node has invalid model identifier: '%s'",
  decorator function register.filter with 2 arguments string "timeuntil" and is_safe set to boolean False.
  deps is an empty list.
  split first element of args by ',', convert separated elements to strings, substitute the first 2 elements of the result,
  call the function _super with 2 arguments: class SimpleLazyObject and self, call the method __init__ on the result.
  output_transaction is boolean True.
  call the mail.attach_alternative method with html_message and string 'text/html' as arguments.
  if encoding equals to string 'utf-8'.
  from __future__ import unicode_literals into default name space.
  call the method token_string.count with an argument '\n', append the result to self.lineno.
  if not,
  if Exception exception is caught,
  self.GET is an instance of QueryDict class created with an argument mutable set to boolean True.
  try,
  decorator stringfilter,
  call the method instance of TerminalIPythonApp class, substitute the result for app.
  answer is None.
  e.args is a tuple containing string "Problem installing fixture '%s': %s", where '%s' is replaced with fixture_file, e.
  from email.mime.base import MIMEBase into default name space.
  derive the class TokenBase from the object base class.
  attrs is a dictionary with model for 'model'.
  if IndexError exception is caught,
  call the method __init__ from the base class of the class SortedDict.
  all_unique_checks is an empty set.
  return template and None.
  do nothing.
  if set is empty return string '(none)' instead, append the previous to the string " Apply all migrations: ",   use the previous string as the argument for the call to the method self.style.MIGRATE_LABEL,   use the result as an argument for the call to the method self.stdout.write.   if not,
  call the method handler.addQuickElement with 2 arguments: string 'language' and value under the 'language' key of the self.feed dictionary.
  import module os.
  called with 2 arguments: singular and trimmed and result of the function join_tokens called with 2 arguments: plural and trimmed,   write the result to out.   if not,
  and result of the function escape called with an argument line, substitute the result for i-th element of lines.   call the method mark_safe with lines joined into a string, separated by newlines as argument, return the result.
  call the method self.handle_merge with 2 arguments: loader and conflicts, return the result.
  define the function wrapper with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  write string "App '%s' could not be found. Is it in INSTALLED_APPS?" with '%s' where '%s' is replaced with app_label,
  call the value.natural_key method, substitute the result for natural.
  evaluate the self.has_key method with key as argument, return the result.
  substitute self.var for obj.
  substitute error_class for self.error_class.
  call the function signed_value with an argument value, substitute the result for signed_value.
  otherwise if value is boolean False, string 'False' or string '0'
  call the self._lock.writer method, with the result perform the following,
  self.dicts is an list with element builtins.
  substitute complain for __delslice__.
  evaluate self.clear method and return the result.
  import module os.
  as long as self.exists function with argument name evaluates to boolean True,
  if self is false,
  use the it as an argument for the call to the self.style.MIGRATE_LABEL method, use the result to cal the self.stdout.write method.   if not,
  move integer 1 left for 50 bits, substitute the result for PB.
  from __future__ import unicode_literals into default name space.
  raise an ValueError exception with an argument string 'Cannot resolve %r: %s', formated with s and e.
  if KeyError exception is caught,
  append block_content to a string 'end', substitute the result for self.verbatim.
  call the function get_token with an argument request, substitute the result for token.
  derive the class IncludeNode from the Node base class.
  if m is true,
  from collections import namedtuple.
  append string '-0000' to time_str, return the result.
  as arguments for the call to the unicode function, return the result.  substitute unichr for unichr.
  define the method validate_host with 2 arguments: host and allowed_hosts.
  define the function floatformat with 2 arguments text and arg set to integer -1.
  decorator function register.filter with an argument is_safe set to boolean True.
  define the method id_for_label with arguments self, name, field, value, val, choices and none_value.
  evaluate the http.QueryDict method with raw_query_string and encoding set to self._encoding as arguments, return the result.
  if length of bits is lesser than integer 2,
  if language is not contained in _translations,
  boolean True for 'True', boolean False for '3', boolean False for 'False' and boolean False for boolean False,   return it if the key exists, if not return None.   derive the class SelectMultiple from the Select base class.
  It looks like this project was generated using Django 1.5 or earlier. You should ensure your tests are all running & behaving   as expected. See https://docs.djangoproject.com/en/dev/releases/1.6/#new-test-runner for more information.",   obj set to None and id set to a string '1_6.W001', put the result into a list and return it.   if not,
  'get_language_from_request', 'get_language_info', 'get_language_bidi', 'check_for_language', 'to_locale', 'templatize',   'string_concat', 'gettext', 'gettext_lazy', 'gettext_noop', 'ugettext', 'ugettext_lazy', 'ugettext_noop', 'ngettext', 'ngettext_lazy',   'ungettext', 'ungettext_lazy', 'pgettext', 'pgettext_lazy', 'npgettext', 'npgettext_lazy' and 'LANGUAGE_SESSION_KEY'.   LANGUAGE_SESSION_KEY is an string '_language'.
  return self.__to_language.
  derive the class DjangoTranslation from gettext_module.GNUTranslations base class.
  join self.dirpath and self.file into a file path, substitute it for orig_file.
  if string 'version' is not contained in config,
  derive the class NonCapture from list base class.
  define the method __getitem__ with an argument self.
  substitute label_suffix for self.label_suffix.
  substitute new for self.mod.
  if file_name is false,
  call the function mark_safe with an argument data, return the result.
  match the rawdata from the position i+1, with tagfind pattern, assign the result to the match.
  define the function iriencode with an argument value.
  call the method self.xml.endElement with an argument string 'field'.
  from email.header import Header into default name space.
  and help as a string 'Nominates a database to print the SQL for. Defaults to the "default" database.', as arguments.   define the method handle_app_config with self class instance, app_config and dictionary options as arguments.
  call the field.rel.to._meta.get_field method with an field.rel.field_name argument, on the result call the method to_python,
  substitute factory for value under '()' key of config dictionary.
  used_column_names is an empty list.
  define the function _generator.
  if not,
  call the function warnings.warn with 3 arguments: string 'Using SplitDateTimeWidget with DateTimeField is deprecated. '
  decrement self.waiting_writers by integer 1,
  call the method code.interact with an argument local set to imported_objects.
  define the method simple_tag with 4 arguments: self, func and None, takes_context and None and name set to None.
  __all__ is an list containing a string 'File'.
  do nothing.
  if field.rel.to._default_manager has an 'get_by_natural_key' attribute,
  join root and f in path, substitute the result for f.
  ret_ip is an empty list.
  from django.dispatch import Signal into default name space.
  call the function fields_for_model with 9 arguments: opts.model, opts.fields, opts.exclude, opts.widgets, formfield_callback,
  sum m and class Media created with definition, return the result.
  call the method to_python with an argument data from the base class of the class URLField, substitute the result for value.
  if self._done is true,
  _supported is an instance of OrderedDict class, created with an argument settings.LANGUAGES.
  call the result.rsplit method with arguments self.sep and integer 1, substitute the result for value and timestamp, respectively.
  call the method handler.addQuickElement with 2 arguments: string 'author' and value under the 'author_email' key of the item dictionary.
  property decorator,
  python_2_unicode_compatible decorator,
  define the method __promise__ with 4 arguments: cls, klass, funcname and method.
  call the method self.handle_template with 2 arguments: value under the 'template' key of the options dictionary and base_subdir.
  if m is not False, None is considered False,
  from django.utils.translation import ugettext and ungettext into default name space.
  for every i and line in enumerated iterable lines,
  if num_entries is lesser than self._max_entries,
  get the value under value key of a dictionary with 4 entries: '2' for boolean True, '3' for boolean False, '2' for '2',
  return nothing.
  and unpacked dictionary kwargs.   define the function allow_lazy with 2 arguments: func and unpacked list resultclasses.
  define the method is_multipart with an argument self.
  import module sys.
  append bytes to chunks.
  define the get_path_info function with environ as the argument.
  for model in return value of the method router.get_migratable_models with arguments app_config, connection.alias,
  substitute value under the key key of self dictionary for val.
  call the method handler.addQuickElement with 3 arguments: string 'title', an empty string and a dictionary with 3 entries:
  verbosity set to verbosity, interactive set to interactive and using set to db.   call the method models.signals.pre_syncdb.send with 6 arguments: sender set to app_config.models_module,
  define the method __setitem__ with arguments self, name and val.
  call the method operations.extend with an argument smigration.operations.
  if data is an instance of bytes,
  if unicode_value is an instance of six.text_type,
  if length of key is greater than MEMCACHE_MAX_KEY_LENGTH,
  if file object has an attribute 'mode',
  if tzinfo equals a string 'Z',
  call the method one_percent_re.sub with 2 arguments: string '%%' and g, substitute the result for .
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  call the method self.get_connection with argument fail_silently, on the result call the method send_messages with one argument: list containing self, return the result.
  execute statement on the database that curs points to.
  if NotImplementedError exception is caught,
  define the function get_major_version with an argument version defaulting to None.
  call the function socket.getfqdn, substitute the result for self._fqdn.
  if OverflowError exception is caught,
  call the function force_text with an argument value, substitute the result for value.
  if pk is an instance of OneToOneField or ForeignKey classes,
  try,
  doublecolon_start is an integer -1.
  call the method self.write_po_file with 2 arguments: potfile and locale.
  define the method add_arguments, with 2 arguments self and parser.
  and data, if it evaluates to true,    return boolean  True.
  write string "Flush cancelled.\n" to self.stdout stream.
  remover 'file' key from the kwargs dictionary, if it exists substitute it for fp, if not substitute sys.stdout for fp.
  evaluate the method type(self).__bool__ with argument self, return the result.
  call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for _default.
  append tuple with 2 elements: i and value under the ORDERING_FIELD_NAME key of form.cleaned_data dictionary to self._ordering.
  allow_multiple_selected is boolean True.
  substitute length of content for self.size.
  raise an TypeError with an argument string "update expected at most 1 arguments, got %d" formated with length of args.
  compile the regex "^([a-z0-9.-]+|\[[a-f0-9]*:[a-f0-9:]+\])(:\d+)?$", substitute it for host_validation_re.
  with self.mutex perform,
  call the function force_text with an argument text, split by it word_split_re, substitute it for words.
  call the function io.open with orig_file and encoding set to settings.FILE_CHARSET, with the result renamed to fp,
  from __future__ import absolute_import into default name space.
  self.saved_forms is an empty list.
  append mw_instance.process_view at the end of self._view_middleware.
  do nothing.
  if not,
  call the method router.get_migratable_models with argument: app_config, connection.alias and include_auto_created set to True, substitute the result for app_models.
  call the function warnings.simplefilter with 2 arguments: string "default" and RemovedInNextVersionWarning.
  remove '__weakref__' key from the orig_vars dictionary.
  substitute the result for self.literal.   if ValueError exception is caught,
  define the function linebreaks_filter with 2 arguments value and autoescape set to None.
  get 'editable' attribute from object f, if it doesnt exists or its true,
  return a string '%s:%s' formated with the results of the functions self.g and self.i, respectivley.
  if fp is an instance of file and data is an instance of unicode and fp.encoding is not None,
  explicitly is prohibited."   call the function modelform_factory with 10 arguments: model, form as form, fields as fields, exclude as exclude,
  try,
  if fp is None,
  substitute e and tb for v.__cause__ and v.__traceback__.
  call the method value.encode with an argument charset.
  COMMENT_TAG_END is a string '#}'.
  define the method start_serialization with an argument self.
  call the method connection.introspection.get_field_type with 2 arguments: second element of row and row, substitute the result for field_type.
  call the function from_current_timezone with an argument result, return the result.
  call the method gettext_module.translation with 5 arguments: domain set to string 'django', localedir set to localedir,
  return string first element of t, '=', second element of t.
  if request._post_parse_error is true,
  from django.utils import six into default name space.
  compile regex from raw string '(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})$', substitute it for date_re.
  call the method os.dup2 with 2 arguments: result of the method so.fileno and result of the method sys.stdout.fileno.
  join usage and self.help into a string, separated by 2 new line characters, return it.
  params is a dictionary with 2 initial entries: self.limit_value for 'limit_value' and cleaned for 'show_value'.
  create directories from the elements in filename.
  if Exception, renamed to e, exception is caught,
  define the method __new__ with 4 arguments: mcs, name, bases and attrs.
  from django.utils.functional import curry and Promise into default name space.
  from django.utils.timezone import template_localtime into default name space.
  substitute second element of args for name.
  define the method __repr__ with an argument self.
  derive class _LazyDescr from the object base class.
  _func_defaults is a string "func_defaults".
  substitute the '%s' with table and list containing key, respectively.   call the cursor.fetchone method, substitute the result for row.
  remove first element from styles, split it by the '/' character, substitute the result for colors.
  call the method default with an argument o from the base class of the class DjangoJSONEncoder, return the result.
  substitute the settings.MEDIA_ROOT for location.
  derive the class DummyCache from the base class BaseCache.
  increment i-th element of counters by chunk_length.
  define the method __copy__ with an argument self.
  ISO_INPUT_FORMATS is a dictionary with 3 entries: tuple with an element string '%Y-%m-%d' for 'DATE_INPUT_FORMATS',
  dklen is None.
  try,
  split value into two parts by decimal_separator, assign the result to value and decimals.
  define the function dec with an argument func,
  if item is contained in the list of the elements of self, return boolean True, otherwise return boolean False.
  if content_length is lesser than integer 0,
  otherwise if self.waiting_readers is not equal to integer 0,
  if offset is not None,
  get frag attribute from found object, substitute it for found.
  call the function all_locale_paths, for every path is the result,
  call the method self._get_validation_exclusions, substitute the result for exclude.
  get format_type attribute of the settings object, return it.
  try,
  call the function user_function with 2 arguments unpacked list args and unpacked dictionary kwds, substitute the result for result.
  define the method __str__ with an argument self.
  call the function _ with an argument string '%(datetime)s couldn\'t be interpreted in time zone %(current_timezone)s; it '
  if val is None,
  otherwise if name is not None and compile_function is None,
  call the method parser.add_argument with 5 arguments: string '--all', action set to string 'store_true', dest set to string 'all',
  call the function find_command with an argument program, if it evaluates to None,
  if url_name exists substitute it for view_path, if not substitute .self._func_path for view_path.
  do nothing.
  join self.dirpath and self.file into a file path, substitute it for orig_file.
  derive the class FileField from the base class Field class.
  if viewname is not an instance of the six.string_types object,
  increment self.waiting_writers by integer 1,
  call the function http_cookies.SimpleCookie, on the return value call the value_encode method, with the argument character ';',
  raise an TemplateSyntaxError exception with an argument string "'%s' is not a valid tag library: %s",
  from django.utils.translation import ugettext as _ into default name space.
  raise an TemplateDoesNotExist exception with an argument template_name.
  if self has an 'requires_model_validation' attribute, has_old_option is boolean True, otherwise it is boolean False.
  if OSError or IOError exceptions were raised,
  if socket.error, renamed to e, exception is caught,
  import pyinotify module.
  from django.db import models into default namespace.
  for every app_config and model_list in app_list,
  call the method self._archive.list.
  if initial is not None, substitute initial for initial_value, otherwise initial_value is an empty string.
  call the function token.split_contents, substitute the result without the first element for bits.
  return the value under the self.data.month key of the MONTHS_3 dictionary.
  substitute RAW for TYPE.
  try,
  if LookupError or TypeError exceptions are caught,
  groupid is a string "t%d" formated with tok.id.
  if not,
  if exception PermissionDenied is caught,
  msgmerge_options is an list with elements: strings '-q' and '--previous'.
  import module glob.
  or if it is false, but has_old_option is true use self.requires_model_validation, if they are both false use boolean True as an argument.   property decorator,
  try,
  convert number to string, if first element equals to sign,
  define the function exec with 3 arguments: _code_, _globs_ set to None and _locs_ set to None.
  call the function that is the return value of get_storage_class method, substitute the result for self._wrapped.
  define the function center with 2 arguments value and arg.
  call the method deactivate.
  if mail doesnt have an 'outbox' attribute,
  if not,
  define the function deserialize with 3 arguments: format, stream_or_string and unpacked dictionary options.
  format string '<a href="%s"%s>%s</a>' with lead, middle and trail, use it as an argument for the call to the function mark_safe,
  substitute regex for self.regex.
  call the method dict_.getlist with an argument key, return the result.
  derive the class HTMLParser from the base class HTMLParser located in the module _html_parser.
  raise an Exception exception with an argument string "This %s instance is not writable",
  substitute SafeBytes for SafeString.
  and args, respectively.   call the method handle_default_options with an argument options.
  if i is greater than length of subject,
  if chunks is false,
  define the function deactivate.
  string joined from invalided_apps list and separated with string ', '.   if not,
  define the function sort_dependencies with an argument app_list.
  for every char in result of the self.add_truncation_text, called with 2 arguments: an empty string and truncate.
  substitute the result for trail.   call the function escape with an argument url, substitute the result for url, call the function escape with an argument trimmed,
  from __future__ import unicode_literals into default name space.
  import module io.
  call the function post_callback with an argument retval, substitute the result for newretval.
  from django.forms import Form into default name space.
  substitute callback for self.callback.
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  DEFAULT_ATTACHMENT_MIME_TYPE is a string 'application/octet-stream'.
  if not,
  call the method self.nodelist.render with an argument context, substitute the result for output.
  substitute complain for __setitem__.
  if not,
  call the method self._cache.incr with key and delta as arguments, substitute the result for val.
  call the method token.split_contents, substitute results without the first element for bits.
  define the method __init__ with 3 arguments: self, attrs set to None and check_test set to None.
  if ImportError exception is caught,
  skip this loop iteration,
  and boolean False, append the result to result.   return result.
  rais an AppRegistryNotReady exception with an argument string "The translation infrastructure cannot be initialized before the "
  try,
  try,
  'Nominates a database to print the SQL for. Defaults to the "default" database.' as the arguments.   define method handle_app_config with self class instance, app_config and dictionary options as arguments.
  and unpacked dictionary kwargs.   join into a string permitted_methods, separated by string ', ', substitute it for value under the 'Allow' key of the self dictionary.
  define the method __len__ with an argument self.
  call the method references_to_delete.setdefault with arguments: r.rel.to and an empty list, append to the result tuple with 2 entries: model and f.
  if StandardError, renamed to e, exception is caught,
  return ret.
  if ssl.SSLError or smtplib.SMTPServerDisconnected exception occurred,
  call the method self.extend_nodelist with 3 arguments: nodelist, instance of TextNode class, created with an argument token.contents,
  define the method write with 2 arguments: self and content.
  define the method render with 4 arguments: self, name, value and attrs set to None.
  with an argument escape_html for f, for every f and e in list of tuples of self dictionary key, pair entries, return the result.   define the method as_ul with an argument self.
  define the function parse_time with an argument value.
  call the method self.can_write.release.
  increment length of boundary by integer 6, substitute the result for self._rollback.
  if not,
  call the method self.validate_key with argument key.
  from unittest2 import everything.
  return an dictionary containing 1 entry: return value of the function timezone.get_current_timezone_name for 'TIME_ZONE'.
  if truncate_len equals integer 0.
  define the function import_string with an argument dotted_path.
  increment line by buffer_.
  call the method self.parse_name with an argument fixture_label, substitute the result for fixture_name, ser_fmt, cmp_fmt, respective.
  append list containing pattern to tried.
  join chunks into bytes string, substitute it for chunk.
  return result.
  otherwise if name equals a string 'id'.
  return self._client.
  define the method url with arguments self and name.
  substitute empty bytes string for self.buffer.
  from django.utils import six into default name space.
  and dictionary created by applying defaults mapping on the pattern.default_kwargs dictionary.   for every namespace and tuple containing: prefix and sub_pattern, in return value of the method pattern.namespace_dict.items,
  integer 0, appended to a string "strftime of dates before 1900 does not handle".   substitute dt.year for year.
  cache is an empty dictionary.
  raise an raise self.warning with an argument self.warning.
  delete the value under the key key of self._expire_info dictionary.
  decorator function register.filter with 2 arguments expects_localtime set to boolean True and is_safe set to boolean False.
  otherwise if self.reason_phrase is None,
  from PIL import Image into default namespace.
  from django.utils._os import upath into default name space.
  get field.name attribute of the obj, substitute it for related.
  self._request_middleware is None.
  for every obj in result of the call to the method self.queryset.all,
  compile a regular expression pattern string '([a-zA-Z][-.a-zA-Z0-9:_]*)(?:\s|/(?!>))*' into a regular expression object and assign it to tagfind.
  define the function yesno with 2 arguments value and arg set to None.
  call the self.stream.close function.
  if self.size is greater than chunk_size, return boolean True, otherwise return boolean False.
  replace '%s' in the string 'handler%s' with view_type, use it as an name of the attribute to get from the self.urlconf_module,
  substitute base_url for self.base_url.
  self._files is an instance of class MultiValueDict.   return nothing.
  substitute decimals for digits.
  replace '%s' in string 'django_%s_template_' with self.app_or_project.
  replace '%s' in string "Running post-migrate handlers for application %s" with app_config.label, print it to the standard output.
  if app_label is not contained in executor.loader.migrated_apps,
  for every i in sequence of integers, from 0 to the result of the method self.total_form_count,
  if CONTEXT_SEPARATOR is contained in result,
  format the string  '<p>%s</p>' with the result, for every p in paras, substitute list of results for paras.   if not,
  in not,
  plural set to plural and number set to number, return the result.   define the function activate with an argument language.
  import module os.
  derive the class DTDForbidden from the DefusedXmlException base class.
  decorator stringfilter,
  return self._is_rendered.
  if source is None,
  if action equals to string "apply_start",
  call the method self._cache.set_multi with safe_data, self.get_backend_timeout(timeout) as arguments.
  fork a child process, if the result equals integer 0,
  from django.apps import apps into default name space.
  __expire_info is an empty dictionary.
  if e.connection_reset is false,
  define function _generate_cache_key, with request, method, headerlist and key_prefix as arguments.
  if not,
  if i is greater than or equal to length of subject.
  for every subject, message, sender and recipient in datatuple, store the results in the messages list.   return evaluated result of the method connection.send_messages with messages as argument.
  try,
  from lib2to3.fixer_util import find_indentation, Name, syms and touch_import into default name space.
  assign the settings.SECURE_PROXY_SSL_HEADER to header and value, respectively.
  return self._wrapped.__dict__.
  return a tuple with an element self.__dt.
  for every d in self.dicts,
  append current_number to a list for current_number in self._unget_history, if current_number is equal to num_bytes,
  create lambda identity function which returns x for input parameter x, return the function.
  return result.
  substitute sup_cls.media for base.
  define the function dec with an argument func.
  with '%s' substituted for migration_name and app_label, respectively, as arguments.   if KeyError exception is caught,
  for every key and value in data.items function return value,
  from django.utils.html import format_html into default name space.
  raise an KeyError with an argument "Unknown language code %s.", where '%s' is replaced with lang_code.
  remove the first element from str_number.
  call the method loader.graph.forwards_plan with argument a tuple, with 2 elements: app_label and migration_name,
  get the value under the field key of the self.cleaned_data dictionary, if it exists substitute it for field_value,
  derive the class DefusedExpatParser from the _ExpatParser base class.
  if parse_until is true,
  define the method path with arguments self and name.
  return the result.   define the method value_from_datadict with 4 arguments: self, data, files and name.
  return lookup_view.
  for every path in self.locale_paths,
  added to a tuple with an element sum of year an integer 28, substitute the result for s2.   call the function _findall with 2 arguments: s2 and sum of year and integer 28, converted into a string, substitute the result for sites2.
  if s is an instance of the subclass Exception,
  from django.utils import baseconv into default name space.
  call the function limit_choices_to, substitute the result for limit_choices_to.
  current_len is equal to integer 0.
  raise an MultiValueDictKeyError exception with printable representation of key.
  if it exists, get 'stderr' attribute of self, substitute it for stderr, if not, stderr is an instance of OutputWrapper class,
  decrement end by one.
  '<li%(html_class_attr)s>%(errors)s%(label)s %(field)s%(help_text)s</li>', error_row set to a a string '<li>%s</li>',   row_ender set to a string '</li>', help_text_html set to a string, ' <span class="helptext">%s</span>',   and errors_on_separate_row set to boolean False.   define the method as_p with an argument self.
  from django.db.models import AutoField, OneToOneField and ForeignKey.
  define the method appendlist with 3 arguments: self, key and value.
  if settings.configured is false,
  self.use_ipv6 is boolean True.
  derive the class BooleanField from the base class Field class.
  _iterlists is a string "lists".
  substitute compile_function for self.tags dictionary value under the name key.
  m2m_value is an lambda function with value as an argument, return value is the result of the method value.natural_key.
  key is a list with elements of list key from length of self.prefixes index to the end,
  obj is an instance of Node class, created with 2 arguments: connector set to self.connector and negated set to self.negated.
  if return value of the self.is_secure is false and server port is not equal to string '80',   join host and server_port into a string, separated with ':', substitute the result for host.
  from django.core.files.base import File into default name space.
  substitute timeout for self.timeout.
  join func.__class__.__module__ and func.__class__.__name__ into a string, separated by character '.', substitute it for self._func_path.
  call the self.initial_form_count method, return the sublist of self.forms, using previous result as start index to the end.
  substitute Rss201rev2Feed for DefaultFeed.
  derive class SimpleCookie from the base class http_cookies.SimpleCookie.
  with the call to the transaction.atomic method with using set to connection.alias, savepoint set to connection.features.can_rollback_ddl as arguments,
  define the function fields_for_model with 9 arguments: model, fields set to None, exclude set to None, widgets set to None,
  for every dirpath, dirnames and filenames in the result,   for every dirname in list dirnames,
  if NameError exception is caught,
  get translation_function attribute of the object _default, call the result with an argument eol_message, substitute the result for result.
  call the function _ with an argument string '(Hidden field %(name)s) %(error)s', where '%(name)s' is replaced with name,
  substitute '%s' in the string '%%prog %s [options] %s' with subcommand and self.args, respectively, substitute it for usage.
  string 'unicode_escape', substitute the list of results for etags.   return etags.
  for every filename in filenames,
  raise an CommandError with an argument string "AppCommand cannot handle app '%s' in legacy mode because it doesn't have a models module.", where '%s' is replaced by app_config.label.
  if not,
  call the method fp.getvalue, return the result.
  and convert it again to the dictionary, if attrs is false, leave it alone, substitute the result for attrs.   if self.field.required is true and self.form has an attribute 'required_css_class',
  from django.db.models.fields.related import RelatedObject into default namespace.
  define the method _dec with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  match the rawdata from the position i, with _html_parser.endtagfind pattern, assign the result to the match.
  define the function dumps with 5 arguments: obj, key set to None, salt set to string 'django.core.signing',
  otherwise if value is an instance of datetime.datetime,
  append str_hidden to output.
  if encoding does not exists substitute it for settings.DEFAULT_CHARSET.
  call the function self._new_gnu_trans with an argument localedir, substitute the result for translation.
  path_info is a character '/'.
  from __future__ import unicode_literals into default name space.
  dest as a string 'symlinks', default as boolean False and help as a string 'Follows symlinks to directories when examining '   'source code and templates for translation strings.'.   call the method parser.add_argument with 7 arguments: string '--ignore', string '-i', action as a string 'append',
  if base_url is None,
  call the __init__ method with 3 arguments: CRITICAL, unpacked list args and unpacked dictionary kwargs from the base class of Critical.
  derive the class SafeMIMEMessage from the MIMEMixin and MIMEMessage base class.
  if error_messages is true and f.name is contained in error_messages,
  load_template_source.is_usable is boolean True.
  join top_dir and relative_dir into a file path, substitute it for target_dir.
  called with arguments v and self.encoding, extend the output with the result.   join elements of the output into a string, separated with '&', return the result.
  if smtplib.SMTPException exception is caught,
  write string ' #\n' to out file.
  call the function smart_text with an argument auto_id, format the result with self.html_name, return it.
  from collections import defaultdict into default name space.
  call the self.handle_app_config method with app_config and options as arguments, substitute the result for app_output.
  if length of tzinfo is greater than integer 3, convert elements of tzinfo from indexes 1 to 3 to an integer,
  substitute super for _super.
  call the method self.validate_key with argument key.
  set filter_func objec attr attribute to value.
  if call to the function response.has_header with argument 'Vary' returns boolean True,
  return result.
  return replacement.
  from django.utils.encoding import force_text into default name space.
  nargs set to '*' and help is a string 'Restricts dumped data to the specified app_label or app_label.ModelName.'.   call the method parser.add_argument with 4 arguments: string '--format', default set to string 'json',
  self._post is an instance of QueryDict class, created with an empty string and mutable set to boolean True.
  call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the self.feed dictionary.
  call the function to_python with an argument pk, substitute the result for pk.
  create dictionary out of the unpacked dictionary options, using defaults._get_kwargs as a mapping function, substitute the result for defaults.
  if field.rel.through._meta.auto_created is true,
  call the method node.render with an argument context, return the result.
  if self.body is true,
  derive the class ExtendsError from the Exception base class.
  define the method __eq__ with arguments self and other.
  if option_value is contained in selected_choices,
  name is a property object with _get_name as a getter method and _set_name as a setter method.
  match string s with regex IDENTIFIER, substitute the result for m.
  call the function time.time, substitute the result for timeval.
  write data to fp.
  call the method next with an argument bits, substitute the result for bit.
  if not,
  if first element of text equals '#',
  define the method serialize with 3 arguments: self, queryset and unpacked dictionary options.
  if filename is true,
  from django.utils.encoding import force_text into default name space.
  msg is a string ""The included urlconf '{name}' does not appear to have any patterns in it.
  define the method n with an argument self.
  g is an instance of a class generator.Generator called with fp and mangle_from_ set to False.
  derive the class TimeInput from the DateTimeBaseInput base class.
  current_app as context.current_app, substitute the result for url.   if NoReverseMatch exception is caught,
  call the function curry with 2 arguments: _proxy_method and method set to bytes.decode, substitute the result for decode.
  call the method self.__cast, if the result doesnt equal to other, return boolean True, otherwise return boolean False.
  define the method handle_noargs with 2 arguments: self and unpacked dictionary options.
  call the method self.nodelist_false.render with an arguments context, return the result.
  self._num_pages and self._count are None.
  return an empty string.
  define the method end_index with an argument self.
  raise an CommandError with an argument string "App '%s' does not have migrations (so squashmigrations on it makes no sense)",
  try,
  define the method write with 3 arguments: self, outfile and encoding.
  try,
  define the method run_from_argv with arguments self and argv.
  if sender is true and sender attribute 'handles_files' is also True,
  create a list out of fist end_text_pos text elemnts, substitue it for out.
  year_days is a list with 13 elements: None, integer 0, integer 31, integer 59, integer 90, integer 120, integer 151, integer 181,
  call the self.stderr.write method with string "    No custom SQL for %s.%s model\n" as argument,
  call the method self._send with argument message, substitute the result for sent.
  import threading.
  define the method IE_sanitize with arguments self and filename.
  get frag attribute from found object, substitute it for found.
  import module os.
  INFO is integer 20.
  split part by '=' character, substitute the result for role and instructions, respectively.
  skip this loop iteration,s
  derive the class BadSerializer from the object base class.
  return initial_forms.
  self.empty_label is None.
  derive the class CommandError from the base class Exception.
  if min_length is not None,
  from itertools import chain into default name space.
  call the function check_for_migrations with an arguments app_config, connection.
  if status is not equal to STATUS_OK,
  get the value under the 'verbosity' key of the options dictionary, substitute it for self.verbosity.
  call the method language_code_re.search with an argument accept_lang, if it evaluates to false,
  define the function advance_iterator with an argument it.
  try,
  if not self.pk_field is boolean False.   remove element from kwargs dictionary under the key 'to_field', substitute it for self.to_field if it exists,
  property decorator,
  return boolean True.
  return mod.register.
  result is an tuple with 2 elements: template and return value of the function make_origin called with 4 arguments: display_name,  loader, name and dirs.
  if Exception exception is caught,
  if lang_code is contained in _supported and lang_code is not None and result of the function check_for_language,
  result is a list containing an empty string.
  delete first element of bits.
  return nothing.
  define function fix_location_header with request and response as arguments.
  get the attribute '__name__' from the getattr, if it exists substitute it for m, if not, m is None.
  define the method __newobj__ with 2 arguments cls and unpacked list args.
  return nodelist.
  _version is a string "0.91".
  call the method self._convert_to_charset with arguments: header, string 'latin-1' and mime_encode set to boolean True,
  from django.utils.six.moves import reduce into default name space.
  define the function reset_translation.
  pytz is None.
  TOKEN_VAR is integer 1
  call the method parser.next_token, substitute the result for token.
  msg is a string "Invalid HTTP_HOST header: %r.", replace '%r' with host.
  code is a string 'min_value'
  define the method open with argument self.
  from django.conf import settings into default name space.
  call the self.get method with key and version set to version as arguments, substitute the result for value.
  substitute _iterkeys for keys.
  msg is an instance of a class SafeMIMEMultipart, created with the arguments: _subtype set to self.alternative_subtype and encoding set to encoding.
  if self.allow_files is true,
  convert self.literal into an integer, substitute it for self.literal.
  substitute name for self.name.
  append check to checks list, for every check in self.register_checks, if check has an attribute 'tags' and check.tags and tags set intersection is a non empty set.
  self.feed is an dictionary with 13 initial entries, result of the function to_unicode called with an argument title for 'title',
  for every ch in input_iter,
  if not,
  derive the class TimestampSigner from the Signer base class.
  derive the class warn_about_renamed_method from object base class.
  if OverflowError or ValueError exceptions are caught,
  use it as an argument for the call to the glob.iglob, for every candidate in result,   call the method os.path.basename with an argument candidate, is result is contained in targets,
  ba_serializer is a instance of BadSerializer class, created with an argument exc.
  self.test_runner is None.
  derive class Command from the base class BaseCommand.
  if not,
  call the function errors.error_dict.items, for every field and messages in the result,
  call the function self.regex.search with an argument path, substitute the result for match.
  split is an empty list.
  return self._num_pages.
  return new_name, field_params and field_notes.
  called with an argument result of the method self.latest_post_date.   if value under the 'author_name' key of the self.feed dictionary is not None,
  while self.tokens is true,
  _supported is an instance of OrderedDict class, created with an argument settings.LANGUAGES.
  call the method parser.add_option with 2 arguments: string '--pythonpath' and help set to a string 'A directory to add to the Python  path, e.g. "/home/djangoprojects/myproject".'
  if bytes is false,
  raise an NotImplementedError exception with an argument string 'may be implemented in a future release'.
  get absolute directory path of dir, substitute it for self._dir.
  string 'The inline foreign key did not match the parent instance primary key.' for 'invalid_choice'.   define the method __init__ with 4 arguments: self, parent_instance, unpacked list args and unpacked dictionary kwargs.
  if not, self.empty_value is an empty list.   call the method __init__ with 2 arguments: unpacked list args and unpacked dictionary kwargs,
  and result of the function force_bytes called with an argument val2, return the result.   if not,
  register is an instance of Library class.
  compatibility is a string 'compatibility'.
  add to a list result of the method uploadhandler.load_handler called with arguments handler and self,   substitute resulting list for self._upload_handlers.   property decorator,
  define the method is_rendered with an argument self.
  substitute url for value under the self.asvar key of context dictionary.
  from django.utils.six.moves import input into default name space.
  if IOError, renamed to e, exception is caught,
  define function learn_cache_key with request, response, cache_timeout set to None, key_prefix set to None, cache set to None as arguments.
  for every obj in value call the function mark_safe with an argument result of the function force_text called with an argument obj,
  derive the class ModelChoiceIterator from object base class.
  define the method __init__ with 10 arguments: self, data set to None, files set to None, auto_id set to string 'id_%s',
  if to is true,
  call the function getInnerText with an argument node, call the strip method on the result, substitute the result for field_value.
  call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary, substitute the result for table.
  if PY3 is true,
  self._post_parse_error is boolean False.
  from django.core.mail.backends.base import BaseEmailBackend into default name space.
  do nothing.
  from django.core.mail.utils import DNS_NAME into default name space.
  replace all '%s' from string "%s: %s%s%s" with values of obj, id, self.msg and hint, respectively, return the result.
  do nothing.
  call the function next_char with an argument iterator pattern, substitute the result for pattern_iter.
  define the function ngettext with 3 arguments: singular, plural and number.
  call the __init__ method from the base class of the WSGIRequestHandler class, with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  return the string.   define the function make_style with 2 arguments: opts set to an empty tuple and unpacked dictionary kwargs.
  call the method self.choice_input_class with 5 arguments: self.name, self.value, result of the method self.attrs.copy,
  if las equals integer 1,
  for field in self if field.is_hidden is true, append field to a list, return the resulting list.
  import module os.
  level is an integer 0.
  derive the class ChoiceFieldRenderer from the object base class.
  "Use django.forms.utils instead.", RemovedInDjango19Warning and stacklevel set to an integer 2.   from django.forms.utils import everything into default name space.
  derive the class DjangoSafeDumper from the SafeDumper base class.
  call the method content.message, substitute the result for content.
  define the method _get_image_dimensions with self class instance as the argument.
  call the settings.INSTALLED_APPS.
  upload_handlers.setter decorator.
  define the __init__ method with 5 arguments: self, urlconf_name, default_kwargs set to None, app_name set to None and  namespace set to None.
  return boolean True.
  if self._leftover is true,
  and result of the function force_str called with an argument safe,   use the result as an argument for the call to the function force_text, return the result.   call the function allow_lazy with 2 arguments: urlquote and six.text_type, substitute the result for urlquote.
  decrement week_number by integer 1.
  if errors is true,
  substitute gettext for ugettext.
  if data is false,
  find index of the occurrence of string ':_(' in p, if its greater or equal to integer 0,
  if _time.daylight is true,
  self.children is an list with 2 elements: obj and data.
  if e doesnt have an 'django_template_source' attribute,
  define the method B with an argument self.
  call the method self.make_bytes with an argument content, append it to self._container.
  substitute value for self._encoding.
  if not,
  return fext.
  append ch to result.
  do nothing.
  import module os.
  error is an instance of ValidationError created with an argument error.
  return initial.
  substitute model._meta for opts.
  if first element of the url_fields is false,
  return form.
  if ImportError, rename it to e, exception is caught,
  if attr is contained in obj_dict,
  derive the class ArchiveException from the Exception base class.
  call the method commands.update, with an argument dictionary containing entries: app_config_name for name, for every name in return value of the function find_commands, called with an argument path.
  if not,
  if os.path.exists function with argument name, evaluates to boolean True,
  derive the class MultipleChoiceField from the base class ChoiceField class.
  app_configs is not None.
  substitute kwargs for media_attrs.
  truncate the last element of filename.
  call the function codecs.open with 3 arguments: sql_file, string 'r' and  encoding set to settings.FILE_CHARSET, with the result renamed to fp,
  from django.conf import settings into default name space.
  substitute self.model._meta.pk for pk_field.
  value under the 'required' key of the kwargs dictionary is boolean False.
  define the function deactivate_all.
  join the results into a string, return it.   if hmac has an attribute "compare_digest",
  if OverflowError or ValueError, renamed to exc, exceptions are caught,
  dest is 'use_natural_primary_keys', default is boolean False and help is a string 'Use natural primary keys if they are available.'.   call the method parser.add_argument with 6 arguments: string '-a', string '--all', action set to 'store_true',
  call the function func with 2 arguments: context and self.first, return the result.
  convert arg to an integer.
  if not,
  derive the class ContextPopException from the Exception base class.
  from django.utils import formats and six into default name space.
  call the method dig1.update with an argument u.
  if value is an instance of datetime.datetime class,
  if boundary is an instance of six.text_type class,
  from django.utils._os import safe_join and abspathu into default name space.
  return _make_decorator.
  if function form.has_changed evaluates to false,
  doesn't support that type of template loading. Consider removing that line from TEMPLATE_LOADERS.",   where '%r' is replaced with loader.   return None.
  for every handler in handlers,
  decorator stringfilter,
  substitute self.files for value under the 'files' key of the defaults dictionary.
  if shutdown_message is true,
  call the method writer.as_string, write the result to fh file.
  return length of self.items.
  derive the class RegexValidator form the object base class.
  if 'filename' attribute of ev is None,
  define the method __init__ with 3 arguments: self, attrs set to None and choices set to an empty tuple.
  derive the class Command from the BaseCommand class.
  call the method parser.delete_first_token.
  return value of the function os.path.basename called with first element of sys.argv as an argument, and second element of sys.argv.   from django.conf import settings into default namespace.
  if self.use_argparse is true,
  substitute params for self.params.
  raise an ValidationError with 3 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary,
  return None.
  get config dictionary element under 'root' key, if it exists substitute it for root, if not, root is None.
  import module sys.
  _iteritems is a string "items".
  if self._request_middleware is None,
  if instance is None,
  FILE_MODIFIED is integer 1.
  if ValueError or TypeError exceptions are caught,
  call the method m.group with an argument string 'sec', convert the result into a string, substitute it for sec.
  call the __init__ method with self and params arguments from the base class BaseCache.
  get return value of the field.get_attname function attribute of the obj object, substitute it for value.
  raise an ValidationError with 3 arguments: dictionary self.error_messages value under the key 'invalid_pk_value',
  join return value of the function six.text_type called with an argument self.management_form and forms into a string,
  for every refto and refs in return value of the method references.items,
  set attr.name attribute of the _MovedItemst object to attr.
  return self._body.
  USE_INOTIFY is boolean False.
  import module zlib.
  call the function force_text with an argument base, substitute the result for base.
  define the method render with 2 arguments: self and context.
  if ValueError exception is caught,
  raise an AttributeError exception with an argument string: "'%s' object has no attribute 'ordered_forms'",
  if not,
  finally perform,
  where '%s' is replaced with last element of args.   as_form is boolean True
  call the function custom_sql_for_model with 3 arguments: model, style and connection, extend the output with the result.
  get the value under the 'filename' key of the params dictionary, if it is true,
  if value is an instance of str type,
  define the function phone2numeric_filter with an argument value.
  if ValueError or TypeError exceptions are caught,
  python_2_unicode_compatible decorator,
  if return value of the code_changed function is true,
  derive the class MultiValueDictKeyError from the KeyError base class.
  if six.PY3 is boolean True,
  if kwargs is None,
  raise an CommandError with an argument string "couldn't extract file %s to %s: %s", where '%s' is replaced with filename, tempdir and e.
  from django.utils.module_loading import module_has_submodule into default name space.
  if not,
  put loaders elements in a tuple, substitute it for template_source_loaders.
  "Use BaseCommand instead, which takes no arguments by default." and RemovedInDjango20Warning.   call the __init__ method from the base class of the NoArgsCommand class.
  import module os.
  _anonymous_ is a list containing one string: '_offset'.
  join the resulting sequence in a string with comma as separator, assign the string to cc.   substitute response dictionary value under the key 'Cache-Control' for cc.
  call the self._cache.get method with argument key, substitute the result for val.
  if loader is an instance of six.string_types,
  call the method m.group with an argument integer 0, substitute the result for s.
  define validate_name with 3 arguments: self, name and app_or_project.
  opt_dict is an dictionary with 5 elements: '1' for 'bold', '4' for 'underscore', '5' for 'blink', '7' for 'reverse',
  from django.utils.six.moves import cPickle as pickle into default name space.
  return nothing.
  return default.
  define the method get with 3 arguments: self, key and default set to None.
  if not,
  if self.regex is not an instance of a six.string_types type,
  from django.conf import settings into default name space.
  skip this loop iteration.
  define the method __ne__ with 2 arguments: self and other.
  do nothing.
  skip this loop iteration,
  template_with_clear is a string '%(clear)s <label for="%(clear_checkbox_id)s">%(clear_checkbox_label)s</label>'.
  append self.msgmerge_options to a list containing string 'msgmerge', append to it a list containing pofile and potfile, substitute the result for args.
  return self._urlconf_module.
  use global variable _translations.
  define the function _load_serializers.
  from django import VERSION as version into default name space.
  self.connection is a instance of a class contained in connection_class, instantiated with arguments: self.host, self.port,
  call the function lazy_number with 6 arguments: npgettext, six.text_type, context set to context, singular set to singular,
  join app_config.path and 'locale' into a valid directory path, separated by '/', append it to basedirs.
  from importlib import import_module into default name space.
  self.tags is an empty dictionary.
  call the method self.widget_attrs with an argument widget, substitute the result for extra_attrs.
  delete the value under the key key of self._cache dictionary.
  convert self.domain into a string and append string '.po' to it, join basedir and result in file path, substitute it for pofile.
  define the function _unpack_ipv4 with an argument ip_str.
  print FASTCGI_HELP to the standard output.
  derive the class Storage from the object base class.
  define the method _iteritems with an argument self.
  if not, isolated_context is boolean False.   get the value under the 'width' key of the options dictionary, if it exists, substitute it for namemap, if not namemap is an empty dictionary.
  define the function get_language.
  pk_value is None.
  define the method __deepcopy__ with 2 arguments: self and memo.
  do nothing.
  derive the class BaseMemcachedCacheMethods from RenameMethodsBase the base class.
  evaluate self.stream.getvalue method, return the result.
  if KeyError exception is caught,
  otherwise if count is greater than integer 1,
  call the method self.data.tzinfo.tzname with an argument self.data, if it is true, return it, otherwise return an empty string.
  define the method filter with 2 arguments: self and record.
  raise an exception of the class ValueError with string "Key '%s' not found" as argument, '%s' is substituted for key.
  return printable representation of self.dicts.
  return boolean True.
  get attribute piece of the self object, call it and use the result as an argument for the call to the function force_text,
  return _wrapper.
  from threading import local into default name space.
  define the function normalize with an argument pattern.
  and unpacked dictionary kwargs.   call the function iri_to_uri with an argument redirect_to, substitute the result for the value under the 'Location' key of the self dictionary.
  call the method timezone.localize with 2 arguments: value and is_dst as None, return the result.
  substitute integer 0 for cache_timeout.
  substitute limit for self.remaining.
  call the method value.decode with an argument charset.
  try,
  define the method write_migration_files with arguments self and changes.
  call the function iri_to_uri with an argument url, substitute the result for self.url.
  return host.
  for every first_select in return value of the function _parse_date_fmt.
  derive the class Template form the base class object.
  self._current is None.
  if not,
  for every arg in self.args call the method arg.resolve with an argument context, substitute the results in a list for args.
  import module sys.
  return self._size.
  where '%s' is replaced with token.contents.   call the method parser.compile_filter with an argument, in_index incremented by one, and used to index parser.compile_filter,
  define the method send_messages with arguments self and email_messages.
  substitute func.__doc__ for compile_func.__doc__.
  call the method handler.addQuickElement with 2 arguments: string 'copyright' and value under the 'feed_copyright' key of the self.feed dictionary.
  substitute the result for value under the field key of the self._errors dictionary.   if not,
  get the value under the field key of self.fields dictionary, substitute error_messages field of the result for error_messages.
  if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
  substitute name for self.name.
  if i equals to integer 0 and
  return result.
  and _allow_fallback set to boolean True, extend the output with the result.   return output.
  call the function urlsplit with an argument location, substitute the result for bits.
  from django.core.management.base import BaseCommand into default name space.
  if f is an instance of ManyToManyField,
  i is the reminder of the division of i by j.
  derive the class URLInput from the TextInput base class.
   if i is greater or equal to the result of the method self.initial_form_count and self.initial_extra is true,
  return result
  if old_attr is None,
  raise an CommandError exception with an argument string, "Incompatible values of 'leave_locale_alone' "
  define the method set_many with arguments, self, data, timeout defaulting to DEFAULT_TIMEOUT and version set to None.
  raise an TypeError exception with an argument string "end must be None or a string".
  nesting is integer 1.
  for every c in lineno_comment_map dictionary value under the comment_lineno_cache key,
  for 'maxSpare', value under the key 'minspare' of options dictionary converted to an integer for 'minSpare',   value under the key 'maxchildren' of options dictionary converted to an integer, for 'maxChildren',   and value under the key 'maxrequests' of options dictionary converted to an integer, for 'maxRequests'.   append string '_fork' to flup_module.
  call the function no_style, substitute it for self.style.
  compile a regex from raw string '^\d+$', substitute it for DIGIT_PATTERN.
  if self.to_field is true,
  try,
  if other_dict is an instance of MultiValueDict.
  otherwise if msg and visible_issue_count are true,
  import termios module.
  if used_name is not equal to guessed_filename,
  increment res by element of to_digit at the digit index.
  from django.utils import timezone and six into default name space.
  call the method self._callback_strs.add with an argument pattern._callback_str.
  convert self.children into an boolean, return it.
  questioner is an instance of a InteractiveMigrationQuestioner class, created with an argument: defaults set to dictionary with entry:
  if display_num_errors is true,
  return value.
  substitute app_or_project for self.app_or_project.
  return value under the 'forloop' key of the context dictionary.
  'PasswordInput', 'HiddenInput', 'MultipleHiddenInput', 'ClearableFileInput', 'FileInput', 'DateInput', 'DateTimeInput', 'TimeInput',   'Textarea', 'CheckboxInput', 'Select', 'NullBooleanSelect', 'SelectMultiple', 'RadioSelect','CheckboxSelectMultiple', 'MultiWidget',   'SplitDateTimeWidget' and 'SplitHiddenDateTimeWidget'.   MEDIA_TYPES is a tuple with 2 strings: 'css' and 'js'.
  substitute the fitst element of the result for prefix_norm and prefix_args, respectively.   for every possibility, pattern and defaults in possibilities,
  set k attribute of cls object to meth.
  define the method __getinitargs__ with an argument self.
  derive the class classonlymethod from the classmethod base class.
  call the function settings.is_overridden with argument string 'TEMPLATE_LOADERS', if it evaluates to boolean True,
  from yaml import CSafeLoader as SafeLoader into default name space.
  try,
  substitute ValueError for error_class.
  import module re.
  return value.
  if not,
  call the function getInnerText with argument k, on the result call the method strip, for every k in keys, append the results to field_value list.
  call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 4 entries:
  if Exception, renamed to e, exception is caught,
  msg is an empty string.
  raise an ValidationError with 2 arguments: dictionary self.error_messages value under the key 'required',
  message, code as a string 'ambiguous_timezone' and params as params,   and third element of the return value of the function sys.exc_info.   return value.
  on the result call the method encode with the arguments encoding and errors, return the result.   if strings_only and boolean return value of the call to the function is_protected_type for argument s are boolean True,
  call the method self.iterlists, return list of results.
  import module time.
  from django.utils.functional import total_ordering into default name space.
  import module copy.
  substitute stream for self._stream.
  if widget is an instance of the NumberInput,
  substitute it for time_re.   compile regex from raw string '(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})[T ](?P<hour>\d{1,2}):(?P<minute>\d{1,2})'
  from django.utils.module_loading import import_string into default name space.
  return the content field of the base class of the class SimpleTemplateResponse.
  if dt is None, is_dst is boolean False, otherwise call the method _isdst with an argument dt, substitute the result for is_dst.
  if choice_label is an instance of tuple or list,
  if invalid_var_format_string is true,
  from django.utils import six into default name space.
  if imatch is true,
  get the absolute file path of the expanded_template, substitute it for absolute_path.
  from django.db.migrations.executor import MigrationExecutor into default name space.
  break from the loop execution.
  format settings.TEMPLATE_STRING_IF_INVALID with self.var, return the result.
  call the method self.stream.write with argument string '%s\n', with '%s' replaced with msg_data.
  define the function prepare_js_for_gettext with an argument js.
  call the method self.stdout.write with an argument string "Loading '%s' fixtures...", where '%s' is replaced with fixture_name.
  self.form.initial, if it exists, or self.field.initial if not, substitute the result for data.   call the method self.field.prepare_value with an argument data, return the result.
  with '%s' substituted for migration_name and app_label, respectively, as arguments.   targets is a list containing tuple with two elements, app_label and migration.name.
  chunks is an empty list.
  for every entry in package_path,
  if eather of settings.USE_I18N or settings.USE_L10N is True, set is_accept_language_redundant to True.
  call the method self.coerce with an argument choice, append the result to new_value.
  call the method parse from the instance of TemplateIfParser class, created with 2 arguments parser and bits, substitute the result for condition.
  if value under the 'description' key of the item dictionary is not None,
  return self.limit_choices_to.
  substitute months for self.months.
  from __future__ import unicode_literals into default name space.
  into a file path, substitute it for new_path.   if new_path file path exists,
  otherwise if field is contained in self.fields,
  call the method calendar.monthrange with 2 arguments: self.data.year and self.data.month,
  define the method __init__ with 3 arguments: self, producer and length set to None.
  string 'Enter a list of values.' for 'list', return value of the function _ called with an argument,   string 'Select a valid choice. %(value)s is not one of the available choices.' for 'invalid_choice',   and return value of the function _ called with an argument string '"%(pk)s" is not a valid value for a primary key.' for 'invalid_pk_value'.   define the method __init__ with 10 arguments: self, queryset, cache_choices set to None, required set to boolean True,
  if root is true,
  define the method  remove_potfiles with an argument self.
  define the method reset with an argument self.
  and directory_permissions_mode set to None.   if location is None,
  define the method callback with an argument self.
  if template starts with a string 'file://',
  from pprint import pformat.
  write a newline character into self.stream file stream.
  multiply delta.days, integer 24, integer 60 and integer 60 add delta.seconds to it, substitute the result for since.
  get models.signals name attribute, store it in obj.
  self._regex_dict is an empty dictionary.
  for every potfile in potfiles,
  len_item is integer 1.
  call the method app_list.setdefault with 2 arguments app_config and an empty list, substitute the result for app_list_value.
  get the id of the self object, use it as a key to obtain the value from the memo dictionary, substitute self with it.
  close the _file file.
  call the method self.configurator.convert with an arugment value, substitute the result for result.
  if not, substitute self.field.initial for data.   if data is an callable object,
  from django.db.models.fields import Field as ModelField.
  if self.verbosity is greater of equal to integer 1,
  if errors_on_separate_row and bf_errors are both true,
  if palette equals value under the NOCOLOR_PALETTE key of the PALETTES dictionary,
  target_app_labels_only is boolean False.
  substitute use_tz for self.use_tz.
  call the get_bytes_from_wsgi function with environ, string 'SCRIPT_URL' and empty strings as arguments, substitute the result for script_url.
  if from_email exists substitute from_email for self.from_email, if not substitute settings.DEFAULT_FROM_EMAIL for self.from_email.
  msg is an string "Unclosed tag '%s'. Looking for one of: %s ", where '%s' is replaced with command,
  raise an DisallowedHost exception with an argument msg.
  for value of dictionary response under the key 'Last-Modified'.   if call to the function response.has_header with 'Expires' as argument returns boolean False,
  raise an TemplateSyntaxError exception with an argument string "'%s' received too many positional arguments",
  value is an empty list.
  substitute value for self.value.
  for app_config in return value of the method apps.get_app_configs,
  define the function url with 2 arguments: parser and token.
  define the method _create_mime_attachment with arguments self, content and mimetype.
  and unpacked dictionary connection_params.   if self.use_ssl and self.use_tls are false,
  if ValueError exception is caught,
  from django.forms.utils import from_current_timezone and to_current_timezone into default name space.
  derive the class override from the object base class.
  if ImportError exception is caught,
  if cmd ends with ext,
  split ip_str into parts by ':', substitute the result for hextets.
  return string 'StopUpload: Halt current upload.'.
  errors is an empty list
  get value under the 'handlers' key of the config dictioanry, if it exists substitute it for handlers, if not handlers is None.
  define the function clear_url_caches.
  from email.header import Header into default name space.
  if name is false,
  substitute last element of bits for asvar.
  call the getvalue method of the base class of the PythonSerializer class, return the result.
  prepend an empty string to hextets list.
  if '.' is not contained in var and 'e' is not contained in var converted into lowercase,
  if self.__language equals settings.LANGUAGE_CODE,
  return boolean False.
  call the function warnings.warn with 2 arguments: string "NoArgsCommand class is deprecated and will be removed in Django 2.0. "
  call the method blankout with 2 arguments: part and 'S', write the result to out.
  where '%s' is replaced with name.   if name is not contained in parser._namedCycleNodes,
  add elements from new_modules set to _cached_modules set.
  try,
  substitute form for self.form.
  if not,
  call the method apps.get_model with 2 arguments: string 'auth' and string 'Permission'.
  while remaining_bits is true,
  if accept_lang equals '*',
  call the function _trans.check_for_language with an argument lang_code, return the result.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  call the method self.empty_block_tag with an argument token.
  call the object d with arguments stream_or_string and unpacked dictionary options, return the result.
  append a tuple with elements key and value to current_fields.
  return value under key key of dict_ dictionary.
  decorator classmethod,
  return value.
  call the method self.open, substitute the result for stream_created.
  do nothing.
  if ImportError exception is caught,
  call the method related.natural_key, substitute the result for related.
  define the function sql_delete with 4 arguments: app_config, style, connection and close_connection set to boolean True.
  if squash is false,
  call the method self.fields.items, for every name and field in the result,
  define the method __repr__ with an argument self.
  if template_source_loaders is None,
  if value is contained in self.empty_values,
  call the itertools.count function with argument integer 1, substitute the result for count.
  call the method qs.values_list with 2 arguments: string 'pk' and flat set to boolean True, put the results in a list,
  sys.stdout is an instance of NullDevice class.
  'Select a valid choice. %(value)s is not one of the available choices.' for 'invalid_choice',   and return value of the function _ called with an argument string 'Enter a list of values.' for 'invalid_list'.   define the method to_python with arguments self and value.
  substitute parent_widget for self.parent_widget.
  if length of name is greater than integer 255,
  substitute loopvars and sequence for self.loopvars and self.sequence, respectively.
  raise an exception.
  if processors is None,
  otherwise if bmatch is true,
  value under the 'link' key of item dictionary for 'href' and "alternate" for "rel".   if value under the 'pubdate' key of the item dictionary is not None,
  return boolean False.
  return the value under the self.data.month key of the MONTHS dictionary.
  if dklen is false,
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  define the method empty_variable with 2 arguments: self and token.
  return an instance of Context class, created with an argument context.
  raise TemplateSyntaxError("%r must be the first tag in the template.", where '%s' is replaced with node.
  from django.template.loader import BaseLoader into default name space.
  define the method lists with an argument self.
  write msg to self.stderr stream.
  if not,
  for every pythonrc in tuple containing 2 elements: return value of the function os.environ.get called with a string "PYTHONSTARTUP",
  call the method m.end, slice list rest from previous result as starting index to the end, substitute the result for rest.
  self._is_rendered is boolean False.
  try,
  substitute format_string for self.format_string.
  call the method self.get_available_name with argument name, substitute the result for name.
  assign the value of the dictionary color_settings under the key role to format, if key doesnt exist assign the empty dictionary.
  if sublist_item is true,
  define the method nud with 2 arguments: self and parser.
  derive the class CacheClass from the base class FileBasedCache.
  from django.utils.module_loading import module_has_submodule into default name space.
  derive class TemporaryFile from the base class FileProxyMixin.
  in "%s in %s" substitute '%s' with names string and app, respective, join all the previous pairs into a string separated by ';',   substitute it for name_str.   raise CommandError exception, with "Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'",
  format string '%02d' with the second element of the result, return it.   define the method U with an argument self.
  content.setter decorator,
  call the function thread.start_new_thread with main_func and args as arguments.
  if template_name_list is false,
  try,
  substitute self for result.parent.
  substitute self for result.parent.
  for every smigration in migrations_to_squash,
  substitute the resulting set for selected_choices.   output is an empty list.
  convert root.manager.loggerDict into a list, substitute it for existing.
  do nothing.
  if not, content_type is an empty string and content_type_extra is an empty dictionary.   strip the content_type of the whitespaces, substitute it for content_type.
  if value is an instance of bytes class,
  get 'exclude' attribute from the options object, if it exists substitute it for self.exclude, if not self.exclude is None.
  call the add_argument method on the parser object, with string 'app_label', and help set to string 'App label of the application containing the migration.' as arguments.
  return nothing.
  define the method path with arguments self and name.
  append list with element inner to list containing first start elements of result, substitute it for result.
  kwargs is an empty dictionary.
  call the method dict with 4: self.attrs, type as self.input_type, name as self.name, value as self.choice_value,
  get dictionary self items, convert the result into a dictionary, convert the result into a string and return it.
  if inplural is true,
  substitute http_cookies.SimpleCookie for SimpleCookie.
  use the result as an argument for the call to the mark_safe function, return the result.   call the function allow_lazy with 2 arguments: escapejs, six.text_type, substitute the result for escapejs.
  existing_headers is a set containing lowercase strings header for every header in vary_headers.
  evaluate debug.technical_500_response with request and list of arguments exec_info, return the result.
  define the function available_attrs with an argument fn.
  if ValueError exception is caught,
  split p into two parts at the first ':', use the second element of the result to format string ' _(%s) ', write it to out.
  write a '[' to the self.stream file stream.
  fail_message is a string 'created'.
  and an empty dictionary, substitute the result for httpd_cls.   if not,
  if saved_locale is not None,
  define the _setup method with argument self.
  define the function b with an argument s.
  leave_locale_alone is boolean True.
  return an instance of a SpacelessNode class, created with an argument nodelist.
  try,
  with an argument self.data.year decremented by 1, evaluates to true,   week_number is integer 53.
  call the method value.encode with an argument self._charset, use the result as an argument for the call to the bytes function,
  call the method date.tzinfo.utcoffset with an argument date, substitute the result for offset.
  get shell attribute of the self object, call it and return the result.
  derive the class Loader from the BaseLoader base class.
  if data is false and initial is true,
  return exit_code.
  while token.contents starts with a string 'elif',
  decorator function wraps with an argument func.
  define the function parse_bits with 8 arguments: parser, bits, params, varargs, varkw, defaults, takes_context and name.
  define the method A with an argument self.
  call the self.get_dum_object method with an argument obj, use the result as an argument for the self.objects.append method.
  substitute EscapeText for EscapeString.
  call the strftime function with argument string "%Y%m%d-%H%M%S" on the return value of the function datetime.datetime.now, substitute the result for timestamp.
  if not,
  if AttributeError exception is caught,
  define the method widget_attrs with arguments self and widget.
  define the method load_template_source with 3 arguments: self, template_name and template_dirs set to None.
  otherwise if o is an instance of datetime.date object,
  if value is None,
  self.file_name is None.
  try,
  call the function get_standard_processors, append processors to the result, for every processor is the result,
  _default is None.
  return an empty string,
  yield string "# Feel free to rename the models, but don't rename db_table values or field names." as the result.
  call the method self.iteritems, return list of results.
  and unpacked dictionary kwargs, substitute the result for form.   if self.save_as_new is true,
  call the method logger.removeHandler with an argument h.
  dest as a string 'ignore', default set to boolean False and help set to string 'Ignores entries in the serialized data for fields that do not currently exist on the model.'.   define the method handle with 3 arguments: self, unpacked list fixture_labels and unpacked dictionary options.
  substitute result for value under the RESULT key of the oldroot dictionary.
  derive class InvalidCacheBackendError from the ImproperlyConfigured base class.
  define the method self and name.
  from django.core.signals import request_finished into default name space.
  if Exception exception is caught,
  define the function activate with an argument language.
  call the method self.stdout.write with an argument string "No fixture '%s' in %s.", where '%s' is replaced with fixture_name,
  if not,
  comment is an empty list.
  sum length of self.quertset and integer 1 if self.field.empty_label is not None, or integer 0 if not, return the result.
  while '<' is contained in value and '>' is contained in value,
  call the method parser.parse, return the result.
  return obj.
  substitute data.name for file_name.
  derive the class DebugNodeList from the NodeList base class.
  derive the class FieldError from the Exception base class.
  if '.' is contained in exclude,
  call the function exec_ with an argument string """def reraise(tp, value, tb=None):    raise tp, value, tb""".
  break from the loop execution.
  call the method __init__ from the base class of the InMemoryUploadedFile base class, with 6 arguments: file, name, content_type,
  define the method __init__ with 4 arguments: self, dirpath, file_name and locale_dir.
  from django.utils import datastructures into default name space.
  substitute the last element of args for name.
  raise an exception.
  output is an empty list.
  or boolean False if not, substitute the result for boundary.   if boundary is true,
  if view_function is not a callable function,
  call the function get_template with an argument parent, return the result.
  decorator method register.tag with an argument 'block',
  and code set to string 'list.   substitute self.to_field_name, if true, for key, or if not, substitute string 'pk' for key.
  raise an CommandError with an argument string "You must supply at least one app label when using --empty.".
  attrs is a list with 2 elements: strings "__doc__" and "__name__".
  output_transaction is boolean True.
  substitute definition for value under the role key of palette dictionary.
  import module hashlib.
  try,
  if file_name is false,
  call the method __new__ from the base class of the class SortedDict, with 3 arguments: cls, unpacked list args,
  skip this loop iteration.
  derive the class FileSystemStorage from the Storage base class.
  substitute .error_class for self.error_class.
  call the method to_python with an argument value, from the base class of the IntegerField class, substitute the result for value.
  if ValueError or TypeError exceptions occurred,
  if not,
  status set to None and current_app set to None.   substitute request for self._request.
  if self.file is false or self.file.closed is true, return boolean true, otherwise return boolean false.
  call the method parser.compile_filter with an argument, third element of bits, substitute the result for val2.
  substitute bp for lbp.
  substitute self.form.required_css_class for the value under the 'class' key of the attrs dictionary.
  define the method extract with 2 arguments self and to_path.
  for every slots_var in slots,
  define the method errors with an argument self.
  call the function is_protected_type with an argument value, if it evaluates to true,
  substitute CacheEntry for self.cache_model_class.
  add ext to f, substitute the result for fext.
  if not,
  self.backout is an empty list.
  if TemplateSyntaxError, replaced with e, exception is caught,
  otherwise if length of bits equals integer 6,
  call the method field.clean with an argument field_value, append the result to clean_data.
  call the method wrap with 2 arguments, value and arg converted into a integer, return the result.
  if message is an instance of dict type,
  if self.min_value is not None,
  if CONTEXT_SEPARATOR is contained in result,
  increment int_part_gd by thousand_sep.
  replace all occurrences of "'" with "\\'" in the previous result, return the result.   decorator function register.filter with an argument is_safe set to boolean True.
  call the method host_validation_re.match with an argument host.
  languages set to a list with an element self.__locale, codeset set to a string 'utf-8' and fallback set to use_null_fallback,   substitute the result for translation.   if translation has an attribute '_catalog',
  s and max_age set to max_age, use it as an argument for the force_bytes function, substitute the result for base64d.   decompress is boolean False.
  child_nodelists is a tuple with 2 initial elements: strings 'nodelist_true' and 'nodelist_false'.
  if string '%(truncated_text)s' is contained in truncate,
  string created by concatenating context, CONTEXT_SEPARATOR and plural and number.   call the function ungettext with unpacked dictionary msgs_with_ctxt, substitute the result for result.
  substitute result for value under the mem_args key of the cache dictionary.
  property getter decorator,
  if return values of the function force_text called two times with 1 argument, with value, and with orig, are equal,
  nodelist_empty is None.
  try,
  substitute the result for value under 'address' key of config dictionary.   substitute klass for factory.
  otherwise if self._delegate_text is true,
  decorator stringfilter,
  if self.ignore is true and field_name is not contained in model_fields,
  raise an exception.
  call the method self._archive.extract with an argument to_path.
  define the method __str__ with argument self.
  try,
  if latest_date is None or item_date is greater than latest_date,
  in_tag is boolean True if in_tag is False, otherwise is boolean False.
  value under the 'invalid_image' key of the self.error_messages dictionary and code set to a string 'invalid_image',   and third element of the return value of the function sys.exc_info.   if f has an attribute 'seek' and if f.seek is an callable object,
  settings.BASE_DIR.
  call the function re.compile with an argument raw string "^\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?'))\s*", substitute the result for context_re.
  db_module is a string 'django.db'.
  substitute minimal element of the resulting list for self._chunk_size.   substitute META for self._meta.
  call the __init__ method from the base class of the HttpResponse class, with the arguments: unpacked list args and unpacked dictionary kwargs.
  if value is boolean True, string 'True' or string '1',
  derive the class ConvertingTuple from tuple base class.
  return new_context.
  from __future__ import unicode_literals into default name space.
  call the function meta with 3 arguments: name, base and d.
  return unbound.
  return an instance of EscapeBytes, created with an argument s.
  concatenate name and string '-clear', return it.
  if self.field.empty_label is not None,
  if data is contained in self.children,
  derive the class CallbackFilter from logging.Filter base class.
  if the value under the 'QUERY_STRING' key of the self.META dictionary is true, call the function iri_to_uri,
  call the method node.get_nodes_by_type with an argument nodetype, extend nodes with it.
  from django.db.migrations.loader import MigrationLoader and AmbiguityError into default name space.
  substitute msg for self.msg.
  if other_dict doesnt have an '__getitem__' attribute,
  call the method Model._meta.pk.to_python with one argument: value under the 'pk' key of dictionary d, or None if previous doesnt exists,
  if six.PY2 is true,
  raise an CommandError with argument: string "Can't resolve dependencies for %s in serialized app list.", where '%s' is replaced with:
  if token.contents equals a string 'else',
  from datetime import timedelta and tzinfo into default name space.
  field_notes, respectively.   add field_params to extra_params dictionary.
  called with an argument value, return the result.   call the function allow_lazy with 2 arguments: strip_entities, six.text_type, substitute the result for strip_entities.
  return translation.
  call the method router.get_migratable_models with arguments app_config and connection.alias.
  define the method h with an argument self.
  return msgs.
  check if obj is instance of the object _PROTECTED_TYPES, return the boolean result.
  call the method __new__ from the base class of the class MediaDefiningClass, called with 4 arguments: mcs, name, bases and attrs.
  join app_config.path and string 'fixtures' into a valid file path, substitute it for app_dir.
  define the method delete with self class instance, key and version defaulting to None as arguments.
  call the function urlunsplit with an argument tuple with 4 elements: scheme, netloc, path, query and fragment, substitute the result for url.
  join prefix and path into an url, return it.
  decorator function wraps with an argument fget.
  substitute value under idx key of dictionary d for d.
  c is an instance of the class SimpleCookie.
  substitute self.source for e.django_template_source.
  try,
  call the get_bytes_from_wsgi function with environ, string 'SCRIPT_NAME' and empty strings as arguments, substitute the result for script_name.
  if response.streaming is True,
  from __future__ import unicode_literals into default name space.
  for every key and value in return value of the self._headers.values method, call the function to_bytes with 2 arguments: key,
  define the method widget_attrs with arguments self and widget.
  if call to the function module_has_submodule with 2 arguments: app_config.module and module_to_search evaluates to true,
  if KeyError exception is caught,
  call the method match.end, substitute the result for upto.
  define the function javascript_quote with 2 arguments: s and quote_double_quotes set to boolean False.
  reverse the order of modules elements, put them into a list, return it.
  call the method copy.copy with an argument register_to._registry, substitute the result for before_import_registry.
  delete attr.
  return first element of t converted to lowercase and boolean True, as a tuple.
  if autoescape is true,
  get value under the 'level' key of the config dictioanry, if it exists substitute it for level, if not level is None.
  substitute messages for self.error_messages.
  call the function update_wrapper with 2 arguments: _wrapper and func.
  substitute the result for value.   call the function avoid_wrapping with an argument value, return the result.
  substitute klass.__dict__ for next.
  substitute template for self.template_name.
  append contents to plural.
  define the function parts.
  call the function remove_tags with 2 arguments value and tags, return the result.
  raise an TemplateSyntaxError exception with an argument string "'for' tag received an invalid argument: %s",
  if language is contained in _DJANGO_DEPRECATED_LOCALES,
  raise an TemplateSyntaxError exception with an argument string "'now' statement takes one argument".
  from django.utils.html import strip_spaces_between_tags.
  if ascii value of char is smaller than integer 33 or is equal to integer 127,
  call the method operator.methodcaller with 3 arguments: string 'to_bytes', integer 1 and string 'big', substitute the result for int2byte.
  call the method self.cache_key with 2 arguments name and dirs, substitute the result for key.
  define the function firstof with 2 arguments: parser and token.
  define the function urlizetrunc with 3 arguments value, limit and autoescape set to None.
  return data.
  call the method __delitem__ from the base class of the class SortedDict, with an argument key.
  try,
  convert max_value into an floating point number, substitute it for max_value.
  replace every occurrence of '\\' in tok with 'U', substitute the result for tok.
  otherwise, value under the 'max_digits' key of the field_params is integer 10.   if sixth element of row is not None, substitute it for value under the 'decimal_places' key of the field_params,
  decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
  add ns_pattern and extra, substitute the result for ns_pattern.
  substitute qs for self._queryset.
  raise an TemplateSyntaxError exception with an argument string "second argument to 'regroup' tag must be 'by'".
  if index_sql is not empty,
  substitute body for self.body.
  call the method sys.stderr.write with an argument string "  Unable to load the flup package.  In order to run django\n".
  if new_errors is not an iterable object raise an error with error message "The function %r did not return a list. All functions registered with the checks registry must return a list.", with '%s' replaced by value of check.
  try,
  return a string 'Raw content'.
  called with 2 arguments: value and memo, for every key and value in result for the method self.items, return the result.   define the method __copy__ with an argument self.
  'self' for 'rel' and value under the 'feed_url' key of self.feed dictionary for 'href'.   call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the self.feed dictionary.
  for integer representation of z converted into a string.   define the function escapejs with an argument value.
  convert x into a string and append it to a list, substitute the resulting list for out.   join elements of out into a string, separated with whitespaces, append ')' to it, append the result to '(', return it.
  import module errno.
  if match is true,
  extend self.children list with data.children.
  format the string '{scheme}://{host}{path}' by replacing scheme with self.scheme, host with return value of the self.get_host method,
  if features.needs_datetime_string_cast field of the object represented stored under the db key of connections dictionary is true,
  call the function make_middleware_decorator with an argument middleware_class, call the result, return the new result.
  with call to the function transaction.atomic with using set to connection.alias as argument,
  call the method self.run_validators with an argument value.
  define the method __init__ with 4 arguments: self, name, content and content_type defaulting to a string 'text/plain'.
  derive the class FileInput from the Input base class.
  if i is greater than or equal to the result of the method self.initial_form_count,
  substitute the result for i-th element of words.   if not,
  substitute offset for self.__offset.
  derive the class Form from the base classes DeclarativeFieldsMetaclass and BaseForm.
  call the function ugettext_lazy with an argument value, return the result.
  if num is greater than self._max_entries,
  call the method django.get_version append new line to it, write it to sys.stdout.
  get the value under the value key of a dictionary with 6 entries: boolean True for '2', boolean True for boolean True,
  call the function lazy with 4 arguments: get_format, six.text_type, list and tuple, substitute the result for get_format_lazy.
  call the method cls.__dict__.copy substitute the result for orig_vars.
  convert self to a list and return it.
  append character '/' to the base_url.
  call the function forbid_multi_line_headers with 3 arguments: name, val and self.encoding, substitute the result for name and val, respectively.
  if i is smaller than result of the method self.initial_form_count and key 'instance' is not contained in kwargs,
  UnlockFileEx.argtypes is a list containing 5 elements: HANDLE, DWORD, DWORD, DWORD and LPOVERLAPPED.
  from pkg_resources import resource_string into default name space.
  substitute value for the value under the key key of self._cache dictionary.
  kwargs is an empty dictionary,
  for every key in keys,
  get the length of the options, use it as a starting index for the slicing arg list, substitute it for self.test_runner.
  call the function get_user_model, substitute the result for UserModel.
  if not,
  value is an instance of ConvertingList class, created with an argument value.
  define the method __new__ with 3 arguments: cls, unpacked list args and unpacked dictionary kwargs.
  divide message by error.params, substitute the residue of the division for message.
  if line ends with a new line character substitute width incremented by integer 1 for max_width, if not substitute width for max_width.
  encode is an lambda function with 2 arguments k and v, return value is the result of the function urlencode, called with an argument:
  if self.render_value is false,
  define private method __repr__ with argument self.
  call the method constant_re.findall with an argument t.contents, for every fmatch in the result,
  delete the value under the 'liveserver' key of the options dictionary.
  call the function six.reraise with 3 arguments: ImproperlyConfigured, instance of ImproperlyConfigured class created with msg,
  get 'widgets' attribute from the options object, if it exists substitute it for self.widgets, if not self.widgets is None.
  convert first element of values into a integer, return the result and ch.
  extend self.program list with self.program_options, string '-o',
  if not,
  derive the class Command from the base class BaseCommand.
  call the function force_text with first element of list_ as an argument, return the result.
  open out_log file in append mode with buffering size of the input buffer, substitute the result for sys.stdout.
  define the function exhaust with an argument stream_or_iterable.
  if value is an instance of list type,
  "(%s) and 'can_import_settings' (%s) command options.", replace '%s' with self.leave_locale_alone and self.can_import_settings.   from django.utils import translation into default namespace.
  define the function truncatechars with 2 arguments value and arg.
  substitute self._options for client.behaviors.
  if not,
  break loop execution.
  call the method stream.unget with elements of list chunk from the index next to the end.
  terminal_char is an string '>'.
  if e doesnt have an 'django_template_source' attribute,
  for every key and value in data.items method return value,
  if settings.USE_TZ is true,
  substitute i for self.pointer.
  from email.mime.message import MIMEMessage into default name space.
  if field_value has an attribute '__iter__' and is not an instance of six.text_type object,
  join elements of parts into a string, separated with '.', substitute it for name.
  for every value in data.   if data_set is not equal to initial_set return boolean True, otherwise return boolean False.
  return the element at the index index of the tuple containing 3 elements: self.func, self.args and self.kwargs.
  substitute the value under the 'outlog' key of options dictionary for value under the 'out_log' key of daemon_kwargs dictionary.
  call the method re.match with 2 arguments: naiveip_re and value under the 'addrport' key of the options dictionary, substitute the result for m.
  define the method __init__ with 5 arguments: self, regex, callback, default_args set to None and name set to None.
  days is a tuple with 7 elements: strings 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat' and 'Sun'.
  define the method nud with 2 arguments: self and parser.
  call the method urlresolvers.RegexURLResolver with raw literal string '^/' and urlconf as the arguments, substitute the result for resolver.
  mail.outbox is an empty list.
  if fourth element of version equals to string 'alpha' and fight element of version equals to integer 0,
  call the method query.items, substitute the result for query.
  if not,
  or if it doesnt exists if exclude is None.   raise an ImproperlyConfigured with an argument string "Calling modelformset_factory without defining 'fields' or 'exclude',
  call the method operator.attrgetter with an argument _func_globals, substitute the result for get_method_globals.
  define the function wrapper with 2 arguments: unpacked list args and unpacked dictionary kwds.
  builtins is an empty list.
  if sys.warnoptions is false,
  substitute cls for obj.__class__.
  substitute inotify_code_changed for fn.
  raise CommandError with an argument string 'Unknown serialization format: %s', where '%s' is replaced with format.
  derive the class SafeData from object base class.
  join output into a string, separated by newline characters, return it.
  delete entry under the attr key of the attrs dictionary.
  if ret equals to integer 0, return boolean True, otherwise return boolean False.
  unpacked list field_value as an argument, substitute the result for value.   substitute value for value under the field.attname key of the data dictionary.
  if not,
  added to a tuple with an element year, substitute the result for s1.   call the function _findall with 2 arguments: s1 and year converted into a string, substitute the result for sites1.
  replace every occurrence of arg is value for an empty string, substitute the result for value.
  call the method value.rjust with an argument, arg converted into a integer, return the result.
  'Select a valid choice. %(value)s is not one of the available choices.' for 'invalid_choice'.   define the method __init__ with 9 arguments: self, choices set to an empty tuple, required set to boolean True, widget set to None,
  do nothing.
  substitute TimeInput for widget.
  call the function get_library with an argument taglib, substitute the result for lib.
  from django.utils import termcolors into default name space.
  valid is boolean False.
  call the re.compile function with 2 arguments: raw string "^(?:[a-z0-9\.\-]*)://(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+",
  raise an CommandError exception with an argument string "Error: %s", with '%s' replaced by message.
  code set to string 'max_digits' and params set to a dictionary with an entry: self.max_digits for 'max'.   if self.decimal_places is not None and decimals is grater than self.decimal_places:
  call the method self.dicts.pop, return the result.
  call the method extracted.close.
  if IndexError exception is caught,
  if AttributeError exception is caught,
  for every node in self,
  do nothing.
  try,
  from __future__ import unicode_literals into default name space.
  kwargs is a empty dictionary.
  define the method has_key with 2 arguments: self and key.
  do nothing.
  try,
  double the chunk size.
  reverse the order of colors elements,
  call the method self.xml.endElement with an argument string 'field'
  default_list is an empty list.
  do nothing.
  increment mes_count by one.
  split content by newline character, for every line in result,
  call the method parser.parse_known_args wiht an argument self.argv, without the first two elements, assign the result for options,
  return the string 'ValidationError(%s)', replace '%s' with self.
  categories is a list containing the results of the function to_unicode, called with an argument c, for every c in categories.
  substitute self for result.parent.
  if extracted is true,
  return obj.
  from __future__ import unicode_literals into default name space.
  call the method self.validate_key with argument key.
  substitute first decimal_pos elements of dec_part for dec_part.
  try,
  get the value under the 'name' key of the disposition dictionary, strip it of whitespaces, substitute the result for field_name.
  call the function importlib.import_module with 2 arguments: flup_module converted to string and appended to '.' character, and string 'flup', substitute the result for module.
  define lambda function that returns self.file.readline field, use it as an argument for property function, put the result in readline.
  call the method self._archive.close.
  raise a TypeError exception,
  default_error_messages is an dictionary with an entry: return value of the function _ called with an argument,
  instantiate class ContextDict with 3 arguments: self, unpacked list args and unpacked dictionary kwargs, return it.
  buffer_ is None.
  call the encode function on the Header class instance, created with arguments nm and string 'utf-8', substitute the result for nm.
  call the function make_middleware_decorator with an argument middleware_class, return the result.
  from django.conf import settings into default name space.
  call the function _trans.get_language_bidi, return the result.
  counters is a list containing length of handlers number of zeros.
  call the function check_for_migrations with an arguments app_config and connection.
  define the method __copy__ with an argument self.
  otherwise if field is contained in the result of the call to the method self._errors.keys,
  if first and second element of sys.version_info are equal to integers 3 and 4, respectively,
  define the method exists with arguments self and name.
  derive the class NumberInput from the TextInput base class.
  if pattern.app_name is true,
  attachment is an instance of a class SafeMIMEMessage, created with the arguments content and subtype.
  call the method update_watch.
  open the file in mode 'ab' and with file name obtained by calling the self._get_filename method.
  define the method inclusion_tag with 5 arguments: self, file_name, context_class set to Context, takes_context set to boolean False,
  substitute a tuple with 2 elements: template and None, for self.find_template_cache dictionary value under the key key.
  for every obj in queryset,
  or if current_version is greater than (3,0), but smaller than (3,2,3), otherwise set use_workaround to boolean False.   substitute HTMLParseError from the module _html_parser for HTMLParseError.
  if self.require_all_fields is true,
  call the function re.compile with 2 arguments: elements of parts joined into a string, separated with '|',
  m2m_value is a lambda function with an argument value, return value is the result of the function smart_text called with arguments:
  if extensions is false, substitute it for exts, otherwise exts is a list containing 2 elements: string 'html' and string 'txt'.
  if extra_classes is not empty put its elements into a set, substitute it for extra_classes, if not extra_classes is an empty set.
  define the method get_field_type with 4 arguments: self, connection, table_name and row.
  for every key and value in items of dictionary self,
  if inplural is true,
  derive the class EmailBackend from the ConsoleEmailBackend base class.
  if context.autoescape is true and value is not an instance of SafeData, or value is an instance of EscapeData,
  return self.file.
  "because you haven't properly specified the ENGINE setting for the database.\n see: https://docs.djangoproject.com/en/dev/ref/settings/#databases".   call the method app_config.get_models with an argument include_auto_created set to boolean True, substitute it for app_models.
  if widget is false,
  substitute i-th element of self.initial for value under the 'initial' key of the defaults dictionary.
  call the method os.setsid.
  call the function bytes with an argument tuple with an element i, return the result.
  return t.
  if not,
  data, encoding and errors as a string 'replace'.   otherwise if item_type equals FILE,
  define the method tzname with 2 arguments: self and dt.
  substitute args for self.__args.
  define the method to_python with arguments self and value.
  otherwise if action equals to string "unapply_success".
  import module io.
  get 'EMAIL_FILE_PATH' from the settings, if it exists, substitute it for self.file_path, if not substitute None for self.file_path.
  call the method sys.stderr.write with an argument string "fork #1 failed: (%d) %s\n", formated with e.errno and e.strerror.
  try,
  call the self.file.close method, return the result.
  and obj.__class__.__name__, first element of obj._constructor_args and second element of obj._constructor_args.   klass.__new__ is a static method of the function __new__.
  if app_names is not empty,
  replace '%s' in the string 'handler%s' with view_type, use it as an name of the attribute to get from the urls, substitute it for callback.
  if self.leave_locale_alone is false,
  decorator register with argument Tags.compatibility.
  convert second item to an iterable,
  called with an argument value and value.   register.tag decorator function with an argument 'if',
  return value.
  remove all the elements from space index of line.
  call the method numberformat.format with 6 arguments: value, result of the function get_format called with 3 arguments:
  if request has an attribute 'session',
  slice migration.ancestry list from the last result as an starting index to the end, substitute the slice for migration.branch.   migration.merged_operations is an empty list.
  define the method push with 3 arguments: self, name and block.
  substitute the result for self._object_dict.   return the value under the pk key of self._object_dict dictionary.
  if value equals self.empty_value or value is contained in self.empty_values,
  call the function six.reraise with 3 arguments: UnreadablePostError, UnreadablePostError instantiated with unpacked list e.args,
  if self.connection is false,
  substitute field_name for old_field_name.
  call the method self.write_items with an argument handler.
  ignored  is an empty list.
  define the function get_git_changeset.
  call the function time.gmtime with argument timeval, use string '%Y%m%d%H%M%S' and the previous result as an argument for the call to the time.strftime function, substitute the result for utcdate.
  call the function get_callable with arguments lookup_view and boolean True, substitute the result for lookup_view.
  define the method validate with arguments self and value.
  otherwise if field_type equals a string 'IntegerField(' and connection.features.can_introspect_autofield is false,
  requires_system_checks is boolean False.
  remove the elements from the 'name' and 'dictionary' keys of the options dictionary, substitute them for project_name and target, respectively.
  dest set to string 'load_initial_data', default=True and help as a string 'Tells Django not to load any initial data after database synchronization.'.   define the method handle with arguments self and unpacked dictionary options.
  do nothing.
  raise an ValueError exception with argument string "EMAIL_USE_TLS/EMAIL_USE_SSL are mutually exclusive, so only set one of those settings to True.".
  call the method message.message.
  bad_app_labels is an empty set.
  convert initial into boolean and substitute it for initial.
  if not,
  return boolean True.
  define the function jython_reloader with main_func, args and kwargs as arguments.
  if self.use_argparse is false,
  from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space.
  do nothing.
  from datetime import datetime into default name space.
  admin is a string 'admin'
  define the function dictsortreversed with 2 arguments value and arg.
  return supported_code.
  if the result to the method call response.has_header, with string 'Cache-Control' as an argument is boolean False,
  if self.variable_name is true.
  dest as a string 'locale', action as a string 'append' and help as a string,   'Creates or updates the message files for the given locale(s) (e.g. pt_BR). Can be used multiple times.'.   call the method parser.add_argument with 5 arguments: string '--exclude', string '-x', default as a empty list,
  call the method self.create_parser with arguments prog_name and subcommand.
  raise an CommandError exception with an argument string 'Unknown model in excludes: %s', where '%s' is replaced with exclude.
  substitute pattern.regex.pattern for p_pattern.
  define the function get_format_modules with 2 arguments: lang set to None and reverse set to boolean False.
  append value to the self._closable_objects list.
  substitute elements of s from the end index to end for s.
  call the method sys.stdin.close.
  remove last 2 elements from bits.
  call the get_bytes_from_wsgi function with environ, string 'REDIRECT_URL' and empty strings as arguments, substitute the result for script_url.
  define the initialization method __init__ with arguments: self class instance, dir and params.
  return the media field of the first element of self.forms.
  get the value under the 'keep_pot' key of the options dictionary, substitute it for self.keep_pot.
  write string "No conflicts detected to merge." to self.stdout stream.
  for every locale in locales,
  if OSError, renamed to e, is caught,
  call the self.stderr.write method with string "    Installing index for %s.%s model\n" as argument,
  strip url of surrounding '/' characters, substitute it for tmp.
  call the function warnings.warn with 3 arguments: string "`%s.%s` method should be renamed `%s`.",
  call the method re.sub with 3 arguments: raw string '&(?:\w+|#\d+);', empty string and result of the function force_text,
  wsgi_opts is a dictionary with 4 initial entries: value under the key 'maxspare' of options dictionary converted to an integer,
  call the method self.limit_choices_to, return the result,
  try,
  multiply delta.days with an integer 86400 add to the result delta.seconds, if the result is greater than integer 0,
  define the method streaming_content with 2 arguments: self and value.
  substitute allow_files and allow_folders for self.allow_files and self.allow_folders.
  if i is greater than, or equal to subject,
  return value.
  and join the results into a string, separated with '|' character, return the result.   derive the class Lexer from the object base class.
  if to is not an six.string_types instance raise an error with message string '"to" argument must be a list or tuple'.
  dest as a string 'ignore_patterns', default as an empty list, metavar as a string 'PATTERN',   and help as a string 'Ignore files or directories matching this glob-style pattern. Use multiple times to ignore more.'.   call the method parser.add_argument with 5 arguments: string '--no-default-ignore', action as a string 'store_false',
  call the method new_context._reset_dicts values.
  convert name to lower case if it equals to string 'from' or 'to,
  substitute left for self.first.
  settings.DEFAULT_CHARSET if the key doesnt exists and strings_only set to boolean True.   call the Model._meta.get_field method with an argument field_name, substitute the result for field.
  if AttributeError or UnsupportedOperation exception occurred.
  call the method self.fields.values, for every field in result,
  call the self.delete method with key and version set to version as arguments.
  f.required is boolean False.
  if second element of the i-th row of relations equals table_name, rel_to is string 'self',
  substitute lib for value under the library_name key of libraries dictionary.
  all_date_checks is union of all_date_checks set and date_checks set.
  call the function force_text with 2 arguments: src and settings.FILE_CHARSET.
  for every key in sorted list of user_settings,
  if path is not contained in self._js,
  if not,
  if tok.next is true,
  call the method self.configure_filter with an argument value under name key of filters dictionary,
  substitute '%s' in a string "Migrations for '%s':" with app_label, append newline to it,
  get self.instance
  if UnicodeEncodeError exception is caught,
  derive the class InputStreamExhausted from the Exception base class.
  if not,
  property decorator,
  open writer.path file in write mode, with the file descriptor as fh, perform,
  substitute func for self.func.
  return value.
  if field.help_text is true, substitute field.help_text for self.help_text, if not self.help_text is an empty string.
  from django.utils.crypto import constant_time_compare and salted_hmac into default name space.
  define the method __repr__ with an argument self.
  append rel_to to string 'ForeignKey(, append character "'" to it, substitute the result for field_type.
  field_output is an list containing 2 elements: return value of the function qn called with an argument f.name,
  compare_to is an list with elements generated by calling the var.resolve method with 2 arguments: context and boolean True,
  derive the class GenericIPAddressField from the base class CharField class.
  if not,
  define the function iterkeys with 2 arguments: d and unpacked dictionary  kw.
  call the method self._expire_info.get with key and integer -1 as arguments, substitute the result for exp.
  if charset equals to string 'utf-8',
  if primary_keys is true,
  define the method __call__ with arguments self and value.
  close the process with an argument 0.
  define the method _text_chars with 5 arguments: self, length, truncate, text and truncate_len.
  if data is true, substitute it for self.files, otherwise self.files is an empty dictionary.
  if six.PY2 is boolean True,
  import module django.
  if hextet converted to hexadecimal number is smaller than hexadecimal 0, or hextet converted to hexadecimal number is smaller than hexadecimal FFFF,
  call the method re.split with 2 arguments: string '\n{2,}' and value, substitute the result for paras.
  call the function factory with an argument unpacked dictionary kwargs, substitute the result for result.
  if value is contained in self.empty_values,
  if chunk is empty,
  substitute self.STDOFFSET for self.DSTOFFSET.
  if self.verbosity is greater than integer 0,
  call the function import_string with an argument path, substitute the result for func.
  decrement self.active_readers by integer 1,
  define the method start_serialization with an argument self.
  substitute self.field.widget for widget.
  replace '%s' in string "CREATE %sINDEX %s ON %s (%s);" with: unique, return value of the function qn called with an argument:
  do nothing.
  derive the class Command from the BaseCommand base class.
  define the method media with an argument self.
  if whitelist is not None
  from the base class of the SimpleCookie class call the method load with rawdata as argument.
  return nothing.
  define the function do_with with 2 arguments: parser and token.
  define the method add_arguments with arguments self and parser.
  help is a string "Runs a Python interactive interpreter. Tries to use IPython or bpython, if one of them is available.".
  call the method parser.compile_filter with an argument, second element of bits, substitute the result for val1.
  import module struc.
  raise an TypeError exception with an argument string "If the flags are set, regex must be a regular expression string.".
  convert app_template_dirs to a tuple, return it.
  define the method eval with 2 arguments: self and context.
  return wrapper.
  for every form in self.forms append form to a list, if function form.is_valid evaluates to true,
  substitute it for value under the 'initial' key of kwargs dictionary.   if IndexError exception is caught,
  define the method clean with arguments self and value.
  for every c in reversed order of candidate, convert c into an integer, sum all the results and substitute the result for evens.
  raise an ValidationError with 3 arguments: value under the 'max_digits' key of the self.error_messages dictionary,
  activate is a lambda function which returns None for any argument x.
  define the method add_item_elements with 3 arguments: self, handler and item.
  params is a list with second element of source as a element.
  call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
  class static method,
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  if arg is None
  if call to the function response.has_header with string 'Vary' as an argument returns True,
  define the function _explode_shorthand_ip_string with an argument ip_str.
  decorator is an instance of class Node, created with 2 arguments: instance of Leaf class created with 2 arguments: token.AT and "@',
  for every pos and elt in enumerated iterable source,
  if not,
  if pot_path file path exists,
  define the method render with 2 arguments: self and context.
  call the function six.reraise with 3 arguments: UnreadablePostError, UnreadablePostError instantiated with unpacked list e.args,
  instantiate base class of the class ModelMultipleChoiceField, substitute filed to_python of the  result for to_py.
  if self.domain is not equal to string 'django' or string 'djangojs',
  define the function templatize with 2 arguments: src and origin set to None.
  raise an NotImplementedError with an argument string 'subclasses of Tokenparser must provide a top() method'.
  call the method self.key_function with key, self.key_prefix and version as arguments, substitute the result for new_key.
  return boolean False.
  if self.verbosity is greater or equal to integer 2,
  if x equals to integer 0,
  msg is a string "%(model)s.Meta.%(opt)s cannot be a string. Did you mean to type: ('%(value)s',)?", where '%(model)s' is replaced,
  substitute chunk_size for self.chunk_size.
  if PY3 field of module six is boolean True,
  if change equals to FILE_MODIFIED,
  yield and empty string as the result.
  if characters '\n' or '\r' are contained in val,
  otherwise cmp_fmts is a list containing cmp_fmt.   call the method serializers.get_public_serializer_formats, substitute the result for ser_fmts if ser_fmt is None,
  for every filename is filelist,
  raise an CommandError exception with an argument string "currently makemessages only supports domains 'django' and 'djangojs'".
  call a function _ with a string 'Enter a valid value.' as an argument, substitute the result for message.
  if words is true, substitute re_words for regex, if not substitute re_chars for regex.
  substitute self.rendered_content for self.content.
  return val.
  define the method render with 2 arguments: self and context.
  call the function get_default_timezone, use the result as an argument for the call to the function _get_timezone_name, return the result.
  define private method __call__ with self class instance, environ and start_response as the arguments.
  from django.apps import apps into default name space.
  define the method set_signed_cookie with 5 arguments: self, key, value, salt as an empty string and unpacked dictionary kwarg.
  call the method field.rel.to._default_manager.db_manager with an argument db on the return value call the method  get_by_natural_key,
  VARIABLE_TAG_START for 'openvariable', VARIABLE_TAG_END for 'closevariable', SINGLE_BRACE_START for 'openbrace',   SINGLE_BRACE_END 'closebrace', COMMENT_TAG_START 'opencomment' and COMMENT_TAG_END for 'closecomment'.   define the method __init__ with 2 arguments: self and tagtype.
  if t is not None,
  self.tags is an empty dictionary.
  new_value is a sum of value and delta.
  call the function forbid_multi_line_headers with 3 arguments: name, val and string 'ascii', substitute the result for name and val, respectively.
  if self.timezone is true and call to the method self.timezone.dst with an argument self.data, evaluates to true,
  do nothing.
  otherwise if domains equals a string django' and, file_ext equals '.py' or file_ext is contained in command.extensions,
  define the method discard with 2 arguments: self and item.
  if filters is true,
  define the method create_nodelist with an argument self.
  loop_dict and value under the 'forloop' key of the context dictionary are dictionaries with an entry: parentloop for 'parentloop'.
  define the function parse_http_date with an argument date.
  call the method parser.parse with an argument tuple with one element string 'endblock', substitute the result for nodelist.
  from __future__ import unicode_literals into default name space.
  if new_name starts with a string '_',
  substitute digits for self.digits.
  return value.
  if data is true, substitute it for self.data, otherwise self.data is an empty dictionary.
  replace '%s' with type of the obj object.   call the method self.indent with argument integer 1.
  if renamed is boolean False,
  try,
  if IndexError exception is caught,
  if domain is true and return value of the function validate_host called with 2 arguments: domain and settings.ALLOWED_HOSTS, evaluates to true,
  from django.utils.functional import lazy into default name space.
  from django.apps import apps into default name space.
  define the method items with an argument self.
  return None.
  if first element of sys.version_info equals integer 2, PY2 is boolean True, otherwise it is boolean False.
  output is an empty list.
  if name is not None,
  call the method dictConfigClass with an argument config, call the method configure on the result.
  call the method self._cache.decr with key and delta as arguments, substitute the result for val.
  replace all the occurrences of '__' with '_' in new_name.
  if command.use_argparse is true,
  define the method load_template_source with 3 arguments: self, template_name, template_dirs set to None.
  return the result of the method self._html_output, called with 5 arguments: normal_row to a string,
  substitute pubid for self.pubid.
  raise an TemplateSyntaxError exception with an argument string "'%s' is not a valid tag library: %s",
  append orig_file to string '#: ', substitute it for new.
  define the method validate with 2 arguments: self and value.
  decorator register with Tags.models and Tags.signals as arguments.
  return None.
  call the method self._format_value with an argument value, use the result as an argument for the call to the function force_text,
  if name is true,
  if self.deactivate is true,
  if both cursor and close_connection are true,
  join it with app into a string, separated with string '; ', substitute it for name_str.   substitute '%s\ in string "Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'",
  self.request is None.
  substitute a tuple with 2 elements: characters ',' and ': ' for value under the 'separators' key of the self.json_kwargs dictionary.
  derive the class LoadNode from Node base class.
  value under the BLOCK_CONTEXT_KEY key of context.render_context dictionary is BlockContext class instance.
  define the method copy with an argument self.
  call the function runfastcgi with an argument args.
  derive the class ReferenceLocalTimezone from the tzinfo base class.
  increment i by integer 1,
  return a list containing 2 elements: return value of the value.date method and return value of the replace method,
  define the function byte2int with an argument bs.
  if exclude is true and f.name is contained in exclude,
  xgettext_options is an list with elements: strings '--from-code=UTF-8' and '--add-comments=Translators'.
  substitute config dictionary value under '()' key for factory.
  define the method add_item with 17 arguments: self, title, link, description, author_email set to None, author_name set to None,
  decorator function register.filter with an argument is_safe set to boolean False.
  call the method self.g, return the result.
  if self.cdata_tag is not None,
  _translations dictionary value, under the language key is an instance of DjangoTranslation class, created with an argument language.
  non_capturing_groups is an empty list.
  var_obj is an instance of Variable class, created with an argument var.
  get the integer representation of the first element of bs, return it.
  define the method clear with an argument self.
  if self.verbosity is greater or equal to integer 1.
  split header string at string '\r\n', for every line in result,
  if fdel is not None,
  return a string '%02d' formated with self.data.month.
  print message to the standard output.
  if field.rel.through._meta.auto_created is true,
  import module sys.
  for every f in fields, if exclude is false, or if exclude is true and f is not contained in exclude, and only if f is not in ignored,
  for every app_name and namespace_list in pattern.app_dict.items method return value,
  default_validators is an list containing validators.validate_slug.
  if ValidationError, renamed to e, exception is caught,
  call the method cls with 3 arguments: value under the 'filename' key of file_dict, value under the 'content' key of file_dict,
  call the method self.as_tuple with an argument value under 'mailhost' key of config dictionary,
  if not,
  if the key doesnt exists call the six.String function and substitute the result for self.stream.   remove the 'fields' key from the options dictionary and substitute it for self.selected_fields,
  derive the class Command from the BaseCommand base class.
  define the method render with 2 arguments: self and context.
  derive class CachedDnsName from the object base class.
  sup_cls is base class of the class cls.
  subtract i from len_values, decrement the result by integer 1, substitute it for value under the 'revcounter' key of the loop_dict dictionary.
  if id_ is true,
  define the function sanitize_separators with an argument value.
  import pylibmc.
  if self._is_rendered is false.
  if prefix is true, substitute it for self.prefix, otherwise call the method self.get_default_prefix,
  return an empty list.
  from django.core.management.templates import TemplateCommand into default name space.
  from django.forms.widgets import TextInput, NumberInput, EmailInput, URLInput, HiddenInput, MultipleHiddenInput, ClearableFileInput,
  if field.rel.to._default_manager has an attribute 'get_by_natural_key',
  substitute BytesIO for stream_class.
  do nothing.
  from django.utils.text import get_text_list into default name space.
  if ImportError exception is caught,
  evaluate method self.literal_regex.match with an argument domain_part, substitute the result for literal_match.
  call the function write_pot_file with 2 arguments: potfile and msgs.
  for every match in matches,
  skip this loop iteration.
  call the method lineno_comment_map.setdefault with 2 arguments: t.lineno and an empty list, append t.contents to the result.
  substitute value under level key of logging._levelNames dictionary for rv.
  import module collections.
  format string normal_row with an dictionary containing 6 entries: return value of the function force_text with an argument bf_errors,
  call the function force_str with argument self.obj, substitute the result for obj.
  if not,
  define the method subwidgets with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
  if domain_part is not contained in self.domain_whitelist and method self.validate_domain_part with an argument domain_part evaluates to false,
  disable_existing is boolean True.   call the method logging._handler.clear.
  try,
  append string '</select>' to output.
  get the value under the 'ignore_patterns' key of the options dictionary, substitute it for ignore_patterns.
  if not,
  call the method input with an argument msg and store the result in confirm.
  get the integer representation of the i-th element of buf, return it.
  from xml.sax.expatreader import ExpatParser as _ExpatParser into default name space.
  define the method _itervalues with an argument self.
  append list containing string '--no-wrap' to self.msgattrib_options.
  set response to None.
  output is a list containing an element: result of the function format_html called with 2 arguments: string '<select{0}>',
  for every handler in handlers,
  call the method self.tag with 2 arguments: function_name and compile_func.
  try,
  substitute queryset for self._queryset.
  _standard_context_processors is None.
  if content_disposition is true,
  return filename and display_url.
  media is an instance of Media class.
  if queryset is None,
  return boolean False.
  call the function f.process with 2 arguments: self and self.domain.
  return default.
  self.find_template_cache is an empty dictionary.
  import module '.management' from the package app_config.name.
  return klass.
  try,
  if custom_sql is empty,
  if data is an instance of bytes.
  call the Warning function with 4 arguments: string "MIDDLEWARE_CLASSES is not set.", hint tuple containing one string,
  if value under the 'author_email' key of the self.feed dictionary is not None,
  return result.
  define the function get_script_prefix.
  split str_number by '.', substitute the result for int_part and dec_part, respectively.
  call the import_string with arguments path, call the return function with arguments: unpacked list args and unpacked dictionary kwargs, return the result.
  if not,
  try,
  define the function linenumbers with 2 arguments value and autoescape set to None.
  try,
  from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space.
  return nothing.
  call the method parser.compile_filter with an argument value, substitute the result for value under the name key of kwargs dictionary.
  call the method g.flatten with arguments self and unixfrom set to unixfrom.
  if self.is_bound is false,
  if first element of e.args is not contained in not_found,
  call the function get_mod_func with an argument lookup_view, store the result in mod_name and func_name, respectively.
  call the method t.to_language, return the result.
  try,
  call the function warnings.warn with 3 argument: string "AppCommand.handle_app() is superseded by AppCommand.handle_app_config().",
  second 2 elements of seventh element of hextets converted into hexadecimal number,   first 2 elements of eight element of hextets converted into hexadecimal number,   second 2 elements of eight element of hextets converted into hexadecimal number.   join first 5 elements of hextets into a string, separated by ':', substitute the result for result.
  define the function make_decorator with 2 arguments: unpacked list m_args and unpacked dictionary m_kwargs.
  otherwise if cls._delegate_bytes is true,
  return raw_data.
  call the method field.value_to_string with an argument obj, use the result as an argument for the call the method self.xml.characters.
  if count of occurrence of '::' in ip_str equals integer 1,
  _assertCountEqual is a strnig "assertItemsEqual".
  call the method attachment.set_payload with an argument content.
  call the method nodelist.render with an argument context, return the result.
  default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid date.' for 'invalid'.
  call the method parser.parse with an argument tuple with an element string 'endverbatim', substitute the result for nodelist.
  call the method cursor.execute with string "DELETE FROM %s WHERE expires < %%s" as argument,
  call the method self._cache.set with key, value, self.get_backend_timeout(timeout) as arguments.
  call the function add_arguments with parser as an argument, from the base class of the Command class.
  raise an TemplateSyntaxError with an argument string "%r tag takes at least one argument: the name of the template to be included.",
  substitute parent_instance for self.parent_instance.
  set result attribute name to value value.
  return self.parent_instance.
  if self equals to other return boolean False, otherwise return boolean True.
  derive the class FileUploadHandler from the object base class.
  args is a list containing arg surrounded by double quotes for every arg in args.
  substitute self.pointer for i.
  append newline to plural_form_line, substitute the result for line.
  call the function quote with return value of the evaluated function force_bytes(iri),
  if KeyError exception is caught,
  old_handler is None.
  call the method MIMEMultipart.__setitem__ with arguments self, name and val.
  define the function b64_decode with an argument s.
  if not,
  substitute connection.queries for value under the 'debug' key of the context_extras dictionary.
  substitute result for the value of the memo dictionary, with identity of the self object as an key.
  origin is an instance of StringOrigin class created with an argument template_string.
  return a tuple containing 3 entries: output, result of the function force_text, called with 3 arguments: errors,
  define the method has_key with 2 arguments: self and key.
  if self.is_bound is true,
  raise a SerializerDoesNotExist exception with an argument format.
  if self has an '_post' attribute,
  import module sys.
  set move.name attribute of the _MovedItems to move.
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  if not,
  substitute length of prefixed for pflen.
  define the method __init__ with 5 arguments: self, max_length set to None, min_length set to None, unpacked list args,
  if valu is an instance of list type,
  define the method prepare_value with arguments self and value.
  if sys.platform starts with string 'java',
  format, if its true, otherwise string 'DATE_FORMAT' and use_l10n as use_l10n, return the result.   define the function time_format with 3 arguments: value, format set to None and use_l10n set to None.
  call strip s of the surrounding whitespaces, substitute every occurrence of the whitespace in the trim_whitespace_re with previous result, return the result.
  from django.core.files import locks and File into default name space.
  for every cache_alias in settings.CACHES,
  if model._meta.proxy is false and return value of the function router.allow_migrate called with arguments using and model is true,
  from django.core.management.base import BaseCommand and CommandError into default name space.
  raise an ValidationError with 2 arguments: dictionary self.error_messages value under the key 'list',
  if key is contained in d,
  with all occurrences of '%s' replaced with app_name and model._meta.object_name, respectively.   try,
  define the method _createdir with argument self.
  define the method end_serialization with an argument self.
  substitute form.instance.pk for pk_value.
  update self.filters dictionary with lib.filters.
  if val is None,
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  if not,
  _format_cache is an empty dictionary.
  dest as a string 'no_obsolete', default as boolean False and help as a string "Remove obsolete message strings.".   call the method parser.add_argument with 5 arguments: string '--keep-pot', action as a string 'store_true',
  call the function mark_safe with an argument output.
  call the os.path.splitext with argument file_name, assign the result to the file_root and file_ext respectively.
  remove 'end' key from the kwargs dictionary, if it exists substitute it for end, if not end is None.
  substitute new_filenames for filelist.
  call the method activate with an argument self.timezone.
  yield subnode.
  define the function _check_middleware_classes with app_config set to None and kwargs dictionary as arguments.
  child_loggers is an empty list.
  if not,
  source and previous result.   if TemplateDoesNotExist exception is caught,
  ns_pattern is an empty string.
  raise an NotImplementedError with an argument string 'Subclasses must implement this method.'.
  create list of first remaining elements of chunk, substitute it for emitting.
  call the method self.reader_leaves.
  property decorator,
  get config dictionary element under 'loggers' key, if it exists substitute it for loggers, if not, loggers is EMPTY_DICT.
  call the function contains with 2 arguments: elt and inst, if it evaluates to true,
  concatenate string '%0', width and string "d. %s", format the previous string with i incremented by 1 and line,
  call the method self.run_validators with an argument out.
  convert language to lowercase and return it.
  with all occurrences of '%s' replaced with app_name and model._meta.object_name and e, respectively.   finally perform,
  append first 49 elements of self._unget_history to list containing num_bytes, substitute the result for self._unget_history.
  define method readline with self class instance and size set to None.
  return settings.DEBUG.
  if errors is None,
  response.streaming_content is an empty list.
  define the function get_valid_filename with an argument s.
  define the method get with 3 arguments: self, key and default set to None.
  call the method queryset.filter with an argument unpacked dictionary containing self.instance for self.fk.name, substitute the result for qs.
  option_value is an empty string.
  return an instance of CsrfTokenNode class.
  call the method self.loaddata with an argument fixture_labels.
  substitute new_second_item with second_item.
  append truncate to text, return the result.
  boolean True for 'ask_merge'.   for every app_label and migration_names in result of the method conflicts.items,
  define the function is_valid_ipv6_address with an argument ip_str.
  define the method __iter__ with an argument self.
  if not,
  call the method template.render with an argument context, return the result.
  try,
  substitute parts, without the first element, for path.
  remove the 'stream' key from the options dictionary and substitute it for self.stream,
  call the function get_supported_language_variant with 2 arguments: lang_code and strict set to strict, return the result.
  define the method _iter with an argument self.
  if not,
  post is a string '<could not parse>'.
  inner is an instance of NonCapture, created with elements of result from start index to the end.
  define the method get_full_path with an argument self.
  if self.LibraryValueNotFoundException exception is caught,
  define the method _resolve with an argument self.
  divide num by self._cull_frequency, floor the result and substitute it for cull_num.
  call the method pytz.timezone with an argument settings.TIME_ZONE, substitute the result for _localtime.
  define the method d with an argument self.
  call the function re.compile with 2 arguments: raw string '<.*?>|((?:\w[-\w]*|&.*?;)+)' and bitwise OR performed with 2 operands,
  if val is an instance of tuple,
  define the method __init__ with 6 arguments: self, loopvars, sequence, is_reversed, nodelist_loop and nodelist_empty set to None.
  return None.
  found is boolean False.
  from django.utils import six into default name space.
  call the function add_to_builtins with an argument string 'django.template.defaultfilters'.
  call the method handler.addQuickElement with 2 arguments: string 'id' and unique_id.
  call the sys.exc_info function, assign the result to et, ev and tb, respectively.
  from functools import wraps into default name space.
  with an argument: value under the name key of the media_attrs dictionary, if it exists, if not use None as an argument.   define the method __str__ with an argument self.
  substitute self.fixture_dirs for fixture_dirs.
  return boolean True.
  from django.core import signals into default name space.
  position the file pointer at the start of the self.file file.
  define the method __new__ with 3 arguments: cls, unpacked list args and unpacked dictionary kwargs.
  call the method clean with an argument data from the base class of the class FileField, return the result.
  derive the class Media from the object base class.
  raise an ValueError exception with an argument string 'Unable to configure handler %r: %s' formated with name and e.
  get the next element of iterable self, substitute it for chunk.
  try,
  called with 2 arguments: request and response.   call the method response.add_post_render_callback with an argument callback.
  call the method timezone.make_naive with arguments: expires, timezone.utc, substitute the result for expires.
  define the function server_bind with an argument self.
  call the method match.groupdict, substitute the result for kwargs.
  return select_html.
  return proxy.
  substitute the result for filter_re.   derive the class FilterExpression form the base class object.
  called with an argument error, for every error in bf.errors, substitute the result for bf_errors.   if bf.is_hidden is true,
  call the function ngettext with 3 arguments: singular, plural and number, use the result as an argument for the call to the force_text,
  if not,
  if self.max_value is not None,
  return self.data.hour.
  tpl is an string "EntitiesForbidden(name='{}', system_id={!r}, public_id={!r})".
  seen is an empty set.
  widget.input_type is a string 'hidden'.
  raise a CommandError exception, with string "No migrations present for: %s" as argument, substitute '%s' in previous string with,
  substitute serializers for _serializers.
  if not,
  call the method match.group with an argument integer 0, return the result.
  connection_params is a dictionary with 1 initial entry: return value of the function DNS_NAME.get_fqdn for 'local_hostname'.
  define the method add_filters with 3 arguments: self, filterer and filters.
  break from the loop execution.
  define function color_style, without input arguments.
  message, settings.SERVER_EMAIL, list of second elements of a for every a in settings.Managers and connection set to connection,   as arguments, assign the result to mail.   if html_message is true,
  if s is the instance of the object six.text_type,
  if USE_INOTIFY is true,
  call the function get_supported_language_variant with an argument accept_lang, return the result.
  set attr attribute of the self object to value.
  remove first 2 and last 2 elements from var.
  call the method self._archive.close.
  if OSError, renamed to err, is caught,
  if key is contained in cache,
  substitute empty bytes string for self.buffer.
  substitute context for self.context_data.
  substitute value under the 'database' key of the options dictionary for database.
  if use_grouping is true and grouping is greater than integer 0, use_grouping is boolean True, otherwise it is boolean False.
  if colors is true and last element of colors is contained in color_names,
  substitute widget for self.widget.
  'determine whether string is singular or plural.', where '%s' is replaced with number.   if not,
  if self._is_rendered is false,
  slice the rawdata from k to endpos, then take the first 20 elements of the previous slice,
  define lambda function that returns self.file.truncate field, use it as an argument for property function, put the result in truncate.
  substitute content_type for self.content_type.
  define the method usage with arguments self and subcommand.
  if not, substitute template_dirs for key.   get the value under the key key of the self.template_cache dictionary, substitute it for template_tuple.
  result of the function literals called with an argument string "/= /" and next as a string 'reg', to the both_before,   appended both_after to the previous result, for 'div' and appended list with an element instance of a class Tok,   created with 3 arguments: string "regex",   raw string '/([^*\\/[]|\\.|\[(   [^\]\\]|   \\.)*\])(   [^\\/[]|   \\.|   \[(   [^\]\\]|   \\.)*\])*/[a-zA-Z0-9]*',   and next as a string 'div', to the both_before, appended both_after to the previous result for 'div'.   define the method __init__ with an argument self.
  if content is None, raise an error.
  call the method re.compile with an argument raw string "&(#?[xX]?(?:[0-9a-fA-F]+|\w{1,8}));", substitute the result for _entity_re.
  call the function datetime.utcnow, substitute the result for now.
  ip_address_validator_map is a dictionary containing 3 initial entries: tuple containing 2 elements: list with an element,  validate_ipv46_address and return value of the function _ with an argument string 'Enter a valid IPv4 or IPv6 address.' for 'both',
  substitute first element of fks_to_parent for fk.
  return value.
  for every form_errors in self.errors sum length of return value of the method self.non_form_errors and length of form_errors, return the result.
  define the method __init__ with 7 arguments: self, file set to None, name set to None, content_type set to None, size set to None, charset set to None and content_type_extra set to None.
  try,
  if self.data.day equals integer 11, 12 or 13,
  if elt is an instance of six.string_types class,
  call the method tf.format with an argument format_string, return the result.
  get the 'value' attribute of the _urlconfs, if it exists return it, otherwise return defaults.
  if file_ext is contained in command.extensions, is_templatized is boolean True, otherwise it is boolean False.
  define the method defalt with arguments self and o.
  substitute complain for insert.
  substitute index for self.index.
  if TypeError exception is caught,
  define the method _add_installed_apps_translations with an argument self.
  from django.utils import six into default name space.
  call the method self._assert_mutable.
  yield string "from __future__ import unicode_literals" as the result.
  convert value to an integer, return it.
  get value under 'target' key of config dictionary, use it as a key to get the value from the dictionary,
  substitute compare_to for value under the state_frame dictionary under the self key.
  if first element of params equals a string 'context',
  call the method self.nodelist.render with an argument context, return the result.
  if second element of url_fields is false,
  derive the class BaseModelForm from the BaseForm base class.
  call the BaseConverter function with BASE64_ALPHABET and sign set to '$' as arguments, store the result in base64.
  as_form is boolean True.
  skip this loop iteration.
  if the UnicodeEncodeError exception is caught,
  do nothing.
  raise an exception.
  raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a modified_time() method'.
  from .messages import CheckMessage, Debug, Info, Warning, Error, Critical, DEBUG, INFO, WARNING, ERROR and CRITICAL into default name space.
  append mw_instance.process_request at the end of request_middleware.
  update declared_fields dictionary with entry base.declared_fields.
  raise an RuntimeError exception with an argument string "The method to extend accepted command-line arguments by the "
  if path is not initialized,
  define the method read with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  substitute arg converted into an integer for length.
  append self.pointer to self.backout.
  from django.conf import settings into default name space.
  factor is integer 0.
  derive class Command from the BaseCommand base class.
  define the function get_language_from_path with 2 arguments: path and strict set to boolean False.
  if value under the 'feed_url' key of the self.feed dictionary is not None,
  append pattern into a list patterns, for every possibility, pattern and defaults in possibilities.
  get the value under the index key of the hextets dictionary, remove the leading '0' characters,
  call the method field.rel.get_related_field, substitute the result for field.
  if key is contained in d,
  substitute the result for RFC1123_DATE.   call the function re.compile with an argument raw string '^\w{6,9}, %s-%s-%s %s GMT$' formated with __D, __M, __Y2 and __T,
  if url_info.netloc is false or url_info.netloc equals host, and if url_info.scheme is false or url_info.scheme equals,
  define the method __getstate__ with an argument self.
  to_locale called with an argument lang_code, if the result is not None,   return boolean True.
  index_output is an empty list.
  try,
  call the function safe_join with 2 arguments template_dir and template_name, yield the result.
  with it replace %r in the string "junk characters in start tag: %r",   call the method self.error with the resulting string as an argument.   if string end ends with string '/>',
  do nothing.
  if UnicodeDecodeError exception is caught,
  return nothing.
  return commands.
  call the method self.add_root_elements with an argument handler.
  call the method self.as_widget with 3 arguments: instance of a class Textarea, attrs and unpacked dictionary kwargs, return the result.
  import module sta.
  for every receiver, _ and _ in receivers,
  define the method label_from_instance with 2 arguments: self and obj.
  call the function _ with an argument string 'PM', return the result.
  call the function flatten_result with an argument item, assign the result to res and args, respectively.
  from importlib import import_module into default name space.
  call the function _load_serializers.
  try,
  define the method splitext with arguments self and the_path.
  define the class Serializer from the PythonSerializer base class.
  convert pattern to lowercase, substitute it for pattern.
  call the method setlistdefault from the base class of the class QueryDict, with arguments key and default_list, return the result.
  derive the class DebugVariableNode from the VariableNode base class.
  return an instance of a NodeList class, created with arguments node, for every node in nodelist,
  call the method __init__ from the base class of the class AssignmentNode, with 3 arguments: takes_context, args and kwargs.
  if value is not contained in result,
  from django.utils.deprecation import RemovedInDjango20Warning into default name space.
  call the method self.func with an argument value.
  EventHandler.modified_code is I18N_MODIFIED.
  substitute cookie for c.
  content_length is None.
  call the method self.flo.read with an argument self.chunk_size, substitute the result for data.
  if value under the DEFAULT_CACHE_ALIAS key of caches dictionary equals to other, return boolean True, otherwise return False.
  if not,
  substitute HiddenInput for hidden_widget.
  ipv4_address is a string "%d.%d.%d.%d" formated with first 2 elements of seventh element of hextets converted into hexadecimal number,
  substitute key for result.key.
  define the method __init__ with 4 arguments: self, object_list, number, and paginator.
  call the method self.splitext with an argument guessed_filename, substitute the second element of the result for ext.
  from django.core.exceptions import ImproperlyConfigured into default name space.
  return first element of t converted to lowercase and second element of t, as a tuple.
  call the method notifier.read_events.
  define the method _create_alternatives with arguments self and msg.
  call the __init__ method from the base class of the TemporaryFileUploadHandler class with arguments: unpacked list args,
  resolved_args is an list with elements, return value of the method var.resolve with an argument context, for every var in self.args.
  define the method _get_page with self class instance, unpacked list args and unpacked dictionary kwargs as arguments.
  context is an instance of a class Context, created with 2 arguments: dictionary created by apllying options to unpacked dictionary containing 3 entries:
  call the connection.cursor method, substitute it for cursor.
  call the method formats.sanitize_separators with an argument value, substitute the result for value.
  add key to the self.bad_cookies set.
  call the method self.filter_function with 2 arguments func and unpacked dictionary flags, return the result.
  call the smart_text function with 3 arguments: field_value, value under the 'encoding' key of the options dictionary or,
  return self._callback.
  call the function msvcrt.get_osfhandle with return value of the _fd(f) function as argument, substitute the result for hfile.
  otherwise, get the 'alters_data' attribute of current object, if it exists and is true,
  define the method __str__ with an argument self.
  bitwise shift integer 1 to the left by 31 spaces, substitute integer 1 from the result, convert the result to a integer, substitute it for MAXSIZE.
  self.error_class called with an argument error_class set to string 'nonfield'.   define the method _raw_value with 2 arguments: self and fieldname.
  substitute hlen for dklen.
  match rest string with self.DOT_PATTERN regex, substitute the result for m.
  if not,
  if pop_context is true,
  substitute force_text for force_unicode.
  call the method connection.ops.sequence_reset_sql with 2 arguments self.style and models, substitute the result for statements.
  LOCK_SH is a integer 0.
  and code set to string 'required.   otherwise if self.required is false and value is false,
  FASTCGI_OPTIONS is a dictionary containing 16 initial entries: 'fcgi' for 'protocol', None for 'host', None for 'port',
  if length of bits is not zero,
  use global variable _standard_context_processors.
  return a dictionary with 2 entries: value under the 'language' key of the self.feed dictionary for "xml:lang",
  return dec.
  define the method __init__ with 3 arguments: self, language and deactivate set to boolean False.
  delete first element of bits.
  join elements of tags into a string, separated with '|', format string '(%s)' with it, substitute the result for tags_re.
  define the method __iter__ with an argument self.
  return boolean False.
  dest as a string 'exclude', action as a string 'append' and help as a string 'Locales to exclude. Default is none. Can be used multiple times.'.   call the method parser.add_argument with 5 arguments: string '--domain', string '-d', default as a string 'django',
  primary_keys is an empty list.
  raise an ValidationError exception with an argument errors,
  define the function split_url with an argument url.
  call the method urlparse with an argument url, substitute the result for bits.
  raise an TemplateSyntaxError exception with an argument string "Could not parse the remainder: '%s' from '%s'",
  if value is true,
  substitute self.unparsed_entity_decl for parser.UnparsedEntityDeclHandler.
  derive the class Token form the base class object.
  call the method self.get_available_name with argument name, substitute it for name.
  BASE2_ALPHABET is a string '01'.
  define the method __delitem__ with 2 arguments: self and key.
  if TypeError exception is caught,
  define the method sign with arguments self and value.
  call the method self.mapping.get with 2 arguments: self.tagtype and an empty list, return the result.
  define the method __init__ with 2 arguments: self and unpacked list dicts.
  help set to a string 'The file extension(s) to examine (default: "html,txt", or "js" '   'if the domain is "djangojs"). Separate multiple extensions with commas, or use -e multiple times.' and action as a string 'append'.   call the method parser.add_argument with 6 arguments: string '--symlinks', string '-s', action as a string 'store_true',
  return data.
  and RemovedInDjango19Warning.   call the __init__ method with unpacked list args and unpacked dictionary kwargs from the base class of the IPAddressField class.
  call the function user_function with 2 arguments: unpacked list args and unpacked dictionary kwds, substitute the result for result.
  slice the rawdata string from the k-th to the endpos-th index, remove the whitespaces from the start and the end of the string, substitute it for end.
  return the result of the function format_html called with 2 arguments: string '<input{0} />',
  close file_ file descriptor.
  define the method __setstate__ with 2 arguments: self and state.
  and result of the method self.__getstate__.   define the method __deepcopy__ with 2 arguments self and memo.
  call the function os.umask with an argument umask.
  get maximal element from roots and substitute it for root.
  substitute value under the 'suffix' key of dictionary d, substitute it for suffix.
  call the method self.render, return the result.
  skip this loop iteration.
  call the function handle_app with 2 arguments: app_config.models_module and unpacked dictionary options.
  compiled_parent.nodelist.get_nodes_by_type, called with an argument BlockNode.   call the method block_context.add_blocks with an argument blocks.
  if relative_dir is true,
  help is a tuple containing a string "Creates a Django app directory structure for the given app name in the current directory or optionally in the given directory.".
  call the method result.setFormatter with an argument formatter.
  call the sio.readline method with size as an argument, substitute the result for line.
  call the function six.reraise with 3 arguments: UnreadablePostError, UnreadablePostError instantiated with unpacked list e.args,
  if ImportError exception is caught,
  if ValueError, TypeError or OverflowError exceptions are caught,
  divide absolute offset by module 60, use the result to format string '%02d%02d', substitute it for hhmm.
  for every _ and nodelist in self.conditions_nodelists,
  where '%(field)s' is replaced with first element of unique_check, return the result.   if not,
  if last element of parts is contained in self.serialization_formats,
  call the function sys.exc_info with an argument exc_info.
  if PY3 is true,
  call the method self.setlistdefault with an argument key, extend the result with value_list.
  if commit is true and form has an attribute 'save_m2m',
  return duplicate.
  define lambda function that returns self.file.writelines field, use it as an argument for property function, put the result in writelines.
  if last element of host equals character ']',
  call the method self._existing_object with an argument pk, substitute the result for value under the 'instance' key of kwargs.
  substitute settings.ROOT_URLCONF for urlconf.
  write 79 '-' characters into self.stream file stream.
  define the function call_command with 3 arguments: name, unpacked list args and unpacked dictionary options.
  substitute the value under the 'app_label' key of options dictionary for app_label.
  if '_' is contained in locale,
  split msgs by newline characters, for every line in result,
  substitute save_m2m for self.save_m2m.
  if self._wrapped is empty,
  if file path absolute_path exists,
  call the method bmatch.group with an argument integer 1, if it evaluates to true,
  derive the class Deserializer from the six.Iterator base class.
  and time.tzinfo, return the result.   define the method date with an argument self.
  return current.
  for every handler in self._upload_handlers,
  define the function make_naive with 2 arguments: value and timezone.
  members is a list with elements member for every member in the result of the function self._archive.getmembers,
  substitute value for value.   return value converted into a boolean.
  define the method __getattr__ with 2 arguments: self and real_name.
  return url.
  break the loop execution.
  form is an instance of ManagementForm class, created with 3 arguments: self.data, auto_id as self.auto_id and prefix as self.prefix.
  default set to boolean False, help as a string "Just show what migrations would be made; don't actually write them.".   call the method parser.add_argument with 5 arguments: string '--merge', action as a string 'store_true', dest as a string 'merge',
  call the method __getitem__ from the base class of the class MultiValueDict, with an argument key, substitute the result for list_.
  call the method self.next_token, substitute the result for self.current_token.
  self.add_prefix called with an argument name, substitute the result for value.   try,
  call the method operator.attrgetter with an argument _func_closure, substitute the result for get_method_closure.
  return None.
  self.stderr is an OutputWrapper object instance, created with value under the 'stderr' key of the options dictionary as an argument,
  if num_loopvars is not equal to len_item,
  define the method __repr__ with an argument self.
  LOCK_NB is a hexadecimal 1.
  if IndexError exception is caught,
  evaluates to true,   split middle into two parts from the right by '@' character, assign the resulting parts to local and domain.
  substitute elements of tuple boundary to end and next, respectively.
  code set to string 'invalid_pk_value and params with an entry: pk for 'pk'.   call the method self.queryset.filter with an argument, unpacked dictionary with an entry: value for string '__in' appended to key,
  call the method self.__dict__.copy, substitute the result for obj_dict.
  raw string '(?:<br clear="all">|<i><\/i>|<b><\/b>|<em><\/em>|<strong><\/strong>|<\/?smallcaps>|<\/?uppercase>)' and re.IGNORECASE,   substitute the result for html_gunk_re.   call the function re.compile with 2 arguments: raw string '((?:<p>(?:%s).*?[a-zA-Z].*?</p>\s*)+)',
  if i is greater or equal to integer 0,
  slice list unhandled_params from the beginning to the length of defaults last element,
  substitute int for integer_types.
  headerlist is an empty list.
  if LookupError exception is caught,
  if not,
  call the method self.make_key with key and version set to version as arguments, substitute it for key.
  instantiate class Truncator, with an argument value, call the method chars on the result with an argument length, return the result.
  return kwargs.
  substitute str for binary_type.
  bring integer 2 to the power of 31, subtract the result by 4, put the result into a list, append possible_sizes to it,
  decorator stringfilter,
  do nothing.
  otherwise if self._delegate_text is true,
  from django.core.management.color import no_style into default name space.
  ge the absolute path of the return value of the function path.expanduser with the argument target, substitute it for top_dir.
  with self.initLock,
  return otherwise.
  call the function prepare_js_for_gettext with an argument src_data, substitute it for src_data.
  msg is a string "The use of the language code '%s' is deprecated. Please use the '%s' translation instead.".
  replace '%s' in string "%s = %s" with key and value under the key key of the user_setting dictionary, append it to the output.
  if key is contained in dict_,
  call the method value.decode with an argument charset, substitute the result for value.
  __all__ is an list containing strings: 'activate', 'deactivate', 'override', 'deactivate_all', 'get_language',
  call the function formats.localize_input with 2 arguments: value and self.format if true, if not,
  buffer_types is a tuple with 3 elements: bytes, bytearray and memoryview.
  call the method parser.parse_args with argv, without the first 2 elements, substitute the result for options.
  define the _set_post method with self class instance and post as the arguments.
  return the first element of bits and an empty string.
  if six.PY3 is boolean True,
  if not,
  call the method __init__ from the base class of the BaseTemporalField class, with arguments: unpacked list args and unpacked dictionary kwargs.
  derive the class EmptyPage from the InvalidPage base class.
  define the method print_help with 3 arguments: self, prog_name and subcommand.
  call the function datetime.date with 3 arguments: y, m and d all converted into a integers, substitute the result for date_value.
  property decorator,
  formated with value under 'target' key of config dictionary and e.   otherwise if klass is a subclass of logging.handlers.SMTPHandler and string 'mailhost' is contained in config,
  derive the CommandParser class from the ArgumentParser base class.
  import fcntl.
  call the method custom_sql_for_model with model, no_style() and connection as arguments, substitute the result for custom_sql.
  call the function force_bytes with an argument salt, substitute the result for salt.
  called with an argument lang_code is true,   return lang_code.
  call the method self._post_clean.
  return None.
  increment year by integer 2000.
  define the method __str__ with an argument self.
  define the method __str__ with an argument self.
  derive the class Select from the Widget base class.
  call the __call__ method from the base class of the URLValidator class, with an argument url.
  assign the result to the value under the string ".moves.urllib_parse" appended to __name__ key of the sys.modules dictionary,   and to the value under the string ".moves.urllib.parse" appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_error from the _LazyModule base class.
  if pickled is not None.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  existing_headers is a set of lowercase headers for every header in vary_headers.
  use the result as an argument for the call to the function force_text, return the result.   call the function allow_lazy with 2 arguments: urlunquote and six.text_type, substitute the result for urlunquote.
  do nothing.
  if lengths of val1 and val2 are not equal,
  if name is true, substitute it for function_name, if not get '_decorated_function' attribute from func object, if it exists,
  define the function do_if with 2 arguments: parser and token.
  self.xml is a instance of SimplerXMLGenerator class created with 2 arguments: self.stream and value under the 'encoding' key of the
  if parent is false,
  define the private method __str__, with self instance of this class as the only argument.
  if value under the 'feed_copyright' key of the self.feed dictionary is not None,
  raise an TypeError exception with an argument sting "can't delete _wrapped.".
  remove config dictionary element under 'formatter' key, if it exists substitute it for formatter, if not, formatter is None.
  try,
  define the function escape_quotes with an argument m.
  put bcc into a list, assign it to self.bcc.
  call the method match.groupdict, use the result as an argument for the call to the function six.iteritems,
  substitute the result for netloc.   if UnicodeError exception is caught,
  otherwise if result of the call to the function _len with an argument cache is greater than or equal to maxsize,
  skip this loop iteration.
  if not,
  if not,
  define the function wrapper with 2 arguments: unpacked list args and unpacked dictionary kwds.
  if not,
  result of the call to the function _ with an argument string 'February' for 2,   result of the call to the function _ with an argument string 'March' for 3,   result of the call to the function _ with an argument string 'April' for 4,   result of the call to the function _ with an argument string 'May' for 5,   result of the call to the function _ with an argument string 'June' for 6,   result of the call to the function _ with an argument string 'July' for 7,   result of the call to the function _ with an argument string 'August' for 8,   result of the call to the function _ with an argument string 'September' for 9,   result of the call to the function _ with an argument string 'October' for 10,   result of the call to the function _ with an argument string 'November' for 11,   and result of the call to the function _ with an argument string 'December' for 12.   MONTHS_3 is an dictionary with 12 entries: result of the call to the function _ with an argument string 'jan' for 1,
  call the function warnings.warn with 3 arguments: msg, RemovedInDjango19Warning and stacklevel as integer 2.
  append resolved_args to a list containing context element, substitute it for resolved_args.
  compile a regex from raw string '^\s*(\w+)\s*', substitute it for WORD_PATTERN.
  evaluate the function backend_cls with location and params as arguments, return the result.
  define the method _get_media with an argument self.
  decorator function register.filter with an argument is_safe set to boolean True.
  if self.is_bound is true,
  get the value from the options dictionary under the key 'interactive', substitute it for self.interactive.
  raise an ImproperlyConfigured exception with argument string 'Could not create directory for saving email messages: %s (%s)',
  yield d.
  import module re.
  call the method self.non_field_errors, substitute the result for top_errors.
  if app_config.models_module is None,
  slice the path list from the result of the match.end method as the start index to the end, substitute it for new_path.
  app set to app_config.models_module, create_models set to create_models, verbosity set to verbosity, interactive set to interactive,   and db set to db.   define the function emit_post_migrate_signal with 4 arguments: created_models, verbosity, interactive and db.
  assign the bits elements to tag, this_value_expr, max_value_expr, max_width, as_ and asvar.
  convert the value under the 'SERVER_NAME' key of the self.META dictionary to a string, substitute result for server_port.
  define the method create_var with 2 arguments: self and value.
  define the function unordered_list with 2 arguments value and autoescape set to None.
  call the function load_command_class with arguments app_name and subcommand, substitute the result for klass.
  call the function time.strftime with 2 arguments: fmt and and timetuple without the first element,
  title is an empty string.
  define the method value_from_datadict with 4 arguments: self, data, files and name.
  and help='Raise on exception'.   call the method parser.add_option with 5 arguments: string '--no-color', action set to a string 'store_true',
  call the method __init__ with an argument initlist from the base class of the class ErrorList.
  substitute bits without the first element for remaining_bits.
  if field.rel has an 'to' attribute,
  call the function run with 5 arguments: self.addr, self.port converted to an integer, handler, ipv6 set to self.use_ipv6,  and threading set to threading.
  call the method __setitem__ from the base class of the class MultiValueDict, with 2 arguments key and list containing element value.
  decorator stringfilter,
  from django.core import mail into default name space.
  define the function avoid_wrapping with an argument value.
  pop value under the 'ipv6' key of the kwargs dictionary, if it is true,
  call the method self.validate_key with argument key.
  define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  subtract length of the ext from the integer 255, take first elements of the name list up to the previous result index,
  months is a tuple with 12 elements: strings 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov' and 'Dec'.
  substitute timezone for self.timezone.
  if AttributeError exception is raised,
  call the method s.getvalue, return the result.
  for every f in opts.fields,
  return an instance of LoaderOrigin class, created with 4 arguments: display_name, loader, name and dirs.
  define the method handle_data with 2 arguments self and d.
  __all__ is a list containing next strings, 'CheckMessage', 'Debug', 'Info', 'Warning', 'Error', 'Critical',
  call the method tag.groups, substitute the result for closing_tag, tagname and self_closing, respectively.
  where '%s' is replaced with app_or_project and extensions joined into a string, separated by a string ', '.   call the method self.stdout.write, with an argument string "Rendering %s template files with filenames: %s\n",
  substitute abspath for abspathu.
  define the function sql_create with 3 arguments: app_config, style and connection.
  if not,
  if issues is true,
  call the method value.center with an argument, arg converted into a integer, return the result.
  for every log in existing,
  raise an ValueError exception.
  if sys.platform starts with string 'java',
  self._called_from_command_line is boolean True.
  define the method __init__ with arguments: self, host set to None, port set to None, username set to None, password set to None,
  get the value under the 'database' key of the options dictionary, use it as the key to get the value from the connections dictionary, substitute the result for connection.
  if not,
  call the re.compile function with self.regex and self.flags as arguments, substitute the result for self.regex.
  if not,
  for every sub_stream in boundarystream,
  if self.max_length is not None,
  widget_value is None.
  join elements of hextets into a string, separated with ':', substitute it for result.
  derive the class SimpleTemplateResponse from the HttpResponse base class.
  value under the ORDERING_FIELD_NAME key of the form.fields is an instance of IntegerField class, created with 3 arguments:
  create dictionary out of the unpacked dictionary options, using defaults.__dict__ as a mapping function, substitute the result for defaults.
  if self.forms is true,
  call the method dict.__getitem__ with 2 arguments self and key, substitute the result for value.
  define the method add_arguments with 2 arguments self and parser.
  call the function converter with an argument suffix, substitute the result for value.
  call the method self.make_key with key and version set to version as arguments, substitute the result for key.
  call the method self.tzname with an argument dt, substitute the result for self._tzname.
  derive the class Origin form the base class object.
  call the method self.set_charset with utf8_charset as an argument.
  try,
  tuple with 2 arguments: gzip.GzipFile and string 'rb' for 'gz', tuple with 2 arguments: SingleZipReader and string 'r' for 'gzip'.   if has_bz2 is true,
  use_func is boolean True.
  call the self._delete method with argument f.name.
  call the method self._populate.
  call the function do_ntranslate with 3 arguments: singular, plural, number and string 'ngettext', return the result.
  append '0' to digits.
  call the method lookups.appendlist with 2 arguments: pattern.name and a tuple containing 3 elements: bits, p_pattern,
  handler is an instance of SimplerXMLGenerator class, created with 2 arguments: outfile and encoding.
  substitute str for string_types.
  define the function do_extends with 2 arguments parser and token.
  append att_name to used_column_names list.
  from django.forms.forms import everything into default name space.
  raise an ValueError with an argument string 'ModelForm has no model class specified.'.
  if any element of self.dicts is true, return boolean True, otherwise return boolean False.
  for every key and value in return value of the parse_qsl with 3 arguments: query_string is it exists or an empty string if not,
  define the method is_multipart with an argument self.
  derive the class ImmutableList from the tuple base class.
  if timeout is None,
  for every shell in available_shells,
  call the function urlquote with 2 arguments value and unpacked dictionary kwargs, return the result.
  if self.takes_context is true,
  TRAILING_PUNCTUATION is a list with 7 elements: '.', ',', ':', ';', '.)', '"' and '\''.
  if zlib.error as e exception is raised,
  get the value under the 'use_base_manager' key of the options dictionary, substitute the result for use_base_manager.
  define the function wrap with 2 arguments text and width.
  call the mail.send method with fail_silently=fail_silently as argument.
  call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
  if self.interactive is true,
  if not,
  call the form.is_valid method, if it evaluates to false,
  delete entry under the attr key of the attrs dictionary.
  remove 'BACKEND' key from params dictionary and put it into backend.
  call the function force_text with an argument error, return the result.
  if character '=' is contained in x,
  from django.utils.six.moves.urllib.parse import urlparse into default name space.
  with '%s' substituted for name_str, as argument.   run_syncdb is boolean False.
  if self.timezone is None,
  if encoding is false.
  from django.utils.six.moves.urllib.parse import quote, unquote, urlsplit and urlunsplit into default name space.
  import module sys.
  evaluate the function smart_text with argument self.name, if exists, or an empty string, if not, return the result.
  format string ' pgettext(%r, %r) ' with message_context and g, write it to out.
  if app_config.models_module is None,
  call the method self.filter_expression.resolve with an argument context, substitute the result for output.
  for every cat in value under the 'categories' key of the self.feed dictionary.
  if field equals NON_FIELD_ERRORS and opts.error_messages is true and NON_FIELD_ERRORS is contained in opts.error_messages,
  for every k and v in return value of the method self.kwargs.items.   return resolved_args and resolved_kwargs.
  help is a string "Checks the entire Django project for potential problems.".
  format translated with rhs, substitute the result for translated.
  and result of the function force_str called with an argument safe,   use the result as an argument for the call to the function force_text, return the result.   call the function allow_lazy with 2 arguments: urlquote_plus and six.text_type, substitute the result for urlquote_plus.
  call the function dateformat.format with 2 arguments: value and result of the function get_format called with 2 arguments:
  convert values into a list, substitute it for value.
  if urlconf_name is true,
  define the method __init__ with 2 arguments: self and nodelist.
  do nothing.
  from django.core.mail.backends.console import EmailBackend as ConsoleEmailBackend into default name space.
  return self._choices.
  call the method self.get_resolved_arguments with an argument context, substitute the result for resolved_args and resolved_kwargs.
  if self.active_writers and self.waiting_writers both equal to integer 0,
  try,
  define the method accessed_time with arguments self and name.
  if ImportError exception is caught,
  if can_fail is true,
  value under the MISSES key of the stats dictionary, maxsize and length of cache.   define the function cache_clear.
  define the method __bool__ with argument self.
  help is a string 'Discover and run tests in the specified modules or the current directory.'.
  call the method self.create_select with 6 arguments: name, self.month_field, value, month_val, choices and self.month_none_value,
  substitute the result for base and tail_ext.   get the value under the tail_ext key of the extension_map dictionary, substitute it for cls.
  define the method unsign with arguments self, value and max_age set to None.
  define the method __mod__ with 2 arguments: self and rhs.
  instantiate a class Group with 2 arguments: string "%%(%s)s" formated with param, and None, append it to result.
  define the function truncatechars_html with 2 arguments value and arg.
  define the function _long_to_bin with 2 arguments: x and hex_format_string.
   self.locale_paths is an empty list.
  if not,
  call the function six.text_type with s as an argument, substitute result for s.
  convert value to an floating point number if it is not equal to integer 1,
  split self._wrapped into words, substitute the result for words.
  increment chunk by over_chunk.
  call the function parser.compile_filter with an argument arg for every arg in args from the index 1 to the index -2,
  if answer is false,
  substitute view_name for self.view_name.
  if is_templatized is true,
  for every tablename in tablenames,
  substitute namespace for self.namespace.
  if length of args is not equal to integer 2,
  define the function get_objects.
  if call to the function contains with 2 arguments: last element of result and Group, evaluates to true,
  if related is true,
  call the function quote_plus with 2 arguments: result of the function force_str called with an argument url,
  from email.message import Message into default name space.
  return an instance of ForNode class, created with 5 arguments: loopvars, sequence, is_reversed, nodelist_loop and nodelist_empty.
  if self.field.cache_choices is true,
  convert object self to a dictionary, return it.
  derive the class Loader from the BaseLoader base class.
  for every error in self.error_list,
  call the method f.save_form_data with 2 arguments: instance and value under the f.name key of cleaned_data dictionary.
  with 2 arguments: stream and Loader set to SafeLoader, and unpacked dictionary options,   yield one element of the itterable obj.
  self._is_rendered is boolean True.
  substitute the resulting list for none_model_fields.   missing_fields is difference between set containing none_model_fields and set containing result of the method,
  define the method writeString with 2 arguments self and encoding.
  help is a string "Updates database schema. Manages both apps with migrations and those without.".
  for every bit in bits,
  substitute code_changed for fn.
  convert it to a string and substitute it for value under the 'cookies' key of the state dictionary.   return state.
  substitute file for filename.
  if self._validate_unique is true,
  derive the class InvalidPage from the Exception base class.
  call the method self.get_renderer with 4 arguments: name, value, attrs and choices, call the render method on the result, return the result.
  and number set to number, return the result.   define the function ungettext_lazy with 3 arguments: singular, plural and number set to None.
  replace '%s' in the string "<BaseConverter: base%s (%s)>" with length of self.digits and self.digits, respectively, return the string.
  derive the class JSONSerializer from the object base class.
  define the method __init__ with 2 arguments: self and loaders.
  if with_base_fields is true,
  if plan_node is contained in loader.applied_migrations,
  append it to the string "  Target specific migration: ", use it as the argument for the call to the self.style.MIGRATE_LABEL method,   call the self.stdout.write method with previous return value as an argument.   if run_syncdb and executor.loader.unmigrated_apps is true,
  split ip_str into parts by ':', for every x in the result, calculate length of x, if any is smaller than integer 4,
  call the function exhaust with an argument self._input_data.
  get the value under the 'exclude' key of the options dictionary, substitute it for exclude.
  if AttributeError exception is caught,
  compare is a lambda function with arguments self, a and b, return value is boolean True if a is not b, otherwise it is False.
  return attachment.
  try,
  _meth_func is a string "im_func".
  raise an CommandError with an argument string "%s. Are you sure your INSTALLED_APPS setting is correct?", with '%s' replaced by e.
  get the value under the 'all' key of the options dictionary, substitute it for process_all.
  call the method re_newlines.sub with 2 arguments: '\n' and text, return the result.
  return self.empty_value.
  if lang_code is not None,
  derive the class RssFeed from the SyndicationFeed base class.
  return settings.LANGUAGE_CODE.
  append form to self.saved_forms.
  divide num_entries by self._cull_frequency, convert the result to an integer, call the random.sample function with filelist and previous result as arguments, substitute the result for filelist.
  if min_num is None,
  call the method handler.new_file with 6 arguments: field_name, file_name, content_type, content_length, charset and  content_type_extra.
  if length of parts is greater than integer 1 and last element of parts is contained in self.compression_formats,
  if filename ends with string ".pyc" or it ends with ".pyo",
  if settings.USE_THOUSAND_SEPARATOR is true,
  return out.
  if value is boolean False or boolean True or value is None or value is an empty string, do not perform the following,
  derive the class Rss201rev2Feed from the RssFeed base class.
  if data is empty.
  convert first 2 elements of django.VERSION into a strings, join them together, separated by a '.', substitute the result for docs_version.
  and unpacked dictionary kwargs.   instance.keyOrder is an empty list.
  call the function current, substitute the result for current.
  tried is an empty list.
  result of the call to the function _ with an argument string 'Tue' for 1,   result of the call to the function _ with an argument string 'Wed' for 2,   result of the call to the function _ with an argument string 'Thu' for 3,   result of the call to the function _ with an argument string 'Fri' for 4,   result of the call to the function _ with an argument string 'Sat' for 5,   and result of the call to the function _ with an argument string 'Sun' for 6.   WEEKDAYS_REV is an dictionary with 7 entries: 0 for 'monday', 1 for 'tuesday', 2 for 'wednesday', 3 for 'thursday', 4 for 'friday',   5 for 'saturday' and 6 for 'sunday'.
  call the method match.span, substitute the result for start an end, respectively.
  return a tuple with 3 elements: TYPE, outdict and stream.
  try,
  try,
  define the method utcoffset with 2 arguments: self and dt.
  if support_legacy is false,
  if TypeError or ValueError exceptions are caught,
  raise an MultiPartParserError with an argument string 'Invalid boundary in multipart: %s' is replaced with boundary.
  call the method self.data.replace with 2 arguments: month as integer 1 and day as integer 1, on the result call the method,
  result is an integer 0.
  yield self.
  if autoescape is true,
  token is an instance of Token class, created with 2 arguments: TOKEN_TEXT and token_string.
  self._handler_class is None.
  return an empty string.
  define initialization method __init__ with self class instance, unpacked list args, unpacked dictionary kwargs as arguments.
  define the function first with an argument value.
  for every f in self.instance._meta.fields,
  template_source_loaders is None.
  get the name key of the data dictionary, if the key exists return it, if not return None.
  join basedir, l and string 'LC_MESSAGES' into a path separated by '/' for every l in locales, assign the list to dirs.
  if hidden_fields is true,
  define function _to_tuple with s as an argument.
  from django.utils.safestring import mark_safe into default name space.
  if LookupError or TypeError exceptions are caught,
  if att_name equals string 'id' and extra_params equals a dictionary with 1 entry: boolean True for 'primary_key',
  call the function file_move_safe with tmp_path, fname, allow_overwrite set to boolean True as arguments.
  skip this loop iteration.
  original_lookup, RemovedInDjango20Warning and stacklevel set to integer 3.   call the method self.reverse_dict.getlist with an argument lookup_view, substitute the result for possibilities.
  if expires is an instance of datetime.datetime class,
  obj is an instance of Node class, created with 3 arguments: children, connector and negated.
  define the method next_token with an argument self.
  return self.DSTDIFF.
  return host.
  updates is an empty dictionary.
  call the cursor.execute method with statement as argument.
  call the method self.compile_filter with an argument token.contents, substitute the result for filter_expression.
  if not,
  if is_relation,
  call the function timedelta with an argument integer 0, return the result.
  if self._delegate_bytes is true,
  get the value under the 'indent' key of the options dictionary, multiply it with level, create a string containing number of  whitespaces equal to the previous result, append it to the string containing newline character, use the result as the argument for  the call to the self.xml.ignorableWhitespace method.
  property decorator,
  from django.db import models into default name space.
  return self.data.hour.
  for every line in sequence_sql,
  self.upload_handlers is an instance of ImmutableList, created with 2 arguments: self.upload_handlers,
  define the method t with an argument self.
  evaluate method self.has_key with key and version as arguments, if the result is true,
  define lambda function that returns self.file.readinto field, use it as an argument for property function, put the result in readinto.
  if exception ValueError or TypeError is raised,
  remove value under key key of self dictionary, if it doesnt exists return default, substitute the result for value.
  where '%s' is replaced with first upto elements of token string, token string elements from upto to start index,   and token string elements from start index to the end.   if var_obj is None,
  call the as_bytes method on the return value of the message.message method append to it '\n' character, use it as the argument for the call to the self.stream.write method.
  define the method common_logger_config with 4 arguments: self, logger, config and incremental set to boolean False.
  substitute _iteritems for iteritems.
  msguniq_options is an list with elements: string '--to-code=utf-8'.
  decorator function register.filter with an argument is_safe set to boolean True.
  if match is true,
  call the method netloc.encode with an argument string 'idna', on the return value call the decode method with string 'ascii' as argument, substitute the result for netloc.
  call the method expires.utcnow, subtract the result from expires, substitute the result for delta.
  from django.utils.six import StringIO into default name space.
  convert deader to lowercase, if it is contained in self._headers return boolean True, if not, return boolean False.
  substitute obj for self.data.
  define the method clean with an argument self.
  and request_repr, respectively.   reporter is an instance of ExceptionReporter class, created with 3 arguments: request, is_email as boolean True,
  define the method get with 4 arguments, self class instance, key, default set to None and version set to None.
  call the method objects.using with an argument using, call the method order_by on the result with an argument model._meta.pk.name,
  call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
  if filter_name is contained in self.filters,
  changed is boolean True.
  call the method start_ipython with an argument argv as an empty list.
  find first index of whitespace occurrence in line, add integer 1 to it, substitute the result for space.
  call the os.path.basename with path as argument, substitute the result for filename.
  define the method execute with an argument self,
  if not,
  substitute root for value under the NEXT key of the link dictionary.
  must_be_first is boolean False.
  if not,
  call the function thread.start_new_thread with main_func, args and kwargs as arguments.
  raise an TypeError with an argument string "relative imports require the 'package' argument".
  define the function pgettext with 2 arguments: context and message.
  call the method self.extend_nodelist with 3 arguments: nodelist, var_node and token.
  define the method delete with self class instance, key and version defaulting to None as arguments.
  append line to lines.
  biggest_number is maximum numbers element.
  use it as an argument for the call to the method self.style.MIGRATE_HEADING, write the result to self.stdout.   for every migration in app_migrations,
  evaluate the method self._cache.incr with key and negative delta as arguments, return the result.
  and 'Comment' for TOKEN_COMMENT.   FILTER_SEPARATOR is a string '|'.
  call the method self.data.isocalendar, return the first element of the result.
  if value is false or value is not an instance of list or tuple types,
  substitute the result for year.   call the method dt.timetuple, substitute the result for timetuple.
  if not,
  try,
  substitute var_obj for self.var.
  return dec.
  for every f in return value of the os.listdir function called with an argument command_dir, append f without 3 last elements to a list, only if f doesnt start with character '_' and doesnt ends with string '.py', return the resulting list.
  if not,
  fetch next entry for the database that cursor points into, substitute first element of it for num.
  substitute base.__name__ for class_name.
  define the function safe with an argument value.
  derive the class DebugLexer from the Lexer base class.
  if data_set is not equal to initial_set, return boolean True, otherwise return boolean False.
  define the method resolve with 3 arguments: self, context and ignore_failures set to boolean False.
  define the function make_middleware_decorator with an argument middleware_class.
  if UnicodeDecodeError exception is caught,
  call the method logging.Handler.__init__ with an argument self.
  field_notes is an empty list.
  call the method __init__ from the base class of the CommandParser class, with unpacked dictionary kwargs as argument.
  call the method base64.urlsafe_b64encode with an argument s, strip the result of the bytes string '\n=' from the right, return it.
  library set to memcache and value_not_found_exception set to ValueError.   property decorator,
  if level is not None,
  PALETTES is a dictionary containing 3 elements, a dictionary with 18 pairs of dictionary value and string keys for NOCOLOR_PALETTE,
  call the method tempfile.mkdtemp with 2 arguments: prefix set to prefix, suffix set to string '_extract', substitute the result for tempdir.
  do nothing.
  call the method now.replace with argument tzinfo set to None, substitute it for now.
  and unpacked dictionary kwargs.   call the __init__ method from the base class of the StreamingHttpResponse class, called with arguments: unpacked list args,
  call the method self.add_initial_prefix with an argument name, substitute the result for initial_prefixed_name.
  append string 'Form' to model.__name__, substitute the result for class_name.
  return an empty list.
  call the function mark_safe with an argument new_obj, substitute the result for obj.
  do nothing.
  substitute value under the f.name key of the labels dictionary for value under the 'label' key of kwargs dictionary.
  return value.
  call the function parser.compile_filter with an argument arg for every arg in args from first element to the end,
  substitute '%r' in string ' ngettext(%r, %r, count) ' with result of the function join_tokens, called with 2 arguments: singular,
  call the self.stdout.write method, with string "  Unapplying %s..." with '%s' replaced with migration and ending set to '', as arguments.
  define the method run with 3 arguments: self and unpacked dictionary options.
  if self.domain equals to string 'djangojs',
  from django.utils.text import Truncator, wrap and phone2numeric into default name space.
  call the method self.xml.endElement with an argument string 'field'.
  try,
  return ZERO.
  assign the return value of the function fn to change.
  __all__ is a tuple, containing strings 'NamedTemporaryFile' and 'gettempdir'.
  decorator stringfilter,
  call the method connection.introspection.table_names, substitute the result for tables.
  if origin is true,
  return self.
  from django.db.migrations.state import ProjectState into default name space.
  from datetime import datetime into default name space.
  if extra_classes has an attribute 'split',
  if not,
  skip this loop iteration,
  "misses", "maxsize" and "currsize".   derive class _HashedSeq from list base class.
  write string "  the new migration will be used for new installs. Once you are sure" to self.stdout.
  define the method _setup with an argument self.
  remove entry at the key key of the attrs dictionary.
  call the method bytes_to_text with 2 arguments: key and self.encoding, substitute the result for key.
  call the addr.encode method with string 'ascii' as an argument.
  define the method extra_forms with an argument self.
  from django.utils.encoding import force_text and filepath_to_uri into default name space.
  return a list with 5 elements: strings 'parse', 'error', 'request', 'response' and 'robotparser'.
  derive the class RequestContext from the Context base class.
  call the function force_text with an argument option_value, substitute the result for option_value.
  from django.conf import settings into default name space.
  if last_bit is true,
  derive the class SuspiciousOperation from the Exception base class.
  derive the class ChoiceInput from the SubWidget base class.
  derive the class BaseContext from the object base class.
  return attrs.
  and elements of rfcdate from 12-th to the 25-th index.   define the function http_date with an argument epoch_seconds set to None.
  call the method self.choice with an argument obj, yield the result.
  self.waiting_readers is an integer 0.
  call the os.path.getsize function with argument self.file.name, return the result.
  call the method activate with an argument self.old_language.
  get translation_function attribute of the object t, call the result with an argument eol_message, substitute the result for result.
  get property attribute _get_height, and substitute it for width.
  get the value from META dictionary, under the 'HTTP_CONTENT_TYPE' key, if the key doesnt exist,
  invalid_var_format_string is None.
  call the method self.tag_function with an argument name, return the result.
  call the function normpath with an argument path, return the result.
  define the function resolve with arguments path and urlconf set to None.
  substitute widgets for value under the 'widgets' key of attrs dictionary.
  get the value under the settings.LANGUAGE_COOKIE_NAME key of the request.COOKIES dictionary, substitute it for lang_code.
  call the _expire_info.setdefault method with name and empty dictionary as arguments, substitute the result for self_expire_info.
  page_range is a property object with _get_page_range as a getter method.
  if not,
  if TemplateDoesNotExist exception is caught,
  substitute '%r' in string ' gettext(%r) ' with  result of the function join_tokens, called with 2 arguments: singular,
  call the function datetime.now, substitute the result to now.
  read file fp, call the method decode on the result with an argument settings.FILE_CHARSET, return tuple containing 2 elements,
  decorator python_2_unicode_compatible.
  substitute context for current.
  define the method has_other_pages with an argument self.
  get the value under the 'database' key of the options dictionary, use it as the key to get the value from the connections dictionary, substitute the result for connection.
  if url is false,
  raise an ValidationError with 2 arguments: self.error_messages dictionary value under the 'invalid_choice' key,
  if self.file_path file path exists and it is not a directory,
  import module fnmatch.
  from django.db.migrations.executor import MigrationExecutor into default name space.
  derive the class HttpResponseGone from the HttpResponse base class.
  call the function locks.lock with arguments fd and locks.LOCK_EX.
  define method _get_height with self class instance as the argument.
  return dictionary created with tuples with 2 elements: key and value under the key key of self dictionary, for every key in self.
  put cc into a list, assign it to self.cc.
  if settings.TEMPLATE_DEBUG is true,
  self.template_cache is an empty dictionary.
  if not,
  call the method parser.add_option with 3 arguments: string '--traceback', action set to a string 'store_true',
  define the method __len__ with an argument self.
  define the method create_parser with 3 arguments: self, prog_name and subcommand.
  import io.
  import module time.
  substitute error_messages under the message.code key of error_messages dictionary for message.message.
   substitute value under the KEY key of the root dictionary for oldkey.
  substitute limit_choices_to for self.limit_choices_to.
  call the method test_runner_class.add_arguments with an argument parser.
  if self.input_type equals string 'hidden' and self has an attribute 'input_type', return boolean True, otherwise return boolean False.
  from django.conf import settings into default name space.
  define the method get_many with 3 arguments: self, keys, and version set to None.
  decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
  substitute declared_fields for new_class.base_fields.
  return name converted to a string and val.
  return value of the function re.escape called with an argument BLOCK_TAG_START,   return value of the function re.escape called with an argument BLOCK_TAG_END,   return value of the function re.escape called with an argument VARIABLE_TAG_START,   return value of the function re.escape called with an argument VARIABLE_TAG_END,   return value of the function re.escape called with an argument COMMENT_TAG_START,   and return value of the function re.escape called with an argument COMMENT_TAG_END, substitute the result for tag_re.   libraries is an empty dictionary.
  result of the method ProjectState.from_apps with an argument apps and result of the method InteractiveMigrationQuestioner,   called with 2 arguments specified_apps set to app_labels and dry_run set to self.dry_run.   if self.empty is true,
  raise an ValueError with string "This file is not accessible via a URL." as argument.
  if dirname starts with character '.' or dirname equals a string '__pycache__',
  substitute self.parent_instance.pk for orig.
  get config dictionary element under 'format' key, if it exists substitute it for fmt, if not, fmt is None.
  if integers 3 and 2 in a tuple are smaller than the sys.version_info and sys.version_info is smaller than integers 3,4 and 4 in a tuple, respectively,
  from django.utils.six.moves import cPickle as pickle into default name space.
  derive the class ContentFile from File base class.
  if six.PY3 is true,
  from django.utils.encoding import force_str and force_text into default name space.
  evaluate the function smart_text with an argument value, return the result.
  call the method token.contents.split, substitute the result for bits.
  delete _active.value.
  if not,
  append the tempdir to self.paths_to_remove.
  call the method signals.request_finished.send with an argument sender set to self._handler_class.
  has_bz2 is boolean False.
  substitute the resulting list for digits.   while length of digits is smaller than or equal to absolute value of exponent,
  call the function reraise from the module six, with list of arguments exec_info.
  call settings.INSTALLED_APPS.
  if err_log is true,
  call the warnings.warn method with string '`request.REQUEST` is deprecated, use `request.GET` or `request.POST` instead.',
  substitute DictConfigurator for dictConfigClass.
  call the function empty_form with 3 arguments: auto_id as self.auto_id, prefix set to the return value of the self.add_prefix method,
  call the os.path.normpath with argument path, return the result.
  if check_path is true,
  if file path sql_file exists,
  do nothing.
  define the method __iter__ with an argument self.
  call the function context_class with 2 arguments: _dict and unpacked dictionary containing 4 entries:
  derive the class EscapeData from object base class.
  if length of version does not equals to integer 5, raise an exception.
  remove first element from model_dependencies, assign it to model and deps, respectively.
  call the function os.fdopen with arguments fd and mode, substitute it for _file.
  define the method __init__ with 5 arguments: self, attrs set to None, years set to None, months set to None and empty_label set to None.
  substitute parser for self.template_parser.
  append label_output to output.
  if self.old_timezone is None,
  call the method self._close_files.
  skip this loop iteration.
  call the function check_for_migrations with arguments app_config and connection.
  define the method __init__ with, self, server, params, library, value_not_found_exception as arguments.
  if app_config.path is true,
  from django.http import HttpResponse into default name space.
  define the method __init__ with 2 arguments: self and lexer.
  substitute error.error_dict for error.
  return boolean False.
  replace '%s' in string ', HTTP response headers must be in %s format' for charset, append it to e.reason.
  property decorator,
  call the function ugettext with an argument string "Please correct the duplicate values below.", return the result.
  remove file path_to_remove,
  raise an ValueError with an argument string "'%s.%s' has no ForeignKey to '%s.%s'.", where '%s' is replaced with,
  call the function find_template_loader with an argument loader_name, substitute the result for loader.
  raise CommandError with an argument string "Unable to serialize database: %s", where '%s' is replaced with e.
  call the method self._post.appendlist with 2 arguments: field_name and result of the function force_text called with 3 arguments:
  substitute the first 255 elements of ext for ext.
  if 'file_path' is contained in kwargs,
  define the method write with 2 arguments: self and val.
  default as boolean False and help as a string "Don't break long message lines into several lines.".   call the method parser.add_argument with 5 arguments: string '--no-location', action set to string 'store_true',
  return self.empty_form.media.
  subtract integer 12 from self.data.hour, return the result.
  define the function gettext with an argument message.
  get the value under the 'interactive' key of the options dictionary, substitute it for self.interactive.
  return text.
  append the result to the result of the method, self.as_widget, return the resulting string.   call the method self.as_widget, return the result.
  if mode is not contained in app_list_value,
  substitute prefix for common_prefix.
  call the method self.regex.search with an argument path, substitute the result for match.
   for every domain in domains,
  if an exception of the type UnicodeDecodeError, renamed to e, is caught,
  replace every occurrence of '</' in s with '<\\/'.
  define the method __deepcopy__ with arguments self and memo.
  incomment is boolean False.
  return context.
  call the method content.encode with an argument string 'utf-8', substitute it for content.
  if slots is not None,
  define the method resolve_expression with 3 arguments: self, obj and context.
  if length of self.backout is greater than zero,
  from django.utils.six.moves import html_parser as _html_parse into default name space.
  return no.
  if ImportError exception is caught,
  call the cursor method on the value under the db key of connections dictionary, preform following with return value named cursor,
  replace %s in string '    %s%s' with: line and character ',' if i is lesser than length of table_output decremented by one,
  if block is None,
  from django.utils import translation into default name space.
  call the method self.xml.startElement with an argument string 'natural'.
  substitute name for self.name.
  define the function timesince with d, now defaulting to None, reversed defaulting to False as arguments.
  call the method self.has_leading_dir with an argument namelist, substitute the result for leading.
  if ValueError exception is caught,
  if not,
  from django.utils.translation import ugettext and ungettext_lazy into default name space.
  self.current is an empty dictionary.
  call the method executor.loader.get_migration_by_prefix with arguments app_label, migration_name, substitute the result for migration.
  from subprocess import PIPE and Popen into default name space.
  if not,
  substitute '%s' in a string "Full migrations file '%s':" with writer.filename, append newline to it,
  substitute length of item for len_item.
  for bit in self.lookups,
  raise an TemplateDoesNotExist exception.
  targets is a list containing tuple with two elements, app_label and None.
  if s is an instance of an object bytes.
  return FormSet.
  call the params.get method with string 'KEY_PREFIX' and an empty string as arguments, substitute the result for self._key_prefix.
  for every loader_name in settings.TEMPLATE_LOADERS,
  from django.utils.http import cookie_date into default name space.
  raise an ValidationError with an argument errors.
  return value of the function quote called with arguments k and safe, and with return value of the function quote called with arguments v and safe.   if not,
  return tuple containing 3 elements: RAW, an empty dictionary and stream.
  call the method parser.add_option with an argument opt.
  if call to the function response.has_header with string 'Last-Modified' as an argument returns boolean False,
  call the method handler.endElement with an argument string 'channel'.
  if f equals to string '__pycache__',
  call the method self.execute, with 2 arguments: unpacked list args and unpacked dictionary cmd_options.
  define the method __init__ with arguments self, stream and boundary.
  substitute Iterator for create_bound_method.
  substitute (i+1)-th element of list_ for next_item.
  call the function do_ifequal with 3 arguments: parser, token and boolean False, return the result.
  position file self.file pointer at the pos position.
  if verbosity is greater or equal to integer 2,
  return dec.
  call the function datetime_safe.new_datetime with an argument date, on the result call the method strftime with an argument,
  instantiate class Truncator, with an argument value, call the method words on the result with 3 arguments length,
  help is a string "Starts a lightweight Web server for development.".
  if not,
  define the method __exit__ with 4 arguments: self, exc_type, exc_value and traceback.
  return the result.   sign is an empty string.
  if iterations is lesser than integer 0, raise an error.
  define the function valid_ident with an argument s.
  if cursor is true,
  define the method close with argument self.
  from __future__ import unicode_literals into default name space.
  call the LockFileEx function with 6 arguments: hfile, flags, integer 0, integer 0, hexadecimal value FFFF0000, return value of the byref function called with argument overlapped, substitute the result for ret.
  return result.
  remove the first element of context.
  do nothing,
  return boolean True.
  do nothing.
  crate a dictionary with app mapping and from the class Migration, created with arguments: string 'custom' and app,
  define the method __getitem__ with 2 arguments: self and name.
  if http_cookies.CookieError exception is caught,
  call the method self.validate_key with argument key.
  define the method __iter__ with an argument self.
  try,
  call the function factory with an argument unpacked dictionary kwargs, substitute the result for result.
  set value under the 'bindAddress' key of wsgi_opts to None.
  if length of args is greater than integer 1,
  substitute result.queryset for result.queryset.
  lock is an instance of RLock class.
  call the operator.add on the values of the self object converted into a dictionary, until it is reduced to a single value, return it.
  import module warnings.
  if self.method is not equal to string 'POST',
  derive class MovedAttribute from the _LazyDescr base class.
  return None.
  _moved_attributes is an empty list.
  define the method __init__ with 3 arguments: self, initlist set to None and error_class set to None.
  if not,
  substitute nodelist_empty for self.nodelist_empty.
  substitute first element of s for quote.
  call the function chain with 2 arguments: self.choices and choices, convert the result into a list and substitute it for choices.
  call the method chunk.find with an argument bytes string '\r\n\r\n', substitute the result for header_end.
  raise an ValueError with an string "Zip-compressed fixtures must contain one file.".
  call the method g.flatten with arguments self and unixfrom set to unixfrom.
  if _serializers is false,
  with name of the class type of the middleware_method instance, use it as the argument for call to the ValueError exception raise.   call the response.render() method and assign the return to the response.
  if every input_val in special_floats,
  from django.core.management.base import AppCommand into default name space.
  if source is an instance of Group class,
  do nothing.
  sorted_issues is a list of tuples with 5 entries: criticals and 'CRITICALS', errors and 'ERRORS', warnings and 'WARNINGS',
  add bits to a tuple, return it.
  define the function get_resolver with an argument urlconf.
  if e.errno does not equals to errno.ENOENT,
  if not,
  if Exception exception is caught,
  append the result at the end of string '.', append it all at the end of string cache_key.   if settings.USE_TZ is True,
  from django.utils.encoding import force_text and DEFAULT_LOCALE_ENCODING into default name space.
  if request.method equals to string 'HEAD',
  raise an ValueError exception with an argument string 'Not a valid Python identifier: %r' formated with s.
  call the function constant_time_compare with 2 arguments: sig and return value of the self.signature method with an argument value,  if it evaluates to true,
  append a tuple with 2 elements: f and f with first occurrence of the path replaced with an empty string, to self.choices.
  yield string "# into your database." as the result.
  define the method is_hidden with an argument self.
  if field.rel is None,
  call the function os.path.basename with an arguments path, substitute the result for filename.
  for every form in self call the method form.has_changed if any of the results evaluates to true, return boolean True,
  increment nesting by one.
  label is an empty string.
  get the value under formatter key of dictionary under 'formatters' key of self.config dictionary, substitute the result for formatter.
  remove config dictionary element under 'name' key, if it exists substitute it for name, if not, name is an empty string.
  get format_type attribute of the settings object, return it.
  substitute value under the attr key of flags dictionary for value.
  return _cached_filenames.
  for every func and args in self.filters,
  return node.
  if message_context is true,
  if PY3 is true,
  if self.match is not None,
  if not,
  call the method self._update_unget_history with length of bytes as an argument.
  define the method handle with 3 arguments: self, unpacked list labels and unpacked dictionary options.
  if not,
  append old_app_dir to app_dirs.
  for every message in email_messages,
  for every f in fields,
  if children is true, copy children list to self.children, otherwise self.children is an empty list.
  return value.
  raise an ContentNotRenderedError exception with an argument string 'The response content must be rendered before it can be pickled.'.
  error_messages as an dictionary with an entry: value under the 'invalid_date' of errors dictionary for 'invalid',   localize set to localize, and an instance of the class TimeField created with 3 arguments: input_formats set to input_time_formats,   error_messages as an dictionary with an entry: value under the 'invalid_time' of errors dictionary for 'invalid',   localize set to localize   call the __init__ method with fields, unpacked list args and unpacked dictionary kwargs from the base class of the SplitDateTimeField class.
  define the method __init__ with 3 arguments: self, attrs set to None and format is None.
  if self has an attribute '_size'.
  define the function autodiscover_modules with 2 arguments unpacked list args and unpacked dictionary kwargs.
  call the function self._key_to_file with key and version as arguments, substitute it for fname.
  return r.
  for key and value in result of the function six.iterlists called with an argument,
  called with 2 arguments: value rounded to 1 decimal point and integer 1.   move integer 1 left for 10 bits, substitute the result for KB.
  call the function io.open with 3 arguments: potfile, string 'w' and encoding set to string 'utf-8' as arguments,
  call the method self._setup.
  if statue is not equal to STATUS_OK.
  call the method apps.get_app_configs, for app_config in the result,
  import module posixpath.
  return a string '%02d' formated with self.data.month.
  define the function check_1_6_compatibility with argument kwargs dictionary.
  app is a string 'django'
  derive the class RegexURLResolver with LocaleRegexProvider as base class.
  import imp.
  for every date_key in date_keys,
  if self.pos is greater than or equal to self.tokens,
  define the function sanitize_address with arguments addr and encoding.
  if self.is_bound is true and self.errors is false, return boolean True, otherwise return boolean False.
  define the function to_bytes with arguments val and encoding.
  substitute message for self.message.
  define the function quote_etag with an argument etag.
  formated with c, filemsg and comment_lineno_cache.   call the function warnings.warn with 2 arguments: warn_msg and TranslatorCommentWarning.
  if ch is true,
  if VariableDoesNotExist exception is caught,
  if six.PY2,
  call the method bytes_to_text with 2 arguments: key and self.encoding, substitute the result for key.
  fp is a instance of a class six.StringIO.
  get func_name attribute from the mod object, substitute it for view_func.
  raise an BadSignature exception with an argument string 'No "%s" found in value', where '%s' is replaced by self.sep.
  if length of bits is not equal to integer 2,
  self._reverse_dict is an empty dictionary.
  define the function _lazy_proxy_unpickle with 4 arguments: func, args, kwargs and unpacked list resultclasses.
  if AttributeError exception is caught,
  define the function get_template with 2: template_name and dirs set to None.
  __slots__ is a string 'hashvalue'.
  for every basedir in basedirs,
  value under the field.attname key of the data dictionary is None.
  return s.
  input_type is a string 'file'.
  if self is an instance of nodetype,
  get the value 'allow_cascade' key of the options dictionary, if it exists substitute it for allow_cascade, otherwise allow_cascade is boolean False.
  substitute app_name for self.app_name.
  call the method widget_attrs with an argument widget, from the base class of the class IntegerField, substitute it for attrs.
  import module re.
  raise an TemplateDoesNotExist exception with an argument error_msg.
  define the method __delattr__ with 2 arguments self and name.
  define the get_str_from_wsgi function with environ, key and default as arguments.
  call the mimetypes.guess_type with an argument filename, assign the result to the mimetype and _, respectively.
  if not,
  daemonize is boolean False.
  return boolean False.
  define the method _assert_mutable with an argument self.
  and third element of result of the function sys.exc_info.   define the function import_by_path with 2 arguments dotted_path and error_prefix set to an empty string..
  from django.utils import six into default name space.
  do nothing.
  evaluate the self.getpos() and assign the result to the lineno and offset respectfully.
  if field.show_hidden_initial is false,
  if name converted to lower case equals to string 'subject',
  add model to excluded_models set.
  and re.VERBOSE, substitute the result for accept_language_re.   call the function re.compile with 2 arguments: raw string '^[a-z]{1,8}(?:-[a-z0-9]{1,8})*$' and re.IGNORECASE,
  num is an integer 0.
  return a string '<%s: %r>', format it with __name__ field of the self class and repr_attr.
  return response.
  call the function datetime.datetime with 3 arguments: value.year, value.month and value.day, substitute the result for result.
  define the method to_python with arguments self and value.
  inner_html is a string '<li>{choice_value}{sub_widgets}</li>'.
  called with with an argument lambda function which returns result of the force_text function called with an argument text.   define the method add_truncation_text with 3 arguments: self, text and truncate set to None.
  import module datetime.
  if six.PY2 is true and value is greater than sys.maxint,
  define the function translation with an argument language.
  call the method self.style.MIGRATE_HEADING with an argument string "Optimizing...", write it to self.stdout.
  substitute use_l10n for self.use_l10n.
  if command.verbosity is greater than integer 1,
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  import module os.
  substitute type.__init__ for __init__.
  call the method value.date, return the result.
  inplural is boolean False.
  if '/' is contained in path, and only if '\\' is contained in path and index of the first occurrence of '/' in path is lesser than,
  substitute value for value under the options key of options dictionary.
  call the method self._initialize_handlers,
  call the function quote with the result and with the safe set to bytes string "/~!*()'", return the function result.   define the function get_system_encoding without the input arguments.
  substitute self._request_middleware for request_middleware.
  define the method __repr__ with an argument self.
  call the method imatch.group with an argument integer 1, if it evaluates to true,
  define the method errors with an argument self.
  call the function validate_ipv46_address with an argument ip_address.
  if not,
  call the method content.decode with an argument string 'utf-8', substitute it for content.
  fname is a string "%s-%s.log", with '%s' replaced by timestamp and absolute value of the return value of the function id with argument self, respectively.
  define the method add with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
  call the method text.__html__, return the result.
  if self._num_pages is None,
  string '<select multiple="multiple"{0}>' and result of the function flatatt called with an argument final_attrs.   call the method self.render_options with 2 arguments: choices and value, substitute the result for options.
  call the method __init__ from the base class of the class DecimalField, with 4 arguments: max_value, min_value,
  for every app and names in key, value tuple pairs of conflicts dictionary join names into a string separated by commas,
  replace '%s' in string "Notice: Couldn't set permission bits on %s. You're probably using an uncommon filesystem setup. No problem.",
  get value under the 'propagate' key of the config dictioanry, if it exists substitute it for propagate, if not propagate is None.
  password set to auth_password, fail_silently set to fail_silently as arguments, assign the result to connection.   call the EmailMessage function wit subject, message, sender, recipient and connection set to connection,
  if smtplib.SMTPException exception is caught,
  append tok to c.
  if initial_forms is grater than self.max_num is grater or equal to integer 0,
  try,
  help is a tuple containing string "Creates a Django project directory structure for the given "
  call the function lazy_number with 5 arguments: ungettext, six.text_type, singular set to singular, plural set to plural,
  join self.namespaces into a string separated with character ':', substitute it for self.namespace.
  if first element of args is an instance of SafeData, and 'is_safe' attribute of dec._decorated_function object is true,
  if not,
  define the method to_python with arguments self and value.
  convert tagname to lowercase, substitute it for tagname.
  return nothing.
  define the method sync_apps with self class instance, connection and app_labels as arguments.
  call the method self._clean_form.
  define the method keys with an argument self.
  call the method tpl.format with an arguments self.sysid and self.pubid.
  if roots is false,
  call the function handle_default_options with an argument options.
  split tmp at '/' character, substitute the last element of the result for filename.
  docsring
  help is a string "Prints the CREATE INDEX SQL statements for the given model module name(s).".
  define the method __init__ with 3 arguments: self, filter_expr and nodelist).
  if TypeError exception is caught,
  first element of bits and first element of remaining_bits.   call the method parser.parse with an argument tuple, with an element string 'endwith', substitute the result for nodelist.
  output is an empty string.
  where '%s' is replaced with taglib and e.   return an instance of a LoadNode class.
  otherwise if obj is an instance of EscapeData,
  substitute the result for domain.   if UnicodeError exception is caught,
  define the function strip_spaces_between_tags with an argument value.
  for every refto and refs in return value of references.items method.
  if not,
  use the result as an argument for the call to the function datetime.fromtimestamp, return the result.   define the method modified_time with arguments self and name.
  substitute chr for int2byte.
  substitute a tuple with 2 elements: template and origin, for self.find_template_cache dictionary value under the key key.
  from django.utils.encoding import force_text and smart_text into default name space.
  define the method __str__ with an argument self.
  remove entry at the attr key of the declared_fields dictionary.
  from importlib import import_module into default name space.
  and, if f.rel.toequals parent_model or f.rel.to is contained in result of the call to the method parent_model._meta.get_parent_list.   if length of fks_to_parent is integer 1,
  substitute memoryview for memoryview.
  get the value under the 'symlinks' key of the options dictionary, substitute it for self.symlinks.
  call the method apps.get_model with an argument model_identifier.
  where '%d' is replaced with self.loaded_object_count and self.fixture_count, respectively.   if not,
  break the loop execution.
  call the method field_stream.read, substitute the result for data.
  define the method _html_output with 6 arguments: self, normal_row, error_row, row_ender, help_text_html and errors_on_separate_row.
  return obj.
  define the method __init__ with 2 arguments: self and field.
  for every el in split string cc_delim_re, with delimiter being the value of dictionary response under the key 'Cache-Control'.   if cc contains item 'max-age',
  try,
  format string ' gettext(%r) ' with g, write it to out.
  return EventHandler.modified_code.
  return statements.
  _get_request is getter function for REQUEST attribute of this class.
  return self._post and self._files.
  call the method self.model._default_manager.get_queryset with an argument qs.
  called with the argument microseconds set to integer 0, on the result of the method value.time.   return list containing 2 elements: None and None.
  call the function _helper with an argument value, use it as an argument for the call to the function mark_safe, return the result.
  call the function render_value_in_context with 2 arguments: value and context, return the result.
   self._template_response_middleware is an empty list.
  if loader is not None,
  define the method extract with 2 arguments: self and to_path set to an empty string.
  derive the class MultiPartParser from the object base class.
  if klass is not contained in cls.__dispatch,
  as the arguments, substitute the result for response.   append the request to the end of the protected class member response._closable_objects.
  if shell is true substitute list with element shell for available_shells, if not substitute self.shells for available_shells.
  call the function smart_urlquote with an argument string 'http://%s' formated with an argument middle, substitute the result for url.
  from email.utils import formatdate,  getaddresses,  formataddr and parseaddr into default name space.
  if new_name ends with string '_id',
  use its __name__ field as a key to get the value from self.tags, assign func to it.   return func.
  _version is a string "2.0".
  skip this loop iteration.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  self.cache_suffix converted to a string, appended to the character '*', call os.path.join with self._dir and fname as arguments,   filelist is a list containing all the previous results.   return filelist.
  open the file whose name is stored in the value under the 'pidfile' key of options dictionary and mode 'w', with the file descriptor as fp,
  if name is contained in lib.tags,
  define the function locale with an argument locale.
  call the method self.translate_token with an argument token, append the result to mapped_tokens.
  define the method self and blocks.
  return an instance of VariableNode class with an argument filter_expression.
  call the method LocaleRegexProvider.__init__ with arguments self and regex.
  self.META is an empty dictionary.
  call the function shutil.rmtree with 2 arguments: path_to_remove and onerror set to rmtree_errorhandler.
  call the function linebreaks with 2 arguments value and autoescape, use the result as an argument for the call to the mark_safe,
  call the self.stdout.write method with string "    Creating table %s\n" as argument, with all occurrences of '%s' replaced with model._meta.db_table.
  define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  call the method warnings.warn with string '"validate" has been deprecated in favor of "check".' and RemovedInDjango19Warning as arguments.
  if KeyError exception is caught,
  raise an NotImplementedError exception with an argument string 'subclasses of BaseArchive must provide a list() method'.
  substitute '%s' with self._dir converted to a string.   define the method key_to_file with self class instance, key and version defaulting to None as arguments.
  if self.verbosity is greater than integer 0,
  put a tuple with 2 elements: k and value under k key of self dictionary into a list, for every k in self.keyOrder,
  call the function now.replace with microseconds set to integer 0, substitute the result for now.
  define the method add_arguments with arguments self and parser.
  define the function _import_module with an argument name.
  call the method pyinotify.Notifier with wm and EventHandler() as arguments, assign the result to notifier.
  from django.core import signals into default name space.
  substitute last four elements of base for base.
  re.U and re.S, substitute the result for re_chars.   call the function re.compile with an argument raw string '\r\n|\r', substitute the result for re_newlines.
  return nothing.
  if self._is_rendered is true,
  for every p in plist,
  if the result is true or self.domain is not None,   raise an CommandError exception with an argument string "Type '%s help %s' for usage information.", where '%s' are replaced by:
  if ValueError, TypeError or ValidationError exception is caught,
  from django.utils import six into default name space.
  for every cache in return value of the function caches.all.
  call the function urlunsplit with an argument url_fields, use the result as an argument for the call to the function split_url,
  DEFAULT_DB_ALIAS for self.db.   remove the 'ignorenonexistent' key from the options dictionary, substitute the return value for self.db,
  return boolean False.
  if not,
  inverse_match is boolean False.
  define the function now.
  derive the class CheckboxSelectMultiple from the RendererMixin and SelectMultiple base classes.
  "Starting development server at http://%(addr)s:%(port)s/\n Quit the server with %(quit_command)s.\n",   where '"%(started_at)s' is replaced with now, '%(version)s' is replaced with return value of the method self.get_version,   '%(settings)r' is replaced with settings.SETTINGS_MODULE, '%(addr)s' is replaced with self.addr if self._raw_ipv6 is true,   or with self.addr if it is false, '%(port)s' is replaced with self.port and '%(quit_command)s' is replaced with quit_command.   call the method translation.activate with an argument settings.LANGUAGE_CODE.
  append self.choices to args.
  decorator function register.filter with an argument is_safe set to boolean True.
  substitute the result for value.   substitute tuple containing 2 elements: header and value for the value under the header converted to lowercase key of the self._headers dictionary.
  self.verbose_name_plural is a string 'cache entries'.
  call the function force_text with an argument s, strip the result of whitespaces from both ends,
  if IndexError exception is caugh,
  if first nine elements of block_content is string 'verbatim' or 'verbatim ',
  call the function import_library with an argument taglib_module, substitute the result for lib.
  self._app_dict is an empty dictionary.
  multiply x by length of from_digits add the return value of method from_digits.index with digit argument, substitute the result for x.
  created with an argument widget set to HiddenInput.   value under the MIN_NUM_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class,
  substitute filter_func for value under the name key of self.filters dictionary.
  call the self.style.HTTP_NOT_MODIFIED with an argument msg, substitute it for msg.
  substitute '%s' with return value of the function get_text_list called with 2 arguments:self.extensions converted into a list and string 'and'.   self.invoked_for_django is boolean False.
  BLOCK_TAG_START is a string '{%'.
  if not,
  define initialization method __init__ with self class instance, unpacked list args, unpacked dictionary kwargs as arguments.
  define the method _get_to_python with 2 arguments: self and field.
  call the method sign on the result with an argument value, substitute the result for value.   call the method self.set_cookie with 3 arguments: key, value and unpacked dictionary kwargs, return the result.
  call the function force_text with an argument field.help_text, format help_text_html with it, substitute the result for help_text.
  from django.utils.encoding import force_text into default name space.
  define the function lower with an argument value.
  and pk.rel.parent_link is true and function pk_is_not_editable called with an argument pk.rel.to._meta.pk evaluates to true,   if function pk_is_not_editable called with an argument pk evaluates to true, or pk.name is not contained in form.fields,
  define the function deconstructible with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  call the method __init__ from the base class of the class Textarea, with an argument default_attrs.
  from django.core.management.sql import sql_flush into default name space.
  call the method self.copy_plural_forms with arguments: msgs and locale, substitute it for msgs.
  If you see valid patterns in the file then the issue is probably caused by a circular import."   raise an ImproperlyConfigured exception with an argument: return value of the method msg.format, called with an argument name set to self.urlconf_name.
  if not,
  call the function new_method_proxy with an argument getattr, substitute the result for __getattr__.
  split token.contents into separate words, substitute the first element of the result for command.
  call the load method on the c class instance, with the cookie argument.
  join into a path: path and string '%s.pot', where '%s' is replaced with self.domain converted into a string.
  substitute complain for remove.
  call the method self.xml.startElement with arguments string 'object' and attrs.
  call the function date_format with 2 arguments: value and use_l10n as use_l10n, return the result.
  call the handle_filed method of the base class of the Serializer class, with arguments obj and field.
  if other is an instance of Promise class,
  if ':' is not contained in ip_str.
  with field_value as an argument, substitute the result for obj_pk.   return obj_pk.
  raise an CommandError exception with an argument string "Destination directory '%s' does not exist, please create it first.",
  call the method LocaleRegexProvider.__init__ with arguments self and regex.
  if comment_notes is true,
  append value to the self.sign, return the result.
  if opts.managed is true,
  call the function io.open with 3 arguments: potfile, string 'r' and encoding set to string 'utf-8' as arguments,
  call the method self._close_files.
  if self._is_rendered is false,
  otherwise if name starts with a string 'string',
  from django.conf import settings into default name space.
  return dec.
  call the method tpl.format with an arguments self.name, self.sysid and self.pubid.
  from __future__ import unicode_literals into default name space.
  output_transaction is boolean True.
  derive the class ExternalReferenceForbidden from the DefusedXmlException base class.
  return the result.   define the method render_option with 4 arguments: self, selected_choices, option_value and option_label.
  call the function getInnerText with an argument node, call the strip method on the result, substitute the result for field_value.
  for every ext in extensions,
  do nothing.
  while model_dependencies is true,
  if self.value equals self.choice_value, return boolean True, if not, return boolean False.
  _BROWSERS_DEPRECATED_LOCALES is an dictionary with 2 initial entries: 'zh-hans' for 'zh-cn' and 'zh-hant' for 'zh-tw'.
  substitute first element of level for common_ancestor.
  call the method _construct_form from the base class of the class BaseInlineFormSet, with 2 arguments: i,
  from importlib.util import find_spec as importlib_find.
  if file filename exists,
  default is boolean False and help is a string 'Use natural keys if they are available (deprecated: use --natural-foreign instead).'.   call the method parser.add_argument with 5 arguments: string '--natural-foreign', action set to string 'store_true',
  substitute current_app for self._current_app.
  _cached_modules is an empty set.
  use global variable _default.
  raise an NotImplementedError with an argument string 'subclasses of NoArgsCommand must provide a handle_noargs() method'.
  idstring is an empty string.
  define the function ngettext with 3 arguments: singular, plural and number.
  get the value under the 'localize' key of the kwargs dictionary, substitute it for localize, if the key doesnt exists, substitute the result for localize.
  substitute result for self dictionary under key key.
  call the method validate with an argument value from the base class of the class ChoiceField.
  define function add_never_cache_headers, with response as an argument.
  delete attr.
  from django.utils import six into default name space.
  define the method __init__ with 4 arguments: self, template, unpacked list args and unpacked dictionary kwargs.
  if app equals a string 'django.core',
  decorator stringfilter,
  delete self entry under the key key.
  substitute self.regexes for regexes.
  if settings.USE_I18N is true,
  define the function add_library with 2 arguments: self and lib.
  counters is a list containing length of handlers number of zeros.
  if doublecolon_len is greater than best_doublecolon_len,
  from django.core.management.templates import TemplateCommand into default name space.
  define the method __init__ with 2 arguments self and file.
  convert data into boolean and substitute it for data.
  yield obj, as an return value of the generator.
  call the method apps.get_app_configs, convert the result in a list, reverse the order of elements, substitute the result for app_configs.
  convert fist p elements of language to lowercase, append '_' to it,
  if var ends with '.',
  raise an TemplateSyntaxError exception with an argument string "No named cycles in template. '%s' is not defined",
  call the method fixture_name.rsplit with 2 arguments: character '.' and integer 2, substitute the result for parts.
  join dirpath and filename into path, use it as an argument for the call to the function os.path.normpath, substitute it for file_path.
  define the function new_method_proxy with an argument func.
  call the method connection.introspection.table_names with an argument cursor, substitute the result for table_names.
  increment self.pos by integer 1.
  if not,
  define the method render with 4 arguments: self, name, value and attrs set to None.
  call the method to_python with an argument value from the base class of the DateTimeField class, substitute the result for result.
  call the method Module_six_moves_urllib_request with an argument: string ".moves.urllib.request" appended to __name__,
  define the method closed with self as the argument.
  call the function copy.deepcopy with an argument self.base_fields, substitute the result for self.fields.
  derive the class RWLock from the object base class.
  try,
  define the method nodelist with an argument self.
  call the function allow_lazy with an argument chars, substitute the result for chars.
  call the run_from_argv function from the base class of the Command class with argv as a argument,.
  otherwise if t.token_type equals TOKEN_VAR,
  if now is false,
  from django.utils.translation import trans_real as trans.
  widget set to None, label set to None, initial set to None, help_text set to an empty strign,   unpacked list args and unpacked dictionary kwargs.   call the method __init__ from the base class of the class ModelMultipleChoiceField, with 10 arguments: queryset, None,
  define the method __init__ with 3 arguments: self, token_type and contents.
  from django.template import loader,  Context and RequestContext into default name space.
  define the method needs_multipart_form with an argument self.
  if comment_lineno_cache is not None,
  return value of the npath function with string '.mo' appended to the base_path as argument,   and return value of the npath function with string '.po' appended to the base_path as argument, substitute it for args.   call the popen_wrapper with args as the argument, assign the result to the output, errors and status, respectively.
  define the function compile_filter with 2 arguments: self and token.
  define the function get_language_bidi.
  raise an exception.
  call the function construct_instance with 4 arguments: self, self.instance, opts.fields and construct_instance_exclude,
  define the function unescape_string_literal with an argument s.
  substitute tok for value under the groupid key of the self.toks dictionary.
  if cache_choices is not None,
  define the method chunks with arguments self and chunk_size defaulting to None.
  if not,
  call the method self.data.isoformat, return the result.
  if match is true,
  call the function iter with an argument patterns.
  call the function urlresolvers.set_urlconf with urlconf as the argument.
  append name to string 'add_' use it as the name of the attribute to get from object self, call the result as an function,
  substitute self.remaining for size.
  if locales is true,
  call the method formats.sanitize_separators with an argument value, substitute the result for value.
  otherwise if value under the key key of the user_settings dictionary is not equal to the value under the key key of the default_settings dictionary,
  define the method __getattr__ with 2 arguments: self and attr set to None.
  d is an empty string.
  return qs.
  position the file pointer at the beginning of self file.
  format_module_path is a list containing an element format_module_path.
  call the method parser.add_argument with 3 arguments: string 'addrport', nargs='?' and help as a string 'Optional port number, or ipaddr:port'.
  if not,
  convert path to a string, substitute the result for path.
  derive the class SkipFile from the UploadFileException base class.
  errors is a string "strict".
  in the resulting string replace all occurrences of ' ' with '_' and append it to the end of cache_key.   return cache_key.
  return list_ and boolean False.
  if CommandError exception is caught,
  join callback.__module__, character "." and callback.__class__.__name__ together, substitute the result for lookup_str.
  and dictionary of arbitrary length **kwargs as arguments.   call the initialization method for the base class, _html_parser.HTMLParser.__init__ with self,
  in string '%s_%d', replace '%s' with new_name and '%d' with num, while the result is contained in used_column_names,
  return an instance of SafeText, created with an argument s.
  define the method translate_token with 2 arguments: self and token.
  if value under the 'outlog' key of options dictionary is true,
  try,
  substitute content for self.content.
  get the value under the 'database' key of the options dictionary, if it doesnt exists use the DEFAULT_DB_ALIAS to address an element
  if not,
  taglib_module is an string '%s.%s', where '%s' is replaced to module and library_name.
  define the method _has_changed with arguments self, data and initial.
  RUN_RELOADER is boolean True.
  return value.
  return result.
  label set to return value of the function _ called with an string 'Order', initial set to index incremented by 1,   and required as boolean False.   if not,
  otherwise, length of options.args is lesser than integer 1,
  if buf is false,
  open the file named filepath in read mode, with file descriptor renamed to fp perform,
  call the method d.quantize with 3 arguments: exp, ROUND_HALF_UP and instance of Context class created with prec as prec,
  from django.core.exceptions import ValidationError into default name space.
  call the function popen_wrapper with an argument args, assign the result to msgs, errors and status, respectively.
  define the function ungettext with 3 arguments: singular, plural and number.
  define the method __getinitargs__ with an argument self.
  substitute gettext_noop for ugettext_noop.
  if not,
  call the method self._get_validation_exclusions, substitute the result for exclude.
  call the get_major_version wit version as argument, store the result in major.
  define the method __init__ with arguments self, name, value, base, sysid, pubid and notation_name.
  raise an ValueError exception with an argument string "%r is not in a valid HTTP date format" formated with date.
  append name to the value of under the app key of the commands_dict.
  if fg is contained in color_names,
  substitute the result for the value under the 'month' key of the html dictionary.   for every i in successive list of integers from 1 to 30, append tuple containing i and i elements into a list,
  if self._encoding is None,
  define the method render with 4 arguments: self, name, value and attrs set to None.
  call the function get_resolver with an argument urlconf, on the result call the method resolve with an argument path, return it.
  call the method self._reset_dicts with an argument dict_.
  otherwise if value is an instance of datetime.time,
  call the function six.reraise with unpacked list exc_info as an argument.
  if AttributeError exception is caught,
  if jan1_weekday is greater than integer 4,
  if not,
  define the function unregister_serializer with an argument format.
  import module stat.
  if value is None,
  raise an exception self.error_class with an argument string ""Unused '%s' at end of if expression",
  get the value under the 'id' key of the widget.attrs dictionary, if the key exists substitute it for id_,
  if msgs is true,
  and construct as boolean False, return the result.   save.alters_data is boolean True.
  from django.utils.six.moves import input into default name space.
  and return value of the call to the method ProjectState.from_apps with apps as an argument, assign it to the autodetector.   call the method autodetector.changes with the graph set to executor.loader.graph as an argument, substitute it for the changes.
  from django.utils.encoding import force_text into default name space.
  define the method open with arguments self and mode defaulting to None.
  from django.template.loader import BaseLoader into default name space.
  call the method self._cache.delete with argument key.
  param is None.
  if second from the end element of args equals a string 'as',
  method lru_cache.lru_cache with an argument maxsize set to None, as a decorator,
  sort result in reversed order by the key as lambda function with an argument k and reeturn value second element of k.
  derive the class MemcachedCache from the BaseMemcachedCache base class.
  call the method widget_attrs with an argument widget, from the base class of the FloatField class, substitute the result for attrs.
  derive the class HttpRequest from the object base class.
  if not,
  new_msg is a tuple containing a string: "Database %s couldn't be flushed. Possible reasons:\n"
  and memo, and result of the function copy.deepcopy called with 2 arguments: value and memo.   return result.
  call the method struct.pack with 2 arguments: bytes string '>I' and i, append the result to salt, substitute the result or u.
  define the method list with an argument self.
  if length of args is smaller than integer 2,
  get the unicode representation of the absolute path of base, substitute it for base_path.
  if words is not empty and length is smaller than or equal to integer 0,
  skip this loop iteration.
  substitute self.model._default_manager for queryset.
   define the method resolve with arguments self and path.
  append string "PRIMARY KEY" to field_output.
  multiply offset.days with 86400, add offset.seconds to the result, return the result.
  get the value under the app_label key of the directory_created dictionary, if exists and it is false,
  call the method tuple.__new__ with 3 arguments: cls, unpacked list args and unpacked dictionary kwargs, substitute the result for self.
  if exception GeneratorExit is caught,
  end_text_pos is equal to integer 0.
  for every k and v in self.choices,
  if app_name is not contained in loader.migrated_apps,
  if value is true,
  if AttributeError exception is caught,
  all_locales is an empty string.
  for every app_name and model_list in return value of manifest.items function,
  define the method __init__ with 4 arguments: self, result of the function streaming_content=(), unpacked list args,
  try,
  call the function get_language, split the result by '-', substitute the first element of the result for base_lang.
  for every item in qu append item.pk to a list, substitute resulting list for value under f.name key of the data dictionary.
  for every path in self.locale_paths,
  derive the class Command from the TemplateCommand base class.
  import_library and libraries.   __all__  is a tuple containing 4 strings: 'Template', 'Context', 'RequestContext' and 'compile_string'.
  if value under the 'unique_id' key of the item dictionary is not None,
  if not,
  define initialization method __init__ with self class instance, unpacked list args, unpacked dictionary kwargs as arguments.
  substitute handler for value under name key of handlers dictionary.
  for every opening and closing in WRAPPING_PUNCTUATION,
  try,
  return an empty dictionary.
  return nothing.
  return first element of key.
  if not,
  substitute file for self.file.
  evaluate the function force_bytes, with the arguments s, encoding, strings_only and errors, return the result.
  replace '%s' in string "Cache table '%s' already exists." with tablename, write it to the self.stdout stream.
  if self.required is true and value is false,
  derive the class CommentNode from Node base class.
  try,
  substitute content_length for self.content_length.
  if UnicodeDecodeError exception is caught,
  if is_templatized is true,
  if KeyError exception is caught,
  substitute value under the field_name key of the self.fields dictionary for formfield.
  define the function save_instance with 7 arguments: form, instance, fields set to None, fail_message as string 'saved',
  find the last index of newline occurrence in self.__starttag_text, subtract it from total length of self.__starttag_text,
  default_error_messages is an dictionary with 2 entries: return value of the function _ called with an string 'Enter a valid date.',
  add set to DEFAULT_DB_ALIAS and help is 'Nominates a specific database to dump fixtures from. Defaults to the "default" database.'.   call the method parser.add_argument with 6 arguments: string '-e', string '--exclude', dest set to 'exclude', action set to 'append',
  if priority is true,
  serialize set to boolean False, substitute the return value for db_name.   call the method call_command with 3 arguments, string 'loaddata', unpacked list fixture_labels and unpacked dictionary containing 1 element: verbosity for 'verbosity'.
  decorator function register.filter with an argument is_safe set to boolean True.
  derive the class TypedChoiceField from the base class ChoiceField class.
  call the method self.setlistdefault with an argument key, append value to the result.
  do nothing.
  convert protocol to lowercase, use it as a key to get a value from the ip_address_validator_map dictionary, return it.
  call the method self.represent_scalar with 2 arguments: string 'tag:yaml.org,2002:str' and data converted into a string, return the result.
  if last element of args is not equal to a string "silent",
  where '%s' is replaced with tag and TemplateTagNode.mapping converted into a list.   return an instance of a TemplateTagNode class, created with an argument tag.
  call the method self.field.widget.value_from_datadict with 3 arguments: self.form.data, self.form.files, self.html_name, return the result.
  call the function get_resolver.cache_clear.
  map elements of value through mapping function force_text, substitute the result for value.
  replace '%s' in string '%s.management.commands.%s' with app_name and name, respectively, use it as an result for the call to the
  kw is a list with 3 elements: d.year, d.month and d.day.
  call the method connection.introspection.table_names, substitute the result for tables.
  return self._container converted into a iterable.
  define the method __exit__ with arguments: self, exc_type, exc_value and traceback.
  call the function get_current_timezone, substitute the result for timezone.
  call the method self.autocomplete.
  has_bz2 is boolean True.
  define the function fset with 3 arguments: instance, valse to None and name set to fset.__name__.
  if self.encoding exists substitute it for encoding, if not substitute settings.DEFAULT_CHARSET for encoding.
  convert app and model._meta.object_name to strings, join them with separating '.' character, substitute it for obj.
  call the function force_text with an argument path, substitute the result for path.
  and code set to a string 'invalid_choice'.   return self.parent_instance.
  substitute url for display_url.
  called with an argument text converted into a floating point number.   if ValueError, InvalidOperation, TypeError or UnicodeEncodeError exceptions are caught,
  substitute the value under the fieldname key of the self.fields dictionary for field.
  if not,
  'startapp' and 'startproject'.   try,
  derive the class SerializerDoesNotExist from the KeyError base class.
  call the method app_config.get_models with include_auto_created set to boolean True, substitute the result for models.
  return self._count.
  __all__ is a list with 15 elements: strings 'utc', 'get_fixed_timezone', 'get_default_timezone', 'get_default_timezone_name',
  call the method self._update_errors with an argument e.
  dest as a string 'use_default_ignore_patterns', default set to boolean True,   and help as a string "Don't ignore the common glob-style patterns 'CVS', '.*', '*~' and '*.pyc'.".   call the method parser.add_argument with 5 arguments: string '--no-wrap', action as a string 'store_true', dest as a string 'no_wrap',
  call the __getstate__ method from the base class of the class SimpleTemplateResponse, substitute the result for obj_dict.
  derive the class SubWidget from the object base class.
  foreground is a dictionary created with elements: x appended to a string '3' for value under the key x of color_names dictionary,
  call the method token.split_contents, substitute the result for bits.
  break from the smallest enclosing loop.
  if lengths of new_operations and operations are the same,
  increment start by length of toktext.
  call the hashlib.md5 fuction with force_bytes(key) as argument.
  slots is a list with an element, slots.
  get the value under the settings.__module__ key of the sys.modules dictionary, use its __file__ field as an argument,
  if values under the 'app_label' and 'migration_name' keys of the options dictionary are True,
  instantiate QueryDict class with 2 arguments: an empty string and encoding set to self._encoding, instantiate a class MultiValueDict, return them.
  define the method update_error_dict with arguments self and error_dict.
  try,
  define the method load_template_source with 3 arguments: self, template_name, template_dirs set to None.
  4 for 'h', 4 for 'i', 4 for 'j', 5 for 'k', 5 for 'l', 5 for 'm', 6 for 'n', 6 for 'o', 6 for 'p', 7 for 'q', 7 for 'r', 7 for 'r',   7 for 's', 7 for 't', 8 for 't', 8 for 'u', 8 for 'v', 9 for 'w', 9 for 'x', 9 for 'y' and 9 for 'z'.   for every c in phone converted to lowercase, join the value under the c key of the char2number dictionary into a string, return it.
  if f.name is contained in cleaned_data,
  append string '-- The following references should be added but depend on non-existent tables:' to the final_output.
  call the function original_urlencode with 2 arguments: list with 2 elements: result of the function force_str with an argument k,
  raise an ImproperlyConfigured exception with an argument string 'The SECURE_PROXY_SSL_HEADER setting must be a tuple containing two values.'.
  if self._wrapped is empty,
  substitute the value under the command key of self.tags dictionary for compile_func.
  from itertools import chain into default name space.
  from django.utils.deconstruct import deconstructible into default name space.
  if ValueError exception is caught,
  stderr set to PIPE, close_fds set to boolean True is os.name is not equal to 'nt', universal_newlines set to boolean True.   if OSError, renamed to e, exception is caught,
  substitute last element of output for last_row.
  called with an argument result of the method self.latest_post_date.   if value under the 'ttl' key of the self.feed dictionary is not None,
  define method set_cdata_mode, with self class instance and tag as the arguments.
  if dirname is true and dirname directory doesnt exists,
  if initial is not equal to data, return boolean True, if it is return boolean False.
  self._populated is boolean True.
  if id_ is true,
  return obj.
  if print_ is None,
  call the method django.setup.
  append string ".moves.urllib_error" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for error.
  write the string "  Creating tables...\n" to the standard output.
  raise an BadHeaderError exception  with argument string "Header values can't contain newlines (got %r for header %r)",
  return boolean True.
  otherwise if self.nodelist_false is true,
  and connection as the result of the method self.connection.   define the connection with an argument self.
  call the method resolver._reverse_with_prefix with 4 arguments: view, prefix, unpacked list args, unpacked dictionary kwargs,
  return it.   define the function itervalues with 2 arguments: d and unpacked dictionary  kw.
  define the method path with an argument self.
  from __future__ import unicode_literals into default name space.
  if label_output is true,
  define the method __getattr__ with self and name as arguments.
  where '%s' is replaced with file_path.   create an object TranslatableFile with arguments: dirpath, filename and locale_dir, append it to all_files.
  call the method is_multipart on the first element of self.forms, return it.
  define the function get_serializer_formats.
  call the method parts.reverse.
  choices is an property property object of this class, with _get_choices getter and ChoiceField._set_choices setter functions.
  define the function media_property with an argument cls.
  define the method __init__ with 7 arguments: self, data set to None, files set to None, auto_id set to string 'id_%s',
  fks_to_parent is a list containing f, for every f in opts.fields if f.name equals fk_name.
  if not,
  otherwis if char is contained in string 'Yy',
  if KeyError exception is caught,
  otherwise if self.verbosity equals integer 3,
  for every h in handlers,
  call the method pytz.timezone with an argument timezone, substitute the result for _active.value.
  define the method _get_scheme with an argument self.
  if lang_code is not contained in _supported and replacement is contained in _supported,
  for every member in members,
  call the method parser.add_argument with 2 arguments: string '--template' and help set to string 'The path or URL to load the template from.'.
  convert string header to uppercase and replace all occurrences of '-' with '_', substitute it for header.
  substitute self for value.configurator.
  call the method logging.getLogger with an argument name, substitute the result for logger.
  define the function _get_val.
  get name attribute from the instance object, call it and return the result.
  call the method self.open, substitute the result for the new_conn_created.
  if s is an instance of six.text_type or Promise,
  if attribute 'winerror' of object e is not equal to integer 32 and if 'errno' attribute is not equal to integer 13,
  call the function v with an argument value.
  if timezone has an attribute 'normalize',
  break from the loop execution,
  return an empty list.
  define method add_arguments with self class instance and parser as arguments.
  if in_tag is true and token_string starts with BLOCK_TAG_START.
  register is an instance of Library class.
  if six.PY3 is true,
  increment i by integer 1.
  where '%s' is replaced with bit and '%r' is replaced with current.   if current is callable object,
  call the function loader with arguments name and dirs, assign the result to template and display_name, respectively.
  define the function spaceless with 2 arguments: parser and token.
  size is a property object with _get_size as getter method and _set_size as setter method.
  yield string "#   * Make sure each model has one field with primary_key=True" as the result.
  and self.model._meta.pk.name.   substitute the value under the pk_key key of the self.data dictionary for pk.
  substitute registry.register for register.
  call the method self.filter_function with arguments name and unpacked dictionary flags, return the result.
  call the method self.__text_cast, return the result.
  call the method prepare_value from the base class of the class ModelChoiceField, with an argument value, return the result.
  call the method context.new with an argument values, use it as an argument for the call to the method template.render, return the result.
  ERRORS is a dictionary with 3 initial entries: string "You don't have permission to access that port." for errno.EACCES,
  return the result.   otherwise if value is an instance of decimal.Decimal, float or six.integer_types,
  define the method __init__ with 11 arguments: self, subject set to an empty string, body set to an empty string,
  all the method field.rel.to._meta.get_field with field.rel.field_name as argument, call the to_python method on the result with,
  return ip_str.
  substitute fail_silently for self.fail_silently.
  convert result of the method self.__iter__ into a list, return its length.
  substitute the result for context_match.   call the method context_match.group with an argument integer 1, substitute the result for message_context.
  if StandardError, renamed to e, exception is caught,
  define the method __eq__ with self and other arguments:
  directories, files are empty lists.
  return self.file.closed.
  split ip_str into parts by ':', for every hextet in the result,
  substitute idx-th element of self.choices for choice.
  substitute var for value under the name key of the self.extra_context dictionary.
  sites is an empty list.
  define the method __contains__ with an argument self.
  get is a tuple containing elements generated by the call to the function pformat with an argument GET_override,
  from django.core.management import call_command into default name space.
  try
  return a string "<WithNode>"
  define the method data with an argument self.
  call the method self.__class__ with 3 arguments: an empty string, mutable is boolean True, encoding is self.encoding, substitute the result for result.
  call the method self.find_template with 2 argumetns: template_name and template_dirs, assign the result to template, origin, respectively.
  split extra_classes into words, by whitespaces, substitute the result for extra_classes.
  set value under the 'timeout' key of the connection_params to self.timeout.
  if cnt is true and remained of dividing cnt with grouping is zero,
  from django.template.base import Node, NodeList, Template, Context, Library, TemplateSyntaxError, VariableDoesNotExist,
  derive the class RemovedInDjango20Warning from PendingDeprecationWarning base class.
  of the request.META dictionary is contained in settings.INTERNAL_IPS, otherwise use string 'EXTERNAL',   and result of the method record.getMessage.   call the function get_exception_reporter_filter with an argument request, substitute the result for filter.
  if not,
  increment self.active_writers by 1.
  evaluate the function get_system_encoding(), substitute the return vale for DEFAULT_LOCALE_ENCODING.
  call the function F with an argument x, for every x in sequence of integers from 1 to l, not included,
  return self._post.
  decorator function register.filter with an argument is_safe set to boolean True.
  call the function do_translate with 2 arguments: message and string 'ugettext', return the result.
  call the method self.validate_key with argument key.
  write it to self.stdout.   for every migration in migrations_to_squash,
  define the function localize_input with 2 arguments value and default set to None.
  substitute self.data for value under the 'data' key of the defaults dictionary.
  property decorator,
  if not,
  return base and ext.
  weekday, increment the result by integer 1 and substitute it for jan1_weekday.   call the method self.data.weekday, increment the result by integer 1, substitute the result for weekday.
  define the method parse with an argument self.
  return a string '%06d' formated with self.data.microsecond.
  table2model is a lambda function with an argument table_name, return value is the return value of the re.sub method,
  return default.
  call the method handler.addQuickElement with 2 arguments: string 'link' and value under the 'link' key of the self.feed dictionary.
  if version is None,
  if bf_errors is true,
  if self.verbosity is greater than integer 0,
  call the method self.items, for every field and errors in the result.
  from __future__ import unicode_literals into default name space.
  call the method self.load_template with 2 arguments: template_name and template_dirs, return the result.
  if pathext is None,
  call the method handler.startElement with 2 arguments: string 'entry' and result of the function self.item_attributes,
  if UnicodeEncodeError exception is caught,
  call the method obj.save.
  modes is an empty list.
  if self.output_transaction is true,
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  call the executor.migrate method with, targets, plan and fake set to the value under the 'fake' key of options dictionary,
  with return value of the function io.open with fname and string 'rb' as arguments, named as f,
  return inner.
  bring integer 2 to the power of 10, multiply it by 64, substitute the result for DEFAULT_CHUNK_SIZE.
  import module sys.
  return self._callback.
  if app_config.label is contained in loader.migrated_apps,
  do nothing,
  self.verbatim is boolean False.
  derive the class AutoEscapeControlNode from Node base class.
  try,
  call the method router.db_for_write with argument self.cache_model_class, substitute the result for db.
  where '%s' is replaced with opts.object_name and fail_message, respectively.   define the function save_m2m.
  if connection exists dont modify it, if not call get_connection function with username set to auth_user, password set to auth_password, fail_silently set to fail_silently as arguments, assign it to connection.
  from django.utils import six into default name space.
  raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
  call the method as_tuple on the result, substitute the result for sign, digits and exponent, respectively.   append result of method six.text_type called with an argument digit to an list, for every digit in reversed order of digits,
  remove the first element from colors, substitute it for fg.
  call the method self.as_ul, return the result.
  result is an empty list.
  for every p in parts without the first element,
  get the value under the name key of the data dictionary, return it, if the previous doesnt exists, return None.
  _empty_value is an empty string.
  define the method strptime with arguments self, value and format.
  from django.db.migrations.executor import MigrationExecutor into default name space.
  if message has an 'error_dict' attribute,
  from django.utils.encoding import force_st into default name space.
  call the method self.as_widget with 3 arguments: return value of the method self.field.hidden_widget, attrs,
  call the self.domain_regex.match method with an argument domain_part, if it evaluates to true,
  substitute dt for self.__dt.
  for every f in files,
  call the method self.main_help_text append new line to it, write it to sys.stdout.
  define the method __str__ with an argument self.
  import module threading.
  call the method node.getElementsByTagName with an argument string 'None', if it evaluates to true,
  delete entry under the oldkey key of the cache dictionary.
  from django.utils.encoding import force_text and iri_to_uri into default name space.
  for every var in self._varlist.   if not,
  raise SuspiciousMultipartForm exception with an argument string, "The multipart parser got stuck, which shouldn't happen with"
  call the method m.groups, substitute the first element of the result for idx.
  if not, call the function sys.getdefaultencoding and substitute the result for fs_encoding.   app_template_dirs is an empty list.
  call the method stat.S_IMODE with an argument st.st_mode, calculate binary OR with the result and stat.S_IWUSR, as operands,
  self._callback_strs is an empty set.
  if to_lower is true,
  and fileobj set to zbuf.   call the method zfile.write with an argument s.
  define the method list with an argument self.
  try,
  derive the class MinLengthValidator form the BaseValidator base class.
  append data to self.children.
  for every ext in pathext,
  call the method self.configure_root with 2 arguments: root and boolean True.
  if self has an '_files' attribute.
  try
  call the method other.__cast, substitute the result for other.
  if ch equals string '+',
  self._errors is None.
  call the method handler.addQuickElement with an argument string "author", "%s (%s)",
  if nor,
  append potfile to potfiles.
  if tablename is contained in return value of the method connection.introspection.table_names,
  if length of bits is not equal to integer 2,
  if StandardError, renamed to e, exception is caught,
  "  * The database isn't running or isn't configured correctly.\n  * At least one of the expected database tables doesn't exist.\n"   "  * The SQL was invalid.\nHint: Look at the output of 'django-admin.py sqlflush'. That's the SQL this command wasn't able to run.\n"   "The full error: %s", where '%s' is replaced by value under the 'NAME' key of the connection.settings_dict dictionary and e.   call the function six.reraise with 3 arguments: CommandError, CommandError created with argument new_msg,
  call the function get_language, substitute the result for self.old_language.
  call the method operator.attrgetter with an argument _meth_self, substitute the result for get_method_self.
  if plan_node is not contained in shown and first element of plan_node equals to app_name,
  if model_identifier is false,
  if 'content_type' key doesnt exist in kwargs, set its value to 'application/json'.
  append string ".moves.urllib_request" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for request.
  under the BLOCK_CONTEXT_KEY key of render_context dictionary dictionary evaluates to be not equal to None,   call the method self.render with an argument self.context, use it as an argument for the call to the mark_safe function, return the result.
  if c doesnt have an attribute '__call__' and types has an 'ClassType' attribute and type of c is not equal to types.ClassType,
  try,
  call the function with 7 arguments: self, self.instance, self._meta.fields, fail_message, commit, self._meta.exclude,
  call the method handler.addQuickElement with 2 arguments: string "category" and cat.
  call the method apps.setdefault with 2 arguments: app_name and an empty list, extend the resulting list with namespaces_list.
  if six.PY2 is true,
  define the method full_clean with an argument self.
  if field is an instance of FileField,
  return Operator.
  for every value in result of the method self.prepare_value called with an argument initial.   data_set is set created out of return values of the function force_text called with an argument value,
  define the function trim_whitespace with an argument s.
  and path with self.path, substitute the result for current_uri.   call the function urljoin with arguments current_uri and location, substitute the result for location.
  call the method connection.introspection.django_table_names with an argument boolean true, substitute the result for tables.
  try,
  remove entry under the 'formfield_callback' key of the attrs dictionary, if it exists substitute if for formfield_callback,
  return default.
  define the function m2m_convert with an argument n,
  and with safe set to bytes string "/#%[]=:;$&()+,!?*@'~", return the result.   define function filepath_to_uri with path as the argument.
  define the function runfastcgi with 2 arguments: argset set to an empty list and unpacked dictionary kwargs.
  define the method save with 2 arguments: self and commit set to boolean True.
  if KeyError exception is caught,
  substitute value for value under the key key of safe_data dictionary.
  if ch is contained in string "iLmsu#",
  raise an CommandError exception with an argument message.
  and content_length.   self._read_started is boolean False.
  define the method id_for_label with arguments self and id.
  call the urlsplit with an argument url, convert the result into a list and return it.
  call the cursor method on the value under the db key of connections dictionary, preform following with return value named cursor,
  called with an argument k.   call the function c with an argument unpacked dictionary kwargs, substitute the result for result.
  substitute MultipleHiddenInput for hidden_widget.
  define the close method with 2 arguments, self and dictionary of argument pairs kwargs.
  if ImportError exception is caught,
  do nothing.
  increment weight by integer 2.
  from django.utils import six into default name space.
  define the method _create_attachment with 4 arguments: self, filename, content and mimetype set to None.
  substitute settings.TEMPLATE_STRING_IF_INVALID for current.
  call the function force_text with 3 arguments: old_field_name, self._encoding and errors as a string 'replace',
  define the method __init__ with 3 arguments: self, stream_or_string and unpacked dictionary options.
  concatenate string 'templates/' and template_name, substitute the result for pkg_name.
  if comment_lineno_cache equals cur_lineno.
  if m and n are not None,
  return self.
  define the method content with an argument self.
  call the function _ with an argument string 'AM', return the result.
  if autoescape is true and safe_input is false,
  call the cursor method on the value under the db key of connections dictionary, preform following with return value named cursor,
  if index is lesser than integer 0,
  if value is contained in self.empty_values,
  raise an ViewDoesNotExist exception with an argument string "Could not import '%s.%s'. View is not callable.",
  dest is 'use_base_manager', default is boolean False and help is a string '(use multiple --exclude to exclude multiple apps/models).'.   call the method parser.add_argument with 3 arguments: string '--pks', dest set to string 'primary_keys',
  classmethod decorator,
  append self.pointer to self.backout.
  value is an empty string.
  if scheme is countaine in self.url_schemes return boolean True, otherwise return False.
  substitute error_messages for value under the ''error_messages' key of the kwargs dictionary.
  from importlib import import_module into default name space.
  cut the last 6 elemetns from r, append character 'Z' to it, substitute the result for r.
  states is a dictionary with 2 arguments: appended list with an element instance of a class Tok, created with 3 arguments: "punct",
  supports_microseconds is boolean False.
  if deps is true,
  pid is integer 1.
  write string "  all instances of the codebase have applied the migrations you squashed," to self.stdout.
  from django.utils.translation import templatize into default namespace.
  if smtplib.SMTPException exception is caught,
  call the function warnings.warn with 3 arguments: string "django.utils.dictconfig will be removed in Django 1.9.",
  if not,
  fail_message is a string changed'.
  if value is an instance of datetime.date,
  from django.db.migrations.questioner import MigrationQuestioner and InteractiveMigrationQuestioner into default name space.
  return value.
  insert mw_instance.process_template_response at the beginning of self._template_response_middleware.
  for every elt in list_ call the method bytes_to_text with 2 argument: elt and self.encoding, append the result into a list,
  from django.core.checks.registry import registry into default name space.
  define the method configure with an argument self.
  convert git_changeset to string, append it to the string '.dev', replace it for sub.
  call the method __init__ with an argument UNKNOWN_SOURCE, from the base class of the class StringOrigin.
  call the method m.group with an argument string 'mon', convert the result to lowercase, use it as an argument for the call to the,
  call the function force_text with an argument bf.label, use the result as an argument for the call to the function conditional_escape, substitute the result label.
  call the method connection.client.runshell.
  call the method block_context.add_blocks with an argument self.block.
  get the value under the 'hide_empty' key of the options dictionary, if the key exists substitute it for self.hide_empty,
  from django.core.files import File into default name space.
  if self object has an attribute '_client',
  yield key.
  call the method extend with refs as argument, on the result call the pending_references.setdefault method with refto and empty list as arguments.
  if resolved_path is true,
  call the function t.render with an argument context_instance, return the result.
  call the method field.rel.to._default_manager.db_manager with an argument self.db, on the result call the method get_by_natural_key,
  return encoding.
  convert self.file to a string and append '.c' string to it, substitute the result for thefile.
  errors is an empty list.
  define the function write with an argument data.
  raise ValueError exception with string 'Sign character found in converter base digits.' as an argument.
  substitute value under the the 'forloop' key of the context dictionary for parentloop.
  call the method __getitem__ from the base class of the class MultiValueDict, with an argument key, return the result..
  define the method __lt__ with 2 arguments: self and other.
  if exp is None or exp is greater than the return value of the call to the function time.time,
  if callback doesnt have '__name__' attribute,
  call the function format_html with 2 arguments: string "<input type='hidden' name='csrfmiddlewaretoken' value='{0}' />",
  if UnicodeDecodeError exception is caught,
  use the result as an key to get the value of the form.data dictionary, assign it value None.   use return value of the self.fk.get_attname as the name of the attribute of form.instance object to set, set it to self.instance.pk.
  derive the class Literal from the TokenBase base class.
  evaluate the member method of s, encode with the encoding and errors as the arguments, return the result.
  define the method _get_choices with an argument self.
  substitute new_obj for obj.
  from django.utils.translation import ugettext_lazy as _ and ungettext_lazy into default name space.
  from django.db import models into default name space.
  evaluate the self.get_fqdn method, return the result.
  if length of bits is lesser than integer 2,
  RAW is a string "raw".
  if digest is None,
  append string '_field' to new_name.
  raise an ImproperlyConfigured exception with argument string '"%s" is not a valid regular expression: %s',
  call the method self.xml.endElement with an argument string 'object'.
  error_msg is a string "Invalid template name in 'extends' tag: %r.", where '%s' is replaced with parent.
  delete dictionary item 'private' from cc.
  split locale by '_', append the first element of the result to locales.
  append self.fk.name to form._meta.fields.
  if not,
  string: "\nYou have unapplied migrations; your app may not work properly until they are applied.", write it to self.stdout.   call the method self.style.NOTICE with an argument string "Run 'python manage.py migrate' to apply them.\n",
  raise an CommandError exception with an argument string "%r conflicts with the name of an existing Python module and cannot be used "
  call the method self.add_fallback with an argument default_translation.
  substitute kwargs for params.
  return tuple, consisting of first element of t converted to lowercase and second element of t.
  call the Parser object with stream and self._boundary, for every item_type, meta_data and field_stream in return value,
  get the value under the self.data.month key of the MONTHS_3 dictionary, call on it the method title, return the result.
  cal the method operator.attrgetter with an argument string "__class__", use the result as an argument for the call to the function,
  from django.utils.functional import cached_property into default name space.
  define the method apply_response_fixes with self class instance, request and response as the arguments.
  return value.
  call the self.stdout.write method, with string "  Applying %s..." with '%s' replaced with migration and ending set to '', as arguments.
  decorator function register.filter with an argument is_safe set to boolean True.
  call the method formats.time_format with 2 arguments: value and arg, return the result.
  get is a tuple containing elements generated by the call to the function pformat with an argument META_override,
  substitute attr for the obtained value.   delete attr.
  if not,
  derive the class HttpResponseBadRequest from the HttpResponse base class.
  self._raw_ipv6 is boolean True.
  call the method autodetector.changes with 3 arguments: graph set to loader.graph, trim_to_apps set to app_labels,
  define the method __init__ with arguments self, unpacked list args and unpacked dictionary kwargs.
  if self.interactive is true,
  from django.apps import apps into default name space.
  with call to the io.open function with fname and string 'rb' as arguments, renamed to f,
  call the method handler.file_complete with i-th element of counters as an argument, substitute the result for file_obj.
  if StandardError, renamed to e, exception is caught,
  substitute _html_parser.interesting_normal for self.interesting.
  if loader is an instance of tuple or list,
  substitute version_info from module sys for surrent_version.
  finally perform,
  for every s_opt in parser.option_list.   for every x in slice of cwords from the second element to the element at the cword decremented by 1 index,
  call the function format_html with 3 arguments: self.inner_html, choice_value set to choice_value,
  if using_sysrandom is false,
  reverse the order of elements of styles.
  substitute level for rv.
  from django.utils._os import rmtree_errorhandle into default name space.
  if not.
  if not,
  define the function force_escape with an argument value.
  extend list inner_result with res.
  call the method self.empty_form.is_multipart, return the result
  sort value with key set to filed resolve of instance of a class Variable, created with an argument arg, return the result.
  while ch is not equal to a string '}',
  append form.errors to self._errors.
  try,
  skip this loop iteration.
  substitute the result for ASCTIME_DATE.   define the function urlquote with 2 arguments: url and safe set to '/'.
  get the value under the 'verbosity' key of the options dictionary, substitute it for self.verbosity.
  substitute kwargs for self.kwargs.
  raise an TemplateSyntaxError exception with an argument string "'firstof' statement requires at least one argument".
  and warning as a string "You cannot alter upload handlers after the upload has been processed.".   parser is an instance of MultiPartParser class, created with 4 arguments: META, post_data, self.upload_handlers and self.encoding.
  call the method func.__get__ with 2 arguments: self and type of self object, call the result with 2 arguments:
  call the function tempfile.mkdtemp with arguments: prefix set to prefix and suffix  set to string '_download'.
  _assertRegex is a strnig "assertRegex".
  ALLOWED_VARIABLE_CHARS is a string 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.'.
  schemes is a list containing 4 initial elements: 'http', 'https', 'ftp' and 'ftps'.
  append it to a list, perform the previous for every dir_ in fixture_dirs, substitute the resulting list for fixture_dirs.   call the method os.path.basename with an argument fixture_name, substitute the result for fixture_name.
  define the method dict with an argument self.
  for every attr in self.rendering_attrs,
  define the method error with arguments self and message.
  result of multiplication of integers: 60,60,24,365, and return value of ungettext_lazy with 2 arguments: '%d year', '%d years',   result of multiplication of integers: 60,60,24,30, and return value of ungettext_lazy with 2 arguments: '%d month', '%d month',   result of multiplication of integers: 60,60,24,7, and return value of ungettext_lazy with 2 arguments: '%d weeks', '%d weeks',   result of multiplication of integers: 60,60,24, and return value of ungettext_lazy with 2 arguments: '%d days', '%d days',   result of multiplication of integers: 60,60, and return value of ungettext_lazy with 2 arguments: '%d hours', '%d hours',   result of multiplication of integers: 60, and return value of ungettext_lazy with 2 arguments: '%d minutes', '%d minutes',   if d is not an instance of datetime.datetime,
  raise an ImproperlyConfigured exception wiht an argument string 'Command %s defines both "requires_model_validation" '
  call the function ugettext with 3 arguments, string "%(size)d byte", string "%(size)d bytes" and bytes,
  get the value under the 'tags' key of the options dictionary, if it exists substitute it for tags, if not, tags is None.
  call the function force_str with an argument value, substitute the result for value.
  try,
  define the function iter_format_modules with 2 arguments: lang and format_module_path set to None.
  USE_INOTIFY is boolean True.
  append work_file to string '#: ', substitute it for old.
  is_usable is boolean False.
  for every item in self.items,
  for every format in settings.SERIALIZATION_MODULES,
  fixture_name and result of the function humanize called with an argument fixture_dir.   extend fixture_files list with fixture_files_in_dir.
  define the initialization method __init__, with self instance of this class, convert_charrefs set to boolean False,
   from IPython.frontend.terminal.ipapp import TerminalIPythonApp into default namespace.
  skip this loop iteration.
  curr is an empty string.
  define the method __exit__ with 4 arguments self, exc_type, exc_value and traceback.
  if fields is not None,
  substitute first element of item for k.
  args is an empty list.
  define the method load_template with 3 arguments: self, template_name, template_dirs set to None.
  define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  call the function pickle.dumps with expiry and integer -1 as arguments, use the result as the argument for the call to f.write function.
  if token is None,
  raise an TemplateEncodingError exception with an argument "Templates can only be constructed from unicode or UTF-8 strings.".
  define the method attach with 4 arguments: self, filename set to None, content set to None and mimetype set to None.
  substitute message for self.message.
  if mw_instance has an attribute named 'process_response'.
  while escaped is true or ch is not equal to a string ']',
  define the method g with an argument self.
  define the method exit_command with an argument self.
  substitute loader, name and dirs for self.loader, self.loadname and self.dirs, respectively.
  substitute settings.CACHE_MIDDLEWARE_KEY_PREFIX for key_prefix.
  converted to an integer.   call the method self._init_translation_catalog.
  from django.utils.safestring import mark_safe into default name space.
  TOTAL_FORM_COUNT is a string 'TOTAL_FORMS'.
  if not,
  if other is an instance of Promise,
  decorator function register.filter with an argument is_safe set to boolean True.
  derive the class BaseForm from the base class object.
  substitute the result for language_code_re.   call the function re.compile with an argument raw string '^/([\w-]+)(/|$)', substitute the result for language_code_prefix_re.
  if it exists return the second element of the result, if not, return alternate.   define the method set_cookie with 9 arguments: self, key, value set to an empty string, max_age set to None, expires set to None,
  call the self.stdout.write method with string " (no migrations)" and self.style.MIGRATE_FAILURE as arguments.
  raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
  derive the class SuspiciousMultipartForm from the SuspiciousOperation base class.
  return an empty string.
  or with string 'models.' if it is not and field_type.   if extra_params is true,
  derive the class SimplerXMLGenerator form the XMLGenerator base class.
  decorator function register.filter with an argument is_safe set to boolean True.
  from django.db import DEFAULT_DB_ALIAS into default name space.
  property decorator,
  get '_decorated_function' attribute from the func object, substitute it for _dec._decorated_function, if it doesnt exist,
  return a list containing an empty string and a list containing an empty list.
  is_usable is boolean True.
  in encoded, replace all the occurrences of unicode character "\\054" with ',' character and "\\073" with ';' characters.
  if not,
  if self._dir file path does not exists,
  otherwise if ch equals a string '|',
  convert value into boolean and substitute it for value.
  substitute '%s' in string "Extracting %s\n" with filename, write it to self.stdout stream.
  if value is an instance of datetime.date class,
  call the method datetime_safe.new_datetime with an argument value, substitute the result for value.
  third element of url_fields is an empty string.
  define the method __init__ with 2 arguments: self and dict_ set to None.
  if not,
  convert tag to lowercase, use it as the argument for the call to the method self.handle_endtag.
  substitute value under the backend key of settings.CACHES dictionary for conf.
  if lib is true,
  compile regex from a string '(?<!\\)([aAbBcdDeEfFgGhHiIjlLmMnNoOPrsStTUuwWyYzZ])', substitute it for re_formatchars.
  if not,
  return an empty string and an empty string.
  return _wrapped_view.
  if not,
  from django.forms.extras.widgets import SelectDateWidget into default name space.
  default string value, substitute it for value.   return value if six.PY2 is true, if not return value.encode(ISO_8859_1).
  __all__ is a string containing strings: 'UploadFileException', 'StopUpload', 'SkipFile', 'FileUploadHandler',
  return the result.   if type of s equals bytes,
  get the value under the 'database' key of the options dictionary, use it as a key to access the element under the connections dictionary, substitute it for connection.
  from __future__ import unicode_literals into default name space.
  call the function date_format with 2 arguments: value, string 'DATETIME_FORMAT' and use_l10n as use_l10n, return the result.
  strip message_context of '"' characters from both ends, substitute the result for message_context.
  call the method sys.stderr.write with an argument string "  http://www.saddi.com/software/flup/   If you've already\n".
  return msg.
  found is boolean True.
  call the method self._get_context_stack_frame with an argument context, substitute the result for state_frame.
  return a tuple with 2 elements: integer 0 and second element of k.
  if length of args is not equal to the sum of the lengths of params and prefix_args,
  substitute field.rel.to for rel_model.
  call the function type with 3 arguments: string 'WSGIServer', tuple containing 2 elements: socketserver.ThreadingMixIn and WSGIServer,
  call the klass method with fail_silently set to fail_silently and dictionary arguments kwds as arguments, return the result.
  covert to lowercase language element at (p+1)-th index, append it to the previous result,   covert to lowercase language elements from (p+2)-th index to the end, append it to the previous result, return it.   convert fist p elements of language to lowercase, append '_' to it,
  data is an instance of BytesIO class, created with an argument: self._body.
  DARK_PALETTE is a string 'dark'.
  if safe is true and arg is not equal to string ';',
  if num_loopvars is greater than integer 1, unpack is an boolean True, otherwise is an boolean False.
  do nothing.
  define the method save with 2 arguments: self and commit set to boolean True.
  default_attrs is an dictionary with 2 initial entries: string '40' for 'cols' and string '10' for 'rows'.
  call the method match.groupdict, substitute the result for kw.
  if cleaned_data is not None,
  msg is a string '%sError importing module %s: "%s"', where '%s' is replaced with error_prefix, dotted_path and e, respectively.
  define the method __ne__ with an argument self.
  import module threading.
  if length of empty_label is not equal to integer 3.
  if token.contents equals string 'else',
  syear is a string "%04d" formated with dt.year.
  values is an empty list.
  raise CommandError exception with string "This script should be run from the Django Git checkout or your project or app tree, or with the settings module specified.", as argument.
  from django.utils.encoding import force_text into default name space.
  self.fixture_object_count is integer 0.
  if VariableDoesNotExist exception is caught,
  from django.core.files import locks into default name space.
  tried_modules is an empty list.
  if args is true,
  try,
  try,
  get attribute name from value under the DEFAULT_CACHE_ALIAS key of caches dictionary, return it.
  from __future__ import unicode_literals into default name space.
  return result.
  if value is an instance of datetime.datetime,
  from django.core.exceptions import ImproperlyConfigured and DjangoRuntimeWarning into default name space.
  call the function number_format with 2 arguments: value and use_l10 as use_l10n, return the result.
  write the result to the self.stdout stream.   write output to self.stdout stream.
  where '%s' is replaced with filename.   return cls.
  return list with 2 elements: first_item and second_item, and old_style_list.
  substitute DEFAULT_ATTACHMENT_MIME_TYPE for mimetype.
  define the method __init__ with 2 arguments: self and attrs set to None.
  input_type is a string 'email'.
  define the method get_template_sources with 3 arguments: self, template_name, template_dirs set to None.
  if name is None and filter_func is None,
  append the resulting string to dec_part, substitute it for dec_part.   if dec_part is true,
  for every i in sequence of integers, from 0 to the result of the method self.total_form_count,
  substitute link for value under the NEXT key of the last dictionary, for value under the PREV key of the root dictionary,
  derive the class DeserializationError from the Exception base class.
  call the function ugettext_lazy with an argument string 'Change', substitute the result for input_text.
  import module re.
  and trimmed and result of the function join_tokens called with 2 arguments: plural and trimmed, write the result to out.   for every part in singular,
  processors is an empty list.
  try,
  if not,
  from django.core.exceptions import DisallowedRedirect into default name space.
  define the function serializer with 3 arguments: format, queryset and unpacked dictionary options.
  skip this loop iteration.
  operations is an empty list.
  if takes_context is true,
  decorator function register.filter with an argument is_safe set to boolean True.
  substitute it for localedir.   use_null_fallback is boolean True.
  call the function _import_module with an argument self.mod, substitute the result for module.
  substitute origin for self.origin.
  if TypeError or ValueError exceptions are caught,
  call the function get_tag_uri with 2 arguments: values under 'link' and 'pubdate' keys of item dictionary, substitute the result for unique_id.
  if '.' is contained in last elements of hextets,
  define the method render with an argument self.
  return result.
  if varargs is None,
  return value.
  raise an exception.
  if features.needs_datetime_string_cast field of object under the db key of connections dictionary is true and current_expires is not an instance of datetime object.
  call the method six.text_type with 3 arguments: s, encoding and string 'replace'.
  "enclosure" for 'rel', field url of value under the "enclosure" key of item dictionary for 'href',   field length of value under the "enclosure" key of item dictionary for 'length',   and field mime_type of value under the "enclosure" key of item dictionary for 'type'.   for every cat in value under 'categories' key of item dictionary,
  substitute it for self.allow_empty_file, if not self.allow_empty_file is boolean False.   call the method __init__ from the base class of the FileField class, with 2 arguments: unpacked list args and unpacked dictionary.
  call the function self.func with an argument instance, substitute the result for res and value under the self.name key of the instance.__dict__ dictionary.
  call the method self.full_clean.
  call the function new_method_proxy with an argument len, substitute the result for __len__.
  call the method field_stream.read, substitute the result for raw_data.
  multiply seconds by count, subtract it from since, divide the result by seconds2, store the floored result in count2.
  return string 'rd'.
  from django.core.management import call_command into default name space.
  call the function smart_text with an argument value, return the result.
  derive the class Command from the base class AppCommand.
  call the method stream_or_string.decode with string 'utf-8' as argument, substitute the result for stream_or_string.
  from django.db import models into default name space.
  if num_repl is greater than integer 0,
  define the method __repr__ with an argument self.
  if mtime is different than the value of dictionary _mtimes under the key filename,
  __Y2 is a raw string '(?P<year>\d{2})'.
  return boolean False.
  if expires is not None,
  call the formataddr function with argument tuple containing 2 elements nm and addr.
  write string "  you can delete them." to self.stdout.
  use_tls set to None, fail_silently set to False, use_ssl set to None, timeout set to None and unpacked dictionary kwargs.   call the __init__ method from the base class of the EmailBackend class with argument fail_silently set to fail_silently.
  where '%r' is replaced with first element of bits.   options is an empty dictionary.
  skip this iteration of he smallest enclosing loop.
  call the method self._update_errors with an argument e.
  derive the class CharField from the base class Field class.
  call the method __init__ with an argument data, from the base class of the class DictWrapper.
  call the function six.text_type with an argument self.data.year, return the result without the first 2 elements.
  from django.utils import six and timezone into default name space.
  get the value under the self.name key of the self.form.initial dictionary, if it exists, substitute it for data,
  call the method self.error_class with an argument list with a element: result of the method self.get_form_error,
  define the method delete with self, key and version set to None as arguments.
  extend the value under the field key of the self._errors dictionary with error_list.
  if not,
  if ValueError exception is caught,
  substitute app_namefor command.
  derive the class DisallowedRedirect from the SuspiciousOperation base class.
  return result.
  if value is contained in self.empty_values,
  self.filters is an empty dictionary.
  strip whitespaces from both sides of the value, return the result.
  raise an ValueError exception with an argument string 'No handler found with name %r' formated with name.
  from django.utils.functional import cached_property into default name space.
  exc_info is an tuple with 3 elements: None, result of method record.getMessage and None.
  RemovedInDjango19Warning and stacklevel as integer 2.   try,
  if value is an instance of datetime and settings.USE_TZ if use_tz is None else use_tz and call to the function is_naive,
  use the result as an argument for the call to the mark_safe function, return the result.   if InvalidOperation exception is caught,
  call the function to_current_timezone with an argument, substitute the result for value.
  from django.db.migrations.autodetector import MigrationAutodetector into default name space.
  define private method __repr__ with argument self.
  call the method self.validate with an argument value.
  if status is not None.
  call the method f.save_form_data with 2 arguments: instance and value under the f.name key of cleaned_data dictionary.
  for every app_dir in app_dirs,
  call the method t.render with an argument, instance of Context class, created with an argument dictionary, return the result.
  substitute it for basedir.   if basedir is not a directory,
  if KeyError exception is caught.
  define the function pbkdf2 with 5 arguments: password, salt, iterations, dklen set to integer 0 and digest set to None.
  raise an StopIteration exception.
  substitute pubid for self.pubid.
  substitute the last element of parts for parts.
  substitute localize for self.localize.
  define the method __add__ with 2 arguments self and rhs.
  for every j in range of integers from 0 to iterations converted to an integer,
  if m is true,
  in_tag is boolean False.
  if length of parts is greater than integer 1.
  from __future__ import unicode_literals into default name space.
  call the function datetime.datetime with 3 arguments, now.year, now.month and now.day, substitute the result for now.
  return d.
  call the function get_git_changeset, store the result in git_changeset.
  for every plan_node in return value of the graph.forwards_plan method called with node as argument.
  skip this loop iteration.
  if pattern is an instance of RegexURLResolver class,
  if value is not equal to value or value equals return value of the call to Decimal with argument 'Inf',
  close is boolean True.
  define the method display with an argument self.
  try,
  call the function get_wsgi_application, return the result.
  otherwise if second element of args equals a string '304',
  under the 'handlers' key of self.config dictionary, substitute the result for value under 'target' key of config dictioanry.   if StandardError, renamed to e, exception is caught,
  raise a ValidationError exception with 2 arguments: return value of the function _ with an string argument 'Enter a valid integer.',
  if self._fname is None:
  if headers exists substitute it for self.extra_headers, if not extra_headers is an empty dictionary.
  raise an CommandError exception with an argument string "You can only use --pks option with one model".
  from django.db.migrations.optimizer import MigrationOptimizer into default name space.
  call the function __import__ with an argument name.
  from django.utils import six into default name space.
  self._callback is None.
  default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid time.' for 'invalid'.
  while newline character is not contained in self.buffer and, size is None or length of self.buffer is less than size,
  otherwise if ch equals a string ':',
  calculate negative length of s, by modulus integer 4, use the result as the number of '=' characters to be stored in pad.
  nodelist_false is an instance of NodeList class.
  define the __init__ method with 7 arguments: self, func, args, kwargs, url_name set to None, app_name set to None and namespaces set to None.
  call the method msgs.decode with an argument string 'utf-8', substitute the result for msgs.
  define the method with reload with an argument self.
  if value under the 'DJANGO_SETTINGS_MODULE' key of os.environ dictionary exists.
  get self.to_field attribute of self.parent_instance object, substitute it for value under the 'initial' key of the kwargs dictionary.
  define the method __bool__ with an argument self.
  from django.utils import six into default name space.
  define the method add_root_elements with 2 arguments: self and handler.
  try,
  call the method token.split_contents, substitute the result for args.
  call the method warnings.warn with 2 arguments: string "FastCGI support has been deprecated and will be removed in Django 1.9.",
  module_values is a set created from the elements of sys.modules.values method return value.
  _PROTECTED_TYPES is a tuple containing next elements, six.integer_types, type of None, type of float, Decimal, detetime.datetime,
  try,
  opts.fields is None.
  do nothing.
  return dec.
  call the method data.items, for every k and v in the result,
  if option is contained in options,
  define the method multiple_chunks with arguments self and hunk_size set to None.
  return result.
  if options.traceback is true or e is not CommandError instance,
  multiply offset.days, integer 24 and integer 60, sum the result with floored result of division of offset.seconds,
  increment self.loaded_object_count by loaded_objects_in_fixture.
  if header equals a string 'ACCEPT_LANGUAGE' and is_accept_language_redundant is boolean True,
  call the method copy.deepcopy with arguments self.widget and memo, substitute the result for result.widget.
  for every key_value in related,
  remove k element from self.keyOrder dictionary.
  raise an NoReverseMatch exception with an argument string "Error importing '%s': %s.", where '%s' is replaced with lookup_view and e, respectively.
  import module datetime.
  substitute the result for args and kwargs, respectively.   call the function node_class with 3 arguments: takes_context, args and kwargs.
  if bytes is false,
  called with an argument value under the 'updateddate' key of the item dictionary.   if value under the 'author_name' key of the item dictionary is not None,
  call the method get_language, substitute the result for language_code.
  substitute the value under the 'HTTP_HOST' key of the self.META dictionary, substitute it for host.
  substitute has_header for __contains__.
  define the method __call__ with arguments self and value.
  if table_name_filter is not None and table_name_filter is callable object,
  compare is a lambda function with arguments self, a and b, return value is boolean true if a is greater than b, otherwise is false.
  call the method apps.get_model with an argument model_identifier, return the result.
  insert '.' to digits at negative exponent index.
  for every f in filters,
  call the self.style.HTTP_SERVER_ERROR with an argument msg, substitute it for msg.
  self.vals is an empty list.
  call the key.lower method for every key in self.extra_headers, join the results into a header_names.
  if ValidationError renamed to e, exception is caught,
  child_nodelists is an tuple with 2 elements: strings 'nodelist_loop' and 'nodelist_empty'.
  unpacked list args2 and unpacked dictionary kwargs2, return the result.   call the function bound_func with 2 arguments: unpacked list args and unpacked dictionary kwargs, return the result.
  substitute return value of function no_style for style.
  if NameError exception is caught,
  define the method __repr__with an argument self.
  return self.__offset.
  substitute windll.kernel32.UnlockFileEx for UnlockFileEx.
  define the method with reload with an argument self.
  define the method initial_form_count with an argument self.
  define the function sql_flush with 4 arguments: style, connection, only_django set to boolean False,
  if not,
  return code.
  if timezone is an instance of tzinfo,
  self.POST is an instance of QueryDict class created with an argument mutable set to boolean True.
  return an empty string.
  is replaced with '\\"'.   define the function same_origin with 2 arguments url1 and url2.
  use the result as an key to get the value of the form.data dictionary, assign it value None.   call the method form.add_prefix with an argument self.fk.name,
  if not,
  return self.
  get the value under the self.name key of the self.form.errors dictionary, if the key exists, return it,
  for every h in elements of logger.handlers list,
  get the 'silent_variable_failure' attribute of e object, if it exists and is true,
  raise an exception.
  yield an instance of SubWidget class created with 5 arguments: self, name, value, attrs and choices.
  define the function phone2numeric with an argument phone.
  tags is a list containing results of the function re.escape with an argument tag, for every tag in tags split into words.
  substitute self._stream for stream.
  define the method clean with 2 arguments self and value.
  call the function six.StringIO with an argument stream_or_string, substitute the result for self.stream.
  return self.s.
  call the method handler.addQuickElement with 2 arguments: string 'ttl' and value under the 'ttl' key of the item dictionary.
  call the method gettext_module.NullTranslations, substitute the result for _active.value.
  if exit_code is lesser than integer 0,
  import module warnings.
  from django.template.base import TemplateDoesNotExist into default name space.
  from __future__ import unicode_literals into default name space.
  call the method self._resolve, substitute the result for _module.
  call the method kwarg_re.match with an argument first element of bits, substitute the result for match.
  docstirng
  if count does not equals to integer 0,
  new_args is an empty list.
  call the self._lock.writer method, with the result perform the following,
  raise an CommandError exception with an argument string "You can only use --pks option with one model".
  try,
  mem_args is a list containing of first num_args elements of args list.
  alternative_subtype is a string 'alternative'.
  if token.token_type equals TOKEN_BLOCK and token.contents equals endtag,
  call the sys.stderr.write function with an argument msg.
  import module datetime.
  call the method normalize with sum of parent_pat and pat as an argument, substitute the result for new_matches.
  if text ends with truncate,
  return a list with an element etag_str.
  define the method __getitem__ with 2 arguments: self and key.
  if self.file has an attribute 'name',
  if row_data is contained in seen_data,
  call the method msg.as_bytes, substitute the result for msg_data.
  call the method _entity_re.sub with 2 arguments: _replace_entity and text, return the result.
  for every d in last element of self.dicts,
  substitute element at the bit index of current for current.
  for every field in model._meta.many_to_many,
  call the method self.load_template_source with arguments template_name and template_dirs, assign the result to source and display_name.
  if not,
  if value under the 'indent' key of the self.options dictionary is true,
  if AttributeError exception is caught.
  call the method self.load_label with an argument fixture_label.
  called with value under the 'QUERY_STRING' key of the self.META dictionary and append it to string '?',   append the result th the self.path converted into a string and return it,   if the value under the 'QUERY_STRING' key of the self.META dictionary is false, return self.path converted into a string.   def the method get_signed_cookie with 5 arguments: self, key, default set to RAISE_ERROR, salt as an empty string,
  field_params is an instance of a class OrderedDict.
  call the function import_module with an argument string '%s.%s', where '%s' is replaced with app_config.name and module_to_search.
  if not append w to the list, substitute the resulting list for self.widgets.   call the method __init__ from the base class of the class MultiWidget, with an argument attrs.
  define the method get with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
  fill_to is an integer 8.
  if ValidationError exception is caught,
  compile regex from string '^[a-z_][a-z0-9_]*$' in case insensitive mode, substitute it for IDENTIFIER.
  model_dependencies is an empty list.
  break from the endless loop.
  string "memoize wrapper is deprecated and will be removed in Django 1.9. Use django.utils.lru_cache instead.",   RemovedInDjango19Warning and stacklevel set to integer 2.   decorator function wraps with an argument func.
  for every root, dirs and files in subdirectory tree starting from the base dir template_dir,
  call the method parser.compile_filter with an argument second element for bits, substitute the result for parent_name.
  where '%s' is replaced with self.__class__.__name__.   property decorator,
  do nothing.
  skip this loop iteration,
  derive the class LoaderOrigin from the Origin base class.
  from django.conf import settings into default name space.
  TOKEN_TEXT is integer 0
  if not,
  import_module called with an argument parentmod and submod, evaluates to false.   raise an ViewDoesNotExist exception with an argument string "Could not import '%s'. Parent module %s does not exist.",
  call the method MIMEMultipart.__init__ with 5 arguments: self, _subtype, boundary, _subparts and unpacked dictionary _params.
  sum the result of the method s.get_data and s.rawdata, return the result.
  return boolean False.
  append i-th element of existing to child_loggers.
  try,
  leave_locale_alone is boolean False.
  append the results into a list, substitute it for value.   node is an instance CycleNode class, created with  values,name and silent set to silent.
  define the function send_mass_mail with, datatuple, fail_silently set to False, auth_user set to None, auth_password set to None,
  define the method render with 2 arguments: self and context.
  if self.verbosity is greater or equal than integer 1,
  delete value under the key key of dictionary at last element of self.dicts.
  if size is None substitute self._remaining for remaining, if not, substitute size for remaining.
  divide negative dklen with hlen, substitute floored result for l.
  if ValueError or TypeError exceptions occurred,
  from django.utils.formats import get_format into default name space.
  append tuple containing element attr to boolean_attrs.
  call the method self._stream.read with an argument integer 1, substitute the result for unused_char.
  if not,
  if model has an 'natural_key' attribute,
  if form.cleaned_data is true and value under the field key of form.cleaned_data dictionary is not None,
  substitute ending for self.ending.
  convert processors elements into a tuple, substitute it for _standard_context_processors.
  an empty string for 'clear_template' and self.clear_checkbox_label for 'clear_checkbox_label'.   template is a string '%(input)s'.
  needs_multipart_form is boolean True.
  try,
  define the method execute with 3 arguments self, unpacked list args and unpacked dictionary options.
  define the method resolve_variable with 2 arguments: path and context.
  substitute file_name for t.
  substitute asvar for self.asvar.
  return an empty string.
  call the method self.get_unique_error_message with an argument unique_check, append the result to errors.
  if extend is true,
  import module os.
  call the method handler.endElement with an argument string 'entry'.
  if not,
  if attrvalue is not an empty string,
  if exctype is not WindowsError or string 'Access is denied' is not contained in value converted into a string,
  return s.
  from django.utils.six.moves import socketserver into default name space.
  from django.core.exceptions import SuspiciousMultipartF into default name space.
  assign the result to the value under the string ".moves.urllib_error" appended to __name__ key of the sys.modules dictionary,   and to the value under the string ".moves.urllib.error" appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_request from the _LazyModule base class.
  if only_django,
  if self.active_readers equals integer 0 and self.waiting_writers is not equal to integer 0,
  derive the class date from the real_date base class.
  saved_locale is None.
  define the function add with 2 arguments value and arg.
  return boolean True.
  return iri.
  define the method __init__ with 3 arguments: self,unpacked list args and unpacked dictionary kwargs.
  from django.core.serializers.python import Serializer as PythonSerializer into default name space.
  define the method _has_changed with arguments self, initial and data.
  and unpacked dictionary kwargs.   delete the value under the 'content-type' key of the self dictionary.
  get config dictionary element under 'handlers' key, if it exists substitute it for handlers, if not, handlers is EMPTY_DICT.
  call the method self.data.weekday, use the result as an key for obtaining WEEKDAYS dictionary value, return it.
  REASON_PHRASES is a dictionary containing 59 initial entries: 'CONTINUE' for 100, 'SWITCHING PROTOCOLS' for 101,
  return valid.
   substitute value under the PREV key of the root dictionary for last.
  ignore is a lambda function with pattern as an argument, return value is the return value of the function fnmatch.fnmatchcase,
  call the function force_text with an argument value, call the method translate on the result, with an argument _js_escapes,
  call the method __init__ from the base class of the class BaseModelForm, with 8 arguments: data, files, auto_id, prefix, object_data,
  define the function upper with an argument value.
  from __future__ import unicode_literals into default name space.
  import module warnings.
  if self.is_bound is true and i is smaller than self.initial_form_count,
  if not,
  sort value with key set to filed resolve of instance of a class Variable, created with an argument arg, reverse the sort and return the result.
  from django.core.management.base import BaseCommand and CommandError into default name space.
  if self.inverse_match equals to return value of the self.regex.search method converted to boolean, called with argument force_text(value),
  return an empty string,
  substitute the return value of the method self.object_list.count for self._count.
  define the method _iterkeys with an argument self.
  call the method handler.addQuickElement with 3 arguments: string 'dc:creator',
  import module os.
  and pattern.default_args.   substitute lookups for the value under language_code key of the self._reverse_dict dictionary.
  and remove_tags.   from django.utils.http import urlquote into default name space.
  crate a file named init_path.
  derive the class MiddlewareNotUsed from the Exception base class.
  from django.core.serializers.base import DeserializationError into default name space.
  define the method _construct_form with 3 arguments: self, i and unpacked dictionary kwargs.
  if self.first is false,
  define the method __getitem__ with 2 arguments: self and key.
  self._post is an instance of QueryDict class created with an empty string as argument.
  substitute tagtype for self.tagtype.
  call the function copy with an argument self, substitute the result for new_context.
  call the method self._archive.close.
  if end is lesser than integer 0,
  define the method y with an argument self.
  return input_val.
  is_templatized is boolean True.
  output is an empty list.
  call the method six.reraise with 3 arguments: MultiPartParserError, MultiPartParserError created with msg,
  substitute nodelist_true and nodelist_false for self.nodelist_true and self.nodelist_false, respectively.
  if not,
  define the method __init__ with 7 arguments: self, data set to None, files set to None, auto_id set to an string 'id_%s',
  try,
  write msg to self.stderr stream.
  write a white space to the self.stream file stream.
  if self._content_length equals integer 0,
  make a system symbolic link between original_path and symlink_path.
  from django.utils import six into default name space.
  from decimal import Decimal and DecimalException into default name space.
  outdict is an empty dictionary.
  filters is an empty list.
  raise and exception InvalidCacheBackendError with string "Could not find backend '%s': %s" as argument, replace '%s' with backend and e, respectively.
  call the method now.decode with an argument string 'utf-8', substitute the result for now.
  from django.conf import settings into default name space.
  if media is true,
  if ValidationError, renamed to e, is caught,
  define the method execute with 3 arguments: self, unpacked list args and unpacked dictionary options.
  substitute self._parser for parser.
  call the method self.prepare_value with an argument initial_value, use it as the argument for the call to the function force_text,
  if not,
  if KeyError exception is caught,
  for every c in choices split into words, concatenate prefix, result of the function re.escape with an argument c and suffix,
  raise an TypeError exception with an argument string "Non-integer base36 conversion input.".
  append '=' to opt_label.
  if self.current_token is not EndToken,
  substitute length of digittuple for digits.
  try,
  VARIABLE_TAG_START is a string '{{'.
  do nothing.
  call the function fn with list of arguments args and dictionary of argument values kwargs.
  if vale is not an instance of ConvertingDict and value is an instance of dict type,
  default is a an empty list and help is a string '(use multiple --exclude to exclude multiple apps/models).'.   call the method parser.add_argument with 6 arguments: string '-n', string '--natural', action is string 'store_true', dest is string 'use_natural_keys',
  call the method self._archive.namelist, substitute the result for namelist.
  subtract result of the method self.initial_form_count from i, use the result as an index to get the element from self.initial_extra,
  do nothing.
  return an empty string,
  assign it to value under the string ".moves.urllib_robotparser" appended to __name__ key of the sys.modules dictionary,   and to value under the string ".moves.urllib.robotparser" appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib from the types.ModuleType base class.
  define the method validate_number with self class instance and number as arguments.
  message is a string 'make sure the name begins with a letter or underscore'.
  if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
  do nothing.
  from django.utils.encoding import smart_text into default name space.
  define the function is_library_missing with an argument name.
  if m is None,
  return unbound.im_func.
  define the method _convert_to_charset with 4 arguments: self, value, charset and mime_encode set to boolean False.
  substitute fk for FormSet.fk.
  endless loop,
  define the method delete with arguments self and name.
  substitute root for oldroot.
  define the function _curried with 2 arguments: unpacked list moreargs and unpacked dictionary morekwargs.
  define the method __deepcopy__ with arguments self and memo.
  define the method end_serialization with an argument self.
  substitute the result for klass.   if klass is a subclass of logging.handlers.MemoryHandler base class and string 'target' is contained in config,
  if LookupError exception is caught.
  if shown is an empty set,
  var_obj is None.
  return from the function
  call the method self.parent_widget.render with unpacked list args as an argument, return the result.
  if not, self.reason_phrase is a string 'UNKNOWN STATUS CODE'.   substitute content_type for value under the 'Content-Type' key of the self dictionary.
  return result.
  if return value of the function normcase called with an argument final_path doesnt starts with result of the function normcase,
  call the method to_python with an argument data from the base class of the class ImageField, substitute the result for f.
  try,
  return nothing.
  define the method create_table with arguments self, database and tablename.
  call the x.split method with arguments: character '=' and integer 1, store the result in k and v, respectively.
  if app_config.models_module is None,
  call the self.get_backend_timeout with argument timeout, substitute it for the value under the key key of self._expire_info dictionary.
  return value under the name key of the data dictionary, if it doesnt exists, return None.
  call the method __init__ from the base class of the class SimpleTemplateResponse, return the result.
  if not,
  output_transaction is boolean True.
  _supported is None.
  if not,
  if last element of line is newline or carriage return character,
  raise an TypeError with an string 'formfield_callback must be a function or callable'.
  substitute csrf_token for value under the 'csrf_token' key of new_context dictionary.
  append self to nodes.
  call the function ugettext with an argument msg_with_ctxt, substitute the result for result.
  call the function gettext with an argument message, use the result as an argument for the call to the force_text function, return the result.
  if sys.platform starts with a string 'java',
  from django.db.migrations import Migration into default name space.
  return an empty string.
  if digest is false,
  if ch equals a string '?',
  if _default is None
  try,
  define the method delete_many with arguments self, keys and version defaulting to None.
  call the method self.stream.flush.
  define the method __init__ with 2 arguments: self and value.
  if timeout is greater than integer 2592000,
  define the method _load_post_and_files with an argument self.
  return an empty string.
  if 'args' is contained in options,
  if verbosity is greater or equal to integer 2,
  import module decimal.
  define the method evalu with 2 arguments self and context.
  call iri_to_uri with return value of the request.build_absolute_uri method, us the result as the argument for the call to the
  try,
  substitute _urllib_response_moved_attributes for Module_six_moves_urllib_response._moved_attributes.
  define the method fastcgi_help with an argument message set to None.
  skip this loop iteration.
  define initialization method __init__, with self class instance as the argument.
  from django.utils.formats import localize into default name space.
  import module os.
  define the method dst with 2 arguments self and dt.
  call the method filename.encode with an argument string 'ascii'
  if finder is None,
  raise an BadHeaderError exception with an argument string "Header values can't contain newlines (got %r)", where '%r' is replaced with value.
  if quote_double_quotes is true,
  raise an ImproperlyConfigured with an argument string 'Loader does not define a "load_template" callable template source loader'.
  define the function _bin_to_long with an argument x.
  define the method __init__ with 13 arguments: self, path, match set to None, recursive set to boolean False,
  try,
  call the method self.validate_key with argument key.
  while factor is greater or equal to integer 0,
  cache_key is a tuple with 2 argumetns: format_type and lang.
  match regex date_re with value, substitute the result for match.
  call the method self.__class__ with 3 arguments: an empty string, mutable is boolean True, encoding is self.encoding, substitute the result for result.
  substitute t.lineno for comment_lineno_cache.
  substitute f.name for field.
  append first element of e.args to not_found list.
  substitute value under the f.name key of the widgets dictionary for value under the 'widget' key of kwargs dictionary.
  input_type is a string 'hidden'.
  return boolean False.
  define the method _get_num_pages with an argument self.
  define the method remove with 2 arguments: self and item.
  if value under the 'author_link' key of the self.feed dictionary is not None,
  from django.utils.translation import ugettext_lazy into default name space.
  if template_name is an instance of list or tuple types,
  call the method self._assert_mutable.
  for every lineno and line is enumerated result of the method content.splitlines, called with an argument boolean True,
  if not,
  define the method __bool__ with argument self.
  decorator python_2_unicode_compatible,
  return lookup_view
  call the function quote with 2 arguments: url and safe as bytes string '!*\'();:@&=+$,/?#[]~', substitute the result for url.
  call the function digest twice, substitute the results for inner, outer, respectively.
  bitwise shift integer 1 to the left by 63 spaces, substitute integer 1 from the result, convert the result to a integer, substitute it for MAXSIZE.
  call the method value.replace with an argument tzinfo as timezone, return the result.
  call the method six.iteritems with an argument dict_, for every k and v in the result,
  define the method __setitem__ with arguments self, name and val.
  substitute self.version for version.
  substitute WindowsError for WindowsError.
  import module os.
  from django.utils.daemonize import become_daemon into default name space.
  convert value into a iterator, substitute the result for self._iterator.
  if errors is true,
  and substitute the result for self.prefix.   substitute auto_id for self.auto_id.
  define the method _read_limited with self class instance and size set to None as arguments.
  define the method render with 2 arguments: self and context.
  call the function mark_safe with an argument message, return the result.
  return an empty list.
  assign the result to cc.   cc is a dictionary populated with items by calling function dictitem with el as argument, for every el in cc.
  and self.message equals to other.message, and self.code equals to other.code, return boolean True, otherwise return boolean False.   validate_email is an instance of EmailValidator class.
  define the function restart_with_reloader.
  with call to the function transaction.atomic with using set to connection.alias and savepoint set to connection.features.can_rollback_ddl, as arguments.
  try,
  if self.verbosity is greater or equals to integer 2.
  if field_type is a tuple,
  if IndexError exception is caught,
  call the __init__ method with unpacked list args and unpacked dictionary kwargs from the base class of the GenericIPAddressField class.
  intrans is boolean False.
  try,
  return boolean True.
  substitute value for value under name key of msg dictionary.
  if value is None,
  if initial is not None,
  if self.m2m.data and save_m2m are true,
  if item is not an instance of list or tuple class,
  if nesting is false,
  if use_tls is None substitute settings.EMAIL_USE_TLS for self.username, if not substitute use_tls for self.use_tls.
  define the method start_object with arguments self and obj.
  call the function apps.get_app_configs, for every app_config in result,
  message is a string 'use only numbers, letters and underscores'.
  call the method copy.copy with an argument self, return the result.
  return cached.
  if script_url is true,
  if self.timezone is false,
  derive class FileProxyMixin from the base class object, making it a new-style class.
  if status is not equal to STATUS_OK,
  append self.msguniq_options to a list containing a string 'msguniq', append list containing potfile to the result, substitute it for args.
  if is_relation is true,
  call the function re.compile with arguments regex and re.UNICODE, substitute the result for compiled_regex.
  if OSError, renamed to e, exception is caught,
  call the function force_text with an argument truncate, substitute the result for truncate.
  substitute node.source for e.django_template_source.
  substitute '%s' in string '%s-%s' with self.prefix and field_name and return it, if self.prefix is true, if not return field_name.
  raise an exception.
  call the method execute form the base class of the class Command, with 2 arguments: unpacked list args and unpacked dictionary options.
  define the method __init__ with arguments: self, fail_silently set to boolean False and unpacked dictionary kwargs.
  if not,
  if not,
  define the method _cache with argument self.
  if level is not an integer raise an error with message string "The first argument should be level.".
  if mimetype is None, raise an error.
  substitutions is a dictionary with 4 initial entries: self.initial_text for 'initial_text', self.input_text for 'input_text',
  call the method self.make_key with key and version set to version as arguments, substitute the result for key.
  substitute resolver_match for request.resolver_match.
  replace '%s' in string "copying plural forms: %s\n" with plural_form_line, write it to self.stdout.
  if Resolver404, renamed to e, exception is caught,
  if timezone has an attribute 'localize',
  message_context is None.
  except if KeyError exception is caught,
  join 'conf' and 'locale' into a file path, use it as an argument for the call the method os.path.abspath,
  call the function mark_safe with an argument string ' selected="selected"', substitute the result for selected_html.
  call the method self.xml.startElement with argument string 'natural' and an empty dictionary.
  call the method value_from_datadict from the base class of the class ClearableFileInput,
  if widget is an instance of NumberInput and string 'step' is not contained in widget.attrs.
  do nothing.
  return last element of list_.
  define the method __repr__ with an argument self.
  define the method __init__ with 4 arguments: self, message, code set to None and params set to None.
  substitute result for self.find_template_cache dictionary value under the key key.
  convert value under the 'REQUEST_METHOD' key of the environ dictionary to uppercase, substitute it for self.method.
  add state element to self.__dict__ dictionary.
  define the function new_date with an argument d.
  substitute SelectMultiple for widget.
  convert is a dictionary with 4 initial entries: list with 3 tuples: tuple with 2 elements: string '__gt__',
  if url ends with '/' character,
  substitute loaders for self._loaders.
  return FASTCGI_HELP.
  call the method __setitem__ from the base class of the QueryDict class, with arguments key and value.
  get the value under the key key of the self.cookies dictionary, domain expires for 'domain' key of the returned dictionary.
  substitute stream for self.stream.
  field_desc is a string '%s = %s%s', where '%s' is replaced with: att_name, an empty string if '.' is contained in field_type,
  sort the result and substitute it for options.   for every option in options,
  write migration_string to file fh.
  return result converted into an integer.   define the method w with an argument self.
  if not,
  derive the class QueryDict from the base class MultiValueDict.
  decrement factor by one.
  create the list of paths from which filename module was included for every filename in new_modules, only is filename has '__file__' attribute, substitute the resulting list for new_filenames.
  try,
  return self.field.widget.is_hidden,
  or first element of var equals '_',   raise an TemplateSyntaxError exception with an argument string "Variables and attributes may not begin with underscores: '%s'",
  if name is None,
  property decorator,
  return settings.TEMPLATE_STRING_IF_INVALID.
  if Resolver404 exception is caught,
  and help is a string 'Module paths to test; can be modulename, modulename.TestCase or modulename.TestCase.test_method'.   call the method parser.add_argument with 5 arguments: string '--noinput', action set to 'store_false', dest set to 'interactive',
  if exception OSError, renamed to e, is caught,
  match rest string with self.INDEX_PATTERN regex, substitute the result for m.
  return boolean True.
  call the methof match.group with an argument "filter_name", substitute the result for filter_name.
  return integer -1.
  if not,
  docs_version is a string 'dev'.
  define the method value with an argument self.
  read the whole self file and yield it as a generator return value.
  call the method self.get_template_sources with 2 arguments template_name and template_dirs, for every filepath in the result,
  otherwise call the method table2model with second element of the i-th row of relations and substitute it for rel_to.   if rel_to is contained in known_models,
  substitute length for self._length.
  call the function exhaust with an argument stream.
  import module warnings.
  get the value under the name key of the self.fields dictionary, substitute it for field.
  call the add_arguments method from the base class of the class Command with parser as an argument.
  import module datetime.
  if subcommand equals to a string 'help'.
  if not,
  pending_references is a empty dictionary.
  call the method self._css.keys, sort the result and substitute it for media.
  call the method self.can_write.acquire.
  if value in self.empty_values,
  unpacked dictionary created with elements of morekwargs dictionary through the kwargs mapping, return the result.   return _curried.
  call the method add_arguments from the base class of the class Command, with an argument parser.
  open pythonrc, with the file handle renamed to handle perform the following,
  take a tuple with 2 elements: boolean False and instance of Variable class, created with an argument constant_arg, append it to args.
  define the function ugettext with an argument message.
  reset_sequences set to reset_sequences, allow_cascade set to allow_cascade, substitute the result for sql_list.   if interactive is true,
  if SkipFile exception is caught,
  if first element of the second row of args equals a string '2',
  call the function _explode_shorthand_ip_string with an argument ip_str, substitute the result for ip_str.
  if self.fail_silently is boolean False,
  substitute sys.maxsize for MAXSIZE.
  if ValueError exception is caught,
  append contents to singular.
  define the method __repr__ with an argument self.
  call the sign method from the base class of the TimestampSigner class with an argument value, return the result
  append an empty string to dirs list.
  define initialization method __init__ with self class instance, level, msg, hint defaulting to None, obj defaulting to None and if defaulting to None as arguments.
  instantiate a class Group with 2 arguments: string "%%(%s)s" formated with name, and name, append it to result.
  call the sio.read method, substitute the result for self.buffer.
  default as an empty list and help as an string 'Locales to exclude. Default is none. Can be used multiple times.'.   define the handle method with self class instance and dictionary **options as arguments.
  call the method httpd.serve_forever.
  if exit_code is not equal to integer 3.
  return string 'initial-%s' where '%s' is replaced with return value of the self.add_prefix method called with an argument field_name.
  call the method self.data.weekday, use the result as an key for obtaining WEEKDAYS_ABBR dictionary value, return it.
  from django.utils.translation import get_language into default name space.
  call method self.serialize_headers, append bytes string '\r\n\r\n' to the result, append self.content to the result, return it.
  define the method __getitem__ with an argument self.
  set class fields _request_middleware, _view_middleware, _template_response_middleware, _response_middleware and _exception_middleware to None.
  try,
  if sign is true,
  define the method __init__ with 3 arguments: self, template_string and origin.
  call the method self._ordering.sort with an argument key as compare_ordering_key.
  if KeyError exception is caught,
  from lib2to3.pytree import Leaf and Node into default name space.
  substitute DateTimeInput for widget.
  replace tags for check.tags.
  from django.utils import six into default name space.
  call the method node.getElementsByTagName with the argument string 'natural', substitute the result for keys.
  define the method add_item_elements with 3 arguments: self, handler and item.
  ADDRESS_HEADERS is a set containing strings: 'from', 'sender', 'reply-to', 'to', 'cc', 'bcc', 'resent-from', 'resent-sender',
  if not,
  define the method __init__ with 2 arguments: self and token.
  if settings.configured is false,
  call the method self.prepend_token with an argument token,
  call the self.path with argument name, use the result as an argument for the call to the os.path.getsize function, return the result.
  substitute key for op.id.
  define the function compress_sequence with an argument sequence.
  if potfile file path doesnt exist,
  get value under the 'database' key of the options dictionary, use it as a key to get the value from the connections dictionary,
  call the function force_text with an argument text, replace every occurrence of '&' in the result with '&amp;',
  position the file pointer at the beginning of self file.
  if e is not an instance of CommandError class,
  define the method __iter__ with an argument self.
  data is an empty dictionary,
  import module random.
  if ',' is contained in second element of args,
  call the function chain with an argument unpacked list, append name to string 'render_',
  from django.http.cookie import SimpleCookie into default name space.
  code is a string 'limit_value'
  substitute dirpath for self.dirpath.
  call the function parse_header with an argument line, substitute the result for main_value_pair and params, respectively.
  substitute elements of self.template_string list from upto index to the end for last_lit.
  do nothing.
  if value is None,
  raise an ContentNotRenderedError exception with an sring 'The response content must be rendered before it can be accessed.'.
  call the method __init__ from the base class of the class ContextDict, with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  return f.
  if value under the 'indend' key of the options dictionary exists and is not None,
  remove element from kwargs dictionary under the key 'pk_field', substitute it for self.pk_field if it exists,
  for every o in opts.   for every val in value,
  define the method update with 2 arguments: self and dict_.
  call the function format_html with 2 arguments: string '<input{0} />' and result of the function flatatt,
  for every x in sequence of integers from 0 to 7.   background is a dictionary created with elements: x appended to a string '4' for value under the key x of color_names dictionary,
  if settings.DEBUG is true,
  substitute method for value under the funcname key of the dictionary under the klass key of the cls.__dispatch dictionary.
  from django.template.base import TemplateDoesNotExist into default name space.
  if arg is None
  call the self._lib.Client with argument self._servers, substitute the result for self._client.
  decorator stringfilter,
  raise an exception,
  call the method apps.get_app_config with an argument app_lable, for every app_label in app_labels, append the results to app_configs list.
  from django.core import urlresolvers into default name space.
  logger.handlers is an empty list.
  substitute parsed for self.parsed.
  raise an ValueError exception with an argument string 'Unable to add filter %r: %s' formated with f and e.
  call the method time_str.decode with an argument string 'utf-8', substitute the result for time_str.
  from itertools import chain into default name space.
  if response is True,
  call the method f.save_form_data with 2 arguments: instance and value under the f.name key of cleaned_data dictionary.
  call the addr.split method with character '@' and integer 1 as arguments, substitute the result for localpart and domain, respectively.
  return an empty string.
  call the method self.filter_expression.resolve with an argument context, substitute the result for output.
  for every digit in number coverted to a string,
  try,
  if neg is true,
  call the method parser.compile_filter with an argument bit, append the result to args.
  define the method attach_file with arguments self, path and mimetype set to None.
  derive the class NoReverseMatch with Exception as base class.
  return an empty dictionary.
  call to the field.to_python method, substitute the result for value.   substitute value for value under the field.name key of the data dictionary.
  if s is an instance of an object Promise.
  if e doesnt have an 'django_template_source' attribute,
  call the method cursor.execute with string "SELECT cache_key, value, expires FROM %s WHERE cache_key = %%s" as argument,
  import re module.
  self.method is None.
  increment self.active_writers by integer 1,
  decorator function register.filter with an argument is_safe set to boolean False.
  import module pickle.
  return end ans next.
  if os has an attribute 'chmod',
  internal_use_only is boolean True.
  self._current is None.
  define the method __iter__ with an argument self.
  if best_doublecolon_end equals length of hextets,
  derive the class ValidationError from the Exception base class.
  call the BaseConverter function with BASE62_ALPHABET as argument, store the result in base62.
  from django.core.management.base import BaseCommand into default name space.
  call the method qs.using with an argument form.instance._state.db, substitute the result for qs.
  if e doesnt have an 'django_template_source' attribute,
  call the method self.nodelist.render with an argument context, return the result.
  call the method self.configure_root with an argument root.
  if opname is not contained in roots,
  return a string "<UTC>".
  changeset is None.
  call the method self.target.resolve with 2 arguments: context and boolean True, substitute it for obj_list.
  call the method match.start, substitute the result for start.
   self._headers is an empty dictionary.
  from importlib import find_loader as importlib_find.
  property decorator,
  if plan is true,
  if seventh element of row is true,
  get the value under the key key of the self.cookies dictionary, call the cookie_date function with an argument:
  for every i and tuple containing 2 elements: seconds and name, in enumerated chunks,
  value under the 'null' key of the extra_params dictionary is boolean True.
  define the method accessed_time with arguments self and name.
  for every loader in self.loaders,
  import module os.
  define the method clear_checkbox_id with 2 arguments: self and name.
  call the function reverse with 4 arguments: concatenated project_name, character '.' and view_name, args as args, kwargs as kwargs,
  substitute template_dirs for self.template_dirs.
  call the method self.tag with 2 arguments: function_name and compile_func.
  take last four elements of base and append ext to it, substitute result for ext.
  MONTHS is a list with 12 elements: strings 'jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', and 'dec'.
  raise an CommandError exception with an argument string "Command doesn't accept any arguments".
  initial is an empty list.
  define the method __ne__ with 2 arguments: self and other.
  call the method self.set with key, value, timeout and version as arguments.
  define the function method_decorator with an argument decorator.
  subtract self.STDOFFSET with self.DSTOFFSET, substitute the result for self.DSTDIFF.
  return boolean False.
  fetch one record from the database cursor points at, substitute the first element of return value for num.
  if value is None,
  join the list of statements into a string separated by new lines, return it.
  if index is not None and index is smaller than return value of the method self.initial_form_count,
  from django.core.exceptions import ImproperlyConfigured into default name space.
  replace '%s' in string "'%s' already exists" with top_dir, substitute it for message.
  call the function do_ifequal with 3 arguments: parser, token and boolean False, return the result.
  return __wrapper__.
  if level is an instance of int type,
  from django.core.management.base import BaseCommand and CommandError into default name space.
  define the method __getattr__ with arguments self and name.
  if self.field.localize is true,
  derive the class CheckboxFieldRenderer from the ChoiceFieldRenderer base class.
  return settings.LANGUAGE_CODE.
  substitute tokens for self.tokens.
  import module os.
  join 'conf' and 'locale' into a file path, if it is a directory,
  define the function parse_accept_lang_header with an argument lang_string.
  call the method self.var.resolve with an argument context, substitute it for obj.
  sub_match_dict is a dictionary created from self.default_kwargs dictionary using mapping function match.groupdict.
  with 3 arguments: data, files and return value of the function self.clear_checkbox_name called with an argument name,   evaluates to true,   if upload is true,
  otherwise if closing_tag is true,
  call the method self._setup.
  message_context is None.
  if ipv4_unpacked is true,
  if i is greater than or equal to the result of the method self.initial_form_count,
  return self.__offset.
  slice the list value with unpacked list bits as an argument, return the result.
  exit the program with failures converted to boolean as a message.
  get handler_config dictionary element under 'level' key, if it exists substitute it for level, if not, level is None.
  split tag_re by self.template_string separator, for every bit in result,
  call the function yaml.dump with 4 arguments: self.objects, self.stream, Dumper=DjangoSafeDumper and unpacked dictionary self.options.
  substitute value under idx key of dictionary d for d.
  dictionary containing element v for k.   for every k and list_ in return value of the method self.lists,
  define the method led with 3 arguments self, left and parser.
  call the function getargspec with an argument func, substitute the result for params, varargs, varkw and defaults.
  if field_value is not None,
  msg is a instance of a SafeMIMEText class created with arguments: self.body, self.content_subtype and encoding.
  from threading import local into default name space.
  BASE36_ALPHABET is a string '0123456789abcdefghijklmnopqrstuvwxyz'.
  return commands.
  raise an ValueError exception with string "Key '%s' not found" as argument, substitute '%s' for key.
  return value.
  call the function self.filepath.resolve with an argument context, substitute the result for filepath.
  return the value under the 'CONTENT_TYPE' of the META dictionary, if it doesnt exist return an empty string,   substitute the result for content_type.   if content_type doesnt start with string 'multipart/',
  for every sql in index_sql,
  make target_dir directory,
  if number is lesser than integer 1,
  if as_form is true,
  for every c in candidate without the last element and in reversed order, convert c into an integer,
  for every regex in tuple with 3 elements: RFC1123_DATE, RFC850_DATE and ASCTIME_DATE,
  if not,
  if KeyError exception is caught,
  call the method to_python with an argument value from the base class of the DateField class, return the result.
  define the method create_nodelist with an argument self.
  if field.rel is true, and field.rel is an instance of models.ManyToManyRel,
  for every path in paths,
  for every label in labels,
  call the method bytes_to_text with 2 arguments: value and self.encoding, substitute the result for value.
  call the function func with an argument unpacked list args, substitute the result for result.
  put elements of ignore_patterns into a set, substitute the length of it for self.ignore_patterns.
  string 'Ensure this value has at most %(limit_value)d characters (it has %(show_value)d).' and string 'limit_value', substitute the result for message.   code is a string 'max_length'
  substitute the self.DEFAULT_CHUNK_SIZE for chunk_size.
  otherwise if ch equals a string 'P',
  if block_context is None,
  substitute the value under the 'errlog' key of options dictionary for value under the 'err_log' key of daemon_kwargs dictionary.
  if not,
  substitute self.min_value for the value under the 'min' key of the attrs dictionary.
  call the method self.render_option with 3 arguments: selected_choices, option_value and option_label, append the result to output.
  return model_list.
  if the boolean return vale of the call to the function is_protected_type(s) and string_onlys are boolean True,
  call the method self.add_filters with 2 arguments: result and filters.
  match value string with regex self.CONVERT_PATTERN, substitute the result for m.
  define the method urlconf_module with an argument self.
  register is an instance of Library class.
  try,
  try,
  from django.template import Lexer, TOKEN_TEXT, TOKEN_VAR, TOKEN_BLOCK, TOKEN_COMMENT and TRANSLATOR_COMMENT_MARK.
  call the method termios.tcsetattr with fd, termios.TCSANOW and attr_list, as arguments.
  derive the class BaseInlineFormSet from the BaseModelFormSet base class.
  if not,
  format_html_join, called with 3 arguments: empty string, string '<li>{0}{1}</li>', tuple containing tuples with 2 elements:   k and result of the function force_text with an argument v, for every k and v in items of the dictionary self, return the result.   define the method as_text with an argument self.
  assign the result to opts and new_class._meta.   for every opt in list containing 3 elements: strings 'fields', 'exclude' and 'localized_fields',
  substitute the result for last element of output.   if not,
  import module mimetypes.
  return an empty string.
  return _localtime.
  import module sys.
  substitute self.file for thefile.
  get attribute '_non_atomic_requests' from the view object, if the attribute doesnt exist return the empty set, substitute the result for non_atomic_requests.
  from django.utils import timezone into default name space.
  if not,
  define the method expression with 2 arguments: self and rbp set to integer 0.
  call the method (hidden_widget.value_from_datadict with 3 arguments: self.data, self.files and initial_prefixed_name,
  define the method i with an argument self.
  substitute fcntl.LOCK_SH for LOCK_SH.
  define the method render with an argument self.
  return the result of the method self.errors.get called with 2 arguments: NON_FIELD_ERRORS and return value of the method,
  if not, self.require_all_fields is boolean True.   call the method __init__ with 2 arguments: unpacked list args and unpacked dictionary kwargs, from the base class of the class MultiValueField.
  define the method choice with 2 arguments: self and obj.
  derive class MovedModule from the _LazyDescr base class.
  append block to the value under the name key of self.blocks dictionary.
  define the initialization method __init__ with self class instance and environ as arguments.
  substitute CheckboxInput for widget.
  try,
  return an instance of SafeText, created with an argument t.
  call the method copy.deepcopy with an argument self.widgets, substitute the result for obj.widgets.
  otherwise html_message is None.   call the method mail.mail_admins with 5 arguments: subject, message, fail_silently as boolean True, tml_message as html_message,
  call the function os.unlink with an argument work_file.
  substitute __import__ for importer.
  define the method close with argument self.
  return s.
  call the method language_code_re.search with an argument lang_code, if it evaluates to false,
  help is a string "Prints the SQL statements for the named migration."
  return self._queryset.
  if self.required is false,
  return value under the name key of the sys.modules dictionary.
  _urllib_robotparser_moved_attributes is a list containing an instance of MovedAttribute class, created with 3 argument: strings,
  raise an ValueError exception with an argument string 'Unknown level: %r' formated with level.
  if OSError exception is caught,
  if self.hint exists, replace '%s' in a string "\n\tHINT: %s" with value of self.hint, substitute it for hint, otherwise hint is an empty string.
  substitute func for self.func.
  substitute BOOL for UnlockFileEx.restype.
  raise an CommandError exception with an argument string "You can only use --pks option with one model".
  define the method __init__ with an argument self.
  if ValueError, TypeError or ValidationError exception is caught,
  call the function escape with an argument lead, substitute the result for lead, call the function escape with an argument trail,
  from django.db.utils import DatabaseError into default name space.
  derive the UploadedFile class from the File base class.
  define the method _get_filename with argument self.
  while ch is not equal to terminal_char,
  if value is not contained in result,
  call the method parse from the instance of TemplateIfParser class, created with 2 arguments parser and bits, substitute the result for condition.
  define the function to_locale with an argument language.
  from django.conf import settings into default name space.
  if value is an instance of six.string_types and value is not equal to ALL_FIELDS,
  return an string "<IfEqualNode>".
  if self.to_field_name is true,
  define the method __str__ with an argument self.
  return data.
  concatenate opts.concrete_fields, sortable_virtual_fields and opts.many_to_many, for every f in sorted result,
  if AttributeError exception is caught,
  and replace %r with self.obj, return the result.   define function python_2_unicode_compatible, with klass as an argument.
  for every base in reversed order of bases,
  _localtime is None.
  call te method operator.itemgetter with an argument integer 0, substitute the result for byte2int.
  call the method self.validate_number with an argument number, substitute it for number.
  if not,
  define the function find_filter with 2 arguments: self and filter_name.
  and ip_address_validator_map converted to a list, respectively.   call the re.compile function with an argument raw string '^[\d,]+$', substitute the result for comma_separated_int_list_re.
  if ImportError exception is caught,
  call the method opts.model, substitute the result for self.instance.
  define the method compress with arguments self and data_list.
  substitute ClearableFileInput for widget.
  call the method apps.get_app_config with an argument app_label.
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  import module django.
  append key to self.keyOrder dictionary.
  define the function activate with an argument timezone.
  insert mw_instance.process_exception at the beginning of self._exception_middleware.
  p is a instance of Popen class, created with 6 arguments: args, shell set to boolean False, stdout set to PIPE,
  __D2 is a raw string '(?P<day>[ \d]\d)'.
  join into a file path: app_dir and string %s.%s.sql, where '%s' is replaced by opts.model_name and backend_name, respectively,
  split ip_str into 2 parts from right, return second element of the result.
  if data is true, substitute it for self.data, if not self.data is an empty dictionary.
  call the function cls with 8 arguments: date.year, date.month, date.day, time.hour, time.minute, time.second, time.microsecond,
  for every widget in self.widgets:,
  use the result as an argument for the call to the self.stdout.write.   call the self.sync_apps method with connection and executor.loader.unmigrated_apps as arguments, substitute it for created_models.
  if app_config is None,
  call the method stream.unget with an argument chunk.
  if Exception, renamed to e, exception is caught,
  substitute style.ERROR for style.ERROR_OUTPUT.
  remove elements under the 'path' key of the kwargs dictionary, if it exists substitute it for path, if not path is None.
  if f is an instance of models.FileField,
  return nothing.
  write ',' to the self.stream file stream.
  call the function ugettext with an argument string "Please correct the duplicate data for %(field)s, which must be unique.",
  where '%(app_label)s' is replaced for obj.object._meta.app_label, '%(object_name)s' is replaced with obj.object._meta.object_name,   '%(pk)s' is replaced with obj.object.pk and '%(error_msg)s' is replaced with result of the function force_text with an argument e.   raise an exceptions
  skip this loop execution,
  wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string " FAKED" as a argument.
  otherwise if length of fks_to_parent is zero,
  split s into parts by '.', substitute the result for name.
  if member is a directory,
  call the function force_text with 2 arguments: value under the is_dst key of the time.tzname and DEFAULT_LOCALE_ENCODING,
  join missing_fields into a string separated by string ', ', use it and opts.model.__name__ to format message, substitute the result for message.
  remove original_path directory.
  DEFAULT_LOCALE_ENCODING and strings_only set to boolean True and p.returncode.   define the function handle_extensions with 2 arguments: extensions set to tuple containing string 'html' and ignored set to tuple containing string 'py'.
  call the function force_text with an argument formatstr, use the result as an argument for the call to the method,
  from django.core.servers.fastcgi import FASTCGI_HELP into default namespace.
  from django.conf import settings into default name space.
  WRAPPING_PUNCTUATION is a list with 6 elements: tuple with 2 elements: '(' and ')', tuple with 2 elements: '<' and '>',
  from io import BytesIO into default name space.
  substitute doublecolon_start for best_doublecolon_start.
  call the method self.handle_starttag, with tag and attrs as the arguments.
  skip this loop iteration.
  call the function force_str with an argument url, use the result as an argument for the call to the function unquote, substitute the result for url.
  define the method tag with an argument self.
  if Exception exception is caught,
  for every result and params in possibility,
  self.getlist with an argument k, for every k in self.   return obj_dict.
  from threading import RLock.
  call the method self._assert_mutable.
  substitute xreadlines for __iter__.
  decorator function register.filter with an argument string "escapejs".
  call the get_path_info function with environ as argument, substitute the result for path_info.
  call the function _generator, join the result into a string, return the result.
  append string "Field renamed because it ended with '_'." to field_notes.
  call the method self._clean_fields.
  try,
  if values under the 'socket', 'host' and 'port' keys of the options dictionary are false,
  break from the loop execution.
  define the method reset with an argument self.
  from django.core.urlresolvers import reverse, NoReverseMatch.
  join full_statement into a string, separated by newlines, use it as an argument for the call to the method curs.execute.
  define the method get_meta with arguments self and table_name.
  substitute nodelist_loop for self.nodelist_loop.
  call the method parser.add_argument with string 'app_label', nargs set to charcter '?', help containing string,
  define the function check_all_models with app_configs defaulting to None and unpacked dictionary kwargs as arguments.
  call the method self._setupfunc, substitute the result for self._wrapped.
  use the result as an argument for the call to the json.dumps function, return the result.   define the method as_text with an argument self.
  call parser.add_argument method with 'args', metavar set to string 'fixture', nargs set to string '*' and help set to string 'Path(s) to fixtures to load before running the server.'.
  _iterlists is a string "iterlists".
  define the function bound_func with 2 arguments: unpacked list args2 and unpacked dictionary kwargs2.
  change access mode of path to stat.S_IWRITE mode.
  derive the class Enclosure from the object base class.
  if initial_value is not equal to data_value, return boolean True, otherwise return boolean False.
  call the method self.main_help_text with an argument commands_only set to boolean True, append new line to it, write it to sys.stdout.
  call the method value.astimezone with an argument timezone, substitute the result for value.
  append self.pointer to self.backout.
  call the function _trans.activate with an argument language, return the result.
  derive class WindowsError from Exception base class.
  return boolean False.
  __all__ is a list containing a string 'file_move_safe'.
  help is a string "Runs over the entire source tree of the current directory and "
  try,
  derive the class Command from the BaseCommand base class.
  from django.utils.functional import Promise into default name space.
  define the function remove_move with an argument name.
  if format is not contained in _serializers,
  if form._meta.fields is an instance of tuple type,
  return a string "<%s: %s>" formated with self.__class__.__name__,
  update a dictionary with an entry v converted to an integer for k, for every k and v in result of the function six.iteritems,
  finally perform,
  raise an ValueError with an argument string "Non-reversible reg-exp portion: '(?%s'" formated with ch.
  msg is an string "django.utils.text.javascript_quote() is deprecated. Use django.utils.html.escapejs() instead.".
  from django.utils import six into default name space.
  for every app in app_labels.   call the method autodetector.arrange_for_graph with 2 arguments: changes, loader.graph, substitute the result for changes.
  with all occurrences of '%s' replaced with app_name and model._meta.object_name and e, respectively.   if self.show_traceback is true,
  instantiate class Module_six_moves_urllib_robotparser with an argument, string ".moves.urllib.robotparser" appended to __name__,
  substitute the result input_attrs.   if id_,
  if kwargs is true,
  substitute allow_empty_first_page for self.allow_empty_first_page.
  call the function mark_safe with an argument, elements of bits joined into a string, return the result.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  if _cookie_encodes_correctly is boolean False,
  return an instance of IfNode class, created with an argument conditions_nodelists.
  self._fname is None.
  from django.utils.http import http_date to the default name space.
  set filter_func._decorated_function objects attr attribute to value.
  if not,
  substitute '%s' in a string "Merging %s" with app_label,
  return value.
  call the method re_camel_case.sub with 2 arguments: raw string ' \1' and value, strip the result of whitespaces from both ends,
  raise an TemplateSyntaxError exception with an argument string "Second (optional) argument to %s tag must be 'parsed'",
  from django.conf import urls into default name space,
  substitute v for value under the k-th element of m key of _ dictionary.
  for every val in value call the function smart_text with an argument val, return the results in a lit.
  define the method __iter__ with an argument self.
  return boolean True.
  call the function ensure_echo_on.
  otherwise returns s.   call the method connection.cursor, with the result as cursor,
  if NotImplementedError exception is caught,
  if VariableDoesNotExist exception is caught,
  call the method self._stream.unget with an argument unused_char.
  define the method __init__ with 5 arguments: self, location set to None, base_url set to None, file_permissions_mode set to None,
  required set to required, widget set to widget, label set to label, initial st to initial, help_text set to help_text,   unpacked list args, unpacked dictionary kwargs.   if self.required is true,
  try,
  strings "Please submit %d or fewer forms.", "Please submit %d or fewer forms." and self.max_num,   where '%d' is replaced with self.max_num, and code as a string 'too_many_forms'.   if self.validate_min is true, and length of self.deleted_forms subtracted from the return value of the method self.total_form_count,
  substitute True for self.close_called.
  the %(lookup)s in %(date_field)s.", where '%(field_name)s' is replaced with third element of data_check,   '%(date_field)s' is replaced with fourth element of date_check and '%(lookup)s' is replaced with result of the function,   six.text_type called with second element of date_check as an argument, return the result.   define the method get_form_error with an argument self.
  call the function re.compile with an argument string '(%s.*?%s|%s.*?%s|%s.*?%s)', substitute all occurrences of '%s' with,
  if not,
  where '%s' is replaced with self.id.   define the method led with 3 arguments: self, left and parser.
  otherwise if ch equals a string '.',
  from django.forms.widgets import Widget and Select into default name space.
  raise an ValueError exception with string "Key '%s' not found" as argument, substitute '%s' for key.
  url_markup_template is a string '<a href="{0}">{1}</a>'.
  if TypeError exception is caught,
  VARIABLE_TAG_END is a string '}}'.
  define the method check with 4 arguments: self, app_configs set to None, tags set to None, display_num_errors set to boolean False.
  substitute sys.stdin for fd.
  if the key doesnt exists substitute self.use_natural_keys for self.use_natural_foreign_keys.   remove the 'use_natural_primary_keys' key from the options dictionary and substitute it for self.use_natural_primary_keys,
  try,
  substitute name for handler.name.
  call the function self._resolve_lookup with an argument context, substitute the result for value.
  decorator total_ordering,
  try,
  if ch is not equal to a sring '?' or escaped is true,
  otherwise if name is not None and compile_function is not None,
  call the function force_text with an argument output, substitute the result for output.
  call the method __init__ from the base class of the class MultipleHiddenInput, called with an argument attrs.
  if serializers.SerializerDoesNotExist exception is caught,
  call the function safe_join with 2 arguments template_dir and template_name, yield the result.
  self.lineno is None.
  string "resolve_variable() is deprecated. Use django.template. Variable(path).resolve(context) instead", RemovedInDjango20Warning,   and stacklevel set to integer 2.   call the method resolve with an argument context, from the instance of Variable class, created with an argument path.
  if role is contained in value under the NOCOLOR_PALETTE key of the PALETTES dictionary and definition is true,
  if AttributeError exception is caught,
  all_date_checks is an empty set.
  if domain is not None,
  if UnicodeDecodeError exception is caught,
  new_second_item is an empty list.
  for every handler in handlers,
  replace every occurrence of "'" in s with "\\'".
  match rest string with self.DIGIT_PATTERN regex, if it evaluates to false,
  derive the class Archive from the object base class.
  substitute SafeText for SafeString.
  concatenate opts.concrete_fields, opts.virtual_fields and opts.many_to_many, for every f in the result,
  call the self.stdout.write method with string 'processing file %s in %s\n' as argument, replacing all the occurrences of '%s' with f and dirpath, respectively.
  raise an OverflowError exception with an argument string 'dklen too big'.
  define the decode method with self class instance and s as arguments.
  call the function get_template with an argument file_name, substitute the result for t.
  call the function EmailMultiAlternatives with settings.EMAIL_SUBJECT_PREFIX and subject converted to strings and concatenated,
  substitute connection_reset for self.connection_reset.
  substitute cls.__bytes_cast for cls.__str__.
  try,
  define the method to_python with arguments self and data.
  get 'value' attribute of the _active object
  if field_value is an instance of the str type,
  from optparse import OptionParser into default name space.
  from lib2to3.pgen2 import token into default name space.
  for every middleware_method in self._exception_middleware,
  if six.PY3 is true,
  from django.utils import six into default name space.
  otherwise if self._meta.fields is true and field is not contained in self._meta.fields,
  update attrs dictionary with extra_attrs entry.
  join result of the parts function into a bytes string, substitute it for out.
  if not,
  do nothing.
  call the method self.remove_potfiles.
  if self.timezone is true,
  decrement by length of password, create bytes string with previous result number of characters '\x00',
  if decimals is greater than digits,
  self.second is None.
  substitute the result for new_obj.   if not,
  in string '-W%s' replace '%s' with o for every o in sys.warnoptions, put the result into a list, append the list to a list containing sys.executable, append sys.argv to the end of the resulting list, substitute the result for args.
  call the method connection.creation.sql_for_pending_references with 3 arguments: refo, style and pending_references,
  for every hook in sys.path_hooks,
  substitute callable for callable.
  break the loop execution.
  if self.initial_forms is false,
  from django.utils.encoding import force_bytes into default name space.
  return boolean True.
  try,
  return the instance of DefusedExpatParser class.
  self.content_length is None.
  append filepath to tried.
  if value is an instance of six.text_type class,
  if KeyError exception is caught,
  remove first element from remaining_bits, substitute the result for option.
  define the method exists with arguments self and name.
  close file_ file descriptor.
  if fk_name is true,
  define the method render with 2 arguments: self and context.
  define the method super with an argument self.
  otherwise if self.verbosity is greater than integer 0,
  substitute cache_choices for self.cache_choices.
  call the method self._delete with argument k.
  define the method popitem with an argument self.
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  pathext is an list containing an empty string.
  call the method transaction.atomic with an argument using set to self.using, with the result,
  call the method copy.deepcopy with 2 arguments: self._wrapped and memo, return the result.
  define the method __init__ with 5 arguments: self, template, context set to None, content_type set to None and status set to None.
  call the method __deepcopy__ from the base class of the class MultiWidget, with an argument memo, substitute the result for obj.
  call the method arg.resolve with an argument context, append the result to arg_vals.
  call the function token_kwargs with 3 arguments: remaining_bits, parser and support_legacy set to boolean True, substitute the result for extra_context.
  if not,
  strip value of the first and last element.
  if self.is_localized is true,
  call the method registry.tags_available, sort the result and join it into a string, separate by newlines, write it to self.stdout.
  call self._delete method with argument fname.
  if message_context is true,
  import module django.core.checks.model_checks.
  if format is not contained in _serializers,
  call the method translation.get_language, substitute th result for saved_locale.
   if middleware has an attribute 'process_exception',
  call the method self.handle with 2 arguments unpacked list args and unpacked dictionary options, substitute the result for output.
  return new_class.
  from django.conf import settings object to the default name space.
  return integer 0 and ch2.
  call the method logging.Filter with an argument name, substitute the result for result.
  default_validators is an list containing validators.validate_ipv4_address.
  if regex_match is false,
  call the method other.__cast, substitute the result for other.
  do nothing.
  call the delete method with key and version set to version as arguments.
  if 'fields' attribute of Meta object is None and 'exclude' attribute of Meta object is None,
  raise an ValueError with an argument string "MultiValueDict.update() takes either a MultiValueDict or dictionary".
  if target_dir path doesnt exists,
  call the function walk_to_end with 2 arguments: ch and pattern_iter.
  define the method get_limit_choices_to with arguments self.
  if self.connection is true,
  try,
  plural is an empty list.
  get the value under the key 'only' of the options dictionary, if it exists substitute the result for isolated_context,
  raise an TypeError exception with an argument string 'Level not an integer or a valid string: %r' formated with level.
  call the method token.split_contents, substitute the result for bits.
  for every name in sorted value under the app key of the commands_dict dictionary,
  define the function media with an argument request.
  call the method self._archive.extractfile with an argument member, substitute the result for extracted.
  call the decode function with argument string 'ascii' on the return value of the method domain.encode with argument string 'idna' substitute the result for domain.
  substitute raw_data for data.
  silent_variable_failure is an boolean True.
  call the middleware_method with request and e as the arguments, substitute the result for response.
  if self._dir path doesnt exists,
  for every file in value under the 'files' key of the options dictionary.
  substitute length for truncate_len.
  logger.propagate is boolean True.
  if over_bytes is true,
  if not,
  define the method __init__ with 2 arguments: self and s.
  if self.data.minute equals integer 0 and self.data.hour equals integer 0,
  if chunk_size is false,
  from django.utils.http import urlquote into default name space.
  if meta is None,
  call the function get_internal_wsgi_application, return the result.
  substitute negated for self.negated.
  from django.conf import settings into default namespace,
  from __future__ import unicode_literals into default name space.
  call the method df.format with an argument format_string, return the result.
  if not,
  raise an TemplateSyntaxError exception with an argument string "widthratio takes at least three arguments".
  for every model in app_models,
  if OSError exception was raised,
  from django.core.management.base import BaseCommand into default name space.
  substitute the tuple containing 2 elements p_pattern and pattern for value under the pattern.namespace key of the namespaces dictionary.
  raise a ValidationError exception with arguments self.message and code set to self.code.
  if not,
  call the method check_for_language.cache_clear.
  _format_cache is an empty dictionary.
  return Operator.
  substitute it for value under the string ".moves.urllib" appended to __name__ key of the sys.modules dictionary.   define the function add_move with an argument move.
  where '%s' is replaced with self.id.   define the method display with an argument self.
  with all '%s' strings replaced with migration_name and app_label, respectively, as an argument.   if KeyError exception is raised,
  if StopUpload, renamed to e, exception is caught,
  call the method date.tzinfo.utcoffset with an argument date, substitute the result for offset.
  if os.path has an attribute 'samefile',
  replace '%s' in the string '</\s*%s\s*>' with the result of the function call tag.lower(),
  code_list is an empty list.
  try,
  join self into a bytes string, yield the result as the return value of the generator.
  value under the name key of the form.fields dictionary is an instance of InlineForeignKeyField created with 2 arguments:
  raise an KeyError with an argument string 'Your dictionary lacks key \'%s\'. Please provide it, because it is required to '
  define the method __deepcopy__ with 2 arguments: self and memodict.
  from __future__ import unicode_literals into default name space.
  derive the class EmailValidator form the object base class.
  from django.utils import dateformat, numberformat and datetime_safe into default name space.
  return the value under the language_code key of the self._namespace_dict dictionary.
  return errors.
  call the method self.full_clean.
  do nothing.
  for every value in data call the function force_text with an argument value, add the results into a set, substitute the resulting set for data_set.
  derive the class HttpResponseServerError from the HttpResponse base class.
  replace every occurrence of '\n' in subject with '\\n' and replace every occurrence of '\r' in subject with '\\r',
  for every path in data,
  if not,
  define the function urlize with 2 arguments value and autoescape set to None.
  call the method re.compile with 2 arguments: raw string '^(?P<value>"Plural-Forms.+?\\n")\s*$',
  call the method handler.addQuickElement with 2 arguments: string 'name' and value under the 'author_name' key of the item dictionary.
  define the function load_command_class with arguments: app_name and name.
  first and second are None.
  g is an instance of a class generator.BytesGenerator called with fp and mangle_from_ set to False.
  define the function ungettext with 3 arguments: singular, plural and number.
  if ValueError or TypeError exceptions are caught,
  if not,
  raise an ValidationError exception with 2 arguments: error_message and code as a string 'invalid'.
  add integer 1 to it, substitute the result for space.   if space equals integer 0,
  add data to seen_data set.
  derive the class HttpResponseNotModified from the HttpResponse base class.
  call the method self._callback_strs.add with an argument lookup_str.
  item is a dictionary with 15 initial entries: result of the function to_unicode called with an argument title for 'title',
  define the function mail_managers with subject, message, fails_silently set to boolean False, connection set to None,
  substitute id for self.id.
  substitute _make_key for make_key.
  from gzip import GzipFile into default name space.
  from django.forms.forms import DeclarativeFieldsMetaclass and BaseForm into default name space.
  import module os.
  substitute the result for url.   if NoReverseMatch exception is caught,
  return an empty string,
  derive the class SortedDict from the dict base class.
  substitute url_name for self.url_name.
  from django.utils.six.moves import xrange into default name space.
  yield line.
  call the function import_module with argument self.urlconf_name, substitute the result for self._urlconf_module.
  get the name of the callback, substitute it for view_name.
  if length of fks_to_parent equals integer 1.
  substitute self.rawdata for rawdata.
  convert initial and data into boolean, if they are not equal return boolean True, if they are return boolean False.
  if not,
  append string "Field renamed because it wasn't a valid Python identifier." to field_notes.
  sets the role attribute of the style object to the value of the call to the termcolors.make_style function with dictionary format as an argument.
  if not,
  raise an TemplateSyntaxError exception with an argument "Could not find variable at start of %s.", replace '%s' with token.
  from django.utils import six into default name space.
  self.cc is an empty list.
  call the method __init__ with an argument display_name, from the base class of the LoaderOrigin class.
  increment i by integer 1, substitute the result for i.
  call the function self._key_to_file with key and version as arguments, substitute it for fname.
  substitute tempfile.gettempdir for gettempdir.
  reuturn cache.
  call the function format_html with 2 arguments: string '<ul class="errorlist">{0}</ul>', and return value of the function,
  derive the class ContextDict from the dict base class.
  substitute third element of renamed_method for deprecation_warning.
  get value under the self.blocks dictionary under the name key, return the last element.
  strip trailing '/' from the script_name string, remove first occurrence of '/' in path_info string, append second result to the first, separated with '/', assign the result to self.path.
  return the value under the self.data.month key of the MONTHS_AP dictionary.
  if fext is a file,
  substitute stream_or_string for stream.
  import module warnings.
  call the method parser.compile_filter with an argument value, append the result to args.
  if not,
  call the params.get function with string 'OPTIONS' and None as arguments, substitute the result for self._options.
  import module copy.
  if name equals string "_wrapped",
  return an instance of metaclass class, created with 3 arguments: cls.__name__, cls.__bases__ and orig_vars.
  if new_conn_created is true,
  call the function sql_destroy_indexes with 3 arguments: app_config, self.style and connection, substitute the result for statements.
  import module os.
  if field_type equals a string 'DecimalField',
  call the function _is_shorthand_ip with an argument ip_str, if it evaluates to false,
  cookies is a string '<could not parse>'.
  if re.error, renamed to e, is caught,
  call method sort on the headerlist.
  create list out of last_row elements from the start to the last length of row_ender element, append str_hidden and row_ender to it,
  call the function func with unpacked dictionary kwargs as an argument, substitute the result for translated.
  try,
  if Exception exception is caught,
  do nothing.
  if self.use_natural_foreign_keys is true and field.rel.to has an attribute 'natural_key',
  call the method self.error_class with an argument error_class as an string 'nonfield',
  use the result as an argument for the call to the self.stdout.write method.   if run_syncdb and executor.loader.unmigrated_apps exist,
  if truncate is None,
  call the function get_connection with 2 arguments: backend set to self.email_backend and fail_silently set to boolean True.
  if visible_issue_count equals to integer 0, or for string "1 issue" if visible_issue_count equals integer 1,   or for string "%s issues", with '%s' replaced by visible_issue_count, subtract visible_issue_count from length of all_issues,   and substitute it for second '%s' in the stirting string.   if any element in the return value of the e.is_serious method is true, and if return value of the method e.is_silenced is false,
  from django.utils.safestring import mark_safe, SafeData and mark_for_escaping into default name space.
  call the function six.itervalues with an argument kwargs, convert the result to a list and append it to a list containing args,
  for root, dirs and files in sorted list of the directory tree starting from the directory self.path,
  raise an IOError exception with string "Destination file %s exists and allow_overwrite is False" as argument, where '%s' is replaced by new_file_name.
  from django.forms.widgets import everything into default name space.
  if filename is not contained in _error_files,
  call the method self.create_token with 3 arguments: self.template_string list elements from start index to end index,
  derive class SingleZipReader for zipfile.ZipFile base class.
  self.choices is an list containing an tuple with 2 elements: an empty string and string "---------".
  and RemovedInDjango19Warning.   get the value under the ' use_natural_foreign_keys' key of the options dictionary, substitute the result for  use_natural_foreign_keys.
  run_syncdb is boolean True.
  if unused_char is false,
  match rest string with self.WORD_PATTERN regex, substitute the result for m.
  try,
  if memo is None,
  if timezone has an attribute 'normalize',
  for every dict_ in self.dicts,
  import module warnings.
  relations is an empty dictionary.
  add model to a set, substitute the result for known_models.   pending_references is an empty dictionary.
  return an instance of OrderedDict class, created with an argument fields.
  call method __init__ from the base class of the class PyLibMCCache with arguments: server, params,
  for every app_config in return value of the method apps.get_app_configs if app_config.models_module is not None,
  call the method self.indent with argument integer 2.
  define the method temporary_file_path with argument self.
  from django.utils.encoding import smart_text into default name space.
  substitute _iterkeys for keys.
  define the method close with an argument self.
  try,
  if COOKIES_override is not None, or otherwise generated with the call to the function pformat with an argument request.COOKIES.   if Exception exception is caught,
  internal_use_only is boolean False.
  call the function shutil.move with arguments the_path and guessed_path.
  return the first element of the return value of the call to the self._det_image_dimensions method.
  self.fed is an empty list.
  if UnicodeEncodeError exception is caught,
  call the method __init__ from the base class of the class Truncator,
  try,
  from django.utils.six.moves.urllib.parse import urljoin into default name space.
  inplural is boolean False.
  remove first element of text.
  and help set to a string 'Nominates a database to print the SQL for. Defaults to the "default" database.'.   define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.
  return result and result_args.
  default_error_messages is a dictionary with an entry, result of the call to the function _ with an argument,
  strip whitespaces from both sides of the value, substitute it for value.
  join elements of code_list in a string, separated by ';', format string '\x1b[%sm' with it, append text to the result if exists,
  replace this value with v.   call the function dictvalue with el as argument for every el in values of dictionary cc,
  from django.core.management.utils import find_command and popen_wrapper into default name space.
  if other is an instance of self.__class__ and, self.limit_value equals to other.limit_value, and self.message equals to other.message,
  call the __init__ method with 3 arguments: ERROR, unpacked list args and unpacked dictionary kwargs from the base class of Error.
  call the method extend with an argument error_list on the return value of the method error_dict.setdefault called with 2 arguments: NON_FIELD_ERRORS and an empty list.
  call the model.check method with unpacked dictionary kwargs for every model in return value of function apps.get_models,
  define the function construct_instance with 4 arguments: form, instance, fields set to None and exclude set to None.
  otherwise it is boolean False.   if kwarg_format is false,
  define the method handle_field with arguments self, obj and field.
  append other_dict to self.dicts.
  call the method self._save with arguments name and content, substitute it for name.
  if TypeError or VariableDoesNotExist exceptions are caught,
  if self.app_label is true and app_config.label is not equal to self.app_label,
  call the self.setup_environ method.
  if data is not None or FILE_INPUT_CONTRADICTION,
  from django.utils import six into default name space.
  derive the class EscapeBytes from bytes and EscapeData base classes.
  if field is an instance of models.TimeField and filed.name attribute of obj is not None,
  _iterkeys is a string "iterkeys".
  otherwise if token.token_type equals integer 2,
  substitute used_name for guessed_filename.
  m is an instance of Media class.
  define the method to_python with arguments self and value.
  otherwise assign string 'ascii' to encoding.   call the method lookup with the encoding as the argument.
  import module warnings.
  if '_meta' is not an attribute of obj,
  replace every occurrence of old for new in msgs, substitute the result for msgs.
  return total_forms.
  from django.forms.models import everything into default name space.
  define the method send_messages with arguments self and messages.
  join self.dirpath and self.file in a string, substitute with it '%s' in string "<TranslatableFile: %s>", return the result.
  call the method parser.parse with an argument tuple with an element string 'else' and end_tag, substitute the result for nodelist_true.
  substitute flo for self.flo.
  from django.utils.functional import lazy into default name space.
  return an instance of SafeText, created with an argument data.
  and app_config.label is contained in app_labels, create a tuple containing app_config.label and return value of the method   router.get_migratable_models called with app_config, connection.alias and include_auto_created set to True, append the tuple to the list all_models.   define the method model_installed with model as an argument.
  raise ValidationError with 2 arguments: return value of the function _ called with an argument string,
  define the method __deepcopy__ with arguments self and memo.
  for every chunk in return value of the method self.chunks,
  define the method __iter__ with an argument self.
  zip together new_keys and keys, convert it to dictionary, assign it to m.
  convert_charrefs set to convert_charrefs and dictionary **kwargs as the arguments.   if not,
  if not,
  raise an TypeError exception with an argument string "sep must be None or a string".
  from django.utils import six into default name space.
  call the __init__ method from the base class of the class ValidationError with arguments message, code and params.
  define the function linebreaksbr with 2 arguments value and autoescape set to None.
  define the method clear with argument self.
  derive the class MemoryFileUploadHandler from the FileUploadHandler base class.
  raise an self.exception exception.
  for every k and v in the previous result, add a key into a dictionary: v converted to an integer for k,   substitute the resulting dictionary for kw.   call the method datetime.date with an argument unpacked dictionary kw, return the result.
  if value is an instance of six.text_type class,
  _cached_filenames is an empty list.
  if not,
  try,
  define the method auto_id with an argument self.
  if s is an instance of bytes or Promise and s._delegate_bytes is true,
  define the method make_key with self class instance, key and version defaulting to None as arguments.
  move integer 1 left for 20 bits, substitute the result for MB.
  replace '%s' in string "System check identified some issues:\n%s" with msg, substitute it for msg.
  substitute tuple containing 2 elements: sum of p_pattern and prefix, and sub_pattern for value under the namespace key of the namespace dictionary.
  get the value under the 'domain' key of the options dictionary, substitute it for self.domain.
  from django.core import signing into default name space.
  define the method label_tag with 4 arguments: self, contents set to None, attrs set to None and label_suffix set to None.
  call the function func with request and response as arguments, assign the result to response.
  import module os.
  call the method data.encode with 2 arguments: fp.encoding and errors, substitute the result for data.
  if pattern has an attribute '_callback_str',
  substitute v for value under the k key of self dictionary.
  define the function fix with an argument match.
  if exception SuspiciousOperation as e is caught,
  if 'step' attribute of attrs dictionary does not exists, set it to to string 'any'.
   if self.fail_silently is boolean True,
  substitute pos for end_text_pos.
  define the method write with 2 arguments: self and s.
  define the method close with an argument self.
  try,
  call the function resolver.resolve_error_handler with status_code as an argument, assign the result to the callback and param_dict, respectively.
  call the method Encoders.encode_base64 with an argument attachment.
  try,
  call the function op, return the result.
  call the function six.reraise with 3 arguments: ImportError, instance of ImportError class created with an argument msg,
  define the method get_parent with 2 arguments self and context.
  from the connections list, substitute it for connection.   call the method connection.ops.start_transaction_sql, if it evaluates to true,
  substitute self._meta for opts.
  return path.
  from django.conf import settings into default name space.
  args is an empty list.
  convert settings.LOCALE_PATHS into a list and extend list self.locale_paths with it.
  call the method self.stdout.write with an argument string "Installing %s fixture '%s' from %s.",
  mime_type is a string 'application/atom+xml; charset=utf-8'.
  return input_val.
  use global variable templatetags_modules.
  call the method self.build_attrs with an argument id set to field modulus id_, substitute the result for local_attrs.
  define the function get_quantifier with 2 arguments ch and input_iter.
  define the method __init__ with 5 arguments: self, data, encoder set to DjangoJSONEncoder, safe set to boolean True,
  call the method self.stdout.write with an argument string "Installed %d object(s) (of %d) from %d fixture(s)",
  property decorator,
  if as_ is not equal to string 'as',
  from django.utils.text import normalize_newlines into default name space.
  increment stats dictionary value under the HITS key by integer 1.
  call the method DjangoSafeDumper.add_representer with arguments decimal.Decimal and DjangoSafeDumper.represent_decimal.
  if an exception occurred,
  return wrapped.
  call the function cache_get with 2 arguments: key and root, substitute the result for result.
  if SystemExit exception is caught,
  call the method condition.eval with an argument context, substitute the result for match.
  strip g of "'" from both ends,
  from django.core.mail.backends.base import BaseEmailBackend into default name space.
  from django.utils.text import normalize_newlines and slugify as _slugify into default name space.
  substitute third element of url_fields for second element of url_fields.
  raise an TemplateSyntaxError exception with an argument string "Could not parse some characters: %s|%s|%s",
  input_attrs, append the result to inputs list.   join inputs elements into a string, separated with newline character, use it as an argument for the call to the function mark_safe,
  append callback to self._post_render_callbacks list.
  substitute smart_bytes for smart_str.
  get the value under self._pk_field.name key of form._meta.widgets dictionary, if it exists substitute it for widget, if not,
  call the method new_name.find, with an argument string '__', if it evaluates to greater or equal than integer 0,
  if VariableDoesNotExist exception is not caught,
  define the method __get__ with 3 arguments: self, instance and owner.
  if error has an attribute 'error_dict',
  append app_dir to dirs list.
  derive the class BaseCache from the object base class.
  from importlib import import_module into default name space.
  if field_type equals a string 'BooleanField(',
  for every key in self,
  call the method datetime_safe.new_date with an argument date_value, substitute the result for date_value.
  define the function wordwrap with 2 arguments value and arg.
  substitute force_bytes for force_str.
  split arg by ',', substitute the result for bits.
  return path an an empty string.
  replace all occurrences of '\\' with '\\\\' in value, replace all occurrences of '"' with '\\"' in the previous result,
  return value of the value._get_pk_val method and strings_only set to boolean True.   call the function m2m_value with the argument related, for every related in itterator object generated from the attribute field.name,
  call the value.split method with '://' as argument, convert first element of the result to lower case, substitute the result for scheme.
  define the method addQuickElement with 4 arguments: self, name, contents set to None and attrs set to None.
  convert self.forms into an iterable, return it.
  if TypeError or AttributeError exceptions are caught,
  raise an ValueError exception with an argument e.
  call the function timedelta with an argument integer 0, return the result.
  media is a property object of the current class, with _get_media as getter function.
  if not,
  django.core.exceptions import ImproperlyConfigured, ValidationError, NON_FIELD_ERRORS and FieldError into default namespace.
  if ValueError exception is caught,
  if value is true and character ':' is contained in value,
  split lang_code by character '-', substitute the first element of the result for generic_lang_code.
  call the method handler.addQuickElement with 2 arguments: string 'email' and value under the 'author_email' key of the item dictionary.
  get the value under the 'id' key of the widget.attrs dictionary, if the key exists substitute it for id_,
  define the function truncatewords with 2 arguments value and arg.
  import module re.
  skip this loop iteration.
  otherwise if first element of second row of args equals a string '1',
  missing_args_message is a string "You must provide an application name.".
  evaluates to true,   call the function select_template with an argument file_name, substitute the result for t.
  call the method self.importer with an argument used.
  return the value under the filter_name key of the self.filters dictionary.
  raise an exception of class NotImplementedError, with string 'subclasses of BaseCache must provide a set() method' as argument.
  delete Trans.
  define the method I with an argument self.
  if not,
  append self to context.dicts.
  define the function ngettext with 3 arguments: singular, plural and number.
  call the method self.validate_key with key as argument.
  decorator deconstructible,
  if value under the 'unique_id' key of the item dictionary is not None,
  append tuple with 2 elements: migration.app_label and migration.name to replaces.
  from django.apps import apps into default name space.
  call the method self.end_object with an argument obj.
  do nothing.
  if ValueError exception is caught,
  and return value of the field.get_internal_type method for 'type'.   if field.name attribute of obj is not None,
  raise an NotImplementedError exception with an argument string 'subclasses of Origin must provide a reload() method'.
  self.choice_cache is None.
  define the method get_many with self class instance, keys and version defaulting to None as arguments.
  if key_prefix is None,
  call the __init__ method from the base class of the WSGIServer class, with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  perform the following:   call the method fp.read, substitute the result for src_data.
  define the method decompress with 2 arguments: self and value.
  find first index of occurrence of character '-' in language, substitute it for p.
  loaded_objects_in_fixture is integer 0.
  if PY3 field of six is boolean True,
  call the encode method on the result with string 'latin-1' as an argument, return the result.   define the method loads with arguments self and data.
  derive the class _OFFSET_UNION from the Union base class.
  self.instance and unpacked dictionary kwargs.   if form._meta.fields is true,
  if not,
  call the method self.build_attrs with arguments attrs, name as name, substitute the result for final_attrs.
  call the function settings.is_overridden with argument string 'MIDDLEWARE_CLASSES', if the result is boolean False,
  self.content_type is None.
  if new_attr is None,
  call the method data, substitute the result for data.
  do nothing.
  define the method setdefault with 3 arguments: self, key and default set to None.
  and guid_attrs.   if value under the 'ttl' key of the item dictionary is not None,
  call the function __current_timezone with an argument value, return the result.
  call the method MIMEText.__setitem__ with arguments self, name and val.
  call the datetime.datetime.utcfromtimestamp with timestamp converted to an integer as argument, substitute result for timestamp.
  return self._dimensions_cache.
  return resulting list.   define the method keys with an argument self.
  if use_grouping is true,
  call the function is_aware with an argument date, if it evaluates to true,
  call the method middleware.process_template_response with 2 arguments: request and response, substitute the result for response.
  from django.template import Template and Context into default name space.
  if six.PY3 is true,
  html4_singlets is a tuple with 9 elements: strings 'br', 'col', 'link', 'base', 'img', 'param', 'area', 'hr' and 'input'.
  call the function ugettext with an argument string "%s PB", substitute '%s' with the result of the call to the function,
  define the method __len__ with an argument self.
  use it as an argument for the call to the self.style.MIGRATE_LABEL method, use the result of the previous method as an argument for the call to the self.stdout.write method.   if target_app_labels_only is true,
  define the method get_response, with self class instance and request as the arguments.
  fk_name, parent_model._meta.app_label and parent_model._meta.object_name, respectively.   otherwise if length of fks_to_parent is zero,
  define the function _helper with 2 arguments list and tabs set to integer 1.
  define the function _get_timezone_name with an argument timezone.
  from django.utils.encoding import force_bytes,  force_text and iri_to_uri into default name space.
  call the method add_arguments from the base class of the class Command, with an argument parser.
  where '%r' is replaced with first element of bits.   if remaining_bits is true,
  if parser doesnt have an '_namedCycleNodes' attribute,
  if error.code equals code,
  if self.data and self.files are both False,
  if self._non_form_errors is None,
  do nothing.
  define the method __str__ with an argument self.
  call the method data.replace with an argument microsecond set to integer 0, substitute the result for data.
  substitute result for value under key key of self dictionary.
  define the method __eq__ with arguments self and other.
  plural is an empty list.
  if primary_keys is true,
  if self.fail_silently is false,
  substitute self.urlconf_module for self.urlconf_module.   try,
  call the function warnings.warn with 2 arguments: string "``use_natural_keys`` is deprecated; use ``use_natural_foreign_keys`` instead." and RemovedInDjango19Warning.
  _iteritems is a string "iteritems".
  return an empty string,
  evaluate pickle.loads with argument pickled, return the result.
  ESCAPE_MAPPINGS is an dictionary with 10 initial entries: None for 'A', None for 'b', None for 'B', '0' for 'd', 'x' for 'D',
  return boolean False.
  help is a string, "Prints the custom table modifying SQL statements for the given app name(s).".
  if nodelist is true,
  substitute the result for guts.   concatenate string '"', guts and string '"', substitute the result for tok.
  cat for 'term'.   if value under the 'feed_copyright' key of the self.feed dictionary is not None,
  call the method tzinfo.__init__ with an argument self.
  from django.conf import settings into default name space.
  call the function func with 2 arguments: unpacked list self.__args and unpacked dictionary self.__kw, return the result.
  if process_all is true,
  if first element of base64d equals to a '.' character,
  from IPython import start_ipython into default namespace.
  usage is a list containing 4 entries: an empty string, string "Type '%s help <subcommand>' for help on a specific subcommand.",
  if found is true,
  call the function language_code_prefix_re.match with an argument path, substitute it for regex_match.
  define the method __setitem__ with arguments self, name and val.
  if filename ends with '.pyo', '.pyc' or '.py.class',
  third element of the return value of the function sys.exc_info.   define the class DjangoJSONEncoder from the json.JSONEncoder base class.
  append key to self.keyOrder.
  call the function reverse with 4 arguments: view_name, args as args, kwargs as kwargs and current_app as context.current_app,
  and format, return the result.   derive the class RegexField from the base class CharField class.
  substitute self.literal for value.
  covert to lowercase locale elements from (p+1)-th index to the end, append it to the previous result, return it.   if not,
  ns is a string "http://www.w3.org/2005/Atom".
  import module warnings.
  call the method app_config.get_model with an argument model_label, substitute the result for model.
  call the function restart_with_reloader, substitute the return value for exit_code.
  if not return boolean False.   define the method add_fields with 3 arguments: self, form and index.
  define the method __ne__ with self and other as arguments.
  for every taglib in bits without the first element,
  call the method self._setup.
  call the method field_node.getAttribute with an argument string 'name', substitute the result for field_name.
  if options.settings is true,
  self._current is None.
  return form.
  substitute complain for extend.
  get name attribute of the self._out object, return it.
  if delta is smaller than integer 0,
  call the self.style.MIGRATE_HEADING method, with string "Operations to perform:" as an argument,
  assign the bits elements to tag, this_value_expr, max_value_expr and max_width, respectively.
  from django.utils.six.moves import http_cookies into default name space.
  'alternate' for 'rel' and value under the 'link' key of self.feed dictionary for 'href'.   if value under the 'feed_url' key of the self.feed dictionary is not None,
  do nothing.
  if key is contained in dict_,
  if o.microsecond is true,
  call the method cgi.parse_header with an argument content_disposition, assign the result to _ and params, respectively.
  with new_class.__name__, '%(opt)s' is replaced with opt and '%(value)s' is replaced with value.   raise an TypeError exception with an argument msg.
  while answer is false or answer is not contained in string "yn", perform the following,
  define the function flatatt with an argument attrs.
  call the function form.save_m2m.
  call the function iri_to_uri with an argument location, return the result.
  substitute file.mode for self.mode.
  call the function os.stat with an argument path, perform bitwise and on 2 operands st_mode field of the result and stat.S_IREAD,
  set real_name attribute of the self object to value of real_name attribute of trans object.
  for every app_config in result of the method apps.get_app_configs, append the resulting list to templatetags_modules_candidates.   for every templatetag_module in templatetags_modules_candidates,
  call the method self._handle_object with an argument node, return the result.
  if settings.DEBUG is true,
  if call to the function module_has_submodule with app_config.module and "management" evaluates to True.
  define the function m2m_convert with an argument value.
  get the value under the self.using key of the connections dictionary, substitute it for connection.
  convert val to an list, substitute it for val.
  call the method validators.MaxLengthValidator with max_length converted into an integer, append the result to list self.validators.
  define the method open with arguments self and mode set to None.
  if not,
  if value is None,
  do nothing.
  define the function ugettext with an argument message.
  if not,
  define the method __repr__ with an argument self.
  BM_compatible is boolean True.
  if not self.localized_fields is None.   get 'labels' attribute from the options object, if it exists substitute it for self.labels, if not self.labels is None.
  from django.utils.translation import ugettext_lazy as _ into default name space.
  define the method open with arguments self, name and mode defaulting to string 'rb'.
  if value is true,
  call the method checks.run_checks with 2 arguments: app_configs set to app_configs, tags set t tags, substitute the result for all_issues.
  if response.streaming is true,
  convert elements of defaultdict to list, substitute it for self.blocks.
  property decorator,
  and help set to a string 'Tells Django to use specified test runner class instead of the one specified by the TEST_RUNNER setting.'.   call the method parser.add_argument with 5 arguments: string '--liveserver', action set to string 'store', dest set to 'liveserver',
  substitute value under the field key of the self.fields dictionary for form_field.
  define the method _get_size_from_underlying_file with argument self.
  from django.core.handlers import base into default name space.
  return WSGIHandler object.
  define the method _iterkeys with an argument self.
  call the function call_command with string 'flush', verbosity set to greater element, self.verbosity decremented by 1 or integer 0,
  s is an instance of the Select class, created with choices set to choices.
  substitute apps for the value under language_code key of the self._app_dict dictionary.
  call the method cursor.execute with string "DELETE FROM %s WHERE cache_key = %%s" as argument,
  define the method _update_unget_history with arguments self and num_bytes.
  if not,
  substitute it for data.   if data is contained in seen_data,
  instantiate class Truncator, with an argument value, call the method words on the result with 2 arguments length,
  define the method configure_filter with 2 arguments: self and config.
  define the method sign with arguments self and value.
  call the function wrapped_callback with request, list or arguments callback_args and dictionary arguments callback_kwargs,
  call the method datetime.datetime.strptime with 2 arguments: return value of the function force_str called with an argument value,
  if e.errno equals to errno.ENOENT,
  substitute next for advance_iterator.
  if length of value is greater or equal to integer 2 and first and last elements of value are an empty string,
  from __future__ import unicode_literals into default name space.
  call the function force_text with 3 arguments: field_name, encoding and errors as a string 'replace', substitute the result for field_name.
  return num_sent.
  call the method match.groups, substitute the result for args.
  if check is not contained in self.registered_checks.
  raise an TemplateSyntaxError exception with an argument string "'for' statements should have at least four words: %s",
  while end is greater than integer 0 and return value of the s.count called with 3 arguments: an empty string, integer 0 and end,
  derive the class RawPostDataException from the base class Exception.
  if not,
  if next_item is true and next_item is an instance of list or tuple type,
  define the method __init__ with 6 arguments: (self, var1, var2, nodelist_true, nodelist_false and negate.
  import module copy.
  call the function dec with an argument func, return the result.
  call the self.convert method with i, self.decimal_digits, self.digits and '-' as arguments, assign the result to the neg and value, respectively.
  convert newline character to unicode and substitute the result for newline.
  substitute the result for queryset.   if primary_keys is true,
  "project name in the current directory or optionally in the given directory.".   missing_args_message is a string "You must provide a project name.".
  return nothing.
  define the function gettext with an argument message.
  if self.can_delete is true,
  delete _active.value.
  call the function call_command with 3 arguments: string 'loaddata', string 'initial_data' and unpacked dictionary options.
  filesize_number_format with result of division of bytes by KB as an argument, substitute the result for value.   otherwise if bytes is smaller than GB,
  if not,
  call the initialization method UnicodeDecodeError.__init__, with self instance of this class and *args as arguments.
  call the function _check_test_runner with dictionary kwargs as argument, use the result as an argument for the call to the function errors.extend.
  return a list containing first element of source and a list containing params.
  if not,
  import module codecs.
  clean is a lambda function with self and x as arguments, return value is length of x.
  append '/' to tmp, substitute it for display_url.
  for statements is sql,
  insert tagname at the beginning of open_tags.
  from django.conf import settings into default namespace.
  append filename to _error_files.
  use global variable _default.
  if representative is None,
  call the function select_template with 2 arguments: template_name, dirs, substitute the result for t.
  if field is not contained in self.fields,
  define the method __getitem__ with 2 arguments: self and key.
  return self._files.
 _format_modules_cache is an empty dictionary.
  tpl is an string "DTDForbidden(name='{}', system_id={!r}, public_id={!r})".
  substitute cache_clear for wrapper.cache_clear.
  and format, call the method date on the result, return the result.   derive the class TimeField from the base class BaseTemporalField class.
  field_value is None.
  if stream_or_string is instance of bytes type,
  get the name of the type of the callback, append the string '.__call__' to it, substitute it for view_name.
  if format_module_path is true,
  get format_type attribute of module object, substitute the result for val.
  substitute the result for connection.   get the value under the 'table_name_filter' key of the options dictionary, substitute it for table_name_filter.
  if length of compressed is lesser than length of data decremented by 1,
  from django.utils import six into default name space.
  return left.
  call the method get_supported_language_variant.cache_clear.
  assign value and params to the value under the name key of the outdict dictionary.
  if form has an attribute 'Meta',
  call the function EmailMultiAlternatives with settings.EMAIL_SUBJECT_PREFIX and subject converted to strings and concatenated,
  increment self.fixture_object_count by objects_in_fixture.
  finally, perform,
  define lambda function that returns self.file.softspace field, use it as an argument for property function, put the result in softspace.
  call the method datetime.datetime.strptime with 2 arguments: result of the function force_str called with an argument value,
  define the function capfirst with an argument value.
  if value is contained in self.empty_values,
  otherwise if ':' is not contained in middle and result of the function simple_email_re.match called with an argument middle,
  convert text to an integer, substitute it for c.
  replace every occurrence of raw string '\\' in s with a raw string '\\\\', use the result and string "unicode_escape",
  return boolean False.
  return context_extras.
  call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for default_translation.
  call the method self._populate,
  if value is false and self.required is true,
  call the function bf.label_tag with an argument label, if the result is true substitute it for label, otherwise label is an empty string.
  errors is an empty list.
  from django.utils import six into default name space.
  if tags exists and if all elements in the return value of the method checks.tag_exists called with an argument tag,
  call the method apps.get_app_config with an argument app_label, substitute the result for app_config.
  define the method __enter__ with an argument self.
  call the method _trans.gettext_noop with an argument message.
  if day_of_year is smaller than or equalt to jan1_weekday subtracted from integer 8 and jan1_weekday is greater than integer 4,
  append list containing string '--no-location' to self.msguniq_options.
  if query_string is an instance of bytes,
  return doy.
  MAX_NUM_FORM_COUNT is a string 'MAX_NUM_FORMS'.
  sublist is an empty string.
  if not,
  call the function update_wrapper with 2 arguments: wrapper and user_function, return the result.
  if key is contained in last element of self.dicts, return boolean True, otherwise return boolean False.
  define iterator method __iter__ with self as the argument.
  from django.apps import apps into default name space.
  if handlers is true,
  for every node in self.nodelist_empty,
  for every filenam in locale_filenames,
  call the method self.recipients, if it evaluates to false,
  default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid URL.' for 'invalid'.
  substitute last element of bits for taglib.
  from django.apps import apps into default name space.
  substitute lookup_view for lookup_view_s.
  try,
  call the function force_bytes with argument content, substitute it for content.
  call the method __setitem__ from the base class of the class MultiValueDict, with 2 arguments key and list_.
  if TemplateDoesNotExist exception is caught,
  compile a regex from raw string '^\.\s*(\w+)\s*', substitute it for DOT_PATTERN.
  substitute the result for content.   token is an instance of Token class, created with 2 arguments: TOKEN_COMMENT and content.
  convert self into a string and return it.
  raise an TemplateSyntaxError exception with an argument string "'%s' received some positional argument(s) after some keyword argument(s)", where '%s' is replaced with name.
  return result of the f.fileno method if f has an 'fileno' attribute, otherwise return f.
  if not, self.coerce is an identity lambda function with an argument val.   if 'empty_value' key of the kwargs dictionary exists remove it and substitute its value for self.empty_value,
  and result of the bitwise OR performed on the re.MULTILINE and re.DOTALL operands, substitute the result for plural_forms_re/   STATUS_OK is integer 0.
  do nothing.
  from the base class of the class TypedMultipleChoiceField.   define the method _coerce with arguments self and value.
  if _ipv6 is true,
  call the function self.path with argument name, use it and mode as arguments for the call to the function open, use it as an argument for creatinon of a File object instance, return it.
  if renderer is true,
  append string 'AutoField?' to comment_notes.
  from django.conf import settings into default name space.
  define the method _clean_form with an argument self.
  return an property object with getter function fget, setter function fset, destructor fdel and documentation string doc.
  substitute first element of args for arg.
  call the method password.translate with an argument hmac.trans_5C, update outer dictionary with the result.
  define the method render_node with 3 arguments: self, node and context.
  substitute second element of plan_node for title.
  if LookupError exception is caught,
  if return value of the function connection.introspection.table_name_converter called with an arugment: model._meta.db_table is contained in table_names
  define the method pop with an argument self.
  return default,
  only if member.name is not equal to string 'pax_global_header'.   call the method self.has_leading_dir with an argument list, with elements x.name for every x in members, substitute the result for leading.
  try,
  if query is an instance of MultiValueDict class,
  append self.form.required_css_class to a whitespace character, append it to the value under the 'class' key of the attrs dictionary.
  increment i by one.
  from django.conf import settings into default name space.
  if ImportError, renamed to e, exception is caught,
  from datetime import datetime into default name space.
  call the parent class of Command class add_arguments method and parser as the arguments.
  if potfile fie exists,
  if value is not None,
  if first element of bits is not equal to string 'and',
  define the function parse_header with an argument line.
  derive the class WSGIRequest from base class http.HttpRequest.
  DELETION_FIELD_NAME is a string 'DELETE'.
  from django.db import connections and transaction into default name space.
  if ValueError exception is caught,
  define the method __reversed__ with an argument self.
  if filename ends with extensions or filename is contained in extra_files,
  call the method base64.urlsafe_b64encode with an argument s, on the result call the strip function with '=' as the argument, return the result.
  formated with 3 elements: class_name, old_method_name and new_method_name, deprecation_warning and integer 2.   set new_method_name attribute of the base object to old_method.
  define the method __iter__ with an argument self.
  call the method __init__ from the base class of the class SortedDict, called with an argument data.
  return self.
  try,
  substitute self.none_value for self.day_none_value.
  if threading is true,
  do nothing.
  if _cached_modules equals to module_values,
  define the function strip_entities with an argument value.
  define the function copystat with arguments src and dst.
  break from the smallest enclosing loop execution.
  call the method nodelist.render with an argument, an instance of Context class, use the result as an argument for the creation of,
  if self.verbosity is greater than integer 0,
  call the function validate_ipv4_address with an argument value.
  open file named path in 'rb' mode, with file descriptor as f,
  if fields is not None and f.name is not contained in fields,
  substitute set of the results for self.value.   define the method is_checked with an argument self.
  separated by newline, use it as an argument for the call to the function mark_safe, return the result.   define the method as_p with an argument self.
  substitute logging.root for root.
  append f.name to ignored list.
  if self.number equals to self.paginator.num_pages,
  self.regexes is an empty dictionary.
  call the function new_method_proxy with an argument str, substitute the result for __str__.
  register.tag decorator,
  define the function execute_from_command_line with an argument argv set to None.
  get the value under the 'HTTP_X_REQUESTED_WITH' key of the self.META dictionary, if it equals string 'XMLHttpRequest',
  call the function  six.iteritems with an argument blocks, for every name and block in result,
  append string " The domain name provided is not valid according to RFC 1034/1035." to msg.
  define the method unclosed_block_tag with 2 arguments: self and parse_until.
  return boolean False.
  if self has an 'error_dict' attribute,
  from django.utils import six into default name space.
  if e.errno is not equal to errno.EEXIST,
  call the method connection.cursor, with the result renamed to cursor, perform the following,
  m2m_convert is a lambda function with an argument v, return value is the result of the function smart_text called with an argument:
  self._files is an instance of class MultiValueDict.   define the method close with an argument self.
  first element of url_fields is string 'http'.
  help is a string 'Prints the SQL statements for resetting sequences for the given app name(s).'.
  return message.
  if not,
  if basedirs is empty,
  force_bytes function, use the result as the argument for the call to the hashlib.mdb function, store the result in url.   substitute the '%s' in string 'views.decorators.cache.cache_page.%s.%s.%s.%s' with key_prefix, method,
  call self.errors.
  define the method tag_exists with self class instance and tag as arguments.
  self._closable_objects is an empty list.
  if length of list_ equals integer 1,
  return an string "<IfNode>".
  from django.utils.six.moves import html_entities into default name space.
  evaluate the force_text function with settings.FORCE_SCRIPT_NAME as argument, return the result.
  substitute sysid for self.sysid.
  substitute jython_reloader for reloader.
  define the method handle_template with 3 arguments: self, template and subdir.
  convert var into an floating point number, substitute it for self.literal.
  try,
  return an dictionary containing 1 entry: settings.STATIC_URL for 'STATIC_URL'.
  want_unicode is boolean True.
  use fourth element of version as a key to get the value from mapping dictionary, append to it fourth element of version converted to string, substitute it for sub.
  if dt is None is_dst is boolean False, otherwise call the method self._isdst with an argument dt, substitute the result for is_dst.
  derive the class URLNode from Node base class.
  warning is a string 'ImmutableList object is immutable.'.
  from __future__ import unicode_literals into default name space.
  else if timeout converted into an integer equals to integer 0,
  self.fixture_count is integer 0.
  from __future__ import unicode_literals into default name space.
  define __enter__ method with self as the argument.
  decorator stringfilter,
  try,
  call the function reloader with wrapped_main_func, args and kwargs as arguments.
  clean is a lambda function with self and x as arguments, return value is length of x.
  instantiate class Truncator, with an argument value, call the method chars on the result with 2 arguments length,
  if mem_args is contained in cache,
  if not,
  questioner is an instance of a InteractiveMigrationQuestioner class.
  define the method __init__ with an argument self.
  define the method add_arguments with self and parser.
  if register_to is true,
  from django import http into default name space.
  substitute link_next for value under the NEXT key of the link_prev dictionary.
  raise an NoReverseMatch exception with an argument string "%s is not a registered namespace inside '%s'",
  substitute first element of options for opt_label.
  call the method timezone.normalize with an argument value, substitute the result for value.
  if attr is contained in flags,
  call the method local, substitute the result for _active.
  define the function __wrapper__ with 2 arguments: unpacked list args and unpacked dictionary kw.
  get property attribute _get_width, and substitute it for width.
  if not,
  if self.negated,
  define the method __repr__ with an argument self.
  call the function conditional_escape with an argument arg, call the method join on the result with an argument value,
  call the function six.reraise with 3 arguments: ValueError, instance of a class ValueError, created with an argument string,
  if values has an attribute '__len__',
  key for 'grouper' and val converted into a list for 'list', for every key and val in result of the function groupby,   called with 2 arguments: obj_list and lambda function with an argument obj and return value as a result of the function,   self.resolve_expression called with 2 arguments obj and context.   return an empty string,
  call the BaseConverter function with BASE2_ALPHABET as argument, store the result in base2.
  try,
  call the method MIMEText.__init__ with 4 arguments: self, text, subtype and charset.
  substitute _moved_attributes for _MovedItems._moved_attributes.
  import module logging.
  call the function warnings.warn with 3 arguments: string "django.utils.unittest will be removed in Django 1.9.",
  raise an exception,
  call the method self.xml.addQuickElement with an argument string 'None'.
  return nothing.
  from django.core.mail.backends.base import BaseEmailBackend into default name space.
  call the method __init__ with an argument lexer, from the base class of the class DebugParser.
  get the value under the 'incomplete' key of the field.error_messages dictionary, append it to errors.
  if self.verbosity is grater than, or equal to integer 2,
  if self has an 'error_dict' attribute,
  call the add_argument method on the parser object, with string '--database', default set to DEFAULT_DB_ALIAS and help set to string 'Nominates a database to create SQL for. Defaults to the default" database.' as arguments.
  convert value into a string, take character at the negative arg index, convert it into an integer, return it.
  call the self.set method with key, new_value and version set to version as arguments.
  define the serialize content with an argument self.
  return boolean False.
  call the method __deepcopy__ from the base class of the class ChoiceField, with an argument memo, substitute the result for result.
  get the value under the 'content-type' key of the info dictionary, substitute it for content_type.
  define the function dictConfig with an argument config.
  if o is contained in opt_dict,
  call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'table_name', nargs set to '*' character,
  if path starts with string 'http://' or string 'https://' or with string '/',
  sum item and i_item together, append the result to new_result.
  otherwise if value is an instance of datetime.date,
  define the method has_error with 3 arguments: self, field and code set to None.
  get the value under the 'id' key of the self.attrs dictionary, return it, if the key doesnt exists return an empty string.
  where '%s' is replaced with self.__class__.__name__.   derive the class HttpResponse from the HttpResponseBase base class.
  derive the class LocalTimezone from the ReferenceLocalTimezone base class.
  return patterns.
  field_list is an empty list.
  substitute TemplateSyntaxError for error_class.
  define the function gen_filenames with an argument only_new defaulting to boolean False.
  define the method _get_count with an argument self.
  substitute basestring for string_types.
  call the get_bytes_from_wsgi function with self.environ, string 'QUERY_STRING' and empty string as arguments, substitute the return value for raw_query_string.
  convert new_name to a string and append string 'field' to it, substitute the result for new_name.
  define the method __init__ with 5 arguments: self, display_name, loader, name and dirs.
  if file_obj is true,
  property decorator,
  for every k and v in return value of the function defaults.items,
  derive the class Context from the BaseContext base class.
  return string 'nd'.
  if url is true,
  derive class X from the object base class.
  skip this loop iteration,
  args_check is a static method.
  call the method handler.startElement with 2 arguments: string 'author' and an empty dictionary.
  call the function _create_cache with argument alias.
  append a tuple with 2 elements: f.name and formfield to field_list.
  call the function _trans.get_language_from_path with an argument path, return the result.
  substitute table for self._table.
  append field to problem_fields list for every model in apps.get_models with argument kwargs dictionary, only if app_configs is None,
  otherwise if timezone is an instance of six.string_types and pytz is not None,
  call the method self.setFeature with 2 arguments: handler.feature_external_ges and boolean False.
  if e.errno equals errno.EEXIST,
  return a string '%s-%s-%s GMT', formated with: first 7 elements of rfcdate, elements of rfcdate from 8-th to the 11-th index,
  if TypeError exception is caught,
  if initial is not an instance of the list type,
  if date is not None,
  do nothing.
  return an instance of a SsiNode class, created with 2 arguments: filepath and parsed.
  from django.utils import six into default name space.
  substitute value under the 'prefix' key of dictionary d, substitute it for prefix.
  wsgi_opts is a dictionary with 4 initial entries: value under the key 'maxspare' of options dictionary converted to an integer,
  define the method _has_changed with 3 arguments: self, initial and data.
  convert the value under the 'daemonize' key of options dictionary to lowercase, if it equals to string 'true', 'yes' or 't',
  call the function iri_to_uri with an argument value, use the result as an argument for the call to the force_text function,
  increment key by kwd_mark.
  if not,
  call the method self._prepare_data with an argument data, substitute the result for data.
  if value under the 'list_tags' key of options dictionay is true,
  return value under the DEFAULT_PALETTE key of the PALETTES dictionary.
  define the method __init__ with an argument self.
  for every format in self.input_formats,
  return boolean False.
  call the method router.db_for_write with argument self.cache_model_class, substitute the result for db.
  return nothing.
  __all__ is a tuple of strings: 'Media', 'MediaDefiningClass', 'Widget', 'TextInput', 'EmailInput', 'URLInput', 'NumberInput',
  value is an empty string.
  convert ip_str to lowercase, if it doesnt start with a string '0000:0000:0000:0000:0000:ffff:',
  skip this loop iteration,
  call the function import_string with argument backend.
  call the method parser.add_argument with 4 arguments: string 'args', metavar set to 'app_label', nargs set to '+',
  call the method handler.addQuickElement with 2 arguments: string 'updated' and result of the function rfc3339_date,
  return self.data.year.
  if source is an instance of NonCapture class,
  self.error_class is a string 'errorlist'.
  if mw_instance has an attribute named 'process_request'.
  substitute the result for RFC850_DATE.   call the function re.compile with an argument raw string '^\w{3} %s %s %s %s$' formated with __M, __D2, __T and __Y,
  from django.core.validators import EMPTY_VALUES into default name space.
  raise an DisallowedRedirect exception with an argument string "Unsafe redirect to URL with protocol '%s'",
  replace all the occurrences of character '_' in name with a whitespace, capitalize the first letter and return the result.
  default_validators is an empty list.
  substitute to_field_name for self.to_field_name
  add value and delta together, substitute the result for new_value.
  if formfield_callback is None,
  derive the class Page from the collections.Sequence base class.
  define the method parse_file_upload with 3 arguments: self, META and post_data.
  define the method resolve_context with 2 arguments: self and context.
  decorator decorator.
  call the method compiled_parent._render with an argument context, return the result.
  if self.use_natural_primary_keys is false and obj doesnt have 'natural_key' argument.
  if match evaluates to False throw an exception with the string message 'unexpected call to parse_starttag()'.
  if locale_dir is false,
  return value of method url.hexdigest(), return value of method ctx.hexdigest, respectively, substitute it for cache_key.   call the function _i18n_cache_key_suffix with request and cache_key as arguments, return the result.
  format string ' _(%s) ', with fmatch, write it to out.
  define the method ugettext with an argument message.
  call the method tuple.__getitem__ with 2 arguments: self and key, substitute the result for value.
  if rhs is an instance of SafeText,
  call the self.xml.endDocument method.
  return msg.
  for every name in pattern.reverse_dict,
  extend comment_notes list with notes.
  if not,
  self.addr is an empty string.
  return boolean False.
  call the method s.feed with an argument value.
  substitute the result for value under the 'microsecond' key of the kw dictionary.   update a dictionary with an entry v converted to an integer for k, for every k and v in result of the function six.iteritems,
  if not self.isolated_context is boolean False.   call the method __init__ from the base class of the class IncludeNode, called with 2 arguments: unpacked dictionary args,
  try,
  raise NotImplementedError exception with an argument string 'Subclasses must implement this method.'.
  priority is floating point number 1.0.
  import StringIO.
  with an argument message for 'message', or if not message for 'message' and error.code for 'code' in error.code is true,   if not, an empty string for 'code'.   return errors.
  in string '%s_%d', replace '%s' with new_name and '%d' with num, substitute the result for new_name.
  if dictionary is false,
  call the method self.error with an argument self.cmd.missing_args_message.
  self.command_stack is an empty list.
  if self.use_ipv6 substitute string '::1' for self.addr, if not substitute '127.0.0.1' for self.addr.
  substitute func for value under the '_setupfunc' key of the self.__dict__ dictionary.
  if self.activated is boolean False,
  if not,
  derive the class LazyObject from the object base class.
  substitute the result for value under the f.name key of data dictionary.   if not,
  define the method __init__ with 6 arguments: self, _subtype set to string 'mixed', boundary set to None, _subparts set to None,
  if self.use_natural_foreign_keys is true and field.rel.to has an 'natural_key' attribute,
  if self does not have an attribute named '_dimensions_cache'.
  do nothing.
  if StandardError, renamed to e, exception is caught,
  get the position in bytes from the start of the file, store it in file_pos.
  define the method __iter__ with an argument self.
  if rel_model has an attribute 'natural_key' and rel_model is not equal to model,
  if not,
  changed is boolean False.
  'Enter a number.' for 'invalid', return value of the function ungettext_lazy called with 3 string arguments:   'Ensure that there are no more than %(max)s digit in total.', 'Ensure that there are no more than %(max)s digits in total.',   and 'max' for 'max_digits', return value of the function ungettext_lazy called with 3 string arguments:   'Ensure that there are no more than %(max)s decimal place.', 'Ensure that there are no more than %(max)s decimal places.' and 'max',   for 'max_decimal_places' and return value of the function ungettext_lazy called with 3 string arguments:   'Ensure that there are no more than %(max)s digit before the decimal point.',   'Ensure that there are no more than %(max)s digits before the decimal point.' and 'max' for 'max_whole_digits'.   define the method __init__ with 7 arguments: self, max_value set to None, min_value set to None, max_digits set to None,
  decorator deconstructible,
  calculate reminder of division of x by length to_digits, substitute it for digit.
  define the function wrapper with 2 arguments: unpacked list args and unpacked dictionary kwds.
  match regex time_re with value, substitute the result for match.
  derive the class PyLibMCCache from BaseMemcachedCache base class.
  call the method Field.validate with 2 arguments: self and value, return the result.
  define the method _clean_fields with an argument self.
  if not,
  substitute status for self.status_code.
  default set to DEFAULT_DB_ALIAS and help set to string 'Nominates a database onto which to open a shell. Defaults to the "default" database.'.   define the method handle with arguments self and unpacked dictionary options.
  if OSError exception is caught,
  call the self._lock.reader method, with the result perform the following,
  call the method logger.addHandler with an argument: h-th element of value under 'handlers' key of self.config dictionary.
  return an empty list.
  define the method get with 5 arguments, self class instance, key, default set to None and version set to None.
  do nothing
  put every header in newheaders in a list, only if newheader converted to lowercase does not exist in existing_headers,
  define the method __init__ with 3 arguments: self, media set to None and unpacked dictionary kwargs.
  called with 2 arguments: s and string_only as boolean True.   if categories is true,
  decrement remaining by length of emitting.
  define the function prefix with 2 arguments bp and func.
  if _cookie_allows_colon_in_names is False,
  otherwise if name is contained in lib.filters,
  append f.name to exclude.
  define the method lex with 2 arguments self and text.
  define COOKIES method with self as the argument.
  do nothing.
  substitute first 2 elements of bits for singular_suffix and plural_suffix, respectively.
  return a string '%s(%s)' formated with self.__class__.__name__ and dictreprs.
  to_delete is an empty set.
  value under the DELETION_FIELD_NAME key of the form.fields is an instance of BooleanField class, created with 2 arguments:
  derive the class IfEqualNode from Node base class.
  if not,
  return first and second element of result.
  if decompress is true,
  element of data at the index last equals to carriage return bytes character.
  define the function compare_ordering_key with an argument k.
  self.timezone is None.
  split into two parts token.contents by None, substitute the parts for _ and rest, respectively.
  define the method copy with an argument self.
  substitute self.registered_checks for checks.
  if text is an instance of SafeData, safe_input is boolean True, otherwise is boolean False.
  exp is an instance of Decimal, created with an argument integer 1.
  try,
  if self.match is None or call to the method self.match_re.search with an argument f, evaluated to true,
  define the method tzname with 2 arguments self and dt.
  call the method now.replace with the argument microsecond set to integer 0, substitute the result for now.
  from django.template.base import Origin,  Template,  Context and TemplateDoesNotExist into default name space.
  if data has an 'temporary_file_path' attribute,
  call the function predicate with an argument item, use it as a key to get results dictionary value, append item to it.
  if instance is not None,
  call the function localize with 2 arguments: output and use_l10n set to context.use_l10n, substitute the result for output.
  from django.utils.encoding import force_bytes into default name space.
  define the function autoescape with 2 arguments: parser and token.
  return integer 0.
  call the method self.choice_input_class with 5 arguments: self.name, self.value, return value of the method self.attrs.copy,
  if TypeError or ValueError exceptions are caught,
  call the signal.signal method with signal.SIGTTOU and signal.SIG_IGN as arguments, store the result in old_handler.
  substitute the value under the 'socket' key of options dictionary for value under the 'bindAddress' key of wsgi_opts dictionary.
  call the method lexer.tokenize, use it as an argument for the call to the parser_class function, substitute the result for parser.
  call the function warnings.warn with string "'get_cache' is deprecated in favor of 'caches'.", RemovedInDjango19Warning,
  call the function call_command with 6 arguments, string 'runserver', addrport as the value under the 'addrport' key of options dictionary,
  if not self.initial_extra is None.   defaults is a dictionary with 4 entries: data for 'data', files for 'files', auto_id for 'auto_id' and prefix for 'prefix'.
  append the result to sql_files.   join into a file path: app_dir and string %s.%s.sql, where '%s' is replaced by opts.model_name, append the result to sql_files.
  otherwise if first element of cwords is contanied in tuple with 8 entries: 'dumpdata', 'sql', 'sqlall', 'sqlclear', 'sqlcustom',
  from django.core.serializers import base into default name space.
  if f is an instance of ModelFiled, for every f in opts.virtual_fields, append f to a list, substitute the resulting list for sortable_virtual_fields.
  try,
  convert fist p elements of language to lowercase, append '_' to it,
  from importlib import import_module into default name space.
  define the method flatten with an argument self.
  result of the call to the function _ with an argument string 'Tuesday' for 1,   result of the call to the function _ with an argument string 'Wednesday' for 2,   result of the call to the function _ with an argument string 'Thursday' for 3,   result of the call to the function _ with an argument string 'Friday' for 4,   result of the call to the function _ with an argument string 'Saturday' for 5,   and result of the call to the function _ with an argument string 'Sunday' for 6.   WEEKDAYS_ABBR is an dictionary with 7 entries: result of the call to the function _ with an argument string 'Mon' for 0,
  define the method _should_delete_form with an argument self.
  call the method self.make_writeable with an argument new_path.
  derive the class MLStripper from the HTMLParser base class.
  substitute cwords element at the cword decremented by 1 index for curr.
  substitute third element of row list for expires.
  define the function get_image_dimension with file_or_path and close set to boolean False as the arguments.
  call the function format_html with 2 arguments: string ' for="{0}"' and self.id_for_label, substitute the result for label_for.
  call the function hashlib.pbkdf2_hmac with 5 arguments: field name of the result of the function digest, password, salt,
  content_type, length of content, None and None.   decorator classmethod.
  call the function func with 2 arguments: self._wrapped and unpacked list args.
  delete attr.
  if url_info.netloc is false and url_info.scheme is true,
  raise an NotImplementedError with an argument string "Subclasses of AppCommand must provide a handle_app_config() method.".
  if Exception, renamed to e, exception is caught,
  widget set to widget, label set to label, initial set to initial, help_text set to help_text, unpacked list args,   and unpacked dictionary kwargs.   substitute choices for self.choices.
  convert if into a string append to it a string '_month', return the result.
  define the method render_node with 3 arguments: self, node and context.
  return boolean True if tag is contained in self.tags_available method return value, return False otherwise.
  substitute '%s' in 'Internal Server Error: %s' with request.path, exc_info set to exc_info,
  or model._meta.app_config is contained in app_configs, for every field in model._meta.local_fields,  #ANNOTATION only if field is an instance of models.BooleanField and field.has_default() evaluates to False.    call the Warning function with 4 arguments: string "BooleanField does not have a default value.",
  define the method open with arguments self and mode set to None.
  get the value under the key 'exclude' of the options dictionary, substitute it for exclude.
  get the value under the name key of the data dictionary, if it exists return it, if not return None.
  if new_method is false and old_method is true,
  if serializers is None,
  return field_type, field_params and field_notes.
  define the _fd function with argument f.
  otherwise if sep is not an instance of string type,
  substitute value under the 'use_reloader' key of the options dictionary for use_reloader.
  call the function force_text with an argument text, substitute the result for text.
  yield string "# You'll have to do the following manually to clean this up:" as the result.
  from .. import Warning, register and Tags into default name space.
  append length of result to non_capturing_groups.
  call the method notifier.check_events with argument timeout set to None.
  from decimal import Decimal into default name space.
  and call to the method form.has_changed evaluates to false,   skip this loop iteration,
  return boolean False.
  return boolean False.
  from django.utils import six into default name space.
  lbp is an integer 0.
  call the function new_method_proxy with an argument unicode, substitute the result for __unicode__.
  convert self.name into an boolean, return it.
  call the method handler.addQuickElement with 2 arguments: string 'link' and value under the 'link' key of the item dictionary.
  call the function update_wrapper with 3 arguments: _dec, decorator and assigned as result of the function available_attrs,
  import module sys.
  call the function func with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  substitute self._encoding for encoding.
  for every middleware_method in self._view_middleware,
  define the method has_previous with an argument self.
  call the method cache.clear.
  import module unicodedata.
  substitute the result for origin.   try,
  call the function is_library_missing with an argument path, return the result.
  call the function warnings.warn with 2 arguments string "IPAddressField has been deprecated. Use GenericIPAddressField instead.",
  raise a ValidationError exception with arguments self.message and code set to self.code.
  get config dictionary element under 'handlers' key, if it exists substitute it for handlers, if not, handlers is EMPTY_DICT.
  for every alternative in self.alternatives,
  WEEKDAYS is an dictionary with 7 entries: result of the call to the function _ with an argument string 'Monday' for 0,
  if self.translate is true,
  define the function timeuntil with 2 arguments, d and now defaulting to none.
  for every closable in self._closable_objects,
  substitute length of list_ for list_length.
  raise an CommandError exception with an argument string '"%s" is not a valid IPv6 address.' where '%s' is replaced with self.addr.
  call the method self.make_key with key and version set to version as arguments, substitute the result for key.
  call the method __init__ with 2 arguments: unpacked list args and unpacked dictionary kwargs, from the base class of the class ComboField.
  if base has an 'declared_fields' attribute,
  define the method end_serialization with an argument self.
  call the function unescape_string_literal with an argument var, use it as an argument for the call to the function mark_safe,
  call the method self.make_key with key and version set to version as arguments, substitute the result for key.
  if seconds smaller than integer 0, sign is '-', otherwise sign is '+',
  from django.db import models into default name space.
  return nothing.
  child_nodelists is a tuple with 2 elements strings 'nodelist_true' and 'nodelist_false'.
  derive the class DeclarativeFieldsMetaclass from the base class MediaDefiningClass.
  if UnicodeDecodeError exception is caught,
  get the value under the 'traceback' key of the options dictionary, substitute the result for traceback.
  if KeyError exception is caught,
  if server is an instance of six.string_types,
  derive the class EndToken from the TokenBase base class.
  if self does not have '_files' attribute,
  define the method get_host with an argument self.
  return self._fqdn.
  call the method self.__cast, if the result is lesser than other, return boolean True, otherwise return boolean False.
  if ext doesnt start with '.' character,
  try,
  if host ends with '.', remove the last element from host.
  if i is greater than sys.maxint,
  call the mail.attach_alternative method with html_message and string 'text/html' as arguments.
  try,
  substitute choices for self.choices.
  define the method __init__ with 10 arguments: self, subject set to an empty string, body set to an empty string,
  yield string 'year' as an return value of the generator.
  define the method values with an argument self.
  break from the loop execution.
  define the method __delitem__ with 2 arguments: self and header.
  define the method scheme with an argument self.
  otherwise if self.fixture_object_count equals self.loaded_object_count,
  define the method writer_enters with an argument self.
  return string '(NOT (%s: %s))', formated with self.connector and string created by joining c into a string, separated by ', ',
  if level is not contained in logging._levelNames,
  if _BASE64_DECODE_ERROR exception is caught,
  delete value under the 'args' key of the cmd_options dictionary.
  week_number is integer 52.
  from django.utils.translation import get_language, to_locale and check_for_language into default name space.
  if DatabaseError, renamed to e, exception is caught,
  raise a exception of CommandError class, with string "Cannot find a migration matching '%s' from app '%s'. Is it in INSTALLED_APPS?",
  result is an empty list.
  define the method __str__ with argument self.
  define the method clean with arguments self and value.
  _func_globals is a string "func_globals".
  try,
  if self.connection is false,
  update defaults dictionary with kwargs.
  substitute '%r' in string ' pgettext(%r, %r) ' with message_context and result of the function join_tokens,
  get 'name' attribute from the file object, if it doesnt exists use None, substitute it for name.
  call the function lazy with 2 arguments: func and resultclass, call the result with an argument, unpacked dictionary kwargs,
  return self.
  call the function update_wrapper with 2 arguments: _wrapper and dummy.
  value under the self._pk_field.name key of form.fields dictionary is an instance of ModelChoiceField class,
  import hashlib module.
  call the method parser.delete_first_token.
  if string 'id' is contained in self.attrs,
  try,
  call the method blankout with 2 arguments: part and 'P', write the result to out.
  call the method threading.Semaphore with an argument integer 0, substitute the result for self.can_read.
  strings "URLError", "urllib2", "urllib.error", result of the call to the function MovedAttribute with 3 arguments:   strings "HTTPError", "urllib2", "urllib.error" and result of the call to the function MovedAttribute with 3 arguments:   strings "ContentTooShortError", "urllib", "urllib.error".   for every attr in _urllib_error_moved_attributes,
  derive the class StopUpload from the UploadFileException base class.
  call the function debug.technical_404_response with request and e as arguments, assign the result to response.
  take subject elements from p-th to i-th index, substitute it for s.
  if data in self.empty_values is true,
  nodelist_true_output is None.
  which has not been installed." with all the '%s' replaced by values of description, name and reference joined into a string delimited by '.', respectively,   obj set to receiver.__module__, hint set to None and id set to string 'signals.E001', append the result to errors.   return errors.
  return the list, containing 4 elements: an empty string, string "    class Meta:", string "        managed = False",
  call the function ugettext with an argument string "%s TB", substitute '%s' with the result of the call to the function,
  define the method set with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
  increment pos by one, substitute the result for last.
  for every model in model_list,
  if attrs is None,
  call the function base64_hmac with 3 arguments: string 'signer' appended to self.salt, value and self.key, substitute the result for signature.
  define the method end_serialization with an argument self.
  substitute doublecolon_len for best_doublecolon_len.
  call the function touch_import with 3 arguments: string 'django.utils.encoding', string 'python_2_unicode_compatible' and decorated.
  return nothing.
  substitute bits without last two elements for bits.
  assign integer 2 to parts if third element of version equals to zero, otherwise assign it integer 3.
  if six.PY2 is true,
  substitute self for block.
  tok is a string '"REGEX"',
  define the function parse_datetime with an argument value.
  from django.utils.deprecation import RemovedInDjango20Warning into default name space.
  if AttributeError exception is caught,
  from django.utils.safestring import mark_safe into default name space.
  substitute tempfile.NamedTemporaryFile for NamedTemporaryFile.
  if self.require_all_fields is boolean true,
  from django.forms.formsets import everything into default name space.
  for every i and handler in enumerated iterator self._upload_handlers,
  define the __init__ method with 3 arguments: self, unpacked list args and unpacked dictionary **kwargs.
  if out has an 'isatty' argument and return value of the function out.isatty is true,
  return FormSet.
  break from the loop execution,
  allow_multiple_selected is boolean False.
  index of the first occurrence of '\\' in path, or alternatively if '\\' is not contained in path,   split path in two parts by '/' character, return the result.
  define the method top with an argument self.
  help is a string "Prints the DROP TABLE SQL statements for the given app name(s).".
  raise an ValueError exception with an argument string "Negative base36 conversion input.".
  if arg is smaller than integer 1,
  skip this loop iteration.
  substitute old for self.mod.
  call the function force_text with an argument value, substitute the result for value.
  return value of the function smart_text with return value of the method value._get_pk_val as an argument for 'pk'.   for every relobj in iterator generated from the field.name attribute of the obj object.
  call the function force_text with an argument v, for every v in args, put the results in a text_args list.
  define the method is_valid with an argument self.
  raise an AttributeError exception with an argument string "You cannot set the upload handlers after the upload has been processed.".
  get 'value' attribute of the _active object, if it exists substitute it for t, if not t is None.
  substitute self for value.configurator.
  call the method Field.__init__ with 8 arguments: self, required, widget, label, initial, help_text, unpacked list args,
  call the function date.strftime with an argument string '%Y-%m-%dT%H:%M:%S', substitute the result for time_str.
  substitute logging.NOTSET for logger.level.
  raise an exception.
  skip this loop iteration.
  call the method handler.addQuickElement with 2 arguments: string 'category' and cat.
  derive the class Widget from the base class in the return value of the six.with_metaclass called with an argument MediaDefiningClass.
  root dictionary values under the KEY and RESULT keys are both None.
  __D is a raw string '(?P<day>\d{2})'.
  call the method value.ljust with an argument, arg converted into a integer, return the result.
  import module time.
  if not,
  call the function t.render with an argument context_instance, return the result.
  call the method self.fields.values, for every field in result,
  derive the class SsiNode from Node base class.
  if changed is false,
  define the method close with an argument self.
  call the method self.as_table, return the result.
  values is an dictionary with entries: return value of the method var.resolve with an argument context for name,
  substitute NumberInput for widget.
  for every v in self.validators,
  try,
  otherwise if auto_id is true,
  if dirname is true and dirname path doesnt exists,
  define the method __init__ with 6 arguments: self, name, value, attrs, choice and index.
  return None.
  result of the call to the method v.resolve with an argument context,   for result of the function smart_text called with 2 arguments k and string 'ascii'.   call the method self.view_name.resolve with an argument context, substitute the result for view_name.
  renamed_methods is an tuple.
  substitute item for value under the first element of self.loopvars key of the context dictionary.
  define the method get_fqdn with argument self.
  define the function now with 2 arguments: parser and token.
  try,
  try,
  boundarystream is an instance of InterBoundaryIter class, created with self._stream and self._separator as arguments.
  call the function token.split_contents, substitute the result without the first element for bits.
  substitute pattern._callback for callback.
  return boolean False.
  if self.limit_choices_to object is callable,
  call the method self.make_key with key and version set to version as arguments, substitute it for key.
  raise an exception,
  call the function ugettext with string 'yes,no,maybe' as an argument, substitute the result for arg.
  if POST_override is not None, or otherwise generated with the call to the function pformat with an argument request.POST.   if Exception exception is caught,
  create a list of tuples out of 2 lists: appended params list to prefix_args and text_args, covert the result into a dictionary,
  define the method is_silence with argument self.
  define the function title with an argument value.
  call the method operator.attrgetter with an argument _meth_func, substitute the result for get_method_function.
  call the os.path.split with argument name, assign the result to the dir_name and file_name respectively.
  raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
   _cookie_allows_colon_in_names is a boolean True.
  if field.serialize is true,
  and placed into 2 character spaces, and '%02d' is replaced with reminder of the division of absolute offset by integer 60,   and placed into 2 character spaces.   define the method __repr__ with an argument self.
  substitute all_locales for locales.
  define the method encoding with arguments self and value.
  otherwise, value under the 'decimal_places' key of the field_params is integer 5.   if not
  append string "Field renamed because it contained more than one '_' in a row." to field_notes.
  increment i by integer 1,
  if logging_config is true,
  call the method self.setlistdefault with an argument key, append value to the result.
  import module re.
  if length of bits is greater or equal to integer 4 and second last element of bits equals sting 'from',
  return boolean False.
  return the result.   decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
  if length of bits is not integer 2 or 3,
  if not,
  raise a NotImplementedError with an argument string
  raise an CommandError with an argument string "errors happened while running msgmerge\n%s", where '%s' is replaced with errors.
  from django.utils import six into default name space.
  django.utils import translation into default namespace.
  __all__ is a list of strings, 'SimpleCookie', 'parse_cookie', 'HttpRequest', 'QueryDict', 'RawPostDataException',
  default set to DEFAULT_DB_ALIAS and help as a string 'Nominates a database to flush. Defaults to the "default" database.'.   call the method parser.add_argument with 5 arguments: string '--no-initial-data', action set to string 'store_false',
  remove first element from non_capturing_groups, substitute it for start.
  replace '%s' in sting '%s-%s' with self.prefix and index, return the result.
  substitute fields for self.fields.
  call the method handler.addQuickElement with 2 arguments: string 'description' and value under the 'description' key of item dictionary.
  return value.
  register.tag decorator,
  count is a property object with _get_count as a getter method.
  if second element of k is None,
  return boolean False.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  if self._is_rendered is false,
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  derive the class Serializer from the object base class.
  if init_path is not a file,
  call the function normalize_newlines with an argument value, substitute the result for value.
  substitute socket.AF_INET6 for self.address_family.
  call the function force_text with an argument top_errors, format error_row with it, insert it at the beginning of output.
  get the bit attribute of current object, substitute it for current.
  trimmed is boolean False.
  if git_changeset is true,
  substitute model._meta for opts.
  call the method self.check with arguments: app_configs set to app_configs, tags set to tags, display_num_errors set to boolean True.
  return result.
  __locks is an empty dictionary.
  call the method t.nud with an argument self, substitute the result for left.
  and call to the method form.has_changed evaluates to false,   skip this loop iteration,
  called with 2 arguments: s and string_only as boolean True.   if categories is true,
  finally perform,
  convert value, self.sep and return value of a method self.signature called with an argument value, concatenate them together, return the result.
  define the method dst with 2 arguments: self and dt.
  if self.localize is true,
  call the method unifunc.replace with an argument strfunc.
  define the method tags_available with argument self.
  finally perform,
  if lookup is false,
  if value is None,
  return obj.
  raise an TemplateSyntaxError with an argument string "'autoescape' tag requires exactly one argument.".
  if self.allow_empty_file and file_size are both false,
  derive the class FixUnicode from the base class fixer_base.BaseFix.
  try,
  return context_extras.
  if OSError or TypeError errors occurred.
  use the result as an argument for the call to the function mark_safe, return the result.   decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
  call the method m.group with an argument string 'min', convert the result into a string, substitute it for min.
  where '%r' is replaced with first element of bits.   append first element of bits to 'end'. substitute the result for end_tag.
  and use it as the name of the attribute to get from the self object,   call the result and append it to a list for every name in MEDIA_TYPES, join all the results into a string with newline separator,   use the result as an argument for the call to the function mark_safe, return the result.   define the method render_js with an argument self.
  from django.core.management.base import AppCommand into default name space.
  UNKNOWN_SOURCE is a string '<unknown source>'.
  if year is lesser than integer 100,
  if self.id is contained in settings.SILENCED_SYSTEM_CHECKS return boolean True, False otherwise.
  if LookupError exception is caught,
  import module datetime.
  substitute the result for self.instance.   try,
  if self.verbosity is greater or equal to integer 1,
  call the function base64.b64decode with an argument raw_data, substitute the result for data.
  define the next_space_index with 2 arguments: subject and i.
  remove first element of unhandled_params.
  message, settings.SERVER_EMAIL, list of second elements of a for every a in settings.Managers and connection set to connection,   as arguments, assign the result to mail.   if html_message is true,
  call the function add_to_builtins with an argument string 'django.template.loader_tags'.
  call the method _isdst with an argument dt from the base class of the class LocalTimezone, return the result.
  substitute takes_context for self.takes_context.
  raise an EmptyPage exception with string 'That page contains no results' as an argument.
  call the method o.isoformat substitute the result for r.
  substitute obj for self.obj.
  define the method copy with an argument self.
  call the method tpl.format with an arguments self.name, self.sysid and self.pubid.
  define the method __repr__ with an argument self.
  substitute safe for value under the 'safe' key of kwargs dictionary.
  call the method widget.render with 3 arguments: name, return value of the method self.value, attrs set to attrs,
  try,
  evaluate the method get_image_dimensions with self class instance and close set to close as the arguments, substitute the result for self._dimensions_cache.
  join elements of self.cc into a string separated by ', ', substitute the result for value under the 'Cc' key of msg dictionary.
  subtract _cached_modules from module_values, assign the result to new_modules.
  sum day_of_year, result of the subtraction of weekday from integer 7 and subtraction of integer 1 from jan1_weekday.
  get 'value' attribute of the _active object, if it exists substitute it for t, if not t is None.
  nodelist is an empty list.
  from __future__ import unicode_literals into default name space.
  append data to self.children.
  where '%s' is replaced with node.nodeName and attr.   define the function getInnerText with an argument node.
  substitute language for self.__language.
  call the signals.got_request_exception.send method with sender set to type of the self class instance and request set to request.
  decorator method register.tag with an argument 'extends',
  call the method self.create_nodelist, substitute the result for nodelist.
  if fd is greater or equal to integer 0.
  from django.conf import settings into default name space.
  self.config is an instance of ConvertingDict, called with an argument config.
  get attr attribute of self object, if it exists substitute it for nodelist, if not nodelist is None.
  choices is a tuple with 3 elements: tuple with 2 elements: string '1' and return value of the function ugettext_lazy,
  from django.core.exceptions import AppRegistryNotReady into default name space.
  call the os.makedirs with argument self.file_path.
  raise an ValueError with an argument string "attempted relative import beyond top-level package".
  from django.utils.encoding import python_2_unicode_compatible into default name space.
  raise an ValueError exception with an argument string 'must define at least one ordering operation: < > <= >='.
  substitute opname for opfunc.__name__.
  substitute sixth element of row for value under the 'decimal_places' key of the field_params.
  separated by newline, use it as an argument for the call to the function mark_safe, return the result.   define the function formset_factory with 9 arguments: form, formset set to BaseFormSet, extra set to integer 1,
  append the results into a list, substitute it for value.   node is an instance of CycleNode class, created wiht an argument values.
  if '%s' is contained in settings.TEMPLATE_STRING_IF_INVALID, invalid_var_format_string is boolean True, otherwise it is False.
  from django.views import debug into default name space.
  call the method optimizer.optimize with 2 arguments operations and migration.app_label, substitute the result for new_operations.
  get attribute 'pk' of the pk_value object, if it doesnt exists use pk_value, set to it self.fk.get_attname return value attribute,
  substitute Select for widget.
  define the method __repr__ with an argument self.
  if i is not an instance of six.integer_types class,
  return an instance of the class Media, called with an unpacked dictionary with an entry: name appended to string '_',
  if not,
  substitute hashlib.sha256 for digest.
  biggest_number is integer 1.
  call the method self.xml.startElement with 2 arguments: string 'field' and dictionary containing 3 entries: field.name for 'name',
  set value under the 'stream' key of kwargs dictionary to None.
  if help_texts is true and f.name is contained in help_texts,
  call the method self._callback_strs.update with an argument pattern._callback_strs.
  substitute self for value.configurator.
  substitute c for factory.
  if value under the 'setting' key of the kwargs dictionary is equal to string 'LANGUAGES' or strnig 'LANGUAGE_CODE',
  try,
  default set to None, help is a string 'Only look for fixtures in the specified app.'.   call the method parser.add_argument with 6 arguments: string '--ignorenonexistent', string '-i', action as a string 'store_true',
  message is an string "%s\n\nRequest repr(): %s"  formated with the result of the metod self.format with an argument record,
  if Exception, renamed to e, exception is caught,
  get_format called with an argument string 'DATETIME_INPUT_FORMATS', substitute the result for format.   call the method value.strftime with an argument format, return the result.
  from django.forms.widgets import HiddenInput into default name space.
  call the self._cull method.
  decorator function register.filter with an argument is_safe set to boolean False.
  do nothing.
  call the function force_str with an argument: default if it is true, or if not, first element of the result of the function,
  from django.utils.encoding import force_text into default name space.
  if self.timezone is true, call the method self.timezone.tzname with an argument self.data, substitute the result for name,
  do nothing.
  call the method apps.get_app_config with an argument model._met.app_label, substitute path field of the result for app_dir.
  append string '_template' to app_or_project, substitute it for base_subdir.
  from django.core.servers.basehttp import get_internal_wsgi_application into default name space.
  if args is true,
  if use_base_manager is true,
  if self.invoked_for_django is false,
  from django.utils import six into default name space.
  for every field, messages in return value of the message.items method,
  get opname attribute from int object, substitute its field __doc__ for opfunc.__doc__.
  define the method __init__ with arguments: self class instance and argv set to None.
  define the function camel_case_to_spaces with an argument value.
  convert 'Set-Cookie' to a string and convert the return value of method c.output(header='') call to a string,
  for every sql in custom_sql,
  import module binascii.
  define the function total_ordering with an argument cls.
  define class dummy.
  do nothing.
  define the method __deepcopy__ with 2 arguments self and memo.
  substitute request.urlconf for urlconf.
  remove file tmp_path.
  _js_escapes is a dictionary with 11 initial entries: '\\u005C' for integer representation of string '\\',
  get _assertRaisesRegex attribute of the self object, call the result with 2 arguments: unpacked list args,
  if not,
  define the method render with 2 arguments self and context.
  add plan_node to the shown set.
  substitute fields for self.fields.
  from django.core.exceptions import ImproperlyConfigured and ViewDoesNotExist into default name space.
  if pos is greater than or equal to last,
  define the method render with 2 arguments: self and context.
  if not,
  call the method loader.detect_conflicts, substitute the result for conflicts.
  return media.
  substitute self.rawdata for rawdata.
  self.waiting_readers is integer 0.
  wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string " OK" as a argument.
  call the function django.get_version, return the result.
  TOKEN_MAPPING is a dictionary with 4 initial entries: 'Text' for TOKEN_TEXT, 'Var' for TOKEN_VAR, 'Block' for TOKEN_BLOCK,
  call the method apps.get_model with exclude as an argument, substitute it for model.
  if first element of new_name is digit,
  define the function divisibleby with 2 arguments value and arg.
  if AttributeError exception is caught,
  if msg is true,
  from django.core.mail.message import EmailMessage, EmailMultiAlternatives, SafeMIMEText, SafeMIMEMultipart,
  for every key is self.bad_cookies,
  if first element of text is contained in 'xX'.
  evaluate self._is_expired method with f as argument, if the result is false,
  call the self.get method with arguments key and version set to version, substitute the result for value.
  error_class, label_suffix and empty_permitted.   for every field_name in self.fields,
  strip f of whitespaces and append it to plist.
  substitute filter_expression for self.filter_expression.
  decorator cached_property.
  extra for 'extra', can_delete for 'can_delete', can_order for 'can_order', fields for 'fields', exclude for 'exclude',   min_num for 'min_num', max_num for 'max_num', widgets for 'widgets', validate_min for 'validate_min',   validate_max for 'validate_max', localized_fields for 'localized_fields', labels for 'labels', help_texts for 'help_texts',   and error_messages for 'error_messages'.   call the function modelformset_factory with 2 arguments: model and unpacked dictionary kwargs, substitute the result for FormSet.
  substitute value under the name key of the lib.tags dictionary for value under the name key of the temp_lib.tags dictionary.
  otherwise if o is an instance of datetime.time object,
  DEBUG is integer 10.
  call the method path.expanduser with an argument template, substitute it for expanded_template.
  return an instance of metaclass class, created with 3 arguments: string 'temporary_class', None and an empty dictionary.
  define the function cut with 2 arguments value and arg.
  call the method self.loader with 2 arguments: self.loadname and self.dirs, return the first element of the result.
  call the method s.encode with an argument string 'utf-8', substitute the result for s.
  split string s once, with '=' sign as a delimiter, assign the resulting list to the t.
  if self.pointer is smaller than length of self.subject, return boolean True, otherwise return False.
  define the function to_language with an argument locale.
  return func.
  _templatetags_modules is an empty list.
  otherwise if _locs_ is None,
  if not,
  substitute result of the self.path function with argument name for full_path.
  if stream_or_string is an instance of bytes,
  otherwise if field.rel is true and field.rel is an instance of the models.ManyToOneRel object,
  if character ':' is not contained in template,
  call the method serializers.get_serializer with an argument format.
  streaming is boolean False.
  if HTMLParseError exception is caught,
  decorator function register.filter with an argument is_safe set to boolean False.
  last element of result is an instance of Choice class, created with an argument list with 2 elements: None and last element of result.
  if value is not contained in result,
  try,
  call the connection.introspection.table_names with cursor as argument, store the result in tables.
  if value is None,
  define the method filter with 2 arguments: self and record.
  split string name into two parts from the right side by the separator '.', substitute parts for path and module, respectively.
  define the method __str__ with an argument self.
  import module warnings.
  renderer is None.
  if obj is instance of models.signals.ModelSignal class,
  call the function timedelta with an argument seconds set to negative _time.timezone, substitute the result for self.STDOFFSET.
  substitute self for self.config.configurator.
  do nothing.
  return nothing.
  self._deleted_form_indexes is an empty list.
  call the method __init__ from the base class of the class CheckboxChoiceInput, with 2 arguments: unpacked list args,
  define the method Y with an argument self.
  if not,
  call the method self._assert_mutable.
  define ensure_echo_on function.
  if not,
  import module re.
  call the datastructures.MergeDict with self.POST and self.GET as arguments, assign the result to self._request.
  call the method self.inner_run with 2 arguments: None and unpacked dictionary options.
  from django.utils import six into default name space.
  raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to 'required'.
  call the method parser.delete_first_token.
  if settings.TIME_ZONE is an instance of six.string_types and pytz is not None,
  filesize_number_format with result of division of bytes by PB as an argument, substitute the result for value.   call the function avoid_wrapping with an argument value, return the result.
  for every post_callback in self._post_render_callbacks,
  call the function warnings.warn with 2 arguments: string "Custom SQL location '<app_label>/models/sql' is deprecated, use '<app_label>/sql' instead." and RemovedInDjango19Warning.
  define the method tell with an argument self.
  increment i by integer 1,.
  options is a list containing a tuple with 2 entries: string '--help' and None.
  var_obj is None.
  cc is an empty dictionary.
  if AttributeError exception is caught,
  if color_setting is True,
  is_localized is boolean False.
  raise an TemplateSyntaxError with an argument string "Invalid filter: '%s'", substitute '%s' with filter_name.
  return kwargs.
  call the method match.groups, assign the result to name and value, respectively.
  if self.fixture_count equals integer 0 and self.hide_empty is true,
  return None.
  call the method self.nodelist_empty.render with an argument context, return the result.
  call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for _default.
  if _supported is None,
  substitute length of values for len_values.
  from django.conf import settings into default name space.
  result is an empty list, upto is integer 0.
  from django.db.migrations.loader import AmbiguityError into default name space.
  call the method __init__ from the base class of the DTDForbidden class.
  substitute the length of defaults for dlen.
  if self.decimal_places is not None,
  define the method __setattr__ with 3 arguments: self, name and value.
  cat for 'term'.   if value under the 'item_copyright' key of the item dictionary is not None,
  define the method cleaned_data with an argument self.
  dest set to string 'use_ipv6', default set to boolean False and help set to string 'Tells Django to use an IPv6 address.'.   call the method parser.add_argument with 5 arguments: string '--nothreading', action set to string 'store_false',
  if settings.DEBUG is true, return boolean False, otherwise return boolean True.
  decorator deconstructible,
  decorator python_2_unicode_compatible,
  'ManagementForm data is missing or has been tampered with' and code as a string 'missing_management_form'.   if not,
  if self.verbosity is greater than integer 1,
  if sep is not None,
  call the os.path.samefile with arguments src and dst, return the result.
  derive the class Error from base class CheckMessage.
  if ValueError exception is caught,
  for every arg in s, evaluate the function force_bytes for the arguments arg, encoding, strings_only and errors,
  return boolean False.
  otherwise if message is an instance of the list type.
  PATTERN is a string  "classdef< 'class' any+ ':'suite< any*funcdef< 'def' unifunc='__unicode__'parameters< '(' NAME ')' > any+ >any* > >".
  if not,
  call the function force_text with an argument redirect_to, use the result as an argument for the call to the function urlparse,
  compare_to is None.
  call the b64_encode function with an argument data, substitute the result for base64d.
  call the function is_naive with an argument obj.
  call the method self.stdout.write with an argument string "Installed %d object(s) from %d fixture(s)",
  define the method delete with arguments self and name.
  substitute the result for block_re.   call the function re.compile with an argument raw string "^\s*endblocktrans$", substitute the result for endblock_re.
  if not,
  get config dictionary element under 'formatters' key, if it exists substitute it for formatters, if not, formatters is EMPTY_DICT.
  call the function new_method_proxy with an argument operator.ne, substitute the result for __ne__.
  create_models is an empty list.
  increment weight by integer 2.
  validate_comma_separated_integer_list is a instance of a RegexValidator class, created with 3 arguments: comma_separated_int_list_re,
  call the method six.unichr with an argument c, return the result.
  call the method self.error_class with an argument list containing results of the function conditional_escape,
  substitute the result for exc_value.   substitute exc for exc_value.__cause__.
  default set to DEFAULT_DB_ALIAS, help containing string 'Nominates a database to synchronize. Defaults to the "default" database.' as arguments.   call the method parser.add_argument with string '--fake', action containing string 'store_true', dest set to string 'fake',
  substitute return value of the method obj._get_pk_val for obj_pk.
  if not,
  define the method __init__ with 4 arguments: self, attrs set to None, date_format set to None and time_format set to None.
  append string '</optgroup>' to output.
  and evaluated boolean expression s_opt.nargs doesnt equal to integer 0, for every s_opt in parser._actions,   only if s_opt.option_strings is true,   if not,
  call the function plural_re.match with an argument t.contents, substitute the result for pluralmatch.
  substitute the result for offset.   if not,
  self.cookies is an instance of SimpleCookie class created with self.cookies as an argument.
  return split.
  if e.errno is not equal to errno.EEXIST,
  import module warnings.
  substitute the resulting list for list_.   call the method setlist from the base class of the QueryDict class, with arguments key and list_.
  try,
  call the method six.iteritems with an argument base.declared_fields, convert it to a list and append fields to it, substitute the result for fields.
  if not,
  call the method handler.addQuickElement with 3 arguments: string 'atom:link', None and dictionary with 2 entries: 'self' for 'rel',
  from django.core.exceptions import ImproperlyConfigured into default name space.
  derive the class Variable form the base class object.
  from django.core.management.base import BaseCommand and CommandError into default name space.
  define function patch_vary_headers, with response and newheaders as arguments.
  define the method __init__ with 2 arguments: self and data set to None.
  substitute _upload_handlers for self.__upload_handlers.
  help is an string "Prints the DROP INDEX SQL statements for the given model module name(s).".
  if error_class is None,
  call the method token.split_contents, substitute the result for bits.
  return settings.LANGUAGE_CODE.
  remove 3 elements from r starting at the index 23.
  with the result renamed to fp, perform the following:   read data from file fp, use the result as an argument for the call to the function plural_forms_re.search, substitute it for m.
  zfile is an instance of GzipFile class, created with 3 arguments: mode set to string 'wb', compresslevel set to integer 6,
  substitute pattern.regex.pattern for parent_pat.
  define the method normalize_col_name with 4 arguments: self, col_name, used_column_names and is_relation.
  self.position is an integer 0.
  substitute name for self.name.
  directory_created is an empty dictionary.
  define the method get_backend_timeout with self and timeout set to DEFAULT_TIMEOUT as arguments.
  derive the class TypedMultipleChoiceField from the base class MultipleChoiceField class.
  define the method get_resolved_arguments with 2 arguments: self and context.
  return next element of the iterable it.
  if data is None,
  if other equals list containing elements of self, return boolean True, otherwise return boolean False.
  call the function getargspec with an argument func, substitute the result for params, varargs, varkw and defaults, respectively.
  subtract day_of_year from i, if the result is smaller than the result of subtraction of weekday from integer 4,
  call the method build_request_repr with an argument self, return the result.
  where '%s' is replaced with first element of bits.   call the method parser.compile_filter with second element of bits as an argument, substitute the result for viewname.
  type set to int and help is a string 'Specifies the indent level to use when pretty-printing output.'.   call the method parser.add_argument with 5 arguments: string '--database', default set to string 'store', dest set to 'database',
  substitute subject elements from p-th to i-th index for res.
  from . import Error, Tags and register into default name space.
  define the method as_json with 2 arguments self and escape_html set to boolean False.
  skip this loop execution.
  and encoding set to string 'utf-8' as arguments, with the result renamed to fp, perform the following:   call the method fp.write with an argument content.
  and help is a string 'App label of the application to squash migrations for.'.   call the method parser.add_argument with 2 arguments: string 'migration_name',
  finally perform,
  use_l10n set to None and use_tz set to None.   substitute autoescape for self.autoescape.
  substitute before_import_registry for register_to._registry.
  substitute t.nodelist for self.nodelist.
  call the function to_locale with an argument lang, substitute the result for locale.
  a string '%s_%s', where '%s' is replaced with tablename and f.name, respectively,   return value of the function qn called with an argument tablename and return value of the function qn called with an argument f.name.   join field_output elements into a string, separated by whitespaces, append it to table_output.
  from django.conf import settings into default name space.
  derive the class RadioSelect from the RendererMixin and Select base classes.
  call the method clear from the base class of the class QueryDict, return the result.
  call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the item dictionary.
  call the fastcgi_help function with an argument string "ERROR: Invalid option for daemonize parameter.", return it.
  define the function u with an argument s.
  from django.core.mail import get_connection into default name space.
  if not,
  return boolean True.
  return boolean False.
  dest set to string 'load_initial_data', default set to True,   help containing string 'Tells Django not to load any initial data after database synchronization.' as arguments.   call the method parser.add_argument with string '--database', action containing string 'store', dest set to string 'database',
  from django.utils import autoreload into default name space.
  substitute oldroot for value under the key key of the cache dictionary.
  define the method write with 3 arguments: self, outfile and encoding.
  from django.utils.module_loading import import_string into default name space.
  return boolean False.
  for every key and val in return value of the function six.iteritems called with an arguments self.extra_context.   call the method context.push with an argument unpacked dictionary values, with the result as an argument,
  doublecolon_len is integer 0.
  if status is not equal to STATUS_OK,
  call the function initial_value, substitute the result for initial_value.
  subtract year from integer 2000, substitute the result for delta.
  substitute i incremented by 1 for value under the 'counter' key of the loop_dict dictionary.
  if the union of the kwargs and defaults dictionary keys converted into sets is not the same as the union of the defaults and prefix
  get the value 'inhibit_post_migrate' key of the options dictionary, if it exists substitute it for inhibit_post_migrate, otherwise inhibit_post_migrate is boolean False.
  call the self.indent method with integer 0 as an argument.
  if keys is true,
  substitute mapped_tokens for self.tokens.
  call the method self.get_field_type with 3 arguments connection, table_name and row, assign the result to field_type, field_params,
  call the DefaultStorage method, substitute the result for default_storage.
  raise an TypeError exception with an argument: result of the method illegal_formatting.group called with an argument,
  define the method complain with 3 arguments: self, unpacked dictionary wargs and unpacked dictionary kwargs.
  from django.core.management.base import BaseCommand and CommandError into default name space.
  increment i-th element of result by piece.
  substitute first element of self.locale_paths for self.default_locale_path.
  self._post_parse_error is boolen False.
  call the method context.push with an argument var set to output, with the result perform,
  if AppRegistryNotReady exception is caught,
  call the method self.xml.startElement with argument string 'object' and an empty dictionary.
  self.active_readers is an integer 0.
  raise an StopIteration exception,
  import module zlib.
  decrement number by one, multiply it with self.per_page, substitute the result for bottom.
  if not,
  from threading import Lock into default name space.
  if subcommand_cls.use_argparse is true,
  if not,
  parent is a tuple with 1 element, object.
  call the method tempfile.NamedTemporaryFile with argument suffix set to string '.upload'.
  self._post_parse_error is boolean True.
  covert to uppercase language elements from (p+1)-th index to the end, append it to the previous result, return it.   if not,
  try,
  default set to boolean False and help set to a string "Enable fixing of migration conflicts.".   call the method parser.add_argument with 5 arguments: string '--empty', action as a string 'store_true', dest as a string 'empty',
  if value under the 'verbosity' key of the options dictionary is greater than zero,
  if name equals a string 'regex',
  previous result and filepath.   if IOError exception is caught,
  value_converters is a dictionary with 2 entries: 'ext_convert' for 'ext' and 'cfg_convert' for 'cfg'.
  derive the class ConvertingList from list base class.
  call the function to_language with an argument language, substitute it for self.__to_language.
  _translations is an empty dictionary.
  for every sql_file in sql_files,
  call the function check_for_migrations with arguments app_config and connection.
  from django.utils.timezone import get_current_timezone_name to the default name space.
  append ch to result.
  if timeout is not None,
  if cache is None,
  define the method close with self class instance as the argument.
  if etags is false,
  from django.conf import settings into default name space.
  choices is an property object of this class where _get_choices is a getter and _set_choices is a setter function.
  get field.name from the obj, substitute it for related.
  do nothing.
  from django.utils.encoding import force_text into default name space.
  skip this loop iteration.
  call the method self.itervalues, return the list of results.
  return None.
  if TemplateSyntaxError, renamed to e, exception is caught,
  call the method self.make_key with key and version set to version as arguments, substitute the result for key.
  skip this loop iteration.
  style is an instance of the dummy class.
  otherwise substitute return value of the function _ called with an argument ':' for self.label_suffix.   substitute empty_permitted for self.empty_permitted.
  if value is not equal to an empty string,
  define the method chunks with arguments self ad chunk_size set to None.
  append opts.virtual_fields to opts.many_to_many, for every f in the result,
  define the method __repr__ with an argument self.
  label set to return value of the function _ called with an string 'Order' and required as boolean False.   if self.can_delete is true,
  call the function _checkLevel with an argument level, use the result as an argument for the call to the function handler.setLevel.
  call the method compile_func with 2 arguments self and token, substitute the result for compiled_result.
  define the method D with an argument self.
  call the method to_python with an argument data from the base class of the class BooleanField, return the result.
  decorator register.filter.
  join root and filename into a file path, substitute it for old_path.
  call the function time.sleep with an argument integer 1.
  if host exists substitute it for self.host, if not substitute settings.EMAIL_HOST for self.host.
  define the method __getitem__ with 2 arguments: self and key.
  self.attrs is an empty dictionary.
  if secret is None,
  call the __init__ method of the base class of the EmailBackend class with arguments: unpacked list args and unpacked dictionary kwargs.
  define the method save_new with 3 arguments: self, form and commit set to boolean True.
  raise a ValueError exception with an argument "The protocol '%s' is unknown. Supported: %s", replace '%s' with protocol,
  from . import six into default name space.
  substitute charset for self.encoding.
  call the method add_arguments from the base class of the class Command, with an argument parser.
  and return value of the function copy.deepcopy called with 2 arguments: value and memo.   return result.
  remove the 'use_natural_primary_keys' key from the options dictionary and substitute it for self.use_natural_foreign_keys,
  use global variable _default.
  from __future__ import unicode_literals into default name space.
  kwargs is a dictionary with boolean True for 'pk_field'.
  define the method ext_convert with 2 arguments: self and value.
  call the method lexer_class with an arguments template_string and origin, substitute the result for lexer.
  if allow_overwrite is boolean False and call to the os.access function with arguments new_file_name and os.F_OK evaluates to boolean True,
  get the value under the 'output' key of the options dictionary, substitute the result for output.
  return output.
  if log is contained in child_loggers,
  call the os.path.abspath with argument self.file_path, substitute the result for self.file_path.
  except if AttributeError is caught,
  substitute member.name for name.
  if not,
  try,
  del self._post
  try,
  from django.core.serializers.base import SerializerDoesNotExist into default name space.
  call the function force_str with an argument quoted_url, use the result as an argument for the call to the function unquote,
  class method decorator,
  call the method self.add_filters with 2 arguments: logger and filters.
  call the method self.xml.addQuickElement with an argument string 'None'.
  derive the EventHandler class from the base class pyinotify.ProcessEvent.
  raise an ValidationError with 2 arguments: value under the 'max_length' key of the self.error_messages dictionary and code set to 'max_length'.
  substitute the result for context_match.   call the method context_match.group with an argument integer 1, substitute the result for message_context.
  substitute link_prev for value under the PREV key of the link_next dictionary.
  decorator function wraps with 2 arguments: view_func and assigned set to result of the function available_attrs,
  for every item in sequence,
  return value.
  if recursive is true,
  define the method __wrapper__ with 3 arguments: self, unpacked list args and unpacked dictionary kw.
  raise an exception PageNotAnInteger with string 'That page number is not an integer' as an argument.
  get the value under the 'localize' key of the kwargs dictionary, if it is true and self.widget equals to NumberInput,
  return an empty string.
  append app_output to output.
  call the function get_language, substitute the result for lang.
  try,
  substitute name for self.name.
  if result is true,
  handler is an instance of SimplerXMLGenerator class, created with 2 arguments: outfile and encoding.
  append line to bytes string ';', use it as an argument for the call to the function _parse_header_params, substitute the result for plist.
  incremental is boolean False.   EMPTY_DICT is an empty dictionary.
  define the method __init__ with 3 arguments: self, value and text.
  daemon_kwargs is an empty dictionary.
  delete _urlconfs.value.
  clean_data is an empty list.
  endless loop,
  i is integer 0.
  raise an StopIteration exception.
  and unpacked dictionary kwargs.   for every v in self.value call the function force_text with an argument v, add the result to a set,
  define the method with reload with an argument self.
  get attribute real_name from the trans object, return it.
  join elements of words into a string, return it.
  self._done is boolean True.
  root is an empty list.
  substitute None for self.style_func.
  take elements of token_string from second to second last element and strip the whitespaces surrounding the result,
  call the method query_string.decode, substitute the result for query_string.
  evaluate the method six.text_type(s), on the result call the method encode with encoding as an argument, return the result.
  return boolean False.
  self.model_name is a string 'cacheentry'.
  decorator stringfilter,
  label is an empty string.
  define the function striptags with an argument value.
  if self.parsed is true,
  define the function reset_cache with an argument unpacked dictionary kwargs.
  if self.save_as_new is true,
  call the method qs.order_by with argument self.model._meta.pk.name, substitute the result for qs.
  if options.pythonpath is true,
  write string "No changes detected" to self.stdout stream.
  if protocol is not equal to string 'both' and unpack_ipv4 is true,
  function logging.getLogger, assign the result to the security_logger.   evaluate the function force_text with e as an argument, extra is an dictionary with two pair of elements,
  substitute unicode for text_type.
  update default_attrs dictionary with attrs entry.
  call the function escape with an argument value, return the result.
  import module copy.
  call the method validators.MinValueValidator with min_value converted into an integer, append the result to list self.validators.
  token is an instance of Token class, created with 2 arguments: TOKEN_BLOCK and block_content.
  request_finished is a instance of a Signal class.
  if not,
  default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string,
  format, if its true, otherwise string 'TIME_FORMAT' and use_l10n as use_l10n, return the result.   define the function number_format with 4 arguments: value, decimal_pos set to None, use_l10n set to None,
  call the import_string function with an argument settings.SIGNING_BACKEND, substitute the result for Signer.
  replace '%s' in string "processing locale %s\n" with locale, write it to self.stdout.
  call the function smart_urlquote with an argument middle, substitute the result for url.
  join trans_bit into a string separated with whitespaces, substitute the result for bit.
  if commit is true,
  otherwise if, type of s doesnt equal to six.text_type,
  raise an NoReverseMatch exception with an argument string "Reverse for '%s' with arguments '%s' and keyword ",
  substitute self.html_initial_name for name.
  define the method __copy__ with an argument self.
  call the method self.download with an argument template, substitute the result for absolute_path.
  return nodes.
  define the function escape with an argument text.
  from django.db.migrations.loader import MigrationLoader into default name space.
  call the method error with an argument message, from the base class of the class CommandParser.
  derive the class BaseFormSet from the object base class.
  split ip_str by ':', if last element of the result is not equal to hextet.
  _format_modules_cache is an empty dictionary.
  try,
  return string "<%s: %s>", formated with self.__class__.__name__ and self.
  define the function wrapped with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  call the function itertools_cycle with an argument self.cyclevars, substitute the result for value under the self dictionary context.render_context.
  if first and second elements of value are contained in self.empty_values,
  try,
  call the method self._add_fallback.
  call the method handler.addQuickElement with 2 arguments: string 'updated' and result of the function rfc3339_date,
  call the method kwargs.update with an argument self.default_args.
  call the method self._cull.
  call the method extend_nodelist with 3 arguments: nodelist, node and token, from the base class of the class DebugParser.
  queryset is an property object of this class, with _get_queryset getter and _set_queryset setter functions.
  add row_data to seen_data set.
  self.compression_formats is an dictionary with 3 initial entries: tuple containing 2 elements: open and string 'rb' for None,
  try,
  append string '%%(%s)s' to singular, where '%s' is replaced with t.contents.
  if extend is boolean True,
  define the function get_cache with backend and dictionary pair of elements kwargs as arguments.
  format_html_join, called with 3 arguments: empty string, string '<li>{0}</li>', tuple containing results of the function,   force_text with an argument e, for every e in self, return the result.   define the method as_text with an argument self.
  define the method __init__ with 5 arguments: self, var, name, nodelist and extra_context set to None.
  derive the class PasswordInput from the TextInput base class.
  from django.utils.dateformat import format and time_format into default name space.
  call the method self.get_queryset, return the length of the result.
  return singular.
   and field _state.adding of value under the name key of self.cleaned_data dictionary is true,   append name to construct_instance_exclude list.
  join all the results into a string separated by newlines, append the result to output.   join elements of output into a string, separated by newline characters, return the result.
  call the method self.has_key with an argument key, return the result.
  while model_dependencies is true,
  try,
  if UnicodeError exception is caught,
  if tt.tm_isdst is greater than integer 0, return the result.
  if string 'forloop' is contained in context,
  call the method apps.get_app_configs, substitute the result for app_configs.
  messages is an empty dictionary.
  from django.core.management.base import BaseCommand into default name space.
  result of the function iri_to_uri called with an argument link for 'link',   result of the function to_unicode called with an argument description for 'description',   result of the function to_unicode called with an argument language for 'language',   result of the function to_unicode called with an author_email description for 'author_email',   result of the function to_unicode called with an argument author_name for 'author_name',   result of the function iri_to_uri called with an argument author_link for 'author_link',   result of the function to_unicode called with an argument subtitle for 'subtitle',   if true, categories is value for 'categories' key, if not, empty tuple is value for 'categories' key,   result of the function iri_to_uri called with an argument feed_url for 'feed_url',   result of the function to_unicode called with an argument feed_copyright for 'feed_copyright',   if true, feed_guid is value for 'id' key, if not, lik is value for 'id' key and ttl for 'ttl'.   update self.feed dictionary with kwargs.
  and help set to string 'Nominates a database to synchronize. Defaults to the "default" database.'.   define the method handle with 2 arguments: self and unpacked dictionary options.
  derive the class __proxy__ from the Promise base class.
  get the value under the key 'database' of the options dictionary, substitute it for db.
  "as an app name. Please try another name.", where '%r' is replaced with app_name.   call the method handle from the base class of Command class, with 4 arguments: string 'app', app_name, target and unpacked dictionary options.
  if settings.USE_X_FORWARDED_HOST is true and 'HTTP_X_FORWARDED_HOST' is contained in self.META.
  close the process with an argument 1.
  get the value under the 'charset' key of content_params dictionary, use it to call the codec.lookup method.
  from __future__ import unicode_literals into default name space.
  define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
  derive the class Parser form the base class object.
  call method executor.collect_sql with plan as the argument, substitute the result for sql_statements.
  status_code is an integer 403.
  substitute greater element between integer 0 and end decremented by one for last.
  derive the class EmailBackend from the BaseEmailBackend base class.
  substitute hashlib.sha256 for digest.
  call the function force_text with an argument ttl, substitute the result for ttl.
  if six.PY3 is true,
  derive the class Truncator form the SimpleLazyObject class.
  call the method pk.rel.to._default_manager.get_queryset, substitute the result for qs.
  if bad_app_labels is true,
  return boolean False.
  call the dict function with 2 arguments: final_attrs and id set to string '%s_%s', where '%s' is replaced with id_ and i,
  get the value under the key key of the self.cookies dictionary, substitute boolean True for 'httponly' key of the returned dictionary.
  for every f in post_sql_fields,
  define the method __iter__ with an argument self.
  substitute __name__ field of the result for function_name, in not, substitute func.__name__ for function_name.   define the function compile_func with 2 arguments: parser and token.
  call the method __init__ from the base class of the class SplitHiddenDateTimeWidget, with 3 arguments: attrs, date_format,  and time_format.
  convert to an integer value under the 'COMP_CWORD' key of the os.environ dictionary, substitute it for cword.
  if not,
  if NotImplementedError exception is caught,
  streaming_content.setter decorator,
  from django.utils import six into default name space.
  attachment is an instance of a class SafeMIMEText, created with arguments: content, subtype and encoding.
  call the method datetime.utcnow, on the result call the method replace with an argument tzinfo set to utc, return the result.
  return an empty string.
  define the method read with an argument self.
  convert value, self.sep and return value of the function timestamp, concatenate them, substitute the result for value.
  call the signals.request_started.send method with sender set to self.__class__ as argument.
  use the result as an argument for the call to the function mark_safe, return the result.   define the function format_html_join with 3 arguments: sep, format_string and args_generator.
  for every i in self.years append tuple containing i and i elements into a list, substitute the resulting string for choices.
  return exclude.
  append ending to msg.
  invert self.negated.
  if length of bits is not equal to integer 3,
  call the function force_bytes with argument value, use the result as an argument for the call to the method base64.b64decode,
  try,
  if _serializers is false,
  name set to function_name, and takes_context set to takes_context and node_class set to SimpleNode.   substitute func.__doc__ for compile_func.__doc__.
  if AttributeError exception is caught,
  processors is an empty tuple.
  define get_script_name function with environ as an argument.
  get 'model' attribute from the options object, if it exists substitute it for self.model, if not self.model is None.
  append item to self.items.
  try,
  dest set to string 'domain' and help as a string 'The domain of the message files (default: "django").'.   call the method parser.add_argument with 6 arguments: string '--all', string '-a', action as a string'store_true',
  call the function import_module with an argument string '%s.formats' formated with location, which is formated with loc,
  if filename is empty,
  if not,
  if InputStreamExhausted exception is caught,
  define the method enter_command with 3 arguments: self, token and msg.
  property decorator,
  decimal_digits is a string '0123456789'.
  define the method __getstate__ with an argument self.
  try,
  if settings.USE_TZ is true substitute result of the function timezone.get_current_timezone for tzinfo, if not tzinfo is None.
  for every chunk in field_stream,
  encoding.setter decorator,
  if fh has an attribute a, for every a in WRAPPER_ASSIGNMENTS, put a into a tuple, return the resulting tuple.
  otherwise substitute self.form.label_suffix for label_suffix.   if label_suffix and contents are both true and last element of contents is not contained in the result of the function _,
  join elements of output into a string, separated by newline characters, return it.
  call the function timedelta with an argument seconds as negative time.altzone, return the result.
  description is a string "The '%s' function" replaced by value of receiver.__name__.
  define the method __enter__ with an argument self.
  raise an TemplateSyntaxError exception with an argument string "'%s' tag takes only one argument",
  define the method add_arguments with 2 arguments: self and parser.
  if handler has an attribute 'file',
  call the self._get_pages method with 3 arguments: self.object_list from the bottom to the top index, number and self, return the result.
  call the method self.xml.endElement with an argument string 'natural'
  call the method self.add_error with 2 arguments name and e.
  call the function force_bytes with an argument password, substitute the result for password.
  for every reference and receivers in return value of the call of obj.unresolved_references.items method,
  called with string '__prefix__' as an argument and empty_permitted as boolean True, substitute the result for form.   call the method self.add_fields with arguments form and None.
  define the method get_default_prefix with an argument cls.
  raise an NotImplementedError with argument string 'subclasses of FileUploadHandler must provide a file_complete() method'.
  if error.params is true,
  if package doesnt have an 'rindex' attribute,
  from django.utils import six into default name space.
  call the method b64_decode with an argument base64, substitute the result for data.
  get the value under the format key of the _serializers dictionary, return the Deserializer filed of the result.
  call the function get_language, substitute the result for language_code.
  return self.size.
  define the function clean_ipv6_address with 3 arguments: ip_str, unpack_ipv4 set to boolean False and error_message,
  for every form in valid_forms,
  msg is an instance of a class SafeMIMEMultipart, created with arguments: _subtype set to self.mixed_subtype and encoding set to encoding.
  with lock,
  if KeyError exception is caught,
  replace '%s' in string "Cache table '%s' created." with tablename, write it to self.stdout.
  get the value under the key of the dictionary self, if key does not exists return evaluated result of the function Morsel, substitute it for M.
  fixture_files is an empty list.
  slice the rawdata to obtain substring from i-th to j-th element, use it as the argument for the method call to the self.handle_data.
  define the method render with 2 arguments: self and context.
  from __future__ import unicode_literals into default name space.
  return e.
  get the id of the self object, use it as a key to obtain the value from the memo dictionary, substitute self with it.
  must_be_first is boolean True.
  append form to self.saved_forms.
  if not,
  endless loop,
  define the function contains with 2 arguments source and inst.
  call the method handler.addQuickElement with 2 arguments: string 'subtitle' and value under the 'subtitle' key of the self.feed dictionary.
  from __future__ import unicode_literals into default name space.
  if app_config.models_module is None,
  if name is None and compile_function is None,
  call the method apps.get_app_config with an argument app_label, substitute the result for app_config.
  key, encoding and errors set to string 'replace', and return value of the function force_text with 3 arguments:   value, encoding and errors set to string 'replace'.   call the method mutable substitute for self._mutable.
  call the function allow_lazy with 2 arguments: unescape_entities and six.text_type, substitute the result for unescape_entities.
  if value has an attribute '__iter__' and value is not an instance of six.text_type and value doesnt have an attribute '_meta',
  if IOError, renamed to e, exception is caught,
  call the function warnings.warn with 3 arguments: string "SortedDict is deprecated and will be removed in Django 1.9.",
  if unpack_ipv4 is true,
  call the function walk_to_end with 2 arguments: ch and pattern_iter.
  return arg.
  dependencies set to new_operations and replaces set to replaces.   call the function subclass with 2 arguments string "0001_squashed_%s", where '%s' is replaced with migration.name and app_label,
  raise an CommandError exception with an argument string "errors happened while running xgettext on %s\n%s",
  widget is an instance of HiddenInput class
  if messages is not an instance of the ValidationError class,
  call the method self.close.
  raise an NotImplementedError exception with argument string 'subclasses of Storage must provide an accessed_time() method'.
  derive the class HttpResponsePermanentRedirect from the HttpResponseRedirectBase base class.
  define the method handle_m2m_field with arguments self, obj and field.
  add k to seen.
  call the method token.split_contents, substitute the result.
  split template once at the first character ':', convert the first element to lowercase and substitute it for scheme.
  return found.
  substitute name for self.name.
  if key is not contained in default_settings,
  call the method handler.addQuickElement with 2 arguments: string 'ttl' and value under the 'ttl' key of the self.feed dictionary.
  call the method find_indentation with an argument node, append the result to newline, substitute the result for klass.prefix.
  decrement nesting by one.
  """(?P<ipv6>\[[a-fA-F0-9:]+\]) | (?P<fqdn>[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*) ):)?(?P<port>\d+)$""", re.X   DEFAULT_PORT is a string "8000".
  call the function signals.request_finished.connect with argument close_caches.
  call the function os.chmod with arguments full_path and self.file_permissions_mode.
  while i is lesser than length of subject and i-th element of subject is not an empty space or tab character,
  return the result.   decorator function register.filter with an argument is_safe set to boolean True.
  cache is an instance of BaseDatabaseCache class, created with arguments: tablename and an empty dictionary.
  parentloop is an empty dictionary.
  if not,
  convert first element of answer to lowercase and substitute it for answer.
  split ip_str into parts by ':', substitute the result for new_ip.
  derive the class WSGIServer from simple_server.WSGIServer and object base classes.
  raise an exception,
  try,
  replace '%s' in string "  Optimized from %s operations to %s operations." with lengths of operations and ew_operations, respectively,
  if p.image is not empty,
  if not,
  for every index in range of integers from 0 to length of hextets, not included,
  __all__ a tuple containing strings: 'Field', 'CharField', 'IntegerField', 'DateField', 'TimeField', 'DateTimeField', 'RegexField',
  call the function constant_re.findall with an argument t.contents, substitute the result for cmatches.
  sum return value of the function call time.time() and cache_timeout, use it as an argument for function call of http_date,
  url_schemes is list of strings 'http', 'https' and 'ftp'.
  formated with values under the 'author_email' and 'author_name' keys of item dictionary.   otherwise if value under the "author_email" key of the item dictionary is true,
  call the method block_context.pop with an argument self.name, assign the result to push and block.
  do nothing.
  if value is contained in self.empty_values,
  if ImportError exception is caught,
  remove last element for quant.
  append attr.name to attrs for every attr in self._moved_attributes.
  if not,
  define the method modified_time with arguments self and name.
  if pattern equals '*' or pattern starts with '.' or pattern equals host, and only if:
  self.m2m_data is None.
  if not,
  define the method tell with an argument self.
  if not, self.empty is boolean False.   crate a set containing of app_labels elements, substitute it for app_labels.
  'TemporaryFileUploadHandler', 'MemoryFileUploadHandler', 'load_handler' and 'StopFutureHandlers'.   derive the class UploadFileException from the Exception base class.
  import module warnings.
  delete frame.
  call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the self.feed dictionary.
  define the method __init__ with 4 arguments: self, redirect_to, unpacked list args and unpacked dictionary kwargs.
  call the method smart_split_re.finditer with an argument text, for every bit in result,
  import module datetime.
  define the method __init__ with an argument self.
  return input_val.
  substitute memoryview for memoryview.
  where '%s' is replaced with token.contents.   assign the string 'reversed' to is_reversed and bits last elements.
  if cls._delegate_text is true,
  if settings.USE_TZ is true and value is not None and call to the function timezone.is_aware with an argument value, evaluates to true,
  _assertRegex is a strnig "assertRegexpMatches".
  requires_system_checks is boolean False.
  return an string "Error in formatting: %s", replace '%s' with result of the function force_text,
  return integer 1.
  call the function get_callable.cache_clear.
  from django.core.files.base import File into default name space.
  blocks is a dictionary with elements: n for n.name, for every n in return value of the method,
  skip this loop iteration.
  get "_decorated_function" attribute from func, return func if the attribute doesnt exists,
  derive the class Warning from base class CheckMessage.
  define the method start_index with an argument self.
  code set to string 'invalid_choice' and params as a dictionary with an entry, val for 'value'.   call the method self.run_validators with an argument value.
  if not,
  if template is None,
  if transfer_encoding equals string 'base64',
  call the method self.build_attrs with an argument attrs, substitute the result for final_attrs.
  define the method __new__ with 4 arguments: mcs, name, bases and attrs.
  if threading is true,
  if TypeError exception is caught,
  define the method _get_request with self class instance as argument.
  substitute smart_text for smart_str.
  for every d in deps, if d is not contained in models and d is contained in model_list add boolean True to a tuple,
  if ValidationError exception is caught,
  if cleaned_line is false,
  if UnicodeEncodeError exception is caught,
  from django.utils.encoding import python_2_unicode_compatible into default name space.
  define the method extend_nodelist with 4 arguments: self, nodelist, node and token.
  concatenate path and string '.%s', append the result to format_module_path.
  if not,
  LockFileEx.argtypes is a list containing 6 elements: HANDLE, DWORD, DWORD, DWORD, DWORD and LPOVERLAPPED.
  call the method match.group with 2 arguments: strings "constant_arg" and "var_arg", substitute the result for constant_arg,
  while i is lesser than length of subject and i-th element of subject is not equal to c,
  try,
  join app_config.path and string 'management' into a file path, substitute it for path.
  if daemonize is true,
  append string "Field renamed because of name conflict." to field_notes.
  define the function get_template_from_string with 3: source, origin set to None and name set to None.
  subtract i from len_values, substitute the result for value under the 'revcounter' key of the loop_dict dictionary.
  msg is a string "%s doesn't look like a module path" formated with dotted_path.
  strip message_context of '"' characters from both ends, substitute the result for message_context.
  formfield_callback as formfield_callback, widgets as widgets, localized_fields as localized_fields, labels as labels,   help_texts as help_texts and error_messages as error_messages, substitute the result for form.   call the function formset_factory with 10 arguments: form, formset, extra as extra, min_num as min_num, max_num as max_num,
  import module os.
  call the method self.xml.endElement with an argument string "django-objects".
  substitute settings.MEDIA_URL for base_url.
  declared_fields is an instance of OrderedDict class.
  increment self.buffer by chunk.
  call the method self.valid_value with an argument val, if it evaluates to false,
  define the function fget with 3 arguments: instance, instance_type set to None and name set to fget.__name__.
  define the method process_default with self class instance and event as arguments.
  call the cursor.close method.
  message is an instance of the ValidationError class created with an argument message.
  call the method field_stream.read with an argument: over_bytes subtracted from integer 4, substitute the result for over_chunk.
  call the function get_current_timezone, use the result as an argument for the call to the function _get_timezone_name, return the result.
  if TypeError, AttributeError, KeyError or ValueError exceptions are caught,
  do nothing.
  if propagate is not None,
  from django.utils.encoding import force_bytes into default name space.
  derive the class SplitDateTimeWidget from the MultiWidget base class.
  convert param to a string, use it as a key to get the value from kwargs dictionary, assign it value.
  if self.is_reversed is true, substitute reversed_text is an string ' reversed', if not, reversed_text is an empty string.
  join first element of django.__path__, string 'conf' and subdir into a valid file path, return it.
  call the function force_str with an argument self._tzname, return the result.
  append the result to password.   call the method password.translate with an argument hmac.trans_36, update inner dictionary with the result.
  try,
  define the function wrapper with an argument unpacked list args.
  call the method handler.addQuickElement with 2 arguments: string 'uri' and value under the 'author_link' key of the item dictionary.
  return args and kwargs.
  if buffer_ is true,
  put to into a list, assign it to self.to.
  call the method other.__cast, substitute the result for other.
  if node.must_be_first is true and nodelist is true,
  if las equals integer 3,
  if errors is true,
  call the function validate_ipv4_address with an argument hextet.
  call the method self.file.close.
  define the method render with 2 arguments: self and context.
  define the function inotify_code_changed.
  decorator function register.filter with an argument is_safe set to boolean True.
  substitute choices for self.choices.
  only if form_class is not None, and if form_class has an attribute '_meta' and form_class._meta.fields is not None,
  if truncate_text is true,
  if count of occurrence of '::' in ip_str is greater than integer 1,
  call parser.add_argument method with '--ipv6', string '-6', action set to string 'store_true', dest set to string 'use_ipv6',
  call the method httpd.set_app with an argument wsgi_handler.
  define method add_arguments with self class instance and parser as the arguments.
  define the method receive_data_chunk with arguments: self, raw_data and start.
  lang is None.
  get the LANG_INFO dictionary value under the generic_lang_code key, return the result.
  call the new_file method form the base class from the MemoryFileUploadHandler class with arguments: unpacked list args and unpacked list kwargs.
  if IndexError, ValueError, KeyError or TypeError exceptions are caught,
  call the function self.create_var with an argument token, return the result.
  replace every occurrence of '\n' in p for '<br />',
  try,
  try,
  where '%s' is replaced with self.prog_name, an empty string and string "Available subcommands:".   call the method collections.defaultdict with a argument: lambda function without arguments that returns an empty list,
  "is deprecated, use ArgumentParser instead" and RemovedInDjango20Warning.   parser is an instance of the object OptionParser, created with arguments: prog set to prog_name,
  call the function settings.is_overridden with argument string 'MANAGERS', if it evaluates to boolean True,
  raise an TemplateSyntaxError exception with an argument string "%r takes two arguments",
  if kwargs is true,
  TOKEN_BLOCK is integer 2
  from django.utils.encoding import force_text into default name space.
  call the function digest, substitute the filed digest_size of the result for hlen.
  define the method _new_instance with 4 arguments: (cls, children set to None, connector set to None and negated set to boolean False.
  messages is an instance of the ValidationError class created with an argument messages.
  return first end elements of list chunk.
  filename and e.   split the_path at the '/' character, substitute last element of the result for used_name.
  define the method __init__ with 5 arguments: self, protocol set to string 'both', unpack_ipv4 set to boolean False,
  try,
  if not self.extra_context is an empty dictionary.   remove kwargs dictionary entry under the 'isolated_context' key, if it exists substitute it for self.isolated_context,
  call the function re.compile with an argument raw string "(?:(\w+)=)?(.+)", substitute the result for kwarg_re.
  skip this loop iteration,
  return value of the call to the function _ with an argument string 'Enter a valid IPv4 address.' and string 'invalid'.   define the function validate_ipv6_address with an argument value.
  append self._regex_validator to self.validators.
  derive the SimpleUploadedFile class from the InMemoryUploadedFile base class.
  and list with results of the function force_str with an argument i, for every i in v, only if v is a list or a tuple,   otherwise second element is result of the function force_str with an argument v, for every k and v in query,   and doseq, return the result.   define the function cookie_date with an argument epoch_seconds set to None.
  requires_system_checks is boolean False.
  return _translations dictionary value, under the language key.
  define the method migration_progress_callback with self class instance, action, migration and fake set to boolean False as arguments.
  call the function construct_instance with 4 arguments form, instance, fields, exclude and substitute the result for instance.
  use the result and file_obj as arguments for the call to the method self._files.appendlist.   break the loop execution.
  from __future__ import unicode_literals into default name space.
  call the method bpython.embed.
  and self.ns for "xmlns".   if not,
  call the method parser.parse with an argument tuple with 3 elements: strings 'elif', 'else' and 'endif', substitute the result for nodelist.
  for every key and value in items of other_dict dictionary,
  call the function mark_for_escaping with an argument new_obj, substitute the result for obj.
  define the method _add_local_translations with an argument self.
  if value is false,
  self._populated is boolean False.
  if not, substitute self.auto_id for id_.   if id_ is true,
  define the method args_check with 3 arguments: name, func and provided.
  unpacked dictionary kwargs.   call the method self._set_regex with an argument regex.
  __version__ is a string "0.1".
  call the os.rename function with arguments old_file_name and new_file_name.
  from django.utils.text import get_valid_filename into default name space.
  if filename ends with string '.mo',
  call the method self.stdout.write with an argument string 'examining files with the extensions: %s\n',
  call the cursor method on the value under the db key of connections dictionary, preform following with return value named cursor,
  call the method self._mark_post_parse_error.
  classmethod decorator,
  call the function pickle.load with argument f, substitute the result for exp.
  define the method __repr__ with an argument self.
  call the get_complete_version with an argument version, store the result in version.
  for every module in templatetags_modules,
  p and errors set to string 'replace', for p in self.params.   derive the class InvalidTemplateLibrary form the base class Exception.
  return response
  try,
  call the method token.split_contents, substitute the result for bits.
  convert value under the 'HTTP_CONTENT_LENGTH' key of the META dictionary to an integer of base of value under the 'CONTENT_LENGTH' key of META dictionary, if the key doesnt exists use 0 as the base, substitute the result for content_length.
  for every message is message,
  if c doesnt have an attribute '__call__', and types has an attribute 'ClassType', and type of c is not equal to types.ClassType,
  call the __call__ method from the base class of the class URLValidator, with an argument value.
  return self.objects.
  if Exception, renamed to e, exception is caught,
  raise an TemplateSyntaxError exception with an argument string "back called without some previous parsing".
  help is an string "Creates the tables needed to use the SQL cache backend.".
  required set to boolean True, widget set to None, label set to None, initial set to None, help_text set to an empty string,   to_field_name set to None, limit_choices_to set to None, unpacked list args and unpacked dictionary kwargs.   if required is true and initial is not None,
  from django.utils.html import escape into default name space.
  if not,
  raise an ValueError exception with an argument string 'Unable to set target handler %r: %s',
  return usage.
  if value under the 'enclosure' key of the item dictionary is not None,
  define the function _create_cache with backend and dictionary pair of elements kwargs as arguments.
  from django.utils import six into default name space.
  substitute new_method_name for new_method_name.
  'get_current_timezone', 'get_current_timezone_name', 'activate', 'deactivate', 'override', 'localtime', 'now', 'is_aware',   'is_naive', 'make_aware' and 'make_naive'.   call the function timedelta with an argument integer 0, substitute the result for ZERO.
  if settings.USE_ETAGS is True and function call response.has_header with string 'ETag' as argument returns boolean False,
  return the result.   define the method value_from_datadict with 4 arguments: self, data, files and name.
  from __future__ import unicode_literals into default name space.
  sort current_fields elements with key being a lambda function with argument x and return value creation_counter filed of first element of x.
  derive DatabaseCache from the BaseDatabaseCache base class.
  for every bit in bits,
  self.settings_exception is None.
  finally,
  from __future__ import unicode_literals into default name space.
  closed is a property object with _get_closed as a getter method.
  from __future__ import unicode_literals into default name space.
  if username is None substitute settings.EMAIL_HOST_USER for self.username, if not substitute username for self.username.
  define the function decorator with an argument klass.
  call the function get_language, substitute the result for language_code.
  reason_phrase is None.
  initial is boolean False.
  if not,
  call the function warnings.warn with 2 arguments: string "django.utils.tzinfo.LocalTimezone will be removed in Django 1.9. "
  define the method add_item_elements with 3 arguments: self, handler and item.
  from django.utils.functional import lazy into default name space.
  define the method dst with 2 arguments self and dt.
  register.tag decorator,
  convert bytes to floating point number, substitute it for bytes.
  call the function getargspec with an argument func, substitute the result for params, varargs, varkw and defaults.
  from django.db.models import ForeignKey.
  return first element of value.
  call the method zipfile.ZipFile.__init___ with the arguments self, unpacked list args and unpacked dictionary kwargs.
  python_2_unicode_compatible decorator,
  called with an argument final_attrs and return value of the function force_text called with an argument value, return the result.   derive the class DateTimeBaseInput from the TextInput base class.
  define the method flush with an argument self.
  call the method self.fields.items, for every name and field in result,
  define the function get_urlconf with an argument default set to None.
  derive the class FixedOffset from the tzinfo base class.
  if _default is None,
  if not,
  call the method self.read, substitute the result or self._body.
  form._meta.fields is a list created out of form._meta.fields elements.
  define the method handle_fk_field with argument self, obj and field.
  if not,
  call the params.get method wit string 'VERSION' and integer 1 as arguments, substitute the result for self.version.
  if token.contents equals string 'empty',
  return the value under the language_code of the self._regex_dict dictionary.
  define the function get_cache_key, with request key_prefix set to None, method set to 'GET' and cache set to None as arguments.
  call the method f.value_from_object with an argument instance, substitute the result for qs.
  best_doublecolon_len is an integer 0.
  call the function render_value_in_context with 2 arguments: value and context, return the result.
  return an instance of a NowNode class, created with an argument format_string.
  derive the class metaclass form the meta base class.
  call the function get_commands, convert the result to a list, append string 'help' to it, substitute it for subcommands.
  import module time.
  return result.
  for every v in list_ append to a list result of the function encode, called with arguments: k and result of the function force_bytes,
  derive the class FloatField from the base class IntegerField class.
  define the method get_data with an argument self.
  call the method self.get_parent with an argument context, substitute the result for compiled_parent.
  if not,
  position the file self.file pointer at the end.
  derive the class Group from list base class.
  call the method obj.save with an argument using set to self.using.
  from django.conf import settings into default name space.
  self._non_form_errors is None.
  if not,
  from django.db import router and DEFAULT_DB_ALIAS into default name space.
  from django.utils.six.moves import cPickle as pickle, into default namespace.
  append header to the string 'HTTP_', append the result to the list headerlist.
  call the method self.merge with an argument translation.
  return new_key.
  return singular_suffix.
  call the method signals.got_request_exception.send with the sender set to the type of this class, and request set to request as the arguments.
  skip this loop iteration.
  import module datetime.
  call the function escapejs with an argument value, return the result.
  from __future__ import unicode_literals into default name space.
  call the function call_command with 3 arguments: string "createsuperuser", interactive is boolean True,
  call the function logging_config_func with an argument DEFAULT_LOGGING.
  define the function npgettext with 4 arguments: context, singular, plural and number.
  yield node.
  get is a tuple containing elements generated by the call to the function pformat with an argument POST_override,
  try,
  if self.required is true,
  otherwise if self.verbosity is greater than integer 0,
  if value is an instance of Field class,
  if link is not None,
  call the method field.clean with an argument value, substitute the result for value.
  if _locs_ is None,
  define the method _proxy_method with 3 arguments self, unpacked list args and unpacked dictionary kwargs.
  for every name in namelist,
  raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
  if current is an instance of BaseContext and bit attribute of type of current is true,
  if VariableDoesNotExist exception is caught,
  step is an string 'any'.
  call the method self.xml.startElement with 2 arguments: string 'field' and a dictionary containing 2 entries: field.name for 'name',
  try,
  extend comment_notes list with field_notes.
  define the function urlsafe_base64_encode with an argument s.
  in the string '%s. You passed in %r (%s)' replace every %s with original and type of the object self.obj as strings, respectively,
  call the method self.close.
  call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 2 entries:
  if localized_fields is not None,
  substitute conn_type for self.connector.
  call the function stat.S_IMODE with argument st.st_mode, substitute the result for mode.
  if http_cookies.CookieError exception is raised.
  try,
  call the self.path function with argument name, use the result as the argument for the call to the os.path.exists function, return the result.
  derive the class File from the FileProxyMixin base class.
  if current_len equals truncate_len,
  call the method parser.next_token, substitute the result for endblock.
  previous result and filepath.   if IOError exception is caught,
  delete the value under the key key of self._cache dictionary.
  try,
  if model is not contained in app_models for every model in return value of the connection.introspection.installed_models function return value,
  return neg and res.
  from django.utils.six.moves import map into default name space.
  call the function pgettext_lazy with an argument self.message_context and value, return the result.
  substitute s without the first element for s.
  use it and the re.I as the input arguments for function re.compile, put the result in the self.interesting.   evaluate function tag.lower, without the arguments, put the result in the self.cdata_tag.
  return a string '%s...' formated with elements of x up to the index equal to the maximum value between integer 0 and 3 subtracted from limit.
  otherwise if name is not None and filter_func is not None,
  self.__name is a string "%s%02d%02d", replace '%s' with sign, '%02d' is replaced with absolute value of offset divided by 60,
  define the emethod parse with 2 arguments: self and parse_until set to None.
  call the method token.split_contents, substitute the result for bits.
  if not,
  define the method _ipython with an argument self.
  return is boolean False.
  define the __call__method with arguments self, unpacked list args and unpacked dictionary kwargs.
  split value by newline characters, substitute the result for lines.
  self.first is boolean True.
  subtype and charset, respectively.   if not,
  escaped is boolean False.
  define the method make_view_atomic, with self class instance and view as the arguments.
  return an empty list.
  substitute string 'checked' for value under the 'checked' key of final_attrs dictionary.
  call the method self.callback with an argument record, if the result evaluates to true,
  call the function os.path.abspath with an argument dirpath, if it starts with return value of the method os.path.dirname,
  return new_class.
  if remaining is not greater than 0, assert an error with the message string 'remaining bytes to read should never go negative'.
  from __future__ import unicode_literals into default name space.
  derive the class ErrorList from the UserList and list base classes.
  where string '%s' is replaced by mod_name and func_name, respectively.   return view_func.
  call the method parser.delete_first_token.
  call the function lazy with 2 arguments: ugettext and six.text_type, substitute ugettext_lazy.
  call the method datetime.datetime.combine with unpacked list data_list, substitute the result for result.
  append self.data.day to the value under the self.data.month key of the self.year_days dictionary, substitute the result for doy.
  if _default is None,
  dest set to string 'interactive', default set to boolean True, help as a string 'Tells Django to NOT prompt the user for input of any kind.'.   call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store', dest as a string 'database',
  call the method payload.decode with 2 arguments: string 'ascii' and string 'surrogateescape', substitute the result for self._payload.
  if ImportError exception occurred,
  if GeneratorExit exception is caught,
  define the function inlineformset_factory with 20 arguments: parent_model, model, form set to ModelForm,
  append list containing string '--no-wrap' to self.msgmerge_options
  substitute module for the value under the format key of the serializers dictionary.
  if length of bits equals integer 4,
  call the function quote with 2 arguments: result of the function force_str called with an argument url,
  return an string '0'.
  pop the element form the path as substitute the result for ns.
  substitute '%d' with self.loaded_object_count, self.fixture_object_count and self.fixture_count.   define the method load_label with self and fixture_label as arguments.
  define the function upath with an argument path.
  define the method to_python with arguments self and value.
  define the method validate with arguments self and value.
  with the result,   call the method connection.cursor, with the result as cursor,
  if default_args exists substitute it for self.default_args, if not, self.default_args is an empty dictionary.
  if ValueError exception is caught,
  call the method self.tag with 2 arguments name and func, return the result.
  call the server_bind method from the base class of the WSGIServer class.
  substitute self.subject for subject.
  if 'widget' key of the kwargs dictionary doesnt exists assign it widget field of the base class of the IntegerField class value.
  substitute code for self.code.
  return callback and a empty string.
  call the function ugettext_lazy with an argument string 'Currently', substitute the result for initial_text.
  call the style.NOTICE method with an argument string "[%s]", where '%s' is replaced with app, append the result to usage.
  substitute settings.MEDIA_URL for prefix.
  default_error_messages is a dictionary with 4 initial entries: return value of the function _ called with string as an argument,
  on the object under the db key of connections dictionary call the method ops.value_to_db_datetime with argument exp, substitute the result for the exp.
  substitute func for _dec._decorated_function.   call the function wraps with an argument func, call the result with an argument _dec, return the result.
  if commit is false,
  convert self to a tuple, call the result with 2 arguments: block.name and block.nodelist, substitute the result for block.
  inplural is boolean True.
  return ZERO.
  if not,
  call the method parser.delete_first_token.
  define the method _truncate_html with 6 arguments: self, length, truncate, text, truncate_len and words.
  call the method handler.addQuickElement with 2 arguments: string 'rights' and value under the 'item_copyright' key of the item dictionary.
  get 'default_error_messages' from the c object, if it doesnt exists return an empty dictionary,
  if InvalidOperation exception is caught,
  call the method self.queryset.none, return the result.
  from django.core import signing into default name space.
  if not,
  if not,
  call the function ugettext_lazy with an argument string 'Clear', substitute the result for clear_checkbox_label.
  if settings.TEMPLATE_STRING_IF_INVALID is true,
  table_names is an empty list.
  substitute i for value under the 'counter0' key of the loop_dict dictionary.
  define the method is_valid with an argument self.
  derive the class TemplateIfParser from IfParser base class.
  yield meta_line as the result.
  call the self.style.MIGRATE_HEADING with string "Synchronizing apps without migrations:" as an argument,
  return the length of self.content.
  substitute the result for new_migration.   writer is an instance of a class MigrationWriter, created with an argument new_migration.
  import module hashlib.
  from django.core.management.sql import sql_flush and emit_post_migrate_signal into default name space.
  return a tuple with an element self.__offset.
  call the function get_language, substitute the result for lang.
  derive the class BaseConfigurator from object base class.
  return boolean False.
  substitute cleaned_data for self.cleaned_data.
  and errors set to the result of self.default_error_messages.copy.
  from os import path into default name space.
  derive the class ObjectDoesNotExist from the Exception base class.
  if input_formats is not None,
  substitute val for the value under the cache_key key of the _format_cache dictionary.
  call the function exhaust with an argument field_stream.
  call the method parser.add_argument with 5 arguments: string '--noinput', action set to string 'store_false',
  raise a NotImplementedError with an argument string 'subclasses of Serializer must provide an handle_m2m_field() method'.
  from django.core.management.color import color_style into default name space.
  if not,
  for every fname in filelist,
  substitute template for self.template.
  get the value under the key key of the self.cookies dictionary, substitute max-age for 'max-age' key of the returned dictionary.
  try,
  append obj to self.deleted_objects list.
  call the function format_html with 3 arguments: string '<ul class="{0}">{1}</ul>', self.error_class and return value of the function,
  total_ordering decorator,
  convert new_name to a string and append it to string 'field', substitute the result for new_name.
  call the function time.sleep with argument integer 1.
  substitute self._regex for regex.
  "Use django.utils.timezone.get_fixed_timezone instead." and RemovedInDjango19Warning.   if offset is an instance of timedelta class,
  if auto_id is true and '%s' is contained in result of the call to the function smart_text with an argument auto_id,
  from importlib import import_module into default name space.
  update the self._catalog dictionary with other._catalog.
  if expanded_template is a directory,
  while current_len is smaller than or equal to length,
  if labels is not None,
  call get_str_from_wsgi function with self.environ, string 'HTTP_COOKIE' and empty string as arguments, substitute it for raw_cookie.
  replace '%s' in the string '%s %s' with response.status_code and response.reason_phrase, respectively, substitute it for status.
  from django.utils import six into default name space.
  call the function starttag_re.sub with 2 arguments: an empty string and html, substitute the result for html.
  raise an exception.
  compile the handle.read in mode 'exec' source is read from file pythonrc, execute the compiled script with imported_objects variables.
  call the add_arguments method with parser as argument form the base class of the class Command.
  for every dep in deps call the method apps.get_model with an argument dep, and append the result to the list, substitute it for deps.
  and unpacked dictionary kwargs.   if safe is true and data is not an instance of dict type.
  if six.PY3 is true and val1 and val2 are an instances of bytes,
  define the function gettext_noop with an argument message.
  return a dictionary with an entry: self.ns for "xmlns".
  if StandardError, renamed to e, exception is caught,
  open filename file in write mode, with the file descriptor renamed to outfile, perform,
  substitute smart_text for smart_unicode.
  define function dictvale, with an argument t.
  if field_type equals a string 'AutoField(',
  return msg.
  get the value under the 'content-disposition' key of the info dictionary, substitute it for content_disposition.
  sum version and delta together, return the result.
  try,
  define the method render with 2 arguments: self and context.
  from django.utils.encoding import force_st into default name space.
  return boolean True.
  define the method read with self class instance and size set to None as arguments.
  replace all the strings '\\' with '/' in the string name, use it as an argument for the call to the force_text function, return the result.
  call the method writer.as_string, substitute the result for migration_string.
  call the options.update method with an argument kwargs.
  call the method self.add_truncation_text with 2 arguments: an empty string and truncate, substitute it for truncate_text.
  if current_len is smaller than or equal to length,
  call the _caches.setdefault method with name and empty dictionary as arguments, substitute the result for self_cache.
  derive the class InclusionNode form the base class TagHelperNode.
  result of the function flatatt called with an argument final_attrs, return the result.   derive the class TextInput from the Input base class.
  if LookupError exception is caught,
  substitute result of the function urlparse with an argument ur1 for p1 and result of the function urlparse with an argument ur2 for p2.
  append command.xgettext_options to the list containing 10 elements: string 'xgettext', string '-d', domain, string '--language=C',
  define the method __getstate__ with an argument self.
  help is string 'Compiles .po files to .mo files for use with builtin gettext support.'.
  logger.disabled is boolean True.
  from django.utils.six.moves import xrange into default name space.
  substitute field for self.field.
  raise CommandError exception with "Cannot find a migration matching '%s' from app '%s'.",
  decorator function register.filter with an argument is_safe set to boolean True.
  post is a string '<could not parse>'.
  return self._urlconf_module.
  call the method self._isdst with an argument dt, use it as an key to get the value from the _time.tzname dictionary, return it.
  if fist and second element of sys.version_info equals to integer 3 and 2, respectively,
  substitute nodelist for self.nodelist.
  num_entries is length of filelist.
  if self.encoding exists substitute it for encoding, if not substitute settings.DEFAULT_CHARSET for encoding.
  call the function walk_to_end with 2 arguments: ch and pattern_iter.
  define the function do_filter with 2 arguments: parser and token.
  append e to infos list for every e in all_issues, if checks.INFO is lesser or equal to e.level,
  called with an argument path,   substitute path for locale_dir.
  raise an TemplateSyntaxError exception with an argument error_msg.
  if value is contained in self.empty_values,
  try,
  return tempdir.
  derive the class EmailInput from the TextInput base class.
  if call to the method response.has_header with string 'Cache-Control' as an argument returns boolean True,
  must be 'as'", where '%s' is replaced with function_name.   substitute last element of bits for target_var.
  return boolean True.
  if DatabaseError or IntegrityError, renamed to e, exceptions are caught,
  join app_config.path and string 'templates' into file path, substitute it for template_dir.
  kwargs is an dictionary, populated for every k and v in result of the method self.kwargs.items with:
  return value.
  if value under the 'daemonize' of options dictionary is None,
  return FILE_INPUT_CONTRADICTION.
  define the function get_default_timezone.
  substitute DateInput for widget.
  if self.forms is true,
  return an instance of EscapeText, created with an argument s.
  import module os.
  size, charset, content_type_extra.   substitute field_name for self.field_name.
  define the method __iter__ with argument self.
  if ch equal a string '(',
  and include_auto_created set to boolean True,   call the method connection.creation.sql_destroy_indexes_for_model with arguments model and style, extend the output with the result.
  self.id_for_label is true,
  get the value under the 'charset' key of content_params dictionary, substitute it for self.encoding.
  if mimetype is None,
  from __future__ import unicode_literals into default name space.
  default set to boolean False and help  set to string 'Tells Django to stop running the test suite after first failed test.'.   call the method parser.add_argument with 4 arguments: string '--testrunner', action set to string 'store', dest set to 'testrunner',
  if self.first is true,
  if not,
  from django.conf import settings into default name space.
  define the method __init__ with 6 arguments: self, name, old_mod, new_mod, old_attr set to None, new_attr set to None.
  raise a CommandError exception with an argument:
  from django.utils.translation import get_language to the default name space.
  add self.form.required_css_class to extra_classes set.
  call the method self.create_token with 2 arguments bit and in_tag, append the result to result.
  append idstring to the '.' character, substitute it for idstring.
  if self._populated is false,
  define the method __repr__ with argument self.
  define the protected method _base_set with 4 arguments, self class instance, key, value and timeout set to DEFAULT_TIMEOUT.
  call the method router.db_for_write with argument self.cache_model_class, substitute the result for db.
  try,
  derive the class LocalTimezone from the tzinfo base class.
  substitute line for buffer_.
  if app_path is None,
  try,
  "No file was submitted. Check the encoding type on the form." for 'invalid', return value of the function _ called with an argument,   string "No file was submitted." for 'missing', return value of the function _ called with an argument "The submitted file is empty.",   for 'empty', return value of the function ungettext_lazy called with 3 arguments:   string 'Ensure this filename has at most %(max)d character (it has %(length)d).',   string 'Ensure this filename has at most %(max)d characters (it has %(length)d).' and string 'max' for 'max_length',   and return value of the function _ called with an argument string,   'Please either submit a file or check the clear checkbox, not both.' for 'contradiction'.   define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  import module sys.
  call the function blankout with 2 arguments: t.contents and 'X', write the result to out.
  from importlib import import_module.
  if six.PY3 is true,
  return an empty string.
  result is an empty list.
  define the function format with 2 arguments self and formatstr.
  try,
  update self.tags dictionary with lib.tags.
  if option_value is None,
  substitute CheckboxFieldRenderer for renderer.
  call the function smart_text with argument key_value, use the result as an argument for the call to the self.xml.characters method.
  import module locale.
  if source is an instance of inst class,
  define the method __getitem__ with arguments self and name.
  raise an CommandError with an argument string "More than one migration matches '%s' in app '%s'. Please be more specific.",
  name for base_name, top_dir for base_directory and docs_version for 'docs_version' and autoescape set to boolean False.   from django.conf import settings into a default name space,
  if nofollow is true nofollow_attr is a string ' rel="nofollow"', otherwise nofollow_attr is an empty string.
  where '%d' is replaced with i and '%s' is replaced with subject.   increment i by integer 1,
  if self.connection is None,
  substitute new_name, without the last 3 elements for new_name.
  if self.cmd has an attribute 'missing_args_message' and next statement is not true: args is true or any arg doesnt start with '-' for arg in args,
  substitute self.current_token for t.
  evaluate the method connection.introspection.table_name_converter with model._meta.db_table as argument, append it to tables.
  define the method _prepare_data with 2 arguments: self and data.
  endless loop,
  substitute EscapeBytes for EscapeString.
  year_field is a string '%s_year'.
  if not,
  if not,
  get the value under the name key of the self.initial dictionary, if it exists substitute it for initial_value,
  from __future__ import unicode_literals into default name space.
  from django.core.management import call_command into default name space.
  if fifth and sixth elements of row are None,
  if ValueError exception is caught,
  import module os.
  call the method self.get_resolved_arguments with an argument context, substitute the result for resolved_args and resolved_kwargs.
  _empty_value is None.
  call the the method __copy__ from the base class of the class Context, substitute the result for duplicate.
  if settings.MANAGERS does not exist,
  call the method formats.number_format with 2 arguments, d converted to a integer and then to string, and integer 0,
  substitute value under the cache_key key of the _format_cache dictionary for cached.
  if not,
  call the __init__ method from the base class of the HttpResponseNotModified class, called with arguments: unpacked list args,
  value under the all_label key of the directory_created dictionary is boolean True.
  call the method parser.add_argument with an argument string '--pythonpath'.
  substitute instance for self.instance.
  convert data to string, substitute it for data.
  define the method display with an argument self.
  define the method negate with an argument self.
  and third element of result of the function sys.exc_info.   call the function import_module with an argument module_path, substitute the result for module.
  break the execution of the smallest enclosing loop.
  substitute '%s' in string '%s-%s-%s' with y,m and d, return the result.
  if middle starts with opening,
  if response is None,
  call the function _curried_func with 2 arguments: list moreargs appended to args and unpacked,
  call the method self.extend_nodelist with 3 arguments: nodelist, compiled_result and token.
  from django.utils.encoding import force_unicode.
  iterator is None.
  convert self.changed_data into boolean, return it.
  get _iteritems attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable,
  import module errno.
  call the __init__ method from the base class of the class TemplateResponse, with 4 arguments: template, context, content_type, status.
  substitute first element of to_digits for res.
  substitute _iteritems for iteritems.
  validate_slug is a instance of a RegexValidator class, created with 3 arguments: slug_re, return value of the call to the function,
  locales is relative complement of set exclude in set locales.
  define the method render with 2 arguments: self and context.
  return an instance of a class ResolverMatch created with 6 arguments: sub_match.func, sub_match.args, sub_match_dict,
  kwargs is a dictionary with an entry: attribute 'label' of the object under the name key of the form.fields dictionary for 'label',
  substitute connection.features.test_db_allows_multiple_connections for use_threading.
  substitute fields for new_class.base_fields.
  substitute _BROWSERS_DEPRECATED_LOCALES for _DJANGO_DEPRECATED_LOCALES.
  get the value under the 'primary_keys' key of the options dictionary, substitute the result for pks.
  write the result to self.stdout.   for every operation in migration.operations,
  call the method msgs.decode with an argument string 'utf-8', substitute it for msgs.
  endless loop,
  raise an ValueError with an argument string "Invalid timezone: %r", substitute '%r' with timezone.
  use the result as the argument for the call to the sql.extend method.   call the connection.creation.sql_for_pending_references method with refto, no_style() and pending_references as arguments,
  if compare_to is not equal to value under the self key of state_frame.
  call the method self.var2.resolve with 2 arguments: context and boolean True, substitute the result for val2.
  do nothing.
  call the method tag_re.finditer with an argument self.template_string, for every match in result,
  for every node_app and node_name in migration.branch,
  define the function reloader_thread.
  define the function delete_many with self, keys and version set to None as arguments.
  return lookup_view
  define the function split_domain_port with an argument host.
  join elements of output into a string, separated with newline character,
  if self.keep_pot is false,
  call the function io.open with 3 arguments: self.dirpath and thefile joined into a file path, string 'w',
  if not,
  call the method validate with an argument value, from the base class of the FloatField class.
  make a directory top_dir.
  get the values under the 'app_label' and 'migration_name' keys of the options dictionary,
  import memcache.
  from django.core.mail.utils import DNS_NAME into default name space.
  for every label in app_labels,
  call the method m.groupdict, substitute the result for d.
  from django.utils.regex_helper import normalize into default name space.
  substitute node for bit.
  call the function import_module with an argument path, substitute it for package.
  for every e in etags call the method e.encode with an argument string 'ascii', call the method decode on the result with an argument,
  field.attname of the data dictionary.   if not,
  call the method UnicodeDecodeError.__str__, with self as the argument, substitute the result for original.
  try,
  for every message in messages,
  derive the class Operator from the base class TokenBase.
  from inspect import getargspec and getcallargs into default name space.
  content.setter decorator,
  call the method self.configure_custom with an argument config, substitute the result for result.
  where '%s' is replaced with fixture_name, and RuntimeWarning.   decorator method lru_cache.lru_cache with an argument maxsize set to None.
  import module warnings.
  substitute exc for self.settings_exception,
  define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  delete the first element of self.tokens.
  msg is a string "Could not decode base64 data: %r", where '%r' is replace with e.
  try,
  from django.core.serializers.python import Serializer as PythonSerializer into default name space.
  return default.
  if arg is an instance of unicode,
  if domain is true,
  if r ends with string '+00:00',
  call the connection.creation.sql_for_pending_references method with refto, no_style() and pending_references as arguments,
  call the method form.instance._get_unique_checks with an argument exclude as exclude, substitute the result for unique_checks,  and date_checks, respectively.
  if cls is false,
  call the function new_method_proxy with an argument bool, substitute the result for __bool__.
  convert self.object_list to a list.
  from logging import NullHandler.
  if any exception is caught,
  call the function normalize with an argument p_pattern, substitute the result for bits.
  substitute the value under the ns key of the resolver.namespace_dict dictionary for extra and resolver, respectively.
  call the function func with 2 arguments: unpacked list args and unpacked dictionary kwargs,
  if candidate is not an instance of six.string_types,
  import module glob.
  substitute the result for plural_form_line.   if self.verbosity is greater than integer 1,
  if OSError exception is caught,
  call the method self.__cast, return the hash value of the result.
  if count of occurrence of '.' in ip_str is equal to integer 3,
  substitute settings.TEMPLATE_STRING_IF_INVALID for current.
  call the function io.open with 3 arguments: django_po, string 'r' and encoding set to string 'utf-8' as arguments,
  call the method parser.add_argument with 2 arguments: string 'app_label',
  call the method datetime_safe.new_datetime with an argument date, substitute the result for date.
  where '%s' is replaced with first element of bits.   substitute second element for bits for block_name.
  week_number is None.
  define the method get with 3 arguments: self, key and default set to None.
  import module re.
  substitute first element of nonlocal_root for root.
  return maybe.
  derive the class TemplateCommand from the BaseCommand base class.
  substitute text_kwargs for candidate_subs.
  define the function check_for_language with an argument lang_code.
  append string '</select>' to output.
  if rhs is an instance of dict type and number is true,
  derive the class lazy_property from the property base class.
  substitute the result for name.   call the function __import__ with an argument name.
  call the method __getitem__ with an argument key from the base class of the class DictWrapper, substitute the result for value.
  perform the previous for every combo in result of the function product called with 3 arguments: databases, ser_fmts and cmp_fmts,   substitute the result for suffixes.   join fixture_name and suffix into a string, separated by '.' for every suffix in suffixes, put the results in set, substitute it for targets.
  define the method initial_forms with an argument self.
  call the method self._add_local_translations.
  output is an empty list.
  requires_system_checks is boolean False.
  from django.db import connections, transaction, router and DatabaseError into default name space.
  if not,
  if s is not an instance of the object six.string_types,
  and unpacked dictionary kwargs.   substitute max_length and min_length for self.max_length for self.min_length.
  from django.utils._os import upath into default name space.
  substitute length and mime_type for self.length and self.mime_type.
  call the function os.path.abspath with an argument 'locale', append the result to self.locale_paths.
  call the function self._key_to_file with key and version as arguments, use the result as an argument for the call to the self._delete method.
  for every child in node.childNodes,
  substitute message.error_list for message.
  define the function do_for with 2 arguments: parser and token.
  FIELD is a field".
  with 2 arguments: self.prog_name and first element of options.args.   otherwise if subcommand equals a string 'version' or self.argv, without the first element equals a list containing a string '--version'
  if not,
  from django.core.exceptions import ValidationError into default name space.
  substitute Lexer and Parser for lexer_class and parser_class.
  call the method self.setlist with 2 arguments: k and v.
  otherwise, if first and the last character of attrvalue are '\' charter  or first and last character of attrvalue are '"' character,
  try,
  call the method form.save with an argument commit as commit, return the result.
  if arg is not string 'on' or 'off',
  call the function termcolors.parse_color_setting with DJANGO_COLORS as an argument, assign the result to color_settings.
  open the file self.name in mode or self.mode mode, whichever exists, assign the file handler to self.file.
  if ValueError exception is caught,
  try,
  try,
  call the function force_bytes with arguments k and self.encoding, substitute the result for k.
  define the method indent with argument self and level.
  define the method _get_closed with argument self.
  convert elements of error into a list, substitute the first element for message.
  call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 2 entries:
  call the method self.error with 2 arguments: token and string "Empty variable tag", return the result.
  self.loaded_object_count is integer 0.
  and 'request with value request, respectively use the previous as the arguments for the call to the logger.warning function.   if settings.DEBUG is True,
  raise an ValueError with an argument string "'%s.%s' has no field named '%s'.", where '%s' is replaced with,
  call the function _add_doc with 2 arguments: reraise and string """Reraise an exception.""".
  define the method __getitem__ with arguments self and index.
  call the object Decimal with string '1' as an argument, divide it by 10, bring the result to the power of self.decimal_places,
  filenames is an empty list.
  if leading is true,
  call the msg.attach with an argument body_msg.
  use the result as an argument for the call to the add_move function.   call the function MovedModule with 2 arguments: strings "_thread" and "thread",
  join self.dirpath and self.file into a file path, return it.
  if password is None substitute settings.EMAIL_HOST_PASSWORD for self.username, if not substitute password for self.password.
  neg is integer 1.
  define the messages with an argument self.
  call the method node.clone, substitute the result for klass.
  define the method render with 4 arguments: self, name, value and attrs set to None.
  string "%s already exists, overlaying a project or app into an existing directory won't replace conflicting files",   where '%s" is replaced with new_path.   open old_path file in 'rb' mode, with file descriptor renamed to template_file,
  'EmailField', 'FileField', 'ImageField', 'URLField', 'BooleanField', 'NullBooleanField', 'ChoiceField', 'MultipleChoiceField',   'ComboField', 'MultiValueField', 'FloatField', 'DecimalField', 'SplitDateTimeField', 'IPAddressField', 'GenericIPAddressField',   'FilePathField', 'SlugField', 'TypedChoiceField', 'TypedMultipleChoiceField'.   derive the class Field from the base class object.
  define the method message with argument self.
  return the result.   derive the class HiddenInput from the Input base class.
  try,
  return ip_str.
  i is integer 0.
  if KeyError exception is caught,
  substitute Paginator for QuerySetPaginator.
  for every template_name in template_name_list,
  append the result to app_dirs.   join app_dir and string 'models/sql' into a file path, use the result as an argument for the call to the function os.path.normpath,
  substitute first element of base64d for base64d.
  if path is None,
  call the function six.reraise with 3 arguments: ValidationError, ValidationError created with 2 arguments:
  define the function humanize with an argument dirname.
  get the type of the self object, on the result call the __bool__ method with an argument self, return the result.
  take a tuple with 2 elements: boolean False and method resolve called with an empty dictionary on the instance of Variable class,
  if self.can_order is true,
  replace '%s' in string '</%s>' with tag, append the result to out.
  contextlib.contextmanager decorator,
  from __future__ import unicode_literals into default name space.
  substitute model._meta for opts.
  substitute return value of call to the function _set_response_etag with response as an argument, for response.
  call the method n.getElementsByTagName with string 'natural' as argument, substitute result for keys.
  define the method id_for_label with 2 arguments: self and id.
  if base.DeserializationError exception is caught,
  define the method split_contents with an argument self.
  define the function clear_script_prefix.
  substitute boolean False for ignore.   for every d in object_list,
  do nothing.
  from django.utils import six and lru_cache into default name space.
  if not,
  where '%s' is replaced with result of the method self.current_token.display.   return retval.
  return integer 0.
  get the value 'reset_sequences' key of the options dictionary, if it exists substitute it for reset_sequences, otherwise reset_sequences is boolean True.
  get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
  get name attribute from the instance object, call it with an argument value and return the result.
  if not,
  decorator function wraps with an argument fdel.
  if autoescape is true,
  do nothing.
  return an empty dictionary.
  from datetime import date as real_date and datetime as real_datetime into default name space.
  return an instance of TemplateSyntaxError class with an argument msg.
  use the result as an argument for the call to the upath function, for every d in dirs, append the results into a list,   substitute the resulting list for dirs.   return dirs.
  if bytes is smaller than KB,
  if django_po file path exists,
  if p2.scheme, p2.hostname and p2.port equals p1.scheme, p1.hostname and p1.port, respectively, return boolean True, otherwise return boolean False.
  try,
  substitute settings.DEFAULT_CHARSET for self._charset.
  sum lead and opening, substitute the result for lead.
  substitute SplitDateTimeWidget for widget.
  call the function force_str with an argument: default if it is true, or if not, first element of the result of the function,
  raise an ImproperlyConfigured exception with argument string 'Path for saving emails is invalid: %r', replace '%r' with self.file_path.
  if return value of function response.has_header with string 'Vary' as argument is boolean False,
  and '8' for 'conceal'.   define the method colorize with 3 arguments: text set to an empty string, opts set to an empty tuple and unpacked dictionary kwargs.
  if self.merge and conflicts are both true,
  decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
  if content has an 'chunks' attribute,
  call the function new_method_proxy with an argument operator.contains, substitute the result for __contains__.
  call the method form.add_prefix with an argument self, substitute the result for self.html_name.
  substitute list containing element self for self.error_list.
  from django.core.servers.fastcgi import runfastcgi into default namespace.
  otherwise ser_fmts is a list containing ser_fmt.   if self.verbosity is greater or equal to integer 2,
  if prefix doesnt end with character '/',
  define the function do_block with 2 arguments parser and token.
  if test_runner_class has an 'option_list' attribute,
  if name is contained in lib.filters.
  if ValidationError renamed to e, exception is caught,
  call the method self.resolve with an argument value, return the result.
  return output.
  return boolean True.
  call the method handler.startElement with 2 arguments: string 'feed' and result of the method self.root_attributes.
  from django.utils.module_loading import import_string into default name space.
  if OSError, renamed to e, exception is caught,
  substitute the result for tag.   if tag is false or current_len is greater or equal to truncate_len,
  define the function calculate_app_template_dirs.
  context.autoescape for 'autoescape', context.autoescape for 'current_app', context.use_l10n for 'use_l10n',   and context.use_tz for 'use_tz', substitute the result for new_context.   call the function context.get with 2 argument 'csrf_token' and None, substitute the result for csrf_token.
  take two characters from the i-th element of rawdata, if they are not equal to the string '</',
  join statements in a string separated by newline, return the result.
  join return value of the function six.text_type called with an argument self.management_form and forms into a string,
  define the function debug with an argument request.
  call the method template.render with an argument context, substitute the result for content.
  msg_count is an integer 0.
  define function dictitem with s as an argument.
  call the method keyword.iskeyword with an argument new_name, if it evaluates to true,
  return a dictionary with 2 elements: self._version for "version" and "http://www.w3.org/2005/Atom" for "xmlns:atom".
  call the options.get method with string 'MAX_ENTRIES' and integer 300 as arguments, use the string 'max_entries' and previous result as the arguments for the call to the params.get method, substitute the result for max_entries.
  call the method boundary.encode with an argument string 'ascii', substitute the result for boundary.
  define the method getvalue with an argument self.
  return instance.
  try,
  call the method self.set_cookie with 5 arguments: key, max_age as integer 0, path as path, domain as domain,
  call the function timezone.make_naive with 2 arguments value, current_timezone, return the result.
  try,
  return default.
  upto is integer 0.
  if self.urlconf_name is an instance of a list type and its length is not zero.
  increment num_sent by one.
  if the value of the kwargs dictionary under the key k is not equal to v,
  if expires is lesser than now,
  return self.__name.
  substitute the result for value under the 'clear_checkbox_id' key of the substitutions dictionary.   call the method render from the instance of CheckboxInput class, with 3 arguments: checkbox_name, boolean False,
  call the function smart_text with an argument obj, return the result.
  if script_url is false,
  extra is an dictionary with two pairs of elements 'status_code' with value 500, and 'request with value request,   respectively use the previous as the arguments for the call to the logger.error function.   if settings.DEBUG is True,
  if not,
  if AttributeError exception is caught,
  if vale is None or an empty string,
  get type of self, call it and substitute the result for result.
  call the function blankout with 2 arguments: t.contents and 'B', write the result to out.
  def _get_post method with self class instance as the argument.
  call the method self.attrs.copy, substitute the result for obj.attrs.
  call the encode function on the Header class instance, created with argument val, substitute the result for val.
  derive the class RadioChoiceInput from the ChoiceInput base class.
  if LookupError exception is caught,
  inverse_match set to None and flags set to None.   if regex is not None,
  weight is an integer 0.
  call the method __init__ with 2 arguments: self.states and string 'reg' from the base class of the class JsLexer.
  call the method self.copy, return the result.
  call the function force_text with an argument v, for every v in selected_choices, add results to a set,
  created_models is a set.
  import module codecs.
  append e to debugs list for every e in all_issues, if e.level is lesser than checks.INFO and result of the method e.is_silenced in false.
  get the value under the 'dry_run' key of the options dictionary, if the key exists substitute it for self.dry_run,
  if sep is None,
  if args and kwargs are both true,
  if cc is not an six.string_types instance raise an error with message string '"cc" argument must be a list or tuple'.
  if string ':::' is contained in ip_str,
  if upto is not equal to start.
  raise an exception.
  with the result renamed to fp, perform the following:   write msgs to fp.
  if IndexError exception is caught,
  write the string "  Installing custom SQL...\n" to the standard output.
  return ip_str.
  if ImportError exception is caught,
  if obj.pk is None, and Model has an 'natural_key' attribute, and Model._default_manager has and 'get_by_natural_key',
  import module argparse.
   if self.initial is true and 'initial' key is not contained in kwargs,
  return boolean True.
  message_context is None.
  substitute self._rollback for rollback.
  call the function exc_type with an argument string "Unsupported value: %r. You should install pytz.", replace '%s' with dt,
  call the function os.path.basename with an argument fixture_file, use the result as an argument for the call to the method,
  break from this loop execution.
  import module itertools.
  raise an exception StopFutureHandlers.
  from django.core import serializers into default name space.
  try,
  called with 3 arguments: raw string '[^a-zA-Z0-9]', empty string and result of the method table_name.title.   strip_prefix is a lambda function with an argument s, return value is s without the first element if s starts with string 'u'',
  if self._dir file path does not exists,
  remove the entry under the 'fields' key of the self.json_kwargs dictionary.
  e is an instance of TemplateSyntaxError class, created with an argument msg.
  if value is an instance of datetime.datetime,
  append bit to trans_bit.
  define the method __setitem__ with 3 arguments: self, key and value.
  finally perform,
  call the method self.read_limited with length of self.buffer subtracted from size as argument, add result to self.buffer, store it in result.
  call the method self._cache.get_multi with argument new_keys, substitute the result for ret.
  if s is an instance of object bytes,
  ORDERING_FIELD_NAME is a string 'ORDER'.
  call the field.to_python method with field_value, substitute the result for field.name key of the data dictionary.
  for every handler in settings.FILE_UPLOAD_HANDLERS,
  define the function _replace_entity with an argument match.
  from django.core.management.base import CommandError into default name space.
  substitute initial for initial_value, if initial is not None, if not, initial_value is an empty string.
  call the method self.save_new with 2 arguments: form and commit as commit, append the result to self.new_objects.
  get the attribute '__module__' from the getattr, if it exists substitute it for m, if not, m is None.
  define the method __init__ with arguments self and regex.
  try,
  join self._container elements into a string, return it.
  if StopIteration exception,
  call the method popitem from the base class of the class QueryDict, return the result.
  call the method signing.get_cookie_signer with an argument salt set to sum of key and salt, call the method unsign on the result,
  return week_number.
  define the method __getitem__ with 2 arguments: self and key.
  call the self.user_regex.match method with an argument user_part, if it evaluates to false,
  derive the class Command from the BaseCommand base class.
  if errors is True,
  take subject elements from p-th to i-th index, substitute it for s.
  self._read_started is True.
  do nothing.
  if literal_match is true,
  substitute '%s' in string '%s_%s' with id_ and first_select, return it.
  if six.PY2 is true,
  define the function Deserializer with arguments object_list and unpacked dictionary options.
  call the self.stdout.write method with string "    Installing custom SQL for %s.%s model\n" as argument,
  otherwise if '=' is contained in part,
  raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to 'required'.
  call the function conditional_escape with an argument checkbox_name,
  fp is a instance of a class six.BytesIO.
  derive class Command from the BaseCommand base class.
  call the method self.make_key with key and version set to version as arguments, substitute it for key.
  for every app in sorted return value of the commands_dict.keys function,
  otherwise if basetype equals a string 'message' and subtype equals a string 'rfc822',
  import module sys.
  raise an TemplateSyntaxError with an argument string 'Unknown argument for %r tag: %r.', where '%r' is replaced with first element of bits and options.
  if Exception exception is caught,
  if use_ssl is None substitute settings.EMAIL_USE_SSL for self.username, if not substitute use_ssl for self.use_ssl.
  derive the class ManagementForm from the Form base class.
  call the method self.write_migration_files with an argument changes.
  raise an AttributeError exception with an argument string "You cannot set content to a 304 (Not Modified) response".
  call the color_style function, substitute the result for style.
  if config_string is false,
  raise an exception.
  delete the entry of self.cleaned_data dictionary under the key field.
  if httponly is true,
  call the command.execute method with arguments: unpacked list args and unpacked dictionary defaults, return the result.
  call the function find_template_loader with an argument loader, append the result to cached_loaders.
  if ValueError exception is caught,
  call the function re.compile with 2 arguments, string '^%s/', where '%s' is replaced with language_code and re.UNICODE, substitute the result for regex_compiled.
  call the method datetime_safe.new_date with an argument value, substitute the result for value.
  for model in router.get_migratable_models method return value, called with 3 arguments: app_config, connection.alias,
  if character '@' is contained in addr,
  if pofile path exists,
  define the method non_form_errors with an argument self.
  call the function pformat with an argument sys.modules, append the result for output.
  substitute settings.FORMAT_MODULE_PATH for settings.FORMAT_MODULE_PATH.
  yield one element from the buffer_ iterable.
  for every i and widget in enumerated iterable self.widgets, call the function widget.value_from_datadict with 3 arguments: data,
  if context is an instance of Context,
  define the function code_changed.
  return _default.
  with the result renamed to fp, perform the following:   call the method fp.read, substitute the result for src_data.
  define the function widthratio with 2 arguments: parser and token.
  msg is a string "Execution of %s failed: %s", with '%s' replaced by self.program and errors.
  where '%s' is replaced with app_or_project and extra_files joined into a string, separated by a string ', '.   append string '_name' to app_or_project, substitute it for base_name.
  assign the handle to stream.   old_field_name is None.
  call the method match.group with an argument integer 1, substitute the result for text.
  return nothing.
  append boundary to bytes string '--', substitute the result for self._separator.
  value under '_data' key of obj_dict is a dictionary created with tuples containing 2 elements: k and result of the function,
  raise an base.DeserializationError exception with an argument string "Invalid model identifier: '%s'", where '%s' is replaced with model_identifier.
  if self.is_bound is false,
  call the function mark_safe with an arguments: for every n in nodelist results of the function force_text called with an argument n,  joined in a string, return the result.
  if ValueError exception is caught,
  increment weight by integer 2.
  dest set to string 'no_color' default set to boolean False and help set to a string "Don't colorize the command output.".   for every opt in self.option_list,
  from django.utils.http import urlquote into default name space.
  if length of hextet is greater than integer 1,
  split settings.SETTINGS_MODULE by '.' character, substitute the first element of the result for project_name.
  define the method strptime with arguments self, value and format.
  try,
  call the function force_text with an argument text, substitute the result for input_val.
  call the method self.value.resolve with 2 arguments context and ignore_failures set to boolean True, return the result.
  return a string '%02d' formated with the result of the function self.G.
  return an string '<ExtendsNode: extends %s>', where '%s' is replaced with self.parent_name.token.
  return val.
  if six.PY2 is true,
  define the function pretty_name with an argument name.
  if not,
  do nothing.
  raise an EntitiesForbidden exception with arguments name, value, base, sysid, pubid and notation_name.
  replace '%s' in string "Running pre-migrate handlers for application %s" with app_config.label, print it to the standard output.
  app_list is an instance of a class OrderedDict.
  join root and f into a file, substitute it for f.
  try,
  and returns x striped of the surrounding whitespaces, extend the extra_files with the mapped list.   if self.verbosity is greater or equal to integer 2,
  skip this loop iteration.
  if any w.needs_multipart_form for every w in self.widgets is true, return boolean True, if not return boolean False.
  call the function six.text_type with s, encoding and errors as the arguments, substitute the result for s.
  call the method Module_six_moves_urllib_request with an argument: string ".moves.urllib_parse" appended to __name__,
  re.U and re.S, substitute the result for re_words.   call the function re.compile with 2 arguments: raw string '<.*?>|(.)' and bitwise OR performed with 2 operands,
  otherwise if template_tuple is None,
  to the negative length of the dir_suffix as the end index and append it to a list,   if p doesnt end with dir_suffix, append p to a list, substitute resulting list for norm_patterns.   all_files is an empty list.
  import module gzip.
  from django.utils._os import safe_join into default name space.
  if text is true format with it and RESET a string '%s\x1b[%sm', if not format it with an empty string and RESET, substitute the result for text.
  call the method token.split_contents, substitute the result for bits.
  delete logging._handlerList list.
  define the method usage with 2 argument: self and subcommand.
  substitute args for self.args.
  substitute new_mod for self.mod.
  substitute length of tokens for l.
  substitute _ for ret.
  from django.core.mail.message import sanitize_address into default name space.
  get 'editable' attribute from object f, if it doesnt exists or its true,
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  return t.
  define the method encoding with an argument self.
  substitute file.name for filename.
  substitute silent for self.silent.
  chunks is a tuple containing 6 initial tuples:
  if jan1_weekday equals integer 5, or if jan1_weekday equals integer 6 and call to the function calendar.isleap,
  define the method initial_form_count with an argument self.
  try,
  for every bit in bits.   register.tag decorator function with an argument 'for',
  from __future__ import unicode_literals into default name space.
  forms_valid is True.
  if auto_id is true and 'id' is not contained in attrs and 'id' is not contained in widget.attrs,
  if not,
  name appended to string '_', as the name of the attribute to get from self object, or if the previous doesnt exist, None.   append name to 'add_' use it as the name of the attribute to get from combined object , call the result with an argument:
  return an empty dictionary.
  convert ip_str to lowercase, if it doesnt start with a string '0000:0000:0000:0000:0000:ffff:',
  define initialization method __init__ with self class instance, unpacked list args, unpacked dictionary kwargs as arguments.
  if iterable is true, otherwise use an empty list as an argument.   define the method add with 2 arguments: self and item.
  call the function from_current_timezone with an argument, return the result.
  if field.rel.to._meta.pk.rel is true,
  define the function check_for_migrations with 2 arguments: app_config and connection.
  return value.
  define the method __init__ with an argument self.
  if size is None or size is greater than self.remaining,
  yield obj as generator return value,
  define the method add_arguments with self and parser as arguments.
  call the method self.create_token with 3 arguments: last_bit, tuple with 2 elements: upto and sum of upto and length of last_bit,
  if OSError, renamed to e, is caught,
  substitute '%s' in string '<%s: %s>' with self.__class__.__name__ and self, if exists, or string 'None' if it doesnt, return it.
  if cc contains item 'public' and kwargs contains item 'private',
  'in favor of "requires_system_checks".' and RemovedInDjango19Warning.   if has_old_option and has_new_option are both true,
  try,
  self.plural is an lambda function with an argument n, which returns result of boolean expression n not equal to integer 1,
  call the method states.items, for every state and rules in the result,
  define the function int_to_base36 with an argument i.
  where '%s' is replaced with value under the 'addrport' key of the options dictionary.   call the method m.groups, assign the result to self.addr, _ipv4, _ipv6, _fqdn and self.port, respectively.
  call the self.compile_messages with locations as argument,
  of the obj object, append the results in a list, substitute it for value under the field.name key of the self._current dictionary.   define the method getvalue with an argument self.
  define the method __hash__ with an argument self.
  create the Singer class with 2 arguments: key appended to string 'django.http.cookies' and salt set to salt, return it.
  import module os.
  if default is true and RAISE_ERROR is false,
  derive the class CacheHandler from the object base class.
  self.lineno is integer 1.
  define the method set with 5 arguments, self, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
  if self.allow_multiple_selected is false,
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  return a class instance FilterNode, called with an arguments filter_expr and nodelist.
  return self._queryset.
  if cmatch is true,
  if self._cull_frequency equals to integer 0.
  try,
  define the function get_digit with 2 arguments value and arg.
  append self.msgattrib_options to a list containing string 'msgattrib', append to it a list containing string '-o', pofile and pofile,
  code set to an string 'invalid_choice' and dictionary params with an entry: val for 'value'.   define the method _has_changed with arguments self, initial and data.
  substitute node.source for e.django_template_source.
  call the method msgs.decode with an argument string 'utf-8', substitute the result for msgs.
  raise an TypeError exception with an argument string "invalid keyword arguments to print()".
  if t is not None,
  try,
  call the resolver.resolve_error_handler with integer 500 as the argument, assign the resulting tuple elements to the callback,
  raise an TemplateSyntaxError exception with an argument string "widthratio final argument must be a number".
  from django.conf import settings into default name space.
  call the function _get_model with an argument value under the 'model' key of the d dictionary, substitute the result for Model.
  call the method __init__ from the base class of the TemporaryUploadedFile class with arguments: file, name, content_type, size, charset and content_type_extra.
  define the function __init__ with 3 arguments: self, token and parser.
  if ttl is not None,
  return self.file.name.
  create directories from the elements in filename.
  if ValueError exception is caught,
  property decorator.
  define the function _checkLevel with an argument level.
  if f.unique is true, substitute "UNIQUE " for unique, otherwise unique is an empty string.
  'PROCESSING' for 102, 'OK' for 200, 'CREATED' for 201, 'ACCEPTED' for 202, 'NON-AUTHORITATIVE INFORMATION' for 203,   'NO CONTENT' for 204, 'RESET CONTENT' for 205, 'PARTIAL CONTENT' for 206, 'MULTI-STATUS' for 207, 'ALREADY REPORTED' for 208,   'IM USED' for 226, 'MULTIPLE CHOICES' for 300, 'MOVED PERMANENTLY' for 301, 'FOUND' for 302, 'SEE OTHER' for 303,   'NOT MODIFIED' for 304, 'USE PROXY' for 305, 'RESERVED' for 306, 'TEMPORARY REDIRECT' for 307, 'PERMANENT REDIRECT' for 308,   'BAD REQUEST' for 400, 'UNAUTHORIZED' for 401, 'PAYMENT REQUIRED' for 402, 'FORBIDDEN' for 403, 'NOT FOUND' for 404,   'METHOD NOT ALLOWED' for 405, 'NOT ACCEPTABLE' for 406, 'PROXY AUTHENTICATION REQUIRED' for 407, 'REQUEST TIMEOUT' for 408,   'CONFLICT' for 409, 'GONE' for 410, 'LENGTH REQUIRED' for 411, 'PRECONDITION FAILED' for 412, 'REQUEST ENTITY TOO LARGE' for 413,   'REQUEST-URI TOO LONG' for 414, 'UNSUPPORTED MEDIA TYPE' for 415, 'REQUESTED RANGE NOT SATISFIABLE' for 416,   'EXPECTATION FAILED' for 417, 'I'M A TEAPOT' for 418, 'UNPROCESSABLE ENTITY' for 422, 'LOCKED' for 423, 'FAILED DEPENDENCY' for 424,   'UPGRADE REQUIRED' for 426, 'PRECONDITION REQUIRED' for 428, 'TOO MANY REQUESTS' for 429, 'REQUEST HEADER FIELDS TOO LARGE' for 431,   'INTERNAL SERVER ERROR' for 500, 'NOT IMPLEMENTED' for 501, 'BAD GATEWAY' for 502, 'SERVICE UNAVAILABLE' for 503,   'GATEWAY TIMEOUT' for 504, 'HTTP VERSION NOT SUPPORTED' for 505, 'VARIANT ALSO NEGOTIATES' for 506, 'INSUFFICIENT STORAGE' for 507,   'LOOP DETECTED' for 508, 'NOT EXTENDED' for 510 and 'NETWORK AUTHENTICATION REQUIRED' for 511.   derive the class BadHeaderError from the ValueError base class.
  call the method self.add_error with 2 arguments: None and errors.
  from django.core import signals into default name space.
  ctx is an hashlib object, for calculating hash function with md5 algorithm.
  substitute self.handle_app for handle_app.
  open the file fn in read mode, with file descriptor as f,
  register.tag decorator,
  remove config dictionary element under 'level' key, if it exists substitute it for level, if not, level is None.
  status_code is an integer 500.
  define the method merge with 2 arguments self and other.
  if not,
  and unpacked dictionary kwargs.   define the method clean with 2 arguments: self and value.
  for every w in self.widgets,
  define the method __repr__ with argument self.
  and version set to result of the method self.get_version.   call the method parser.add_option with 8 arguments: string '-v', string '--verbosity', action set to string 'store',
  call the force_str function with an argument value, substitute the result for value.
  call the method self.appendlist with 2 arguments: return value of the function force_text with 3 arguments:
  call the functoin callback with an argument self.
  raise an ImproperlyConfigured exception with an argument string "Creating a ModelForm without either the 'fields' attribute,
  from django.test.utils import get_runner into default name space.
  define the method fetch_command, with arguments self and subcommand.
  apply operator.eq function to elements of level iterable, until level is reduced to a single value, if the result is true,
  derive the class HttpResponseNotAllowed from the HttpResponse base class.
  call the method self._expire_info.clear.
  define the function lru_cache with 2 arguments maxsize set to integer 100 and typed set to boolean False.
  if attachment is an instance of MIMEBase,
  args is an list with 3 initial elements self.name, self.value and self.attrs.
  call the function lazy with 2 arguments: pgettext and six.text_type, substitute pgettext_lazy.
  call the function escape with an argument p, replace every occurrence of '\n' in the result for '<br />',
  current_chunk is None.
  define the method upload_handlers with arguments: self and upload_handlers.
  if Exception exception is caught,
  if value is None,
  if not,
  read file fp, call the method decode on the result with an argument settings.FILE_CHARSET, return tuple containing 2 elements,
  otherwise if self.required is true,
  bytes_read is integer 0.
  Template, TextNode, Token, TokenParser, Variable, VariableNode, constant_string and filter_raw_string.   from django.template.base import compile_string, resolve_variable, unescape_string_literal and generic_tag_compiler.
  call the function locks.unlock with fd as argument.
  call the method time.mktime with an argument tt, substitute the result for stamp.
  from django.core.files.uploadhandler import StopUpload,  SkipFile and StopFutureHandlers into default name space.
  substitute the '%s' with table and list containing key, respectively.   return default.
  if t.token_type equals TOKEN_BLOCK and t.contents equals 'endcomment',
  try,
  return out.
  do nothing.
  do nothing.
  replace every occurrence of string 'charset=CHARSET' for string  'charset=UTF-8' in msgs, substitute the result for msgs.
  for every i in range of integers from 0 to length of result, not included,
  substitute key for result.key.
  and include_auto_created set to boolean True,   call the method connection.creation.sql_indexes_for_model with arguments model and style, extend output with the result.
  if not,
  call the self.style.HTTP_NOT_FOUND with an argument msg, substitute it for msg.
  define the function supports_color, without arguments.
  break from the loop execution.
  if submod is true and return value of the function module_has_submodule called with 2 arguments: result of the function:
  define the initialization function __init__ with self class instance and params as arguments.
  from UserList import UserList into default namespace.
  define the method _get_name with argument self.
  dest set to string 'interactive', default set to boolean True and help as 'Tells Django to NOT prompt the user for input of any kind.'   call the method parser.add_argument with 5 arguments: string '--no-initial-data', action set to string 'store_false',
  join statements into a string, separated by newlines, return it.
  call the method self.get_exception_response with request, resolver and integer 404 as the arguments, assign the result to response.
  derive the class Serializer from the base.Serializer base class.
  define the method __html__ with an argument self.
  call the __init__ method with arguments file and name, from the base class of the UploadedFile class.
  create directories from the elements in filename.
  derive the class IfNode from Node base class.
  res is an empty string.
  define the method render with 2 arguments: self and context.
  call the method out.getvalue, return the result.
  from django.dispatch import receiver into default name space.
  from django.utils.module_loading import import_string into default name space.
  try,
  endless while loop,
  pop_context is boolean False.
  call the method _trans.ungettext with 3 arguments singular, plural and number.
  otherwise if msg is true,
  convert key and default to strings, get the value under the key string key of the environ dictionary, if it does not exists use the,
  substitute self.widget if the widget is false, otherwise substitute widget for widget.
  for every app_config in return value of the method apps.get_app_configs,
  round up radio, convert it to an integer and the convert it to a string and substitute the result for result.
  call the method connection.check_constraints with an arguments table_names set to table_names.
  call the method self._set with key, pickled and timeout as arguments.
  join to_path and name into a valid system path, substitute the result for filename.
  define the method __init__ with 4 arguments: self, url, length and mime_type.
  call the method match.group with 2 arguments: strings "var" and "constant", substitute the result for var and constant, respectively.
  if definition is true,
  remove config dictionary element under '()' key, substitute it for c.
  if plan is not true,
  substitute msg for body_msg.
  define the function sql_all with 3 arguments: app_config, style and connection.
  if f.primary_key is true,
  if self.encoding exists substitute it for encoding, if not substitute settings.DEFAULT_CHARSET for encoding.
  if ImportError exception is caught,
  if name is callable object,
  for every message in messages,
  call the method self.max_width.resolve with an argument context, convert the result to an integer and substitute it for max_width.
  with open file path in append mode,
  increment length of template_dir by one and substitute it for prefix_length.
  raise an ValueError exception with an argument string 'Unable to configure handler %r: %s' formated with name and e.
  try,
  replace all the occurrences of '\\\\' in string value with '\\' and all occurrences of '\\"' for '"', substitute the result for value.
  return the result of the call to the function chain, with an argument unpacked list, containing the result of the function,
  sort elements of handlers, for every name in result,
  define the function get_bytes_from_wsgi with environ, key and default as arguments.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  define the function wrapper with list args, and dictionary pair of values kwargs as arguments.
  close fd file descriptor.
  return an instance of Template class, created with 2 arguments: source, origin and name, return the result.
  define the method __init__ with 2 arguments: self and name.
  and third element of the result of the function sys.exc_info.   for every i and handler in enumerated iterable handlers,
  break the execution of the smallest enclosing loop.
   if t.token_type equals TOKEN_BLOCK,
  substitute regex for self._regex.
  substitute value under the name key of the toks dictionary for tok.
  RemovedInDjango19Warning and stacklevel set to integer 2.   if not,
  result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Feb.' for 2,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'March' for 3,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'April' for 4,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'May' for 5,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'June' for 6,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'July' for 7,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Aug.' for 8,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Sept.' for 9,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Oct.' for 10,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Nov.' for 11,   result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Dec.' for 12,   MONTHS_ALT is an dictionary with 12 entries: result of the function pgettext_lazy with 2 arguments: 'alt. month' and 'January' for 1,
  decorator function register.filter with 2 arguments string "timesince" and is_safe set to boolean False.
  if size of c_ulong does not equals to size of c_void_p,
  raise an RawPostDataException exception with an argument string "You cannot access body after reading from request's data stream".
  define the method get_nodes_by_type with 2 arguments: self and nodetype.
  call the method _construct_form from the base class of the class BaseModelFormSet, with 2 arguments: i and unpacked dictionary kwargs.
  return key and pdict.
  derive the class JsLexer from the Lexer base class.
  if e.errno is not equal to errno.ENOENT,
  call the method node.getAttribute with an argument attr, substitute the result for model_identifier.
  append loader to loaders.
  substitute ngettext for ungettext.
  try,
  if not,
  if arg is true,
  if lang is None,
  yield nothing.
  substitute declared_fields for new_class.declared_fields.
  if there is no match,
  if Exception exception is caught,
  return None.
  append list containing 4 elements: 'CVS', '.*', '*~' and '*.pyc', to ignore_patterns.
  if field_type equals a string CharField' and fourth element of row is true,
  if self.__stattag_text contains newline character,
  break the loop execution.
  return cache.
  skip this loop iteration.
  call the function curry with 2 arguments: _proxy_method and method set to six.text_type.encode, substitute the result for encode.
  call function update with path as the argument, for every path in settings.LOCALE_PATHS, extend basedirs list with previous items.
  from django.db.migrations.executor import MigrationExecutor into default name space.
  if self.activated is boolean True,
  raise an ValueError exception with an argument string 'Unable to configure logger %r: %s' formated with name and e.
  call the method self.configurator.convert with an argument value, substitute the result for result.
  if TypeError and AttributeError exceptions are caught,
  return scrip_name.decode method result called with UTF_8 as argument.
  define the method compile_function_error with 3 arguments: self, token and e.
  substitute i-th element of tokens for token.
  define the method __init__ with 4 arguments: self, data, func and prefix.
  try,
  return self.
  ch is None.
  return self.
  substitute '%s' in string "No changes detected in app '%s'" with the result of the method app_labels.pop, write it to self.stdout.
  call the executor.migration_plan method with targets as the argument, substitute the result for plan.
  call the function ugettext with an argument message.
  call the method self.configurator.convert with an argument value, substitute the result for result.
  called with an argument commit, return the result.   save.alters_data is boolean True.
  self.proxy is boolean False.
  append list containing string '--no-wrap' to self.xgettext_options.
  substitute the '%s' with table and list containing key, respectively.   define the method has_key with self class instance, key and version defaulting to None as arguments.
  substitute viewname for view.
  call the function warnings.warn with an argument string "``--natural`` is deprecated; use ``--natural-foreign`` instead.",
  define lambda function that returns self.file.fileno field, use it as an argument for property function, put the result in fileno.
  define the method to_python with arguments self and value.
  if self.base_url is None,
  call the method self.setFeature with 2 arguments: handler.feature_external_pes and boolean False.
  call the method os.dup2 with 2 arguments: result of the method si.fileno and result of the method sys.stdin.fileno.
  raise an TemplateSyntaxError exception with an argument string "Invalid arguments provided to simple_tag".
  call the stream_or_string.read function, substitute the result for stream_or_string.
  filemsg is a string 'file %s, ', where '%s' is replaced with origin.
  extend errors list with e.error_list.
  internal_use_only is boolean False.
  do nothing.
  get the value under the 'locale' key of the options dictionary, substitute it for locale.
  append newline character to msg.
  call the method field_params.update with an argument new_params.1
  call the function force_text with an argument ttl, substitute the result for ttl.
  if o is an instance of datetime.datetime object.
  return plist.
  default is boolean False, and help is a string "Don't colorize the command output.".   if self.args is true,
  use global variable _supported.
  from django.conf import settings into default name space.
  call the method o.isoformat, return the result.
  split first and second element of hextet into parts by ':', sum their lengths, substitute the result for sep.
  default set to boolean False and help as a string "Create an empty migration.".   call the method parser.add_argument with 5 arguments: string '--noinput', action as a string 'store_false',
  if not,
  if template_dirs is false,
  define the method __next__ with an argument self.
  define the method __init__ with 2 arguments: self and tokens.
  if new_value equals value,
  if base has an attribute 'declared_fields',
  if child.nodeType equals to child.TEXT_NODE or child.nodeType equals to child.CDATA_SECTION_NODE,
  return a string '%02d' formated with self.data.day.
  return a tuple with 3 elements: self.__newobj__, tuple with an element self.__class__ and result of the method self.__getstate__.
  default is a string 'DEFAULT'.
  derive the class ExtendsNode from the Node base class.
  decorator stringfilter,
  define the method id_for_label with arguments self, data, files and name.
  if m is false,
  fill_to is an integer 7.
  remove kwargs dictionary element under the 'method' key, substitute it for method.
  join tmpdir and sting 'original' into a file path name, substitute it for original_path.
  if call to the _has_expired method with argument key evaluates to boolean False,
  return value,
  substitute '%s' in a string "  %s:\n" with return value of the self.style.MIGRATE_LABEL method called with argument writer.filename,
  for every subnode in node,
  if not,
  define the method __iter__ with an argument self.
  if formfield is true,
  call the method self.error_class, substitute the result for self._non_form_errors.
  call the method self.handle_field with arguments obj and filed.
  call the method self.timezone.utcoffset with an argument self.data, substitute the result for offset.
  define the function u with an argument s.
  call the function six.text_type with an argument name, return the result.
  call the method sys.stderr.write with an argument string "  as a FastCGI application, you will need to get flup from\n".
  insert options.pythonpath at the beginning of sys.path.
  if ns_pattern is true,
  increment bytes_read by length of bytes.
  define the method split_leading_dir with 2 arguments self and path.
  derive the class EmailBackend from the BaseEmailBackend base class.
  call the method _trans.pgettext with 2 arguments context and message.
  call the function zlib.compress with an argument data, substitute the result for compressed.
  return data.
  substitute input_data for self._input_data.
  strip of the whitespaces first element of transfer_encoding, substitute the result for transfer_encoding.
  define the function slugify with an argument value.
  from django.core.serializers.base import DeserializationError into default name space.
  try,
  __all__ is a tuple containing strings 'BaseFormSet', 'formset_factory' and 'all_valid'.
  call the method clean with an argument value from the base class of the class TypedMultipleChoiceField, substitute the result for value.
  opts is a tuple created out of elements s, for every s in styles is s is in the keys of the opt_dict dictionary.
  substitute table for self.db_table.
  import module re.
  call the method self._isdst with an argument dt, if it evaluates to true,
  substitute type for class_types.
  kwargs is a dictionary created with tuples with 2 elements: k and value under k key of config dictionary,
  fields is an tuple containing 3 entries: return value of the method models.CharField called with 4 arguments:
  substitute str_number and an empty string for int_part and dec_part.
  if basetype equals a string 'text',
  call the method line.lstrip, if the result starts with TRANSLATOR_COMMENT_MARK,
  define the method add_handlers with 3 arguments: self, logger and handlers.
  from django.test.utils import get_runner into default namespace.
  if not,
  import module logging.
  define the function get_serializer with an argument format.
  RemovedInDjango19Warning and stacklevel set to integer 2.   if app_config.models_module is None,
  if not,
  return boolean False.
  and unpacked dictionary kwargs, return the result.   return wrapper.
  if not,
  call the function _trans.to_locale with an argument language, return the result.
  substitute package.__name__ for package_name.
  call the method copy.copy with an argument self, substitute the result for result.
  if KeyError exception is caught,
  define the function server_bind with an argument self.
  increment num by one.
  define the method __init__ with 3 arguments: self, func and name set to None.
  create md5 hash from string response.content in hexadecimal format, surround the hash with double quotes,
  if self.negate is true and val1 is not equal to val2, or if, self.negate is false and val1 equals val2,
  replace all the elements of the basedir list by its corresponding absolute directory path, only is that directory exists.
  return value
  convert args into a list, substitute it for args.
  define the method pop with 3 arguments: self, key and unpacked list args.
  remove config dictionary element under '.' key, if it exists substitute it for props, if not, props is None.
  for every form in valid_forms,
  define the method get_connection with arguments self and fail_silently set to boolean False.
  raise an ValueError exception with an argument string "Unsupported version: %s" formated with value under 'version' key of config dictionary.
  if e.args list first element starts with string "Error -5",
  if six.PY3 is true,
  call the function loader with 2 arguments name and dirs, substitute the result for source and display_name, respectively.
  if middleware has an attribute 'process_response',
  return d.
  call the method connection.constraint_checks_disabled, with the result perform,
   raise CommandError with an argument string 'Unknown app in excludes: %s', where '%s' is replaced with exclude.
  append a tuple with 2 entries lang and priority to result.
  call the function os.path.expanduser with an argument pythonrc, substitute the result for pythonrc.
  call the function do_ntranslate with 3 arguments: singular, plural, number and string 'ngettext', return the result.
  use global variable _supported.
  raise an CommandError exception with an argument string 'Your Python does not support IPv6.'.
  if _standard_context_processors is None,
  cache_choices, required, widget, label, initial, help_text, unpacked list args and unpacked dictionary kwargs.   define the method to_python with 2 arguments: self and value.
  call the function logging_config_func with an argument logging_settings.
  define the method __eq__ with an argument self.
  self.first is boolean False.
  define the method write_items with 2 arguments: self and handler.
  otherwise if common_prefix is None,
  call the function get_format with an argument string 'DATE_FORMAT', substitute it for fmt.
  from django.core.management.utils import handle_extensions into default name space.
  use it as an argument for the call to the function force_text, return the result.   define the method as_text with 3 arguments: self, attrs set to None and unpacked dictionary kwargs.
  if remaining is None,
  and form is not contained in forms_to_delete, substitute the resulting list for valid_forms.   for every form in valid_forms,
  call the MigrationAutodetector function with arguments, return value of the call to the method executor.loader.project_state,
  substitute the result for data.   if AttributeError exception is caught,
  if not,
  take elements of token_string from second to second last element and strip the whitespaces surrounding the result,
  if not,
  otherwise if token_string starts with COMMENT_TAG_START,
  call the function tempfile.mkdtemp, substitute the result for tmpdir.
  derive the class VerbatimNode from Node base class.
  for every v in value call the function conditional_escape with an argument v, append the result in a list, substitute the resulting list for value.
  define the method value_from_datadict with 2 arguments: self, data, files and name.
  return boolean False.
  and input_format, substitute the result for v.   substitute v.year, v.month and v.day for year_val, month_val and day_val, respectively.
  call the method form.save, with an argument commit set to boolean False, substitute the result for obj.
  if TypeError exception is caught,
  from django.utils import six into default name space.
  remove entry under 'render' key of the kwargs dictionary and substitute it for renderer, if the key doesnt exists, renderer is None.
  if settings.FORCE_SCRIPT_NAME is not None,
  if original_lookup and lookup_view are not callable objects,
  call the self.get method with key and version set to version as arguments, return it if it is not None.
  call the EmailMultiAlternatives function with, subject, message, from_email, recipient_list and connection set to connection, as arguments, assign the result to mail.
  define the method render with 4 arguments: self, name, value and attrs set to None.
  return nothing.
  define the method _itervalues with an argument self.
  if delta is smaller than integer 0.
  if TypeError, ValueError or UnicodeDecodeError exceptions are caught,
  if self_closing is true or tagname is contained in html4_singlets,
  random is an instance of random.SystemRandom class.
  define the method tzname with 2 arguments: self and dt.
  try,
  if escaped is true,
  format string '%+03d:%02d' with hour and minute, append it to time_str, return the result.
  if six.PY3 is true,
  if num is greater than self._max_entries,
  requires_system_checks is boolean False.
  statements is an empty list.
  do nothing.
  called with n.getAttribute('pk') method.   call the m2m_convert function with an argument c, for every c in return value of the method node.getElementsByTagName,
  integer 212, integer 243, integer 273, integer 304 and integer 334.   define the method b with an argument self.
  define the method get_many with 3 arguments, self class instance, keys and version set to None.
  append a tuple containing 2 elements: model and deps to model_dependencies.
  read size number of bytes from self.stream stream, store the result in the result.
  from django.utils import six into default name space.
  call the function self.tag with 2 arguments: function_name and compile_func.
  substitute offset.seconds for offset.
  try,
  call the cursor.execute method with sql as argument.
  from django.template.base import ALLOWED_VARIABLE_CHARS, BLOCK_TAG_END, BLOCK_TAG_START, COMMENT_TAG_END, COMMENT_TAG_START,
  substitute file_or_path for file.
  define the function make_msgid with argument idstring set to None.
  if can_fail is true,
  append taglib_module to tried_modules.
  define the function make_key with self class instance, key and version set to None as arguments.
  call the function handle_extensions exts, substitute self.extensions.
  call the method self._handle_fk_field_node with field_node and field as arguments, substitute the result for the value under the
  sort loader.migrated_apps, substitute it for app_names.
  if app_output is true,
  call the method __init__ with an argument name form the base class of the class _LazyModule.
  convert value under the 'CONTENT_LENGTH' key of the environ dictionary to an integer, substitute it for content_length.
  call the method sys.stdout.close.
  define the method use_argparse with an argument self,
  substitute i-th element of self.forms for form.
  dest as a string 'no_optimize', default set to boolean False and help as a string 'Do not try to optimize the squashed operations.'.   call the method parser.add_argument with 5 arguments: string '--noinput', action set to string 'store_false',
  if errors is true,
  if count is equal to integer 0.
  raise an CommandError with an argument string "Cannot find a migration matching '%s' from app '%s'.",
  delete entry under the name key of the moves.__dict__ dictionary.
  remove entry under 'initial' key of the kwargs dictionary, substitute it for self.initial_extra if it exists,
  define the method __init__ with arguments self, argument list args and dictionary of arguments kwargs.
  substitute nonlocal_root for tuple root.
  join self.dirpath, thefile into a file path, substitute it for work_file.
  if ImportError exception is caught,
  if KeyError exception is caught,
  derive the class BaseValidator form the object base class.
  if call to the settings.is_overridden with string 'TEST_RUNNER' evaluates to boolean False.
  if not,
  define the method __init__ with 4 arguments: self, takes_context, args and kwargs.
  if value is not contained in result,
  self.dict is an instance of OrderedDict class, created with arguments: tuples with 2 argument x and None, for every x in iterables,
  call the method deactivate.
  define the method clean with an argument self.
  current_fields is an empty list.
  define the method __repr__ with an argument self.
  return result.
  call the method self.next_token, substitute the result for token.
  call the os.umask function with argument old_umask.
  commands is an dictionary containing elements: string 'django.core' for every name in the function find_commands return value, called with first element of __path__ as an argument.
  substitute the result of the function data.temporary_file_path for file.
  return an empty list.
  derive the class FilterNode from Node base class.
  otherwise is template is six.string_types instance,
  substitute hint for self.hint.
  try,
  call the method deactivate.
  return an instance of FilterExpression class, created with 2 arguments: token and self.
  try,
  mark_safe function, return the result.   call the function allow_lazy with 2 arguments: slugify and six.text_type, substitute the result slugify.
  call the method parser.compile_filter with an argument first element of bits, substitute the result for target.
  truncate first size number of elements of self.buffer.
  called with an argument decorator.   if decorator has an attribute 'process_view',
  append options to output.
  derive the class DictWrapper from the dict base class.
  BLOCK_CONTEXT_KEY is a strign 'block_context'.
  call the function force_text with 3 arguments: file_name, encoding and errors set to string 'replace',
  substitute smtplib.SMTP_SSL for connection_class if self.use_ssl is true, if not substitute smtplib.SMTP for connection_class.
  remove config dictionary element under 'disable_existing_loggers' key, if it exists substitute it for disable_existing, if not,
  call the method ETAG_MATCH.findall with an argument etag_str, substitute the result for etags.
  evaluate self._has_expired with argument key, if the result is True,
  substitute value for self.value.
  import module sys.
  return boolean True.
  format self.year_field string with name, use it as the key for the data dictionary, substitute the result for y.
  define the method clean with arguments self and value.
  if self._read_started is true,
  value under the self.var_name key of the context dictionary is an empty list.
  call the method termios.tcgetattr with argument fd, substitute the result for attr_list.
  call the method self.add_root_elements with an argument handler.
  define the function ifequal with 2 arguments: parser and token.
  define the method __init__ with arguments self, input_formats set to None, unpacked list args and unpacked dictionary kwargs.
  if ValidationError exception is caught,
  if self has an 'error_dict' attribute,
  substitute name and value for self.name and self.value.
  sort elements of list existing.
  if Exception, renamed to e, exception is caught,
  return an instance of DebugNode class.
  call the function strftime with 2 arguments: self and fmt, return the result.
  call the serializer function, call the loads method on the return value with an argument data, return the result.
  return output.
  try,
  call the function _load_serializers.
  for every d in reversed list self.dicts,
  if prefix is false,
  split server with ';' as delimiter, substitute the result for self._servers.
  (?P<filter_name>\w+)(?:%(arg_sep)s(?:(?P<constant_arg>%(constant)s)|(?P<var_arg>[%(var_chars)s]+|%(num)s)))?)",   where 'constant' is replaced with constant_string, 'num' with raw string '[-+\.]?\d[\d\.e]*', 'var_chars' with string "\w\.",   'filter_sep' with result of the function re.escape called with an argument FILTER_SEPARATOR,   anbd 'arg_sep' with result of the function re.escape called with an argument FILTER_ARGUMENT_SEPARATOR.   call the function re.compile with 2 arguments: filter_raw_string and result for bitwise OR on 2 operands re.UNICODE and re.VERBOSE,
  raise an ValueError exception with an argument string "make_aware expects a naive datetime, got %s", where '%s' is replaced with value.
  try,
  return the result of the call to the function force_text, with s, encoding, string_only and errors as arguments.
  append a tuple with 2 arguments: filter_func and args to filters.
  define the function parse_color_setting with an argument config_string.
  append string 'Field renamed to remove unsuitable characters.' to field_notes.
  if param is true,
  return nothing.
  if args in true,
  from django.utils.translation import ungettext and ugettext as _ into default name space.
  results is a tuple with 2 elements, 2 empty lists.
  call the method result.setlist with the arguments: key and value.
  join the executor.loader.unmigrated_apps into a string separated by string ', ' append it to the end of a string "  Synchronize unmigrated apps: ",
  substitute self._empty_value for value.
  define the method _has_changed with 3 arguments: self, initial and data.
  define the method find_template with 3 arguments: self, name, dirs set to None.
  if s is an instance of an object Promise.
  call the method base64.urlsafe_b64decode with sum of s and pad as argument.
  call the function warnings.warn with 3 arguments: string "django.utils.importlib will be removed in Django 1.9.",
  if not,
  define the method reverse_dict with an argument self.
  if form.errors is true,
  if token.contents is false,
  substitute self.__class__ for response._handler_class.
  call the BaseCache.__init__ method with self class instance and params as the arguments.
  substitute name for self.name.
  from django.utils.six.moves import _dummy_thread as thread into default name space.
  if key starts with self.prefix.
  and re.IGNORECASE, substitute the result for domain_regex.   call the re.compile function with 2 arguments: raw string '\[([A-f0-9:\.]+)\]$' and re.IGNORECASE, substitute the result for literal_regex.
  substitute user_function for wrapper.__wrapped__.
  if InvalidTemplateLibrary, renamed to e, exception is caught,
  where '%s' is replaced with name.   args is an empty list.
  derive the class InlineForeignKeyField from the Field base class.
  return token.
  return boolean True.
  define the method file_complete with arguments: self and file_size.
  derive the class FileBasedCache from BaseCache base class.
  evaluate the method s.getvalue, return the result.
  value under the 'blank' key of the extra_params dictionary is boolean True.
  call the function _ with an argument string 'midnight', return the result.
  if ImportError, renamed to e, is caught,
  define method __init__ with self class instance, mode string 'w+b', bufsize set to integer -1, suffix and prefix set to empty strig,
  substitute _iterlists for iterlists.
  call the method unhandled_params.remove with an argument param.
  try,
  call the function re.compile with an argument raw string "(?<!%)%(?!%)", substitute the result for one_percent_re.
  define the method send_messages with arguments self and email_messages.
  for every i and line in enumerated iterable table_output,
  call the function io.open with 3 arguments: work_file, string 'w' and encoding set to string 'utf-8' as arguments,
  from django.utils.encoding import smart_text,  force_text and python_2_unicode_compatible into default name space.
  return boolean False.
  if not,
  convert the result to a lowercase string, substitute it for step.   if not,
  mapping is an dictionary with 8 initial entries: BLOCK_TAG_START for 'openblock', BLOCK_TAG_END for 'closeblock',
  if k equals a string 'fg',
  while start is lesser than end.
  if not,
  if not,
  call the method self.fetch_command with an argument command, call the method run_from_argv on the result with an argument self.argv.
  derive the class NumberAwareString from the resultclass base class.
  from __future__ import unicode_literals into default name space.
  substitute tup for elements of self.
  call the _tc.load method with the 'foo:bar=1' converted to string as an argument.
  define the method __copy__ with an argument self.
  call the method self.template_cache.clear.
  from django.template.base import TemplateDoesNotExist into default name space.
  do nothing.
  append digit to int_part_gd.
  call the nethod self._isdst with an argument dt, if it evaluates to true,
  _cookie_allows_colon_in_names is boolean False.
  replace hextets list from the best_doublecolon_start index to best_doublecolon_end index with an empty string.
  create a tuple out a tuple with an element integer 2037 and a list tt elements without the first element, substitute the result for tt.
  substitute boundary for self._boundary.
  for every e in all_issues,   raise an CommandError with argument msg,
  do nothing.
  if middle ends with punctuation,
  from django.utils.html import conditional_escape and format_html into default name space.
  args is an empty tuple.
  substitute the return value of the function abspathu with self.base_location as argument for self.location.
  if sys.platform starts with string 'java',
  new_value is an empty list.
  define the method validate with arguments self and value.
  if not,
  dest is string 'use_natural_foreign_keys', default is boolean False and help is a string 'Use natural foreign keys if they are available.'.   call the method parser.add_argument with 5 arguments: string '--natural-primary', action set to 'store_true',
  return boolean False.
  where string '%s' is replaced by lookup_view and mod_name, respectively.   if not,
  define class dummy.
  if p is greater or equal to integer 0,
  append x to self.namespaces list for every x in namespaces, only if x is true.
  define function force_bytes with s, encoding set to 'utf-8', strings_only set to False and errors set to 'strict' as arguments.
  call the method parser.skip_past with an argument string 'endcomment'.
  subtract timestamp from the return value of the function time.time, substitute the result for age.
  call the function warnings.warn with previous string and CacheKeyWarning as arguments.   define the method incr_version with 4 arguments, self, key, delta defaulting to integer 1 and version defaulting to None.
  call the check function with argument app_config set to app_config, substitute the result for new_errors.
  if ValidationError, renamed to e, exception is caught,
  get value under the 'register_to' key of the kwargs dictionary, substitute it for register_to.
  call the function format_html with 3 arguments: self.url_markup_template, value.url and return value of the function force_text,
  want_unicode is boolean True.
  if message is not None
  call the function hmac.compare_digest with 2 arguments: result of the function force_bytes called with an argument val1,
  substitute app_name for klass.
  if length of password is greater than inner.block_size,
  substitute the result for value under the 'microsecond' key of the kw dictionary.   remove entry under the 'tzinfo' key of the kw dictionary, substitute it for tzinfo.
  call the os.remove function with argument name.
  try,
  try,
  call the method router.get_migratable_models with arguments app_config, database and include_auto_created set to boolean True,
  define the method items with an argument self.
  pop_context is boolean True.
  if not,
  value under the 'declared_fields' key of the attrs dictionary is an instance of OrderedDict class, created with an argument current_fields.
  call the function sys.exit with an argument integer 1.
  call the method data.getlist with an argument name, return the result.
  and help as a string 'Specify the app label(s) to create migrations for.'.   call the method parser.add_argument with 5 arguments: string '--dry-run', action as a string 'store_true', dest as string 'dry_run',
  substitute empty for self._wrapped.
  if new_name is not equal to col_name,
  return an empty string.
  if not,
  if record.exc_info is true,
  get 'help_texts' attribute from the options object, if it exists substitute it for self.help_texts, if not self.help_texts is None.
  substitute i for end_index.
  substitute max_value and min_value for self.max_value and self.min_value.
  for every i and widget in enumerated iterable self.widgets,
  derive the class AppRegistryNotReady from the Exception base class.
  if errors is true,
  for every dirpath, dirnames and locale_filenames in directory tree starting at the basedir directory.
  substitute new_class.declared_fields for fields.
  try,
  get the value under the 'csrf_token' key of the context dictionary, if it exists substitute the result for csrf_token,
  from django.db import models and DEFAULT_DB_ALIAS into default name space.
  if not,
  if bit is true,
  call the function _explode_shorthand_ip_string with an argument ip_str, substitute the result for ip_str.
  call the get_script_name function with environ as argument, use the result as an argument for call to the set_script_prefix function.
  return a string "%s.%s" formated with first dot package elements and name.
  derive class Command from base class BaseCommand.
  from django.conf import settings into default name space.
  can_import_settings is boolean True.
  define the function with_metaclass with 2 arguments meta and unpacked list bases.
  extend list inner_args with args.
  join fixture_dir, fixture_name with appended character '*' into a valid file path,
  define the function abspathu with an argument path.
  to_unicode is an lambda function with an argument s, result is the result of the function force_text,
  from django.utils.translation import TranslatorCommentWarning, trim_whitespace and LANGUAGE_SESSION_KEY into default name space.
  if name is boolean False raise an assert error with message string "The name argument is not allowed to be empty.".
  call the function local, substitute the result for self._caches.
  FILE_INPUT_CONTRADICTION is an instance of object class.
  if self.can_delete is true and call to the method self._should_delete_form with an argument form, evaluates to true,
  import module shutil.
  call the function cache.close.
  define the method add with 5 arguments, self, key, value, timeout defaulting to DEFAULT_TIMEOUT and version defaulting to None.
  and substitute the return value for value under the key 'Expires' of dictionary response.   call the function patch_cache_control, with response and max_age set to cache_timeout as arguments.
  if self.choices is true,
  raise a NotImplementedError with an argument string 'subclasses of Serializer must provide a start_object() method'.
  from django.core.cache import caches to the default name space.
  call the method self.add_prefix with an argument fieldname, substitute it for prefix.
  if self.required is true and value is false,
  return attrs.
  define the method decr with self, key, delta defaulting to integer 1 and version defaulting to None as arguments.
  if app_config.models_module is None.
  if field is not equal to NON_FIELD_ERRORS and field is not contained in self.fields,
  call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary, substitute the result for table.
  chunk_size is an integer 1024.
  derive the class Node from object base class.
  substitute fist and second element of exc_info for exctype and value, respectively.
  divide hits by a floating point number self.per_page, convert its ceiling value to an integer and substitute it for self._num_pages.
  otherwise if first element of second row of args equals a string '4',
  define the method handle with 2 arguments: self and unpacked dictionary options.
  for every model in model_list,
  import module sys.
  call the method self._find_boundary with 2 arguments: chunk and boolean if length of chunks is lesser than self._rollback,
  substitute kw for self.__kw.
  m2m_data is an empty dictionary.
  if filename ends with string '.mo' return I18N_MODIFIED, otherwise return FILE_MODIFIED.
  called with an argument final_attrs, return the result.   property decorator,
  append string "    %s", where '%s' is replaced by name to the usage.
  define the method W with an argument self.
  make a directory migrations_directory.
  if not,
  define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
  define the method _handle_fk_field_node with arguments self, node and field.
  call the method self.can_write.release.
  if field is an instance of InlineForeignKeyField class,
  for every replacement in the resulting set,   replace every occurrence of replacement in value for an empty string, substitute the result for value.
  substitute self._meta for opts.
  call the function _load_serializers.
  if key exists, substitute it for self.key, if not substitute settings.SECRET_KEY for key.
  from django.core.files.uploadedfile import TemporaryUploadedFile and InMemoryUploadedFile into default name space.
  _func_defaults is a string "__defaults__".
  call the method t.led with 2 arguments left and self.
  if since is lesser or equal to integer 0,
  define the method add_arguments with 2 arguments self and parser.
  append field.widget.media to media, substitute the result for media.
  substitute logging.getLogger for getLogger.
  call the function self.to_python with an argument data, substitute the result for data.
  call the method self.build_potfiles, substitute the result for potfiles.
  call the method self.set with key, value, version incremented by delta, as arguments.
  derive the class ModelFormOptions from object base class.
  return the evaluated result of the mail.send method.
  raise an IOError exception with argument string "%s exists and is not a directory.", where '%s' is replaced by directory.
  return value under the key key of self dictionary.
  define the method invalid_block_tag with 4 arguments: self, token, command and parse_until as None.
  substitute settings.LANGUAGES for the value under the 'LANGUAGES' key of the context_extras dictionary.
  define function smart_bytes with s, encoding set to string 'utf-8', strings_only set to False and errors set to string 'strict', as arguments.
  call the function field.value_to_string with an argument obj, substitute the result for value under the field.name key of self._current dictionary.
  define the method _itervalues with an argument self.
  if not,
  split into two parts string main_value_pair at character ':', substitute the parts for name and value, respectively.
  set old_method_name attribute of the base object to the result of the function wrapper called with an argument old_method.
  define the method num_items with an argument self.
  and help set to string 'One or more application label.'.   define the method handle with 3 arguments: self, unpacked list app_labels and unpacked dictionary options.
  call the method self._render with an argument context, return the result,
  if y, m and d are all equal to string '0',
  define the method copy_plural_forms with arguments self, msgs and locale.
  if not,
  from ctypes.wintypes import BOOL, DWORD and HANDLE into default name space.
  c is an empty list.
  return all the integers from the integer 1 to the self.num_pages.
  try,
  if options is true,
  call the method bytes_to_text with an arguments key and self.encoding, substitute the result for key.
  if exclude is true and f.name is contained in exclude,
  define the method __init__ with arguments self, name, sysid and pubid.
  call the method self.create_table with arguments: db and tablename.
  if not,
  define the method _create_attachments with arguments self and msg.
  if field_type is not equal to string 'TextField(' or string 'CharField(',
  from django.template.loader import get_template into default name space.
  get the value under the key key of the self.cookies dictionary, substitute boolean True for 'secure' key of the returned dictionary.
  __all__is an tuple with 2 elements: strings 'BaseForm' and 'Form'.
  if initial is not None,
  call the method validate with an argument value from the base class of the class TypedMultipleChoiceField.
  return size.
  parser._namedCycleNodes is an empty dictionary.
  append '_' to string created from first p elements of languages converted to lowercase,
  while x is greater than zero,
  remove 'sep' key from the kwargs dictionary, if it exists substitute it for sep, if not sep is None.
  from collections import OrderedDict into default name space.
  if bytes is contained in resultclasses, cls._delegate_bytes is boolean True, otherwise it is boolean False.
  joined into a string, separated by whitespaces, substitute the result for loopvars.   for every var in loopvars,
  _assertRaisesRegex is a strnig "assertRaisesRegexp".
  substitute ev.filename for filename.
  from django.core.management.base import BaseCommand into default name space.
  get the element with minimal value between the value under the TOTAL_FORM_COUNT key of self.management_form.cleaned_data dictionary,
  define the initialization method __init__ with 3 arguments: self, name and params.
  call method self.stdout.write with statement as an argument.
  call the function exhaust with an argument self._input_data.
  call the function warnings.warn with 3 arguments:
  if the tuple result equals to tuple containing character ';' and string '"\\073"', respectively,   assign _cookie_encodes_correctly the boolean True value, otherwise assign it False.   assign return value of the call to the http_cookies.SimpleCookie function to _tc.
  property decorator,
  call the function os.makedirs with argument directory.
  if _win is true,
  define the method _proxy_method with 3 arguments self, unpacked list args and unpacked dictionary kwargs.
  if list_ is not an instance of tuple or list types and length of list_ is not equal to integer 2,
  for field in self if field.is_hidden is false, append field to a list, return the resulting list.
  call the function sys.exit with argument integer 3.
  exception in Django 2.0." formated with num_loopvars and len_item, respectively, and RemovedInDjango20Warning.   try,
  separated by result of the function _ called with an argument string ', ', for every i in list_ without last element,   result of the function force_text called with an argument last_word, result of the function force_text called with an argument:   last element of list_.   call the function allow_lazy with 2 arguments: get_text_list and six.text_type, substitute the result for get_text_list.
  call the method self._truncate_html with 5 arguments: length, truncate, self._wrapped, length and boolean True, return the result.
  define the method _is_expired with self and f as arguments.
  if not,
  aise and exception InvalidCacheBackendError with string "Could not find backend '%s': %s" as argument, replace '%s' with backend and e, respectively.
  append k into a list for every k and v in return value of the six.iteritems function with an argument _serializers,
  if self.verbosity is greater or equal to integer 1,
  return boolean False.
  try,
  if not,
  substitute space for end.
  root is a list with elements: root, root, None and None.
  if index is negative inter 3, if is_reversed, substitute it for in_index, if not, in_index is negative integer 2.
  if nodelist_empty is None,
  call the method self.check with 2 arguments app_configs set to app_configs, display_num_errors set to display_num_errors, return the result.
  return iterable self.keyOrder.
  yield key and value under the key key of self dictionary.
  remove first element of result from self.keyOrder dictionary.
  get the value under ch key of the ESCAPE_MAPPINGS dictionary, if it exists substitute it for representative, if not substitute ch for representative.
  decrement mtime by stat.st_ctime.
  call the function urlparse with an argument url, substitute the result for url_info.
  try,
  call the function sql_all with 3 arguments: app_config, self.style and connection, substitute the result for statements.
  call the function copystat with old_file_name and new_file_name as arguments.
  help is a string "Runs this project as a FastCGI application. Requires flup.".
  convert d into a integer, subtract d from it, substitute the result for m.
  from django.core.mail.utils import CachedDnsName and DNS_NAME into default name space.
  if string '--commands' is contained in args,
  "Use django.utils.timezone instead.", RemovedInDjango19Warning and stacklevel set to 2.   derive the class FixedOffset from the tzinfo base class.
  import module re.
  if response is None,
  raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
  define the function get_ns_resolver with arguments ns_pattern and resolver.
  if not,
  locale_dir is None.
  if not,
  return res.
  convert name to lower case, if it is contained in ADDRESS_HEADERS,s
  call the method timezone.normalize with an argument value, substitute the result for value.
  use global variables _format_cache and _format_modules_cache.
  call the get_serializer function with an argument format, call the return value object and substitute it for s.
  substitute it for value under the 'pk' key of data dictionary.   return data.
  if not,
  return x.
  remove 'LOCATION' key from kwargs dictionary and put it into location, or use an empty string if key doesnt exists.
  call the method self.renderer with 4 arguments: name, value, final_attrs and choices, return the result.
  if mime_encode is true,
  substitute connections element at the index of the value db for connections.
  ext_list is an empty list,
  if not,
  import module hmac.
  derive the class Paginator from the object base class.
  daemonize is boolean True.
  substitute first header_end elements of chunk list for header.
  self.keyOrder is an empty list.
  attrs as a dictionary with an entry: checkbox_id for 'id',   substitute the result for value under the 'clear' key of the substitutions dictionary.   format self.template_with_clear with substitutions, substitute the result for value under the 'clear_template' key of,
  call the method __init__ from the base class of the Field class.
  if NameError exception is caught,
  from django.db.migrations.loader import AmbiguityError into default name space.
  raise self.warning.
  return nothing.
  call the method formats.get_format_lazy with an argument string 'DATETIME_INPUT_FORMATS', substitute the result for input_formats.
  write string "Performing system checks...\n\n" to self.stdout stream.
  raise a ValidationError exception with arguments self.message and code set to self.code.
  separated with result of the function conditional_escape with an argument sep, for every args in args_generator,   use the result as an argument for the call to the function mark_safe, return the result.   define the function linebreaks with 2 arguments: value and autoescape set to boolean False.
  substitute var for self.var.
  subtract year from integer 2000, divide the result by integer 28, floor the result, multiply it with 28 and increment by year,
  value is an empty string.
  call the method template_localtime with 2 arguments: value and use_tz=context.use_tz, substitute the result for value.
  call the function getcallargs with an argument current,
   _assertRaisesRegex is a strnig "assertRaisesRegex".
  output is an list with initial elements generated with call to the function pformat with an argument val, for every val in context.
  substitute lineno for translators_comment_start.
  for every i in sequence of integers from 0 to result of the method self.total_form_count, call the method self._construct_form,
  if not,
  if not,
  if not,
  replace every occurrence of '\r' in s with '\\r'.
  define the method z with an argument self.
  delete element under 'warning' key of kwargs dictionary.
  make basedir directory,
  self._read_started is boolean True.
  if default_kwargs exists, substitute it for self.default_kwargs, otherwise self.default_kwargs is an empty dictionary.
  call the function new_method_proxy with an argument str, substitute the result for __str__.
  with an argument i, append the result to a list, substitute the resulting list for forms.   return forms.
  call the method self.next_token, substitute the result for token.
  template is an instance of Template class, created with an argument content.
  if self.verbosity is greater or equal to integer 3,
  self._namespace_dict is an empty dictionary.
  define the method _delete with self and fname as arguments.
  if self.warning is an instance of Exception class,
  call the import_string with argument: import_path if exists or settings.DEFAULT_FILE_STORAGE, if not, return the result.
  substitute Tok.num for self.id.
  define the function dec with an argument func,
  yield field and ValidationError object converted to an list, created with an argument errors.
  return style.
  call the force_text function with an argument value, return the result.
  call the method form._get_validation_exclusions, substitute the result for exclude.
  call the method apps.get_app_config with an argument exclude, substitute the result for app_config.
  return self._encoding.
  define the method _get_size with argument self.
  derive class Command from the BaseCommand base class.
  substitute the result for starttag_re.   call the function re.compile with an argument string '</%s>' formated with tags_re, substitute the result for endtag_re.
  return value.
  substitute _globs_ with an argument _locs_.
  substitute path_override for path if path_override is not None, otherwise substitute request.path for path
  substitute self for result.parent.
  'Enter a whole number.' for 'invalid'.   define the method __init__ with 5 arguments: self, max_value set to None, min_value set to None, unpacked list args and unpacked dictionary kwargs.
  call the function six.unichr with value under the text key of the html_entities.name2codepoint dictionary, return the result.
  if msg is true,
  return the first element of self.client_address.
  try,
  from django.utils import six into default name space.
  skip this loop iteration,
  call os.makedirs function with self._dir and hexadecimal 0o700 as arguments.
  if translators_comment_start is not None and lineno is greater than or equal to translators_comment_start,
  import module errno.
  define the method _reset_dicts with 2 arguments: self and value set to None.
  do nothing.
  derive the class SuspiciousFileOperation from the SuspiciousOperation base class.
  iterator is an instance of ChunkIter class, created with arguments: stream_or_iterable and integer 16384.
  if attrs is not None substitute it for self.attrs, or if not self.attrs is an empty dictionary.
  from django.core.servers.basehttp import run and get_internal_wsgi_application into default name space.
  define the function get_callable with arguments lookup_view and can_fail set to boolean False.
  define the method __setitem__ with 3 arguments: self, header and value.
  raise an AttributeError with an argument attr.
  call the method parser.add_option with 3 arguments: string '--traceback', action set to a string 'store_true',
  interactive set to boolean False, database set to db, reset_sequences set to boolean False, inhibit_post_migrate set to boolean True.   if self.verbosity is greater or equal to integer 1,
  call the function get_format with an argument string 'THOUSAND_SEPARATOR', substitute the result for thousand_sep.
  if use_workaround is boolean False,
  call the method parser.add_argument with 6 arguments: string '--locale', string '-l', default as an empty list,
  from django.utils.six import StringIO into default name space.
  call the function get_connection with argument fail_silently set to fail_silently, substitute it for self.connection.
  from functools import partial into default name space.
  with the result renamed to fp, perform the following:   call the method fp.write with an argument msgs.
  define the method as_tuple with 2 arguments: self and value.
  property getter decorator,
  is_required is boolean False.
  substitute value under the 'interactive' key of the options dictionary for interactive.
  call the method field._get_val_from_obj with obj argument, substitute the result for value.
  substitute self.input_type for self.input_type.   call the method __init__ from the base class of the class TextInput, called with an argument attrs.
  for every bit in bits,
  if s equals a string '"',
  if name is true, substitute it for function_name, if not get attribute '_decorated_function' from func object,
  raise an EntitiesForbidden exception with arguments name, None, base, sysid, pubid and notation_name.
  substitute the last element of parts for parts.
  try,
  call the function load_command_class with arguments: app_name and name, substitute the result for command.
  define the method __repr__ with an argument self.
  call the method f.seek with an argument integer 0.
  categories is a list containing the results of the function force_text, called with an argument c, for every c in categories.
  singular is an empty list.
  if ignore_failures is true,
  name is a string "_%d" formated with num_args.
  call the self.style.HTTP_SUCCESS with an argument msg, substitute it for msg.
  if not csrf_token is None.   if csrf_token is true,
  define the method clean with an argument self.
  silent is boolean True.
  call the method handler.receive_data_chunk with 2 arguments: chunk and i-th element of counters, substitute the result for chunk.
  and string '~/.pythonrc.py' as tuples second element.   if pythonrc is true,
  raise an exception NotImplementedError with string 'subclasses of BaseCache must provide a clear() method' as argument.
  if self.field.choice_cache is None,
  define the function tz with an argument request.
  call the method payload.decode with 2 arguments: text and utf8_charset, substitute the result for self._payload.
  get the index of first occurrence of name in existing, substitute it for i.
  call the function force_text with an argument bit, append the result to bits.
  substitute self.required for widget.is_required.
  from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space.
  if has_old_option is true,
  substitute the last element of parts for cmp_fmt.
  selected_html is an empty string.
  if dklen is false,
  token is an instance of Token class, created with 2 arguments: TOKEN_VAR,
  derive the class RequireDebugTrue from logging.Filter base class.
  increment self.active_readers by 1.
  derive the class EmailMessage from the object base class.
  model._meta.app_label and model._meta.object_name joined into a string, with separator '.',   result joined into a string, separated by string ', ' for every model and deps in sorted list of elements skipped sorted by key:   return value of the lambda function with an argument obj, and result the __name__ field of the first element of obj.   substitute skipped for model_dependencies.
  from django.apps import apps into default name space.
  call the function _resolve_name with 3 arguments: name list elements from the level index to the end, package and level,
  call the method connection.introspection.get_relations with 2 arguments cursor, table_name and substitute the result for relations.
  try,
  call the method types.MethodType with 3 arguments: func, obj and obj.__class__, return the result.
  return an empty string.
  default as an empty list and help as an string 'Locale(s) to process (e.g. de_AT). Default is to process all. Can be used multiple times.'.   call the method parser.add_argument with string '--exclude', string '-x', dest set to string 'exclude', action set to string 'append',
  call the function local, substitute the result for _prefixes.
  define the function reraise with 3 arguments: tp, value and tb set to None.
  silent is boolean False.
  derive the class ForNode from Node base class.
  "test management command has changed in Django 1.8. Please create an add_arguments class method to achieve this."   if test_runner_class has an attribute 'add_arguments',
  with unpacked list value as an argument, return the pk field of the result.   if not,
  define the method __next__ with an argument self.
  self.bad_cookies is an empty set.
  is_compressed is boolean True.
  self.tokens is an empty dictionary.
  substitute registry.run_checks for run_checks.
  and dictionary with an entry: 'html' for 'type'.   if value under the 'enclosure' key of the item dictionary is not None,
  for every line in return value of the method self.handle_inspection called with an argument options,
  if DEFAULT_CACHE_ALIAS is not contained in settings.CACHES,
  substitute self._leftover for output.
  if not evaluate the method self.form.error_class and return the result.   define the method as_widget with 4 arguments: self, widget set to None, attrs set to None, only_initial set to boolean False.
  if not,
  perform bitwise exclusive OR on 2 operands x and y, perform bitwise OR with 2 operands: previous result and result, substitute the result for result.
  call the method pending_references.keys, put the result into a set and substitute it for not_installed_models.
  if exception OSError, renamed to e, occurred,
  do nothing.
  if val is an instance of bytes, return val, otherwise return result of the method val.encode called with an argument encoding.
  substitute auto_id for self.auto_id.
  substitute value under the 'use_threading' key of the options dictionary for threading.
  return empty bytes string.
  if TemplateDoesNotExist, renamed to e, exception is caught,
  define the function parse_etags with an argument etag_str.
  if package is false,
  join output into a string, separated by newline characters, use it as an argument for the call to the mark_safe, return the result.
  substitute settings.DEFAULT_CHARSET for self._encoding.
  _moved_attributes is a list with 55 initial elements, 13 of them are the results of the call to the function MovedAttribute,
  replace '%s' with self.file_path and err, respectively.   if self.file_path file is not writable,
  define the method stringfilter with an argument func.
  if ValueError exception is caught,
  otherwise if ch equals a string ')',
  replace every occurrence of string '\r\n' in message with '\n', replace every occurrence of string '\r',
  for every k and v in return value of the method module.__dict__.items, only if result of the method omittable called with an argument k is false.   derive the class Command from the BaseCommand base class.
  or value equals return value of the call to Decimal with argument '-Inf'   raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
  do nothing.
  call the method self._cache_flush_all.
  define delete method with self class instance, key and version set to None, as arguments.
  raise an ValidationError with 2 arguments: value under the 'empty' key of the self.error_messages dictionary and code set to 'empty'.
  kwargs_safe is a dictionary created for every k and v in result of the function six.iteritems called with an argument kwargs,
  if token_string starts with VARIABLE_TAG_START,
  derive the class IPAddressField from the base class CharField class.
  if self has an attribute '_choices',
  if not,
  if elt is an instance of Choice or NonCapture classes,
  raise an ValidationError with 3 arguments: value under the 'max_decimal_places' key of the self.error_messages dictionary,
  from django.core.serializers.python import Deserializer as PythonDeserializer into default name space.
  substitute complain for __iadd__.
  if old_handler is not None,
  get the value under the ext key of the extension_map dictionary, substitute it for cls.
  define the method decr_version with 4 arguments, self, key, delta defaulting to integer 1 and version defaulting to None.
  args is an empty tuple.
  raise an exception.
  for every i in sequence of integers, from 0 to the result of the method self.total_form_count,
  return self._errors.
  call the method self.resolve_template with an argument self.template_name, substitute the result for template.
  try,
  from django.utils import six into default name space.
  call the function _trans.get_language, return the result.
  model._meta.app_label, model._meta.object_name, parent_model._meta.app_label, parent_model._meta.object_name, respectively.   if not,
  choice and idx, return the result.   define the method __str__ with an argument self.
  if locations is not empty,
  set cache to the value of the dictionary caches under the key settings.CACHE_MIDDLEWARE_ALIAS.
  for every migration in merge_migrations.   try,
  if TypeError exception is caught,
  substitute _iteritems for iteritems.
  try,
  increment self.active_readers by t.
  if compress is true,
  call the method RE_DATE.match with an argument value, substitute the result for match.
  substitute base for self.base.
  substitute the value under the 'SERVER_NAME' key of the self.META dictionary, substitute it for host.
  call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary, substitute the result for table.
  self.cookies is an instance of a class SimpleCookie.
  substitute format for self.format if format is true, if not self.format is None.
  and MEMCACHE_MAX_KEY_LENGTH, call the function warnings.warn with previous string and CacheKeyWarning as arguments.   for every char in key,
  define the function next_char with an argument input_iter.
  skipped is an empty list.
  try,
  call the method self.data.weekday, increment the result by an integer 1, divide it with integer 7, return the reminder of the division.
  define method _get_width with self class instance as the argument.
  if e doesnt have an 'django_template_source' attribute,
  call the method parser.parse_args with an argument args set to args, substitute the result for defaults.
  do nothing.
  append cleaned_lien to statement.
  while self.tokens is true,
  try,
  from django.utils import datetime_safe into default name space.
  define the function cleanup_url with an argument url.
  if data is an instance of datetime.datetime or datetime.time classes, and supports_microseconds field of self.field.widget is false,
  request_started is a instance of a Signal class.
  otherwise if value under the 'app_label' key of options dictionary is true,
  define the function get_supported_language_variant with 2 arguments: lang_code and strict set to boolean False.
  errors is an empty list.
  output_transaction is boolean True.
  define the method u with an argument self.
  define the function make_template_fragment_key with fragment_name and vary_on defaulting to None as arguments.
  define private method __eq__ with self class instance and other as arguments.
  from django.conf import settings into default name space.
  call the function _ with the argument string 'Ensure this value is %(limit_value)s (it is %(show_value)s).', substitute the result for message.
  if old_style_list is true,
  define the method attach_alternative with arguments self, content and mimetype.
  define the function callable with an argument obj.
  return response.
  content_length is integer 0.
  import pickle.
  otherwise if vale is not an instance of ConvertingList and value is an instance of list type,
  call the function get_random_string with 2 arguments: integer 50 and chars, substitute it for value under the 'secret_key' of the options dictionary.
  for every char in fmt,
  self._producer is an empty list.
  import module django.
  attrs is an dictionary with 9 initial entries: form for 'form', extra for 'extra', can_order for 'can_order',
  call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'app_label', nargs set to character'*',
  if settings.TEMPLATE_DEBUG is true,
  if _file is None,
  if size equals to integer zero.
  evaluate method transaction.atomic with arguments: using set to database and savepoint set to connection.features.can_rollback_ddl,
  for every app_name is app_names,
  call the function _trans.templatize with 2 arguments: src and origin, return the result.
  call the getvalue method from the base class of the class PythonSerializer, return the result.
  settings.SITE_ID.
  use_func is boolean False.
  can_delete for 'can_delete', min_num for 'min_num', max_num for 'max_num', absolute_max for 'absolute_max',   validate_min for 'validate_min' for validate_max for 'validate_max'.   create a class class which name is generated by converting 'FormSet' into a string and appending it to form.__name__,
  call the method self._archive.printdir with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  break the loop execution.
  raise an TemplateSyntaxError exception with an argument string "expected another tag, found end of string: %s",
  result is None.
  replace all the occurrences of the '%' string for '%%', append result to the previous result, substitute it for candidate_pat.
  substitute link for values under the NEXT key of the last dictionary and PREV key of the root dictionary.
  if kwds is true,
  substitute options for self.options.
  define the method __nonzero__ with an argument self.
  substitute self.default_timeout for timeout.
  define the method __nonzero__ with argument self.
  call the method self.next_token, substitute the result for self.current_token.
  call the self.style.HTTP_BAD_REQUEST with an argument msg, substitute it for msg.
  if not,
  return boolean True.
  if length of bits is not equal to integer 2,
  and to value under the '.moves' appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_parse from the _LazyModule base class.
  append templatetag_module to _templatetags_modules.
  code set to string 'max_decimal_places' and params set to a dictionary with an entry: self.decimal_places for 'max'.    if self.max_digits is not None and self.decimal_places is not None and whole_digits is grater than the difference of,
  try,
  do nothing.
  get the value under the library_name key of the libraries dictionary, if it exists, substitute it for lib, if not, lib is None.
  define the function format with 2 arguments: value and format_string.
  try,
  substitute token_type and contents for self.token_type and self.contents.
  widget.is_localized is boolean True.
  from django.utils import six into default name space.
  join into a string: md5 hash sum of force_bytes(key) and self.cache_suffix, compose root file path out of self._dir and previous result, return it.
  raise an exception.
  substitute initial_id for self.auto_id.
  close zfile stream.
  open err_log file in append mode with buffering size of the input buffer, substitute the result for sys.stderr.
  call the method self.make_key with key and version set to version as arguments, substitute the result for key.
  call the method field.rel.to._meta.pk.to_python with an argument value, use the result as an argument for the call to the,
  if response.status_code is lesser than integer 200 and grater or equal than 100, or response.status_code equals to integer 204 or 304,
  call the method self.resolve with an argument c, substitute the result for c.
  if IndexError exception is caught,
  call the function timesince with 2 arguments: value and arg, return the result.
  if max_length is not None,
  for every path_to_remove in self.paths_to_remove,
  self.parse_name, assign the result to _, ser_fmt and cmp_fmt, respectively.   get the value under the cmp_fmt key of the self.compression_formats dictionary, assign it to open_method and mode.
  for every k in config, only if result of the function valid_ident called with an argument k evaluates to true.   try,
  substitute cls.__text_cast for cls.__str__.
  define the method error with 3 arguments: self, token and msg.
  slice chunk list to get the last rollback elements, if the new list is not empty,
  call close method on a file stream.
  define the method write with 2 arguments: self and value.
  if app_name is an instance of BaseCommands.
  and encoding, substitute the result for result.   if result is not None,
  return None.
  call the method __setitem__ from the base class of the class SortedDict, with 2 arguments key and value.
  args is an empty list.
  get the value under the key key of the self.cookies dictionary, substitute expires for 'expires' key of the returned dictionary.
  call the function importlib_find with 2 arguments: full_module_name and package_path, if the result is not None, return boolean True,
  raise an ValidationError with 2 arguments: value under the 'invalid_date' key of the self.error_messages dictionary and code set to string 'invalid_date'.
  call the function dict with an argument tuple with 2 elements: o.pk and o, for every o in result of the method self.get_queryset,
  raise an ValueError with an argument string "'package' not set to a string".
  unpacked list args and unpacked dictionary kw, return the result.   raise an TypeError exception with an argument sting "Lazy object returned unexpected type.".
  if item_type equals FIELD,
  define the method __str__ with an argument self.
  with one entry 'status_code' is integer 400, as arguments.   call the http.HttpResponseBadRequest function, assign the result to the response.
  derive the class DebugParser from the Parser base class.
  define the function is_ignored with arguments path and ignore_patterns.
  library set to pylibmc and value_not_found_exception set to pylibmc.NotFound.   decorator cached_property,
  call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 2 entries:
  if Exception exception is caught,
  substitute regex for self._regex.
  if self._wrapped is empty,
  if Exception, renamed to e, exception is caught,
  define the method new_file with arguments: self, unpacked list args and unpacked dictionary kwargs.
  call the function re.sub with 3 arguments: string "([a-z])'([A-Z])", lambda function with an argument m and return value,
  from django.utils import six into default name space.
  remove config dictionary element under 'class' key, use it as an argument for the call to the method self.resolve,
  for every lookup and arg in args,
  for every form in self.extra_forms,
  skip this loop iteration,
  substitute the result for proxy.   if not,
  replace '%r' from string '\nServer stopped.\nNote that the test database, %r, has not been deleted. You can explore it on your own.',  with db_name, substitute it for shutdown_message.
  import module socket.
  substitute value for rest.
  try,
  return self._regex.
  join elements of base36 into a string, return it.
  call the method self._add_installed_apps_translations.
  comment_notes is an empty list.
  define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  and sub_widgets set to return value of the function sub_ul_renderer.render, append the result to output.   if not,
  raise an AttributeError with an argument attr.
  return dec.
  define the method __init__ with arguments self, stream and boundary.
  return self.content
  if ImproperlyConfigured exception is caught,
  subtract length of dec_part from decimal_pos, multiply the number of character '0' by the result,
  append error_class converted into a string to string 'errorlist ', substitute the result for self.error_class.
  from django.utils.six.moves.urllib.parse import urlsplit and urlunsplit into default name space.
  property decorator,
  for ever app_config in return value of the method apps.get_app_configs,
  convert value into an integer.
  from django.core.serializers.json import DjangoJSONEncode into default name space.
  define the method urlencode with 3 arguments: self and safe set to None.
  call the models.Model.save_base method with arguments self.object, using as using and raw set to boolean True.
  from django.utils.itercompat import is_iterable into default name space.
  call the method self.get_resolved_arguments with context as an argument, substitute the result for resolved_args and resolved_kwargs.
  define the method pop with 2 arguments: self and idx set to negative integer 1.
  if kwds is true,
  derive the class CsrfTokenNode from Node base class.
  substitute self.pointer for i.
  import module codecs.
  if i is smaller than integer 0,
  return boolean False.
  for every a and n in targets, put a into a set, join all the set elements into a string separated by string ', ',
  do nothing.
  if other is an instance of BaseContext class,
  return an instance of DebugNodeList class.
  if key is contained in d,
  if s is an instance of bytes or Promise and s._delegate_bytes is true,
  if value is an instance of six.string_types and value converted to lowercase is not equal to strings 'false' or '0',
  if self.language is not None,
  from functools import wraps, update_wrapper and WRAPPER_ASSIGNMENTS into default name space.
  use the result as an argument for the call to the function force_text, return the result.   call the function allow_lazy with 2 arguments: urlunquote_plus and six.text_type, substitute the result for urlunquote_plus.
  derive the class AssignmentNode form the base class TagHelperNode.
  try,
  increment i-th element of result by piece.
  " normal uploaded files. Check for malicious upload activity; if there is none, report this to the Django developers.".   derive the class ChunkIter from the six.Iterator base class.
  define the function _sanitize_ipv4_mapping with an argument ip_str.
  if fake is true,
  call the function get_commands, call the method keys on the result, substitute sorted result for usage.
  for every i and char in enumerated text,
  if version is None,
  if middleware has an attribute 'process_response',
  define the function get_language_from_request with 2 arguments: request and check_path set to boolean False.
  call the method __deepcopy__ with an argument memo, from the base class of the class MultiValueField, substitute the result for result.
  num is an integer 0.
  define the method render with 2 arguments self and context.
  from PIL module import ImageFile as PillowImageFile.
  call the method self.to_python with an argument value, strip the whitespaces from the result, substitute it for value.
  replace '%s' in string "%s = %s  ###" with key and value under the key key of the user_setting dictionary, append it to the output.
  if template_tuple is contained in TemplateDoesNotExist,
  define the method _setup with an argument self.
  return an empty string.
  self.new_objects is an empty list.
  default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string,
  import module opera.
  append name to self._changed_data.
  "RobotFileParser", "robotparser", "urllib.robotparser".   for every attr in _urllib_robotparser_moved_attributes,
  if AttributeError exception is caught,
  if f doesnt has an 'save_form_data' attribute,
  call the json.dump function with 4 arguments: return value of the method self.get_dump_object called with an argument obj,  self.stream, cls set to DjangoJSONEncoder and unpacked dictionary self.json_kwargs.
  define the method write_items with 2 arguments: self and handler.
  call the method handler.addQuickElement with 2 arguments: string 'email' and value under the 'author_email' key of the self.feed dictionary.
  call the method package.rindex with 3 arguments: string '.', integer 0 and dot, substitute the result for dot.
  remove first two elements from bits.
  replace '%s' in string "Downloading %s\n", with display_url, write it to self.stdout stream.
  decorator function register.filter with 3 arguments string "slice", is_safe set to boolean True and needs_autoescape set to True.
  call the method self.field.widget.subwidgets with 3 arguments: self.html_name, return value of the method self.value and attrs,
  if ValueError or TypeError exceptions are caught,
  if s is an instance of bytes class,
  call the method self.configure_custom with an argument config, substitute the result for result.
  call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary, substitute the result for table.
  try,
  if namespaces is true,
  if 'Location' is contained in response and function request.get_host evaluates to True,
  call the middleware_method with the request as an argument, substitute the result for response.
  raise an FieldError exception with an argument message.
  call the function parse_bits with 8 arguments: parser, bits, params, varargs, varkw, defaults, takes_context and function_name,
  if KeyError, renamed to key, exception is caught,
  call the function func with 3 arguments: obj, autoescape set to context.autoescape and unpacked list arg_vals,
  from django.conf import settings into default name space.
  from collections import OrderedDict into default name space.
  substitute the value under the entry key of the sys.path_importer_cache dictionary for finder.
  define the method _init_translation_catalog with an argument self.
  call the salted_hmac with 3 arguments: salt, value and key, call the digest method on the result,
  parsed is boolean True.
  call the method self.close.
  import time module.
  append options to output.
  define the method __str__ with an argument self.
  call the function get_template_from_string with 3 arguments: source, origin and template_name, substitute the result for template.
  return nothing.
  otherwise if first element of g equals a string "'",
  get attribute class_name form the module object, return it.
  substitute it for callback, if the attribute doesnt exists, callback is None.   if not callback,
  COMMENT_TAG_START is a string '{#'.
  call the method cls.__promise__ with 3 arguments: resultclass, k and v, substitute the result for meth.
  self._errors is an empty list.
  if header_end equals integer negative 1,
  substitute content_type_extra for self.content_type_extra.
  if not,
  call the method threading.RLock, substitute the result for self._lock.
  call the method self.validate_key with argument key.
  otherwise if self.use_ipv6 is true and _fqdn is false,
  call the method self._setup.
  if six.PY2 is true,
  try,
  if limit_choices_to is callable object,
  define the method __init__ with 5 arguments: self, val_expr, max_expr, max_width and asvar set to None.
  if not,
  substitute nodelist for self.nodelist.
  return boolean True.
  raise an ValueError with an argument string "Could not find common ancestor of %s", where '%s' is replaced with migration_names.
  convert ret to a boolean, return it.
  for every field in model._meta.fields,
  if contents is false, substitute self.label for contents.
  request_middleware is an empty list.
  return the directory name two directories up from the __file__ path, join it with 'conf' and 'locale' into valid path, separated by '/', basedirs is a list containing 2 elements: previous result and string 'locale'.
  define the method handle_raw_input with arguments: self, input_data, META, content_length, boundary and encoding set to None.
  define the method convert with 2 arguments: self and value.
  call the method __get__ with 2 arguments: instance and owner, from the base class of the classonlymethod class, return the result.
  self.charset is None.
  call the method utility.execute.
  return a tuple with 2 elements: resource and string 'egg:%s:%s', where '%s' is replaced with app_config.name and pkg_name, respective.
  excluded_apps is an empty set.
  perform bitwise OR with 2 operands: previous result and result, substitute the result for result.   if result is equal to integer 0, return boolean True, otherwise return boolean False.
  and result of the function humanize called with an argument fixture_dir.   if length of fixture_files_in_dir is greater than 1,
  if first is true,
  default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string,
  if not,
  for every statements in sql_statements:
  import module warnings.
  call the function binascii.hexlify with an argument x, convert the result to base 16 integer, return the result.
  return an empty list.
  pop the first element from plist, convert it to lowercase, call the method decode on it, with string 'ascii' as an argument,
  try,
  substitute environ for self.META.
  append tempdir to self.self.paths_to_remove.
  define the method forms with an argument self.
  with arguments cookie_value and max_age set to max_age.   if signing.BadSignature exception is caught,
  if exception LookupError is caught,
  if self.output_transaction is true,
  call the function allow_lazy with 2 arguments: linebreaks, six.text_type, substitute the result for linebreaks.
  get the value under the key 'database' of the options dictionary, use it as a index to get an element from connections, substitute it for connection.
  prefix the base64d with a '.' character.
  otherwise substitute settings.USE_L10N for use_grouping.   if use_grouping is true substitute it for use_grouping, otherwise substitute force_grouping for use_grouping.
  if not,
  define the method __exit__ with self, exc_type, exc_value and tb as arguments.
  reminder of the division of floored result of division of seconds by 60, by integer 60.   define the method P with an argument self.
  call the method zfile.close.
  if urlconf_name is not an instance of six.string_types class,
  while RUN_RELOADER is true.
  format truncate with a dictionary with an element: text for 'truncated_text', return the result.
  property decorator,
  call the method __new__ with 4 arguments: cls, name, bases and attrs, from the base class of the class RenameMethodsBase.
  return template.
  for every k and v in return value of the ret.items function,
  call the method command.stdout.write with an argument errors.
  if lib is false,
  'ModelChoiceField', 'ModelMultipleChoiceField', 'ALL_FIELDS', 'BaseModelFormSet', 'modelformset_factory', 'BaseInlineFormSet',   and 'inlineformset_factory'.   ALL_FIELDS is a string '__all__'.
  return None.
  from django.utils.six.moves import _thread as thread into default name space.
  from __future__ import unicode_literals into default name space.
  substitute server for self._servers.
  self.nodelist_empty is an instance of NodeList class.
  if not_installed_models is true,
  return self._non_form_errors.
  derive the class StringOrigin form the base class Origin.
  substitute self for value under the 'block' key of context dictionary.
  default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid date/time.' for 'invalid'.
  substitute token.source for e.django_template_source.
  while remaining is not equal to integer 0,
  join dirpath and dirname into a file path, use is as an argument for the call to the function os.path.join,
  if sep is an instance of unicode,
  where '%s' is replace by regex and return value of the function six.text_type with an argument e.   substitute the compiled_regex for value under the language_code key of the self._regex_dict dictionary.
  call the method parser.parse, return the result.
  call the function new_method_proxy with an argument operator.setitem, substitute the result for __setitem__.
  from __future__ import unicode_literals into default name space.
  define the method incr with self, key, delta defaulting to integer 1 and version defaulting to None as arguments.
  set self.name attribute of the obj object to result.
  derive the class VariableNode form the base class Node.
  "django.core.serializers.python" for "python", "django.core.serializers.json" for "json",   and "django.core.serializers.pyyaml" for "yaml".   _serializers is an empty dictionary.
  app_config, connection.alias and include_auto_created set to boolean True.   call the method connection.creation.sql_create_model with arguments model, style and known_models, substitute the result for output and references.
  define the method handle_file_complete with 3 arguments: self, old_field_name and counters.
  call the method Image.open with an argument file, on the result call the verify method
  call the method router.db_for_read with self.cache_model_class as argument, substitute the result for db.
  try,
  get the type of self object, call its method __bool__ with an argument self, return the result.
  from functools import total_ordering.
  get the value under the self key of the context.render_context dictionary, substitute it for cycle_iter.
  from django.utils import six into default name space.
  import module mimetypes.
  return all the results in a list.   decorator function register.filter with an argument is_safe set to boolean True.
  substitute next_item for sublist_item.
  try,
  define the method update with 2 arguments: self and other_dict.
  derive class Command from the TemplateCommand base class.
  for every i and choice in enumerated iterable self.choices,
  try,
  using_sysrandom is boolean True.
  if ImportError exception is caught,
  substitute _itervalues for values.
  define the function get_language.
  substitute BOOL for LockFileEx.restype.
  from django.utils.itercompat import is_iterable into default name space.
  define the function extract with 2 arguments path and to_path set to empty string.
  try,
  convert timeout into an integer.
  from django.utils.module_loading import import_string into default name space.
  import module base64.
  raise an InvalidTemplateLibrary exception with an argument string "ImportError raised loading %s: %s",
  substitute key for result.key.
  return s.
  if not self._mutable,
  call the function timezone.make_aware with arguments value and current_timezone, return the result.
  strings "Please submit %d or more forms.", "Please submit %d or more forms." and self.min_num,   where '%d' is replaced with self.min_num, and code as a string 'too_few_forms'.   call the method self.clean.
  return None.
  return an instance of a dummy class.
  from lib2to3 import fixer_base into default name space.
  from django.utils import six into default name space.
  for every location in format_locations,
  call the method parser.add_argument with 3 arguments: string 'args', metavar set to string 'app_label' and nargs set to '*'.
  define the method __new__ with 5 arguments: cls, fget set to None, fset set to None, fdel set to None and doc set to None.
  try,
  "apps registry is ready. Check that you don't make non-lazy gettext calls at import time.".   for every app_config in app_configs,
  try,
  define the function constant_time_compare with 2 arguments: val1 and val2.
  empty is an instance of object class.
  return a string '%02d' formated with self.data.second.
  call the function user_function with 2 arguments: unpacked list args and unpacked dictionary kwds, substitute the result for result.
  if AmbiguityError exception is caught,
  call the method _time.localtime with an argument stamp, substitute the result for tt.
  convert e to a string, substitute it for error_text.
  substitute name for self.__name.
  substitute it for value of dictionary response under the key 'Vary'.   define function has_vary_header, with response and header_query as arguments.
  define the function get_language_bidi.
  get the next element of the iterable pattern_iter, assign the result for ch2 and escaped, respectively.
  if commit is true,
  return an empty string.
  substitute FILE for TYPE.
  call the function type with an argument self, on the result call the method __next__ with an argument self, return the result.
  call the method MIMEMessage.__setitem__ with arguments self, name and val.
  if self.username and self.password are true,
  raise a ValueError exception with an argument string "JSON can't represent timezone-aware times.".
  define method value_encode with self class instance and val as arguments.
  call the method formats.get_format_lazy with an argument string 'TIME_INPUT_FORMATS', substitute the result for input_formats.
  if transfer_encoding equals a string 'base64',
  define the method filter with 4 arguments: self, name set to None, filter_func set to None and unpacked dictionary flags.
  call the function escape with an argument word, substitute the result for i-th element of words.
  define the __init__method with arguments self and exception.
  convert exclude elements to list, substitute it for construct_instance_exclude.
  find the first, second and third subgroup of the m regular expression match, assign the result to the attrname, rest and attrvalue, respectively.
  define lambda function that returns self.file.tell field, use it as an argument for property function, put the result in tell.
  try,
  if six.PY2 is true,
  use it as an argument for the call to the function os.path.normpath, substitute the result for django_dir.   if self.domain equals a string 'djangojs',
  call the method self._coerce with an argument value, return the result.
  otherwise, if field.rel is true and field.rel is an instance of models.ManyToOneRel,
  close the file stream.
  return string "<Block Node: %s. Contents: %r>", where '%s' is replaced with self.name and '%r' with self.nodelist.
  value is an empty list.
  call the function calculate_app_template_dirs, substitute the result for app_template_dirs.
  if self is not contained in state_frame,
  from shutil import copystat into default name space.
  substitute boundary for self.boundary.
  from django.utils.text import smart_split, unescape_string_literal and get_text_list into default namespace.
  call the method re.compile with 2 arguments: raw string """^(?: (?P<addr> (?P<ipv4>\d{1,3}(?:\.\d{1,3}){3}) |"""
  read data from buf, yield the result.
  result_args is a list containing an empty list.
  if now equals to boolean True and now is not an instance of datetime.datetime,
  substitute new_attr for self.attr.
  if not,
  comment is an empty list.
  call the method apps.setdefault with 2 arguments: pattern and an empty list, append to the resulting object pattern.namespace.
  return a string "%s%02d%02d" formated with sign, floored result of the division of seconds by integer 3000,
  increment i by integer 1.
  request_queue_size is integer 10.
  assign it to value under the string ".moves.urllib_response" appended to __name__ key of the sys.modules dictionary,   and to value under the string ".moves.urllib.response" appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_robotparser from the _LazyModule base class.
  if value has an attribute '__iter__' and value is not an instance of six.text_type,
  pos is equal to integer 0.
  if content is not None raise an error.
  substitute formfield.limit_choices_to for limit_choices_to.
  use its __file__ field as an argument for the call to the function upath, substitute the result for settingsfile.   call the function os.path.dirname with an argument settingsfile, join the result an string 'locale' into a file path,
  if self._errors is None,
  signal is a string 'signals'
  call the pickle.dumps function with value and pickle.HIGHEST_PROTOCOL as arguments.
  inner_result and inner_args are empty lists.
  raise an ValidationError with 3 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary,
  if "'stream'" is not contained in te converted into a string,
  try,
  self.deleted_objects is an empty list.
  define the method parse_endtag with self class instance and i as the arguments.
  raise an ExternalReferenceForbidden exception with arguments context, base, sysid and pubid.
  call the method ustring_re.sub with 2 arguments: fix and s, return the result.
  if param is contained in unhandled_params,
  define the method load_template_source with 3 arguments: self, template_name, template_dirs set to None.
  for every field in unique_check, if field is contained in form.cleaned_data.   create a generator that for every d in row_data, if d has an '_get_pk_val' attribute,
  call the method self.enter_command with 2 arguments command and token.
  try,
  do nothing.
  import module sys.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  define the method all with argument self.
  wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string " FAKED" as a argument.
  define the method widget_attrs with arguments self and widget.
  created with an argument widget set to HiddenInput.   value under the INITIAL_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class,
 define the function lazy with 2 arguments: func and unpacked list resultclasses.
  if ValidationError exception is caught,
  append tuple containing two entries: app_config.label and integer 0 to options, for every app_config in app_configs.
  return i.
  call the function warnings.warn with 2 arguments: string '"requires_model_validation" is deprecated '
  call the function ugettext with '0 minutes' as argument, use the result as the argument for the call to the avoid_wrapping function, return the result.
  if self.use_natural_foreign_keys is true and field.rel.to has an 'natural_key' attribute.
  call the serializer function, call the dumps method on the result with an argument obj, substitute result for data.
  supported is boolean True.
  define the method __init__ with 6 arguments: self, regex set to None, message set to None, code set to None,
  if slots is an instance of str,
  substitute value.year, value.month and value.day for year_val, month_val and day_val, respectively.
  derive the class BadHeaderError from the ValueError base class.
  creation_counter is an integer 0.
  use the result as an argument for the call to the function self._out.write.   derive the BaseCommand class from the object base class.
  raise an exception.
  from yaml import SafeLoader, SafeDumper into default name space.
  "to %s because it doesn't define __str__().", replace %s with string value of klass.__name__.   substitute __str__ filed of klass for __unicode__ field of klass.
  message is an string 'Unknown field(s) (%s) specified for %s'.
  split the string cc_delim_re with value under the key 'Vary' of response dictionary as delimiter, substitute result for vary_headers.
  skip this loop iteration.
  define the function decorator_from_middleware_with_args with an argument middleware_class.
  raise an TemplateSyntaxError exception with an argument string "%r expected at least one variable assignment",
  derive the class PermissionDenied from the Exception base class.
  call the method connection.ops.sequence_reset_sql with 2 arguments: return value of the no_style and self.models,
  define the method end_object with argument self and obj.
  try,
  define the function check_errors with argument fn.
  if self._callback is not None,
  return j.
  define the method to_python with arguments self and value.
  call the function inner.copy, substitute the result for dig1, call the function outer.copy, substitute the result for dig2.
  if pk.editable is true, or pk.auto_created is true or pk is an instance of AutoField class, or if pk.rel is true,
  domains is a tuple with 2 elements: strings 'djangojs' and 'django'.
  raise an exception,
  get the value under the DELETION_FIELD_NAME key of the form.cleaned_data dictionary, if it exists return it, if not, return boolean False.
  skip this loop iteration,
  define the method dumps with arguments self and obj.
  call the method var.resolve with 2 arguments: context and True, substitute the result for value.
  format string "%s%s%s" with 3 elements: result of the function random.getstate, result of the call the the function time.time,
  get config dictionary element under 'filters' key, if it exists substitute it for filters, if not, filters is EMPTY_DICT.
  _assertCountEqual is a strnig "assertCountEqual".
  substitute asvar for self.asvar.
  extend locations with tuple containing dirpath and f, for every f in filenames, only if it ends with string '.po'.
  return base.
  define the method __init__ with arguments self and connection_reset defaulting to boolean False.
  write raw_data to self.file file.
  if self.no_obsolete is true,
  define the function ssi with 2 arguments: parser and token.
  if exception ValueError or TypeError is caught,
  if self.default_locale_path directory doesnt exists,
  define the method __init__ with 3 arguments self, states and first.
  translation._catalog is an empty dictionary.
  if not,
  if TypeError exception is caught,
  from django.utils.safestring import mark_safe and SafeData into default name space.
  if cache is None,
  define the function handle_m2m with an argument value,
  define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options.
  define the method __dir__ with an argument self.
  call the function cache_get with an argument key, substitute the result for link.
  perform binary or for operands: fourth element of_attr_list and termios.ECHO, store the result in fourth element of attr_list.
  define the method add_prefix with 2 arguments: self and field_name.
  stats is an list with 2 elements: 2 integers 0.
  candidate_pat formated with candidate_subs and re.UNICODE.   candidate_subs is dictionary created from elements in return value of the function urlquote called with argument v,
  define the function find_template_loader with an argument loader.
  instantiate ValidationError class with an argument self.data, return its field error_list.
  call the function get_language, substitute the result for language_code.
  if origin is true,
  from django.utils import datetime_safe into default name space.
  or string 'ANICON' is in os.environ, substitute the evaluated boolean for supported_platform.   if sys.stdout has an attribute named 'isatty' and call to the sys.stdout.isatty returns boolean True, substitute True for is_a_tty.
  __dispatch is None.
  define the function last with an argument value.
  derive the class Debug from base class CheckMessage.
  define the method _resolve with an argument self.
  assign bits elements to yes, no and maybe, respectively.
  string '%Y-%m-%d', convert the result into a string and append it to ',', substitute the result for d.   format string 'tag:%s%s:%s/%s' with bits.hostname, d, bits.path and bits.fragment, return it.
  call os.path.splitext function with po_path as argument, substitute the first element of the result for base_path.
  call the function
  import module types.
  define the function slice_filter with 2 arguments value and arg.
  call the method settings.configure with an argument USE_I18N set to boolean True.
  call the function popen_wrapper with an argument args, assign the result to msgs, errors and status.
  define the method __reduce_ex__ with 2 arguments self and proto.
  return kwargs.
  dest set to string 'no_location', default as boolean False and help as a string "Don't write '#: filename:line' lines.".   call the method parser.add_argument with 5 arguments: string '--no-obsolete', action as a string 'store_true',
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  define the method __copy__ with an argument self.
  define the method has_leading_dir with 2 arguments self and paths.
  derive the class Lexer form the base class object.
  if self.data.hour is greater than integer 11,
  if cls._delegate_bytes and cls._delegate_text are both false, raise an error, with an argument string "Cannot call lazy() with both bytes and text return types.".
  if data is an instance of MultiValueDict or MergeDict,
  substitute timeout for self.default_timeout.
  raise an CommandError with an argument string "errors happened while running msgattrib\n%s", where '%s' is replaced with errors.
  raise an ViewDoesNotExist exception with an argument string "Could not import '%s'. View does not exist in module %s.",
  from django.contrib.auth import get_user_model into default name space.
  try,
  try,
  files and string created with concatenation of: name, string '_' and i converted into a string, return the results in a list.   define the method format_output with 2 arguments: self and rendered_widgets.
  call the self.incr method with key, negative delta and version set to version as arguments.
  if 'HTTP_HOST' is contained in self.META,
  from django.db.migrations.writer import MigrationWriter into default name space.
  define the method getlist with 2 arguments: self and key.
  call the function func with 2 arguments: unpacked list self.__args and unpacked dictionary self.__kw,
  new_ip is an empty list,
  call the function module_to_dict with an argument settings._wrapped, substitute it for user_settings.
  self._errors is None.
  use the global variable _serializers.
  define the __init__ method with 6 arguments: self, name, content_type, size, charset and content_type_extra set to None.
  from django.utils.six.moves.urllib.parse import urlsplit and urlunsplit into default name space.
  derive the class MaxValueValidator form the BaseValidator base class.
  call the method self.xml.startElement with 2 arguments, string "django-objects" and a dictionary containing 1 element: "1.0" for "version".
  substitute first element of parts for view.
  raise an TypeError exception with an argument string 'other_dict must be a mapping (dictionary-like) object.'.
  if length of bits is lesser than integer 2,
  call the cursor method on the value under the db key of connections dictionary, preform following with return value named cursor,
  define the method strftime with 2 arguments: self and fmt.
  for every tag in tags, are false,   for every tag in tags, if return value of the method checks.tag_exists called with an argument tag, evaluates to false,
  substitute False for self.close_called.
  dest set to 'format' and help is a string 'Specifies the output serialization format for fixtures.'.   call the method parser.add_argument with 5 arguments: string '--indent', default set to None, dest set to 'indent',
  if format is not contained in return value of the method serializers.get_public_serializer_formats,
  derive the class UTC from the tzinfo base class.
  call the method self.indent with argument integer 1.
  if self.validate_max is true, and length of self.deleted_forms subtracted from the return value of the method self.total_form_count,
  substitute TemplateDoesNotExist for self.find_template_cache dictionary value under the key key.
  exclude is an empty list.
  if timezone is None,
  append 'Z' to time_str, return the result.
  derive the class Atom1Feed from the SyndicationFeed base class.
  substitute name for new_mod.
  substitute elements of middle from the beginning to the negative length of punctuation, for middle.
  models is an empty set.
  call the method imatch.group with an argument integer 1, substitute the result for g.
  call the method self._resolve, substitute the result for result.
  call the cursor.close method.
  import module copy.
  return token.
  otherwise if value under the 'method' key of optins dictionary equals to string 'thread' or 'threaded',
  where 'strdq' is replaced with '"[^"\\]*(?:\\.[^"\\]*)*"', 'strsq' is replaced with "'[^'\\]*(?:\\.[^'\\]*)*'",   'i18n_open' is replaced with return value of function re.escape called with an argument string '_(',   'i18n_close' is replaced with return value of function re.escape called with an argument string ')'.   remove all occurrences of newline character from constant_string.
  SINGLE_BRACE_END is a string '}'.
  define the function b64_hmac with arguments salt, value and key.
  increment factor by one.
  RemovedInDjango19Warning and stacklevel as integer 2.   try,
  params is a dictionary with 2 initial entries: self.max_length for 'max' and length of file_name for 'length'.
  return self.forms element at the index index.
  substitute settings.DEFAULT_CHARSET for encoding.
  if f.db_index is true,
  do nothing.
  call the function self.compress with empty list as an argument, return the result.
  call the method pop from the base class of the class SortedDict, with 2 arguments k and unpacked list args,
  return a instance of the class Page, created with 2 arguments: unpacked list args and unpacked dictionary kwargs.
  return string '0'.
  response.content is bytes empty string.
  if fourth element of version does not equals to string 'alpha' or 'beta' or 'rc' or 'final', raise an exception.
  call method __init__ with argument params from the base class of the FileBaseCache.
  call the method self._reverse_with_prefix with 4 arguments: lookup_view, an empty string, unpacked list args and unpacked dictionary kwargs.
  get 'value' attribute of the _active object, if it exists return it, if not, call the function get_default_timezone and return the result.
  append t.contents to comment.
  from importlib import import_module into default name space.
  if key_function is callable object,
  call the self.style.HTTP_REDIRECT with an argument msg, substitute it for msg.
  define the function save_m2m.
  for every chunk in content.chunks function return value,
  if call to the method os.access with arguments: filename and os.W_OK, evaluates to false,
  define the method __nonzero__ with an argument self.
  register.tag decorator,
  return result.
  call the method message.message, substitute the result for msg.
  instantiate class Module_six_moves_urllib_response with an argument, string ".moves.urllib.response" appended to __name__,
  if self doesnt have an '_deleted_form_indexes' attribute,
  return a dictionary generated with an expression, return value of the method e.as_data for f,
  comment_lineno_cache is None.
  do nothing.
  if not,
  get the attribute 'extend' of the cls object, if it exists substitute it for extend, if not extend is boolean True.
  call the method self.save_existing with 3 arguments: form, obj and commit as commit, append the result to saved_instances.
  derive the class Http404 from the Exception base class.
  substitute self.old_timezone for _active.value.
  define the function create_bound_function with 2 arguments: func and obj.
  from django.core.exceptions import DisallowedHost and ImproperlyConfigured into default name space.
  if o.microsecond is true,
  derive the class TarArchive from the BaseArchive base class.
  if self.file has an attribute 'size',
  call the method result.setlist with 2 arguments: return value of the function copy.deepcopy called with 2 arguments: key and memo,
  define the function strip_tags with an argument value.
  from email.mime.multipart import MIMEMultipart into default name space.
  try,
  call the method clean with an argument value from the base class of the EmailField class.
  msgattrib_options is an list with elements: string '--no-obsolete'.
  define the function urlencode with 2 arguments query and doseq set to integer 0.
  for every i in range of integers from integer 0 to the length of pieces decremented by one, with step of integer 3,
  errors is an empty list.
  from __future__ import absolute_import into default name space.
  define the method add_arguments with an argument self and parser.
  method lru_cache.lru_cache with an argument maxsize set to None, as a decorator,
  decorator classmethod,
  if self._upload_handlers is false,
  define the method _has_expired with self and key as arguments.
  shown is an empty set.
  return None.
  from django.forms.utils import flatatt and to_current_timezone into default name space.
  call the function get_ns_resolver.cache_clear.
  define the method parse_name with arguments self and fixture_name.
  self.stderr is an instance of an OutputWrapper object, created with 2 arguments: value under the 'stderr' key of the options dictionary, if it doesnt exists use the sys.stderr instead, and self.style.ERROR.
  define the method __init__ with 3 arguments: self, include_html set to boolean False and email_backend set to None.
  add decimal_sep and dec_part, substitute the result for dec_part.
  output is an empty list.
  substitute target and expression for self.target and self.expression, respectively.
  combined is an instance of Media class.
  if self.is_required is false,
  define the method __repr__ with an argument self.
  while i is lesser than length of subject and i-th element of subject is an empty space or tab character.
  define the function iterbytes with an argument buf.
  replace '%s' in string "%s, from %s" with second and first element of the first targets row, respectively,
  if call to the method finder.find_module with an argument name evaluates to true,
  substitute first element of self.argv for subcommand.
  return boolean False.
  with an argument curr, sort the result and join it in a list separated with blank spaces, print it to the standard output.   otherwise if first element of cwords is contanied in subcommands and is not equal to string 'help',
  substitute python_reloader for reloader.
  delete the value under the key key of the self._expire_info dictionary.
  append string '0000' to new_ip.
  define the method __repr__ with an argument self.
  if six.PY3 is true,
  define the method full_clean with an argument self.
  if new is None,
  append truncate_text to out.
  '<tr%(html_class_attr)s><th>%(label)s</th><td>%(errors)s%(field)s%(help_text)s</td></tr>', error_row set to a a string,   '<tr><td colspan="2">%s</td></tr>', row_ender set to a string '</td></tr>', help_text_html set to a string,   '<br /><span class="helptext">%s</span>' and errors_on_separate_row set to boolean False.   define the method as_ul with an argument self.
  if port exists substitute it for self.host, if not substitute settings.EMAIL_PORT for self.port.
  call the method self.write_migration_files with an argument changes.
  substitute '%s' in string 'id_%s' with name, return it.
  define the method has_next with an argument self.
  if self.settings_exception is not None,
  if widgets is not None,
  input_type is a string 'checkbox'.
  if key if contained in value under the DEFAULT_CACHE_ALIAS key of caches dictionary, return boolean True, otherwise return False.
  define the method add_fields with 3 arguments: self, form and index.
  created with 2 arguments: required as boolean False and widget set to HiddenInput.   value under the MAX_NUM_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class,
  for every program in programs,
  self.objects is an empty list.
  if index is not an instance of six.integer_types or tuple type,
  if IndexError exception is caught,
  call the self.load_middleware method.
  raise an TemplateSyntaxError exception with an argument string '"filter %s" is not permitted.  Use the "autoescape" tag instead.',
  if length of bits is smaller than integer 2 or second last element of bits is not equal to 'as',
  media is an instance of Media class.
  call the method self.registered_checks.append with argument check.
  call the function _slugify with an argument value, return the result.
  VARIABLE_ATTRIBUTE_SEPARATOR is a string '.'.
  flags is a integer 0.
  derive the class CacheClass from the DummyCache base class.
  for every condition and nodelist in self.conditions_nodelists,
  target_app_labels_only is boolean True.
  import module time.
  return plural.
  get the value under the funcname key of the t-th elment of self.__dispatch dictionary, call the result with 3 arguments: res,
  if KeyError exception is caught,
  if self.flags is true and self.regex is not an instance of a six.string_types type,
  append None to bits.
  if first element of message_context equals to character '"',
  otherwise if cahr equals a string '\\',
  throw an exception with string "unexpected call to parse_endtag" as the message.   search anywhere in the rawdata string starting from the (i+1)-th element for the _html_parser.endendeag, replace the result for match.
  call the function find_template with 2 arguments: template_name and dirs, substitute the result for template and origin.
  derive the class TemplateDoesNotExist form the base class Exception.
  file is an instance of BytesIO class created with an argument: return value of the method data.read.
  call the method match.groups with 2 arguments: key and value.
  substitute the result for qs.   pks is a set containing results of the call to the function force_text with an argument, key attribute of the o object,
  call the method self.make_key with key and version set to version as arguments, substitute the result for key.
  define the function gettext_noop with an argument message.
  where '%s' is replaced with final_path and base_path.   return final_path.
  define the function slugify with an argument value.
  __all__ is a tuple containing strings: 'UploadedFile', 'TemporaryUploadedFile', 'InMemoryUploadedFile' and 'SimpleUploadedFile'.
  data is an dictionary with 2 initial entries: return value of the smart_text function with the argument obj._meta for 'model',
  if six.PY2 is true and rawdata is an instance of the type six.text_type.
  if app_dir is a directory,
  for every app_name and model_list in return value of manifest.items method,
  if typed is true,
  call the method timezone.is_aware with an argument expires, if it evaluates to true,
  call the function pickle.dumps with value and pickle.HIGHEST_PROTOCOL as the arguments, substitute the result for pickled.
  if PY3 is true,
  if not,
  call the method handler.startElement with 2 arguments: string "channel" and result of the method self.root_attributes.
  from django.core.management.sql import sql_destroy_indexes into default name space.
  call the method self.make_key with key and version set to version as arguments, substitute it for key.
  substitute '%s' in string "%s_%s%s" with: file_root, next(count) and file_ext, join the dir_name and previous string into a valid file path, substitute it for name.
  substitute file_name for self.file_name.
  define the method _set_name with arguments self and name.
  define the method __init__ with 2 arguments: self and timezone.
  lines is an empty list.
  call the method field.rel.to._default_manager.db_manager with an argument self.db, on the result call the method get_by_natural_key,
  define the method __init__ with 4 arguments: self, out, style, func set to None and endings set to newline character.
  try,
  try,
  dest as a string 'keep_pot', default as boolean False and help as a string "Keep .pot file after making messages. Useful when debugging."   define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options.
  append string 'django.conf.locale.%s' to format_locations.
  if bf.label is true,
  call the method blankout with 2 arguments: part and 'S', write the result to out.
  define the method __init__ wiht 5 arguments: self, META, input_data, upload_handlers and encoding set to None.
  call the method self.get_backend_timeout with argument timeout, substitute the result for timeout.
  join migrations_directory and string "__init__.py" into a file path, substitute it for init_path.
  substitute regex for self.regex.
  define the function deconstruct with an argument obj.
  do nothing.
  call the method self.add_library with an argument lib.
  call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'app_label[.ModelName]',
  define the method M with an argument self.
  import module cgi.
  substitute item_date for latest_date.
  from django.utils.encoding import force_bytes, force_str and force_text into default name space.
  increment objects_in_fixture by one.
  substitute reason for self.reason_phrase.
  define the function pluralize with 2 arguments value and arg set to character 's'.
  call the get_deserializer function with an argument format, substitute the result for d.
  request is None.
  supports_microseconds is boolean False.
  if first element of g equals a string '"',
  import module re.
  define the method find_fixtures with arguments: self and fixture_label.
  return self.cleaned_data.
  if len_values is smaller than integer 1,
  call the function ungettext with 3 arguments: string "%(size)d byte", string "%(size)d bytes" and 0, '%(size)d' is replaced with 0,
  remove idx-th element from self list.
  return boolean False.
  if filename ends with string "$py.class",
  otherwise if value under the 'CONTENT_TYPE' key of hte self.META dictionary starts with 'application/x-www-form-urlencoded',
  from django.utils.encoding import force_text and force_str into default name space.
  add app_config to excluded_apps set.
  compile regular expression based on the string '\s*,\s*' and assign the result to cc_delim_re.
  decorator function register.filter with an argument is_safe set to boolean True.
  where '%s' is replaced with migration_name and app_label.   if KeyError exception is caught,
  return result.
  if the result is equal to the result of the call to the function force_text with data_value as an argument, return boolean True,   otherwise return boolean False.   derive the class ModelMultipleChoiceField from the ModelChoiceField base class.
  call the method stream.unget with an argument chunk.
  if self.selected_fields is None or last three elements of field.attname are contained in self.selected_fields:
  return self.STDOFFSET.
  value under the 'unique' key of the extra_params dictionary is boolean True,
  raise an MultiPartParserError with an argument string 'multipartparser.exhaust() was passed a non-iterable or stream parameter'.
  substitute self.toks for toks.
   substitute code for self.code.
  define the method __init__ with an argument self.
  if timeout is None,
  if error_messages is not None,
  raise a ValidationError exception with arguments self.message, code set to self.code and params set to params.
  if self.silent is true,
  substitute package.__path__ for package_path.
  format key is an empty string.
  raise an ValueError exception with an argument string "Base36 conversion input too large.".
  substitute field_name for self.field_name.
  sum of the result of the function time.time and max_age, substitute it for 'expires' key of the previously returned dictionary.   if path is not None,
  decorator function lru_cache.lru_cache with an argument maxsize set to integer 1000.
  define the private method __init__, with self instance of this class, obj and list of arbitrary length *args as arguments.
  call self.stdout.write method with app_name and self.style.MIGRATE_LABEL as arguments.
  try,
  define the method created_time with arguments self and name.
  yield a tuple with 2 elements: an empty string and self.field.empty_label.
  if fk.unique is boolean true,
  substitute the '%s' with table and list containing first element of cursor.fetchone method, respectively.   define the method clear with argument self.
  define lambda function that returns self.file.seek field, use it as an argument for property function, put the result in seek.
  convert value into an floating point number, substitute it for value.
  otherwise return boolean False.   if not,
  from xml.dom import pulldom into default name space.
  define the function _set_response_etag, with response as an argument.
  if six.PY2 is true,
  define the function module_to_dict with 2 arguments: module and omittable as a lambda function with an argument k,
  self._empty is boolean False.
  return six.text_type(s).encode(encoding, errors).
  return self._errors.
  from django.core.exceptions import SuspiciousFileOperation into default name space.
  derive the class DefaultStorage from the LazyObject base class.
  import module os.
  substitute self._wrapped for repr_attr.
  if TypeError or ValueError exceptions are caught,
  call the method formats.time_format with 2 arguments: value and arg, return the result.
  define the function csrf_token with 2 arguments: parser and token.
  substitute val for self._encoding.
  define the function pbkdf2 with 5 arguments: password, salt, iterations, dklen set to integer 0 and digest set to None.
  import module sys.
  call the function next with an argument cycle_iter, call the method resolve on the result with an argument context, substitute the result for value.
  substitute the result for time_str.   if six.PY2 is true,
  if content_type is false,
  subject is an string '%s (%s IP): %s', formated with record.levelname, string 'internal' if value under the 'REMOTE_ADDR' key,
  if not self.to_field is None.   if self.parent_instance is not None,
  if v is an instance of list or tuple type,
  for every i and ext in enumerated iterable ext_list,
  self.app_label is a string 'django_cache'.
  cached_property decorator,
  get greater value between integer 1 and result of subtraction of self.orphans from self.count, substitute it for hits.
  p is image parser object, set by calling the PillowImageFile.Parser method.
  return boolean False.
  string 'DECIMAL_SEPARATOR', lang and use_l10n set to use_l10n, decimal_pos, result of the function get_format called with 3 arguments:   string 'NUMBER_GROUPING', lang and use_l10n as use_l10n, result of the function get_format called with an argument:   string 'THOUSAND_SEPARATOR', lang and use_l10n as use_l10n and force_grouping as force_grouping, return the result.   define the function localize with 2 arguments value and use_l10n set to None.
  compare is a lambda function with arguments self, a and b, return value is boolean true if a is lesser than b, otherwise is false.
  and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than other or self is equal to other,   tuple with 2 elements: string '__le__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is lesser than other or self is equal to other,   tuple with 2 elements: string '__ge__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than other, for '__lt__',   list with 3 tuples: tuple with 2 elements: string '__ge__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than or equal to other,   or self is equal to other, tuple with 2 elements: string '__lt__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is lesser than or equal to other,   or self is not equal to other, tuple with 2 elements: string '__gt__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than or equal to other, for '__le__',   list with 3 tuples: tuple with 2 elements: string '__lt__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is greater than other or self is equal to other,   tuple with 2 elements: string '__ge__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is greater than other or self is equal to other,   tuple with 2 elements: string '__le__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is greater than other, for '__gt__',   and list with 3 tuples: tuple with 2 elements: string '__le__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is not greater than or is not equal to other,   or self is equal to other, tuple with 2 elements: string '__gt__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is greater than or not equal to other,   or self is not equal to other, tuple with 2 elements: string '__lt__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is greater than or equal to other, for '__ge__',   convert cls to a dictionary, convert the result into a set and convert convert into a set, roots is a set of differences of the two previous sets.
  self.to is an empty list.
  derive the class ResolverMatch with object as base class.
  help is a tuple containing a string: 'Removes ALL DATA from the database, including data added during '
  call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary, substitute the result for table.
  call the method field._has_changed with 2 arguments: initial_value and data_value, if it evaluates to true,
  link is a list with 4 elements: last, root, key and result.
  yield ch and boolean False.
  otherwise if tzinfo is not None,
  return boolean True.
  if self has an 'requires_system_checks' attribute, has_new_option is boolean True, otherwise it is boolean False.
  write it to self.stdout stream.   replaces is an empty list.
  import module copy.
  substitute value under the key key of the self.COOKIES dictionary, substitute it for cookie_value.
  define the method get_backend_timeout with self class instance and timeout set to DEFAULT_TIMEOUT as arguments,
  otherwise if value under the key 'all' of the options dictionary is true,
  update attrs dictionary with entry: self.max_length converted into a string for 'maxlength'.
  increment i by integer 1,
  compile self.match regular expression, substitute it for self.match_re.
  return statements.
  if AttributeError exception is caught,
  for every medium in extend,
  define the function do_ifequal with 2 arguments: parser, token and negate.
  define the function ngettext with 4 arguments: context, singular, plural and number.
  TemplateSyntaxError and VariableDoesNotExist.   from django.template.base import Context, FilterExpression, Lexer, Node, NodeList, Parser, RequestContext, Origin, StringOrigin,
  string 'Select a valid choice. That choice is not one of the available choices.' for 'invalid_choice'.   define the method __init__ with 13 arguments: self, queryset, empty_label set to a string  "---------", cache_choices set to None,
  call the method self.validate_key with argument key.
  is self.data has an attribute 'tzinfo' and self.data.tzinfo is true,
  while i is lesser than length of subject and i-th element of subject is an empty space or tab character,
  if LookupError exception is caught,
  if resource_string is not None, is_usable is boolean True, otherwise is_usable is boolean False.
  define the method __init__ with 3 arguments: self, tup and hash set to hash.
  derive the class SafeMIMEMultipart from the MIMEMixin and MIMEMultipart base class.
  if stream_created is true,
  convert config_string to lowercase and split it by ';' character, substitute the result for parts.
  call the function force_text with an argument first element of args, substitute the result for first element of args.
  if s is an instance of SafeData.
  import module hashlib.
  if attr is an instance of MovedModule.
  "|^"([\001-\010\013\014\016-\037!#-\[\]-\177]|\\[\001-\011\013\014\016-\177])*"$)" and re.IGNORECASE, substitute the result for user_regex.    call the re.compile function with 2 arguments: raw string '(?:[A-Z0-9](?:[A-Z0-9-]{0,247}[A-Z0-9])?\.)+(?:[A-Z]{2,6}|[A-Z0-9-]{2,}(?<!-))$',
  return s.
  define the function get_standard_processors.
  if not,
  import module zlib.
  substitute label for app_label.
  if constant is true,
  define the function render_value_in_context with 2 arguments: value and context.
  if args in None of boolean False, substitute it for an empty list.
  define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  from django.core.management.sql import custom_sql_for_model, emit_post_migrate_signal and emit_pre_migrate_signal into default name space.
  define the method _cull with argument self.
  if not,
  define the function mark_safe with an argument s.
  return wrapper.
  self.translate is boolean False.
  if self.verbosity is greater or equal to integer 2,
  in the string "<%s: level=%r, msg=%r, hint=%r, obj=%r, id=%r>", replace '%s' with the name of the type of this class instance,
  get the id of the self object, use it as a key to obtain the value from the memo dictionary, substitute self with it.
  self.translate is boolean True.
  call the method dig2.digest, substitute the result for u.
  define the method _set_queryset with 2 arguments: self and queryset.
  call the __init__ method from the base class of the SimpleUploadedFile class with 7 arguments: BytesIO(content), None, name,
  leave_locale_alone is boolean True
  if get_git_changeset has an attribute 'cache',
  call the function t.render with an argument context, return the result.
  if bcc is not an six.string_types instance raise an error with message string '"bcc" argument must be a list or tuple'.
  return output.
  return path,
  while path is true,
  return data.
  replace every occurrence of '\\' in url with '/'.
  substitute the result for sequence.   call the method parser.parse with an argument tuple with 2 elements strings 'empty' and 'endfor', substitute the result for nodelist_loop.
  with the result renamed to fp, perform the following:   write msgs to fp.
  return nothing.
  call the method self.compile_function_error with 2 arguments token and e, if it evaluates to false,
  from django.utils import six into default name space.
  self.namespaces is an empty list.
  self.resolver_match is None.
  matches is boolean True,
  import module sys.
  return value.
  for every lineno and line is enumerated result of the method content.splitlines, called with an argument boolean True,
  call the method obj.natural_key, substitute the result for natural_key.
  from django.db.migrations.state import ProjectState into default name space.
  substitute title for sublist_item.
  import module importlib.
  if ValueError or TypeError exceptions occurred,
  import module contextlib.
  define the method __init__ with 3 arguments self and unpacked list args and unpacked dictionary kwargs.
  call the method self.check_migrations.
  if dt.year is greater than or equal to integer 1900,
  derive the class MultipleHiddenInput from the HiddenInput base class.
  from django.template.base import Variable, Library and VariableDoesNotExist into default name space.
  call the method base.__dict__.items, for every attr and value in the result,
  if value under the 'debug' key of options dictionary is not None, substitute it for value under the 'debug' key of wsgi_opts dictionary.
  if not,
  call the method self.attrs.copy, substitute the result for attrs_plus.
  substitute self for data.
  _error_files is an empty list.
  call the function base.DeserializedObject with obj and m2m_data as arguments, yield the result as the generator return value.
  convert orphans into an integer and substitute it for self.orphans.
  call the function allow_lazy with 2 arguments: wrap and six.text_type, substitute the result for wrap.
  call the method self.render_node with 2 arguments: node and context, substitute the result for bit.
  substitute subject for self.subject.
  call the function get_resolver with an argument urlconf, substitute the result for resolver.
  from django.conf import settings into default name space.
  if result is not None,
  define the method items with an argument self.
  if cls is false,
  return value.
  assign the result to the value under the string ".moves.urllib_request" appended to __name__ key of the sys.modules dictionary,   and to the value under the string ".moves.urllib.request" appended to __name__ key of the sys.modules dictionary.   derive class Module_six_moves_urllib_response from the _LazyModule base class.
  asvar is None.
  define method GET with self class instance as an argument.
  derive class Command from the base class AppCommand.
  substitute self.state for state.
  from __future__ import unicode_literals into default name space.
  if not,
  import module inspect.
  call the method copy.deepcopy with 2 arguments: self._wrapped and memo, return the result.
  from django.http import QueryDict into default namespace.
  append site to sites.
  self.__class__.__module__ and self.__class__.__name__, respectively, substitute the result for self.salt.   define the method signature with arguments self and value.
  substitute complain for append.
  define the method __new__ with 4 arguments: cls, name, bases and attrs.
  from django.core.exceptions import ImproperlyConfigured into default name space.
  remover the entry under the 'type' key of the attrs dictionary, substitute it for self.input_type, if the key doesnt exists,
  if ValueError exception is caught,
  define the method __init__ with 5 arguments: self, view_name, args, kwargs and asvar.
  try,
  if message is an instance of ValidationError class,
  call the method re.sub with 3 arguments: raw string '>\s+<', string '><' and result of the function force_text,
  do nothing,
  if app_name is an instance of BaseCommand,
  concatenate string '%0', width and string "d. %s", format the previous string with i incremented by 1,
  call the method settings.configure.
  if name is None,
  for every x in sequence of integer from integer 0 to length of data, append an empty string to a list, substitute the resulting list for initial.
  call function _checkLevel with an argument level, use the result as an argument for the method result.setLevel.
  if only_new is True,
  for every k and v in result of method the self.lists.   define the method __deepcopy__ with 2 arguments: self and memo set to None.
  if not,
  raise an TemplateSyntaxError exception with an argument string "'cycle' tag requires at least two arguments".
  string '%s' with self._func_path, self.args, self.kwargs, self.url_name, self.app_name and self.namespaces, respectively.   derive the class Resolver404 with Http404 as base class.
  define the method _resolve_lookup with 2 arguments: self and context.
  return tuple, consisting of first element of t converted to lowercase and True.
  substitute the result for value.   substitute value for the value under the name key of the self.cleaned_data dictionary.
  if value is not None,
  do nothing.
  err_msg is a string "Tried %s", where '%s' is replaced with tried.
  call the method pattern.resolve with an argument new_path, substitute the result for sub_match.
  if id_ is true,
  call the method connection.ops.sql_flush with arguments: style, tables, seqs and allow_cascade, substitute the result for statements.
  if length of x is equal to integer 0,
  f _serializers is false,
  return s.
  append child.data to the inner_text list.
  try,
  define the method as_hidden with 3 arguments: self, attrs set to None and unpacked dictionary kwargs.
  if output is true,
  if except UnicodeDecodeError exception is caught,
  call the function force_str with an argument: default if it is true, or if not, first element of the result of the function,
  from django.db import connection into default name space.
  iterator is iterator created out of stream_or_iterable.
  substitute record.exc_info for exc_info.
  mode is a string 'wb' is chunk is instance of the type bytes, otherwise mode is a string 'wt'.
  and param_dict, respectively.   evaluate the function callback with request and dictionary of parameters param_dict as the arguments, return the result.
  from django.conf import settings.
  from django.core.management.base import BaseCommand and CommandError into default name space.
  substitute error.message for message.
  otherwise if k equals a string 'bg',
  if years is true,
  call the method initial_form_count from the base class of the class BaseInlineFormSet, return the result.
  output and hidden_fields are both empty lists.
  substitute arg converted into a integer for length.
  from django.core.management.base import AppCommand into default name space.
  substitute i-th element of value for widget_value.
  call the method formfield.queryset.complex_filter with an argument limit_choices_to, substitute the result for formfield.queryset.
  if label_suffix is None,
  define the function urlunquote with an argument quoted_url.
  if self.path equals other.path, return boolean True, if not return boolean False.
  define the method __contains__ with 2 arguments: self and key.
  if self.object is not an instance of list type,
  bring integer 2 to the power of 10, multiply it by integer 64, substitute the result for DEFAULT_CHUNK_SIZE.
  substitute True for output_transaction.
  is length of list_ equals integer 0,
  get _iterlists attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable,
  derive the class StreamingBuffer from the object base class.
  define the method assignment_tag with 4 arguments: self, func set to None, takes_context set to None and name set to None.
  return an instance of NodeList class.
  call method request.build_absolute_uri, use the result as an argument for function call of iri_to_uri,
  if not,
  if not,
  define send_mail funtion with subject, message, from_email, recipient_list, fail_silently set to boolean False,
  and re.IGNORECASE, substitute the result for simple_url_re.   call the function re.compile with raw string '&(?!(\w+|#\d+);)', substitute the result for simple_email_re.
  if priority is false,
  if ImportError exception is caught.
  with unpacked list field_value as an argument, substitute the field pk of the result for obj_pk.   if not,
  substitute self.default_timeout for timeout.
  raise an StopIteration exception.
  yield string 'from %s import models' % self.db_module as the result, where "%s" is replaced with self.db_module.
  'Use SplitDateTimeField instead.', RemovedInDjango19Warning and stacklevel set to integer 2.   if length of value is not equal to integer 2,
  substitute func for self.func.
  python_2_unicode_compatible decorator,
  import module warnings.
  self.error_dict is an empty dictionary.
  replace '%s' in a string "Error: %s" with error_text, write it to self.stderr.
  get the value under the 'error_messages' key of the kwargs dictionary, if it exists substitute it for error_messages, if not,
  call the function _add_doc with 2 arguments: get_unbound_function and string """Get the function out of a possibly unbound function""".
  define the method empty_form with an argument self.
  convert per_page into an integer and substitute it for self.per_page.
  call the method self.initial_form_count, return the result initial_forms.
  find position of '-' in the index of the language, substitute the result for p.
  tuple containing 2 elements: list with an element validate_ipv4_address and return value of the function _ with an argument string,   'Enter a valid IPv4 address.' for 'ipv4' and tuple containing 2 elements: list with an element validate_ipv6_address,   and return value of the function _ with an argument string 'Enter a valid IPv6 address.' for 'ipv6'.   define the function ip_address_validators with arguments protocol and unpack_ipv4.
  get the value under the 'charset' key of the content_type_extra dictionary, substitute it for charset.
  if not,
  define the method reload with an argument self.
  define the method unsign with arguments self and signed_value.
  convert x into a string for every x in list of version elements up to the parts index, join the previous into a string separated by '.', assign the result to major.
  if value is Nan, or value is contained in return value of the Decimal called twice with string 'Inf' and with string '-Inf',
  define the method __init__ with 3 arguments: self, filepath and parsed.
  convert filename to lowercase, use the result as an argument for the call to the function os.path.splitext,
  derive the class DictConfigurator from the BaseConfigurator base class.
  define the function get_mod_func with an argument callback.
  derive the class BaseTemporalField from the base class Field class.
  if ValueError exception is caught,
  call the __init__ method of the base class of the class FilePathField, with arguments: choices set to an empty tuple,4
  "That port is already in use." for errno.EADDRINUSE and "That IP address can't be assigned-to." for errno.EADDRNOTAVAIL.   try,
  substitute DEFAULT_PORT for self.port.
  try,
  define the function add_metaclass with an argument metaclass.
  otherwise name is None.   if name is None,
  remove the entry under the 'stream' key of the self.json_kwargs dictionary.
  if not,
  derive the class TemplateLiteral from Literal base class.
  return boolean False.
  finally perform,
  call avoid_wrapping function with name2 modulus count2 as argument, call the ugettext with ', ' as argument, add previous 2 results, increment variable result by it.
  default set to False, help containing string 'Mark migrations as run without actually running them' as arguments.   call the method parser.add_argument with string '--list', string '-l', action contains string 'store_true', dest set to string 'list',
  define the method tzname with 2 arguments self and dt.
  define the method decompress with 2 arguments: self and value.
  'status_code' with value 403, and 'request with value request,   respectively use the previous as the arguments for the call to the logger.warning function.   call the method self.get_exception_response with request, resolver and integer 403 as the arguments, assign the result to response.
  derive the class VariableDoesNotExist form the base class Exception.
  derive the class OVERLAPPED from the Structure base class.
  define the method __eq__ with arguments self and other.
  raise an NotImplementedError exception with an argument string 'subclasses of BaseArchive must provide an extract() method'.
  decorator function register.filter with 2 arguments string "escape" and is_safe set to boolean True.
  if self.verbosity is greater or equal to integer 2,
  for every name in MEDIA_TYPES,
  if replaces filed of graph.nodes element at the plan_node index is true,
  call the method tempfile.mkstemp with dir set to self._dir, substitute result for fd and tmp_path, respectively.
  get the value under the 'database' key of the options dictionary, use it as the key to get the value from the connections dictionary, substitute the result for connection.
  if character '-' is not contained  in lang_code,
  if second_item is an empty list,
  return _standard_context_processors.
  where '%s' are replaced by sel.file and errors, respectively.   if command.verbosity is greater than integer 0,
  if self.field.label is None,
  if settings.USE_TZ is true and value is not None and call to the function timezone.is_naive with an argument value, evaluates to true,
  if nodelist.contains_nontext is true,
  define the method __init__ with 2 arguments: self and name.
  for every middleware_method in self._request_middleware,
  value under the TOTAL_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class,
  '<p%(html_class_attr)s>%(label)s %(field)s%(help_text)s</p>', error_row set to a a string '%s', row_ender set to a string '</p>',   help_text_html set to a string, <span class="helptext">%s</span>' and errors_on_separate_row set to boolean True.   define the method non_field_errors with an argument self.
  return an empty string,
  day_field is a string '%s_day'.
  self.verbose_name is a string 'cache entry'.
  derive the class DateField from the base class BaseTemporalField class.
  substitute settings.TEMPLATE_STRING_IF_INVALID with obj.
  call the function blankout with 2 arguments: p and 'F', write the result to out.
  define the method tag with an argument self.
  raise an ValueError with an argument string "Non-reversible reg-exp portion: '(?P%s'" formated with ch.
  host ends with '.' and host ends with pattern or host is equal to all but first elements of pattern,   substitute boolean true for match, otherwise substitute boolean False for match.   if match is true,
  substitute error_messages for value under the 'error_messages' key of attrs dictionary.
  define the function get_templatetags_modules.
  parser.compile_filter, substitute the result for expression.   return an instance of a RegroupNode class, created with 3 arguments target, expression and var_name.
  choice_input_class is None.
  if not,
  define the method exit_command with an argument self.
  call the method check_for_migrations with arguments: app_config and connection.
  define the method create_token with 3 arguments: self, token_string and in_tag.
  call the function re.compile with raw string '(\s+)', substitute the result for word_split_re.
  if self.verbosity is integer 1,
  decorator stringfilter,
  unpacked list args and unpacked dictionary kwargs.   define the method to_python with arguments self and value.
  decorator function register.filter with an argument is_safe set to boolean False.
  define the method setlist with 3 arguments: self, key and list_.
  return value of the method field.rel.to._meta.pk.to_python called with an argument v.   call the m2m_convert function with pk as argument, for every pk in field_value, substitute the value under the field.name key of the m2m_data dictionary.
  get value under the 'database' key of the options dictionary, substitute it for db.
  self.style.MIGRATE_HEADING, write the result to self.stdout.   write string "  You should commit this migration but leave the old ones in place;" to self.stdout.
  return decorator.
  call the function bytes with an argument value, return the result.
  define the function get_current_timezone_name.
  substitute self.lineno for token.lineno.
  call the method warnings.warn with 2 arguments: string "The syncdb command will be removed in Django 1.9" and RemovedInDjango19Warning.
  call the method self.make_key Whit key and version set to version as arguments, substitute the result for key.
  return self._cached_loaders.
  call the function format_html with 3 arguments string '<label{0}>{1}</label>', attrs and contents, substitute the result for contents.
  call the method data.getlist with an argument name, return the result.
  call the email_message.recipients method, if it evaluates to false,
  define the method __str__ with an argument self.
  third element of the result of the function sys.exc_info.   self._stream is an instance of BytesIO class created with an argument self._body.
  buffer_types is a tuple with 2 elements bytearray and memoryview.
  increment stats dictionary value under the MISSES key by integer 1.
  if self.choice_value is contained in self.value return boolean True, otherwise return boolean False.
  and sorted return value of the items of the attrs dictionary, and second time with 3 arguments: an empty string, string ' {0}',   and sorted list of boolean_attrs elements, concatenate the results and return the resulting list.   python_2_unicode_compatible decorator,
  call the method self._mark_post_parse_error.
  if VariableDoesNotExist exception is caught,
  call the method field.rel.to._default_manager.db_manager with db as argument, call the get_by_natural_key method on the result with,
  from django.core.management.base import BaseCommand and CommandError into default name space.
  from django.forms.widgets import SelectMultiple, HiddenInput, MultipleHiddenInput into default namespace.
  evaluate the boolean expression: locale is None and exclude is false and process_all is false,
  join statements into a string, separated by newlines, return it.
  define the method add_arguments with arguments self and parser.
  call the function normalize_newlines with an argument value, substitute the result for value.
  call the method self.format with an argument string '0', substitute the result for name.
  datetime.date and datetime.time.   define the function is_protected_type with obj as the only argument.
  define the method __iter__ with an argument self.
  call the method pending_references.setdefault with 2 arguments: refto and an empty list, extend the result with refs.
  try,
  integer_types is a tuple with 2 elements int and long.
  if commit is true,
  call the function re.compile with an argument raw string '(?:W/)?"((?:\\.|[^"])*)"', substitute the result for ETAG_MATCH.
  derive class CheckMessage from object base class.
  raise an KeyError with an argument string "Unknown language code %s and %s.", where '%s' is replaced with lang_code,
  return a string '%02d' formated with self.data.minute.
  if v is boolean False or v is None or v is an empty string, return boolean False, otherwise return boolean True.
  month_field is a string '%s_month'.
  input_type is a string 'url'.
  substitute base for m.
  respectively replace '%s' with key and elements of the resolved_path joined into a string, separated by ':'.   if not,
  from django.template.loader import BaseLoader into default name space.
  call the method handler.startDocument.
  import pickle.
  if chunk_size is false,
  return value converted into a list.
  if extra_attrs is true,
  return an instance of CommentNode class.
  call the function sql_create with 3 arguments: app_config, self.style and connection, substitute the result for statements.
  return string "(%s %r)", replace '%s' with self.if and '%r' with self.value.
  parser is an instance of CommandParser class, created with 3 arguments, None, usage as a string "%(prog)s subcommand [options] [args]" and add_help set to boolean False.
  value is boolean False.
  define the method enter_command with 3 arguments: self, command and token.
  if not,
  from threading import local into default name space.
  otherwise if ch equals a string '$',
  derive the class Command from the BaseCommand base class.
  return form.
  use it as an argument for the call to the method self.style.MIGRATE_HEADING, write the result to self.stdout.   for every migration in merge_migrations,
  try,
  dest set to string 'use_threading', default set to boolean True and help set to 'Tells Django to NOT use threading.'.   call the method parser.add_argument with 5 arguments: string '--noreload', action set to string 'store_false',
  if stream_or_string is an instance of six.string_types type.
  replace every occurrence of '"' in s with '&quot;'.
  filter out the results for which function os.path.isdir returns false, substitute the result for locale_dirs.   map the locale_dirs elements with mapping function os.path.basename, substitute the result for all_locales.
  call the method self.add_truncation_text with 2 arguments: if end_index is greater than zero, first end_index elements of text,
  define the method set with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
  define the function strftime with 2 arguments dt and fmt.
  call the fastcgi_help function, return the result.
  known_models is an empty list.
  from django.forms.utils import ErrorList into default name space.
  import module os.
  return the value under the language_code key of the self._regex_dict dictionary.
  use_natural_foreign_keys set to use_natural_foreign_keys, use_natural_primary_keys set to use_natural_primary_keys,   and stream set to stream, if the stream is true, otherwise stream set to self.stdout.   finally perform,
  call the method self.paginator.validate_number with self.number incremented by 1 as argument, return the result.
  if not,
  import module tarfile.
  increment weight by integer 2.
  substitute size for self.size.
  substitute record.request for request.
  if cache is an instance of BaseDatabaseCache,
  call the method self._is_expired with argument f, invert the boolean result and return it.
  get 'dependencies' attribute of the model.natural_key, substitute it for deps, if the attribute doesnt exist, deps in an empty list.
  if ch is not equal to string '\\'.
  return self.value.
  import module types.
  define the function set_script_prefix with an argument prefix.
  if opts.fields is None and opts.exclude is None,
  define the method _get_regex an argument self.
  define the method run_shell with an arguments self and shell set to None.
  _func_closure is a string "__closure__".
  get the value under the 'id' key of the final_attrs dictionary, substitute it for id_, if it doesnt exists, id_ is None.
  from django.core.management.base import BaseCommand, CommandError, CommandParser and handle_default_options into default name space.
  if not,
  derive class Command from CheckCommand base class.
  return self._upload_handlers.
  return it.   define the function iteritems with 2 arguments: d and unpacked dictionary  kw.
  substitute '%s' in string "No changes detected in apps '%s'" with the app_labels joined into a string, separated by string "', '",
  compile a regex from raw string '^(?P<prefix>[a-z]+)://(?P<suffix>.*)$', substitute it for CONVERT_PATTERN.
  object_data is an empty dictionary.
  define the method __init__ with 2 arguments: self and attrs set to None.
  DEFAULT_ATTACHMENT_MIME_TYPE, make_msgid, BadHeaderError and forbid_multi_line_headers into default name space.   __all__ is a list of strings, 'CachedDnsName', 'DNS_NAME', 'EmailMessage', 'EmailMultiAlternatives', 'SafeMIMEText',
  if best_doublecolon_start equals integer 0,
  define the method L with an argument self.
  import module datetime.
  call the function os.path.dirname with argument full_path, substitute the result for directory.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  if option_label is an instance of list or tuple,
  decorator function wraps with an argument fset.
  statement is an empty list.
  raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
  get the value under the key key of the self.cookies dictionary, substitute path for 'path' key of the returned dictionary.
  call the method MONTHS.index with 6 arguments: year, month, day, hour, min and sec, substitute the result for result.
  vary_on is an empty tuple.
  call the method router.db_for_write with argument self.cache_model_class, substitute the result for db.
  for every c in reversed order of self.__class__.__mro__,
  if callback is of instance types.FunctionType,
  append f.name to exclude.
  color_names is a tuple with 8 elements: strings 'black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan' and 'white'.
  call the function get_urlconf with an argument urlconf.
  define the method unget with arguments self and bytes.
  define the method __getitem__ with 2 arguments: self and header.
  define the function get_text_list with 2 arguments: list_ and last_word set to result of the function ugettext_lazy called with an argument string 'or'.
  convert col_name to lowercase, on the result call the method find with an argument string '__', if the result is greater of equal to integer 0,
  substitute self.none_value for self.year_none_value.
  content_subtype is a string 'plain'.
  get the identity of the self object, use it as a key to get the value of the memo dictionary, substitute result for it.
  if func doesnt have a attribute '__name__',
  if not,
  if autoescape is true,
  with all occurrences of '%s' replaced with app_name and model._meta.object_name, respectively.   if self.verbosity is greater or equal to integer 1,
  sign is a string '-'.
  from django.core.management.base import BaseCommand into default name space.
  if length of bits is lesser than integer 3 or second element of bits is not equal to string 'as',
  define the method build_potfiles with an argument self.
  call the method get_language, substitute the result for language_code.
  special_floats is an list with 3 elements, pos_inf, neg_inf and nan, all converted to strings.
  call the method parser.delete_first_token.
  call the method self.stdout.write with string "  No migrations to apply." as an argument.
  define the method delete_many with 3 arguments: self, keys, and version set to None.
  import module glob.
  from django.conf import settings, global_settings into default name space.
  "This will IRREVERSIBLY DESTROY all data currently in the %r database, and return each table to an empty state."   "Are you sure you want to do this?"Type 'yes' to continue, or 'no' to cancel: ", where '%s' is replaced with value under the 'NAME' key of the connection.settings_dict dictionary.   if not,
  call the function get_format_modules with an argument lang, for every module in the result,
  define the method __contains__ with 2 arguments: self and item.
  call the __init__ method from the base class of the JsonResponse class, called with arguments: content set to data,
  call the method self_cache.delete_multi with argument list containing keys mapped through function l.
  define the method make_writeable with arguments self and filename.
  description is a string "An instance of the '%s' class" with '%s' replaced by value of receiver.__class__.__name__.
  get attr attribute from the _module object, substitute it for value.
  self._post is an instance of QueryDict created with arguments: an empty string and encoding set to self._encoding,
  return initial.
  if cc contains item 'max-age' and kwargs contains item 'max_age',
  if not,
  call the method self.nodelist.render with an argument new_context, return the result.
  substitute length of text for end.
  from django.db import connections, router, transaction, DEFAULT_DB_ALIAS, IntegrityError and DatabaseError into default name space.
  evaluate the function timesince with d, now and reversed set to boolean true as arguments, return the result.
  mapping is a dictionary with 3 initial entries: 'a' for 'alpha', 'b' for 'beta' and 'c' for 'rc'.
  return get_git_changeset.cache.
  substitute first element of fks_to_parent for fk.
  call the function parse_http_date with an argument date, return the result.
  lineno_comment_map is an dictionary.
  call the method self.widget.decompress with an argument initial, substitute the result for initial.
  use it as an argument for the call to the mark_safe function, return the result.   define the method value_from_datadict with 4 arguments: self, data, files and name.
  return last element of value.
  call the function get_callable with an argument callback, return the result and an empty dictionary.
  if f equals to string '__pycache__',
  replace every occurrence of whitespaces in the previous result for '_', substitute the result for s.   call the function re.sub with 3 arguments: raw string '(?u)[^-\w.]', an empty string and s, return the result.
  if var is not an instance of six.string_types,
  define the method id_for_label with an argument self.
  raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a size() method'.
  define the method validate with arguments self and value.
  if exception of class Exception, as e, is caught,
  call the function widget, substitute the result for widget.
  from itertools import chain into default name space.
  from django.template.debug import DebugLexer and DebugParser.
  match the rawdata from the position k, with attrfind pattern, assign the result to the m.
  if match is true,
  raise TemplateSyntaxError(
  append migration.name to string ' - ', write it to self.stdout stream.
  if file_or_path has an attribute 'read',
  'App label of an application to synchronize the state.' as arguments.   call the method parser.add_argument with string 'migration_name', nargs set to charcter '?', help containing string,
  convert col_name to lowercase, substitute the result for new_name.
  return new_class.
  renamed methods is a tuple containing 3 elements: '_get_memcache_timeout', 'get_backend_timeout' and RemovedInDjango19Warning.
  if self._request_middleware is None,
  use the result as an argument for the call to the method filterer.addFilter.   if StandardError, renamed to e, exception is caught,
  get attribute 'error_dict' from the self object.
  return nothing.
  if ValueError exception is caught,
  return self.tag_function.
  if not,
  increment self.active_writers by integer 1,
  extend replaces list with migration.replaces,
  call the method self._create_mime_attachment with unpacked list alternative as an argument, use the result as an argument for the call to the msg.attach method.
  for every x is the range of integers from level to the integer 2, in the reversed order,
  endless loop,
  append f.name to exclude.
  define the method skip_past with 2 arguments: self and endtag.
  substitute the result for final_attrs.   call the method widget.render with 3 arguments: string created by concatenation from: name, string '_' and i, widget_value,
  try,
  if tt.tm_isdst is greater than intger 0, return boolean True, otherwise return boolean False.
  call the method parser.add_argument with 5 arguments: string '--noinput', action set to string 'store_false',
  define the method __eq__ with 2 arguments: self and other.
  if weight is greater or equal to integer 6,
  import module warnings.
  if not,
  otherwise if value is an instance of datetime.date,
  call the method self._coerce with an argument value, return the result.
  return an empty string.
  define the initialization function with self class instance, digits and sign defaulting to '-' as arguments.
  if six.PY2 is true,
  call the method Model._default_manager.db_manager with an argument db, on the result call the get_by_natural_key with,
  skip this loop iteration.
  with '%s' substituted for app_label, as arguments.   for every key in return vale of the method executor.loader.graph.leaf_nodes, check if the first element of key equals to app_label,
  where '%r' is replaced with name and filter_func, respectively.   define the method filter_function with 3 arguments: self, func and unpacked dictionary flags.
  sum sign, int_part and dec_part, return the result.
  join management_dir and string 'commands' into a file path name, substitute it for command_dir.
  trans_real._default is None.
  compare is a lambda function with arguments self, a and b, return value is boolean true if a is greater than b, otherwise is false.
  if not, self.dry_run is boolean False.   get the value under the 'merge' key of the options dictionary, if the key exists substitute it for self.merge,
  return boolean False.
  consume_next is boolean True.
  call the method self.normalize_col_name with 3 arguments column_name, used_column_names, is_relation, assign the result to att_name,  params and notes, respectively.
  define the method __getitem__ with 2 arguments: self and idx.
  from django.utils.timezone import is_aware into default name space.
  decorator function register.filter with an argument is_safe set to boolean False.
  substitute value under the "_wrapped" key of the self.__dict__ dictionary.
  if endblock.contents is not contained in acceptable_endblocks,
  if contents is not None,
  substitute string 'ascii' for encoding.
  if self.max_length is not None and length of file_name is grater than self.max_length,
  raise an InputStreamExhausted exception,
  return nothing.
  raise an ImproperlyConfigured with an argument string "Calling modelform_factory without defining 'fields' or 'exclude' explicitly is prohibited."
  if tag is contained in self.CDATA_CONTENT_ELEMENTS,
  substitute RadioChoiceInput for choice_input_class.
  DEFAULT_LOGGING is a dictionary with 5 initial entries: 1 for 'version', False for 'disable_existing_loggers',
  substitute number for value under the 'number' key of the kwargs dictionary.
  if ValueError, OverflowError or InvalidOperation exceptions are caught,
  name set to a string 'cache_key', max_length set to integer 255, unique set to boolean True and primary_key set to boolean True,   return value of the method models.TextField called with argument name set to a string 'value',   and return value of the method models.DateTimeField called with 2 arguments: name set to string 'expires' and db_index set to True.   table_output is an empty list.
  raise an MultiPartParserError with an argument string "Invalid content length: %r", where '%r' is replaced with content_length.
  unpack the manifest.values function return value and feed it to the itertools.chain function, create_models is a set containing chanied list.
  call the method self.expression, substitute the result for retval.
  define show_migration_list with self class instance, connection and app_names set to None, as arguments.
  define the method __exit__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
  if TypeError or VariableDoesNotExist exceptions are caught,
  return string "[Didn't have permission to include file]".
  self._done is boolean True.
  define the method compile_string with 2 arguments: template_string and origin.
  third element of the result of the function sys.exc_info.   define the method __init__ with an argument self.
  if app_config.models_module is None,
  do nothing.
  define lambda function that returns self.file.readlines field, use it as an argument for property function, put the result in readlines.
  call the os.makedirs function with directory and self.directory_permissions_mode as arguments.
  call the function get_format with an argument string 'DATE_INPUT_FORMATS', substitute the first element of the result for input_format.
  if ImportError, AttributeError, renamed to e, exceptions are caught,
  s is an instance of MLStripper class.
  choice and i, substitute the result for w.   call the function format_html with 3 arguments: self.inner_html, choice_value set to result of the function force_text,
  otherwise if total_forms is grater than self.max_num is grater or equal to integer 0,
  break from the loop execution,
  call parse.add_argument method, with string '--database', default set to DEFAULT_DB_ALIAS,
  if self._errors is None,
  substitute self.default_locale_path for locale_dir.
  substitute elements of middle from length of opening index to the end, for middle.
  call the method cursor.execute with string "INSERT INTO %s (cache_key, value, expires) VALUES (%%s, %%s, %%s)",
  encode is an lambda function with arguments k and v, return value is string '%s=%s', where '%s' is replaced with:
  define the function parse_cookie with cookie as the argument.
  call the method mimetypes.guess_extension with an argument content_type, substitute result for ext.
  call the method self.var1.resolve with 2 arguments: context and boolean True, substitute the result for val2.
  self.max_digits and self.decimal_places,   raise an ValidationError with 3 arguments: value under the 'max_whole_digits' key of the self.error_messages dictionary,
  call the method response.add_post_render_callback with _set_response_etag as argument.
  skip this loop iteration.
  if not,
  if LookupError exception is caught,
  from django.utils.encoding import force_str into default name space.
  if cookie is an empty string,
  substitute model._meta for opts.
  imported_objects is an empty dictionary.
  from django.core.exceptions import ValidationError into default name space.
  call the method self.configure_handler with an argument value under name key of handlers dictionary, substitute the result for handler.
  zip elements of result and result_args into a list of tuples, for every item and args in the result,
  self._wrapped.
  call the method path_rest.replace with arguments base_name and name, substitute the result for relative_dir.
  where '%s' is replaced with self.__class__.__name__.   for form in self.forms append form.cleaned_data to a list, return the resulting list.
  return an instance of EscapeBytes, created with an argument, reuslt of the call to the function bytes with an argument s.
  call the sio.readline method, substitute the result for line.
  return an empty dictionary.
  import module os.
  _localtime is an instance of LocalTimezone class.
  use global variable _localtime.
  append value under the 0 key of the opt_dict dictionary to code_list.
  filter all the subcommands element through the lambda function with an argument x, that evaluates the method x.startswith,
  call the method self.as_data, for every error in the result.
  options dictionary, if the key doesnt exists use settings.DEFAULT_CHARSET instead.   call the self.xml.startDocument method.
  substitute msg for self.msg.
  for every arg in args,
  define the method regex with an argument self.
  if name equals string "_wrapped",
  import module tempfile.
  format_html called with 3 arguments: string '<link href="{0}" type="text/css" media="{1}" rel="stylesheet" />',   return value of the function self.absolute_path called with an argument path and medium,   for every medium in media and for every path in value under the medium key of the self._css dictionary.   define the method absolute_path with 3 arguments self, path and prefix set to None.
  evaluate the fd.isatty method, if the result is true,
  import module time.
  from django.core.handlers.wsgi import WSGIHandler into default name space.
  call the function write with an argument arg.
  if data is not an instance of basestring,
  substitute the result for the value under the NON_FIELD_ERRORS key of form._errors dictionary.   delete entry from form.cleaned_data dictionary under the field key.
  instantiate class ModelFormOptions with argument: attribute 'Meta' of the new_class object. if it exists or None, if not,
  define the method prepare_value with 2 arguments: self and value.
  define the method to_python with arguments self and value.
  from django.utils.timesince import timesince and timeuntil into default name space.
  import module traceback.
  substitute WSGIServer for httpd_cls.
  from django.core.management import call_command into default name space.
  substitute instance._meta for opts.
  call the method logging._releaseLock.
  from django.db import connections and DEFAULT_DB_ALIAS into default name space.
  call the method self._assert_mutable.
  call the function get_format with an argument string 'DECIMAL_SEPARATOR', substitute the result for decimal_separator.
  if args is true,
  if attr equals any of the strings "__file__", "__name__" or "__path__" and self.mod is not contained in sys.modules,
  if exp is not None and exp is lesser than return value of the function time.time,
  call the method self.can_read.release.
  call the function import_string with backend if exists or settings.EMAIL_BACKEND if not, store the result into klass.
  define the method more with an argument self.
  call the function six.iteritems with an argument dict_, for every item in the result,
  substitute cls.__text_cast for cls.__text_cast.
  call the method fp.getvalue, return the result.
  substitute _itervalues for itervalues.
  if value under the 'description' key of the item dictionary is not None,
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  substitute NullBooleanSelect for widget.
  define the method close with an argument self.
  call the function func with an argument path.
  return boolean True.
  CONTEXT_SEPARATOR is a string "\x04".
  get _assertCountEqual attribute of the self object, call the result with 2 arguments: unpacked list args,
  call the method handler.upload_complete, substitute the result for retval.
  if field.rel.through._meta.auto_created is true,
  return an empty string.
  return plural_suffix.
  from __future__ import unicode_literals into default name space.
  _meta is class Options class instance initialized with table argument.
  if count2 does not equals to integer 0,
  if fields is not None and f.name is not contained in fields,
  substitute chr for unichr.
  from django.core.management.base import BaseCommand and CommandError into default name space.
  return length of value,
  call the method attrs.copy, substitute the result for self.attrs.
  substitute callable for callable.
  get 'localized_fields' attribute from the options object, if it exists substitute it for self.localized_fields,
  where '%r' is replaced with options.   if option equals a string 'with',
  from django.db import connections,  router,  transaction and DEFAULT_DB_ALIAS into default name space.
  content is an empty string.
  call the function self.format_subject with an argument subject, substitute the result for subject.
  msg is a tuple containing one initial entry: a string "WSGI application '%(app_path)s' could not be loaded; Error importing module: '%(exception)s'", where '%(app_path)s' is replaced by app_path and '%(exception)s' is replaced by e.
  call the self.make_bytes method with an argument chunk, for every chunk in value join the result to a bytes string,
  if self.attachments is true,
  define the method __init__, with 3 arguments: self, m2m and data set None.
  skip this loop iteration.
  call the method resolved_path.append with an argument ns.
  from django.utils import six into default name space.
  raise an exception.
  call the method prepare_value from the base class of the class ModelMultipleChoiceField, with an argument v,
  call the method self.connection.ehlo.
  skip this loop execution.
  in the string "ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_name=%s, namespaces=%s)", replace all the occurrences of:
  call the method signals.got_request_exception.send with sender set to type of the self class instance and request set to request.
  define the method pop with 3 arguments: self, k and unpacked list args.
  return dictionary created out of tuple elements k and printable representation of v,
  substitute new_value for value.
  from django.utils._os import safe_join into default name space.
  if part is contained in PALETTES,
  if neg is true,
  if character is not equal to a string '.',
  call the method new_file from the base class of the TemporaryFileUploadHandler class with arguments: file_name, unpacked list args and unpacked dictionary kwargs.
  'SafeMIMEMultipart', 'DEFAULT_ATTACHMENT_MIME_TYPE', 'make_msgid', 'BadHeaderError', 'forbid_multi_line_headers',   'get_connection', 'send_mail', 'send_mass_mail', 'mail_admins' and 'mail_managers'.   define function get_connection with backend set to None, fail_silently set to boolean False and dictionary kwds as arguments.
  derive the class Command from the AppCommand base class.
  do nothing.
  call the function Charset.Charset with argument string 'utf-8', substitute the result for utf8_charset.
  substitute the result for ipv4_re.   validate_ipv4_address is a instance of a RegexValidator class, created with 3 arguments: ipv4_re,
  tried is an empty list.
  try,
  define the method add_arguments with self class instance and parser as the arguments.
  BASE16_ALPHABET is a string '0123456789ABCDEF'.
  call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the item dictionary.
  if not,
  substitute self.entity_decl for parser.EntityDeclHandler.
  all the method command.create_parser with arguments: empty and name, substitute the result for parser.
  append node to nodelist.
  if field.rel.to._default_manager has an attribute 'get_by_natural_key',
  if initial is true, substitute it for self.initial, if not self.files is an empty dictionary.
  remove the first element from context.render_context.
  raise an SignatureExpired exception with an argument string 'Signature age %s > %s seconds', where '%s' is replaced by age and max_age, respectively.
  or with an empty string if its not, append the resulting string to full_statement.   append string ');' to full_statement.
  substitute value_not_found_exception for self.LibraryValueNotFoundException.
  substitute sys.platform for plat.
  call the function urlretrieve with arguments url and tempdir and filename joined into a file path, assign the result to the_path,  and info, respectively.
  from django.utils import formats into default name space.
  decorator stringfilter,
  return the result.   define the method unclosed_block_tag with 2 arguments: self and parse_until.
  from django.core.management.base import BaseCommand and CommandError into default name space.
  otherwise if name is not None and filter_func is None,
  call the method parse_bits with 8 arguments: parser, bits, params, varargs, varkw, defaults, takes_context and name,
  raise an CommandError with an argument string "Unable to find a locale path to store translations for file %s",
  raise an exception.
  self._done is boolean False.
  CRITICAL is integer 50.
  join elements of extra_classes into a string separated by whitespaces, return it.
  define the method bpython with an argument self.
  call the method unicodedata.combining with an argument char, if it evaluates to false,
  for every key in self.keyOrder,
  call the function warnings.warn with 2 arguments: "django.utils.tzinfo.FixedOffset will be removed in Django 1.9. "
  if LookupError or ImportError, renamed to e, exceptions are caught,
  if value equals k2 or text_value equals return value of the function force_text called with argument k2,
  call the function local, substitute the result _urlconf.
  if invalid_apps in not empty,
  import dummy_threading as threading.
  call the function _strip_once with an argument value, substitute the result for new_value.
  from django.core.management.sql import sql_all into default name space.
  return s.
  call the function _checkLevel with an argument level, use the result as an argument for the call to the method logger.setLevel.
  substitute second element of renamed_method for new_method_name.
  from django.core.management.sql import sql_indexes into default name space.
  insert none_value at the beginning of the choices list.
  call the import_string with app_path as an argument, return the result.
  substitute serialize_headers for __str__.
  try,
  from io import BytesIO,  StringIO and UnsupportedOperation into default name space.
  raise an exception.
  call the function warnings.warn with an argument string "Your TEMPLATE_LOADERS setting includes %r, but your Python installation
  do nothing.
  return obj.
  join the current working directory and name into a file path, substitute it for top_dir.
  append list containing string '--no-location' to self.msgattrib_options.
  substitute _itervalues for itervalues.
  call the method datetime.now, return the result.
  serializers is an empty dictionary.
  try,
  requires_system_checks is boolean False.
  derive the class BaseLoader from the object base class.
  if match is true,
  if self.loaded_object_count is greater than zero,
  if lang_code is true,
  if self.verbosity is greater or equal to integer 2.
  import module binascii.
  call the method unicodedata.normalize with 2 arguments: string 'NFKD' and value, encode the result with 2 arguments: string 'ascii',
  call the method executor.migration_plan wiht return value of te method executor.loader.graph.leaf_nodes as argument, substitute it for plan.
  id is None.
  if not,
  with return value of the function transaction.atomic with using set to db as arguments, perform the following,
  if IndexError exception is caught,
  call the method node.getAttribute with an argument string 'pk', use the result as the argument for the call to the method,  Model._meta.pk.to_python with, substitute the result for value under the Model._meta.pk.attname key of the data dictionary.
  substitute __setitem__ filed of the base class of the class SortedDict for super_set.
  call the function add_to_builtins with an argument string 'django.template.defaulttags'.
  define the method __len__ with argument self.
  get the value from the options dictionary under the key 'test_database', or False if the key dont exists, substitute it for self.test_database.
  write errors to self.stdout.
  call the method __init__ from the base class of the class BaseModelFormSet, with an argument unpacked dictionary defaults.
  for every choice in value,
  call the function block_re.match with an argument t.contents, substitute the result for bmatch.
  call the method FASTCGI_OPTIONS.copy, substitute the result for options.
  return nothing.
  get the element of chunks at the (i+1)-the index, assign it to the seconds2 and name2, respectively.
  if push is not None,
  if out_log is true,
  define the method __new__ with 4 arguments mcs, name, bases and attrs.
  call the method self.add_error with 2 arguments None and e.
  define the method __init__ with 2 arguments: self and filter_expression.
  decorator function register.filter with 2 arguments string "phone2numeric" and is_safe set to boolean True.
  get the value under the 'shutdown_message' key of the options dictionary, if it exists substitute it for shutdown_message,
  from .base import CommandError into default name space.
  raise an TemplateSyntaxError exception with an argument "'%s' received unexpected keyword argument '%s'",
  if not,
  if element of targets in first row and second column is None,
  'Nominates a database to print the SQL for. Defaults to the "default" database.' as the arguments.   define the method handle with self class instance and dictionary options as the arguments.
  if self.max_digits is not None and digits is grater than self.max_digits,
  write errors to self.stdout.
  create a tuple out of elements under the key field of the form.cleaned_data dictionary, add elements of date_data to it,
  break from the loop execution
  increment i by integer 1.
  _func_code is a string "func_code".
  define the method __call__ with 3 arguments: self, template_name and template_dirs set to None.
  define the method write with 4 arguments: self, msg, style_func with None and ending set None.
  derive class Options from the base class object.
  from django.apps import apps into default name space.
  do nothing.
  d is an instance of Decimal class created with an argument input_val.
  return yes.
  prepend string '_' to i converted to an string, append the result to the value under the 'id' key of the attrs_plus.
  call the method self.__bytes_cast, return the result.
  unpacked list args, unpacked dictionary kwargs.   substitute unpack_ipv4 for self.unpack_ipv4.
  if eather one of settings.USE_I18N or settings.USE_L10N is True,
  self._caches.caches is an empty dictionary.
  for every x in upload_handlers if x.chunk_size is true, append x.chunk_size to a list, substitute the result for possible_sizes.
  return results.
  if it does append it to targets list.   if not,
  import module ssl.
  value is an instance of ConvertingDict class, created with an argument value.
  from django.utils import timezone into default name space.
  call the method widget_attrs from the base class of the class CharField, with an argument widget, substitute the result for attrs.
  and help is a string "Only dump objects with given primary keys. Accepts a comma separated list of keys. "   "This option will only work when you specify one model.".   call the method parser.add_argument with 5 arguments: string '-o', string '--output', default is None, dest set to string 'output',
  from django.utils.module_loading import import_string into default name space.
  get 'getvalue' attribute of the self.stream object, if it exists and is callable,
  property decorator,
  call the function re.search with 3 arguments: string '^%s%s', with '%s' replaced for prefix_norm and pattern, respectively,
  call the method self.add_item_elements with 2 arguments: handler and item.
  while first element of s is equal to bytes string ';',
  help is a string, containing "Returns a list of the SQL statements required to return all tables in the database to the state they were in just after they were installed.".
  call the function urlsplit with an argument url, assign the result to scheme, netloc, path, query and fragment, respectively.
  call the self.to_python method with an argument value, strip the result of the whitespaces from the sides, substitute the result for value.
  msg is a string 'Module "%s" does not define a "%s" attribute/class' formated with dotted_path and class_name, respectively.
  I18N_MODIFIED is integer 2
  base36 is an empty list.
  define the function urlize with 4 arguments: text, trim_url_limit set to None, nofollow set to boolean False,
  delete entry under the attr key of obj_dict dictionary.
  if path_info is empty,
  call the function datetime.utcfromtimestamp with argument timeout, substitute it for exp.
  delete name attribute from self._wrapped object.
  if secure is true,
  call the function next_space_index with 2 arguments subject and i, substitute the result for i.
  call the method handler.endElement with an argument string 'author'.
  call the method translation.activate with an argument settings.LANGUAGE_CODE.
  ISO_8859_1 is a string 'iso-8859-1', UTF_8 is a string 'utf-8'.
  property decorator.
  call the method template_file.read, substitute it for content.
  call the function time_format with 3 arguments: value, string 'TIME_FORMAT' and use_l10n as use_l10n, return the result.
  if pytz is true, substitute pytz.utc for utc, otherwise substitute result of the function UTC for utc.
  raise an SuspiciousFileOperation exception with string "Attempted access to '%s' denied." as argument, replace '%s' with name.
  LOCK_EX is a hexadecimal 2.
  if self.number is lesser than self.paginator.num_pages, return boolean True, otherwise return boolean False.
  raise an exception of class NotImplementedError, with string 'subclasses of BaseCache must provide a delete() method' as argument.
  define the method parse with an argument self.
  substitute self.fk.rel.field_name for value under the 'to_field' key of the kwargs dictionary.
  get the value under the self.using key of the connections dictionary, call the method close on it.
  split ip_str by '::', substitute it for hextet.
  from decimal import Decimal, InvalidOperation, Context and ROUND_HALF_UP into default name space.
  if instance.pk is None,
  from the base class of the class TypedChoiceField.   define the method _coerce with arguments self and value.
  outer_html is a string '<ul{id_attr}>{content}</ul>'.
  if val equals an empty list.
  if not,
  call the function _add_doc with 2 arguments: b and string """Byte literal""".
  raise an AttributeError exception with an argument string "This method is available only on the view class.".
  call the method six.reraise 3 with arguments: os_err_exc_type, return value of the function os_err_exc_type,
  call the method context.update with an argument unpacked_vars.
  substitute file_size for self.file.size.
  for every key and value in parse_gsl with query_string is it exists or an empty string if not and keep_blank_values set to boolean True.
  return boolean False,
  call the method self.error with 2 arguments: token and string "Empty block tag", return the result.
  from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space.
  if other is contained in self.children, return boolean True, otherwise return boolean False.
  call the method setlistdefault from the base class of the class QueryDict, with arguments key and default_list, return the result.
  from django.utils.safestring import SafeData and mark_safe into default name space.
  return instance.
  if item is contained in self.dict, return boolean True, otherwise return boolean False.
  call the method pulldom.parse with arguments: self.stream and return value of the method self._make_parser,
  if string 'noreset' is not contained in opts,
  convert value into an floating point number, substitute it for value.
  derive the class TemplateSyntaxError form the base class Exception.
  raise an InvalidTemplateLibrary exception with an argument string "Template library %s not found, tried %s",
  if decimal_pos is not None,
  defaults is an dictionary with 3 initial entries: self.auto_id for 'auto_id', result of the call to the method self.add_prefix,
  from django.utils.encoding import force_str, force_text and iri_to_uri into default name space.
  import module json.
  decorator stringfilter,
  for every subwidget in the result,   yield subwidget, as the result of the generator.
  define the method __init__ with 6 arguments self, parent_widget, name, value, attrs and choices.
  convert self.option_list into a boolean, return the inverted value.
  otherwise if ch equals a string ')',
  return string 'th'.
  if output is true,
  define the method write_po_file with arguments self, potfile and locale.
  call the function endtag_re.sub with 2 arguments: an empty string and html, substitute the result for html.
  if six.PY2 is true,
  HttpResponse.content.setter property,
  return retval.
  join elements of name into a string, substitute it for param.
  if bytes_read is greater than rollback,
  call the method d.as_tuple, substitute the result for tupl.
  otherwise if maxsize is None,
  return boolean False.
  substitute connection.introspection.table_name_converter for converter.
  define the function custom_sql_for_model with 3 arguments: app_config, style and connection.
  use global variable invalid_var_format_string.
  call the get_complete_version function with version as argument, store the result in version.
  prefix set to None, current_app set to None.   if urlconf is None,
  if end is an instance of unicode,
  dest as a string 'interactive', default set to boolean True,   and help as a string 'Tells Django to NOT prompt the user for input of any kind.'.   define the method handle with 3 arguments: self, unpacked list app_labels and unpacked dictionary options.
  otherwise if char is contained in string 'dj',
  from django.utils.timezone import is_aware and utc into default name space.
  return input_val.
  if not, substitute self.auto_id for id_.   if if_is true attrs is an dictionary with initial entry: id_ for 'id', if not, attrs is an empty dictionary.
  substitute token for self.token.
  if refto is contained in known_models,
  return boolean True.
  call the function _generate_cache_key with request, method, headerlist, key_prefix as arguments, return the result.
  for every attr in tuple with 3 arguments: strings 'expects_localtime', 'is_safe' and 'needs_autoescape',
  called with an argument value, return the result.   call the function allow_lazy with 2 arguments: strip_spaces_between_tags, six.text_type, substitute the result for strip_spaces_between_tags.
  for every f in fields,
  if sum of the top and self.orphans is greater or equal to self.count,
  for every role in termcolors.PALETTES list at the index termcolors.NOCOLOR_PALETTE,
  if self.lookups is not None,
  define the method item_attributes with 2 arguments self and item.
  try,
  import module socket.
  define the method loaddata with 2 arguments self and fixture_labels.
  sum index and length of self._boundary, substitute the result for next.
  call the __init__ method of the base class of the QueryDict class.
  if not,
  if field is not contained in self.errors,
  return sys.modules dictionary value under the name key.
  query a string 'Please enter either "yes" or "no": ' and store the result in confirm.
  otherwise if safe_input is true,
  call the the method __init__ from the base class of the class Context.
  convert _serializers into a list, return it.
  from __future__ import unicode_literals into default name space.
  if qs.ordered is false,
  call the function force_bytes with an argument key_salt, substitute the result for key_salt.
  define the function convert_old_style_list with an argument list_.
  remove kwargs dictionary entry under the 'extra_context' key, if it exists substitute it for self.extra_context,
  sum major and sub, return the result converted to string.
  substitute sysid for self.sysid.
  define the function urlencode with 2 arguments value and safe set to None.
  for every header in headerlist,
  define the method incr with self class instance, key, delta set to integer 1 and version set to None, as arguments.
  return a string '"%s"' formated with etag, in which every occurrence of '\\' is replaced with '\\\\' and every occurrence of '"',
  if not,
  self.charset and self.content_type_extra.   define the method receive_data_chunk with arguments: self, raw_data and start.
  call the encode function on the Header class instance, created with arguments nm and encoding, substitute the result for nm.
  append orig_file to string '#: ', substitute it for new.
  decorator stringfilter,
  define the method list with an argument self.
  append ch to result.
  if file path of src and dst files are the same, return boolean True, otherwise return boolean False.
  import pickle.
  delete first 3 elements of bits.
  define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
  if argv is true, substitue it for self.argv, if not substitute sys.argv for self.argv.
  otherwise if end is not an instance of string type,
  substitute value under n key of dictionary d for d.
  return None.
  call the django.setup method.
  call the function decorator with 2 arugments: unpacked list args and unpacked dictionary kwargs, return the result.
  if bit starts with '_("' ot bit starts with "_('",
  define the method add with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
  delete entry under item key of self.dict dictionary.
  call the function get_script_prefix, substitute the result for prefix.
  return the printable representation of the self object converted to a list.
  raise an TemplateSyntaxError exception with an argument string '"with" in %r tag needs at least one keyword argument.',
  if call to the self.is_valid method evaluates to false or self.can_order is false,
  if not,
  raise an InvalidTemplateLibrary exception with an argument string ("Unsupported arguments to Library.filter: (%r, %r)",
  for every attachment in self.attachments,
  for every app_name and mode_list in return value of manifest.items method,
  called with an argument value under the 'pubdate' key of the item dictionary.   if value under the 'updateddate' key of the item dictionary is not None,
  return integer 0.
  call the function msvcrt.get_osfhandle with return value of the _fd(f) function as argument, substitute the result for hfile.
  return self.cleaned_data.
  from django.utils.translation import ugettext_lazy as _ and pgettext_lazy into default name space.
  call the function re.compile with an argument raw string "_\(((?:".*?")|(?:'.*?'))\)", substitute the result for constant_re.
  call the import_string with argument backend, substitute it for backend_cls.
  sum trail and closing, substitute the result for lead.
  get the value under the 'database' key of the options dictionary,
  define the method render with 4 arguments: self, attrs set to None, date_format set to None and time_format set to None.
  evaluate function Lock() assign the result to initLock.
  if value under the 'primary_key' key of the dictionary contained under the column_name key of the dictionary indexes is true,
  call the method self.handle_label with 2 arguments: label and unpacked dictionary options, substitute the result for label_output.
  try,
  import module datetime.
  define the method combine with 3 arguments: cls, date and time.
  slice the rawdata from i-th to the j-th element, replace with it '%r' in the string "bad end tag: %r", use it to call the method self.error.
  if field is contained in self.cleaned_data,
  derive the class MIMEMixin.
  if migrations_directory is not a directory,
  and pending_references append sql to the string '-- ', put the results in a list, extend alter_sql with the result.   if alter_sql,
  if value is an instance of datetime.time,
  raise CommandError exception with "More than one migration matches '%s' in app '%s'. Please be more specific.",
  define the method __init__ with 4 arguments: self, name, old and new set to None.
  call the method self.make_key with key and version set to version as arguments, substitute the result for key.
  call the function force_text with an argument text, substitute the result for text.
  substitute next for self.next.
  if settings.configured is true,
  call the function get_commands, substitute the value under the name key of the return value, for app_name.
  append a tuple containing 2 elemetns: model and deps, to skipped.
  call the function check_programs with an argument string 'xgettext'.
  from django.core.management.sql import check_for_migrations into default name space.
  if TypeError or ValueError exceptions are caught,
  define the function _parse_header_params with an argument s.
  if IndexError exception is caught,
  set attr.name attribute of the Module_six_moves_urllib_error object to attr.
  get the value of dictionary cache under the key cache_key, if key is not available return None, substitute it for headerlist.
  remove '__dict__' key from the orig_vars dictionary.
  call the function signals.request_finished.connect with argument cache.close.
  return it.   define the function iterlists with 2 arguments: d and unpacked dictionary  kw.
  FILTER_ARGUMENT_SEPARATOR is a string ':'.
  for every model in app_models,
  derive the class ConvertingDict from dict base class.
  return boolean True.
  call the method self.render, return the result.
  get attribute 'caches' from the self._caches if exists, otherwise get an empty dictionary, call the values method on the return value, return it.
  skip this loop execution.
  re.U and re.S, substitute the result for re_chars.   call the function re.compile with 2 arguments: raw string '<(/)?([^ ]+?)(?:(\s*/)| .*?)?>' and bitwise OR performed with 2 operands,
  call the method self.make_key with key and version set to version as arguments, substitute it for key.
  call the function unicodedata.combining with an argument char, if it evaluates to true,
  substitute context.autoescape for old_setting.
  define the method _existing_object with 2 arguments: self and pk.
  and var_arg, respectively.   if constant_arg is true,
  if not,
  response.streaming_content is an empty list.
  if the Exception exception is caught,
  self.vals is an empty list.
  values is an dictionary with 2 arguments: boolean False for 'false' and boolean True for 'true'.
  define the method __hash__ with an argument self.
  if template_dirs is false,
  raise an ContentNotRenderedError exception with an string 'The response content must be rendered before it can be iterated over.'.
  define the function register_serializer with 3 arguments: format, serializer_module and serializers set to None.
  define the method Z with an argument self.
  call the method self.endChannelElement with an argument handler.
  singular is an empty list.
  skip this loop iteration.
  import module datetime.
  define the method token_kwargs: bits, parser and support_legacy set to boolean False.
  from django.core import signals into default name space.
  id is a string "literal".
  define the function literals with 3 arguments: choices, prefix set to an empty string and suffix set to an empty string.
  from django.apps import apps into default name space.
  call the function random.randrange with argument integer 100000, substitute the result for randint.
  define the method got with 3 arguments: self, key and otherwise set to None.
  called with 2 arguments: singular and trimmed, write the result to out.   if not,
  from django.apps import apps into default name space.
  derive class BaseHandler, derive from the base class object, making this a new style class.
  get the index of the first occurrence of tagname, substitute it for i.
  if val is not None,
  if mw_instance has an attribute named 'process_view'.
  call the method clean with an argument value from the base class of the class TypedChoiceField, substitute the result for value.
  substitute value under the f.name key of the error_messages dictionary for value under the 'error_messages' key of kwargs dictionary.
  escaped is boolean False.
  call the function check_programs with 3 arguments: strings 'msguniq', 'msgmerge' and 'msgattrib'.
  substitute last element of colors for value under the 'bg' key of definition dictionary.
  l is lambda function with argument x, that calls the method self.make_key with x and version set to version as arguments.
  substitute fcntl.LOCK_EX for LOCK_EX.
  call the function BytesIO, substitute the result for self.file.
  if value,
  open file named file_or_path for reading, store the file object handle in file.
  get the value under the 'id' key of the self.field.widget.attrs dictionary, if the key exists substitute it for id_,
  if self.required is boolean true,
  bcc, connection, attachments, headers and cc.   if alternatives exists substitute it for self.alternatives, if not self.alternatives is an empty list.
  substitute result for value under the self.asvar key of context dictionary.
  if not,
  return an instance of IncludeNode class, created with 3 arguments: return value of the method parser.compile_filter,
  call the method token.split_contents, substitute the result without the first element for bits.
  where '%d' is replaced with i and '%s' is replaced with subject.   increment i by one.
  otherwise if form.has_changed method evaluates to true,
  define the method E with an argument self.
  create list out of email_messages, return the length of the list.
  return res.
  while length of line is grater than max_width,
  from django.conf import settings into default name space.
  from django.apps import apps into default name space.
  otherwise if o is an instance of decimal.Decimal object,
  if length of bits is not equalt to integer 2,
  define the function _dec with an argument func.
  if self has an attribute '_object_dict',
  define the function main, with main_func, args defaulting to None and kwargs defaulting to None as arguments.
  if self.body is true,
  from _systemrestart import SystemRestart into default name space.
  from django.utils.safestring import mark_safe into default name space.
  try,
  define the method __init__ with 2 arguments: self and content.
  call method request.META.get with arguments header and None.
  call the function is_aware with an argument date, if it evaluates to true,
  define the method __deepcopy__ with arguments self and memo.
  define the method validate_domain_part with arguments self and domain_part.
  instantiate class Header with 3 arguments: value, string 'utf-8', maxlinelen set to sys.maxsize, call the encode method on it,
  return endpos.
  substitute self.deleted_forms for forms_to_delete.
  call the method loader.get_migration with arguments app_label and migration_name, substitute the result for migration.
  get the value under the 'use_natural_keys' key of the options dictionary, substitute the result for use_natural_keys.
  if self.data.hour is greater than integer 11,
  code set to a string 'invalid_choice'.   return value.
  call the method fp.write with an argument string '%d\n", with '%d' replaced by os.getpid function return value.
  call the six.reraise function with 3 arguments: DeserializationError, DeserializationError called with an argument e,
  set use_workaround to boolean True if current_version tuple elements are smaller than the tuple (2,7,3), respectively,
  if not,
  open filepath file in read mode, with file descriptor as fp, perform,
  string 'ascii' and errors set to a string 'replace', return the result.   define the method render with 2 arguments: self and context.
  return string 'StopUpload: Consume request data, then halt.'.
  call the method parser.next_token, substitute the result for token.
  call the function six.reraise with 3 arguments: ImproperlyConfigured, ImproperlyConfigured(msg) and third element of return value of the function sys.exc_info.
  get converter attribute from self object, substitute it for converter.
  define the method __init__ with 5 arguments: self, name, value, attrs and choices.
  call the method regex.search with 2 arguments: text and pos.
  define the method _get_choices with an argument self.
  return f.
  write shutdown_message to self.stdout file stream.
  sum _cached_filenames, new_filenames and _error_files, store the result in filelist.
  if exception of the class Exception, as e, is caught,
  substitute empty bytes string for self.buffer.
  if not,
  call the function lazy_number with 5 arguments: ngettext, str, singular set to singular, plural set to plural,
  call the function get_template with 2 arguments: template_name and dirs, substitute the result for t.
  define the method get with 4 arguments, self class instance, key, default set to None and version set to None.
  call the self.path with argument name, substitute it for name.
  call the method self._new_gnu_trans with an argument localedir, substitute the result for translation.
  substitute 3 successive elements starting from the i-th index of pieces for first, lang and priority, respectively.
  for every tag in open_tags,
  if extensions is false, substitute it for exts, otherwise exts is a list containing string 'js'.
  substitute email_backend for self.email_backend.
  from django.utils import six into default name space.
  call the function warnings.warn with an argument,
  instantiate Archive class with an argument path, with it renamed to archive, perform,
  derive the class DefaultCacheProxy from the base class object.
  call the function _trans.deactivate, return the result.
  if not,
  define the method add_css with arguments self and data.
  if self._cached_loaders is false,
  if not,
  define the function memoize with 3 arguments: func, cache and num_args.
  if buffer_ is not None,
  sum max_num and DEFAULT_MAX_NUM, substitute the result for absolute_max.
  define the method save_new_objects with 2 arguments: self and commit set to boolean True.
  define the method to_python with arguments self and value.
  return self.id.
  substitute content_type for self.content_type.
  if not,
  raise an AttributeError exception with an argument string: "'%s' object has no attribute 'cleaned_data'",
  call the method parser.invalid_block_tag with 3 arguments: endblock, 'endblock' and acceptable_endblocks.
  increment key by item.
  call the method self.indent with argument integer 2.
  convert return value of the function time.time to an integer, increment timeout by it.
  join into a file path: path and string '%s.pot', where '%s' is replaced with self.domain converted into a string, substitute the result for pot_path.
  if exception OSError occurred,
  define the method __init__ with 3 arguments: self, msg and params set to an empty tuple.
  substitute gettext for gettext_noop, gettext_lazy and _.
  derive the class OrderedSet from the object base class.
  try,
  if obj_list is None,
  and elements of parse_until joined into a string, separated by string ', '.   raise an self.source_error exception with 2 arguments: source and msg.
  status code set to integer 400, return the result.   call the method self.get_exception_response with the request, resolver and integer 400 as the arguments, substitute the result for response.
  use the result as an argument for function call of force_bytes, use the result as an argument for calling the method hashlib.md5,   put the result in url.   substitute the '%s' in string 'views.decorators.cache.cache_header.%s.%s' with key_prefix and result of the function call,
  substitute complain for sort.
  call the method instance.save.
  substitute string "Enter at least one %s.", with '%s' replaced by label, for missing_args_message.
  convert number into an integer and substitute it for number
  call the method msg_data.decode with argument charset, substitute the result for msg_data.
  if NameError exception is caught,
  call the method sys.stderr.write with an argument string "fork #2 failed: (%d) %s\n", formated with e.errno and e.strerror.
  multiply 10 to the power of 200, with itself, substitute the result for pos_inf.
  if not,
  e.args is a tuple, containing 1 element: string "Problem installing fixtures: %s", where '%s' is replaced with e.
  floor the division of delta by integer 100 and delta by integer 400, sum the two results, multiply integer 6 by it, substitute the result for off.
  if item_date is true,
  substitute the result for value under the self.target_var key of the context dictionary.   return an empty string.
  if stream is true,
  if self.can_delete is true and call to the function self._should_delete_form with an argument form evaluates to true,
  return an empty list.
  substitute empty string, word an empty string for lead, middle and trail, respectively.
  try,
  if not,
  if ValueError exception is caught,
  return result.
  for every f in return value of the return value of the method chain.from_iterable called with argument:
  both_after is an list with an element instance of Tok class, created with 2 arguments: string 'other' and raw string '.'.
  put elements of validators.EMPTY_VALUES to a list, substitute the result for empty_values.
  if self.verbosity is greater or equal to integer 2,
  from django.db.backends.utils import typecast_timestamp into default name space.
  raise an NotImplementedError exception with an argument string 'subclasses of LabelCommand must provide a handle_label() method'.
  property decorator,
  help is an string "Introspects the database tables in the given database and outputs a Django model module.".
  import module os.
  derive the class DateFormat from the base class TimeFormat.
  if value is an instance of six.string_types class,
  call the method self.make_key with key and version set to version as arguments, substitute the result for key.
  get 'errors' attribute from fp object, substitute it for errors if it exists, if not errors is None.
  define the method getlist with 3 arguments: self, key and default set to None.
  from django.utils.html import conditional_escape, escapejs, escape, urlize as _urlize, linebreaks, strip_tags, avoid_wrapping,
  from django.utils import six into default name space.
  yield string 'day' as an return value of the generator.
  call the data.decode method with a string 'latin-1' as an argument, use the result as an argument for the call to the json.load function, return the result.
  decorator stringfilter,
  if months is true,
  substitute out for self._out.
  call the method self.error_class with an argument e.error_list, substitute the result for self._non_form_errors.
  call the method os.path.dirname with an argument potfile, join the result, locale and string 'LC_MESSAGES' into a file path,
  s is an instance of StringIO class.
  remove first 7 elements form template.
  return an empty string.
  bring intger 2 to integer 32, decrement the result by 1, multiply it with hlen, if dklen is greater than the previous result,
  prepend '.' to the i-th element of the ext_list.
  substitute EmailInput for widget.
  return result.
  define the method __init__ with 3 arguments: self, args and kw.
  substitute the resulting string for choices.   call the method self.create_select with 6 arguments: name, self.year_field, value, day_val, choices and self.day_none_value,
  call the method self.port.isdigit, if it evaluates to false,
  get 'WSGI_APPLICATION' attribute from the settings, substitute it for app_path.
  get the value under the ns key of the resolver.app_dict dictionary, substitute it for app_list.
  substitute self.auto_id for auto_id.
  if not,
  compile the regex "^https?://" with an argument re.I, substitute it for absolute_http_url_re.
  extra_params is an instance of the class OrderedDict.
  return the result of the method self._html_output, called with 5 arguments: normal_row to a string,
  create a printable representation of self.urlconf_name object, substitute it for urlconf_repr.
  call the handle function with dictionary pair of elements options from the base class of the class Command.
  define the method get_available_name with arguments self and name.
  new_result is an empty list.
  substitute field for self.field.
  split file by ',' character, apply on its every element a lambda function which takes an argument x,
  call the method base64.b64decode with an argument chunk, substitute the result for chunk.
  define the method __init__ with arguments: self, unpacked list args and unpacked dictionary kwargs.
  if string '()' is contained in config,
  substitute length of self.loopvars for num_loopvars.
  call the function _helper with 2 arguments: sublist_item and tabs incremented by 1, substitute the result for sublist.
  define the method end_object with arguments self and obj.
  import module sys.
  append rel_to to string 'ForeignKey(, substitute the result for field_type.
  define the method __repr__ with an argument self.
  if value under the 'load_initial_data' key of the options dictionary is true,
  define the method T with an argument self.
  attrs as attrs_plus and choices as choice_label.   substitute self.choice_input_class for sub_ul_renderer.choice_input_class.
  where '%s' is replaced with subject.   if i-th element of subject is '"' character or "'" character,
  append iso_input to val.
  with arguments al and mn, for every al, mn in executor.loader.graph.forwards_plan method return value called with 2 arguments:   migration.app_label, migration.name, only if al equals migration.app_label.   if self.verbosity is greater than integer 0 or self.interactive is true,
  for every model in not_installed_models,
  if level is not None,
  self._files is an instance of MultiValueDict class.
  define the method content with 2 arguments: self and value.
  if the 'fake' key doesnt exists set fake to boolean False, as arguments.   call the method emit_post_migrate_signal with created_models, self.verbosity, self.interactive and connection.alias as arguments.
  substitute self.choices for self.widgetchoices.
  if supported_platform is False or is_a_tty is False,
  OPERATORS is an dictionary with 12 initial entries: result of the function inflix called with 2 arguments, integer 6,
  get the value under the 'database' key of the options dictionary, use it as the key to get the value from the connections dictionary, substitute the result for connection.
  decorator register with argument Tags.compatibility.
  self._done is boolean True.
  call the function self.path with argument name, use the result as an argument for the call to the function os.path.getatime,
  raise the exception.
  skip this loop iteration.
  define the method clean with arguments self and value.
  put the double qoutes around encoded.
  append value to the '-', substitute it for value.
  raise an CommandError with an argument string "Cache table '%s' could not be created.\nThe error was: %s.", replace '%s' with:
  replace '%s' in string '%s_%s' with id_ and i, substitute the result for input_attrs dictionary value under the 'id' key.
  call the method self.extract with an argument absolute_path, return the result.
  ch2 is None.
  call the encode function on the Header class instance, created with arguments val and encoding, substitute the result for val.
  call the methof model_dependencies.reverse.
  call the method __init__ from the base class of the ExternalReferenceForbidden class.
  substitute include_html for self.include_html.
  encoding.setter decorator,
  result of the function force_text with an argument option_label, return the result.   define the method render_options with 3 arguments: self, choices and selected_choices.
  values is an dictionary created with result of the method val.resolve called with an argument context, for key,
  raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a listdir() method'.
  call the method parser.add_argument with 2 arguments: string 'name' and help set to string 'Name of the application or project.'.
  if app_config.models_module is None,
  if not,
  raise an exception.
  call the method parser.next_token, substitute the result for token.
  from django.conf import settings into default name space.
  define the method __bool__ with an argument self.
  that occupies minimum 4 places within a string, and app_label, substitute the result for new_migration.   writer is instance of MigrationWriter class, created with new_migration argument.
  from django.utils.deprecation import RemovedInDjango19Warning into default name space.
  if start is greater than upto,
  define the method get with 4 arguments: self, key, default set to None and version set to None.
  return boolean False.
  call the method value.serializable_value with an argument self.to_field_name, return the result.
  import module sys.
  self._files is an instance of MultiValueDict class.
  if parse_until is None,
  substitute context for block.context.
  call the method connection.cursor, substitute the result for cursor.
  if self._wrapped is empty,
  substitute SafeText for SafeUnicode.
  help is a string "Prints the CREATE TABLE, custom SQL and CREATE INDEX SQL statements for the given model module name(s).".
  allowed_schemes is an list containing 3 elements: strings 'http', 'https' and 'ftp'.
  convert idx to an integer, substitute it or n.
  internal_use_only is a boolean False.
  for app_config in return value of the method apps.get_app_configs,
  if six.PY2 is true,
  replace every occurrence of ' ' in value for '\xa0', return the result.
  define the method has_key with self class instance, key and version defaulting to None as arguments.
  join elements of lines into a string, separated by newline characters, substitute it for msgs.
  from __future__ import unicode_literals into default name space.
  call the parse_args method with arguments args and namespace, from the base class of the CommandParser class.
  if self.selected_fields is None or field.attname is contained in self.selected_fields
  raise an exception.
  call the method __init__ from the base class of the class DateTimeBaseInput, with an argument attrs.
  where '%s' is replaced with node.nodeName and attr.   try,
  if urlconf is None,
  substitute elements of self.validators list for result.validators.
  create a list with count decremented by 1 number of last element of result elements, extend list result with it.
  substitute render_value for self.render_value.
  utf8_charset.body_encoding is None.
  from django.core.management.base import AppCommand into default name space.
  call the function os.getpid, substitute it for pid.
  define the method __init__ with self, server and params as arguments.
  for every name in self.fields,
  define the method __init__ with 2 arguments: self and iterable set to None.
  call the method self.compress with an argument clean_data, substitute the result for out.
  if length of t equals to integer 2,
  if objects_in_fixture equals integer 0,
  slice the rawdata to obtain substring from i-th to j-th element, use it as the argument for the method call to the self.handle_data.
  format string '%+03d%02d' with hour and minute, append it to time_str, return the result.
  join comment elements into a string, substitute it for content.
  nofollow_attr is an empty string.
  raise an TemplateDoesNotExist exception with an argument string "No template names provided".
  try,
  call the method fixture.close.
  print opt_label to the standard output.
  derive the class SlugField from the base class CharField class.
  do nothing.
  from django.db.migrations.loader import MigrationLoader into default name space.
  otherwise if '\\' is contained in path,
  define the method c with an argument self.
  define the function infix with 2 arguments bp and func.
  raise an ValueError exception with an argument string 'Unable to configure filter %r: %s' formated with name and e.
  where '%s' is replaced with command and result of the function get_text_list called with an argument list,   with p converted into a string and surrounded with single quotes for every p in parse_until.   call the method self.error with 2 arguments: token and string "Invalid block tag: '%s'", where '%s' is replaced with command,
  from __future__ import unicode_literals into default name space.
  decorator stringfilter,
  field url of the value under the 'enclosure' key of the item dictionary for 'url',   field length of the value under the 'enclosure' key of the item dictionary for 'length',   and field mime_type of the value under the 'enclosure' key of the item dictionary for 'type'.   for every cat in value under the 'categories' key of the item dictionary,
  tuple with 2 elements: '[' and ']', tuple with 2 elements: '&lt' and '&gt', tuple with 2 elements: '"' and '"',   and tuple with 2 elements: '\'' and '\''.   DOTS is a list with 6 elements: strings '&middot;', '*', '\u2022', '&#149;', '&bull;' and '&#8226;'.
  if self.addr is true,
  skip this loop iteration.
  if lib is false,
  substitute the result for formatted_subject.   return first 989 elements of formatted_subject.
  call the function six.text_type with an argument number, use the result as an argument for the call to the function mark_safe,
  with unpacked list field_value as an argument, substitute the result for obj.   get the field.rel.field_name from the obj, substitute it for obj_pk.
  derive the class Promise from the object base class.
  register.tag decorator,
  define the method add_aguments with arguments self and parser.
  if directory is not an directory,
  define the function luhn with an argument candidate.
  derive the class ModelForm from the base class in the return value of the method six.with_metaclass, called with 2 arguments:
  if end is None
  self._max_entries is integer 300.
  substitute space for sep.
  substitute old_mod for self.mod.
  from django.utils import six into default name space.
  return the_path.
  substitute val for value under the k key of dictionary d.
  substitute settings.TEMPLATE_STRING_IF_INVALID for current,
  if last_row doesnt ends with row_ender,
  for every x in self.fields call the method x.__deepcopy__ with an argument memo, put the result into a tuple, substitute it for result.fields.
  raise an TemplateSyntaxError exception with an argument string "'%s' takes at least one argument (path to a view)",
  skip this loop iteration.
  endless loop,
  derive the class MultiValueDict from the dict base class.
  import module django.
  from django.utils.encoding import force_str into default name space.
  if use_l10n is true, or use_l10n is None and settings.USE_L10N is true,
  call the method parser.add_argument with 3 arguments: string 'args', metavar set to self.label and nargs set to '+'.
  if cursor is true and return value of the function connection.introspection.table_name_converter called with an arugment:  model._meta.db_table is contained in table_names,
  call the method self.template.resolve with an argument context, substitute the result for template.
  import module smtplib.
  return a string '%02d' formated with the result of the function self.g.
  call the function runfastcgi with an argument all the elements, except the first from the sys.argv list.
  if not,
  substitute the result for value under the index key of the hextets dictionary.   get the value under the index key of the hextets dictionary, if it is false,
  extend list kw with a list with 5 elements: d.hour, d.minute, d.second, d.microsecond and d.tzinfo.
  try,
  if settings.USE_L10N is true,
  for every name in formatters,
  define the method prepare_value with 2 arguments: self and value.
  models is a string 'models'
  define the method __setattr__ with self, name and value as arguments.
  call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
  if refto is contained in seen_models,
  convert the result into a lowercase, append it to ret_ip.   join elements of ret_ip into a string separated with ':', return it.
  substitute col_name for value under the 'db_column' key of the field_params dictionary.
  define the method __nonzero__ with an argument self.
  return ZERO.
  self._container is an list.
  pk_key is a string "%s-%s", where '%s' is replaced with: result of the method self.add_prefix called with an argument i,
  if self.argv, without the first element is contained in a tuple with 2 entries: a list containing a string '--help',
  lbp is integer 0.
  remove first element from name, substitute the result for used.
  define the method start_object with argument self and obj.
  join source list elements from last till pos indexes into a string, substitute the result for piece.
  get the value under the '__slots__' key of the orig_vars dictionary, substitute it for slots.
  tpl is an string "ExternalReferenceForbidden(system_id='{}', public_id={})".
  decorator function register.filter with an argument is_safe set to boolean False.
  if self.help is true,
  from django.utils.deprecation import RenameMethodsBase and RemovedInDjango19Warning into default name space.
  raise an ValidationError with 2 arguments: value under the 'invalid_time' key of the self.error_messages dictionary and code set to string 'invalid_time'.
  call the method self.validate_name with 2 arguments: app_name and string 'app'.
  call the function dateformat.time_format with 2 arguments: value and result of the function get_format called with 2 arguments:
  open file old_file_name in read bytes mode, with file descriptor as f,
  if app_list_value is not None,
  define the function int2byte with an argument i.
  return nothing.
  substitute value under the 'liveserver' key of the options dictionary for value under the 'DJANGO_LIVE_TEST_SERVER_ADDRESS' key of the os.environ dictionary.
  call the context.push method, with the result, perform,
  return self.empty_value.
  from django.utils import six into default name space.
  'Enter a list of values.' for 'invalid' and return value of the function _ called with an argument string,   'Enter a complete value.' for 'incomplete'.   define the method __init__ with arguments self, fields set to an empty ilst, unpacked list args and unpacked dictionary kwargs.
  where '%s' is replaced with parsed.scheme.   call the __init__ method from the base class of the HttpResponseRedirectBase class, called with arguments: unpacked list args,
  substitute first element of app_list for ns.
  define the function rjust with 2 arguments value and arg.
  substitute value under the database key of the connections dictionary for connection.
  instantiate Variable class, with an argument constant, call the resolve method with an empty dictionary as an argument, substitute the result for var_obj.
  import module tempfile.
  try,
  get config dictionary element under 'loggers' key, if it exists substitute it for loggers, if not, loggers is EMPTY_DICT.
  if old_method is false and new_method is true,
  if widget is an instance of type class,
  get the value under the 'verbosity' key of the options dictionary, convet it to an integer and substitute for self.verbosity.
  call the method self._lib.Client with self._servers and pickleProtocol set to pickle.HIGHEST_PROTOCOL as arguments, substitute the result for self._client.
  if transfer_encoding is not None,
  left justify value under the 'microsecond' key of the kw dictionary, in the field of width 6, fill the rest with '0',
  return self.object_list element at index.
  raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to 'required'.
  substitute self.external_entity_ref_handler for parser.ExternalEntityRefHandler.
  otherwise if value under the "author_name" key of the item dictionary is true,
  define the method f with an argument self.
  substitute kwargs for self.kwargs.
  call the method popitem from the base class of the class SortedDict, substitute the result for result.
  if error is an instance of ValidationError,
  use the result as an argument for the call to the b64_encode function, return the result.   define the function get_cookie_signer with an argument salt set to string 'django.core.signing.get_cookie_signer'.
  define the method _cull with argument self.
  replace '%s' in string "Creating %s\n" with new_path, write it to the self.stdout stream.
  get the first space decremented with integer 1 elements from string line, append newline character to it, and yield the result.
  do nothing.
  substitute settings.ROOT_URLCONF for urlconf.
  if length of self._cache is greater or equal to self._max_entries,
  and expires is not an instance of datetime.   convert expires to a string, use it as argument for the call to the function typecast_timestamp, substitute the result for expires.
  derive class BaseCOnverter from object base class.
  derive the class HttpResponseForbidden from the HttpResponse base class.
  if not,
  if connector is true, substitute it for self.connector, otherwise substitute self.default for self.connector.
  if fixture_name is not equal to string 'initial_data' and fixture_files is false,
  substitute _itervalues for values.
  python_2_unicode_compatible decorator
  if key is not contained in self,
  substitute lookup_view for original_lookup,
  common_ancestor is None.
  call the method json.__version__.split with an argument '.', if the result is respectively greater than list containing strings '2', '1' and '3',
  lexer is an instance of JsLexer class.
  call the function re.compile with an argument raw string "^((?:'[^']*'|[^'])*?)--.*$", substitute the result for comment_re.
  define the function get_wsgi_application.
  and self.absolute_max, return the result.   if not,
  if ch equals a string '<',
  if m is true,
  and autoescape as autoescape, use the result as an argument for the call to the function mark_safe, return the result.   decorator function register.filter with an argument is_safe set to boolean False.
  try,
  append name to self._changed_data list.
  try,
  substitute context for self.context.
  if value is an instance of six.string_types,
  define the method _isdst with 2 arguments: self and dt.
  raise a ValidationError exception with 2 arguments: return value of the function _ called with an argument string 'Enter a valid IPv4 or IPv6 address.', and code set to string 'invalid'.
  substitute stat.st_mtime for mtime.
  return self.paginator.count.
  call the function warnings.warn with 3 arguments: string "django.utils.tzinfo will be removed in Django 1.9. "
  if rhs is an instance of SafeData.
  define the function get_complete_version with in argument version, defaulting to None.
  derive the class ClearableFileInput from the FileInput base class.
  default set to DEFAULT_DB_ALIAS and help as a string 'Nominates a database to introspect. Defaults to using the "default" database.'.   define the method handle with 2 arguments: self and unpacked dictionary options.
  self._changed_data is None.
  output is an empty list.
  return data.
  write item to zfile stream.
  define the method emit with 2 arguments: self and record.
  call the function timeuntil with 2 arguments value and arg, return the result.
  if self.verbosity is greater than integer 1,
  and unpacked dictionary kwargs, return the result.   property decorator,
  try,
  call the function fastcgi_help with an argument string "ERROR: Implementation must be one of prefork or thread.", return the result.
  if not,
  return new_value.
  call the method parser.parse with an argument tuple with 2 elements strings: 'else' and 'endfilter', substitute the result for nodelistelse.
  call the method field.widget.value_from_datadict with 3 arguments: self.data, self.files, prefixed_name, substitute the result for data_value.
  utility is a instance of ManagementUtility class, created with an argument argv.
  from django.core.exceptions import ValidationError into default name space.
  if ImportError exception is caught,
  if name starts with an string '.',
  from __future__ import unicode_literals into default name space.
  define the method deleted_forms with an argument self.
  call the method parser.add_argument with 3 arguments: string 'directory', nargs set to '?' and help set to string 'Name of the application or project.'.
  break the loop execution.
  call the method parser.add_argument with 6 arguments: string '--extension', string '-e', dest set to string 'extensions',
  __all__ is an list containing 6 elements: 'get_cache', 'cache', 'DEFAULT_CACHE_ALIAS', 'InvalidCacheBackendError',
  call the function email_message.message, substitute the result for message.
  call the method kwarg_re.match with an argument first element of bits, substitute the result for match.
  do nothing.
  call the function validate_ipv6_address with an argument value.
  substitute key for result.key.
  try,
  get the value under the 'no_startup' key of the options dictionary, if it evaluates to false,
  from collections import OrderedDict into default name space.
  formated with t.contents, filemsg and t.lineno.   otherwise if t.token_type equals TOKEN_VAR,
  call the function datetime.date.today, substitute the year field of the result for this_year.
  import module types.
  subclass is a class named Migration, sub classed from migrations.Migration base class, with fields dependencies set to an empty list,
  if not,
  if size is not empty,
  if IndexError exception is caught,
  sum punctuation and trail, substitute the result for trail.
  if illegal_formatting is true,
  get the value under the lang_code key of the _BROWSERS_DEPRECATED_LOCALES dictionary, substitute it for replacement.
  for every node in self.nodelist_loop,
  if m is not None,
  derive the class ErrorDict from the dict base class.
  if value is false,
  append to list, a tuple with 2 elements: f and value under the f key of field_dict dictionary, use the resulting list as an argument,   for the creation of the instance of OrderedDict class, substitute it for field_dict.   return field_dict.
  for every e in self, append convert e to an string and append it to string '* ',
  define the method __init__ with 4 arguments: self, query_string is None, mutable is boolean False and encoding set to None.
  call the function timedelta with an argument seconds as negative time.timezone, return the result.
  if there is no match,
  if InvalidTemplateLibrary, renamed to e, exception is caught,
  if value is true,
  try,
  if 'media' is not contained in attrs,
  yield value under key key of self dictionary.
  resolved_kwargs is dictionary with elements: return value of the method v.resolve called with an argument context, for k,
  call the method self.split_leading_dir with an argument name, substitute the second element of the result for name.
  for every middleware_method in self._template_response_middleware,
  app_list is an instance of OrderedDict class, created with an argument a tuple containing elements: app_config and None,
  call the method queryset.none, substitute it for qs.
  with different 3 string arguments, the others are results of the call to the function MovedModule called with 3 string arguments.   for every attr in _moved_attributes,
  get fist max_width incremented by 1 elements from line, find index of the first occurrenece of whitespace from the right side,
  from django.utils.module_loading import import_string into default name space.
  call the method gettext_module.GNUTranslations.__init__ with an argument self.
  call the method self._lock, with the result,
  append string " Got this from the '%s' variable." to error_msg, where '%s is replaced with self.parent_name.token.
  otherwise if func is callable,
  rise an KeyError exception with an argument key.
  return response.
  call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS,
  for every loc in locales,
  substitute object for Iterator.
  define the method utcoffset with 2 arguments: self and dt.
  compile a regex from raw string '^\[\s*(\w+)\s*\]\s*', substitute it for INDEX_PATTERN.
  trans_real._translations is an empty dictionary.
  f.required is boolean False.
  return an empty string.
  return value under the key key of dictionary in last element of self.dicts.
  LUHN_ODD_LOOKUP is a tuple with 10 elements: integers 0, 2, 4, 6, 8, 1, 3, 5, 7 and 9.
  _ is an empty dictionary.
  instantiate class ChunkIter with 2 arguments: self._input_data and self._chunk_size, use it to instantiate LazyStream class,
  slice the list from the i-th to the endpos-th element, substitute it for self.__starttag_text.
  define the method content with self and value.
  where '%s' is replaced with migration_name and app_label.   migrations_to_squash is a list created dynamically with elements: return value of the method executor.loader.get_migration called,
  return self.new_objects.
  otherwise if t.contents equals a string 'comment',
